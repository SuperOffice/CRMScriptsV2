import { AxiosRequestConfig } from 'axios';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * This agent can be used to import data into the system
 */
export interface IImportAgent {
    PreviewImport(request: carriers.Import_PreviewImportRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ImportLine[]>;
    PreviewImport(importLines: carriers.ImportLine[], columnDefinition: string[], culture: string, context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ImportLine[]>;
    SaveImport(request: carriers.Import_SaveImportRequest, webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    SaveImport(importLines: carriers.ImportLine[], columnDefinition: string[], createSelection: boolean, culture: string, context: string, webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    CreateDefaultImportLine(request: carriers.Import_CreateDefaultImportLineRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ImportLine>;
    CreateDefaultImportLine(countColumns: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ImportLine>;
    CreateErpImportData(request: carriers.Import_CreateErpImportDataRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ImportErpData>;
    CreateErpImportData(restriction: carriers.ArchiveRestrictionInfo[], columns: string[], connectionId: number, erpActorType: enums.ErpActorType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ImportErpData>;
}
/**
 * This agent can be used to import data into the system
 */
export declare class ImportAgent extends base.WebApiBase implements IImportAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    private _PreviewImport;
    /**
     * Preview the import
     * @param request - ImportLines, ColumnDefinition, Culture, Context
     * @returns An array of the the rows that can be imported, manipulated according to Import rules given
     */
    PreviewImport(request: carriers.Import_PreviewImportRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ImportLine[]>;
    /**
     * Preview the import
     * @param importLines - The rows that will be manipulated and according to Import rules
     * @param columnDefinition - An array of the columndefinitions, like firstname, lastname, ...
     * @param culture - The current culture used in the import. Used to match language specific strings
     * @param context - Optional context for the import.
     * @returns An array of the the rows that can be imported, manipulated according to Import rules given
     */
    PreviewImport(importLines: carriers.ImportLine[], columnDefinition: string[], culture: string, context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ImportLine[]>;
    private _SaveImport;
    /**
     * Do the actual import
     * @param request - ImportLines, ColumnDefinition, CreateSelection, Culture, Context
     * @returns First part: the id of the selection created after the import, 0 if no selection is created. Second part: The number of rows actually imported
     */
    SaveImport(request: carriers.Import_SaveImportRequest, webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    /**
     * Do the actual import
     * @param importLines - The rows that will be imported
     * @param columnDefinition - An array of the columndefinitions, like firstname, lastname, ...
     * @param createSelection - true if a selection of the imported entities shall be made
     * @param culture - The current culture used in the import. Used to match language specific strings
     * @param context - Optional context for the import.
     * @returns First part: the id of the selection created after the import, 0 if no selection is created. Second part: The number of rows actually imported
     */
    SaveImport(importLines: carriers.ImportLine[], columnDefinition: string[], createSelection: boolean, culture: string, context: string, webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    private _CreateDefaultImportLine;
    /**
     * Create a new empty import row with x count of values
     * @param request - CountColumns
     * @returns A new ImportLine
     */
    CreateDefaultImportLine(request: carriers.Import_CreateDefaultImportLineRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ImportLine>;
    /**
     * Create a new empty import row with x count of values
     * @param countColumns - The count of values that will can be filled out
     * @returns A new ImportLine
     */
    CreateDefaultImportLine(countColumns: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ImportLine>;
    private _CreateErpImportData;
    /**
     * Populates the ImportLines and columnDefs basedfrom erp system
     * @param request - Restriction, Columns, ConnectionId, ErpActorType
     * @returns The ImportLines and ColumnDefs
     */
    CreateErpImportData(request: carriers.Import_CreateErpImportDataRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ImportErpData>;
    /**
     * Populates the ImportLines and columnDefs basedfrom erp system
     * @param restriction - Archive restrictions.
     * @param columns - Columns.
     * @param connectionId - Connection id for Erp system
     * @param erpActorType - Erp Actor type
     * @returns The ImportLines and ColumnDefs
     */
    CreateErpImportData(restriction: carriers.ArchiveRestrictionInfo[], columns: string[], connectionId: number, erpActorType: enums.ErpActorType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ImportErpData>;
}
//# sourceMappingURL=ImportAgent.d.ts.map