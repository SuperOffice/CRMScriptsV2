import { AxiosRequestConfig } from 'axios';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Selections, entities, members and tasks
 */
export interface ISelectionAgent {
    CreateDefaultMailMergeSettings(): Promise<carriers.MailMergeSettings>;
    CreateDefaultMailMergeTask(): Promise<carriers.MailMergeTask>;
    CreateDefaultSelectionEntity(): Promise<carriers.SelectionEntity>;
    SaveSelectionEntity(entity: carriers.SelectionEntity): Promise<carriers.SelectionEntity>;
    DeleteSelectionEntity(SelectionEntityId: number): Promise<void>;
    GetSelectionEntity(selectionEntityId: number): Promise<carriers.SelectionEntity>;
    CreateSelectionEntity(request: carriers.Selection_CreateSelectionEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    CreateSelectionEntity(targetTableName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    CreateContactSelectionFromSelection(request: carriers.Selection_CreateContactSelectionFromSelectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    CreateContactSelectionFromSelection(selectionId: number, name: string, targetSelectionType: enums.SelectionType, copyMembers: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    CreateTemporaryContactSelectionFromContactPersonIds(request: carriers.Selection_CreateTemporaryContactSelectionFromContactPersonIdsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    CreateTemporaryContactSelectionFromContactPersonIds(contactPersonIds: carriers.ContactPersonId[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    CreateTemporaryContactSelectionFromProjectMembers(request: carriers.Selection_CreateTemporaryContactSelectionFromProjectMembersRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    CreateTemporaryContactSelectionFromProjectMembers(projectId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    CopyContactSelectionMembers(request: carriers.Selection_CopyContactSelectionMembersRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    CopyContactSelectionMembers(fromSelectionId: number, toSelectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetRecipientStatistics(request: carriers.Selection_GetRecipientStatisticsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RecipientStatistics>;
    GetRecipientStatistics(selectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RecipientStatistics>;
    GetRecipientStatisticsFromProjectMembers(request: carriers.Selection_GetRecipientStatisticsFromProjectMembersRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RecipientStatistics>;
    GetRecipientStatisticsFromProjectMembers(projectId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RecipientStatistics>;
    GetRecipientStatisticsFromContactPersonIds(request: carriers.Selection_GetRecipientStatisticsFromContactPersonIdsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RecipientStatistics>;
    GetRecipientStatisticsFromContactPersonIds(contactPersonIds: carriers.ContactPersonId[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.RecipientStatistics>;
    AddContactSelectionMembers(request: carriers.Selection_AddContactSelectionMembersRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    AddContactSelectionMembers(selectionId: number, contactPersonIds: carriers.ContactPersonId[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RemoveContactSelectionMembers(request: carriers.Selection_RemoveContactSelectionMembersRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RemoveContactSelectionMembers(selectionId: number, contactPersonIds: carriers.ContactPersonId[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RemoveContactSelectionMembersFromIds(request: carriers.Selection_RemoveContactSelectionMembersFromIdsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RemoveContactSelectionMembersFromIds(selectionId: number, selectionMembersIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    AddContactSelectionMembersFromSearch(request: carriers.Selection_AddContactSelectionMembersFromSearchRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    AddContactSelectionMembersFromSearch(selectionId: number, storageKey: string, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    RemoveContactSelectionMembersFromSearch(request: carriers.Selection_RemoveContactSelectionMembersFromSearchRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    RemoveContactSelectionMembersFromSearch(selectionId: number, storageKey: string, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    CreateTemporaryContactSelection(webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    CreateTemporaryContactSelectionFromSelectionMemberIds(request: carriers.Selection_CreateTemporaryContactSelectionFromSelectionMemberIdsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    CreateTemporaryContactSelectionFromSelectionMemberIds(selectionId: number, selectionMemberIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    AddRemoveContactSelectionMemberInterests(request: carriers.Selection_AddRemoveContactSelectionMemberInterestsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    AddRemoveContactSelectionMemberInterests(selectionId: number, addCompanyInterests: number[], removeCompanyInterests: number[], addContactInterests: number[], removeContactInterests: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    EditContactSelectionMemberDetails(request: carriers.Selection_EditContactSelectionMemberDetailsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    EditContactSelectionMemberDetails(selectionId: number, selectionMemberEditValues: carriers.SelectionMemberEditValues, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GenerateFollowUps(request: carriers.Selection_GenerateFollowUpsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GenerateFollowUps(selectionId: number, appointmentEntity: carriers.AppointmentEntity, associateId: number, saveOnContactOwner: boolean, uniqueContact: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    ExportSelectionMembers(request: carriers.Selection_ExportSelectionMembersRequest, webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    ExportSelectionMembers(selectionId: number, templateName: string, useContacts: boolean, webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    ExportSelectionMembersWithOrderBy(request: carriers.Selection_ExportSelectionMembersWithOrderByRequest, webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    ExportSelectionMembersWithOrderBy(selectionId: number, templateName: string, useContacts: boolean, orderBy: string, webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    StartMailMerge(request: carriers.Selection_StartMailMergeRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    StartMailMerge(settings: carriers.MailMergeSettings, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetDuplicateRulesStatus(request: carriers.Selection_SetDuplicateRulesStatusRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetDuplicateRulesStatus(rules: carriers.DuplicateRule[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetDuplicates(request: carriers.Selection_GetDuplicatesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DuplicateEntry[]>;
    GetDuplicates(name: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DuplicateEntry[]>;
    GetDuplicateRules(webapi_options?: base.WebApiRequestOptions): Promise<carriers.DuplicateRule[]>;
    CreateNewEntry(request: carriers.Selection_CreateNewEntryRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    CreateNewEntry(duplicate: carriers.DuplicateEntry, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    DeleteContacts(request: carriers.Selection_DeleteContactsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteContacts(selectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    AddSelectionMembers(request: carriers.Selection_AddSelectionMembersRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    AddSelectionMembers(selectionId: number, ids: number[], webapi_options?: base.WebApiRequestOptions): Promise<number>;
    RemoveSelectionMembers(request: carriers.Selection_RemoveSelectionMembersRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RemoveSelectionMembers(selectionId: number, selectionMemberIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RemoveSelectionMembersById(request: carriers.Selection_RemoveSelectionMembersByIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RemoveSelectionMembersById(selectionId: number, ids: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    AddSelectionMembersFromSearch(request: carriers.Selection_AddSelectionMembersFromSearchRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    AddSelectionMembersFromSearch(selectionId: number, storageKey: string, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    RemoveSelectionMembersFromSearch(request: carriers.Selection_RemoveSelectionMembersFromSearchRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    RemoveSelectionMembersFromSearch(selectionId: number, storageKey: string, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    CopySelectionMembers(request: carriers.Selection_CopySelectionMembersRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    CopySelectionMembers(fromSelectionId: number, toSelectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    CreateTemporarySelectionFromIds(request: carriers.Selection_CreateTemporarySelectionFromIdsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    CreateTemporarySelectionFromIds(ids: number[], targetTableNumber: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    CreateSelectionFromSelection(request: carriers.Selection_CreateSelectionFromSelectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    CreateSelectionFromSelection(selectionId: number, name: string, targetSelectionType: enums.SelectionType, copyMembers: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    CreateContactSelectionFromShadowSelection(request: carriers.Selection_CreateContactSelectionFromShadowSelectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    CreateContactSelectionFromShadowSelection(selectionId: number, name: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    DeleteEntities(request: carriers.Selection_DeleteEntitiesRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteEntities(selectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetParentCombinedSelections(request: carriers.Selection_GetParentCombinedSelectionsRequest, webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    GetParentCombinedSelections(selectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    GetSelectionMembersArchiveRows(request: carriers.Selection_GetSelectionMembersArchiveRowsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    GetSelectionMembersArchiveRows(selectionId: number, select: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    GetSelectionShadowMembersArchiveRows(request: carriers.Selection_GetSelectionShadowMembersArchiveRowsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    GetSelectionShadowMembersArchiveRows(selectionId: number, select: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    GetDynamicSelectionCriteria(request: carriers.Selection_GetDynamicSelectionCriteriaRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionInfo[]>;
    GetDynamicSelectionCriteria(selectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionInfo[]>;
    SetDynamicSelectionCriteria(request: carriers.Selection_SetDynamicSelectionCriteriaRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionInfo[]>;
    SetDynamicSelectionCriteria(selectionId: number, criteria: carriers.ArchiveRestrictionInfo[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionInfo[]>;
    SetDynamicSelectionCriteria2(request: carriers.Selection_SetDynamicSelectionCriteria2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionInfo[]>;
    SetDynamicSelectionCriteria2(selectionId: number, filter: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionInfo[]>;
    SetDynamicSelectionCriteria3(request: carriers.Selection_SetDynamicSelectionCriteria3Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionInfo[]>;
    SetDynamicSelectionCriteria3(selectionId: number, criteria: carriers.ArchiveRestrictionInfo[], filter: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionInfo[]>;
    DeletePersons(request: carriers.Selection_DeletePersonsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeletePersons(selectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetDynamicSelectionCriteriaGroups(request: carriers.Selection_GetDynamicSelectionCriteriaGroupsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionGroup[]>;
    GetDynamicSelectionCriteriaGroups(selectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionGroup[]>;
    SetDynamicSelectionCriteriaGroups(request: carriers.Selection_SetDynamicSelectionCriteriaGroupsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionGroup[]>;
    SetDynamicSelectionCriteriaGroups(selectionId: number, criteria: carriers.ArchiveRestrictionGroup[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionGroup[]>;
    GetSelectionForFind(request: carriers.Selection_GetSelectionForFindRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionForFind>;
    GetSelectionForFind(entityName: string, typicalSearchId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionForFind>;
    GetSelectionSummaries(request: carriers.Selection_GetSelectionSummariesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionSummaryItem[]>;
    GetSelectionSummaries(selectionIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionSummaryItem[]>;
    UpdateTypicalSearch(request: carriers.Selection_UpdateTypicalSearchRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    UpdateTypicalSearch(searches: carriers.TypicalSearches, webapi_options?: base.WebApiRequestOptions): Promise<string>;
}
/**
 * Selections, entities, members and tasks
 */
export declare class SelectionAgent extends base.WebApiBase implements ISelectionAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * Set default values into a new MailMergeSettings.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultMailMergeSettings(options?: base.WebApiRequestOptions): Promise<carriers.MailMergeSettings>;
    /**
     * Set default values into a new MailMergeTask.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultMailMergeTask(options?: base.WebApiRequestOptions): Promise<carriers.MailMergeTask>;
    /**
     * Set default values into a new SelectionEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultSelectionEntity(options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    SaveSelectionEntity(entity: carriers.SelectionEntity, options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    DeleteSelectionEntity(SelectionEntityId: number, options?: base.WebApiRequestOptions): Promise<void>;
    GetSelectionEntity(selectionEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    private _CreateSelectionEntity;
    /**
     * Create (but do not save) a new selection entity, for the current user and the given target table; other fields populated as by CreateDefaultSelectionEntity()
     * @param request - TargetTableName
     * @returns The new SelectionEntity, which has not yet been saved
     */
    CreateSelectionEntity(request: carriers.Selection_CreateSelectionEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    /**
     * Create (but do not save) a new selection entity, for the current user and the given target table; other fields populated as by CreateDefaultSelectionEntity()
     * @param targetTableName - The name of the target table, such as 'contact' or 'appointment'; any table for which Selection functionality is enabled
     * @returns The new SelectionEntity, which has not yet been saved
     */
    CreateSelectionEntity(targetTableName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    private _CreateContactSelectionFromSelection;
    /**
     * Creates a new selection based on selection members from an existing selection.
     * @param request - SelectionId, Name, TargetSelectionType, CopyMembers
     * @returns Returns the newly created SelectionEntity.
     */
    CreateContactSelectionFromSelection(request: carriers.Selection_CreateContactSelectionFromSelectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    /**
     * Creates a new selection based on selection members from an existing selection.
     * @param selectionId - The id of the selection to copy members from.
     * @param name - The name of the new selection.
     * @param targetSelectionType - The type of ContactSelection to create. The type can be static or dynamic. If the original selection to copy from is static, the SelectionType can only be static. If the original selection is dynamic, both a static and dynamic selection can be created.
     * @param copyMembers - If true, the members from the original selection will be added to the newly created selection.
     * @returns Returns the newly created SelectionEntity.
     */
    CreateContactSelectionFromSelection(selectionId: number, name: string, targetSelectionType: enums.SelectionType, copyMembers: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    private _CreateTemporaryContactSelectionFromContactPersonIds;
    /**
     * Creates a temporary selection with members from a collection of ContactPerson id&apos;s.
     * @param request - ContactPersonIds
     * @returns Returns the newly created SelectionEntity.
     */
    CreateTemporaryContactSelectionFromContactPersonIds(request: carriers.Selection_CreateTemporaryContactSelectionFromContactPersonIdsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    /**
     * Creates a temporary selection with members from a collection of ContactPerson id&apos;s.
     * @param contactPersonIds - A collection of ContactPersonId to copy into the temporary contact selection as members.
     * @returns Returns the newly created SelectionEntity.
     */
    CreateTemporaryContactSelectionFromContactPersonIds(contactPersonIds: carriers.ContactPersonId[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    private _CreateTemporaryContactSelectionFromProjectMembers;
    /**
     * Creates a temporary selection with members from an existing project.
     * @param request - ProjectId
     * @returns Returns the newly created SelectionEntity.
     */
    CreateTemporaryContactSelectionFromProjectMembers(request: carriers.Selection_CreateTemporaryContactSelectionFromProjectMembersRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    /**
     * Creates a temporary selection with members from an existing project.
     * @param projectId - The id of the project to add members from.
     * @returns Returns the newly created SelectionEntity.
     */
    CreateTemporaryContactSelectionFromProjectMembers(projectId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    private _CopyContactSelectionMembers;
    /**
     * Copy contact selection members from selection into an existing selection.
     * @param request - FromSelectionId, ToSelectionId
     * @returns
     */
    CopyContactSelectionMembers(request: carriers.Selection_CopyContactSelectionMembersRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Copy contact selection members from selection into an existing selection.
     * @param fromSelectionId - The id of the selection to copy members from.
     * @param toSelectionId - The id of the selection to copy members to.
     * @returns
     */
    CopyContactSelectionMembers(fromSelectionId: number, toSelectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetRecipientStatistics;
    /**
     * Returns a RecipientStatistics object with a count of addresses, emailaddresses and emailaddresses.
     * @param request - SelectionId
     * @returns Returns a RecipientStatistics object.
     */
    GetRecipientStatistics(request: carriers.Selection_GetRecipientStatisticsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RecipientStatistics>;
    /**
     * Returns a RecipientStatistics object with a count of addresses, emailaddresses and emailaddresses.
     * @param selectionId - The id of the selection to get the statistics for.
     * @returns Returns a RecipientStatistics object.
     */
    GetRecipientStatistics(selectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RecipientStatistics>;
    private _GetRecipientStatisticsFromProjectMembers;
    /**
     * Returns a RecipientStatistics object with a count of addresses, emailaddresses and emailaddresses based on members in a project.
     * @param request - ProjectId
     * @returns Returns a RecipientStatistics object.
     */
    GetRecipientStatisticsFromProjectMembers(request: carriers.Selection_GetRecipientStatisticsFromProjectMembersRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RecipientStatistics>;
    /**
     * Returns a RecipientStatistics object with a count of addresses, emailaddresses and emailaddresses based on members in a project.
     * @param projectId - The id of the project to get the member statistics for.
     * @returns Returns a RecipientStatistics object.
     */
    GetRecipientStatisticsFromProjectMembers(projectId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RecipientStatistics>;
    private _GetRecipientStatisticsFromContactPersonIds;
    /**
     * Returns a RecipientStatistics object with a count of addresses, emailaddresses and emailaddresses based on contact and persons in a collection of ContactPersonId.
     * @param request - ContactPersonIds
     * @returns Returns a RecipientStatistics object.
     */
    GetRecipientStatisticsFromContactPersonIds(request: carriers.Selection_GetRecipientStatisticsFromContactPersonIdsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RecipientStatistics>;
    /**
     * Returns a RecipientStatistics object with a count of addresses, emailaddresses and emailaddresses based on contact and persons in a collection of ContactPersonId.
     * @param contactPersonIds - A collection of ContactPersonId to get the statistics for.
     * @returns Returns a RecipientStatistics object.
     */
    GetRecipientStatisticsFromContactPersonIds(contactPersonIds: carriers.ContactPersonId[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.RecipientStatistics>;
    private _AddContactSelectionMembers;
    /**
     * Adds the collection of ContactPersonId as members to the static selection
     * @param request - SelectionId, ContactPersonIds
     * @returns
     */
    AddContactSelectionMembers(request: carriers.Selection_AddContactSelectionMembersRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Adds the collection of ContactPersonId as members to the static selection
     * @param selectionId - The id of the selection where to members will be added to.
     * @param contactPersonIds - A collection of ContactPersonId to add to the selection.
     * @returns
     */
    AddContactSelectionMembers(selectionId: number, contactPersonIds: carriers.ContactPersonId[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _RemoveContactSelectionMembers;
    /**
     * Removes members from the selection as  specified in the collection of ContactPersonId.
     * @param request - SelectionId, ContactPersonIds
     * @returns
     */
    RemoveContactSelectionMembers(request: carriers.Selection_RemoveContactSelectionMembersRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Removes members from the selection as  specified in the collection of ContactPersonId.
     * @param selectionId - The id of the selection where to members will be removed.
     * @param contactPersonIds - A collection of ContactPersonId to remove from the static selection.
     * @returns
     */
    RemoveContactSelectionMembers(selectionId: number, contactPersonIds: carriers.ContactPersonId[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _RemoveContactSelectionMembersFromIds;
    /**
     * Removes members from the selection using a collection a selectionmember id&apos;s. Members can only be removed from single selection.
     * @param request - SelectionId, SelectionMembersIds
     * @returns
     */
    RemoveContactSelectionMembersFromIds(request: carriers.Selection_RemoveContactSelectionMembersFromIdsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Removes members from the selection using a collection a selectionmember id&apos;s. Members can only be removed from single selection.
     * @param selectionId - The id of the selection where to members will be removed.
     * @param selectionMembersIds - An array of selectionmember id's to remove from the selection.
     * @returns
     */
    RemoveContactSelectionMembersFromIds(selectionId: number, selectionMembersIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _AddContactSelectionMembersFromSearch;
    /**
     * Adds members to the selection from the search result.
     * @param request - SelectionId, StorageKey
     * @returns Number of members added
     */
    AddContactSelectionMembersFromSearch(request: carriers.Selection_AddContactSelectionMembersFromSearchRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Adds members to the selection from the search result.
     * @param selectionId - The id of the selection to add members
     * @param storageKey - Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search
     * @returns Number of members added
     */
    AddContactSelectionMembersFromSearch(selectionId: number, storageKey: string, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _RemoveContactSelectionMembersFromSearch;
    /**
     * Removes members from the selection using the search result.
     * @param request - SelectionId, StorageKey
     * @returns Number of members removed
     */
    RemoveContactSelectionMembersFromSearch(request: carriers.Selection_RemoveContactSelectionMembersFromSearchRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Removes members from the selection using the search result.
     * @param selectionId - The id of the selection to remove members.
     * @param storageKey - Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search.
     * @returns Number of members removed
     */
    RemoveContactSelectionMembersFromSearch(selectionId: number, storageKey: string, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _CreateTemporaryContactSelection;
    /**
     * Creates a temporary selection.
     * @returns Returns the newly created SelectionEntity.
     */
    CreateTemporaryContactSelection(webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    private _CreateTemporaryContactSelectionFromSelectionMemberIds;
    /**
     * Creates a temporary selection with members from a collection of selectionmember id&apos;s.
     * @param request - SelectionId, SelectionMemberIds
     * @returns Returns the newly created SelectionEntity.
     */
    CreateTemporaryContactSelectionFromSelectionMemberIds(request: carriers.Selection_CreateTemporaryContactSelectionFromSelectionMemberIdsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    /**
     * Creates a temporary selection with members from a collection of selectionmember id&apos;s.
     * @param selectionId - The selectionId the selectionmembers is a part of.
     * @param selectionMemberIds - A collection of int ids to copy into the temporary contact selection as members.
     * @returns Returns the newly created SelectionEntity.
     */
    CreateTemporaryContactSelectionFromSelectionMemberIds(selectionId: number, selectionMemberIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    private _AddRemoveContactSelectionMemberInterests;
    /**
     * Adds or removes interests on companies and persons in a selection.
     * @param request - SelectionId, AddCompanyInterests, RemoveCompanyInterests, AddContactInterests, RemoveContactInterests
     * @returns
     */
    AddRemoveContactSelectionMemberInterests(request: carriers.Selection_AddRemoveContactSelectionMemberInterestsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Adds or removes interests on companies and persons in a selection.
     * @param selectionId - The id of the selection to add or remove interests members from.
     * @param addCompanyInterests - Array of int containing the id's of the interests to add to the company.
     * @param removeCompanyInterests - Array of int containing the id's of the interests to remove from the company.
     * @param addContactInterests - Array of int containing the id's of the interests to add to the contact.
     * @param removeContactInterests - Array of int containing the id's of the interests to remove from the contact.
     * @returns
     */
    AddRemoveContactSelectionMemberInterests(selectionId: number, addCompanyInterests: number[], removeCompanyInterests: number[], addContactInterests: number[], removeContactInterests: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _EditContactSelectionMemberDetails;
    /**
     * Edit company and contact details in a selection based on contents in selectionMemberEditValues.
     * @param request - SelectionId, SelectionMemberEditValues
     * @returns
     */
    EditContactSelectionMemberDetails(request: carriers.Selection_EditContactSelectionMemberDetailsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Edit company and contact details in a selection based on contents in selectionMemberEditValues.
     * @param selectionId - The id of the selection to edit members from.
     * @param selectionMemberEditValues - An object of <see cref="SelectionMemberEditValues"/> describing what should be changed for companys and contacts.
     * @returns
     */
    EditContactSelectionMemberDetails(selectionId: number, selectionMemberEditValues: carriers.SelectionMemberEditValues, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GenerateFollowUps;
    /**
     * Generate follow-ups for members in the selection.
     * @param request - SelectionId, AppointmentEntity, AssociateId, SaveOnContactOwner, UniqueContact
     * @returns
     */
    GenerateFollowUps(request: carriers.Selection_GenerateFollowUpsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Generate follow-ups for members in the selection.
     * @param selectionId - The id of the selection to generate the follow-ups for.
     * @param appointmentEntity - The AppointmentEntity with information about the appointment.
     * @param associateId - The associate to save the appointments on. If saveOnContactOwner is true, this id will be ignored. Appointments wil be saved on current user if associateId = 0.
     * @param saveOnContactOwner - If true, the appointments will be saved on contact owner (Our contact). This parameter will override associateId if true.
     * @param uniqueContact - If true, only one appointment will be created for each contact.
     * @returns
     */
    GenerateFollowUps(selectionId: number, appointmentEntity: carriers.AppointmentEntity, associateId: number, saveOnContactOwner: boolean, uniqueContact: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _ExportSelectionMembers;
    /**
     * ExportSelectionMembers will generate a string that is the result of substituting the template variables with values from selectionmembers.
     * @param request - SelectionId, TemplateName, UseContacts
     * @returns Returns a unicode byte array with the file to export to the user.
     */
    ExportSelectionMembers(request: carriers.Selection_ExportSelectionMembersRequest, webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    /**
     * ExportSelectionMembers will generate a string that is the result of substituting the template variables with values from selectionmembers.
     * @param selectionId - The id of the selection to generate the exported file.
     * @param templateName - The templateName parameter is the relative path of a .sxf file template. The .sxf files can be found in \template or in the user folder of the so archive.
     * @param useContacts - If the selection contains other members than contacts, setting this to true will export the contact archive of the selection.
     * @returns Returns a unicode byte array with the file to export to the user.
     */
    ExportSelectionMembers(selectionId: number, templateName: string, useContacts: boolean, webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    private _ExportSelectionMembersWithOrderBy;
    /**
     * ExportSelectionMembers will generate a string that is the result of substituting the template variables with values from selectionmembers.
     * @param request - SelectionId, TemplateName, UseContacts, OrderBy
     * @returns Returns a unicode byte array with the file to export to the user.
     */
    ExportSelectionMembersWithOrderBy(request: carriers.Selection_ExportSelectionMembersWithOrderByRequest, webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    /**
     * ExportSelectionMembers will generate a string that is the result of substituting the template variables with values from selectionmembers.
     * @param selectionId - The id of the selection to generate the exported file.
     * @param templateName - The templateName parameter is the relative path of a .sxf file template. The .sxf files can be found in \template or in the user folder of the so archive.
     * @param useContacts - If the selection contains other members than contacts, setting this to true will export the contact archive of the selection.
     * @param orderBy - OrderBy. <Column,OrderBySortType>
     * @returns Returns a unicode byte array with the file to export to the user.
     */
    ExportSelectionMembersWithOrderBy(selectionId: number, templateName: string, useContacts: boolean, orderBy: string, webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    private _StartMailMerge;
    /**
     * Start a mailmerge operation with specified settings.
     * @param request - Settings
     * @returns
     */
    StartMailMerge(request: carriers.Selection_StartMailMergeRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Start a mailmerge operation with specified settings.
     * @param settings - All settings needed to perform the mailmerge operation.
     * @returns
     */
    StartMailMerge(settings: carriers.MailMergeSettings, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SetDuplicateRulesStatus;
    /**
     * Set which duplicate rules should be active or not
     * @param request - Rules
     * @returns
     */
    SetDuplicateRulesStatus(request: carriers.Selection_SetDuplicateRulesStatusRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set which duplicate rules should be active or not
     * @param rules - Duplicate rules to update active status for
     * @returns
     */
    SetDuplicateRulesStatus(rules: carriers.DuplicateRule[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetDuplicates;
    /**
     * Get duplicates(exact or similar in the database) based on the name
     * @param request - Name
     * @returns Any records matching the specified name
     */
    GetDuplicates(request: carriers.Selection_GetDuplicatesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DuplicateEntry[]>;
    /**
     * Get duplicates(exact or similar in the database) based on the name
     * @param name - Name used for lookup
     * @returns Any records matching the specified name
     */
    GetDuplicates(name: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DuplicateEntry[]>;
    private _GetDuplicateRules;
    /**
     * Retrieve all available duplicate rules for selection
     * @returns All available duplicate rules
     */
    GetDuplicateRules(webapi_options?: base.WebApiRequestOptions): Promise<carriers.DuplicateRule[]>;
    private _CreateNewEntry;
    /**
     * Creates a new selection based on external duplicate
     * @param request - Duplicate
     * @returns The database identity of the newly created entry
     */
    CreateNewEntry(request: carriers.Selection_CreateNewEntryRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Creates a new selection based on external duplicate
     * @param duplicate - The duplicate to create a new entry based upon
     * @returns The database identity of the newly created entry
     */
    CreateNewEntry(duplicate: carriers.DuplicateEntry, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _DeleteContacts;
    /**
     * Deletes all contacts from a selection. If a contact does not have delete rights, it will be skipped.
     * @param request - SelectionId
     * @returns
     */
    DeleteContacts(request: carriers.Selection_DeleteContactsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Deletes all contacts from a selection. If a contact does not have delete rights, it will be skipped.
     * @param selectionId - Id of the selection the delete operation will be performed.
     * @returns
     */
    DeleteContacts(selectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _AddSelectionMembers;
    /**
     * Add selection members to a static selection of type others than contacts.
     * @param request - SelectionId, Ids
     * @returns Returns number of members added to the selection.
     */
    AddSelectionMembers(request: carriers.Selection_AddSelectionMembersRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Add selection members to a static selection of type others than contacts.
     * @param selectionId - The selection id to add the members to.
     * @param ids - Collection of ids to add to the selection.
     * @returns Returns number of members added to the selection.
     */
    AddSelectionMembers(selectionId: number, ids: number[], webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _RemoveSelectionMembers;
    /**
     * Removes members from the selection as  specified in the collection of entity ids. The ids are selection member ids (selection member primary key)
     * @param request - SelectionId, SelectionMemberIds
     * @returns
     */
    RemoveSelectionMembers(request: carriers.Selection_RemoveSelectionMembersRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Removes members from the selection as  specified in the collection of entity ids. The ids are selection member ids (selection member primary key)
     * @param selectionId - The id of the selection where to members will be removed.
     * @param selectionMemberIds - Selection member primary keys
     * @returns
     */
    RemoveSelectionMembers(selectionId: number, selectionMemberIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _RemoveSelectionMembersById;
    /**
     * Removes members from the selection as specified in the collection of entity ids. The ids can be a collection of sale ids, or other supported types.
     * @param request - SelectionId, Ids
     * @returns
     */
    RemoveSelectionMembersById(request: carriers.Selection_RemoveSelectionMembersByIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Removes members from the selection as specified in the collection of entity ids. The ids can be a collection of sale ids, or other supported types.
     * @param selectionId - The id of the selection where to members will be removed.
     * @param ids - A collection of sale/project/contact ids to remove from the selection. The ids can be a collection of sale ids, or other supported types.
     * @returns
     */
    RemoveSelectionMembersById(selectionId: number, ids: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _AddSelectionMembersFromSearch;
    /**
     * Adds members from the selection using the search result.
     * @param request - SelectionId, StorageKey
     * @returns Number of members added.
     */
    AddSelectionMembersFromSearch(request: carriers.Selection_AddSelectionMembersFromSearchRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Adds members from the selection using the search result.
     * @param selectionId - The id of the selection to add members
     * @param storageKey - Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search
     * @returns Number of members added.
     */
    AddSelectionMembersFromSearch(selectionId: number, storageKey: string, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _RemoveSelectionMembersFromSearch;
    /**
     * Removes members from the selection using the search result.
     * @param request - SelectionId, StorageKey
     * @returns Number of members removed
     */
    RemoveSelectionMembersFromSearch(request: carriers.Selection_RemoveSelectionMembersFromSearchRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Removes members from the selection using the search result.
     * @param selectionId - The id of the selection to remove members.
     * @param storageKey - Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search.
     * @returns Number of members removed
     */
    RemoveSelectionMembersFromSearch(selectionId: number, storageKey: string, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _CopySelectionMembers;
    /**
     * Copy selection members from selection into an existing selection.
     * @param request - FromSelectionId, ToSelectionId
     * @returns
     */
    CopySelectionMembers(request: carriers.Selection_CopySelectionMembersRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Copy selection members from selection into an existing selection.
     * @param fromSelectionId - The id of the selection to copy members from.
     * @param toSelectionId - The id of the selection to copy members to.
     * @returns
     */
    CopySelectionMembers(fromSelectionId: number, toSelectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _CreateTemporarySelectionFromIds;
    /**
     * Creates a temporary selection with members from a collection of entity id&apos;s.
     * @param request - Ids, TargetTableNumber
     * @returns Returns the newly created SelectionEntity.
     */
    CreateTemporarySelectionFromIds(request: carriers.Selection_CreateTemporarySelectionFromIdsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    /**
     * Creates a temporary selection with members from a collection of entity id&apos;s.
     * @param ids - A collection of Ids to copy into the temporary selection as members. The ids are primary keys of entities defined by the targetTableNumber parameter.
     * @param targetTableNumber - The type of selection to create.
     * @returns Returns the newly created SelectionEntity.
     */
    CreateTemporarySelectionFromIds(ids: number[], targetTableNumber: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    private _CreateSelectionFromSelection;
    /**
     * Creates a new selection based on selection members from an existing selection.
     * @param request - SelectionId, Name, TargetSelectionType, CopyMembers
     * @returns Returns the newly created SelectionEntity.
     */
    CreateSelectionFromSelection(request: carriers.Selection_CreateSelectionFromSelectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    /**
     * Creates a new selection based on selection members from an existing selection.
     * @param selectionId - The id of the selection to copy members from.
     * @param name - The name of the new selection.
     * @param targetSelectionType - The type of Selection to create. The type can be static or dynamic. If the original selection to copy from is static, the SelectionType can only be static. If the original selection is dynamic, both a static and dynamic selection can be created.
     * @param copyMembers - If true, the members from the original selection will be added to the newly created selection.
     * @returns Returns the newly created SelectionEntity.
     */
    CreateSelectionFromSelection(selectionId: number, name: string, targetSelectionType: enums.SelectionType, copyMembers: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    private _CreateContactSelectionFromShadowSelection;
    /**
     * Creates a new contact selection based on contact selection members from an existing shadow sale, appointment, project or document selection. The new selection will always be static even if the original selection is dynamic.
     * @param request - SelectionId, Name
     * @returns Returns the newly created SelectionEntity.
     */
    CreateContactSelectionFromShadowSelection(request: carriers.Selection_CreateContactSelectionFromShadowSelectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    /**
     * Creates a new contact selection based on contact selection members from an existing shadow sale, appointment, project or document selection. The new selection will always be static even if the original selection is dynamic.
     * @param selectionId - The id of the selection to copy members from.
     * @param name - The name of the new selection.
     * @returns Returns the newly created SelectionEntity.
     */
    CreateContactSelectionFromShadowSelection(selectionId: number, name: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionEntity>;
    private _DeleteEntities;
    /**
     * Deletes all entities from a selection. If an entity does not have delete rights, it will be skipped.
     * @param request - SelectionId
     * @returns
     */
    DeleteEntities(request: carriers.Selection_DeleteEntitiesRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Deletes all entities from a selection. If an entity does not have delete rights, it will be skipped.
     * @param selectionId - Id of the selection the delete operation will be performed.
     * @returns
     */
    DeleteEntities(selectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetParentCombinedSelections;
    /**
     * Get a list of all selection ids where the given selection is used to create a combined selection.
     * @param request - SelectionId
     * @returns Array of selectionIds.
     */
    GetParentCombinedSelections(request: carriers.Selection_GetParentCombinedSelectionsRequest, webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    /**
     * Get a list of all selection ids where the given selection is used to create a combined selection.
     * @param selectionId - The selectionId to query for.
     * @returns Array of selectionIds.
     */
    GetParentCombinedSelections(selectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    private _GetSelectionMembersArchiveRows;
    /**
     * Get the list of members in this selection. The type of members depends on the target table of the selection.
     * @param request - SelectionId, Select
     * @returns Array of archive rows, where each item represents one row of data (row level data + the requested columns). NULL if selection does not exist.
     */
    GetSelectionMembersArchiveRows(request: carriers.Selection_GetSelectionMembersArchiveRowsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    /**
     * Get the list of members in this selection. The type of members depends on the target table of the selection.
     * @param selectionId - The selectionId we want selection members for.
     * @param select - (optional) Comma separated Column names to include in result. List of columns varies depending on the selection's TargetTable. e.g. 'name', 'firstname', 'startTime'
     * @returns Array of archive rows, where each item represents one row of data (row level data + the requested columns). NULL if selection does not exist.
     */
    GetSelectionMembersArchiveRows(selectionId: number, select: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    private _GetSelectionShadowMembersArchiveRows;
    /**
     * Get the list of members in this selection&apos;s shadow (i.e. the list of contacts + persons referenced in the main selection).
     * @param request - SelectionId, Select
     * @returns Array of archive rows, where each item represents one row of data (row level data + the requested columns). NULL if selection does not exist.
     */
    GetSelectionShadowMembersArchiveRows(request: carriers.Selection_GetSelectionShadowMembersArchiveRowsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    /**
     * Get the list of members in this selection&apos;s shadow (i.e. the list of contacts + persons referenced in the main selection).
     * @param selectionId - The selectionId we want selection members for.
     * @param select - (optional) Comma separated Column names to include in result. List of columns varies depending on the selection's TargetTable. e.g. 'name', 'firstname,name', 'startTime,firstname,name'
     * @returns Array of archive rows, where each item represents one row of data (row level data + the requested columns). NULL if selection does not exist.
     */
    GetSelectionShadowMembersArchiveRows(selectionId: number, select: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    private _GetDynamicSelectionCriteria;
    /**
     * Get the criteria for this dynamic selection.
     * @param request - SelectionId
     * @returns Criteria defining the selection result. NULL if selection does not exist, or if this is not a dynamic selection.
     */
    GetDynamicSelectionCriteria(request: carriers.Selection_GetDynamicSelectionCriteriaRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionInfo[]>;
    /**
     * Get the criteria for this dynamic selection.
     * @param selectionId - The id of the selection to add members
     * @returns Criteria defining the selection result. NULL if selection does not exist, or if this is not a dynamic selection.
     */
    GetDynamicSelectionCriteria(selectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionInfo[]>;
    private _SetDynamicSelectionCriteria;
    /**
     * Update the criteria for this dynamic selection. Replaces existing criteria with the new values.
     * @param request - SelectionId, Criteria
     * @returns Criteria defining the selection result. NULL if this is not a dynamic selection.
     */
    SetDynamicSelectionCriteria(request: carriers.Selection_SetDynamicSelectionCriteriaRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionInfo[]>;
    /**
     * Update the criteria for this dynamic selection. Replaces existing criteria with the new values.
     * @param selectionId - The id of the selection to add members
     * @param criteria - Criteria defining the selection result.
     * @returns Criteria defining the selection result. NULL if this is not a dynamic selection.
     */
    SetDynamicSelectionCriteria(selectionId: number, criteria: carriers.ArchiveRestrictionInfo[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionInfo[]>;
    private _SetDynamicSelectionCriteria2;
    /**
     * Update the criteria for this dynamic selection using string. Criteria are parsed from the OData filter form: &apos;&apos;name startswith &apos;foo&apos; and category in (1,2,3)&apos;&apos;
     * @param request - SelectionId, Filter
     * @returns Criteria defining the selection result. NULL if this is not a dynamic selection.
     */
    SetDynamicSelectionCriteria2(request: carriers.Selection_SetDynamicSelectionCriteria2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionInfo[]>;
    /**
     * Update the criteria for this dynamic selection using string. Criteria are parsed from the OData filter form: &apos;&apos;name startswith &apos;foo&apos; and category in (1,2,3)&apos;&apos;
     * @param selectionId - The id of the selection to add members
     * @param filter - Criteria defining the selection result in OData filter form: `category in (1,2,3) and name = 'foo'`
     * @returns Criteria defining the selection result. NULL if this is not a dynamic selection.
     */
    SetDynamicSelectionCriteria2(selectionId: number, filter: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionInfo[]>;
    private _SetDynamicSelectionCriteria3;
    /**
     * Update the criteria for this dynamic selection. Use criteria as either restriction objects or OData string format. Criteria are parsed from the OData filter form: &apos;&apos;name startswith &apos;foo&apos; and category in (1,2,3)&apos;&apos;
     * @param request - SelectionId, Criteria, Filter
     * @returns Criteria defining the selection result. NULL if this is not a dynamic selection.
     */
    SetDynamicSelectionCriteria3(request: carriers.Selection_SetDynamicSelectionCriteria3Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionInfo[]>;
    /**
     * Update the criteria for this dynamic selection. Use criteria as either restriction objects or OData string format. Criteria are parsed from the OData filter form: &apos;&apos;name startswith &apos;foo&apos; and category in (1,2,3)&apos;&apos;
     * @param selectionId - The id of the selection to add members
     * @param criteria - Criteria defining the selection result. Pass NULL if using the filter string instead.
     * @param filter - Criteria defining the selection result in OData filter form: `category in (1,2,3) and name = 'foo'`. Pass NULL or empty string '' if using the criteria objects.
     * @returns Criteria defining the selection result. NULL if this is not a dynamic selection.
     */
    SetDynamicSelectionCriteria3(selectionId: number, criteria: carriers.ArchiveRestrictionInfo[], filter: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionInfo[]>;
    private _DeletePersons;
    /**
     * Deletes all persons from a selection. If a person does not have delete rights, it will be skipped.
     * @param request - SelectionId
     * @returns
     */
    DeletePersons(request: carriers.Selection_DeletePersonsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Deletes all persons from a selection. If a person does not have delete rights, it will be skipped.
     * @param selectionId - Id of the selection the delete operation will be performed.
     * @returns
     */
    DeletePersons(selectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetDynamicSelectionCriteriaGroups;
    /**
     * Get the criteria for this dynamic selection. This call supports multiple criteria groups.
     * @param request - SelectionId
     * @returns Criteria groups defining the selection result. NULL if selection does not exist, or if this is not a dynamic selection.
     */
    GetDynamicSelectionCriteriaGroups(request: carriers.Selection_GetDynamicSelectionCriteriaGroupsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionGroup[]>;
    /**
     * Get the criteria for this dynamic selection. This call supports multiple criteria groups.
     * @param selectionId - The id of the selection to add members
     * @returns Criteria groups defining the selection result. NULL if selection does not exist, or if this is not a dynamic selection.
     */
    GetDynamicSelectionCriteriaGroups(selectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionGroup[]>;
    private _SetDynamicSelectionCriteriaGroups;
    /**
     * Update the criteria for this dynamic selection. Replaces existing criteria with the new values. This call supports multiple criteria groups.
     * @param request - SelectionId, Criteria
     * @returns Criteria groups defining the selection result. NULL if this is not a dynamic selection.
     */
    SetDynamicSelectionCriteriaGroups(request: carriers.Selection_SetDynamicSelectionCriteriaGroupsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionGroup[]>;
    /**
     * Update the criteria for this dynamic selection. Replaces existing criteria with the new values. This call supports multiple criteria groups.
     * @param selectionId - The id of the selection to add members
     * @param criteria - Criteria groups defining the selection result. Empty array is legal, simply means no criteria have been set
     * @returns Criteria groups defining the selection result. NULL if this is not a dynamic selection.
     */
    SetDynamicSelectionCriteriaGroups(selectionId: number, criteria: carriers.ArchiveRestrictionGroup[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionGroup[]>;
    private _GetSelectionForFind;
    /**
     * Obtain a selection for the given entity, for the current user, of type WorkingSetForFind. Optionally populate criteria from the TypicalSearches system
     * @param request - EntityName, TypicalSearchId
     * @returns Target selection id and provider name
     */
    GetSelectionForFind(request: carriers.Selection_GetSelectionForFindRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionForFind>;
    /**
     * Obtain a selection for the given entity, for the current user, of type WorkingSetForFind. Optionally populate criteria from the TypicalSearches system
     * @param entityName - The name of the entity to make a selection for; examples 'sale', 'project', 'y_equipment'
     * @param typicalSearchId - If 0, keep existing criteria; if -1, reset to entity default; > 0 get criteria from given TypicalSearch
     * @returns Target selection id and provider name
     */
    GetSelectionForFind(entityName: string, typicalSearchId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionForFind>;
    private _GetSelectionSummaries;
    /**
     * Get an array of summaryitem for the given selections
     * @param request - SelectionIds
     * @returns Summary items for the given id's, in no particular order
     */
    GetSelectionSummaries(request: carriers.Selection_GetSelectionSummariesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionSummaryItem[]>;
    /**
     * Get an array of summaryitem for the given selections
     * @param selectionIds - The selections to fetch summaries for
     * @returns Summary items for the given id's, in no particular order
     */
    GetSelectionSummaries(selectionIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectionSummaryItem[]>;
    private _UpdateTypicalSearch;
    /**
     * Update (import) TypicalSearch information in the database
     * @param request - Searches
     * @returns Message that can be shown to the user, summarizing what has been done, if anything.
     */
    UpdateTypicalSearch(request: carriers.Selection_UpdateTypicalSearchRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Update (import) TypicalSearch information in the database
     * @param searches - TypicalSearch structures to import. If null, then the fileset is scanned for *TypicalSearch.json files and those are imported instead
     * @returns Message that can be shown to the user, summarizing what has been done, if anything.
     */
    UpdateTypicalSearch(searches: carriers.TypicalSearches, webapi_options?: base.WebApiRequestOptions): Promise<string>;
}
//# sourceMappingURL=SelectionAgent.d.ts.map