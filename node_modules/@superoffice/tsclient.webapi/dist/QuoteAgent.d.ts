import { AxiosRequestConfig } from 'axios';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Services for the Quote Management feature, part of the Sale module
 */
export interface IQuoteAgent {
    CreateDefaultPriceList(): Promise<carriers.PriceList>;
    SavePriceList(entity: carriers.PriceList): Promise<carriers.PriceList>;
    DeletePriceList(PriceListId: number): Promise<void>;
    CreateDefaultProduct(): Promise<carriers.Product>;
    SaveProduct(entity: carriers.Product): Promise<carriers.Product>;
    DeleteProduct(ProductId: number): Promise<void>;
    CreateDefaultQuoteAlternative(): Promise<carriers.QuoteAlternative>;
    SaveQuoteAlternative(entity: carriers.QuoteAlternative): Promise<carriers.QuoteAlternative>;
    GetConfigurationFields(request: carriers.Quote_GetConfigurationFieldsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FieldMetadataDictionary>;
    GetConfigurationFields(connectionId: number, connectorName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FieldMetadataDictionary>;
    TestConnection(request: carriers.Quote_TestConnectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    TestConnection(connectorName: string, connectionData: carriers.StringDictionary, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    GetPriceList(priceListId: number): Promise<carriers.PriceList>;
    CopySuperOfficePriceList(request: carriers.Quote_CopySuperOfficePriceListRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PriceList>;
    CopySuperOfficePriceList(originalPriceListId: number, newName: string, validFrom: Date, validTo: Date, newCurrencyId: number, convertCurrency: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PriceList>;
    GetProductImage(request: carriers.Quote_GetProductImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetProductImage(quoteConnectionId: number, eRPProductKey: string, rank: number, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    FindProduct(request: carriers.Quote_FindProductRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Product[]>;
    FindProduct(quoteAlternativeId: number, userInput: string, priceListKey: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Product[]>;
    GetProduct(request: carriers.Quote_GetProductRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Product>;
    GetProduct(quoteConnectionId: number, eRPProductKey: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Product>;
    GetProductFromDbId(request: carriers.Quote_GetProductFromDbIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Product>;
    GetProductFromDbId(productId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Product>;
    RemoveProduct(request: carriers.Quote_RemoveProductRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RemoveProduct(productId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    ToggleProductInAssortment(request: carriers.Quote_ToggleProductInAssortmentRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    ToggleProductInAssortment(productId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SaveQuote(request: carriers.Quote_SaveQuoteRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Quote>;
    SaveQuote(quote: carriers.Quote, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Quote>;
    GetQuote(request: carriers.Quote_GetQuoteRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Quote>;
    GetQuote(quoteId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Quote>;
    GetQuoteFromSaleId(request: carriers.Quote_GetQuoteFromSaleIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Quote>;
    GetQuoteFromSaleId(saleId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Quote>;
    GetQuoteAlternative(quoteAlternativeId: number): Promise<carriers.QuoteAlternative>;
    RecalculateQuoteAlternative(request: carriers.Quote_RecalculateQuoteAlternativeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteAlternativeRecalculated>;
    RecalculateQuoteAlternative(quoteAlternative: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteAlternativeRecalculated>;
    GetQuoteAlternatives(request: carriers.Quote_GetQuoteAlternativesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteAlternative[]>;
    GetQuoteAlternatives(quoteVersionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteAlternative[]>;
    MoveQuoteLine(request: carriers.Quote_MoveQuoteLineRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    MoveQuoteLine(quoteLineId: number, direction: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    CreateQuoteAlternative(request: carriers.Quote_CreateQuoteAlternativeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteAlternative>;
    CreateQuoteAlternative(quoteVersionId: number, quoteAlternativeName: string, quoteAlternativeDescription: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteAlternative>;
    CopyQuoteAlternative(request: carriers.Quote_CopyQuoteAlternativeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteAlternative>;
    CopyQuoteAlternative(quoteVersionId: number, quoteAlternativeId: number, quoteAlternativeName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteAlternative>;
    DeleteQuoteAlternative(request: carriers.Quote_DeleteQuoteAlternativeRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteQuoteAlternative(quoteAlternativeId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    HasConnections(webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    GetAllInstalledQuoteConnections(webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteConnection[]>;
    GetAllAvailableQuoteConnections(webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteConnection[]>;
    GetAllAvailableQuoteConnectionsWithPriceLists(webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteConnection[]>;
    CreateConnectionFromConnectorName(request: carriers.Quote_CreateConnectionFromConnectorNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteConnection>;
    CreateConnectionFromConnectorName(connectorName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteConnection>;
    GetConnection(request: carriers.Quote_GetConnectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteConnection>;
    GetConnection(quoteConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteConnection>;
    SaveConnection(request: carriers.Quote_SaveConnectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteConnection>;
    SaveConnection(connection: carriers.QuoteConnection, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteConnection>;
    DeleteConnection(request: carriers.Quote_DeleteConnectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteConnection(quoteConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RestoreConnection(request: carriers.Quote_RestoreConnectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RestoreConnection(quoteConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetConnectionsForAssociate(request: carriers.Quote_GetConnectionsForAssociateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteConnection[]>;
    GetConnectionsForAssociate(associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteConnection[]>;
    GetActivePriceLists(request: carriers.Quote_GetActivePriceListsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PriceList[]>;
    GetActivePriceLists(quoteConnectionId: number, currency: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PriceList[]>;
    GetActivePriceListsByCurrencyId(request: carriers.Quote_GetActivePriceListsByCurrencyIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PriceList[]>;
    GetActivePriceListsByCurrencyId(quoteConnectionId: number, currencyId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PriceList[]>;
    GetAllPriceLists(request: carriers.Quote_GetAllPriceListsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PriceList[]>;
    GetAllPriceLists(quoteConnectionId: number, currency: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PriceList[]>;
    GetAllPriceListsByCurrencyId(request: carriers.Quote_GetAllPriceListsByCurrencyIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PriceList[]>;
    GetAllPriceListsByCurrencyId(quoteConnectionId: number, currencyId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PriceList[]>;
    GetConnectorCapabilityNames(request: carriers.Quote_GetConnectorCapabilityNamesRequest, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    GetConnectorCapabilityNames(quoteConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    GetConnectorCapabilities(request: carriers.Quote_GetConnectorCapabilitiesRequest, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    GetConnectorCapabilities(quoteConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    CanConnectorProvideCapability(request: carriers.Quote_CanConnectorProvideCapabilityRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    CanConnectorProvideCapability(quoteConnectionId: number, capabilityName: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    GetConnectionStartupErrors(webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse[]>;
    GetConnectionStartupResponse(request: carriers.Quote_GetConnectionStartupResponseRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    GetConnectionStartupResponse(quoteConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    GetConnectionConfigFields(request: carriers.Quote_GetConnectionConfigFieldsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    GetConnectionConfigFields(quoteConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    SaveConnectionConfigFields(request: carriers.Quote_SaveConnectionConfigFieldsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    SaveConnectionConfigFields(quoteConnectionId: number, connectionConfigFields: carriers.StringDictionary, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    CreateAndSaveQuote(request: carriers.Quote_CreateAndSaveQuoteRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteEntity>;
    CreateAndSaveQuote(saleId: number, connectionId: number, firstAlternativeName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteEntity>;
    GetQuoteEntity(request: carriers.Quote_GetQuoteEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteEntity>;
    GetQuoteEntity(quoteId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteEntity>;
    GetQuoteEntityFromSaleId(request: carriers.Quote_GetQuoteEntityFromSaleIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteEntity>;
    GetQuoteEntityFromSaleId(saleId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteEntity>;
    SaveQuoteEntity(request: carriers.Quote_SaveQuoteEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteEntity>;
    SaveQuoteEntity(quoteEntity: carriers.QuoteEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteEntity>;
    CreateAndSaveQuoteFromSale(request: carriers.Quote_CreateAndSaveQuoteFromSaleRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteEntity>;
    CreateAndSaveQuoteFromSale(copyFromSaleId: number, copyToSaleId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteEntity>;
    PlaceOrder(request: carriers.Quote_PlaceOrderRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginUrlResponse>;
    PlaceOrder(quoteAlternativeId: number, markSaleAsSold: boolean, poNumber: string, orderComment: string, culture: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginUrlResponse>;
    GetOrderState(request: carriers.Quote_GetOrderStateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginUrlResponse>;
    GetOrderState(quoteVersionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginUrlResponse>;
    DeleteQuote(request: carriers.Quote_DeleteQuoteRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteQuote(quoteId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    CreateQuoteLine(request: carriers.Quote_CreateQuoteLineRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLine>;
    CreateQuoteLine(quoteAlternativeId: number, eRPProductKey: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLine>;
    CreateQuoteLineFromProduct(request: carriers.Quote_CreateQuoteLineFromProductRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLine>;
    CreateQuoteLineFromProduct(quoteAlternativeId: number, product: carriers.Product, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLine>;
    SaveQuoteLine(request: carriers.Quote_SaveQuoteLineRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLine>;
    SaveQuoteLine(quoteLine: carriers.QuoteLine, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLine>;
    SaveQuoteLines(request: carriers.Quote_SaveQuoteLinesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLine[]>;
    SaveQuoteLines(quoteLines: carriers.QuoteLine[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLine[]>;
    GetQuoteLine(request: carriers.Quote_GetQuoteLineRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLine>;
    GetQuoteLine(quoteLineId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLine>;
    GetQuoteLines(request: carriers.Quote_GetQuoteLinesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLine[]>;
    GetQuoteLines(quoteAlternativeId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLine[]>;
    DeleteQuoteLine(request: carriers.Quote_DeleteQuoteLineRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteQuoteLine(quoteLineId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteQuoteLines(request: carriers.Quote_DeleteQuoteLinesRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteQuoteLines(quoteLineIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RecalculateQuoteLine(request: carriers.Quote_RecalculateQuoteLineRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLine>;
    RecalculateQuoteLine(quoteLine: carriers.QuoteLine, changedFields: string[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLine>;
    GetQuoteLineImage(request: carriers.Quote_GetQuoteLineImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetQuoteLineImage(quoteLineId: number, rank: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    SaveQuoteLineImage(request: carriers.Quote_SaveQuoteLineImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SaveQuoteLineImage(quoteLineId: number, image: ArrayBuffer | string, rank: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetExtraInfo(request: carriers.Quote_GetExtraInfoRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProductExtraDataField[]>;
    GetExtraInfo(quoteLineExtraData: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProductExtraDataField[]>;
    GetQuoteLineConfiguration(request: carriers.Quote_GetQuoteLineConfigurationRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLineConfiguration>;
    GetQuoteLineConfiguration(quoteLineConfigurationId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLineConfiguration>;
    GetQuoteLineConfigurationFromFieldName(request: carriers.Quote_GetQuoteLineConfigurationFromFieldNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLineConfiguration>;
    GetQuoteLineConfigurationFromFieldName(fieldName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLineConfiguration>;
    GetAllQuoteLineConfigurations(webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLineConfiguration[]>;
    GetInUseQuoteLineConfigurations(webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLineConfiguration[]>;
    SaveQuoteLineConfiguration(request: carriers.Quote_SaveQuoteLineConfigurationRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLineConfiguration>;
    SaveQuoteLineConfiguration(quoteLineConfiguration: carriers.QuoteLineConfiguration, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLineConfiguration>;
    SaveQuoteLineConfigurations(request: carriers.Quote_SaveQuoteLineConfigurationsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLineConfiguration[]>;
    SaveQuoteLineConfigurations(quoteLineConfigurations: carriers.QuoteLineConfiguration[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLineConfiguration[]>;
    GetQuoteList(request: carriers.Quote_GetQuoteListRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteListItem[]>;
    GetQuoteList(quoteListType: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteListItem[]>;
    ValidateQuoteVersion(request: carriers.Quote_ValidateQuoteVersionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersionValidated>;
    ValidateQuoteVersion(quoteVersionId: number, action: enums.QuoteVersionButtonAction, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersionValidated>;
    CreateAndSaveQuoteVersion(request: carriers.Quote_CreateAndSaveQuoteVersionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersion>;
    CreateAndSaveQuoteVersion(quoteVersionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersion>;
    GetQuoteVersion(request: carriers.Quote_GetQuoteVersionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersion>;
    GetQuoteVersion(quoteVersionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersion>;
    GetQuoteVersions(request: carriers.Quote_GetQuoteVersionsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersion[]>;
    GetQuoteVersions(quoteId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersion[]>;
    SendQuoteVersion(request: carriers.Quote_SendQuoteVersionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginUrlResponse>;
    SendQuoteVersion(quoteVersionId: number, expiryDate: Date, followupDate: Date, followupText: string, culture: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginUrlResponse>;
    SaveQuoteVersion(request: carriers.Quote_SaveQuoteVersionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersion>;
    SaveQuoteVersion(quoteVersion: carriers.QuoteVersion, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersion>;
    ApproveQuoteVersion(request: carriers.Quote_ApproveQuoteVersionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ApproveRejectResponse>;
    ApproveQuoteVersion(quoteVersionId: number, approvedByText: string, approvedByAssociateId: number, approvalText: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ApproveRejectResponse>;
    RejectQuoteVersion(request: carriers.Quote_RejectQuoteVersionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ApproveRejectResponse>;
    RejectQuoteVersion(quoteVersionId: number, rejectedByText: string, rejectedByAssociateId: number, rejectionText: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ApproveRejectResponse>;
    GenerateQuoteDocuments(request: carriers.Quote_GenerateQuoteDocumentsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuotePublishDocuments>;
    GenerateQuoteDocuments(quoteVersionId: number, emailBodyTemplateId: number, attachMainDocument: boolean, quotedProductsTemplateId: number, includeAttachments: boolean, rawMailSubject: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuotePublishDocuments>;
    GetOrderConfirmation(request: carriers.Quote_GetOrderConfirmationRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetOrderConfirmation(quoteVersionId: number, confirmationTemplateId: number, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetQuoteVersionWorkflowState(request: carriers.Quote_GetQuoteVersionWorkflowStateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersionWorkflowState>;
    GetQuoteVersionWorkflowState(quoteVersionId: number, quoteAlternativeId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersionWorkflowState>;
    UpdateQuoteVersionPrices(request: carriers.Quote_UpdateQuoteVersionPricesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersionValidated>;
    UpdateQuoteVersionPrices(quoteVersionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersionValidated>;
    SaveQuoteVersionNumber(request: carriers.Quote_SaveQuoteVersionNumberRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    SaveQuoteVersionNumber(quoteVersionId: number, number: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    GetQuoteVersionWorkflowImageState(request: carriers.Quote_GetQuoteVersionWorkflowImageStateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersionButtonState>;
    GetQuoteVersionWorkflowImageState(quoteVersionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersionButtonState>;
    GetQuoteVersionWorkflowButtonStates(request: carriers.Quote_GetQuoteVersionWorkflowButtonStatesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersionWorkflowState>;
    GetQuoteVersionWorkflowButtonStates(quoteVersionId: number, quoteAlternativeId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersionWorkflowState>;
    GetQuoteVersionWorkflowStatusInfo(request: carriers.Quote_GetQuoteVersionWorkflowStatusInfoRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersionStatusInformation>;
    GetQuoteVersionWorkflowStatusInfo(quoteVersionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersionStatusInformation>;
    RequestApproval(request: carriers.Quote_RequestApprovalRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    RequestApproval(quoteVersionId: number, associateId: number, comment: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    CancelApprovalRequest(request: carriers.Quote_CancelApprovalRequestRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    CancelApprovalRequest(quoteVersionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    CreateOrUpdateQuoteVersionAttachments(request: carriers.Quote_CreateOrUpdateQuoteVersionAttachmentsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersionAttachment[]>;
    CreateOrUpdateQuoteVersionAttachments(quoteVersionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersionAttachment[]>;
    IncludeQuoteVersionAttachment(request: carriers.Quote_IncludeQuoteVersionAttachmentRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    IncludeQuoteVersionAttachment(quoteVersionId: number, documentId: number, include: boolean, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    ToggleSaleTypeQuoteAttachmentDefaultIncluded(request: carriers.Quote_ToggleSaleTypeQuoteAttachmentDefaultIncludedRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    ToggleSaleTypeQuoteAttachmentDefaultIncluded(saleTypeQuoteAttachmentId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    AddSaleTypeQuoteAttachment(request: carriers.Quote_AddSaleTypeQuoteAttachmentRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    AddSaleTypeQuoteAttachment(saleTypeId: number, documentId: number, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    DeleteSaleTypeQuoteAttachment(request: carriers.Quote_DeleteSaleTypeQuoteAttachmentRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteSaleTypeQuoteAttachment(saleTypeQuoteAttachmentId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    ToggleQuoteVersionAttachmentIncluded(request: carriers.Quote_ToggleQuoteVersionAttachmentIncludedRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    ToggleQuoteVersionAttachmentIncluded(quoteVersionAttachmentId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
}
/**
 * Services for the Quote Management feature, part of the Sale module
 */
export declare class QuoteAgent extends base.WebApiBase implements IQuoteAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * Set default values into a new PriceList.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultPriceList(options?: base.WebApiRequestOptions): Promise<carriers.PriceList>;
    SavePriceList(entity: carriers.PriceList, options?: base.WebApiRequestOptions): Promise<carriers.PriceList>;
    DeletePriceList(PriceListId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new Product.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultProduct(options?: base.WebApiRequestOptions): Promise<carriers.Product>;
    SaveProduct(entity: carriers.Product, options?: base.WebApiRequestOptions): Promise<carriers.Product>;
    DeleteProduct(ProductId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new QuoteAlternative.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultQuoteAlternative(options?: base.WebApiRequestOptions): Promise<carriers.QuoteAlternative>;
    SaveQuoteAlternative(entity: carriers.QuoteAlternative, options?: base.WebApiRequestOptions): Promise<carriers.QuoteAlternative>;
    private _GetConfigurationFields;
    /**
     * Used by ADMIN. Asks for metadata needed to populate admin dialog that takes in the information needed to create a connection to an ERP system. The values entered in the dialog are stored in SuperOffice db and used when InitializeConnector is called by the client.
     * @param request - ConnectionId, ConnectorName
     * @returns carriers
     */
    GetConfigurationFields(request: carriers.Quote_GetConfigurationFieldsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FieldMetadataDictionary>;
    /**
     * Used by ADMIN. Asks for metadata needed to populate admin dialog that takes in the information needed to create a connection to an ERP system. The values entered in the dialog are stored in SuperOffice db and used when InitializeConnector is called by the client.
     * @param connectionId - Id of an existing connection, if any. Initializes connection with current config values if non-zero.
     * @param connectorName - Name of the connector. Ignored if connectionId is non-zero.
     * @returns carriers
     */
    GetConfigurationFields(connectionId: number, connectorName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FieldMetadataDictionary>;
    private _TestConnection;
    /**
     * Used by the Admin clients. Testing if the connection data is sufficient to get a connection with the ERP system. The Connector should try to do some operations to check if the connection has sufficient rights to run. The connection has not been created yet. TestConnection is called without InitializeConnector being called first.
     * @param request - ConnectorName, ConnectionData
     * @returns How the test went
     */
    TestConnection(request: carriers.Quote_TestConnectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    /**
     * Used by the Admin clients. Testing if the connection data is sufficient to get a connection with the ERP system. The Connector should try to do some operations to check if the connection has sufficient rights to run. The connection has not been created yet. TestConnection is called without InitializeConnector being called first.
     * @param connectorName - Name of the connector.
     * @param connectionData - Basically the name/value collection of the configuration data requested to create a connection
     * @returns How the test went
     */
    TestConnection(connectorName: string, connectionData: carriers.StringDictionary, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    GetPriceList(priceListId: number, options?: base.WebApiRequestOptions): Promise<carriers.PriceList>;
    private _CopySuperOfficePriceList;
    /**
     * Create a copy of a PriceList in the SuperOffice database
     * @param request - OriginalPriceListId, NewName, ValidFrom, ValidTo, NewCurrencyId, ConvertCurrency
     * @returns The copied PriceList
     */
    CopySuperOfficePriceList(request: carriers.Quote_CopySuperOfficePriceListRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PriceList>;
    /**
     * Create a copy of a PriceList in the SuperOffice database
     * @param originalPriceListId - Id of the PriceList to be copied
     * @param newName - Name of the copied PriceList
     * @param validFrom - Start date for the new pricelist.
     * @param validTo - End date for the new pricelist.
     * @param newCurrencyId - Currency id of the copied PriceList. If 0 or the same as the original the copied products will keep their prices and the currency will be the same as the original.
     * @param convertCurrency - If true, product prices will be recalculated to the new currency. If false, product prices will be set to zero.
     * @returns The copied PriceList
     */
    CopySuperOfficePriceList(originalPriceListId: number, newName: string, validFrom: Date, validTo: Date, newCurrencyId: number, convertCurrency: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PriceList>;
    private _GetProductImage;
    /**
     * Gets an image connected to a product, from the ProductProvider
     * @param request - QuoteConnectionId, ERPProductKey, Rank
     * @returns The base64 encoded image as a string.
     */
    GetProductImage(request: carriers.Quote_GetProductImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Gets an image connected to a product, from the ProductProvider
     * @param quoteConnectionId - The connection this product comes from.
     * @param eRPProductKey - Primary key of the Product in the ProductProvider
     * @param rank - The rank of the image.
     * @returns The base64 encoded image as a string.
     */
    GetProductImage(quoteConnectionId: number, eRPProductKey: string, rank: number, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _FindProduct;
    /**
     * Gets a product, from the ProductProvider
     * @param request - QuoteAlternativeId, UserInput, PriceListKey
     * @returns Product array
     */
    FindProduct(request: carriers.Quote_FindProductRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Product[]>;
    /**
     * Gets a product, from the ProductProvider
     * @param quoteAlternativeId - Quote alternative to search in.
     * @param userInput - search string
     * @param priceListKey - If the pricelist is null or empty, the function will search in all active pricelists.
     * @returns Product array
     */
    FindProduct(quoteAlternativeId: number, userInput: string, priceListKey: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Product[]>;
    private _GetProduct;
    /**
     * Get a product with the given key
     * @param request - QuoteConnectionId, ERPProductKey
     * @returns
     */
    GetProduct(request: carriers.Quote_GetProductRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Product>;
    /**
     * Get a product with the given key
     * @param quoteConnectionId - The connection this product comes from.
     * @param eRPProductKey - Primary key of the Product in the ProductProvider
     * @returns
     */
    GetProduct(quoteConnectionId: number, eRPProductKey: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Product>;
    private _GetProductFromDbId;
    /**
     * Get a product with the given database id
     * @param request - ProductId
     * @returns The product info
     */
    GetProductFromDbId(request: carriers.Quote_GetProductFromDbIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Product>;
    /**
     * Get a product with the given database id
     * @param productId - The database id of the product
     * @returns The product info
     */
    GetProductFromDbId(productId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Product>;
    private _RemoveProduct;
    /**
     * Removes a product from the database
     * @param request - ProductId
     * @returns
     */
    RemoveProduct(request: carriers.Quote_RemoveProductRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Removes a product from the database
     * @param productId - The database id of the product to remove
     * @returns
     */
    RemoveProduct(productId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _ToggleProductInAssortment;
    /**
     * Toggles if the prdouct is in assortment or not
     * @param request - ProductId
     * @returns
     */
    ToggleProductInAssortment(request: carriers.Quote_ToggleProductInAssortmentRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Toggles if the prdouct is in assortment or not
     * @param productId - The database id of the product to toggle is assortment value of
     * @returns
     */
    ToggleProductInAssortment(productId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SaveQuote;
    /**
     * Saves a Quote
     * @param request - Quote
     * @returns The saved Quote
     */
    SaveQuote(request: carriers.Quote_SaveQuoteRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Quote>;
    /**
     * Saves a Quote
     * @param quote - The Quote to save
     * @returns The saved Quote
     */
    SaveQuote(quote: carriers.Quote, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Quote>;
    private _GetQuote;
    /**
     * Get a Quote
     * @param request - QuoteId
     * @returns The Quote
     */
    GetQuote(request: carriers.Quote_GetQuoteRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Quote>;
    /**
     * Get a Quote
     * @param quoteId - QuoteId of the Quote to get.
     * @returns The Quote
     */
    GetQuote(quoteId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Quote>;
    private _GetQuoteFromSaleId;
    /**
     * Get a Quote for a sale
     * @param request - SaleId
     * @returns The Quote
     */
    GetQuoteFromSaleId(request: carriers.Quote_GetQuoteFromSaleIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Quote>;
    /**
     * Get a Quote for a sale
     * @param saleId - SaleId of the Quote to get.
     * @returns The Quote
     */
    GetQuoteFromSaleId(saleId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Quote>;
    GetQuoteAlternative(quoteAlternativeId: number, options?: base.WebApiRequestOptions): Promise<carriers.QuoteAlternative>;
    private _RecalculateQuoteAlternative;
    /**
     * When the user changes one or more values in a quoteline or a quoteAlternative, the connector gets to change the QuoteLines and the alternative, for instance calculate VAT. RecalculateQuoteAlternative shall be called when the user changes any of the following fields: Quantity, DiscountAmount, DiscountPercent, listprice (if allowed). RecalculateQuoteAlternative will calculate the TotalPrice and the VAT (if possible) for the lines and the alternative.
     * @param request - QuoteAlternative
     * @returns The updated quote version.
     */
    RecalculateQuoteAlternative(request: carriers.Quote_RecalculateQuoteAlternativeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteAlternativeRecalculated>;
    /**
     * When the user changes one or more values in a quoteline or a quoteAlternative, the connector gets to change the QuoteLines and the alternative, for instance calculate VAT. RecalculateQuoteAlternative shall be called when the user changes any of the following fields: Quantity, DiscountAmount, DiscountPercent, listprice (if allowed). RecalculateQuoteAlternative will calculate the TotalPrice and the VAT (if possible) for the lines and the alternative.
     * @param quoteAlternative - The alternative to be recalculated
     * @returns The updated quote version.
     */
    RecalculateQuoteAlternative(quoteAlternative: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteAlternativeRecalculated>;
    private _GetQuoteAlternatives;
    /**
     * Get all quote alternatives for a quote version
     * @param request - QuoteVersionId
     * @returns Array of Quote alternatives
     */
    GetQuoteAlternatives(request: carriers.Quote_GetQuoteAlternativesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteAlternative[]>;
    /**
     * Get all quote alternatives for a quote version
     * @param quoteVersionId - QuoteVersionId of the revison to get alternatives for.
     * @returns Array of Quote alternatives
     */
    GetQuoteAlternatives(quoteVersionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteAlternative[]>;
    private _MoveQuoteLine;
    /**
     * Move quote line rank up/down
     * @param request - QuoteLineId, Direction
     * @returns Void return
     */
    MoveQuoteLine(request: carriers.Quote_MoveQuoteLineRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Move quote line rank up/down
     * @param quoteLineId - Id of quote line to move up/down
     * @param direction - True is up, false is down
     * @returns Void return
     */
    MoveQuoteLine(quoteLineId: number, direction: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _CreateQuoteAlternative;
    /**
     * Create a new quote alternative on a version.
     * @param request - QuoteVersionId, QuoteAlternativeName, QuoteAlternativeDescription
     * @returns The newly created QuoteAlternative.
     */
    CreateQuoteAlternative(request: carriers.Quote_CreateQuoteAlternativeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteAlternative>;
    /**
     * Create a new quote alternative on a version.
     * @param quoteVersionId - QuoteVersionId of the version to create the alternative on.
     * @param quoteAlternativeName - The name to set on the new alternative.
     * @param quoteAlternativeDescription - The description to set on the new alternative.
     * @returns The newly created QuoteAlternative.
     */
    CreateQuoteAlternative(quoteVersionId: number, quoteAlternativeName: string, quoteAlternativeDescription: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteAlternative>;
    private _CopyQuoteAlternative;
    /**
     * Copy a quote alternative from the same sale and adds it to a version.
     * @param request - QuoteVersionId, QuoteAlternativeId, QuoteAlternativeName
     * @returns The copied QuoteAlternative.
     */
    CopyQuoteAlternative(request: carriers.Quote_CopyQuoteAlternativeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteAlternative>;
    /**
     * Copy a quote alternative from the same sale and adds it to a version.
     * @param quoteVersionId - QuoteVersionId of the version to copy the alternative to.
     * @param quoteAlternativeId - QuoteAlternativeId of the alternative to make a copy of.
     * @param quoteAlternativeName - The name to set on the new alternative.
     * @returns The copied QuoteAlternative.
     */
    CopyQuoteAlternative(quoteVersionId: number, quoteAlternativeId: number, quoteAlternativeName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteAlternative>;
    private _DeleteQuoteAlternative;
    /**
     * Delete a quote alternative
     * @param request - QuoteAlternativeId
     * @returns A void return
     */
    DeleteQuoteAlternative(request: carriers.Quote_DeleteQuoteAlternativeRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Delete a quote alternative
     * @param quoteAlternativeId - Id of the quote alternative to delete.
     * @returns A void return
     */
    DeleteQuoteAlternative(quoteAlternativeId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _HasConnections;
    /**
     * Whether or not the system has any connections available for this user.
     * @returns The response
     */
    HasConnections(webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    private _GetAllInstalledQuoteConnections;
    /**
     * Get all installed connections. Some installed connections may not be available to the user.
     * @returns List of connections
     */
    GetAllInstalledQuoteConnections(webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteConnection[]>;
    private _GetAllAvailableQuoteConnections;
    /**
     * Get all available connections. Some installed connections may not be available to the user. Use GetAllAvailableQuoteConnectionsWithPriceLists if you need the pricelists on the connections as well.
     * @returns List of connections
     */
    GetAllAvailableQuoteConnections(webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteConnection[]>;
    private _GetAllAvailableQuoteConnectionsWithPriceLists;
    /**
     * Get all available connections. Some installed connections may not be available to the user. Includes pricelists for the connection. This is a heavy call
     * @returns List of connections
     */
    GetAllAvailableQuoteConnectionsWithPriceLists(webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteConnection[]>;
    private _CreateConnectionFromConnectorName;
    /**
     * Create a new connection.
     * @param request - ConnectorName
     * @returns The created connection
     */
    CreateConnectionFromConnectorName(request: carriers.Quote_CreateConnectionFromConnectorNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteConnection>;
    /**
     * Create a new connection.
     * @param connectorName - The name of the connector to create this connection for.
     * @returns The created connection
     */
    CreateConnectionFromConnectorName(connectorName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteConnection>;
    private _GetConnection;
    /**
     * Returns the specified connection.
     * @param request - QuoteConnectionId
     * @returns The connection
     */
    GetConnection(request: carriers.Quote_GetConnectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteConnection>;
    /**
     * Returns the specified connection.
     * @param quoteConnectionId - Primary key of the connection
     * @returns The connection
     */
    GetConnection(quoteConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteConnection>;
    private _SaveConnection;
    /**
     * Saves a connection to the database.
     * @param request - Connection
     * @returns The resulting connection.
     */
    SaveConnection(request: carriers.Quote_SaveConnectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteConnection>;
    /**
     * Saves a connection to the database.
     * @param connection - The connection to save.
     * @returns The resulting connection.
     */
    SaveConnection(connection: carriers.QuoteConnection, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteConnection>;
    private _DeleteConnection;
    /**
     * Marks a connection as deleted.
     * @param request - QuoteConnectionId
     * @returns A void return
     */
    DeleteConnection(request: carriers.Quote_DeleteConnectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Marks a connection as deleted.
     * @param quoteConnectionId - Primary key of the connection to delete
     * @returns A void return
     */
    DeleteConnection(quoteConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _RestoreConnection;
    /**
     * Restores a connection marked as deleted.
     * @param request - QuoteConnectionId
     * @returns A void return
     */
    RestoreConnection(request: carriers.Quote_RestoreConnectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Restores a connection marked as deleted.
     * @param quoteConnectionId - Primary key of the connection to restore
     * @returns A void return
     */
    RestoreConnection(quoteConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetConnectionsForAssociate;
    /**
     * Returns all connections available for the specified user.
     * @param request - AssociateId
     * @returns The connections
     */
    GetConnectionsForAssociate(request: carriers.Quote_GetConnectionsForAssociateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteConnection[]>;
    /**
     * Returns all connections available for the specified user.
     * @param associateId - Primary key of the user
     * @returns The connections
     */
    GetConnectionsForAssociate(associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteConnection[]>;
    private _GetActivePriceLists;
    /**
     * Gets the available active PriceLists in a specific currency. Will return empty array if there is no PriceList with the stated currency available.
     * @param request - QuoteConnectionId, Currency
     * @returns The PriceLists that supports a specific currency
     */
    GetActivePriceLists(request: carriers.Quote_GetActivePriceListsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PriceList[]>;
    /**
     * Gets the available active PriceLists in a specific currency. Will return empty array if there is no PriceList with the stated currency available.
     * @param quoteConnectionId - Primary key of the connection
     * @param currency - Iso currency like: USD or NOK. See http://www.currency-iso.org/dl_iso_table_a1.xls for details. Case insensitive. Will return empty array if there is no PriceList with the stated currency available.
     * @returns The PriceLists that supports a specific currency
     */
    GetActivePriceLists(quoteConnectionId: number, currency: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PriceList[]>;
    private _GetActivePriceListsByCurrencyId;
    /**
     * Gets the available active PriceLists in a specific currency. Will return empty array if there is no PriceList with the stated currency available.
     * @param request - QuoteConnectionId, CurrencyId
     * @returns The PriceLists that supports a specific currency
     */
    GetActivePriceListsByCurrencyId(request: carriers.Quote_GetActivePriceListsByCurrencyIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PriceList[]>;
    /**
     * Gets the available active PriceLists in a specific currency. Will return empty array if there is no PriceList with the stated currency available.
     * @param quoteConnectionId - Primary key of the connection
     * @param currencyId - SuperOffice currency id.
     * @returns The PriceLists that supports a specific currency
     */
    GetActivePriceListsByCurrencyId(quoteConnectionId: number, currencyId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PriceList[]>;
    private _GetAllPriceLists;
    /**
     * Gets the all PriceLists in all currencies, including those inactive. Will return empty array if there is no PriceList available.
     * @param request - QuoteConnectionId, Currency
     * @returns The PriceLists that supports a specific currency
     */
    GetAllPriceLists(request: carriers.Quote_GetAllPriceListsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PriceList[]>;
    /**
     * Gets the all PriceLists in all currencies, including those inactive. Will return empty array if there is no PriceList available.
     * @param quoteConnectionId - Primary key of the connection
     * @param currency - Iso currency like: USD or NOK. See http://www.currency-iso.org/dl_iso_table_a1.xls for details. Case insensitive. Will return empty array if there is no PriceList with the stated currency available.
     * @returns The PriceLists that supports a specific currency
     */
    GetAllPriceLists(quoteConnectionId: number, currency: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PriceList[]>;
    private _GetAllPriceListsByCurrencyId;
    /**
     * Gets the all PriceLists in all currencies, including those inactive. Will return empty array if there is no PriceList available.
     * @param request - QuoteConnectionId, CurrencyId
     * @returns The PriceLists that supports a specific currency
     */
    GetAllPriceListsByCurrencyId(request: carriers.Quote_GetAllPriceListsByCurrencyIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PriceList[]>;
    /**
     * Gets the all PriceLists in all currencies, including those inactive. Will return empty array if there is no PriceList available.
     * @param quoteConnectionId - Primary key of the connection
     * @param currencyId - SuperOffice currency id.
     * @returns The PriceLists that supports a specific currency
     */
    GetAllPriceListsByCurrencyId(quoteConnectionId: number, currencyId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PriceList[]>;
    private _GetConnectorCapabilityNames;
    /**
     * Gets a list of all possible connector capabilities
     * @param request - QuoteConnectionId
     * @returns Capabilities names
     */
    GetConnectorCapabilityNames(request: carriers.Quote_GetConnectorCapabilityNamesRequest, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    /**
     * Gets a list of all possible connector capabilities
     * @param quoteConnectionId - Primary key of the connection
     * @returns Capabilities names
     */
    GetConnectorCapabilityNames(quoteConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    private _GetConnectorCapabilities;
    /**
     * Gets a list of connector capabilities
     * @param request - QuoteConnectionId
     * @returns Capabilities
     */
    GetConnectorCapabilities(request: carriers.Quote_GetConnectorCapabilitiesRequest, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    /**
     * Gets a list of connector capabilities
     * @param quoteConnectionId - Primary key of the connection
     * @returns Capabilities
     */
    GetConnectorCapabilities(quoteConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    private _CanConnectorProvideCapability;
    /**
     * Can the connector provide the capability
     * @param request - QuoteConnectionId, CapabilityName
     * @returns Capability name
     */
    CanConnectorProvideCapability(request: carriers.Quote_CanConnectorProvideCapabilityRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Can the connector provide the capability
     * @param quoteConnectionId - Primary key of the connection
     * @param capabilityName - Capability name
     * @returns Capability name
     */
    CanConnectorProvideCapability(quoteConnectionId: number, capabilityName: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _GetConnectionStartupErrors;
    /**
     * Returns an array of PluginResponseInfos for all failed connection initializations.
     * @returns Array of PluginResponseInfos for each failed connection initialization.
     */
    GetConnectionStartupErrors(webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse[]>;
    private _GetConnectionStartupResponse;
    /**
     * Returns the PluginResponseInfo for the connection initialization. Does not initialize the connection, just returns what happened when initialize was called.
     * @param request - QuoteConnectionId
     * @returns PluginResponseInfo for the connection initialization.
     */
    GetConnectionStartupResponse(request: carriers.Quote_GetConnectionStartupResponseRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    /**
     * Returns the PluginResponseInfo for the connection initialization. Does not initialize the connection, just returns what happened when initialize was called.
     * @param quoteConnectionId - Primary key of the connection
     * @returns PluginResponseInfo for the connection initialization.
     */
    GetConnectionStartupResponse(quoteConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    private _GetConnectionConfigFields;
    /**
     * Returns the config fields for the connection.
     * @param request - QuoteConnectionId
     * @returns Config Fields
     */
    GetConnectionConfigFields(request: carriers.Quote_GetConnectionConfigFieldsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    /**
     * Returns the config fields for the connection.
     * @param quoteConnectionId - Primary key of the connection
     * @returns Config Fields
     */
    GetConnectionConfigFields(quoteConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    private _SaveConnectionConfigFields;
    /**
     * Saves the connection config fields
     * @param request - QuoteConnectionId, ConnectionConfigFields
     * @returns Config Fields
     */
    SaveConnectionConfigFields(request: carriers.Quote_SaveConnectionConfigFieldsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    /**
     * Saves the connection config fields
     * @param quoteConnectionId - Primary key of the connection
     * @param connectionConfigFields - ConnectionConfigFields to save.
     * @returns Config Fields
     */
    SaveConnectionConfigFields(quoteConnectionId: number, connectionConfigFields: carriers.StringDictionary, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    private _CreateAndSaveQuote;
    /**
     * Creates a new quote on a sale.
     * @param request - SaleId, ConnectionId, FirstAlternativeName
     * @returns Quote carrier
     */
    CreateAndSaveQuote(request: carriers.Quote_CreateAndSaveQuoteRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteEntity>;
    /**
     * Creates a new quote on a sale.
     * @param saleId - SaleId of the connected sale
     * @param connectionId - ConnectionId
     * @param firstAlternativeName - Name to be given to the default alternative
     * @returns Quote carrier
     */
    CreateAndSaveQuote(saleId: number, connectionId: number, firstAlternativeName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteEntity>;
    private _GetQuoteEntity;
    /**
     * Get a Quote
     * @param request - QuoteId
     * @returns The Quote
     */
    GetQuoteEntity(request: carriers.Quote_GetQuoteEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteEntity>;
    /**
     * Get a Quote
     * @param quoteId - QuoteId of the Quote to get.
     * @returns The Quote
     */
    GetQuoteEntity(quoteId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteEntity>;
    private _GetQuoteEntityFromSaleId;
    /**
     * Get a Quote for a sale
     * @param request - SaleId
     * @returns The Quote
     */
    GetQuoteEntityFromSaleId(request: carriers.Quote_GetQuoteEntityFromSaleIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteEntity>;
    /**
     * Get a Quote for a sale
     * @param saleId - SaleId of the Quote to get.
     * @returns The Quote
     */
    GetQuoteEntityFromSaleId(saleId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteEntity>;
    private _SaveQuoteEntity;
    /**
     * Saves a QuoteEntity. Versions and alternatives will not be saved by this call.
     * @param request - QuoteEntity
     * @returns The saved Quote
     */
    SaveQuoteEntity(request: carriers.Quote_SaveQuoteEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteEntity>;
    /**
     * Saves a QuoteEntity. Versions and alternatives will not be saved by this call.
     * @param quoteEntity - The Quote entity to save
     * @returns The saved Quote
     */
    SaveQuoteEntity(quoteEntity: carriers.QuoteEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteEntity>;
    private _CreateAndSaveQuoteFromSale;
    /**
     * Creates a copy the active version with connected alternatives and quotelines from another sale.
     * @param request - CopyFromSaleId, CopyToSaleId
     * @returns The created Quote
     */
    CreateAndSaveQuoteFromSale(request: carriers.Quote_CreateAndSaveQuoteFromSaleRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteEntity>;
    /**
     * Creates a copy the active version with connected alternatives and quotelines from another sale.
     * @param copyFromSaleId - Id of the sale to copy the active quote from.
     * @param copyToSaleId - Id of the sale to copy the active quote to.
     * @returns The created Quote
     */
    CreateAndSaveQuoteFromSale(copyFromSaleId: number, copyToSaleId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteEntity>;
    private _PlaceOrder;
    /**
     * Place an order in the ERP system.
     * @param request - QuoteAlternativeId, MarkSaleAsSold, PoNumber, OrderComment, Culture
     * @returns Status for the placed order: OkWithInfo / Warn / Error with message or URL to open.
     */
    PlaceOrder(request: carriers.Quote_PlaceOrderRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginUrlResponse>;
    /**
     * Place an order in the ERP system.
     * @param quoteAlternativeId - Id of the alternative to place the order on.
     * @param markSaleAsSold - Should the state of the owning Sale be set to sold
     * @param poNumber - Purchase order number, saved to Quote record
     * @param orderComment - Order comment, saved to Quote record
     * @param culture - Desired culture for email body and other culture-sensitive templates/content
     * @returns Status for the placed order: OkWithInfo / Warn / Error with message or URL to open.
     */
    PlaceOrder(quoteAlternativeId: number, markSaleAsSold: boolean, poNumber: string, orderComment: string, culture: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginUrlResponse>;
    private _GetOrderState;
    /**
     * If there is a problem with a quoteline, the error description shall be placed in the status and reason fields of the quoteline, if there is a problem with the alternative, the error description shall be placed in the status and reason fields of the alternative. A summary of all the problems (if any) should be placed in the response object. Requires that the Create-Order capability is true.
     * @param request - QuoteVersionId
     * @returns The order state. If a new quoteversion is created, the QuoteVersionId will be found in Changes.AddedRecords.
     */
    GetOrderState(request: carriers.Quote_GetOrderStateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginUrlResponse>;
    /**
     * If there is a problem with a quoteline, the error description shall be placed in the status and reason fields of the quoteline, if there is a problem with the alternative, the error description shall be placed in the status and reason fields of the alternative. A summary of all the problems (if any) should be placed in the response object. Requires that the Create-Order capability is true.
     * @param quoteVersionId - the QuoteVersionId of the ordered version.
     * @returns The order state. If a new quoteversion is created, the QuoteVersionId will be found in Changes.AddedRecords.
     */
    GetOrderState(quoteVersionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginUrlResponse>;
    private _DeleteQuote;
    /**
     * Delete a Quote
     * @param request - QuoteId
     * @returns
     */
    DeleteQuote(request: carriers.Quote_DeleteQuoteRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Delete a Quote
     * @param quoteId - QuoteId of the Quote to delete.
     * @returns
     */
    DeleteQuote(quoteId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _CreateQuoteLine;
    /**
     * Create a quoteline based on a product key.
     * @param request - QuoteAlternativeId, ERPProductKey
     * @returns The updated quote line.
     */
    CreateQuoteLine(request: carriers.Quote_CreateQuoteLineRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLine>;
    /**
     * Create a quoteline based on a product key.
     * @param quoteAlternativeId - Primary key of the alternative
     * @param eRPProductKey - Primary key of the product in the ProductProvider
     * @returns The updated quote line.
     */
    CreateQuoteLine(quoteAlternativeId: number, eRPProductKey: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLine>;
    private _CreateQuoteLineFromProduct;
    /**
     * Create a quoteline based on a product.
     * @param request - QuoteAlternativeId, Product
     * @returns The updated quote line.
     */
    CreateQuoteLineFromProduct(request: carriers.Quote_CreateQuoteLineFromProductRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLine>;
    /**
     * Create a quoteline based on a product.
     * @param quoteAlternativeId - Primary key of the alternative
     * @param product - Product carrier
     * @returns The updated quote line.
     */
    CreateQuoteLineFromProduct(quoteAlternativeId: number, product: carriers.Product, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLine>;
    private _SaveQuoteLine;
    /**
     * Saves the QuoteLine in the SuperOffice database
     * @param request - QuoteLine
     * @returns The updated quote line (If the quoteline was new, it returns with id's set.
     */
    SaveQuoteLine(request: carriers.Quote_SaveQuoteLineRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLine>;
    /**
     * Saves the QuoteLine in the SuperOffice database
     * @param quoteLine - The QuoteLine to save.
     * @returns The updated quote line (If the quoteline was new, it returns with id's set.
     */
    SaveQuoteLine(quoteLine: carriers.QuoteLine, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLine>;
    private _SaveQuoteLines;
    /**
     * Saves the QuoteLines in the SuperOffice database
     * @param request - QuoteLines
     * @returns The updated quote lines (If the quoteline was new, it returns with id's set.
     */
    SaveQuoteLines(request: carriers.Quote_SaveQuoteLinesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLine[]>;
    /**
     * Saves the QuoteLines in the SuperOffice database
     * @param quoteLines - The QuoteLines to save.
     * @returns The updated quote lines (If the quoteline was new, it returns with id's set.
     */
    SaveQuoteLines(quoteLines: carriers.QuoteLine[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLine[]>;
    private _GetQuoteLine;
    /**
     * Get QuoteLine from database
     * @param request - QuoteLineId
     * @returns The updated quote line (If the quoteline was new, it returns with id's set.
     */
    GetQuoteLine(request: carriers.Quote_GetQuoteLineRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLine>;
    /**
     * Get QuoteLine from database
     * @param quoteLineId - Primary key of the quoteline to get.
     * @returns The updated quote line (If the quoteline was new, it returns with id's set.
     */
    GetQuoteLine(quoteLineId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLine>;
    private _GetQuoteLines;
    /**
     * Get all QuoteLines from an alternative
     * @param request - QuoteAlternativeId
     * @returns QuoteLine array
     */
    GetQuoteLines(request: carriers.Quote_GetQuoteLinesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLine[]>;
    /**
     * Get all QuoteLines from an alternative
     * @param quoteAlternativeId - Id of the alternative to return the quotelines for
     * @returns QuoteLine array
     */
    GetQuoteLines(quoteAlternativeId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLine[]>;
    private _DeleteQuoteLine;
    /**
     * Deletes the QuoteLine in the SuperOffice database
     * @param request - QuoteLineId
     * @returns Nothing
     */
    DeleteQuoteLine(request: carriers.Quote_DeleteQuoteLineRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Deletes the QuoteLine in the SuperOffice database
     * @param quoteLineId - Primary key of the quoteline to delete
     * @returns Nothing
     */
    DeleteQuoteLine(quoteLineId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _DeleteQuoteLines;
    /**
     * Delete the QuoteLines in the SuperOffice database
     * @param request - QuoteLineIds
     * @returns Nothing
     */
    DeleteQuoteLines(request: carriers.Quote_DeleteQuoteLinesRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Delete the QuoteLines in the SuperOffice database
     * @param quoteLineIds - Primary keys of the quotelines to delete
     * @returns Nothing
     */
    DeleteQuoteLines(quoteLineIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _RecalculateQuoteLine;
    /**
     * When the user changes one or more values in a quoteline, the connector gets to change the QuoteLine, for instance calculate VAT. Shall be called when the user changes any of the following fields: Quantity, DiscountAmount, DiscountPercent, ListPrice (if allowed). Will calculate the TotalPrice and the VAT (if possible) for the line.
     * @param request - QuoteLine, ChangedFields
     * @returns The updated quote line.
     */
    RecalculateQuoteLine(request: carriers.Quote_RecalculateQuoteLineRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLine>;
    /**
     * When the user changes one or more values in a quoteline, the connector gets to change the QuoteLine, for instance calculate VAT. Shall be called when the user changes any of the following fields: Quantity, DiscountAmount, DiscountPercent, ListPrice (if allowed). Will calculate the TotalPrice and the VAT (if possible) for the line.
     * @param quoteLine - The QuoteLine to recalculate
     * @param changedFields - The id of the changed fields in the form 'TableName.FieldName'
     * @returns The updated quote line.
     */
    RecalculateQuoteLine(quoteLine: carriers.QuoteLine, changedFields: string[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLine>;
    private _GetQuoteLineImage;
    /**
     * Gets an image connected to a quoteline, either from the ERPProvider or from the SuperOffice database
     * @param request - QuoteLineId, Rank
     * @returns The image. Returns null if no image available.
     */
    GetQuoteLineImage(request: carriers.Quote_GetQuoteLineImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    /**
     * Gets an image connected to a quoteline, either from the ERPProvider or from the SuperOffice database
     * @param quoteLineId - Primary key of the quoteline
     * @param rank - The rank of the image.
     * @returns The image. Returns null if no image available.
     */
    GetQuoteLineImage(quoteLineId: number, rank: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    private _SaveQuoteLineImage;
    /**
     * Saves the image connected to a quoteline in the SuperOffice database
     * @param request - QuoteLineId, Image, Rank
     * @returns Nothing
     */
    SaveQuoteLineImage(request: carriers.Quote_SaveQuoteLineImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Saves the image connected to a quoteline in the SuperOffice database
     * @param quoteLineId - Primary key of the quoteline
     * @param image - The image.
     * @param rank - The rank of the image.
     * @returns Nothing
     */
    SaveQuoteLineImage(quoteLineId: number, image: ArrayBuffer | string, rank: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetExtraInfo;
    /**
     * Converts an xml string into an object representation.
     * @param request - QuoteLineExtraData
     * @returns An object representation on the xml
     */
    GetExtraInfo(request: carriers.Quote_GetExtraInfoRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProductExtraDataField[]>;
    /**
     * Converts an xml string into an object representation.
     * @param quoteLineExtraData - The extra data as xml.
     * @returns An object representation on the xml
     */
    GetExtraInfo(quoteLineExtraData: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProductExtraDataField[]>;
    private _GetQuoteLineConfiguration;
    /**
     * Returns the configuration field with the given id
     * @param request - QuoteLineConfigurationId
     * @returns QuoteLineConfiguration
     */
    GetQuoteLineConfiguration(request: carriers.Quote_GetQuoteLineConfigurationRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLineConfiguration>;
    /**
     * Returns the configuration field with the given id
     * @param quoteLineConfigurationId - Id of the QuoteLineConfiguration to get.
     * @returns QuoteLineConfiguration
     */
    GetQuoteLineConfiguration(quoteLineConfigurationId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLineConfiguration>;
    private _GetQuoteLineConfigurationFromFieldName;
    /**
     * Returns the configuration field with the given field name
     * @param request - FieldName
     * @returns QuoteLineConfiguration
     */
    GetQuoteLineConfigurationFromFieldName(request: carriers.Quote_GetQuoteLineConfigurationFromFieldNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLineConfiguration>;
    /**
     * Returns the configuration field with the given field name
     * @param fieldName - Field name of the QuoteLineConfiguration to get.
     * @returns QuoteLineConfiguration
     */
    GetQuoteLineConfigurationFromFieldName(fieldName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLineConfiguration>;
    private _GetAllQuoteLineConfigurations;
    /**
     * Returns all the configuration fields
     * @returns Array of QuoteLineConfigurations
     */
    GetAllQuoteLineConfigurations(webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLineConfiguration[]>;
    private _GetInUseQuoteLineConfigurations;
    /**
     * Returns the configuration fields that should be visible in the GUI.
     * @returns Array of QuoteLineConfigurations
     */
    GetInUseQuoteLineConfigurations(webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLineConfiguration[]>;
    private _SaveQuoteLineConfiguration;
    /**
     * Save a QuoteLineConfiguration object. It is not possible to add a new configuration.
     * @param request - QuoteLineConfiguration
     * @returns The saved QuoteLineConfiguration.
     */
    SaveQuoteLineConfiguration(request: carriers.Quote_SaveQuoteLineConfigurationRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLineConfiguration>;
    /**
     * Save a QuoteLineConfiguration object. It is not possible to add a new configuration.
     * @param quoteLineConfiguration - The QuoteLineConfiguration to save.
     * @returns The saved QuoteLineConfiguration.
     */
    SaveQuoteLineConfiguration(quoteLineConfiguration: carriers.QuoteLineConfiguration, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLineConfiguration>;
    private _SaveQuoteLineConfigurations;
    /**
     * Save a collection of QuoteLineConfigurations. It is not possible to add a new configurations.
     * @param request - QuoteLineConfigurations
     * @returns The saved QuoteLineConfigurations.
     */
    SaveQuoteLineConfigurations(request: carriers.Quote_SaveQuoteLineConfigurationsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLineConfiguration[]>;
    /**
     * Save a collection of QuoteLineConfigurations. It is not possible to add a new configurations.
     * @param quoteLineConfigurations - The QuoteLineConfigurations to save.
     * @returns The saved QuoteLineConfigurations.
     */
    SaveQuoteLineConfigurations(quoteLineConfigurations: carriers.QuoteLineConfiguration[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteLineConfiguration[]>;
    private _GetQuoteList;
    /**
     * Gets a named list from the connector Return array of QuoteListItems. Return NULL if the given list is not supported.
     * @param request - QuoteListType
     * @returns The list items
     */
    GetQuoteList(request: carriers.Quote_GetQuoteListRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteListItem[]>;
    /**
     * Gets a named list from the connector Return array of QuoteListItems. Return NULL if the given list is not supported.
     * @param quoteListType - The name of the requested list, for instance: ProductCategory, ProductFamily, ProductType, PaymentTerms, PaymentType, DeliveryTerms, DeliveryType.
     * @returns The list items
     */
    GetQuoteList(quoteListType: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteListItem[]>;
    private _ValidateQuoteVersion;
    /**
     * When the user changes one or more values in a quoteline or a quoteAlternative, the connector gets to change the QuoteLines and the alternative, for instance calculate VAT. ValidateQuoteVersion shall be called when the user presses the validate button, presses the send button or closes the quote dialog. RecalculateQuoteAlternative should typically validate all alternatives, set values in extrafields, and set the state in the version.
     * @param request - QuoteVersionId, Action
     * @returns The updated quote version.
     */
    ValidateQuoteVersion(request: carriers.Quote_ValidateQuoteVersionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersionValidated>;
    /**
     * When the user changes one or more values in a quoteline or a quoteAlternative, the connector gets to change the QuoteLines and the alternative, for instance calculate VAT. ValidateQuoteVersion shall be called when the user presses the validate button, presses the send button or closes the quote dialog. RecalculateQuoteAlternative should typically validate all alternatives, set values in extrafields, and set the state in the version.
     * @param quoteVersionId - The version to be validated
     * @param action - The action, if any, related to the validate call, like PlaceOrder or SendQuote
     * @returns The updated quote version.
     */
    ValidateQuoteVersion(quoteVersionId: number, action: enums.QuoteVersionButtonAction, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersionValidated>;
    private _CreateAndSaveQuoteVersion;
    /**
     * Created a new QuoteVersion based on another QuoteVersion on the same Quote.
     * @param request - QuoteVersionId
     * @returns The Quote version
     */
    CreateAndSaveQuoteVersion(request: carriers.Quote_CreateAndSaveQuoteVersionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersion>;
    /**
     * Created a new QuoteVersion based on another QuoteVersion on the same Quote.
     * @param quoteVersionId - QuoteVersionId of the version to copy the contents from.
     * @returns The Quote version
     */
    CreateAndSaveQuoteVersion(quoteVersionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersion>;
    private _GetQuoteVersion;
    /**
     * Get a QuoteVersion
     * @param request - QuoteVersionId
     * @returns Array of Quote versions
     */
    GetQuoteVersion(request: carriers.Quote_GetQuoteVersionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersion>;
    /**
     * Get a QuoteVersion
     * @param quoteVersionId - QuoteVersionId to get information from
     * @returns Array of Quote versions
     */
    GetQuoteVersion(quoteVersionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersion>;
    private _GetQuoteVersions;
    /**
     * Get all quote versions for a sale
     * @param request - QuoteId
     * @returns Array of Quote versions
     */
    GetQuoteVersions(request: carriers.Quote_GetQuoteVersionsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersion[]>;
    /**
     * Get all quote versions for a sale
     * @param quoteId - QuoteId of the quote to get versions from
     * @returns Array of Quote versions
     */
    GetQuoteVersions(quoteId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersion[]>;
    private _SendQuoteVersion;
    /**
     * Send the quote to the user&apos;s customer. More parameters to be added later...
     * @param request - QuoteVersionId, ExpiryDate, FollowupDate, FollowupText, Culture
     * @returns Response of the operation
     */
    SendQuoteVersion(request: carriers.Quote_SendQuoteVersionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginUrlResponse>;
    /**
     * Send the quote to the user&apos;s customer. More parameters to be added later...
     * @param quoteVersionId - QuoteVersionId of the quoteversion to send
     * @param expiryDate - Date the quote expires
     * @param followupDate - Date for the followup task, to remind the sales rep about the quote
     * @param followupText - The body text for the follwup appointment, resolved to the correct culture (no resources please)
     * @param culture - Desired culture for email body and other culture-sensitive templates/content
     * @returns Response of the operation
     */
    SendQuoteVersion(quoteVersionId: number, expiryDate: Date, followupDate: Date, followupText: string, culture: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginUrlResponse>;
    private _SaveQuoteVersion;
    /**
     * Saves a quote version
     * @param request - QuoteVersion
     * @returns The saved quote version
     */
    SaveQuoteVersion(request: carriers.Quote_SaveQuoteVersionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersion>;
    /**
     * Saves a quote version
     * @param quoteVersion - The quote version to save
     * @returns The saved quote version
     */
    SaveQuoteVersion(quoteVersion: carriers.QuoteVersion, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersion>;
    private _ApproveQuoteVersion;
    /**
     * Approves a quote version
     * @param request - QuoteVersionId, ApprovedByText, ApprovedByAssociateId, ApprovalText
     * @returns Response of the the operation
     */
    ApproveQuoteVersion(request: carriers.Quote_ApproveQuoteVersionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ApproveRejectResponse>;
    /**
     * Approves a quote version
     * @param quoteVersionId - QuoteVersionId to approve.
     * @param approvedByText - 'Approved by' prefix to ApprovalText used when creating appointment task to log approval. Must be passed since service does not know which language to use for 'Approved By' string.
     * @param approvedByAssociateId - AssociateId of the associate who approved the quote version.
     * @param approvalText - Approval text.
     * @returns Response of the the operation
     */
    ApproveQuoteVersion(quoteVersionId: number, approvedByText: string, approvedByAssociateId: number, approvalText: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ApproveRejectResponse>;
    private _RejectQuoteVersion;
    /**
     * Rejects a quote version
     * @param request - QuoteVersionId, RejectedByText, RejectedByAssociateId, RejectionText
     * @returns Response of the the operation
     */
    RejectQuoteVersion(request: carriers.Quote_RejectQuoteVersionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ApproveRejectResponse>;
    /**
     * Rejects a quote version
     * @param quoteVersionId - QuoteVersionId to approve.
     * @param rejectedByText - 'Rejected by' prefix to RejectionText used when creating appointment task to log rejection. Must be passed since service does not know which language to use for 'Rejected By' string.
     * @param rejectedByAssociateId - AssociateId of the associate who rejected the quote version.
     * @param rejectionText - Rejection text.
     * @returns Response of the the operation
     */
    RejectQuoteVersion(quoteVersionId: number, rejectedByText: string, rejectedByAssociateId: number, rejectionText: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ApproveRejectResponse>;
    private _GenerateQuoteDocuments;
    /**
     * Generate all the documents required to send the Quote as an email to the prospect - or an Order Confirmation; it just depends on the template id&apos;s for the lines doc and mail body. Quote version status is not changed by this method.
     * @param request - QuoteVersionId, EmailBodyTemplateId, AttachMainDocument, QuotedProductsTemplateId, IncludeAttachments, RawMailSubject
     * @returns Carrier specifying the document id's of all the documents, as well as other results
     */
    GenerateQuoteDocuments(request: carriers.Quote_GenerateQuoteDocumentsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuotePublishDocuments>;
    /**
     * Generate all the documents required to send the Quote as an email to the prospect - or an Order Confirmation; it just depends on the template id&apos;s for the lines doc and mail body. Quote version status is not changed by this method.
     * @param quoteVersionId - VersionId of the quote to be sent; the status of the version will not be changed by calling this method
     * @param emailBodyTemplateId - Id of the template for the email body, must be nonzero and refer to either a Quote mail body or Order Confirmation mail body, with html content
     * @param attachMainDocument - Should the main quote document be attached to the email; generally false for Order Confirmations
     * @param quotedProductsTemplateId - Id of the template for the quote- or order confirmation-lines; zero if no document should be produced
     * @param includeAttachments - If true, then the currently specified (in the database) attachments will be included
     * @param rawMailSubject - Subject line for email, in the correct language, sent in here to have any template variables substituted
     * @returns Carrier specifying the document id's of all the documents, as well as other results
     */
    GenerateQuoteDocuments(quoteVersionId: number, emailBodyTemplateId: number, attachMainDocument: boolean, quotedProductsTemplateId: number, includeAttachments: boolean, rawMailSubject: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuotePublishDocuments>;
    private _GetOrderConfirmation;
    /**
     * Get a base64-encoded data stream that is just the order confirmation document, for the given quote version; no permanent document is created or stored anywhere; the result is a PDF
     * @param request - QuoteVersionId, ConfirmationTemplateId
     * @returns Base64-encoded binary data, that is in fact a PDF document that should be shown to the user
     */
    GetOrderConfirmation(request: carriers.Quote_GetOrderConfirmationRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Get a base64-encoded data stream that is just the order confirmation document, for the given quote version; no permanent document is created or stored anywhere; the result is a PDF
     * @param quoteVersionId - VersionId of the quote to be sent; the status of the version will not be changed by calling this method
     * @param confirmationTemplateId - Id of the template for the order confirmation lines document
     * @returns Base64-encoded binary data, that is in fact a PDF document that should be shown to the user
     */
    GetOrderConfirmation(quoteVersionId: number, confirmationTemplateId: number, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetQuoteVersionWorkflowState;
    /**
     * Get all button states for the Quote version dialog. Packages ImageState, Button states and status info into one call. Collects most important warnings/errors from across all quotelines/alternatives in this quote version.
     * @param request - QuoteVersionId, QuoteAlternativeId
     * @returns Workflow state information
     */
    GetQuoteVersionWorkflowState(request: carriers.Quote_GetQuoteVersionWorkflowStateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersionWorkflowState>;
    /**
     * Get all button states for the Quote version dialog. Packages ImageState, Button states and status info into one call. Collects most important warnings/errors from across all quotelines/alternatives in this quote version.
     * @param quoteVersionId - Id of the quote version to get the button states for.
     * @param quoteAlternativeId - Id of the active quote alternative id.
     * @returns Workflow state information
     */
    GetQuoteVersionWorkflowState(quoteVersionId: number, quoteAlternativeId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersionWorkflowState>;
    private _UpdateQuoteVersionPrices;
    /**
     * Update price on the all the quotelines for each alternative in the current quote version
     * @param request - QuoteVersionId
     * @returns The updated quote version.
     */
    UpdateQuoteVersionPrices(request: carriers.Quote_UpdateQuoteVersionPricesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersionValidated>;
    /**
     * Update price on the all the quotelines for each alternative in the current quote version
     * @param quoteVersionId - The version to be update prices for
     * @returns The updated quote version.
     */
    UpdateQuoteVersionPrices(quoteVersionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersionValidated>;
    private _SaveQuoteVersionNumber;
    /**
     * Save the quote version number if it is valid
     * @param request - QuoteVersionId, Number
     * @returns True if the number was valid and then saved
     */
    SaveQuoteVersionNumber(request: carriers.Quote_SaveQuoteVersionNumberRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Save the quote version number if it is valid
     * @param quoteVersionId - VersionId of the quote version
     * @param number - The number to save
     * @returns True if the number was valid and then saved
     */
    SaveQuoteVersionNumber(quoteVersionId: number, number: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _GetQuoteVersionWorkflowImageState;
    /**
     * Get state icon and name for the Quote version dialog header.
     * @param request - QuoteVersionId
     * @returns Image and state name information
     */
    GetQuoteVersionWorkflowImageState(request: carriers.Quote_GetQuoteVersionWorkflowImageStateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersionButtonState>;
    /**
     * Get state icon and name for the Quote version dialog header.
     * @param quoteVersionId - Id of the quote version to get the version state for.
     * @returns Image and state name information
     */
    GetQuoteVersionWorkflowImageState(quoteVersionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersionButtonState>;
    private _GetQuoteVersionWorkflowButtonStates;
    /**
     * Get all button states for the Quote version dialog.
     * @param request - QuoteVersionId, QuoteAlternativeId
     * @returns Workflow state information
     */
    GetQuoteVersionWorkflowButtonStates(request: carriers.Quote_GetQuoteVersionWorkflowButtonStatesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersionWorkflowState>;
    /**
     * Get all button states for the Quote version dialog.
     * @param quoteVersionId - Id of the quote version to get the button states for.
     * @param quoteAlternativeId - Id of the active quote alternative id.
     * @returns Workflow state information
     */
    GetQuoteVersionWorkflowButtonStates(quoteVersionId: number, quoteAlternativeId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersionWorkflowState>;
    private _GetQuoteVersionWorkflowStatusInfo;
    /**
     * Get status info for the Quote version dialog header. Collects most important warnings/errors from across all quotelines/alternatives in this quote version.
     * @param request - QuoteVersionId
     * @returns Most important status text + icon information.
     */
    GetQuoteVersionWorkflowStatusInfo(request: carriers.Quote_GetQuoteVersionWorkflowStatusInfoRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersionStatusInformation>;
    /**
     * Get status info for the Quote version dialog header. Collects most important warnings/errors from across all quotelines/alternatives in this quote version.
     * @param quoteVersionId - Id of the quote version to get the status info for.
     * @returns Most important status text + icon information.
     */
    GetQuoteVersionWorkflowStatusInfo(quoteVersionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersionStatusInformation>;
    private _RequestApproval;
    /**
     * Notifies specified associate that this quote needs approval.
     * @param request - QuoteVersionId, AssociateId, Comment
     * @returns Response of the the operation
     */
    RequestApproval(request: carriers.Quote_RequestApprovalRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    /**
     * Notifies specified associate that this quote needs approval.
     * @param quoteVersionId - The quoteversion to be approved.
     * @param associateId - The associate that should be notified.
     * @param comment - Details or reason for request
     * @returns Response of the the operation
     */
    RequestApproval(quoteVersionId: number, associateId: number, comment: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    private _CancelApprovalRequest;
    /**
     * Cancel a pending quote approval request.
     * @param request - QuoteVersionId
     * @returns Response of the the operation
     */
    CancelApprovalRequest(request: carriers.Quote_CancelApprovalRequestRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    /**
     * Cancel a pending quote approval request.
     * @param quoteVersionId - The quoteversion for which approval was previously sent.
     * @returns Response of the the operation
     */
    CancelApprovalRequest(quoteVersionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    private _CreateOrUpdateQuoteVersionAttachments;
    /**
     * Look at the Quote version, related sale and sale type, and ensure that the correct QuoteVersionAttachment records exist. This method may create or delete records
     * @param request - QuoteVersionId
     * @returns The current attachments for the given Quote version, after all updates have been completed
     */
    CreateOrUpdateQuoteVersionAttachments(request: carriers.Quote_CreateOrUpdateQuoteVersionAttachmentsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersionAttachment[]>;
    /**
     * Look at the Quote version, related sale and sale type, and ensure that the correct QuoteVersionAttachment records exist. This method may create or delete records
     * @param quoteVersionId - The ID of the quote version
     * @returns The current attachments for the given Quote version, after all updates have been completed
     */
    CreateOrUpdateQuoteVersionAttachments(quoteVersionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteVersionAttachment[]>;
    private _IncludeQuoteVersionAttachment;
    /**
     * Toggle the &apos;included&apos; state of a quote version attachment; will throw exceptions if called on locked versions
     * @param request - QuoteVersionId, DocumentId, Include
     * @returns The new state
     */
    IncludeQuoteVersionAttachment(request: carriers.Quote_IncludeQuoteVersionAttachmentRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Toggle the &apos;included&apos; state of a quote version attachment; will throw exceptions if called on locked versions
     * @param quoteVersionId - The ID of the Quote version
     * @param documentId - The ID of the document
     * @param include - Desired state
     * @returns The new state
     */
    IncludeQuoteVersionAttachment(quoteVersionId: number, documentId: number, include: boolean, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _ToggleSaleTypeQuoteAttachmentDefaultIncluded;
    /**
     * Toggle the &apos;default included&apos; state of a sale type quote attachment
     * @param request - SaleTypeQuoteAttachmentId
     * @returns The new state
     */
    ToggleSaleTypeQuoteAttachmentDefaultIncluded(request: carriers.Quote_ToggleSaleTypeQuoteAttachmentDefaultIncludedRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Toggle the &apos;default included&apos; state of a sale type quote attachment
     * @param saleTypeQuoteAttachmentId - The ID of the sale type quote attachment row
     * @returns The new state
     */
    ToggleSaleTypeQuoteAttachmentDefaultIncluded(saleTypeQuoteAttachmentId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _AddSaleTypeQuoteAttachment;
    /**
     * Adds a new quote attachment document to a sale type
     * @param request - SaleTypeId, DocumentId
     * @returns ID of the new sale type quote attachment row
     */
    AddSaleTypeQuoteAttachment(request: carriers.Quote_AddSaleTypeQuoteAttachmentRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Adds a new quote attachment document to a sale type
     * @param saleTypeId - The ID of the sale type
     * @param documentId - The ID of the document
     * @returns ID of the new sale type quote attachment row
     */
    AddSaleTypeQuoteAttachment(saleTypeId: number, documentId: number, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _DeleteSaleTypeQuoteAttachment;
    /**
     * Deletes the sale type quote attachment with the given id
     * @param request - SaleTypeQuoteAttachmentId
     * @returns
     */
    DeleteSaleTypeQuoteAttachment(request: carriers.Quote_DeleteSaleTypeQuoteAttachmentRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Deletes the sale type quote attachment with the given id
     * @param saleTypeQuoteAttachmentId - The ID of the sale type quote attachment row to delete
     * @returns
     */
    DeleteSaleTypeQuoteAttachment(saleTypeQuoteAttachmentId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _ToggleQuoteVersionAttachmentIncluded;
    /**
     * Toggle the &apos;included&apos; state of a quote version attachment
     * @param request - QuoteVersionAttachmentId
     * @returns The new state
     */
    ToggleQuoteVersionAttachmentIncluded(request: carriers.Quote_ToggleQuoteVersionAttachmentIncludedRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Toggle the &apos;included&apos; state of a quote version attachment
     * @param quoteVersionAttachmentId - The ID of the quote version attachment row
     * @returns The new state
     */
    ToggleQuoteVersionAttachmentIncluded(quoteVersionAttachmentId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
}
//# sourceMappingURL=QuoteAgent.d.ts.map