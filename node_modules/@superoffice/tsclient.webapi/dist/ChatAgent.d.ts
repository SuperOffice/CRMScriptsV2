import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Chat functions. Manage chat channels, sessions and messages.
 */
export interface IChatAgent {
    CreateDefaultChatSessionEntity(): Promise<carriers.ChatSessionEntity>;
    SaveChatSessionEntity(entity: carriers.ChatSessionEntity): Promise<carriers.ChatSessionEntity>;
    DeleteChatSessionEntity(ChatSessionEntityId: number): Promise<void>;
    CreateDefaultChatTopicAgent(): Promise<carriers.ChatTopicAgent>;
    CreateDefaultChatTopicEntity(): Promise<carriers.ChatTopicEntity>;
    SaveChatTopicEntity(entity: carriers.ChatTopicEntity): Promise<carriers.ChatTopicEntity>;
    DeleteChatTopicEntity(ChatTopicEntityId: number): Promise<void>;
    GetChatPresence(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatPresence[]>;
    SaveChatPresence(request: carriers.Chat_SaveChatPresenceRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SaveChatPresence(chatPresence: carriers.ChatPresence[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetChatSessionEntity(chatSessionEntityId: number): Promise<carriers.ChatSessionEntity>;
    ChatSessionsForUser(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatSessionEntity[]>;
    TransferChatSession(request: carriers.Chat_TransferChatSessionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatSessionEntity>;
    TransferChatSession(chatSessionId: number, toAssociate: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatSessionEntity>;
    AcceptChatSessionTransfer(request: carriers.Chat_AcceptChatSessionTransferRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatSessionEntity>;
    AcceptChatSessionTransfer(chatSessionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatSessionEntity>;
    RejectChatSessionTransfer(request: carriers.Chat_RejectChatSessionTransferRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatSessionEntity>;
    RejectChatSessionTransfer(chatSessionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatSessionEntity>;
    PickUpChatSession(request: carriers.Chat_PickUpChatSessionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatSessionEntity>;
    PickUpChatSession(chatSessionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatSessionEntity>;
    PickUpFirstChatSession(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatSessionEntity>;
    ResetChatSession(request: carriers.Chat_ResetChatSessionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatSessionEntity>;
    ResetChatSession(chatSessionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatSessionEntity>;
    GetChatTranscript(request: carriers.Chat_GetChatTranscriptRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetChatTranscript(chatSessionId: number, html: boolean, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetChatMessages(request: carriers.Chat_GetChatMessagesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatMessage[]>;
    GetChatMessages(chatSessionId: number, after: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatMessage[]>;
    AddChatMessage(request: carriers.Chat_AddChatMessageRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatMessage>;
    AddChatMessage(chatSessionId: number, message: carriers.ChatMessage, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatMessage>;
    GetChatTopicEntity(chatTopicEntityId: number): Promise<carriers.ChatTopicEntity>;
    IsWithinOpeningHours(request: carriers.Chat_IsWithinOpeningHoursRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    IsWithinOpeningHours(chatTopicId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    ChatTopicsForUser(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatTopicEntity[]>;
    GetUserAgentList(request: carriers.Chat_GetUserAgentListRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    GetUserAgentList(flat: boolean, onlyPresent: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    GetChatTopicUserAgentList(request: carriers.Chat_GetChatTopicUserAgentListRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatTopicAgent[]>;
    GetChatTopicUserAgentList(chatTopicId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatTopicAgent[]>;
    GetChatTopicUserAgent(request: carriers.Chat_GetChatTopicUserAgentRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatTopicAgent>;
    GetChatTopicUserAgent(chatTopicId: number, username: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatTopicAgent>;
    AddChatTopicUserAgent(request: carriers.Chat_AddChatTopicUserAgentRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatTopicAgent>;
    AddChatTopicUserAgent(chatTopicId: number, useragent: carriers.ChatTopicAgent, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatTopicAgent>;
    UpdateChatTopicUserAgent(request: carriers.Chat_UpdateChatTopicUserAgentRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatTopicAgent>;
    UpdateChatTopicUserAgent(chatTopicId: number, username: string, useragent: carriers.ChatTopicAgent, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatTopicAgent>;
    UpdateChatTopicUserAgents(request: carriers.Chat_UpdateChatTopicUserAgentsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatTopicAgent[]>;
    UpdateChatTopicUserAgents(chatTopicId: number, useragents: carriers.ChatTopicAgent[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatTopicAgent[]>;
    DeleteChatTopicUserAgent(request: carriers.Chat_DeleteChatTopicUserAgentRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteChatTopicUserAgent(chatTopicId: number, username: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    CreateChatSessionForTopic(request: carriers.Chat_CreateChatSessionForTopicRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatSessionEntity>;
    CreateChatSessionForTopic(chatTopicId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatSessionEntity>;
}
/**
 * Chat functions. Manage chat channels, sessions and messages.
 */
export declare class ChatAgent extends base.WebApiBase implements IChatAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * Set default values into a new ChatSessionEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultChatSessionEntity(options?: base.WebApiRequestOptions): Promise<carriers.ChatSessionEntity>;
    SaveChatSessionEntity(entity: carriers.ChatSessionEntity, options?: base.WebApiRequestOptions): Promise<carriers.ChatSessionEntity>;
    DeleteChatSessionEntity(ChatSessionEntityId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new ChatTopicAgent.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultChatTopicAgent(options?: base.WebApiRequestOptions): Promise<carriers.ChatTopicAgent>;
    /**
     * Set default values into a new ChatTopicEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultChatTopicEntity(options?: base.WebApiRequestOptions): Promise<carriers.ChatTopicEntity>;
    SaveChatTopicEntity(entity: carriers.ChatTopicEntity, options?: base.WebApiRequestOptions): Promise<carriers.ChatTopicEntity>;
    DeleteChatTopicEntity(ChatTopicEntityId: number, options?: base.WebApiRequestOptions): Promise<void>;
    private _GetChatPresence;
    /**
     * Get the chat presence status for all chat users
     * @returns An array with ChatPresence objects for each user
     */
    GetChatPresence(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatPresence[]>;
    private _SaveChatPresence;
    /**
     * Save the chat presence for specified users
     * @param request - ChatPresence
     * @returns void
     */
    SaveChatPresence(request: carriers.Chat_SaveChatPresenceRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Save the chat presence for specified users
     * @param chatPresence - An array with ChatPresence objects. Only the UserId and Present information is used while saving
     * @returns void
     */
    SaveChatPresence(chatPresence: carriers.ChatPresence[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetChatSessionEntity(chatSessionEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.ChatSessionEntity>;
    private _ChatSessionsForUser;
    /**
     * Get all chat sessions which this user is a member of. Members means that you have at least one of: Can Respond, Notifications, Listen or Manager
     * @returns Array of chat sessions the current user can access
     */
    ChatSessionsForUser(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatSessionEntity[]>;
    private _TransferChatSession;
    /**
     * Request to send the session to another user. If the session does not belong to the user, nothing happens.
     * @param request - ChatSessionId, ToAssociate
     * @returns The updated chat session
     */
    TransferChatSession(request: carriers.Chat_TransferChatSessionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatSessionEntity>;
    /**
     * Request to send the session to another user. If the session does not belong to the user, nothing happens.
     * @param chatSessionId - id of the chat session to send
     * @param toAssociate - Associate username or associate id to send session to.
     * @returns The updated chat session
     */
    TransferChatSession(chatSessionId: number, toAssociate: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatSessionEntity>;
    private _AcceptChatSessionTransfer;
    /**
     * Accept the transfer: assign the session to the user. If the session is not being transferred, nothing happens.
     * @param request - ChatSessionId
     * @returns The updated chat session
     */
    AcceptChatSessionTransfer(request: carriers.Chat_AcceptChatSessionTransferRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatSessionEntity>;
    /**
     * Accept the transfer: assign the session to the user. If the session is not being transferred, nothing happens.
     * @param chatSessionId - id of the chat session to send
     * @returns The updated chat session
     */
    AcceptChatSessionTransfer(chatSessionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatSessionEntity>;
    private _RejectChatSessionTransfer;
    /**
     * Do not want. Deny the transfer to the user. If the session is not being transferred, nothing happens.
     * @param request - ChatSessionId
     * @returns The updated chat session
     */
    RejectChatSessionTransfer(request: carriers.Chat_RejectChatSessionTransferRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatSessionEntity>;
    /**
     * Do not want. Deny the transfer to the user. If the session is not being transferred, nothing happens.
     * @param chatSessionId - id of the chat session to send back
     * @returns The updated chat session
     */
    RejectChatSessionTransfer(chatSessionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatSessionEntity>;
    private _PickUpChatSession;
    /**
     * &apos;answer&apos; the session: assign the session to the user. The welcome message is sent to the customer. Returns NULL if session was not in queue.
     * @param request - ChatSessionId
     * @returns The chat session
     */
    PickUpChatSession(request: carriers.Chat_PickUpChatSessionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatSessionEntity>;
    /**
     * &apos;answer&apos; the session: assign the session to the user. The welcome message is sent to the customer. Returns NULL if session was not in queue.
     * @param chatSessionId - id of the chat session to answer
     * @returns The chat session
     */
    PickUpChatSession(chatSessionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatSessionEntity>;
    private _PickUpFirstChatSession;
    /**
     * &apos;answer&apos; the first available session from the queue: assign the session to the user. The welcome message is sent to the customer.
     * @returns The picked-up chat session
     */
    PickUpFirstChatSession(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatSessionEntity>;
    private _ResetChatSession;
    /**
     * Reset chat session, put it back on the queue for pickup. Used by bots to hand off a session to human
     * @param request - ChatSessionId
     * @returns The updated chat session
     */
    ResetChatSession(request: carriers.Chat_ResetChatSessionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatSessionEntity>;
    /**
     * Reset chat session, put it back on the queue for pickup. Used by bots to hand off a session to human
     * @param chatSessionId - id of the chat session to reset
     * @returns The updated chat session
     */
    ResetChatSession(chatSessionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatSessionEntity>;
    private _GetChatTranscript;
    /**
     * Get the chat transcript, formatted as plain text or html
     * @param request - ChatSessionId, Html
     * @returns The transcript in text or HTML
     */
    GetChatTranscript(request: carriers.Chat_GetChatTranscriptRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Get the chat transcript, formatted as plain text or html
     * @param chatSessionId - id of the chat session to get the transcript for
     * @param html - Get transcript as HTML
     * @returns The transcript in text or HTML
     */
    GetChatTranscript(chatSessionId: number, html: boolean, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetChatMessages;
    /**
     * Get all or some of the messages in a chat session
     * @param request - ChatSessionId, After
     * @returns Array of chat messages in the session
     */
    GetChatMessages(request: carriers.Chat_GetChatMessagesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatMessage[]>;
    /**
     * Get all or some of the messages in a chat session
     * @param chatSessionId - id of the chat session to reset
     * @param after - Return messages after this message id
     * @returns Array of chat messages in the session
     */
    GetChatMessages(chatSessionId: number, after: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatMessage[]>;
    private _AddChatMessage;
    /**
     * Add a new message to a chat session
     * @param request - ChatSessionId, Message
     * @returns The chat message added to the session
     */
    AddChatMessage(request: carriers.Chat_AddChatMessageRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatMessage>;
    /**
     * Add a new message to a chat session
     * @param chatSessionId - id of the chat session to add message to
     * @param message - Message to add
     * @returns The chat message added to the session
     */
    AddChatMessage(chatSessionId: number, message: carriers.ChatMessage, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatMessage>;
    GetChatTopicEntity(chatTopicEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.ChatTopicEntity>;
    private _IsWithinOpeningHours;
    /**
     * Check if we are right now within the opening hours of the given topic. Will use timezones to calculate if configured.
     * @param request - ChatTopicId
     * @returns True if we are within opening hours, or if the topic does not use opening hours
     */
    IsWithinOpeningHours(request: carriers.Chat_IsWithinOpeningHoursRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Check if we are right now within the opening hours of the given topic. Will use timezones to calculate if configured.
     * @param chatTopicId - The id of the topic to check
     * @returns True if we are within opening hours, or if the topic does not use opening hours
     */
    IsWithinOpeningHours(chatTopicId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _ChatTopicsForUser;
    /**
     * Get all chat topics which this user is a member of. Members means that you have at least one of: Can Respond, Notifications, Listen or Manager
     * @returns Array of chat topics the current user can access
     */
    ChatTopicsForUser(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatTopicEntity[]>;
    private _GetUserAgentList;
    /**
     * Get list of users that can be assigned to chat topics. Users with Chat-CALs from the MDO list &apos;chatuser&apos;
     * @param request - Flat, OnlyPresent
     * @returns List of user agents that can be assigned to chat topics, possibly grouped by usergroup.
     */
    GetUserAgentList(request: carriers.Chat_GetUserAgentListRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    /**
     * Get list of users that can be assigned to chat topics. Users with Chat-CALs from the MDO list &apos;chatuser&apos;
     * @param flat - Return flat list instead of grouping by usergroup.
     * @param onlyPresent - Only show users who are present
     * @returns List of user agents that can be assigned to chat topics, possibly grouped by usergroup.
     */
    GetUserAgentList(flat: boolean, onlyPresent: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    private _GetChatTopicUserAgentList;
    /**
     * Get list of users assigned to a chat topic
     * @param request - ChatTopicId
     * @returns List of user agents assigned to chat topic.
     */
    GetChatTopicUserAgentList(request: carriers.Chat_GetChatTopicUserAgentListRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatTopicAgent[]>;
    /**
     * Get list of users assigned to a chat topic
     * @param chatTopicId - Id of the chat topic
     * @returns List of user agents assigned to chat topic.
     */
    GetChatTopicUserAgentList(chatTopicId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatTopicAgent[]>;
    private _GetChatTopicUserAgent;
    /**
     * Get a user assigned to a topic
     * @param request - ChatTopicId, Username
     * @returns The user's role within the chat topic.
     */
    GetChatTopicUserAgent(request: carriers.Chat_GetChatTopicUserAgentRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatTopicAgent>;
    /**
     * Get a user assigned to a topic
     * @param chatTopicId - Id of the chat topic
     * @param username - Associate username or associate id to get.
     * @returns The user's role within the chat topic.
     */
    GetChatTopicUserAgent(chatTopicId: number, username: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatTopicAgent>;
    private _AddChatTopicUserAgent;
    /**
     * Add a user to a chat topic
     * @param request - ChatTopicId, Useragent
     * @returns The user's role within the chat topic.
     */
    AddChatTopicUserAgent(request: carriers.Chat_AddChatTopicUserAgentRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatTopicAgent>;
    /**
     * Add a user to a chat topic
     * @param chatTopicId - Id of the chat topic
     * @param useragent - User's role within the chat topic to add to topic.
     * @returns The user's role within the chat topic.
     */
    AddChatTopicUserAgent(chatTopicId: number, useragent: carriers.ChatTopicAgent, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatTopicAgent>;
    private _UpdateChatTopicUserAgent;
    /**
     * Update a user&apos;s role in a chat topic
     * @param request - ChatTopicId, Username, Useragent
     * @returns The user's role within the chat topic.
     */
    UpdateChatTopicUserAgent(request: carriers.Chat_UpdateChatTopicUserAgentRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatTopicAgent>;
    /**
     * Update a user&apos;s role in a chat topic
     * @param chatTopicId - Id of the chat topic
     * @param username - Associate username or associate id to get.
     * @param useragent - User's updated role within the chat topic.
     * @returns The user's role within the chat topic.
     */
    UpdateChatTopicUserAgent(chatTopicId: number, username: string, useragent: carriers.ChatTopicAgent, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatTopicAgent>;
    private _UpdateChatTopicUserAgents;
    /**
     * Update users roles in a chat topic
     * @param request - ChatTopicId, Useragents
     * @returns The updated agents within the chat topic.
     */
    UpdateChatTopicUserAgents(request: carriers.Chat_UpdateChatTopicUserAgentsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatTopicAgent[]>;
    /**
     * Update users roles in a chat topic
     * @param chatTopicId - Id of the chat topic
     * @param useragents - Users new/updated roles within the chat topic. Replaces existing roles
     * @returns The updated agents within the chat topic.
     */
    UpdateChatTopicUserAgents(chatTopicId: number, useragents: carriers.ChatTopicAgent[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatTopicAgent[]>;
    private _DeleteChatTopicUserAgent;
    /**
     * Remove a user from a topic
     * @param request - ChatTopicId, Username
     * @returns This method has no return value
     */
    DeleteChatTopicUserAgent(request: carriers.Chat_DeleteChatTopicUserAgentRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Remove a user from a topic
     * @param chatTopicId - Id of the chat topic
     * @param username - Associate username or associate id to delete.
     * @returns This method has no return value
     */
    DeleteChatTopicUserAgent(chatTopicId: number, username: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _CreateChatSessionForTopic;
    /**
     * Create a new session on a chat topic
     * @param request - ChatTopicId
     * @returns The new chat session.
     */
    CreateChatSessionForTopic(request: carriers.Chat_CreateChatSessionForTopicRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatSessionEntity>;
    /**
     * Create a new session on a chat topic
     * @param chatTopicId - Id of the chat topic
     * @returns The new chat session.
     */
    CreateChatSessionForTopic(chatTopicId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ChatSessionEntity>;
}
//# sourceMappingURL=ChatAgent.d.ts.map