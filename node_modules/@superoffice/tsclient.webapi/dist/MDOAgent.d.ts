import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * MDO Lists, reading, searching, and item lookup.
 */
export interface IMDOAgent {
    GetList(request: carriers.MDO_GetListRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    GetList(name: string, forceFlatList: boolean, additionalInfo: string, onlyHistory: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    GetListWithHistory(request: carriers.MDO_GetListWithHistoryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    GetListWithHistory(name: string, forceFlatList: boolean, additionalInfo: string, historyItems: number[], onlyHistory: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    GetListWithRestriction(request: carriers.MDO_GetListWithRestrictionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    GetListWithRestriction(name: string, additionalInfo: string, searchValue: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    GetSimpleList(request: carriers.MDO_GetSimpleListRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    GetSimpleList(name: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    GetListItem(request: carriers.MDO_GetListItemRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem>;
    GetListItem(listName: string, id: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem>;
    GetListNames(webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    GetListIdByListName(request: carriers.MDO_GetListIdByListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    GetListIdByListName(name: string, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    GetSelectableSimpleList(request: carriers.MDO_GetSelectableSimpleListRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    GetSelectableSimpleList(name: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    GetSelectableListWithRestriction(request: carriers.MDO_GetSelectableListWithRestrictionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    GetSelectableListWithRestriction(name: string, additionalInfo: string, searchValue: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    GetSelectableListWithHistory(request: carriers.MDO_GetSelectableListWithHistoryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    GetSelectableListWithHistory(name: string, forceFlatList: boolean, additionalInfo: string, historyItems: number[], onlyHistory: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    GetSelectableList(request: carriers.MDO_GetSelectableListRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    GetSelectableList(name: string, forceFlatList: boolean, additionalInfo: string, onlyHistory: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    SetSelected(request: carriers.MDO_SetSelectedRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    SetSelected(name: string, additionalInfo: string, selectableMDOList: carriers.SelectableMDOListItem[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
}
/**
 * MDO Lists, reading, searching, and item lookup.
 */
export declare class MDOAgent extends base.WebApiBase implements IMDOAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    private _GetList;
    /**
     * Method to get a MDO list.
     * @param request - Name, ForceFlatList, AdditionalInfo, OnlyHistory
     * @returns Array of MDOListItem
     */
    GetList(request: carriers.MDO_GetListRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    /**
     * Method to get a MDO list.
     * @param name - Conceptual name of the MDO list-
     * @param forceFlatList - Force the list to be flat
     * @param additionalInfo - Additional info to the MDO provider
     * @param onlyHistory - If true, return only history items
     * @returns Array of MDOListItem
     */
    GetList(name: string, forceFlatList: boolean, additionalInfo: string, onlyHistory: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    private _GetListWithHistory;
    /**
     * Method to get a MDO list with own history list.
     * @param request - Name, ForceFlatList, AdditionalInfo, HistoryItems, OnlyHistory
     * @returns Array of MDOListItem
     */
    GetListWithHistory(request: carriers.MDO_GetListWithHistoryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    /**
     * Method to get a MDO list with own history list.
     * @param name - Conceptual name of the MDO list-
     * @param forceFlatList - Force the list to be flat
     * @param additionalInfo - Additional info to the MDO provider
     * @param historyItems - An array of ids, used to get the history list
     * @param onlyHistory - If true, return only history items
     * @returns Array of MDOListItem
     */
    GetListWithHistory(name: string, forceFlatList: boolean, additionalInfo: string, historyItems: number[], onlyHistory: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    private _GetListWithRestriction;
    /**
     * Method to get a MDO list with restrictions.
     * @param request - Name, AdditionalInfo, SearchValue
     * @returns Array of MDOListItem
     */
    GetListWithRestriction(request: carriers.MDO_GetListWithRestrictionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    /**
     * Method to get a MDO list with restrictions.
     * @param name - Conceptual name of the MDO list-
     * @param additionalInfo - Additional info to the MDO provider
     * @param searchValue - the value used to restrict the list
     * @returns Array of MDOListItem
     */
    GetListWithRestriction(name: string, additionalInfo: string, searchValue: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    private _GetSimpleList;
    /**
     * Method returns a simple flat MDO List.
     * @param request - Name
     * @returns Array of MDOListItem
     */
    GetSimpleList(request: carriers.MDO_GetSimpleListRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    /**
     * Method returns a simple flat MDO List.
     * @param name - Conceptual name of the MDO list-
     * @returns Array of MDOListItem
     */
    GetSimpleList(name: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    private _GetListItem;
    /**
     * Returns a single list item
     * @param request - ListName, Id
     * @returns Single MDO list item
     */
    GetListItem(request: carriers.MDO_GetListItemRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem>;
    /**
     * Returns a single list item
     * @param listName - Conceptual name of the MDO list
     * @param id - Id of list item
     * @returns Single MDO list item
     */
    GetListItem(listName: string, id: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem>;
    private _GetListNames;
    /**
     * Returns a list of all MDO List names. These names can also be used with the Archive agent as ProviderNames.
     * @returns Array of list names.
     */
    GetListNames(webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    private _GetListIdByListName;
    /**
     * Retrieve the UdListDefinition id of a list, by its name. Not all lists have such an ID, but those that are based on tables do (the list name is then the same as the table name)
     * @param request - Name
     * @returns List id in the UdListDefinition table
     */
    GetListIdByListName(request: carriers.MDO_GetListIdByListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Retrieve the UdListDefinition id of a list, by its name. Not all lists have such an ID, but those that are based on tables do (the list name is then the same as the table name)
     * @param name - The list name, same as the table name for lists that are backed by tables
     * @returns List id in the UdListDefinition table
     */
    GetListIdByListName(name: string, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _GetSelectableSimpleList;
    /**
     * Method returns a flat Selectable MDO List.
     * @param request - Name
     * @returns Array of SelectableMDOListItem
     */
    GetSelectableSimpleList(request: carriers.MDO_GetSelectableSimpleListRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    /**
     * Method returns a flat Selectable MDO List.
     * @param name - Conceptual name of the MDO list
     * @returns Array of SelectableMDOListItem
     */
    GetSelectableSimpleList(name: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    private _GetSelectableListWithRestriction;
    /**
     * Method to get a Selectable MDO list with restrictions.
     * @param request - Name, AdditionalInfo, SearchValue
     * @returns Array of SelectableMDOListItem
     */
    GetSelectableListWithRestriction(request: carriers.MDO_GetSelectableListWithRestrictionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    /**
     * Method to get a Selectable MDO list with restrictions.
     * @param name - Conceptual name of the MDO list
     * @param additionalInfo - Additional info to the MDO provider
     * @param searchValue - the value used to restrict the list
     * @returns Array of SelectableMDOListItem
     */
    GetSelectableListWithRestriction(name: string, additionalInfo: string, searchValue: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    private _GetSelectableListWithHistory;
    /**
     * Method to get a Selectable MDO list with own history list.
     * @param request - Name, ForceFlatList, AdditionalInfo, HistoryItems, OnlyHistory
     * @returns Array of SelectableMDOListItem
     */
    GetSelectableListWithHistory(request: carriers.MDO_GetSelectableListWithHistoryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    /**
     * Method to get a Selectable MDO list with own history list.
     * @param name - Conceptual name of the MDO list.
     * @param forceFlatList - Force the list to be flat
     * @param additionalInfo - Additional info to the MDO provider
     * @param historyItems - An array of ids, used to get the history list
     * @param onlyHistory - If true, return only history items
     * @returns Array of SelectableMDOListItem
     */
    GetSelectableListWithHistory(name: string, forceFlatList: boolean, additionalInfo: string, historyItems: number[], onlyHistory: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    private _GetSelectableList;
    /**
     * Method to get a Selectable MDO list.
     * @param request - Name, ForceFlatList, AdditionalInfo, OnlyHistory
     * @returns Array of SelectableMDOListItem
     */
    GetSelectableList(request: carriers.MDO_GetSelectableListRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    /**
     * Method to get a Selectable MDO list.
     * @param name - Conceptual name of the MDO list.
     * @param forceFlatList - Force the list to be flat
     * @param additionalInfo - Additional info to the MDO provider
     * @param onlyHistory - If true, return only history items
     * @returns Array of SelectableMDOListItem
     */
    GetSelectableList(name: string, forceFlatList: boolean, additionalInfo: string, onlyHistory: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    private _SetSelected;
    /**
     * Saves the selected values as selected by their given list representation.
     * @param request - Name, AdditionalInfo, SelectableMDOList
     * @returns Array of updated SelectableMDOListItems
     */
    SetSelected(request: carriers.MDO_SetSelectedRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    /**
     * Saves the selected values as selected by their given list representation.
     * @param name - Conceptual name of the MDO list
     * @param additionalInfo - Additional info to the MDO provider
     * @param selectableMDOList - Items to be updated
     * @returns Array of updated SelectableMDOListItems
     */
    SetSelected(name: string, additionalInfo: string, selectableMDOList: carriers.SelectableMDOListItem[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
}
//# sourceMappingURL=MDOAgent.d.ts.map