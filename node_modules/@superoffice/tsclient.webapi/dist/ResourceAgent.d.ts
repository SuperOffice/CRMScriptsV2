import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * String resource substitution management.
 */
export interface IResourceAgent {
    SetResourceSubstitution(request: carriers.Resource_SetResourceSubstitutionRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetResourceSubstitution(resourceName: string, resourceValues: string, culture: string, isActive: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteResourceSubstitution(request: carriers.Resource_DeleteResourceSubstitutionRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteResourceSubstitution(resourceName: string, culture: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    ActivateResourceSubstitution(request: carriers.Resource_ActivateResourceSubstitutionRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    ActivateResourceSubstitution(resourceName: string, culture: string, isActive: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetResourceSubstitutions(request: carriers.Resource_GetResourceSubstitutionsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ResourceOverride[]>;
    GetResourceSubstitutions(resourceNames: string[], culture: string, activeOnly: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ResourceOverride[]>;
    IsResourceSubstitutionActive(request: carriers.Resource_IsResourceSubstitutionActiveRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ResourceOverride[]>;
    IsResourceSubstitutionActive(resourceNames: string[], culture: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ResourceOverride[]>;
}
/**
 * String resource substitution management.
 */
export declare class ResourceAgent extends base.WebApiBase implements IResourceAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    private _SetResourceSubstitution;
    /**
     * Create or update a resource substitution
     * @param request - ResourceName, ResourceValues, Culture, IsActive
     * @returns This method has no return value
     */
    SetResourceSubstitution(request: carriers.Resource_SetResourceSubstitutionRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Create or update a resource substitution
     * @param resourceName - The name of the resource, without any brackets
     * @param resourceValues - The new value of the resource
     * @param culture - The .NET culture string
     * @param isActive - Is the subsitution now active
     * @returns This method has no return value
     */
    SetResourceSubstitution(resourceName: string, resourceValues: string, culture: string, isActive: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _DeleteResourceSubstitution;
    /**
     * Permanentely delete a resource substitution for one or more cultures
     * @param request - ResourceName, Culture
     * @returns This method has no return value
     */
    DeleteResourceSubstitution(request: carriers.Resource_DeleteResourceSubstitutionRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Permanentely delete a resource substitution for one or more cultures
     * @param resourceName - The name of the resource, without any brackets
     * @param culture - The .NET culture string; if blank, then ALL substitutions for this resource will be dropped
     * @returns This method has no return value
     */
    DeleteResourceSubstitution(resourceName: string, culture: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _ActivateResourceSubstitution;
    /**
     * Activate or deactive a resource substitution for one or more cultures
     * @param request - ResourceName, Culture, IsActive
     * @returns This method has no return value
     */
    ActivateResourceSubstitution(request: carriers.Resource_ActivateResourceSubstitutionRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Activate or deactive a resource substitution for one or more cultures
     * @param resourceName - The name of the resource, without any brackets; if blank then this is the MASTER SWITCH for the override system
     * @param culture - The .NET culture string; if blank, then ALL substitutions for this resource will be affected
     * @param isActive - New status of override
     * @returns This method has no return value
     */
    ActivateResourceSubstitution(resourceName: string, culture: string, isActive: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetResourceSubstitutions;
    /**
     * Get substitutions for some or all resources for one culture
     * @param request - ResourceNames, Culture, ActiveOnly
     * @returns Array of override objects, empty if there are none
     */
    GetResourceSubstitutions(request: carriers.Resource_GetResourceSubstitutionsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ResourceOverride[]>;
    /**
     * Get substitutions for some or all resources for one culture
     * @param resourceNames - Array of names of resources for which overrides are sought; if empty, then get all
     * @param culture - .NET culture string; if empty, then get all
     * @param activeOnly - If true, then only resources with active substitutions will be returned; if false then ALL existing overrides will be returned
     * @returns Array of override objects, empty if there are none
     */
    GetResourceSubstitutions(resourceNames: string[], culture: string, activeOnly: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ResourceOverride[]>;
    private _IsResourceSubstitutionActive;
    /**
     * Determine if resource substitution/override is active, globally or for a subset of resources/cultures
     * @param request - ResourceNames, Culture
     * @returns Array of override objects, empty if there are none; the ResourceValue member is not set by this call
     */
    IsResourceSubstitutionActive(request: carriers.Resource_IsResourceSubstitutionActiveRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ResourceOverride[]>;
    /**
     * Determine if resource substitution/override is active, globally or for a subset of resources/cultures
     * @param resourceNames - Array of names of resources for which overrides are sought; if empty, then get the MASTER on/off
     * @param culture - .NET culture string; if empty, then get for all cultures (unless resourceName
     * @returns Array of override objects, empty if there are none; the ResourceValue member is not set by this call
     */
    IsResourceSubstitutionActive(resourceNames: string[], culture: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ResourceOverride[]>;
}
//# sourceMappingURL=ResourceAgent.d.ts.map