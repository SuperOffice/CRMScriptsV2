"use strict";
/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
//
// File:          ProjectRestApi.ts
//
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectRestApi = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
/**
 * The Project Service. The service implements all services working with the Project object
 * Collection of all services that works with Project data.
 *
 * `api/v1/Project`
 */
class ProjectRestApi extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Project/";
        super(options);
    }
    /**
     * `GET /api/v1/Project/default`
     * Set default values into a new ProjectEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    async GetDefault(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.get("default", config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ProjectEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * `POST /api/v1/Project/`
     * Creates a new ProjectEntity
     * @param newProject - The ProjectEntity to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New ProjectEntity
     */
    async Post(newProject, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("", newProject, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ProjectEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * `PUT /api/v1/Project/123`
     * Updates the existing ProjectEntity
     * @param project - The ProjectEntity to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns The updated ProjectEntity
     */
    async PutById(id, project, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.put(id.toString(), project, config);
                base.WebApiBase.SetCompleted(options);
                let res = null;
                if (response.status != 304)
                    res = converters.Create_ProjectEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * `PATCH /api/v1/Project/123`
     * Updates an existing ProjectEntity
     * @param project - The partial ProjectEntity containing updated values, or an array of RFC6902 PATCH operations.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns The updated ProjectEntity
     */
    async PatchById(id, project, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.patch(id.toString(), project, config);
                base.WebApiBase.SetCompleted(options);
                let res = null;
                if (response.status != 304)
                    res = converters.Create_ProjectEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * `DELETE /api/v1/Project/123`
     * Deletes the ProjectEntity
     * @param projectId - The id of the ProjectEntity to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    async DeleteById(projectId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.delete(projectId.toString(), config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * `GET /api/v1/Project/123`
     * Get an existing ProjectEntity
     * @param projectId - The ProjectEntity to be get.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns The ProjectEntity
     */
    async GetById(projectId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.get(projectId.toString(), config);
                base.WebApiBase.SetCompleted(options);
                let res = null;
                if (response.status != 304)
                    res = converters.Create_ProjectEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
} // class ProjectRestApi 
exports.ProjectRestApi = ProjectRestApi;
//# sourceMappingURL=ProjectRestApi.js.map