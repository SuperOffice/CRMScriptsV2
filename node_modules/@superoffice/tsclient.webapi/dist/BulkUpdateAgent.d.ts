import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Agent used for bulk update methods
 */
export interface IBulkUpdateAgent {
    GetAvailableFields(request: carriers.BulkUpdate_GetAvailableFieldsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FieldValueInfo[]>;
    GetAvailableFields(tablename: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FieldValueInfo[]>;
    GetStoredFields(request: carriers.BulkUpdate_GetStoredFieldsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FieldValueInfo[]>;
    GetStoredFields(tablename: string, context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FieldValueInfo[]>;
    ExecuteBySelectionId(request: carriers.BulkUpdate_ExecuteBySelectionIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    ExecuteBySelectionId(fieldValueInfos: carriers.FieldValueInfo[], tableName: string, context: string, selectionId: number, isShadow: boolean, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    ExecuteByEntityIds(request: carriers.BulkUpdate_ExecuteByEntityIdsRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    ExecuteByEntityIds(fieldValueInfos: carriers.FieldValueInfo[], tableName: string, context: string, ids: string, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    GetJobResultsFromStorageAsJson(webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    RemoveStoredFields(request: carriers.BulkUpdate_RemoveStoredFieldsRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    RemoveStoredFields(tableName: string, context: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    RemoveStoredFieldsAndGetDefaultFields(request: carriers.BulkUpdate_RemoveStoredFieldsAndGetDefaultFieldsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FieldValueInfo[]>;
    RemoveStoredFieldsAndGetDefaultFields(tableName: string, context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FieldValueInfo[]>;
    GetJobResultAsJsonFromBinaryObjectId(request: carriers.BulkUpdate_GetJobResultAsJsonFromBinaryObjectIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetJobResultAsJsonFromBinaryObjectId(tableName: string, binaryObjectId: number, webapi_options?: base.WebApiRequestOptions): Promise<string>;
}
/**
 * Agent used for bulk update methods
 */
export declare class BulkUpdateAgent extends base.WebApiBase implements IBulkUpdateAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    private _GetAvailableFields;
    /**
     * Get all available fields for a given tablename/entity
     * @param request - Tablename
     * @returns Returns array of the available fields for the given entity
     */
    GetAvailableFields(request: carriers.BulkUpdate_GetAvailableFieldsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FieldValueInfo[]>;
    /**
     * Get all available fields for a given tablename/entity
     * @param tablename - The name of the wanted tablename
     * @returns Returns array of the available fields for the given entity
     */
    GetAvailableFields(tablename: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FieldValueInfo[]>;
    private _GetStoredFields;
    /**
     * Get all stored fields for a given tablename/entity and context
     * @param request - Tablename, Context
     * @returns Returns array of the stored or default fields for the given entity
     */
    GetStoredFields(request: carriers.BulkUpdate_GetStoredFieldsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FieldValueInfo[]>;
    /**
     * Get all stored fields for a given tablename/entity and context
     * @param tablename - The name of the wanted tablename
     * @param context - Where is the function called for
     * @returns Returns array of the stored or default fields for the given entity
     */
    GetStoredFields(tablename: string, context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FieldValueInfo[]>;
    private _ExecuteBySelectionId;
    /**
     * Do the batchupdate on this selection
     * @param request - FieldValueInfos, TableName, Context, SelectionId, IsShadow
     * @returns Return batchtaskinfoid
     */
    ExecuteBySelectionId(request: carriers.BulkUpdate_ExecuteBySelectionIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Do the batchupdate on this selection
     * @param fieldValueInfos - The name of the wanted tablename
     * @param tableName - The name of the table to bulk update
     * @param context - Where is the function called for
     * @param selectionId - The id of the selection
     * @param isShadow - Use the shadow selection
     * @returns Return batchtaskinfoid
     */
    ExecuteBySelectionId(fieldValueInfos: carriers.FieldValueInfo[], tableName: string, context: string, selectionId: number, isShadow: boolean, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _ExecuteByEntityIds;
    /**
     * Do the batchupdate on selected
     * @param request - FieldValueInfos, TableName, Context, Ids
     * @returns Return batchtaskinfoid
     */
    ExecuteByEntityIds(request: carriers.BulkUpdate_ExecuteByEntityIdsRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Do the batchupdate on selected
     * @param fieldValueInfos - The name of the wanted tablename
     * @param tableName - The name of the table to bulk update
     * @param context - Where is the function called from
     * @param ids - Comma separated string of the ids of the entities to update
     * @returns Return batchtaskinfoid
     */
    ExecuteByEntityIds(fieldValueInfos: carriers.FieldValueInfo[], tableName: string, context: string, ids: string, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _GetJobResultsFromStorageAsJson;
    /**
     * Get result of the batchupdate job
     * @returns Result of job as json
     */
    GetJobResultsFromStorageAsJson(webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    private _RemoveStoredFields;
    /**
     * Remove the stored settings of the bulk update for this table from this context
     * @param request - TableName, Context
     * @returns
     */
    RemoveStoredFields(request: carriers.BulkUpdate_RemoveStoredFieldsRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Remove the stored settings of the bulk update for this table from this context
     * @param tableName - The name of the table to remove stored settings from
     * @param context - Where is the function called from that we will remove the settings from
     * @returns
     */
    RemoveStoredFields(tableName: string, context: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _RemoveStoredFieldsAndGetDefaultFields;
    /**
     * Remove the stored settings of the bulk update for this table from this context, to get the default settings instead
     * @param request - TableName, Context
     * @returns Returns array of the available fields for the given tablename
     */
    RemoveStoredFieldsAndGetDefaultFields(request: carriers.BulkUpdate_RemoveStoredFieldsAndGetDefaultFieldsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FieldValueInfo[]>;
    /**
     * Remove the stored settings of the bulk update for this table from this context, to get the default settings instead
     * @param tableName - The name of the table to remove stored settings from
     * @param context - Where is the function called from that we will remove the settings from
     * @returns Returns array of the available fields for the given tablename
     */
    RemoveStoredFieldsAndGetDefaultFields(tableName: string, context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FieldValueInfo[]>;
    private _GetJobResultAsJsonFromBinaryObjectId;
    /**
     * Get result of the batchupdate job
     * @param request - TableName, BinaryObjectId
     * @returns Result of job as json
     */
    GetJobResultAsJsonFromBinaryObjectId(request: carriers.BulkUpdate_GetJobResultAsJsonFromBinaryObjectIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Get result of the batchupdate job
     * @param tableName - The name of the table that was updated to show the log from
     * @param binaryObjectId - Which binaryobject id has stored the job result
     * @returns Result of job as json
     */
    GetJobResultAsJsonFromBinaryObjectId(tableName: string, binaryObjectId: number, webapi_options?: base.WebApiRequestOptions): Promise<string>;
}
//# sourceMappingURL=BulkUpdateAgent.d.ts.map