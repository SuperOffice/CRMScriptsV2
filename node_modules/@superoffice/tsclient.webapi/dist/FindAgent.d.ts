import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Find functions
 */
export interface IFindAgent {
    GetCriteriaInformation(request: carriers.Find_GetCriteriaInformationRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CriteriaInformation>;
    GetCriteriaInformation(storageType: string, providerName: string, storageKey: string, staticColumns: string[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.CriteriaInformation>;
    GetCriteriaInformationWithContext(request: carriers.Find_GetCriteriaInformationWithContextRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CriteriaInformation>;
    GetCriteriaInformationWithContext(storageType: string, providerName: string, storageKey: string, staticColumns: string[], context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CriteriaInformation>;
    SaveRestrictions(request: carriers.Find_SaveRestrictionsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SaveRestrictions(storageType: string, providerName: string, storageKey: string, restrictions: carriers.ArchiveRestrictionInfo[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SaveRestrictionsWithContext(request: carriers.Find_SaveRestrictionsWithContextRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SaveRestrictionsWithContext(storageType: string, providerName: string, storageKey: string, restrictions: carriers.ArchiveRestrictionInfo[], context: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SaveRestrictionGroup(request: carriers.Find_SaveRestrictionGroupRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SaveRestrictionGroup(storageType: string, providerName: string, storageKey: string, restrictionGroup: carriers.ArchiveRestrictionGroup, context: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SaveRestrictionGroups(request: carriers.Find_SaveRestrictionGroupsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionGroup[]>;
    SaveRestrictionGroups(storageType: string, providerName: string, storageKey: string, restrictionGroups: carriers.ArchiveRestrictionGroup[], context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionGroup[]>;
    GetRestrictionGroups(request: carriers.Find_GetRestrictionGroupsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionGroup[]>;
    GetRestrictionGroups(storageType: string, providerName: string, storageKey: string, context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionGroup[]>;
    GetRestrictionGroup(request: carriers.Find_GetRestrictionGroupRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionGroup>;
    GetRestrictionGroup(storageType: string, providerName: string, storageKey: string, rank: number, context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionGroup>;
    CreateRestrictionGroup(request: carriers.Find_CreateRestrictionGroupRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionGroup>;
    CreateRestrictionGroup(storageType: string, providerName: string, storageKey: string, context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionGroup>;
    DeleteRestrictionGroup(request: carriers.Find_DeleteRestrictionGroupRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteRestrictionGroup(storageType: string, providerName: string, storageKey: string, rank: number, context: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SaveRestrictionsAndGetCriteriaInformation(request: carriers.Find_SaveRestrictionsAndGetCriteriaInformationRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CriteriaInformation>;
    SaveRestrictionsAndGetCriteriaInformation(storageType: string, providerName: string, storageKey: string, restrictions: carriers.ArchiveRestrictionInfo[], staticColumns: string[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.CriteriaInformation>;
    Find(request: carriers.Find_FindRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    Find(storageType: string, providerName: string, storageKey: string, pageSize: number, pageNumber: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    FindFromRestrictions(request: carriers.Find_FindFromRestrictionsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    FindFromRestrictions(restrictions: carriers.ArchiveRestrictionInfo[], providerName: string, pageSize: number, pageNumber: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    FindFromRestrictionsColumns(request: carriers.Find_FindFromRestrictionsColumnsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    FindFromRestrictionsColumns(restrictions: carriers.ArchiveRestrictionInfo[], providerName: string, desiredColumns: string[], pageSize: number, pageNumber: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    GetAvailableRestrictionColumns(request: carriers.Find_GetAvailableRestrictionColumnsRequest, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    GetAvailableRestrictionColumns(storageType: string, providerName: string, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    GetSpecifiedCriteriaInformationWithDefaults(request: carriers.Find_GetSpecifiedCriteriaInformationWithDefaultsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CriteriaInformation>;
    GetSpecifiedCriteriaInformationWithDefaults(storageType: string, providerName: string, storageKey: string, desiredColumnNames: string[], staticColumns: string[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.CriteriaInformation>;
    GetSpecifiedCriteriaInformationWithDefaultsWithContext(request: carriers.Find_GetSpecifiedCriteriaInformationWithDefaultsWithContextRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CriteriaInformation>;
    GetSpecifiedCriteriaInformationWithDefaultsWithContext(storageType: string, providerName: string, storageKey: string, desiredColumnNames: string[], staticColumns: string[], context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CriteriaInformation>;
    FindFromRestrictionsColumnsOrderBy(request: carriers.Find_FindFromRestrictionsColumnsOrderByRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    FindFromRestrictionsColumnsOrderBy(restrictions: carriers.ArchiveRestrictionInfo[], providerName: string, desiredColumns: string[], orderBy: carriers.ArchiveOrderByInfo[], pageSize: number, pageNumber: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    GetDefaultDesiredColumns(request: carriers.Find_GetDefaultDesiredColumnsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveColumnInfo[]>;
    GetDefaultDesiredColumns(storageType: string, providerName: string, storageKey: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveColumnInfo[]>;
    GetDefaultOrderBy(request: carriers.Find_GetDefaultOrderByRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveOrderByInfo[]>;
    GetDefaultOrderBy(storageType: string, providerName: string, storageKey: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveOrderByInfo[]>;
    PopulateRestrictions(request: carriers.Find_PopulateRestrictionsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionInfo[]>;
    PopulateRestrictions(providerName: string, restrictions: carriers.ArchiveRestrictionInfo[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionInfo[]>;
    PopulateRestrictionValues(request: carriers.Find_PopulateRestrictionValuesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionInfo[]>;
    PopulateRestrictionValues(restrictions: carriers.ArchiveRestrictionInfo[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionInfo[]>;
    GetDefaultDesiredColumnsFromRestrictions(request: carriers.Find_GetDefaultDesiredColumnsFromRestrictionsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveColumnInfo[]>;
    GetDefaultDesiredColumnsFromRestrictions(providerName: string, restrictions: carriers.ArchiveRestrictionInfo[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveColumnInfo[]>;
    GetDefaultOrderByFromDesiredColumns(request: carriers.Find_GetDefaultOrderByFromDesiredColumnsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveOrderByInfo[]>;
    GetDefaultOrderByFromDesiredColumns(providerName: string, desiredColumns: string[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveOrderByInfo[]>;
    FindOrderBy(request: carriers.Find_FindOrderByRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    FindOrderBy(storageType: string, providerName: string, storageKey: string, pageSize: number, pageNumber: number, orderBy: carriers.ArchiveOrderByInfo[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    FindWithExtraRestrictions(request: carriers.Find_FindWithExtraRestrictionsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    FindWithExtraRestrictions(storageType: string, providerName: string, storageKey: string, extraRestrictions: carriers.ArchiveRestrictionInfo[], orderBy: carriers.ArchiveOrderByInfo[], desiredColumns: string[], pageSize: number, pageNumber: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    FindWithColumns(request: carriers.Find_FindWithColumnsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    FindWithColumns(storageType: string, providerName: string, storageKey: string, desiredColumns: string[], pageSize: number, pageNumber: number, orderBy: carriers.ArchiveOrderByInfo[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    SaveRestrictions2(request: carriers.Find_SaveRestrictions2Request, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SaveRestrictions2(storageType: string, providerName: string, storageKey: string, restrictions: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SaveRestrictionsWithContext2(request: carriers.Find_SaveRestrictionsWithContext2Request, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SaveRestrictionsWithContext2(storageType: string, providerName: string, storageKey: string, restrictions: string, context: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SaveRestrictionsAndGetCriteriaInformation2(request: carriers.Find_SaveRestrictionsAndGetCriteriaInformation2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CriteriaInformation>;
    SaveRestrictionsAndGetCriteriaInformation2(storageType: string, providerName: string, storageKey: string, restrictions: string, staticColumns: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CriteriaInformation>;
    FindFromRestrictions2(request: carriers.Find_FindFromRestrictions2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    FindFromRestrictions2(restrictions: string, providerName: string, pageSize: number, pageNumber: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    FindFromRestrictionsColumns2(request: carriers.Find_FindFromRestrictionsColumns2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    FindFromRestrictionsColumns2(restrictions: string, providerName: string, desiredColumns: string, pageSize: number, pageNumber: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    FindFromRestrictionsColumnsOrderBy2(request: carriers.Find_FindFromRestrictionsColumnsOrderBy2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    FindFromRestrictionsColumnsOrderBy2(restrictions: string, providerName: string, desiredColumns: string, orderBy: string, pageSize: number, pageNumber: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    GetDefaultDesiredColumnsFromRestrictions2(request: carriers.Find_GetDefaultDesiredColumnsFromRestrictions2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveColumnInfo[]>;
    GetDefaultDesiredColumnsFromRestrictions2(providerName: string, restrictions: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveColumnInfo[]>;
    FindOrderBy2(request: carriers.Find_FindOrderBy2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    FindOrderBy2(storageType: string, providerName: string, storageKey: string, pageSize: number, pageNumber: number, orderBy: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    FindWithExtraRestrictions2(request: carriers.Find_FindWithExtraRestrictions2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    FindWithExtraRestrictions2(storageType: string, providerName: string, storageKey: string, extraRestrictions: string, orderBy: string, desiredColumns: string, pageSize: number, pageNumber: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
}
/**
 * Find functions
 */
export declare class FindAgent extends base.WebApiBase implements IFindAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    private _GetCriteriaInformation;
    /**
     * Get criteria information from a set of saved criteria. The result contains the restrictions in two forms: fully populated ArchiveRestrictionInfo objects, used to display details and for saving changes; and as a list suitable for an Archive control
     * @param request - StorageType, ProviderName, StorageKey, StaticColumns
     * @returns The result contains the restrictions in two forms: fully populated ArchiveRestrictionInfo objects, used to display details and for saving changes; and as a list suitable for an Archive control
     */
    GetCriteriaInformation(request: carriers.Find_GetCriteriaInformationRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CriteriaInformation>;
    /**
     * Get criteria information from a set of saved criteria. The result contains the restrictions in two forms: fully populated ArchiveRestrictionInfo objects, used to display details and for saving changes; and as a list suitable for an Archive control
     * @param storageType - Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)
     * @param providerName - Name of archive provider that is the intended consumer of the restrictions
     * @param storageKey - Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search
     * @param staticColumns - Optional array of restrictions that are to be EXCLUDED from the CriteriaArchiveRows part of the result. In the Find dialogs, that corresponds to the 'static' fields, to avoid duplicating them in the 'Match also' criteria list. This array can be null, indicating that all restrictions should be included in the criteria list.
     * @returns The result contains the restrictions in two forms: fully populated ArchiveRestrictionInfo objects, used to display details and for saving changes; and as a list suitable for an Archive control
     */
    GetCriteriaInformation(storageType: string, providerName: string, storageKey: string, staticColumns: string[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.CriteriaInformation>;
    private _GetCriteriaInformationWithContext;
    /**
     * Get criteria information from a set of saved criteria. The result contains the restrictions in two forms: fully populated ArchiveRestrictionInfo objects, used to display details and for saving changes; and as a list suitable for an Archive control
     * @param request - StorageType, ProviderName, StorageKey, StaticColumns, Context
     * @returns The result contains the restrictions in two forms: fully populated ArchiveRestrictionInfo objects, used to display details and for saving changes; and as a list suitable for an Archive control
     */
    GetCriteriaInformationWithContext(request: carriers.Find_GetCriteriaInformationWithContextRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CriteriaInformation>;
    /**
     * Get criteria information from a set of saved criteria. The result contains the restrictions in two forms: fully populated ArchiveRestrictionInfo objects, used to display details and for saving changes; and as a list suitable for an Archive control
     * @param storageType - Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)
     * @param providerName - Name of archive provider that is the intended consumer of the restrictions
     * @param storageKey - Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search
     * @param staticColumns - Optional array of restrictions that are to be EXCLUDED from the CriteriaArchiveRows part of the result. In the Find dialogs, that corresponds to the 'static' fields, to avoid duplicating them in the 'Match also' criteria list. This array can be null, indicating that all restrictions should be included in the criteria list.
     * @param context - Optional context that can be used by FindProvider
     * @returns The result contains the restrictions in two forms: fully populated ArchiveRestrictionInfo objects, used to display details and for saving changes; and as a list suitable for an Archive control
     */
    GetCriteriaInformationWithContext(storageType: string, providerName: string, storageKey: string, staticColumns: string[], context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CriteriaInformation>;
    private _SaveRestrictions;
    /**
     * Save an array of restrictions for later use as search criteria (including as dynamic selection and Find).
     * @param request - StorageType, ProviderName, StorageKey, Restrictions
     * @returns This service call just saves the restrictions. See SaveRestrictionsAndGetCriteriaInformation if you would like the restrictions returned as criteria immediately, in one roundtrip
     */
    SaveRestrictions(request: carriers.Find_SaveRestrictionsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Save an array of restrictions for later use as search criteria (including as dynamic selection and Find).
     * @param storageType - Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)
     * @param providerName - Name of archive provider that is the intended consumer of the restrictions
     * @param storageKey - Storage key to be interpreted by the restriction storage provider, when it saves the restrictions as criteria
     * @param restrictions - Array of restrictions. The ColumnInfo member and the DisplayValues members need NOT be populated; it is enough to provide a name, operator and any values the operator may need. The IsActive is also saved. Values should be encoded using the CultureDataFormatter to ensure compatibility across cultures.
     * @returns This service call just saves the restrictions. See SaveRestrictionsAndGetCriteriaInformation if you would like the restrictions returned as criteria immediately, in one roundtrip
     */
    SaveRestrictions(storageType: string, providerName: string, storageKey: string, restrictions: carriers.ArchiveRestrictionInfo[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SaveRestrictionsWithContext;
    /**
     * Save an array of restrictions for later use as search criteria (including as dynamic selection and Find).
     * @param request - StorageType, ProviderName, StorageKey, Restrictions, Context
     * @returns This service call just saves the restrictions. See SaveRestrictionsAndGetCriteriaInformation if you would like the restrictions returned as criteria immediately, in one roundtrip
     */
    SaveRestrictionsWithContext(request: carriers.Find_SaveRestrictionsWithContextRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Save an array of restrictions for later use as search criteria (including as dynamic selection and Find).
     * @param storageType - Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)
     * @param providerName - Name of archive provider that is the intended consumer of the restrictions
     * @param storageKey - Storage key to be interpreted by the restriction storage provider, when it saves the restrictions as criteria
     * @param restrictions - Array of restrictions. The ColumnInfo member and the DisplayValues members need NOT be populated; it is enough to provide a name, operator and any values the operator may need. The IsActive is also saved. Values should be encoded using the CultureDataFormatter to ensure compatibility across cultures.
     * @param context - Optional context that can be used by FindProvider
     * @returns This service call just saves the restrictions. See SaveRestrictionsAndGetCriteriaInformation if you would like the restrictions returned as criteria immediately, in one roundtrip
     */
    SaveRestrictionsWithContext(storageType: string, providerName: string, storageKey: string, restrictions: carriers.ArchiveRestrictionInfo[], context: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SaveRestrictionGroup;
    /**
     * Save an array of restrictions as a restriction group for later use as search criteria (including as dynamic selection and Find).
     * @param request - StorageType, ProviderName, StorageKey, RestrictionGroup, Context
     * @returns This service call just saves the restrictions.
     */
    SaveRestrictionGroup(request: carriers.Find_SaveRestrictionGroupRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Save an array of restrictions as a restriction group for later use as search criteria (including as dynamic selection and Find).
     * @param storageType - Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)
     * @param providerName - Name of archive provider that is the intended consumer of the restrictions
     * @param storageKey - Storage key to be interpreted by the restriction storage provider, when it saves the restrictions as criteria
     * @param restrictionGroup - Information about a group of restrictions
     * @param context - Optional context that can be used by FindProvider
     * @returns This service call just saves the restrictions.
     */
    SaveRestrictionGroup(storageType: string, providerName: string, storageKey: string, restrictionGroup: carriers.ArchiveRestrictionGroup, context: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SaveRestrictionGroups;
    /**
     * Save and rerank an array of restriction groups, returning the possibly modified array.
     * @param request - StorageType, ProviderName, StorageKey, RestrictionGroups, Context
     * @returns The new restriction group.
     */
    SaveRestrictionGroups(request: carriers.Find_SaveRestrictionGroupsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionGroup[]>;
    /**
     * Save and rerank an array of restriction groups, returning the possibly modified array.
     * @param storageType - Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)
     * @param providerName - Name of archive provider that is the intended consumer of the restrictions
     * @param storageKey - Storage key to be interpreted by the restriction storage provider, when it saves the restrictions as criteria
     * @param restrictionGroups - Information about a group of restrictions
     * @param context - Optional context that can be used by FindProvider
     * @returns The new restriction group.
     */
    SaveRestrictionGroups(storageType: string, providerName: string, storageKey: string, restrictionGroups: carriers.ArchiveRestrictionGroup[], context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionGroup[]>;
    private _GetRestrictionGroups;
    /**
     * Return all the restriction groups.
     * @param request - StorageType, ProviderName, StorageKey, Context
     * @returns The restriction groups.
     */
    GetRestrictionGroups(request: carriers.Find_GetRestrictionGroupsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionGroup[]>;
    /**
     * Return all the restriction groups.
     * @param storageType - Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)
     * @param providerName - Name of archive provider that is the intended consumer of the restrictions
     * @param storageKey - Storage key to be interpreted by the restriction storage provider, when it saves the restrictions as criteria
     * @param context - Optional context that can be used by FindProvider
     * @returns The restriction groups.
     */
    GetRestrictionGroups(storageType: string, providerName: string, storageKey: string, context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionGroup[]>;
    private _GetRestrictionGroup;
    /**
     * Return the restriction group with given rank or a blank carrier.
     * @param request - StorageType, ProviderName, StorageKey, Rank, Context
     * @returns The new restriction group.
     */
    GetRestrictionGroup(request: carriers.Find_GetRestrictionGroupRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionGroup>;
    /**
     * Return the restriction group with given rank or a blank carrier.
     * @param storageType - Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)
     * @param providerName - Name of archive provider that is the intended consumer of the restrictions
     * @param storageKey - Storage key to be interpreted by the restriction storage provider, when it saves the restrictions as criteria
     * @param rank - Rank of the group to be deleted.
     * @param context - Optional context that can be used by FindProvider
     * @returns The new restriction group.
     */
    GetRestrictionGroup(storageType: string, providerName: string, storageKey: string, rank: number, context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionGroup>;
    private _CreateRestrictionGroup;
    /**
     * Create a restriction group, initialized with next rank etc.
     * @param request - StorageType, ProviderName, StorageKey, Context
     * @returns The new restriction group.
     */
    CreateRestrictionGroup(request: carriers.Find_CreateRestrictionGroupRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionGroup>;
    /**
     * Create a restriction group, initialized with next rank etc.
     * @param storageType - Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)
     * @param providerName - Name of archive provider that is the intended consumer of the restrictions
     * @param storageKey - Storage key to be interpreted by the restriction storage provider, when it saves the restrictions as criteria
     * @param context - Optional context that can be used by FindProvider
     * @returns The new restriction group.
     */
    CreateRestrictionGroup(storageType: string, providerName: string, storageKey: string, context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionGroup>;
    private _DeleteRestrictionGroup;
    /**
     * Create a restriction group, initialized with next rank etc.
     * @param request - StorageType, ProviderName, StorageKey, Rank, Context
     * @returns This service call just saves the restrictions.
     */
    DeleteRestrictionGroup(request: carriers.Find_DeleteRestrictionGroupRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Create a restriction group, initialized with next rank etc.
     * @param storageType - Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)
     * @param providerName - Name of archive provider that is the intended consumer of the restrictions
     * @param storageKey - Storage key to be interpreted by the restriction storage provider, when it saves the restrictions as criteria
     * @param rank - Rank of the group to be deleted.
     * @param context - Optional context that can be used by FindProvider
     * @returns This service call just saves the restrictions.
     */
    DeleteRestrictionGroup(storageType: string, providerName: string, storageKey: string, rank: number, context: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SaveRestrictionsAndGetCriteriaInformation;
    /**
     * Save an array of restrictions for later use as search criteria (including as dynamic selection and Find). Then, return the same result as a call to GetCriteriaInformation would have done. The purpose is to encapsulate saving and updating of a GUI in one round trip.
     * @param request - StorageType, ProviderName, StorageKey, Restrictions, StaticColumns
     * @returns The result contains the restrictions in two forms: fully populated ArchiveRestrictionInfo objects, used to display details and for saving changes; and as a list suitable for an Archive control
     */
    SaveRestrictionsAndGetCriteriaInformation(request: carriers.Find_SaveRestrictionsAndGetCriteriaInformationRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CriteriaInformation>;
    /**
     * Save an array of restrictions for later use as search criteria (including as dynamic selection and Find). Then, return the same result as a call to GetCriteriaInformation would have done. The purpose is to encapsulate saving and updating of a GUI in one round trip.
     * @param storageType - Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)
     * @param providerName - Name of archive provider that is the intended consumer of the restrictions
     * @param storageKey - Storage key to be interpreted by the restriction storage provider, when it saves the restrictions as criteria
     * @param restrictions - Array of restrictions. The ColumnInfo member and the DisplayValues members need NOT be populated; it is enough to provide a name, operator and any values the operator may need. The IsActive is also saved. Values should be encoded using the CultureDataFormatter to ensure compatibility across cultures.
     * @param staticColumns - Optional array of restrictions that are to be EXCLUDED from the CriteriaArchiveRows part of the result. In the Find dialogs, that corresponds to the 'static' fields, to avoid duplicating them in the 'Match also' criteria list. This array can be null, indicating that all restrictions should be included in the criteria list.
     * @returns The result contains the restrictions in two forms: fully populated ArchiveRestrictionInfo objects, used to display details and for saving changes; and as a list suitable for an Archive control
     */
    SaveRestrictionsAndGetCriteriaInformation(storageType: string, providerName: string, storageKey: string, restrictions: carriers.ArchiveRestrictionInfo[], staticColumns: string[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.CriteriaInformation>;
    private _Find;
    /**
     * Execute a Find operation and return a page of results. The criteria for the Find are fetched from the restriction storage provider according to the given parameters. The columns of the result are calculated based on the restriction. The orderby columns are also calculated by the system.&lt;para/&gt;The other variants of the Find method allow you greater control over the individual aspects of the process.
     * @param request - StorageType, ProviderName, StorageKey, PageSize, PageNumber
     * @returns Results from search, containing column information and result rows.
     */
    Find(request: carriers.Find_FindRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    /**
     * Execute a Find operation and return a page of results. The criteria for the Find are fetched from the restriction storage provider according to the given parameters. The columns of the result are calculated based on the restriction. The orderby columns are also calculated by the system.&lt;para/&gt;The other variants of the Find method allow you greater control over the individual aspects of the process.
     * @param storageType - Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)
     * @param providerName - Name of archive provider that is to execute the search and return the result columns/rows
     * @param storageKey - Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search
     * @param pageSize - Size of result set pages
     * @param pageNumber - Result set page to return, 0 is the first page. When a call returns no rows, no further pages are available. Negative page numbers are interpreted as number of rows to skip.
     * @returns Results from search, containing column information and result rows.
     */
    Find(storageType: string, providerName: string, storageKey: string, pageSize: number, pageNumber: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    private _FindFromRestrictions;
    /**
     * Execute a Find operation and return a page of results. The criteria for the Find are passed in directly, not fetched by a restriction storage provider. The columns of the result are calculated based on the restriction.
     * @param request - Restrictions, ProviderName, PageSize, PageNumber
     * @returns Results from search, containing column information and result rows.
     */
    FindFromRestrictions(request: carriers.Find_FindFromRestrictionsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    /**
     * Execute a Find operation and return a page of results. The criteria for the Find are passed in directly, not fetched by a restriction storage provider. The columns of the result are calculated based on the restriction.
     * @param restrictions - Array of restrictions specifying the search. Each restriction must match a column of the  given archive provider, and that column must have its CanRestrictBy property set to true.
     * @param providerName - Name of archive provider that is to execute the search and return the result columns/rows
     * @param pageSize - Size of result set pages
     * @param pageNumber - Result set page to return, 0 is the first page. When a call returns no rows, no further pages are available. Negative page numbers are interpreted as number of rows to skip.
     * @returns Results from search, containing column information and result rows.
     */
    FindFromRestrictions(restrictions: carriers.ArchiveRestrictionInfo[], providerName: string, pageSize: number, pageNumber: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    private _FindFromRestrictionsColumns;
    /**
     * Execute a Find operation and return a page of results. &lt;para/&gt;The criteria for the Find are passed in directly, not fetched by a restriction storage provider. &lt;para/&gt;The desired columns of the result set are also passed in directly.&lt;para/&gt;The orderby information is calculated by the system.&lt;para/&gt;Use the GetCriteriaInformation and GetDefaultDesiredColumns service methods to let the system calculate these values, if you want to use or modify them.
     * @param request - Restrictions, ProviderName, DesiredColumns, PageSize, PageNumber
     * @returns Results from search, containing column information and result rows.
     */
    FindFromRestrictionsColumns(request: carriers.Find_FindFromRestrictionsColumnsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    /**
     * Execute a Find operation and return a page of results. &lt;para/&gt;The criteria for the Find are passed in directly, not fetched by a restriction storage provider. &lt;para/&gt;The desired columns of the result set are also passed in directly.&lt;para/&gt;The orderby information is calculated by the system.&lt;para/&gt;Use the GetCriteriaInformation and GetDefaultDesiredColumns service methods to let the system calculate these values, if you want to use or modify them.
     * @param restrictions - Array of restrictions specifying the search. Each restriction must match a column of the  given archive provider, and that column must have its CanRestrictBy property set to true.
     * @param providerName - Name of archive provider that is to execute the search and return the result columns/rows
     * @param desiredColumns - Array of column names desired for the result. Each name must match a column offered by the given archive provider.
     * @param pageSize - Size of result set pages
     * @param pageNumber - Result set page to return, 0 is the first page. When a call returns no rows, no further pages are available. Negative page numbers are interpreted as number of rows to skip.
     * @returns Results from search, containing column information and result rows.
     */
    FindFromRestrictionsColumns(restrictions: carriers.ArchiveRestrictionInfo[], providerName: string, desiredColumns: string[], pageSize: number, pageNumber: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    private _GetAvailableRestrictionColumns;
    /**
     * Get a list of the column names corresponding to available restrictions for a certain archive provider and restriction storage provider. Such columns have CanRestrict set to true, and are supported by the given restriction storage provider.
     * @param request - StorageType, ProviderName
     * @returns Array of column names, corresponding to support restrictions for the given archive and restriction storage providers.
     */
    GetAvailableRestrictionColumns(request: carriers.Find_GetAvailableRestrictionColumnsRequest, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    /**
     * Get a list of the column names corresponding to available restrictions for a certain archive provider and restriction storage provider. Such columns have CanRestrict set to true, and are supported by the given restriction storage provider.
     * @param storageType - Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)
     * @param providerName - Name of archive provider that is to execute the search and return the result columns/rows
     * @returns Array of column names, corresponding to support restrictions for the given archive and restriction storage providers.
     */
    GetAvailableRestrictionColumns(storageType: string, providerName: string, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    private _GetSpecifiedCriteriaInformationWithDefaults;
    /**
     * Get criteria information from a set of saved criteria, for a specific set of columns. The result contains the restrictions in two forms: fully populated ArchiveRestrictionInfo objects, used to display details and for saving changes; and as a list suitable for an Archive control. ALL columns specified in the call will be present in the results; those that do not have corresponding criteria set will have empty values and the default (first) operator, with the IsActive flag set to false.
     * @param request - StorageType, ProviderName, StorageKey, DesiredColumnNames, StaticColumns
     * @returns The result contains the restrictions in two forms: fully populated ArchiveRestrictionInfo objects, used to display details and for saving changes; and as a list suitable for an Archive control. ALL columns specified in the call will be present in the results; those that do not have corresponding criteria set will have empty values and the default (first) operator, with the IsActive flag set to false.
     */
    GetSpecifiedCriteriaInformationWithDefaults(request: carriers.Find_GetSpecifiedCriteriaInformationWithDefaultsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CriteriaInformation>;
    /**
     * Get criteria information from a set of saved criteria, for a specific set of columns. The result contains the restrictions in two forms: fully populated ArchiveRestrictionInfo objects, used to display details and for saving changes; and as a list suitable for an Archive control. ALL columns specified in the call will be present in the results; those that do not have corresponding criteria set will have empty values and the default (first) operator, with the IsActive flag set to false.
     * @param storageType - Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)
     * @param providerName - Name of archive provider that is the intended consumer of the restrictions
     * @param storageKey - Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search
     * @param desiredColumnNames - Optional array of restrictions that are to be EXCLUDED from the CriteriaArchiveRows part of the result. In the Find dialogs, that corresponds to the 'static' fields, to avoid duplicating them in the 'Match also' criteria list. This array can be null, indicating that all restrictions should be included in the criteria list.
     * @param staticColumns - Optional array of restrictions that are to be EXCLUDED from the CriteriaArchiveRows part of the result. In the Find dialogs, that corresponds to the 'static' fields, to avoid duplicating them in the 'Match also' criteria list. This array can be null, indicating that all restrictions should be included in the criteria list.
     * @returns The result contains the restrictions in two forms: fully populated ArchiveRestrictionInfo objects, used to display details and for saving changes; and as a list suitable for an Archive control. ALL columns specified in the call will be present in the results; those that do not have corresponding criteria set will have empty values and the default (first) operator, with the IsActive flag set to false.
     */
    GetSpecifiedCriteriaInformationWithDefaults(storageType: string, providerName: string, storageKey: string, desiredColumnNames: string[], staticColumns: string[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.CriteriaInformation>;
    private _GetSpecifiedCriteriaInformationWithDefaultsWithContext;
    /**
     * Get criteria information from a set of saved criteria, for a specific set of columns. The result contains the restrictions in two forms: fully populated ArchiveRestrictionInfo objects, used to display details and for saving changes; and as a list suitable for an Archive control. ALL columns specified in the call will be present in the results; those that do not have corresponding criteria set will have empty values and the default (first) operator, with the IsActive flag set to false.
     * @param request - StorageType, ProviderName, StorageKey, DesiredColumnNames, StaticColumns, Context
     * @returns The result contains the restrictions in two forms: fully populated ArchiveRestrictionInfo objects, used to display details and for saving changes; and as a list suitable for an Archive control. ALL columns specified in the call will be present in the results; those that do not have corresponding criteria set will have empty values and the default (first) operator, with the IsActive flag set to false.
     */
    GetSpecifiedCriteriaInformationWithDefaultsWithContext(request: carriers.Find_GetSpecifiedCriteriaInformationWithDefaultsWithContextRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CriteriaInformation>;
    /**
     * Get criteria information from a set of saved criteria, for a specific set of columns. The result contains the restrictions in two forms: fully populated ArchiveRestrictionInfo objects, used to display details and for saving changes; and as a list suitable for an Archive control. ALL columns specified in the call will be present in the results; those that do not have corresponding criteria set will have empty values and the default (first) operator, with the IsActive flag set to false.
     * @param storageType - Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)
     * @param providerName - Name of archive provider that is the intended consumer of the restrictions
     * @param storageKey - Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search
     * @param desiredColumnNames - Optional array of restrictions that are to be EXCLUDED from the CriteriaArchiveRows part of the result. In the Find dialogs, that corresponds to the 'static' fields, to avoid duplicating them in the 'Match also' criteria list. This array can be null, indicating that all restrictions should be included in the criteria list.
     * @param staticColumns - Optional array of restrictions that are to be EXCLUDED from the CriteriaArchiveRows part of the result. In the Find dialogs, that corresponds to the 'static' fields, to avoid duplicating them in the 'Match also' criteria list. This array can be null, indicating that all restrictions should be included in the criteria list.
     * @param context - Optional context that can be used by FindProvider
     * @returns The result contains the restrictions in two forms: fully populated ArchiveRestrictionInfo objects, used to display details and for saving changes; and as a list suitable for an Archive control. ALL columns specified in the call will be present in the results; those that do not have corresponding criteria set will have empty values and the default (first) operator, with the IsActive flag set to false.
     */
    GetSpecifiedCriteriaInformationWithDefaultsWithContext(storageType: string, providerName: string, storageKey: string, desiredColumnNames: string[], staticColumns: string[], context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CriteriaInformation>;
    private _FindFromRestrictionsColumnsOrderBy;
    /**
     * Execute a Find operation and return a page of results. &lt;para/&gt;The criteria for the Find are passed in directly, not fetched by a restriction storage provider. &lt;para/&gt;The desired columns of the result set are also passed in directly.&lt;para/&gt;The orderby information is also passed in directly.&lt;para/&gt;Use the GetCriteriaInformation, GetDefaultDesiredColumns and GetDefaultOrderBy service methods to let the system calculate these values, if you want to use or modify them.
     * @param request - Restrictions, ProviderName, DesiredColumns, OrderBy, PageSize, PageNumber
     * @returns Results from search, containing column information and result rows.
     */
    FindFromRestrictionsColumnsOrderBy(request: carriers.Find_FindFromRestrictionsColumnsOrderByRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    /**
     * Execute a Find operation and return a page of results. &lt;para/&gt;The criteria for the Find are passed in directly, not fetched by a restriction storage provider. &lt;para/&gt;The desired columns of the result set are also passed in directly.&lt;para/&gt;The orderby information is also passed in directly.&lt;para/&gt;Use the GetCriteriaInformation, GetDefaultDesiredColumns and GetDefaultOrderBy service methods to let the system calculate these values, if you want to use or modify them.
     * @param restrictions - Array of restrictions specifying the search. Each restriction must match a column of the  given archive provider, and that column must have its CanRestrictBy property set to true.
     * @param providerName - Name of archive provider that is to execute the search and return the result columns/rows
     * @param desiredColumns - Array of column names desired for the result. Each name must match a column offered by the given archive provider.
     * @param orderBy - Array of order by specifications. If it is null or empty, the row order is unspecified, database dependent, and might not be the same from call to call, depending on query execution plans. The unspecified order willgenerally not vary within pages of the same query.
     * @param pageSize - Size of result set pages
     * @param pageNumber - Result set page to return, 0 is the first page. When a call returns no rows, no further pages are available. Negative page numbers are interpreted as number of rows to skip.
     * @returns Results from search, containing column information and result rows.
     */
    FindFromRestrictionsColumnsOrderBy(restrictions: carriers.ArchiveRestrictionInfo[], providerName: string, desiredColumns: string[], orderBy: carriers.ArchiveOrderByInfo[], pageSize: number, pageNumber: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    private _GetDefaultDesiredColumns;
    /**
     * Calculate the default desired columns, i.e., the result columns for a given search. The search is defined by a storage type, provider name and storage key, which are used to fetch the corresponding restrictions from the database (in the same way as Find does). If you want to specify the restriction directly, use the GetDefaultDesiredColumnsFromRestrictions method instead. This is the algorithm that is used by the Find service method.
     * @param request - StorageType, ProviderName, StorageKey
     * @returns Column information for the default desired columns, fully populated. Percentage-specified column widths sum to exactly 100.
     */
    GetDefaultDesiredColumns(request: carriers.Find_GetDefaultDesiredColumnsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveColumnInfo[]>;
    /**
     * Calculate the default desired columns, i.e., the result columns for a given search. The search is defined by a storage type, provider name and storage key, which are used to fetch the corresponding restrictions from the database (in the same way as Find does). If you want to specify the restriction directly, use the GetDefaultDesiredColumnsFromRestrictions method instead. This is the algorithm that is used by the Find service method.
     * @param storageType - Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)
     * @param providerName - Name of the provider to calculate default desired columns for
     * @param storageKey - Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search
     * @returns Column information for the default desired columns, fully populated. Percentage-specified column widths sum to exactly 100.
     */
    GetDefaultDesiredColumns(storageType: string, providerName: string, storageKey: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveColumnInfo[]>;
    private _GetDefaultOrderBy;
    /**
     * Calculate the default orderby columns for a given provider and a search. The search is specified by a storage type, provider name and storage key, and is fetched from the database. Default desired columns are then calculated for the search, and those columns are then used as the basis for calculating an order by. If you want to specify the desired columns directly, use the GetDefaultOrderByFromDesiredColumns method instead.  This is the same algorithm that is used by the Find service method.
     * @param request - StorageType, ProviderName, StorageKey
     * @returns Orderby information
     */
    GetDefaultOrderBy(request: carriers.Find_GetDefaultOrderByRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveOrderByInfo[]>;
    /**
     * Calculate the default orderby columns for a given provider and a search. The search is specified by a storage type, provider name and storage key, and is fetched from the database. Default desired columns are then calculated for the search, and those columns are then used as the basis for calculating an order by. If you want to specify the desired columns directly, use the GetDefaultOrderByFromDesiredColumns method instead.  This is the same algorithm that is used by the Find service method.
     * @param storageType - Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)
     * @param providerName - Provider name to calculate default orderby for
     * @param storageKey - Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search
     * @returns Orderby information
     */
    GetDefaultOrderBy(storageType: string, providerName: string, storageKey: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveOrderByInfo[]>;
    private _PopulateRestrictions;
    /**
     * Take an incoming set of minimally populated restrictions (name + operator is required), and populate all the other parts of the ArchiveRestrictionInfo structure. This includes column information, display values (including list value lookup), and calculated/default values where the value hints specify read-only (R).
     * @param request - ProviderName, Restrictions
     * @returns Fully populated restrictions in the same order as the incoming restrictions.
     */
    PopulateRestrictions(request: carriers.Find_PopulateRestrictionsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionInfo[]>;
    /**
     * Take an incoming set of minimally populated restrictions (name + operator is required), and populate all the other parts of the ArchiveRestrictionInfo structure. This includes column information, display values (including list value lookup), and calculated/default values where the value hints specify read-only (R).
     * @param providerName - Provider name to use for populating column information
     * @param restrictions - Restrictions to populate. The Name and Operator fields have to have valid content, and Values should be set as appropriate. Other fields can be left blank or null. If a ColumnInfo is already set, it will not be overwritten.
     * @returns Fully populated restrictions in the same order as the incoming restrictions.
     */
    PopulateRestrictions(providerName: string, restrictions: carriers.ArchiveRestrictionInfo[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionInfo[]>;
    private _PopulateRestrictionValues;
    /**
     * Take an incoming set of Restrictions (name + operator + any user-entered values), and populate/expand all values as specified by the operator&apos;s ValueHints, taking into account any values already there. Used for dynamic date periods; perhaps others in the future
     * @param request - Restrictions
     * @returns Restrictions in the same order as the incoming restrictions, with all values expanded.
     */
    PopulateRestrictionValues(request: carriers.Find_PopulateRestrictionValuesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionInfo[]>;
    /**
     * Take an incoming set of Restrictions (name + operator + any user-entered values), and populate/expand all values as specified by the operator&apos;s ValueHints, taking into account any values already there. Used for dynamic date periods; perhaps others in the future
     * @param restrictions - Restrictions to populate. The Name and Operator fields have to have valid content, and Values should be set as appropriate. Other fields can be left blank or null and will not be changed.
     * @returns Restrictions in the same order as the incoming restrictions, with all values expanded.
     */
    PopulateRestrictionValues(restrictions: carriers.ArchiveRestrictionInfo[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveRestrictionInfo[]>;
    private _GetDefaultDesiredColumnsFromRestrictions;
    /**
     * Calculate the default desired columns, i.e., the result columns for a given search. The search is defined by a provider name and a set of restrictions. This is the algorithm that is used by the Find service method.
     * @param request - ProviderName, Restrictions
     * @returns Column information for the default desired columns, fully populated. Percentage-specified column widths sum to exactly 100.
     */
    GetDefaultDesiredColumnsFromRestrictions(request: carriers.Find_GetDefaultDesiredColumnsFromRestrictionsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveColumnInfo[]>;
    /**
     * Calculate the default desired columns, i.e., the result columns for a given search. The search is defined by a provider name and a set of restrictions. This is the algorithm that is used by the Find service method.
     * @param providerName - Name of the provider to calculate default desired columns for
     * @param restrictions - Restriction to use in the calculation of default desired columns
     * @returns Column information for the default desired columns, fully populated. Percentage-specified column widths sum to exactly 100.
     */
    GetDefaultDesiredColumnsFromRestrictions(providerName: string, restrictions: carriers.ArchiveRestrictionInfo[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveColumnInfo[]>;
    private _GetDefaultOrderByFromDesiredColumns;
    /**
     * Calculate the default orderby columns for a given provider and a set of desired columns. This is the same algorithm that is used by the Find service method.
     * @param request - ProviderName, DesiredColumns
     * @returns Orderby information
     */
    GetDefaultOrderByFromDesiredColumns(request: carriers.Find_GetDefaultOrderByFromDesiredColumnsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveOrderByInfo[]>;
    /**
     * Calculate the default orderby columns for a given provider and a set of desired columns. This is the same algorithm that is used by the Find service method.
     * @param providerName - Provider name to calculate default orderby for
     * @param desiredColumns - Desired columns (return fields), used in the orderby calculation. You can generally only order by columns that have been set as 'desired'.
     * @returns Orderby information
     */
    GetDefaultOrderByFromDesiredColumns(providerName: string, desiredColumns: string[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveOrderByInfo[]>;
    private _FindOrderBy;
    /**
     * Execute a Find operation and return a page of results. The criteria for the Find are fetched from the restriction storage provider according to the given parameters. The columns of the result are calculated based on the restriction. The orderby parameter is used for sorting the results.&lt;para/&gt;The other variants of the Find method allow you greater control over the individual aspects of the process.
     * @param request - StorageType, ProviderName, StorageKey, PageSize, PageNumber, OrderBy
     * @returns Results from search, containing column information and result rows.
     */
    FindOrderBy(request: carriers.Find_FindOrderByRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    /**
     * Execute a Find operation and return a page of results. The criteria for the Find are fetched from the restriction storage provider according to the given parameters. The columns of the result are calculated based on the restriction. The orderby parameter is used for sorting the results.&lt;para/&gt;The other variants of the Find method allow you greater control over the individual aspects of the process.
     * @param storageType - Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)
     * @param providerName - Name of archive provider that is to execute the search and return the result columns/rows
     * @param storageKey - Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search
     * @param pageSize - Size of result set pages
     * @param pageNumber - Result set page to return, 0 is the first page. When a call returns no rows, no further pages are available. Negative page numbers are interpreted as number of rows to skip.
     * @param orderBy - Array of order by specifications. If it is null or empty, the row order is unspecified, database dependent, and might not be the same from call to call, depending on query execution plans. The unspecified order willgenerally not vary within pages of the same query.
     * @returns Results from search, containing column information and result rows.
     */
    FindOrderBy(storageType: string, providerName: string, storageKey: string, pageSize: number, pageNumber: number, orderBy: carriers.ArchiveOrderByInfo[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    private _FindWithExtraRestrictions;
    /**
     * Execute a Find operation and return a page of results. The criteria for the Find are fetched from the restriction storage provider according to the given parameters. In addition an extra set of restrictions can be added to the search. These restrictions will not be saved, they are only valid for the current search. Extra restrictions will override restrictions with the same key already stored on the storagekey.
     * @param request - StorageType, ProviderName, StorageKey, ExtraRestrictions, OrderBy, DesiredColumns, PageSize, PageNumber
     * @returns Results from search, containing column information and result rows.
     */
    FindWithExtraRestrictions(request: carriers.Find_FindWithExtraRestrictionsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    /**
     * Execute a Find operation and return a page of results. The criteria for the Find are fetched from the restriction storage provider according to the given parameters. In addition an extra set of restrictions can be added to the search. These restrictions will not be saved, they are only valid for the current search. Extra restrictions will override restrictions with the same key already stored on the storagekey.
     * @param storageType - Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)
     * @param providerName - Name of archive provider that is to execute the search and return the result columns/rows
     * @param storageKey - Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search
     * @param extraRestrictions - Extra restrictions to append to the the search. These will override saved restrictions with the same key.
     * @param orderBy - Array of order by specifications. If it is null or empty, the row order is unspecified, database dependent, and might not be the same from call to call, depending on query execution plans. The unspecified order willgenerally not vary within pages of the same query.
     * @param desiredColumns - Array of column names desired for the result. Each name must match a column offered by the given archive provider.
     * @param pageSize - Size of result set pages
     * @param pageNumber - Result set page to return, 0 is the first page. When a call returns no rows, no further pages are available. Negative page numbers are interpreted as number of rows to skip.
     * @returns Results from search, containing column information and result rows.
     */
    FindWithExtraRestrictions(storageType: string, providerName: string, storageKey: string, extraRestrictions: carriers.ArchiveRestrictionInfo[], orderBy: carriers.ArchiveOrderByInfo[], desiredColumns: string[], pageSize: number, pageNumber: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    private _FindWithColumns;
    /**
     * Execute a Find operation and return a page of results. The criteria for the Find are fetched from the restriction storage provider according to the given parameters.
     * @param request - StorageType, ProviderName, StorageKey, DesiredColumns, PageSize, PageNumber, OrderBy
     * @returns Results from search, containing column information and result rows.
     */
    FindWithColumns(request: carriers.Find_FindWithColumnsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    /**
     * Execute a Find operation and return a page of results. The criteria for the Find are fetched from the restriction storage provider according to the given parameters.
     * @param storageType - Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)
     * @param providerName - Name of archive provider that is to execute the search and return the result columns/rows
     * @param storageKey - Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search
     * @param desiredColumns - Array of column names desired for the result. Each name must match a column offered by the given archive provider.
     * @param pageSize - Size of result set pages
     * @param pageNumber - Result set page to return, 0 is the first page. When a call returns no rows, no further pages are available. Negative page numbers are interpreted as number of rows to skip.
     * @param orderBy - Array of order by specifications. If it is null or empty, the row order is unspecified, database dependent, and might not be the same from call to call, depending on query execution plans. The unspecified order willgenerally not vary within pages of the same query.
     * @returns Results from search, containing column information and result rows.
     */
    FindWithColumns(storageType: string, providerName: string, storageKey: string, desiredColumns: string[], pageSize: number, pageNumber: number, orderBy: carriers.ArchiveOrderByInfo[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    private _SaveRestrictions2;
    /**
     * Save an array of restrictions for later use as search criteria (including as dynamic selection and Find).
     * @param request - StorageType, ProviderName, StorageKey, Restrictions
     * @returns This service call just saves the restrictions. See SaveRestrictionsAndGetCriteriaInformation if you would like the restrictions returned as criteria immediately, in one roundtrip
     */
    SaveRestrictions2(request: carriers.Find_SaveRestrictions2Request, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Save an array of restrictions for later use as search criteria (including as dynamic selection and Find).
     * @param storageType - Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)
     * @param providerName - Name of archive provider that is the intended consumer of the restrictions
     * @param storageKey - Storage key to be interpreted by the restriction storage provider, when it saves the restrictions as criteria
     * @param restrictions - String of restrictions. "name = 'SuperOffice'" The ColumnInfo member and the DisplayValues members need NOT be populated; it is enough to provide a name, operator and any values the operator may need. The IsActive is also saved. Values should be encoded using the CultureDataFormatter to ensure compatibility across cultures.
     * @returns This service call just saves the restrictions. See SaveRestrictionsAndGetCriteriaInformation if you would like the restrictions returned as criteria immediately, in one roundtrip
     */
    SaveRestrictions2(storageType: string, providerName: string, storageKey: string, restrictions: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SaveRestrictionsWithContext2;
    /**
     * Save an array of restrictions for later use as search criteria (including as dynamic selection and Find).
     * @param request - StorageType, ProviderName, StorageKey, Restrictions, Context
     * @returns This service call just saves the restrictions. See SaveRestrictionsAndGetCriteriaInformation if you would like the restrictions returned as criteria immediately, in one roundtrip
     */
    SaveRestrictionsWithContext2(request: carriers.Find_SaveRestrictionsWithContext2Request, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Save an array of restrictions for later use as search criteria (including as dynamic selection and Find).
     * @param storageType - Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)
     * @param providerName - Name of archive provider that is the intended consumer of the restrictions
     * @param storageKey - Storage key to be interpreted by the restriction storage provider, when it saves the restrictions as criteria
     * @param restrictions - String of restrictions. The ColumnInfo member and the DisplayValues members need NOT be populated; it is enough to provide a name, operator and any values the operator may need. The IsActive is also saved. Values should be encoded using the CultureDataFormatter to ensure compatibility across cultures.
     * @param context - Optional context that can be used by FindProvider
     * @returns This service call just saves the restrictions. See SaveRestrictionsAndGetCriteriaInformation if you would like the restrictions returned as criteria immediately, in one roundtrip
     */
    SaveRestrictionsWithContext2(storageType: string, providerName: string, storageKey: string, restrictions: string, context: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SaveRestrictionsAndGetCriteriaInformation2;
    /**
     * Save an array of restrictions for later use as search criteria (including as dynamic selection and Find). Then, return the same result as a call to GetCriteriaInformation would have done. The purpose is to encapsulate saving and updating of a GUI in one round trip.
     * @param request - StorageType, ProviderName, StorageKey, Restrictions, StaticColumns
     * @returns The result contains the restrictions in two forms: fully populated ArchiveRestrictionInfo objects, used to display details and for saving changes; and as a list suitable for an Archive control
     */
    SaveRestrictionsAndGetCriteriaInformation2(request: carriers.Find_SaveRestrictionsAndGetCriteriaInformation2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CriteriaInformation>;
    /**
     * Save an array of restrictions for later use as search criteria (including as dynamic selection and Find). Then, return the same result as a call to GetCriteriaInformation would have done. The purpose is to encapsulate saving and updating of a GUI in one round trip.
     * @param storageType - Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)
     * @param providerName - Name of archive provider that is the intended consumer of the restrictions
     * @param storageKey - Storage key to be interpreted by the restriction storage provider, when it saves the restrictions as criteria
     * @param restrictions - String of restrictions. The ColumnInfo member and the DisplayValues members need NOT be populated; it is enough to provide a name, operator and any values the operator may need. The IsActive is also saved. Values should be encoded using the CultureDataFormatter to ensure compatibility across cultures.
     * @param staticColumns - Optional string of comma-separated columns that are to be EXCLUDED from the CriteriaArchiveRows part of the result. In the Find dialogs, that corresponds to the 'static' fields, to avoid duplicating them in the 'Match also' criteria list. This array can be null, indicating that all restrictions should be included in the criteria list.
     * @returns The result contains the restrictions in two forms: fully populated ArchiveRestrictionInfo objects, used to display details and for saving changes; and as a list suitable for an Archive control
     */
    SaveRestrictionsAndGetCriteriaInformation2(storageType: string, providerName: string, storageKey: string, restrictions: string, staticColumns: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CriteriaInformation>;
    private _FindFromRestrictions2;
    /**
     * Execute a Find operation and return a page of results. The criteria for the Find are passed in directly, not fetched by a restriction storage provider. The columns of the result are calculated based on the restriction.
     * @param request - Restrictions, ProviderName, PageSize, PageNumber
     * @returns Results from search, containing column information and result rows.
     */
    FindFromRestrictions2(request: carriers.Find_FindFromRestrictions2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    /**
     * Execute a Find operation and return a page of results. The criteria for the Find are passed in directly, not fetched by a restriction storage provider. The columns of the result are calculated based on the restriction.
     * @param restrictions - String of restrictions specifying the search. e.g. "name='SuperOffice'" Each restriction must match a column of the  given archive provider, and that column must have its CanRestrictBy property set to true.
     * @param providerName - Name of archive provider that is to execute the search and return the result columns/rows
     * @param pageSize - Size of result set pages
     * @param pageNumber - Result set page to return, 0 is the first page. When a call returns no rows, no further pages are available. Negative page numbers are interpreted as number of rows to skip.
     * @returns Results from search, containing column information and result rows.
     */
    FindFromRestrictions2(restrictions: string, providerName: string, pageSize: number, pageNumber: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    private _FindFromRestrictionsColumns2;
    /**
     * Execute a Find operation and return a page of results. &lt;para/&gt;The criteria for the Find are passed in directly, not fetched by a restriction storage provider. &lt;para/&gt;The desired columns of the result set are also passed in directly.&lt;para/&gt;The orderby information is calculated by the system.&lt;para/&gt;Use the GetCriteriaInformation and GetDefaultDesiredColumns service methods to let the system calculate these values, if you want to use or modify them.
     * @param request - Restrictions, ProviderName, DesiredColumns, PageSize, PageNumber
     * @returns Results from search, containing column information and result rows.
     */
    FindFromRestrictionsColumns2(request: carriers.Find_FindFromRestrictionsColumns2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    /**
     * Execute a Find operation and return a page of results. &lt;para/&gt;The criteria for the Find are passed in directly, not fetched by a restriction storage provider. &lt;para/&gt;The desired columns of the result set are also passed in directly.&lt;para/&gt;The orderby information is calculated by the system.&lt;para/&gt;Use the GetCriteriaInformation and GetDefaultDesiredColumns service methods to let the system calculate these values, if you want to use or modify them.
     * @param restrictions - String of restrictions specifying the search. e.g.:"name begins 'Super'". Each restriction must match a column of the  given archive provider, and that column must have its CanRestrictBy property set to true.
     * @param providerName - Name of archive provider that is to execute the search and return the result columns/rows
     * @param desiredColumns - Array of column names desired for the result. Each name must match a column offered by the given archive provider.
     * @param pageSize - Size of result set pages
     * @param pageNumber - Result set page to return, 0 is the first page. When a call returns no rows, no further pages are available. Negative page numbers are interpreted as number of rows to skip.
     * @returns Results from search, containing column information and result rows.
     */
    FindFromRestrictionsColumns2(restrictions: string, providerName: string, desiredColumns: string, pageSize: number, pageNumber: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    private _FindFromRestrictionsColumnsOrderBy2;
    /**
     * Execute a Find operation and return a page of results. &lt;para/&gt;The criteria for the Find are passed in directly, not fetched by a restriction storage provider. &lt;para/&gt;The desired columns of the result set are also passed in directly.&lt;para/&gt;The orderby information is also passed in directly.&lt;para/&gt;Use the GetCriteriaInformation, GetDefaultDesiredColumns and GetDefaultOrderBy service methods to let the system calculate these values, if you want to use or modify them.
     * @param request - Restrictions, ProviderName, DesiredColumns, OrderBy, PageSize, PageNumber
     * @returns Results from search, containing column information and result rows.
     */
    FindFromRestrictionsColumnsOrderBy2(request: carriers.Find_FindFromRestrictionsColumnsOrderBy2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    /**
     * Execute a Find operation and return a page of results. &lt;para/&gt;The criteria for the Find are passed in directly, not fetched by a restriction storage provider. &lt;para/&gt;The desired columns of the result set are also passed in directly.&lt;para/&gt;The orderby information is also passed in directly.&lt;para/&gt;Use the GetCriteriaInformation, GetDefaultDesiredColumns and GetDefaultOrderBy service methods to let the system calculate these values, if you want to use or modify them.
     * @param restrictions - String of restrictions specifying the search. Each restriction must match a column of the  given archive provider, and that column must have its CanRestrictBy property set to true.
     * @param providerName - Name of archive provider that is to execute the search and return the result columns/rows
     * @param desiredColumns - Comma separated list of column names desired for the result. Each name must match a column offered by the given archive provider.
     * @param orderBy - String of order by specifications. If it is null or empty, the row order is unspecified, database dependent, and might not be the same from call to call, depending on query execution plans. The unspecified order willgenerally not vary within pages of the same query.
     * @param pageSize - Size of result set pages
     * @param pageNumber - Result set page to return, 0 is the first page. When a call returns no rows, no further pages are available. Negative page numbers are interpreted as number of rows to skip.
     * @returns Results from search, containing column information and result rows.
     */
    FindFromRestrictionsColumnsOrderBy2(restrictions: string, providerName: string, desiredColumns: string, orderBy: string, pageSize: number, pageNumber: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    private _GetDefaultDesiredColumnsFromRestrictions2;
    /**
     * Calculate the default desired columns, i.e., the result columns for a given search. The search is defined by a provider name and a set of restrictions. This is the algorithm that is used by the Find service method.
     * @param request - ProviderName, Restrictions
     * @returns Column information for the default desired columns, fully populated. Percentage-specified column widths sum to exactly 100.
     */
    GetDefaultDesiredColumnsFromRestrictions2(request: carriers.Find_GetDefaultDesiredColumnsFromRestrictions2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveColumnInfo[]>;
    /**
     * Calculate the default desired columns, i.e., the result columns for a given search. The search is defined by a provider name and a set of restrictions. This is the algorithm that is used by the Find service method.
     * @param providerName - Name of the provider to calculate default desired columns for
     * @param restrictions - Restriction to use in the calculation of default desired columns
     * @returns Column information for the default desired columns, fully populated. Percentage-specified column widths sum to exactly 100.
     */
    GetDefaultDesiredColumnsFromRestrictions2(providerName: string, restrictions: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveColumnInfo[]>;
    private _FindOrderBy2;
    /**
     * Execute a Find operation and return a page of results. The criteria for the Find are fetched from the restriction storage provider according to the given parameters. The columns of the result are calculated based on the restriction. The orderby parameter is used for sorting the results.&lt;para/&gt;The other variants of the Find method allow you greater control over the individual aspects of the process.
     * @param request - StorageType, ProviderName, StorageKey, PageSize, PageNumber, OrderBy
     * @returns Results from search, containing column information and result rows.
     */
    FindOrderBy2(request: carriers.Find_FindOrderBy2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    /**
     * Execute a Find operation and return a page of results. The criteria for the Find are fetched from the restriction storage provider according to the given parameters. The columns of the result are calculated based on the restriction. The orderby parameter is used for sorting the results.&lt;para/&gt;The other variants of the Find method allow you greater control over the individual aspects of the process.
     * @param storageType - Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)
     * @param providerName - Name of archive provider that is to execute the search and return the result columns/rows
     * @param storageKey - Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search
     * @param pageSize - Size of result set pages
     * @param pageNumber - Result set page to return, 0 is the first page. When a call returns no rows, no further pages are available. Negative page numbers are interpreted as number of rows to skip.
     * @param orderBy - Comma separated list of order by specifications. "name asc, dept desc" If it is null or empty, the row order is unspecified, database dependent, and might not be the same from call to call, depending on query execution plans. The unspecified order willgenerally not vary within pages of the same query.
     * @returns Results from search, containing column information and result rows.
     */
    FindOrderBy2(storageType: string, providerName: string, storageKey: string, pageSize: number, pageNumber: number, orderBy: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    private _FindWithExtraRestrictions2;
    /**
     * Execute a Find operation and return a page of results. The criteria for the Find are fetched from the restriction storage provider according to the given parameters. In addition an extra set of restrictions can be added to the search. These restrictions will not be saved, they are only valid for the current search. Extra restrictions will override restrictions with the same key already stored on the storagekey.
     * @param request - StorageType, ProviderName, StorageKey, ExtraRestrictions, OrderBy, DesiredColumns, PageSize, PageNumber
     * @returns Results from search, containing column information and result rows.
     */
    FindWithExtraRestrictions2(request: carriers.Find_FindWithExtraRestrictions2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
    /**
     * Execute a Find operation and return a page of results. The criteria for the Find are fetched from the restriction storage provider according to the given parameters. In addition an extra set of restrictions can be added to the search. These restrictions will not be saved, they are only valid for the current search. Extra restrictions will override restrictions with the same key already stored on the storagekey.
     * @param storageType - Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)
     * @param providerName - Name of archive provider that is to execute the search and return the result columns/rows
     * @param storageKey - Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search
     * @param extraRestrictions - Extra restrictions to append to the the search. These will override saved restrictions with the same key.
     * @param orderBy - Comma separated list of order by specifications. If it is null or empty, the row order is unspecified, database dependent, and might not be the same from call to call, depending on query execution plans. The unspecified order willgenerally not vary within pages of the same query.
     * @param desiredColumns - Comma separated list of column names desired for the result. Each name must match a column offered by the given archive provider.
     * @param pageSize - Size of result set pages
     * @param pageNumber - Result set page to return, 0 is the first page. When a call returns no rows, no further pages are available. Negative page numbers are interpreted as number of rows to skip.
     * @returns Results from search, containing column information and result rows.
     */
    FindWithExtraRestrictions2(storageType: string, providerName: string, storageKey: string, extraRestrictions: string, orderBy: string, desiredColumns: string, pageSize: number, pageNumber: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FindResults>;
}
//# sourceMappingURL=FindAgent.d.ts.map