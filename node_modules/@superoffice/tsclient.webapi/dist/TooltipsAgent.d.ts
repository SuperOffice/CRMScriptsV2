import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Tooltip system, hint to text transformation
 */
export interface ITooltipsAgent {
    GetTooltip(request: carriers.Tooltips_GetTooltipRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetTooltip(tooltipHint: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
}
/**
 * Tooltip system, hint to text transformation
 */
export declare class TooltipsAgent extends base.WebApiBase implements ITooltipsAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    private _GetTooltip;
    /**
     * Parse a tooltip hint and return a tooltip. The returned tooltip string may contain resource string identifiers (in square brackets), to be processed by the resource manager.&lt;para /&gt;The tooltip hint is either a literal text, representing itself, or a set of key/value pairs enclosed in curly braces. Each key is separated from its value by an equals sign, and each pair from the next by an ampersand, according to usual conventions.&lt;para /&gt;A typical tooltip hint could be {contact_id=123} or {appointment_id=222&amp;amp;mode=simple}
     * @param request - TooltipHint
     * @returns
     */
    GetTooltip(request: carriers.Tooltips_GetTooltipRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Parse a tooltip hint and return a tooltip. The returned tooltip string may contain resource string identifiers (in square brackets), to be processed by the resource manager.&lt;para /&gt;The tooltip hint is either a literal text, representing itself, or a set of key/value pairs enclosed in curly braces. Each key is separated from its value by an equals sign, and each pair from the next by an ampersand, according to usual conventions.&lt;para /&gt;A typical tooltip hint could be {contact_id=123} or {appointment_id=222&amp;amp;mode=simple}
     * @param tooltipHint -
     * @returns
     */
    GetTooltip(tooltipHint: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
}
//# sourceMappingURL=TooltipsAgent.d.ts.map