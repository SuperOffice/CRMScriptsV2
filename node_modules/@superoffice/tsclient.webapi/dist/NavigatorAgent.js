"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.NavigatorAgent = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
/**
 * Navigator stuff.
 */
class NavigatorAgent extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Navigator/";
        super(options);
    }
    /*
     * Gets a NavigatorCompany object.
     * @param navigatorCompanyId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single NavigatorCompany
     */
    async GetNavigatorCompany(navigatorCompanyId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetNavigatorCompany?navigatorCompanyId=" + navigatorCompanyId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_NavigatorCompany_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Gets an array of NavigatorCompany objects.
     * @param navigatorCompanyIds - The primary keys.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns An array of NavigatorCompany
     */
    async GetNavigatorCompanyList(navigatorCompanyIds, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetNavigatorCompanyList", navigatorCompanyIds, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_NavigatorCompanyArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async _GetNavigatorCompanies(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetNavigatorCompanies", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_NavigatorCompanyArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetNavigatorCompanies(name, webapi_options) {
        let _request = null;
        let _options = null;
        const first = name;
        if (typeof (first) === "object" && first && (typeof (first.Name) != 'undefined')) {
            _request = name;
            _options = webapi_options;
        }
        else {
            _request = {
                Name: name,
            };
            _options = webapi_options;
        }
        return this._GetNavigatorCompanies(_request, _options);
    }
} // class v1NavigatorAgentController 
exports.NavigatorAgent = NavigatorAgent;
//# sourceMappingURL=NavigatorAgent.js.map