import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Agent used to support migrating documents between different document-plugins, as single documents or batches.
 *
 * **Online Restricted:** This agent is not available in Online by default. Access must be requested specifically when app is registered. Intended for SuperOffice-internal apps.
 */
export interface IDocumentMigrationAgent {
    CreateDefaultDocumentMigrationItemList(): Promise<carriers.DocumentMigrationItemList>;
    CreateDefaultDocumentTemplateMigrationList(): Promise<carriers.DocumentTemplateMigrationList>;
    GetForAllDocuments(request: carriers.DocumentMigration_GetForAllDocumentsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DocumentMigrationItemList>;
    GetForAllDocuments(documentPluginId: number, includeEmails: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DocumentMigrationItemList>;
    GetForDateRange(request: carriers.DocumentMigration_GetForDateRangeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DocumentMigrationItemList>;
    GetForDateRange(documentPluginId: number, minDate: Date, maxDate: Date, includeEmails: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DocumentMigrationItemList>;
    GetForSelection(request: carriers.DocumentMigration_GetForSelectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DocumentMigrationItemList>;
    GetForSelection(documentPluginId: number, selectionId: number, includeEmails: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DocumentMigrationItemList>;
    MigrateDocumentToNewDocPlugin(request: carriers.DocumentMigration_MigrateDocumentToNewDocPluginRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    MigrateDocumentToNewDocPlugin(documentId: number, documentPluginId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    HasDocumentsToMigrate(webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    GetForTemplates(request: carriers.DocumentMigration_GetForTemplatesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DocumentTemplateMigrationList>;
    GetForTemplates(targetDocumentPluginId: number, includeEmails: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DocumentTemplateMigrationList>;
    MigrateTemplateToNewDocPlugin(request: carriers.DocumentMigration_MigrateTemplateToNewDocPluginRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    MigrateTemplateToNewDocPlugin(documentTemplateId: number, targetDocumentPluginId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
}
/**
 * Agent used to support migrating documents between different document-plugins, as single documents or batches.
 */
export declare class DocumentMigrationAgent extends base.WebApiBase implements IDocumentMigrationAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * Set default values into a new DocumentMigrationItemList.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultDocumentMigrationItemList(options?: base.WebApiRequestOptions): Promise<carriers.DocumentMigrationItemList>;
    /**
     * Set default values into a new DocumentTemplateMigrationList.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultDocumentTemplateMigrationList(options?: base.WebApiRequestOptions): Promise<carriers.DocumentTemplateMigrationList>;
    private _GetForAllDocuments;
    /**
     * Gets a migration summary for all documents stored in CRM. Warning: Expensive!
     * @param request - DocumentPluginId, IncludeEmails
     * @returns Never null.
     */
    GetForAllDocuments(request: carriers.DocumentMigration_GetForAllDocumentsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DocumentMigrationItemList>;
    /**
     * Gets a migration summary for all documents stored in CRM. Warning: Expensive!
     * @param documentPluginId - The ID of the document-plugin to migrate to.
     * @param includeEmails - True if documents to migrate should include emails.
     * @returns Never null.
     */
    GetForAllDocuments(documentPluginId: number, includeEmails: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DocumentMigrationItemList>;
    private _GetForDateRange;
    /**
     * Gets a migration summary for documents in the provided date-rage
     * @param request - DocumentPluginId, MinDate, MaxDate, IncludeEmails
     * @returns Never null.
     */
    GetForDateRange(request: carriers.DocumentMigration_GetForDateRangeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DocumentMigrationItemList>;
    /**
     * Gets a migration summary for documents in the provided date-rage
     * @param documentPluginId - The ID of the document-plugin to migrate to.
     * @param minDate - Inclusive mininmum.
     * @param maxDate - Inclusive maximum.
     * @param includeEmails - True if documents to migrate should include emails.
     * @returns Never null.
     */
    GetForDateRange(documentPluginId: number, minDate: Date, maxDate: Date, includeEmails: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DocumentMigrationItemList>;
    private _GetForSelection;
    /**
     * Gets a migration summary for documents in the provided selection
     * @param request - DocumentPluginId, SelectionId, IncludeEmails
     * @returns Never null.
     */
    GetForSelection(request: carriers.DocumentMigration_GetForSelectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DocumentMigrationItemList>;
    /**
     * Gets a migration summary for documents in the provided selection
     * @param documentPluginId - The ID of the document-plugin to migrate to.
     * @param selectionId - ID of the selection used to create the DocumentMigrationSummary instance.
     * @param includeEmails - True if documents to migrate should include emails.
     * @returns Never null.
     */
    GetForSelection(documentPluginId: number, selectionId: number, includeEmails: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DocumentMigrationItemList>;
    private _MigrateDocumentToNewDocPlugin;
    /**
     * Migrates the document with the provided id to the specified document-plugin.
     * @param request - DocumentId, DocumentPluginId
     * @returns This method has no return value
     */
    MigrateDocumentToNewDocPlugin(request: carriers.DocumentMigration_MigrateDocumentToNewDocPluginRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Migrates the document with the provided id to the specified document-plugin.
     * @param documentId - The ID of the document to migrate.
     * @param documentPluginId - The ID of the document-plugin to migrate to.
     * @returns This method has no return value
     */
    MigrateDocumentToNewDocPlugin(documentId: number, documentPluginId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _HasDocumentsToMigrate;
    /**
     * Checks if there are any documents in the current database stored using a non-default document-plugin, and which can be migrated.
     * @returns True if there are documents available to migrate.
     */
    HasDocumentsToMigrate(webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _GetForTemplates;
    /**
     * Gets a migration summary for all templates stored in CRM.
     * @param request - TargetDocumentPluginId, IncludeEmails
     * @returns Never null.
     */
    GetForTemplates(request: carriers.DocumentMigration_GetForTemplatesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DocumentTemplateMigrationList>;
    /**
     * Gets a migration summary for all templates stored in CRM.
     * @param targetDocumentPluginId - The ID of the document-plugin to migrate to.
     * @param includeEmails - True if templates to migrate should include emails.
     * @returns Never null.
     */
    GetForTemplates(targetDocumentPluginId: number, includeEmails: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DocumentTemplateMigrationList>;
    private _MigrateTemplateToNewDocPlugin;
    /**
     * Migrates the template with the provided id to the specified document-plugin.
     * @param request - DocumentTemplateId, TargetDocumentPluginId
     * @returns This method has no return value
     */
    MigrateTemplateToNewDocPlugin(request: carriers.DocumentMigration_MigrateTemplateToNewDocPluginRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Migrates the template with the provided id to the specified document-plugin.
     * @param documentTemplateId - The ID of the document-template to migrate.
     * @param targetDocumentPluginId - The ID of the document-plugin to migrate to.
     * @returns This method has no return value
     */
    MigrateTemplateToNewDocPlugin(documentTemplateId: number, targetDocumentPluginId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
}
//# sourceMappingURL=DocumentMigrationAgent.d.ts.map