"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AxiosCache = void 0;
/**
 * Cache handler for WebApi.
 */
class AxiosCache {
    /**
     * duration in minutes
     */
    static store(key, value, duration = AxiosCache.CACHE_INTERVAL) {
        if (AxiosCache.isValid(key).isValid) {
            return;
        }
        const dateStamp = Date.now() + new Date(duration * 60 * 1000).getTime();
        const finalValue = { value: JSON.stringify(value), dateStamp: dateStamp }; //`${value}${AxiosCache.SEPARATOR}${dateStamp.toString()}`;
        const _axioCache = this.getCache();
        _axioCache[key] = finalValue;
        this.persistCache(_axioCache);
    }
    // Returns true if an object has been stored using the store method
    // and have yet not expired
    static isValid(key) {
        const _axioCache = this.getCache();
        if (!_axioCache[key]) {
            return {
                isValid: false
            };
        }
        const value = _axioCache[key];
        const timestamp = value.dateStamp; // Number(values[1]);
        if (Number.isNaN(timestamp)) {
            return {
                isValid: false
            };
        }
        const date = new Date(timestamp);
        if (date.toString() === "Invalid Date") {
            return {
                isValid: false
            };
        }
        if (date.getTime() > Date.now()) {
            return {
                isValid: true,
                value: JSON.parse(value.value)
            };
        }
        delete _axioCache[key];
        this.persistCache(_axioCache);
        return {
            isValid: false
        };
    }
    static getCache() {
        return this._cache;
    }
    static persistCache(_axiosCache) {
        this._cache = _axiosCache;
    }
    static clear() {
        this._cache = {};
    }
}
AxiosCache._cache = {};
AxiosCache.CACHE_INTERVAL = 0.2; // minutes
exports.AxiosCache = AxiosCache;
//# sourceMappingURL=AxiosCacheHandler.js.map