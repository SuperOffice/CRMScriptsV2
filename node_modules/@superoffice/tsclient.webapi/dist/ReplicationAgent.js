"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReplicationAgent = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
/**
 * Replication/Travel administration
 */
class ReplicationAgent extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Replication/";
        super(options);
    }
    /**
     * Set default values into a new Satellite.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    async CreateDefaultSatellite(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultSatellite", null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_Satellite_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing Satellite or creates a new Satellite if the id parameter is empty
     * @param entity - The Satellite to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated Satellite
     */
    async SaveSatellite(entity, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveSatellite", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_Satellite_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Gets a Area object.
     * @param areaId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single Area
     */
    async GetArea(areaId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetArea?areaId=" + areaId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_Area_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async _SetFreetextSearchEnabledOnArea(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetFreetextSearchEnabledOnArea", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SetFreetextSearchEnabledOnArea(areaId, freetextEnabled, webapi_options) {
        let _request = null;
        let _options = null;
        const first = areaId;
        if (typeof (first) === "object" && first && (typeof (first.AreaId) != 'undefined' || typeof (first.FreetextEnabled) != 'undefined')) {
            _request = areaId;
            _options = freetextEnabled;
        }
        else {
            _request = {
                AreaId: areaId,
                FreetextEnabled: freetextEnabled,
            };
            _options = webapi_options;
        }
        return this._SetFreetextSearchEnabledOnArea(_request, _options);
    }
    /*
     * Gets an array of Area objects.
     * @param areaIds - The primary keys.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns An array of Area
     */
    async GetAreaList(areaIds, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetAreaList", areaIds, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_AreaArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Gets a Satellite object.
     * @param satelliteId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single Satellite
     */
    async GetSatellite(satelliteId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetSatellite?satelliteId=" + satelliteId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_Satellite_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async _GetCentralLicense(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetCentralLicense", undefined, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_LicenseOwnerArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     *
     * @returns
     */
    async GetCentralLicense(webapi_options) {
        return this._GetCentralLicense(webapi_options);
    }
    async _SaveCentralLicense(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SaveCentralLicense", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_LicenseOwnerArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SaveCentralLicense(license, webapi_options) {
        let _request = null;
        let _options = null;
        const first = license;
        if (typeof (first) === "object" && first && (typeof (first.License) != 'undefined')) {
            _request = license;
            _options = webapi_options;
        }
        else {
            _request = {
                License: license,
            };
            _options = webapi_options;
        }
        return this._SaveCentralLicense(_request, _options);
    }
} // class v1ReplicationAgentController 
exports.ReplicationAgent = ReplicationAgent;
//# sourceMappingURL=ReplicationAgent.js.map