import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Collection of all services that works with Project data.
 */
export interface IProjectAgent {
    CreateDefaultProjectEntity(): Promise<carriers.ProjectEntity>;
    SaveProjectEntity(entity: carriers.ProjectEntity): Promise<carriers.ProjectEntity>;
    DeleteProjectEntity(ProjectEntityId: number): Promise<void>;
    CreateDefaultProjectEventEntity(): Promise<carriers.ProjectEventEntity>;
    SaveProjectEventEntity(entity: carriers.ProjectEventEntity): Promise<carriers.ProjectEventEntity>;
    DeleteProjectEventEntity(ProjectEventEntityId: number): Promise<void>;
    CreateDefaultProjectMember(): Promise<carriers.ProjectMember>;
    SaveProjectMember(entity: carriers.ProjectMember): Promise<carriers.ProjectMember>;
    DeleteProjectMember(ProjectMemberId: number): Promise<void>;
    GetProject(projectId: number): Promise<carriers.Project>;
    GetProjectEntity(projectEntityId: number): Promise<carriers.ProjectEntity>;
    AddProjectMembers(request: carriers.Project_AddProjectMembersRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    AddProjectMembers(projectEntityId: number, projectMembers: carriers.ProjectMember[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteProjectMembers(request: carriers.Project_DeleteProjectMembersRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteProjectMembers(projectEntityId: number, memberIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetProjectImage(request: carriers.Project_GetProjectImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetProjectImage(projectId: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    SetProjectImage(request: carriers.Project_SetProjectImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetProjectImage(projectId: number, image: ArrayBuffer | string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteProjectMemberByIds(request: carriers.Project_DeleteProjectMemberByIdsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteProjectMemberByIds(projectMemberIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetDuplicates(request: carriers.Project_GetDuplicatesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DuplicateEntry[]>;
    GetDuplicates(name: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DuplicateEntry[]>;
    CreateNewEntry(request: carriers.Project_CreateNewEntryRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    CreateNewEntry(duplicate: carriers.DuplicateEntry, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    SetDuplicateRulesStatus(request: carriers.Project_SetDuplicateRulesStatusRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetDuplicateRulesStatus(rules: carriers.DuplicateRule[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetDuplicateRules(webapi_options?: base.WebApiRequestOptions): Promise<carriers.DuplicateRule[]>;
    Merge(request: carriers.Project_MergeRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    Merge(sourceProjectId: number, destinationProjectId: number, replaceEmptyFieldsOnDestination: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    IsNumberValid(request: carriers.Project_IsNumberValidRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    IsNumberValid(contactId: number, number: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    HasGuide(request: carriers.Project_HasGuideRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    HasGuide(projectId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    GetNextMilestone(request: carriers.Project_GetNextMilestoneRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment>;
    GetNextMilestone(projectId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment>;
    OfferAutoNextStatusOnApppointmentCompleted(request: carriers.Project_OfferAutoNextStatusOnApppointmentCompletedRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    OfferAutoNextStatusOnApppointmentCompleted(appointmentId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    GetNextProjectStatus(request: carriers.Project_GetNextProjectStatusRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    GetNextProjectStatus(projectId: number, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    HasGuideActivities(request: carriers.Project_HasGuideActivitiesRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    HasGuideActivities(projectId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    ValidateProjectEntity(request: carriers.Project_ValidateProjectEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    ValidateProjectEntity(projectEntity: carriers.ProjectEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    GetProjectEvent(projectEventId: number): Promise<carriers.ProjectEvent>;
    GetProjectEventOnPerson(request: carriers.Project_GetProjectEventOnPersonRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProjectEvent>;
    GetProjectEventOnPerson(projectId: number, personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProjectEvent>;
    GetProjectEventEntity(projectEventEntityId: number): Promise<carriers.ProjectEventEntity>;
    GetProjectEventEntityFromProjectId(request: carriers.Project_GetProjectEventEntityFromProjectIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProjectEventEntity>;
    GetProjectEventEntityFromProjectId(projectId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProjectEventEntity>;
    DeleteProjectEventEntityFromProjectId(request: carriers.Project_DeleteProjectEventEntityFromProjectIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteProjectEventEntityFromProjectId(projectId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetProjectEventList(projectEventIds: number[]): Promise<carriers.ProjectEvent[]>;
    GetMyProjectEvents(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProjectEvent[]>;
    GetProjectEventsOnPerson(request: carriers.Project_GetProjectEventsOnPersonRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProjectEvent[]>;
    GetProjectEventsOnPerson(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProjectEvent[]>;
    GetProjectList(projectIds: number[]): Promise<carriers.Project[]>;
    GetMyProjects(request: carriers.Project_GetMyProjectsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Project[]>;
    GetMyProjects(includeMemberProjects: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Project[]>;
    GetMyMemberProjects(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Project[]>;
    GetProjectsFromPerson(request: carriers.Project_GetProjectsFromPersonRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Project[]>;
    GetProjectsFromPerson(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Project[]>;
    GetProjectsFromContact(request: carriers.Project_GetProjectsFromContactRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Project[]>;
    GetProjectsFromContact(contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Project[]>;
    GetPublishedProject(request: carriers.Project_GetPublishedProjectRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Project>;
    GetPublishedProject(projectId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Project>;
    GetPublishedProjects(request: carriers.Project_GetPublishedProjectsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Project[]>;
    GetPublishedProjects(projectIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.Project[]>;
    GetMyPublishedProjects(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Project[]>;
    GetPublishedProjectsOnPersonId(request: carriers.Project_GetPublishedProjectsOnPersonIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Project[]>;
    GetPublishedProjectsOnPersonId(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Project[]>;
    GetProjectMember(projectMemberId: number): Promise<carriers.ProjectMember>;
    GetProjectMembers(request: carriers.Project_GetProjectMembersRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProjectMember[]>;
    GetProjectMembers(projectId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProjectMember[]>;
    UpdateProjectMember(request: carriers.Project_UpdateProjectMemberRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProjectMember>;
    UpdateProjectMember(projectMember: carriers.ProjectMember, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProjectMember>;
    GetProjectMembersById(request: carriers.Project_GetProjectMembersByIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProjectMember[]>;
    GetProjectMembersById(projectMemberIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProjectMember[]>;
    SaveProjectMembersFunctionAndComment(request: carriers.Project_SaveProjectMembersFunctionAndCommentRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SaveProjectMembersFunctionAndComment(projectMemberIds: number[], roleId: number, comment: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
}
/**
 * Collection of all services that works with Project data.
 */
export declare class ProjectAgent extends base.WebApiBase implements IProjectAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * Set default values into a new ProjectEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultProjectEntity(options?: base.WebApiRequestOptions): Promise<carriers.ProjectEntity>;
    SaveProjectEntity(entity: carriers.ProjectEntity, options?: base.WebApiRequestOptions): Promise<carriers.ProjectEntity>;
    DeleteProjectEntity(ProjectEntityId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new ProjectEventEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultProjectEventEntity(options?: base.WebApiRequestOptions): Promise<carriers.ProjectEventEntity>;
    SaveProjectEventEntity(entity: carriers.ProjectEventEntity, options?: base.WebApiRequestOptions): Promise<carriers.ProjectEventEntity>;
    DeleteProjectEventEntity(ProjectEventEntityId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new ProjectMember.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultProjectMember(options?: base.WebApiRequestOptions): Promise<carriers.ProjectMember>;
    SaveProjectMember(entity: carriers.ProjectMember, options?: base.WebApiRequestOptions): Promise<carriers.ProjectMember>;
    DeleteProjectMember(ProjectMemberId: number, options?: base.WebApiRequestOptions): Promise<void>;
    GetProject(projectId: number, options?: base.WebApiRequestOptions): Promise<carriers.Project>;
    GetProjectEntity(projectEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.ProjectEntity>;
    private _AddProjectMembers;
    /**
     * Add multiple project members to a project
     * @param request - ProjectEntityId, ProjectMembers
     * @returns
     */
    AddProjectMembers(request: carriers.Project_AddProjectMembersRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Add multiple project members to a project
     * @param projectEntityId - Project to add members to
     * @param projectMembers - Project members to add
     * @returns
     */
    AddProjectMembers(projectEntityId: number, projectMembers: carriers.ProjectMember[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _DeleteProjectMembers;
    /**
     * Delete the given project members from a project
     * @param request - ProjectEntityId, MemberIds
     * @returns
     */
    DeleteProjectMembers(request: carriers.Project_DeleteProjectMembersRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Delete the given project members from a project
     * @param projectEntityId - Project to remove members from
     * @param memberIds - Project member ids
     * @returns
     */
    DeleteProjectMembers(projectEntityId: number, memberIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetProjectImage;
    /**
     * Returns the project image that is displayed in the CRM application.
     * @param request - ProjectId
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)
     */
    GetProjectImage(request: carriers.Project_GetProjectImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    /**
     * Returns the project image that is displayed in the CRM application.
     * @param projectId - The project id of the project the image belongs to.
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)
     */
    GetProjectImage(projectId: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    private _SetProjectImage;
    /**
     * Stores the project image that is displayed in the CRM application.
     * @param request - ProjectId, Image
     * @returns
     */
    SetProjectImage(request: carriers.Project_SetProjectImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Stores the project image that is displayed in the CRM application.
     * @param projectId - The project id of the project the image belongs to.
     * @param image - The image that is stored on the project (System.Drawing.Image)
     * @returns
     */
    SetProjectImage(projectId: number, image: ArrayBuffer | string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _DeleteProjectMemberByIds;
    /**
     * Deletes projectmembers rows.
     * @param request - ProjectMemberIds
     * @returns
     */
    DeleteProjectMemberByIds(request: carriers.Project_DeleteProjectMemberByIdsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Deletes projectmembers rows.
     * @param projectMemberIds - An Array of projectmember ids.
     * @returns
     */
    DeleteProjectMemberByIds(projectMemberIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetDuplicates;
    /**
     * Get duplicates(exact or similar in the database) based on the name
     * @param request - Name
     * @returns Any records matching the specified name
     */
    GetDuplicates(request: carriers.Project_GetDuplicatesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DuplicateEntry[]>;
    /**
     * Get duplicates(exact or similar in the database) based on the name
     * @param name - Name used for lookup
     * @returns Any records matching the specified name
     */
    GetDuplicates(name: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DuplicateEntry[]>;
    private _CreateNewEntry;
    /**
     * Creates a new project based on external duplicate
     * @param request - Duplicate
     * @returns The database identity of the newly created entry
     */
    CreateNewEntry(request: carriers.Project_CreateNewEntryRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Creates a new project based on external duplicate
     * @param duplicate - The duplicate to create a new entry based upon
     * @returns The database identity of the newly created entry
     */
    CreateNewEntry(duplicate: carriers.DuplicateEntry, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _SetDuplicateRulesStatus;
    /**
     * Set which duplicate rules should be active or not
     * @param request - Rules
     * @returns
     */
    SetDuplicateRulesStatus(request: carriers.Project_SetDuplicateRulesStatusRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set which duplicate rules should be active or not
     * @param rules - Duplicate rules to update active status for
     * @returns
     */
    SetDuplicateRulesStatus(rules: carriers.DuplicateRule[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetDuplicateRules;
    /**
     * Retrieve all available duplicate rules for project
     * @returns All available duplicate rules
     */
    GetDuplicateRules(webapi_options?: base.WebApiRequestOptions): Promise<carriers.DuplicateRule[]>;
    private _Merge;
    /**
     * Merge two projects into one, removing the source project in the process
     * @param request - SourceProjectId, DestinationProjectId, ReplaceEmptyFieldsOnDestination
     * @returns
     */
    Merge(request: carriers.Project_MergeRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Merge two projects into one, removing the source project in the process
     * @param sourceProjectId - Id of source project for merge. This project is removed after the merge is completed.
     * @param destinationProjectId - Id of destination project to merge to. This project is updated with info from the source.
     * @param replaceEmptyFieldsOnDestination - Fill in empty fields on destination from source?
     * @returns
     */
    Merge(sourceProjectId: number, destinationProjectId: number, replaceEmptyFieldsOnDestination: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _IsNumberValid;
    /**
     * Checks if the number is unique or required.  The setting is configured from admin under system options.
     * @param request - ContactId, Number
     * @returns True if the number is valid
     */
    IsNumberValid(request: carriers.Project_IsNumberValidRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Checks if the number is unique or required.  The setting is configured from admin under system options.
     * @param contactId - The Project id
     * @param number - The number to check for uniqueness and validity
     * @returns True if the number is valid
     */
    IsNumberValid(contactId: number, number: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _HasGuide;
    /**
     * Does this project have a guide associated with its project type?
     * @param request - ProjectId
     * @returns True if the project has a guide
     */
    HasGuide(request: carriers.Project_HasGuideRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Does this project have a guide associated with its project type?
     * @param projectId - Project id
     * @returns True if the project has a guide
     */
    HasGuide(projectId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _GetNextMilestone;
    /**
     * Next upcoming milestone appointment
     * @param request - ProjectId
     * @returns Upcoming milestone appointment
     */
    GetNextMilestone(request: carriers.Project_GetNextMilestoneRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment>;
    /**
     * Next upcoming milestone appointment
     * @param projectId - Project id - primary key
     * @returns Upcoming milestone appointment
     */
    GetNextMilestone(projectId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment>;
    private _OfferAutoNextStatusOnApppointmentCompleted;
    /**
     *
     * @param request - AppointmentId
     * @returns
     */
    OfferAutoNextStatusOnApppointmentCompleted(request: carriers.Project_OfferAutoNextStatusOnApppointmentCompletedRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     *
     * @param appointmentId -
     * @returns
     */
    OfferAutoNextStatusOnApppointmentCompleted(appointmentId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _GetNextProjectStatus;
    /**
     *
     * @param request - ProjectId
     * @returns
     */
    GetNextProjectStatus(request: carriers.Project_GetNextProjectStatusRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     *
     * @param projectId -
     * @returns
     */
    GetNextProjectStatus(projectId: number, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _HasGuideActivities;
    /**
     *
     * @param request - ProjectId
     * @returns
     */
    HasGuideActivities(request: carriers.Project_HasGuideActivitiesRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     *
     * @param projectId -
     * @returns
     */
    HasGuideActivities(projectId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _ValidateProjectEntity;
    /**
     * Check that entity is ready for saving, return error messages by field.
     * @param request - ProjectEntity
     * @returns Error messages tagged by field.
     */
    ValidateProjectEntity(request: carriers.Project_ValidateProjectEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    /**
     * Check that entity is ready for saving, return error messages by field.
     * @param projectEntity - Entity to be checked for errors.
     * @returns Error messages tagged by field.
     */
    ValidateProjectEntity(projectEntity: carriers.ProjectEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    GetProjectEvent(projectEventId: number, options?: base.WebApiRequestOptions): Promise<carriers.ProjectEvent>;
    private _GetProjectEventOnPerson;
    /**
     * Gets a ProjectEvent object from a project and a person.
     * @param request - ProjectId, PersonId
     * @returns
     */
    GetProjectEventOnPerson(request: carriers.Project_GetProjectEventOnPersonRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProjectEvent>;
    /**
     * Gets a ProjectEvent object from a project and a person.
     * @param projectId - The project Id
     * @param personId - Id of the person the project events belong to.
     * @returns
     */
    GetProjectEventOnPerson(projectId: number, personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProjectEvent>;
    GetProjectEventEntity(projectEventEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.ProjectEventEntity>;
    private _GetProjectEventEntityFromProjectId;
    /**
     * Get a ProjectEventEntity based on a projectId.
     * @param request - ProjectId
     * @returns ProjectEventEntity
     */
    GetProjectEventEntityFromProjectId(request: carriers.Project_GetProjectEventEntityFromProjectIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProjectEventEntity>;
    /**
     * Get a ProjectEventEntity based on a projectId.
     * @param projectId - The projectId to get a ProjectEventEntity for
     * @returns ProjectEventEntity
     */
    GetProjectEventEntityFromProjectId(projectId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProjectEventEntity>;
    private _DeleteProjectEventEntityFromProjectId;
    /**
     * Delete a project event based on a project id. Does not delete the project, but does delete the published and ExternalEvent and AudienceVisibility records.
     * @param request - ProjectId
     * @returns Nothing
     */
    DeleteProjectEventEntityFromProjectId(request: carriers.Project_DeleteProjectEventEntityFromProjectIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Delete a project event based on a project id. Does not delete the project, but does delete the published and ExternalEvent and AudienceVisibility records.
     * @param projectId - The project id of the external event to delete.
     * @returns Nothing
     */
    DeleteProjectEventEntityFromProjectId(projectId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetProjectEventList(projectEventIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.ProjectEvent[]>;
    private _GetMyProjectEvents;
    /**
     * Gets all project events that belongs to the currently logged on user. The list of events are filtered by the Audience Visibility restrictions set when the project event is created.
     * @returns Array of project events
     */
    GetMyProjectEvents(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProjectEvent[]>;
    private _GetProjectEventsOnPerson;
    /**
     * Gets all project events that belongs to the person specified. The list of events are filtered by the Audience Visibility restrictions set when the project event is created.
     * @param request - PersonId
     * @returns Array of project events
     */
    GetProjectEventsOnPerson(request: carriers.Project_GetProjectEventsOnPersonRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProjectEvent[]>;
    /**
     * Gets all project events that belongs to the person specified. The list of events are filtered by the Audience Visibility restrictions set when the project event is created.
     * @param personId - Id of the person the project events belong to.
     * @returns Array of project events
     */
    GetProjectEventsOnPerson(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProjectEvent[]>;
    GetProjectList(projectIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.Project[]>;
    private _GetMyProjects;
    /**
     * Returning the projects belonging to an associate. If memberProjects is false only the projects where the associate is project responsible is returned, otherwise both the projects where the associate is project responsible and project member is returned.
     * @param request - IncludeMemberProjects
     * @returns The list of projects
     */
    GetMyProjects(request: carriers.Project_GetMyProjectsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Project[]>;
    /**
     * Returning the projects belonging to an associate. If memberProjects is false only the projects where the associate is project responsible is returned, otherwise both the projects where the associate is project responsible and project member is returned.
     * @param includeMemberProjects - True to include projects where the user is project member.
     * @returns The list of projects
     */
    GetMyProjects(includeMemberProjects: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Project[]>;
    private _GetMyMemberProjects;
    /**
     * Returning the projects where an user is project member.
     * @returns The list of projects.
     */
    GetMyMemberProjects(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Project[]>;
    private _GetProjectsFromPerson;
    /**
     * Return all projects where the person is project member.
     * @param request - PersonId
     * @returns ProjectListEntity
     */
    GetProjectsFromPerson(request: carriers.Project_GetProjectsFromPersonRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Project[]>;
    /**
     * Return all projects where the person is project member.
     * @param personId - The person id
     * @returns ProjectListEntity
     */
    GetProjectsFromPerson(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Project[]>;
    private _GetProjectsFromContact;
    /**
     * Returns all projects where the given contact has projectmembers.
     * @param request - ContactId
     * @returns ProjectListEntity
     */
    GetProjectsFromContact(request: carriers.Project_GetProjectsFromContactRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Project[]>;
    /**
     * Returns all projects where the given contact has projectmembers.
     * @param contactId - The contact id
     * @returns ProjectListEntity
     */
    GetProjectsFromContact(contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Project[]>;
    private _GetPublishedProject;
    /**
     * Get published project by project id.
     * @param request - ProjectId
     * @returns Project
     */
    GetPublishedProject(request: carriers.Project_GetPublishedProjectRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Project>;
    /**
     * Get published project by project id.
     * @param projectId - The project id.
     * @returns Project
     */
    GetPublishedProject(projectId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Project>;
    private _GetPublishedProjects;
    /**
     * Get published projects by project ids.
     * @param request - ProjectIds
     * @returns Projects
     */
    GetPublishedProjects(request: carriers.Project_GetPublishedProjectsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Project[]>;
    /**
     * Get published projects by project ids.
     * @param projectIds - The array of project ids
     * @returns Projects
     */
    GetPublishedProjects(projectIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.Project[]>;
    private _GetMyPublishedProjects;
    /**
     * Get published projects from the logged in user.
     * @returns Projects
     */
    GetMyPublishedProjects(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Project[]>;
    private _GetPublishedProjectsOnPersonId;
    /**
     * Get published projects where person  is a member
     * @param request - PersonId
     * @returns Array of project
     */
    GetPublishedProjectsOnPersonId(request: carriers.Project_GetPublishedProjectsOnPersonIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Project[]>;
    /**
     * Get published projects where person  is a member
     * @param personId - The person id
     * @returns Array of project
     */
    GetPublishedProjectsOnPersonId(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Project[]>;
    GetProjectMember(projectMemberId: number, options?: base.WebApiRequestOptions): Promise<carriers.ProjectMember>;
    private _GetProjectMembers;
    /**
     * Returns an array of project members
     * @param request - ProjectId
     * @returns An array of project members
     */
    GetProjectMembers(request: carriers.Project_GetProjectMembersRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProjectMember[]>;
    /**
     * Returns an array of project members
     * @param projectId - The project id
     * @returns An array of project members
     */
    GetProjectMembers(projectId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProjectMember[]>;
    private _UpdateProjectMember;
    /**
     * Updates a ProjectMember row.
     * @param request - ProjectMember
     * @returns The Updated ProjectMember
     */
    UpdateProjectMember(request: carriers.Project_UpdateProjectMemberRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProjectMember>;
    /**
     * Updates a ProjectMember row.
     * @param projectMember - ProjectMember to update
     * @returns The Updated ProjectMember
     */
    UpdateProjectMember(projectMember: carriers.ProjectMember, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProjectMember>;
    private _GetProjectMembersById;
    /**
     * Returns an array of project members
     * @param request - ProjectMemberIds
     * @returns An array of project members
     */
    GetProjectMembersById(request: carriers.Project_GetProjectMembersByIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProjectMember[]>;
    /**
     * Returns an array of project members
     * @param projectMemberIds -
     * @returns An array of project members
     */
    GetProjectMembersById(projectMemberIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProjectMember[]>;
    private _SaveProjectMembersFunctionAndComment;
    /**
     * Saves role and comment on an array of projectmembers represented by ids
     * @param request - ProjectMemberIds, RoleId, Comment
     * @returns
     */
    SaveProjectMembersFunctionAndComment(request: carriers.Project_SaveProjectMembersFunctionAndCommentRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Saves role and comment on an array of projectmembers represented by ids
     * @param projectMemberIds -
     * @param roleId -
     * @param comment -
     * @returns
     */
    SaveProjectMembersFunctionAndComment(projectMemberIds: number[], roleId: number, comment: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
}
//# sourceMappingURL=ProjectAgent.d.ts.map