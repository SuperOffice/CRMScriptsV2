"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentMigrationAgent = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
/**
 * Agent used to support migrating documents between different document-plugins, as single documents or batches.
 */
class DocumentMigrationAgent extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/DocumentMigration/";
        super(options);
    }
    /**
     * Set default values into a new DocumentMigrationItemList.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    async CreateDefaultDocumentMigrationItemList(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultDocumentMigrationItemList", null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_DocumentMigrationItemList_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Set default values into a new DocumentTemplateMigrationList.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    async CreateDefaultDocumentTemplateMigrationList(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultDocumentTemplateMigrationList", null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_DocumentTemplateMigrationList_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async _GetForAllDocuments(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetForAllDocuments", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_DocumentMigrationItemList_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetForAllDocuments(documentPluginId, includeEmails, webapi_options) {
        let _request = null;
        let _options = null;
        const first = documentPluginId;
        if (typeof (first) === "object" && first && (typeof (first.DocumentPluginId) != 'undefined' || typeof (first.IncludeEmails) != 'undefined')) {
            _request = documentPluginId;
            _options = includeEmails;
        }
        else {
            _request = {
                DocumentPluginId: documentPluginId,
                IncludeEmails: includeEmails,
            };
            _options = webapi_options;
        }
        return this._GetForAllDocuments(_request, _options);
    }
    async _GetForDateRange(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetForDateRange", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_DocumentMigrationItemList_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetForDateRange(documentPluginId, minDate, maxDate, includeEmails, webapi_options) {
        let _request = null;
        let _options = null;
        const first = documentPluginId;
        if (typeof (first) === "object" && first && (typeof (first.DocumentPluginId) != 'undefined' || typeof (first.MinDate) != 'undefined' || typeof (first.MaxDate) != 'undefined' || typeof (first.IncludeEmails) != 'undefined')) {
            _request = documentPluginId;
            _options = minDate;
        }
        else {
            _request = {
                DocumentPluginId: documentPluginId,
                MinDate: minDate,
                MaxDate: maxDate,
                IncludeEmails: includeEmails,
            };
            _options = webapi_options;
        }
        return this._GetForDateRange(_request, _options);
    }
    async _GetForSelection(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetForSelection", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_DocumentMigrationItemList_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetForSelection(documentPluginId, selectionId, includeEmails, webapi_options) {
        let _request = null;
        let _options = null;
        const first = documentPluginId;
        if (typeof (first) === "object" && first && (typeof (first.DocumentPluginId) != 'undefined' || typeof (first.SelectionId) != 'undefined' || typeof (first.IncludeEmails) != 'undefined')) {
            _request = documentPluginId;
            _options = selectionId;
        }
        else {
            _request = {
                DocumentPluginId: documentPluginId,
                SelectionId: selectionId,
                IncludeEmails: includeEmails,
            };
            _options = webapi_options;
        }
        return this._GetForSelection(_request, _options);
    }
    async _MigrateDocumentToNewDocPlugin(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("MigrateDocumentToNewDocPlugin", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async MigrateDocumentToNewDocPlugin(documentId, documentPluginId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = documentId;
        if (typeof (first) === "object" && first && (typeof (first.DocumentId) != 'undefined' || typeof (first.DocumentPluginId) != 'undefined')) {
            _request = documentId;
            _options = documentPluginId;
        }
        else {
            _request = {
                DocumentId: documentId,
                DocumentPluginId: documentPluginId,
            };
            _options = webapi_options;
        }
        return this._MigrateDocumentToNewDocPlugin(_request, _options);
    }
    async _HasDocumentsToMigrate(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("HasDocumentsToMigrate", undefined, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Checks if there are any documents in the current database stored using a non-default document-plugin, and which can be migrated.
     * @returns True if there are documents available to migrate.
     */
    async HasDocumentsToMigrate(webapi_options) {
        return this._HasDocumentsToMigrate(webapi_options);
    }
    async _GetForTemplates(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetForTemplates", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_DocumentTemplateMigrationList_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetForTemplates(targetDocumentPluginId, includeEmails, webapi_options) {
        let _request = null;
        let _options = null;
        const first = targetDocumentPluginId;
        if (typeof (first) === "object" && first && (typeof (first.TargetDocumentPluginId) != 'undefined' || typeof (first.IncludeEmails) != 'undefined')) {
            _request = targetDocumentPluginId;
            _options = includeEmails;
        }
        else {
            _request = {
                TargetDocumentPluginId: targetDocumentPluginId,
                IncludeEmails: includeEmails,
            };
            _options = webapi_options;
        }
        return this._GetForTemplates(_request, _options);
    }
    async _MigrateTemplateToNewDocPlugin(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("MigrateTemplateToNewDocPlugin", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async MigrateTemplateToNewDocPlugin(documentTemplateId, targetDocumentPluginId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = documentTemplateId;
        if (typeof (first) === "object" && first && (typeof (first.DocumentTemplateId) != 'undefined' || typeof (first.TargetDocumentPluginId) != 'undefined')) {
            _request = documentTemplateId;
            _options = targetDocumentPluginId;
        }
        else {
            _request = {
                DocumentTemplateId: documentTemplateId,
                TargetDocumentPluginId: targetDocumentPluginId,
            };
            _options = webapi_options;
        }
        return this._MigrateTemplateToNewDocPlugin(_request, _options);
    }
} // class v1DocumentMigrationAgentController 
exports.DocumentMigrationAgent = DocumentMigrationAgent;
//# sourceMappingURL=DocumentMigrationAgent.js.map