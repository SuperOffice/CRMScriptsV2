"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.BulkUpdateAgent = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
/**
 * Agent used for bulk update methods
 */
class BulkUpdateAgent extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/BulkUpdate/";
        super(options);
    }
    async _GetAvailableFields(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetAvailableFields", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_FieldValueInfoArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetAvailableFields(tablename, webapi_options) {
        let _request = null;
        let _options = null;
        const first = tablename;
        if (typeof (first) === "object" && first && (typeof (first.Tablename) != 'undefined')) {
            _request = tablename;
            _options = webapi_options;
        }
        else {
            _request = {
                Tablename: tablename,
            };
            _options = webapi_options;
        }
        return this._GetAvailableFields(_request, _options);
    }
    async _GetStoredFields(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetStoredFields", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_FieldValueInfoArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetStoredFields(tablename, context, webapi_options) {
        let _request = null;
        let _options = null;
        const first = tablename;
        if (typeof (first) === "object" && first && (typeof (first.Tablename) != 'undefined' || typeof (first.Context) != 'undefined')) {
            _request = tablename;
            _options = context;
        }
        else {
            _request = {
                Tablename: tablename,
                Context: context,
            };
            _options = webapi_options;
        }
        return this._GetStoredFields(_request, _options);
    }
    async _ExecuteBySelectionId(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ExecuteBySelectionId", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async ExecuteBySelectionId(fieldValueInfos, tableName, context, selectionId, isShadow, webapi_options) {
        let _request = null;
        let _options = null;
        const first = fieldValueInfos;
        if (typeof (first) === "object" && first && (typeof (first.FieldValueInfos) != 'undefined' || typeof (first.TableName) != 'undefined' || typeof (first.Context) != 'undefined' || typeof (first.SelectionId) != 'undefined' || typeof (first.IsShadow) != 'undefined')) {
            _request = fieldValueInfos;
            _options = tableName;
        }
        else {
            _request = {
                FieldValueInfos: fieldValueInfos,
                TableName: tableName,
                Context: context,
                SelectionId: selectionId,
                IsShadow: isShadow,
            };
            _options = webapi_options;
        }
        return this._ExecuteBySelectionId(_request, _options);
    }
    async _ExecuteByEntityIds(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ExecuteByEntityIds", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async ExecuteByEntityIds(fieldValueInfos, tableName, context, ids, webapi_options) {
        let _request = null;
        let _options = null;
        const first = fieldValueInfos;
        if (typeof (first) === "object" && first && (typeof (first.FieldValueInfos) != 'undefined' || typeof (first.TableName) != 'undefined' || typeof (first.Context) != 'undefined' || typeof (first.Ids) != 'undefined')) {
            _request = fieldValueInfos;
            _options = tableName;
        }
        else {
            _request = {
                FieldValueInfos: fieldValueInfos,
                TableName: tableName,
                Context: context,
                Ids: ids,
            };
            _options = webapi_options;
        }
        return this._ExecuteByEntityIds(_request, _options);
    }
    async _GetJobResultsFromStorageAsJson(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetJobResultsFromStorageAsJson", undefined, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Get result of the batchupdate job
     * @returns Result of job as json
     */
    async GetJobResultsFromStorageAsJson(webapi_options) {
        return this._GetJobResultsFromStorageAsJson(webapi_options);
    }
    async _RemoveStoredFields(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("RemoveStoredFields", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async RemoveStoredFields(tableName, context, webapi_options) {
        let _request = null;
        let _options = null;
        const first = tableName;
        if (typeof (first) === "object" && first && (typeof (first.TableName) != 'undefined' || typeof (first.Context) != 'undefined')) {
            _request = tableName;
            _options = context;
        }
        else {
            _request = {
                TableName: tableName,
                Context: context,
            };
            _options = webapi_options;
        }
        return this._RemoveStoredFields(_request, _options);
    }
    async _RemoveStoredFieldsAndGetDefaultFields(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("RemoveStoredFieldsAndGetDefaultFields", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_FieldValueInfoArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async RemoveStoredFieldsAndGetDefaultFields(tableName, context, webapi_options) {
        let _request = null;
        let _options = null;
        const first = tableName;
        if (typeof (first) === "object" && first && (typeof (first.TableName) != 'undefined' || typeof (first.Context) != 'undefined')) {
            _request = tableName;
            _options = context;
        }
        else {
            _request = {
                TableName: tableName,
                Context: context,
            };
            _options = webapi_options;
        }
        return this._RemoveStoredFieldsAndGetDefaultFields(_request, _options);
    }
    async _GetJobResultAsJsonFromBinaryObjectId(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetJobResultAsJsonFromBinaryObjectId", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetJobResultAsJsonFromBinaryObjectId(tableName, binaryObjectId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = tableName;
        if (typeof (first) === "object" && first && (typeof (first.TableName) != 'undefined' || typeof (first.BinaryObjectId) != 'undefined')) {
            _request = tableName;
            _options = binaryObjectId;
        }
        else {
            _request = {
                TableName: tableName,
                BinaryObjectId: binaryObjectId,
            };
            _options = webapi_options;
        }
        return this._GetJobResultAsJsonFromBinaryObjectId(_request, _options);
    }
} // class v1BulkUpdateAgentController 
exports.BulkUpdateAgent = BulkUpdateAgent;
//# sourceMappingURL=BulkUpdateAgent.js.map