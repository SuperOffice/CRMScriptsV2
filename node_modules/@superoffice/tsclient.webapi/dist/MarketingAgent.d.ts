import { AxiosRequestConfig } from 'axios';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Agent used for Marketing functions, such as Forms
 */
export interface IMarketingAgent {
    CreateDefaultFormEntity(): Promise<carriers.FormEntity>;
    SaveFormEntity(entity: carriers.FormEntity): Promise<carriers.FormEntity>;
    DeleteFormEntity(FormEntityId: number): Promise<void>;
    CreateDefaultFormSubmissionEntity(): Promise<carriers.FormSubmissionEntity>;
    SaveFormSubmissionEntity(entity: carriers.FormSubmissionEntity): Promise<carriers.FormSubmissionEntity>;
    DeleteFormSubmissionEntity(FormSubmissionEntityId: number): Promise<void>;
    CreateDefaultShipmentMessageBlockEntity(): Promise<carriers.ShipmentMessageBlockEntity>;
    SaveShipmentMessageBlockEntity(entity: carriers.ShipmentMessageBlockEntity): Promise<carriers.ShipmentMessageBlockEntity>;
    DeleteShipmentMessageBlockEntity(ShipmentMessageBlockEntityId: number): Promise<void>;
    CreateDefaultShipmentMessageEntity(): Promise<carriers.ShipmentMessageEntity>;
    SaveShipmentMessageEntity(entity: carriers.ShipmentMessageEntity): Promise<carriers.ShipmentMessageEntity>;
    DeleteShipmentMessageEntity(ShipmentMessageEntityId: number): Promise<void>;
    GetFormEntity(formEntityId: number): Promise<carriers.FormEntity>;
    VerifyGoogleRecaptcha(request: carriers.Marketing_VerifyGoogleRecaptchaRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    VerifyGoogleRecaptcha(token: string, optionalSecretKey: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    GetFormSubmissionEntity(formSubmissionEntityId: number): Promise<carriers.FormSubmissionEntity>;
    CalculateMailingStatistics(request: carriers.Marketing_CalculateMailingStatisticsRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    CalculateMailingStatistics(shipmentId: number, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    GetFormSubmissionsCount(request: carriers.Marketing_GetFormSubmissionsCountRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    GetFormSubmissionsCount(formId: number, status: enums.FormSubmissionStatus, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    GetPreviewMailing(request: carriers.Marketing_GetPreviewMailingRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreviewMailing>;
    GetPreviewMailing(shipmentAddrId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreviewMailing>;
    GetPreviewMailingHeader(request: carriers.Marketing_GetPreviewMailingHeaderRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreviewMailingHeader>;
    GetPreviewMailingHeader(shipmentId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreviewMailingHeader>;
    GetShipmentMessageBlockEntity(shipmentMessageBlockEntityId: number): Promise<carriers.ShipmentMessageBlockEntity>;
    GetUserBlocks(request: carriers.Marketing_GetUserBlocksRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ShipmentMessageBlockEntity[]>;
    GetUserBlocks(associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ShipmentMessageBlockEntity[]>;
    GetShipmentMessageEntity(shipmentMessageEntityId: number): Promise<carriers.ShipmentMessageEntity>;
}
/**
 * Agent used for Marketing functions, such as Forms
 */
export declare class MarketingAgent extends base.WebApiBase implements IMarketingAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * Set default values into a new FormEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultFormEntity(options?: base.WebApiRequestOptions): Promise<carriers.FormEntity>;
    SaveFormEntity(entity: carriers.FormEntity, options?: base.WebApiRequestOptions): Promise<carriers.FormEntity>;
    DeleteFormEntity(FormEntityId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new FormSubmissionEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultFormSubmissionEntity(options?: base.WebApiRequestOptions): Promise<carriers.FormSubmissionEntity>;
    SaveFormSubmissionEntity(entity: carriers.FormSubmissionEntity, options?: base.WebApiRequestOptions): Promise<carriers.FormSubmissionEntity>;
    DeleteFormSubmissionEntity(FormSubmissionEntityId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new ShipmentMessageBlockEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultShipmentMessageBlockEntity(options?: base.WebApiRequestOptions): Promise<carriers.ShipmentMessageBlockEntity>;
    SaveShipmentMessageBlockEntity(entity: carriers.ShipmentMessageBlockEntity, options?: base.WebApiRequestOptions): Promise<carriers.ShipmentMessageBlockEntity>;
    DeleteShipmentMessageBlockEntity(ShipmentMessageBlockEntityId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new ShipmentMessageEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultShipmentMessageEntity(options?: base.WebApiRequestOptions): Promise<carriers.ShipmentMessageEntity>;
    SaveShipmentMessageEntity(entity: carriers.ShipmentMessageEntity, options?: base.WebApiRequestOptions): Promise<carriers.ShipmentMessageEntity>;
    DeleteShipmentMessageEntity(ShipmentMessageEntityId: number, options?: base.WebApiRequestOptions): Promise<void>;
    GetFormEntity(formEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.FormEntity>;
    private _VerifyGoogleRecaptcha;
    /**
     * This method will try to verify a Google recaptcha token. The token is gained from the recaptcha frontend component
     * @param request - Token, OptionalSecretKey
     * @returns Returns true if the recaptcha token verified successfully
     */
    VerifyGoogleRecaptcha(request: carriers.Marketing_VerifyGoogleRecaptchaRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * This method will try to verify a Google recaptcha token. The token is gained from the recaptcha frontend component
     * @param token - The token to be verified
     * @param optionalSecretKey - Use an optional secret key instead of the system wide
     * @returns Returns true if the recaptcha token verified successfully
     */
    VerifyGoogleRecaptcha(token: string, optionalSecretKey: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    GetFormSubmissionEntity(formSubmissionEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.FormSubmissionEntity>;
    private _CalculateMailingStatistics;
    /**
     * Calculate open and click rates for one or more mailings
     * @param request - ShipmentId
     * @returns Number of shipments updated with calculated statistics
     */
    CalculateMailingStatistics(request: carriers.Marketing_CalculateMailingStatisticsRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Calculate open and click rates for one or more mailings
     * @param shipmentId - If 0, calculate rates for all dirty (are_statistics_dirty) shipments
     * @returns Number of shipments updated with calculated statistics
     */
    CalculateMailingStatistics(shipmentId: number, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _GetFormSubmissionsCount;
    /**
     * Get counnt of submissions for given form and status. Count for all forms is returned if negative formId is given
     * @param request - FormId, Status
     * @returns Number of formsubmissions
     */
    GetFormSubmissionsCount(request: carriers.Marketing_GetFormSubmissionsCountRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Get counnt of submissions for given form and status. Count for all forms is returned if negative formId is given
     * @param formId - If 0 or less, return count for all forms
     * @param status - Which status the submissions should have. If Unknown, return count of all statuses
     * @returns Number of formsubmissions
     */
    GetFormSubmissionsCount(formId: number, status: enums.FormSubmissionStatus, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _GetPreviewMailing;
    /**
     * Get a shipment message from its shipment address id
     * @param request - ShipmentAddrId
     * @returns PreviewMailing
     */
    GetPreviewMailing(request: carriers.Marketing_GetPreviewMailingRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreviewMailing>;
    /**
     * Get a shipment message from its shipment address id
     * @param shipmentAddrId - Shipment address id
     * @returns PreviewMailing
     */
    GetPreviewMailing(shipmentAddrId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreviewMailing>;
    private _GetPreviewMailingHeader;
    /**
     * Get a shipment from its shipment id
     * @param request - ShipmentId
     * @returns PreviewMailingHeader
     */
    GetPreviewMailingHeader(request: carriers.Marketing_GetPreviewMailingHeaderRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreviewMailingHeader>;
    /**
     * Get a shipment from its shipment id
     * @param shipmentId - Shipment id
     * @returns PreviewMailingHeader
     */
    GetPreviewMailingHeader(shipmentId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreviewMailingHeader>;
    GetShipmentMessageBlockEntity(shipmentMessageBlockEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.ShipmentMessageBlockEntity>;
    private _GetUserBlocks;
    /**
     * Get the saved user blocks to be used in a shipment/mailing message
     * @param request - AssociateId
     * @returns An array of user blocks
     */
    GetUserBlocks(request: carriers.Marketing_GetUserBlocksRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ShipmentMessageBlockEntity[]>;
    /**
     * Get the saved user blocks to be used in a shipment/mailing message
     * @param associateId - The associate id to get the user blocks. 0 will get all saved blocks
     * @returns An array of user blocks
     */
    GetUserBlocks(associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ShipmentMessageBlockEntity[]>;
    GetShipmentMessageEntity(shipmentMessageEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.ShipmentMessageEntity>;
}
//# sourceMappingURL=MarketingAgent.d.ts.map