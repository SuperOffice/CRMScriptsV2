import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Contact/Person relations
 */
export interface IRelationAgent {
    CreateDefaultContactRelationEntity(): Promise<carriers.ContactRelationEntity>;
    GetContactRelationEntity(contactRelationEntityId: number): Promise<carriers.ContactRelationEntity>;
    SaveContactRelation(request: carriers.Relation_SaveContactRelationRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactRelationEntity>;
    SaveContactRelation(contactRelationEntity: carriers.ContactRelationEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactRelationEntity>;
    DeleteContactRelation(request: carriers.Relation_DeleteContactRelationRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteContactRelation(contactRelationEntityId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
}
/**
 * Contact/Person relations
 */
export declare class RelationAgent extends base.WebApiBase implements IRelationAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * Set default values into a new ContactRelationEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultContactRelationEntity(options?: base.WebApiRequestOptions): Promise<carriers.ContactRelationEntity>;
    GetContactRelationEntity(contactRelationEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.ContactRelationEntity>;
    private _SaveContactRelation;
    /**
     * Creates a new or updates an existing contact relation.
     * @param request - ContactRelationEntity
     * @returns Saved relation
     */
    SaveContactRelation(request: carriers.Relation_SaveContactRelationRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactRelationEntity>;
    /**
     * Creates a new or updates an existing contact relation.
     * @param contactRelationEntity - Relation to save
     * @returns Saved relation
     */
    SaveContactRelation(contactRelationEntity: carriers.ContactRelationEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactRelationEntity>;
    private _DeleteContactRelation;
    /**
     * Deletes the spesified contact relation.
     * @param request - ContactRelationEntityId
     * @returns
     */
    DeleteContactRelation(request: carriers.Relation_DeleteContactRelationRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Deletes the spesified contact relation.
     * @param contactRelationEntityId - Relation to delete
     * @returns
     */
    DeleteContactRelation(contactRelationEntityId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
}
//# sourceMappingURL=RelationAgent.d.ts.map