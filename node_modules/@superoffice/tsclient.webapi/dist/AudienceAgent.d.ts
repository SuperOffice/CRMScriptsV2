import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Services specific to the Audience client
 */
export interface IAudienceAgent {
    CreateDefaultAudienceLayoutEntity(): Promise<carriers.AudienceLayoutEntity>;
    SaveAudienceLayoutEntity(entity: carriers.AudienceLayoutEntity): Promise<carriers.AudienceLayoutEntity>;
    DeleteAudienceLayoutEntity(AudienceLayoutEntityId: number): Promise<void>;
    SaveConfigParameter(request: carriers.Audience_SaveConfigParameterRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceConfigParameter>;
    SaveConfigParameter(layoutName: string, configParameter: carriers.AudienceConfigParameter, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceConfigParameter>;
    GetConfigParameterValue(request: carriers.Audience_GetConfigParameterValueRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetConfigParameterValue(layoutName: string, parameterName: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetConfigParameter(request: carriers.Audience_GetConfigParameterRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceConfigParameter>;
    GetConfigParameter(layoutName: string, parameterName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceConfigParameter>;
    DeleteConfigParameter(request: carriers.Audience_DeleteConfigParameterRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteConfigParameter(layoutName: string, parameterName: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetMyConfigParameter(request: carriers.Audience_GetMyConfigParameterRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceConfigParameter>;
    GetMyConfigParameter(parameterName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceConfigParameter>;
    GetMyConfigParameterValue(request: carriers.Audience_GetMyConfigParameterValueRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetMyConfigParameterValue(parameterName: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetConfigParameterValueOnPerson(request: carriers.Audience_GetConfigParameterValueOnPersonRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetConfigParameterValueOnPerson(parameterName: string, personId: number, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetConfigParameterOnPerson(request: carriers.Audience_GetConfigParameterOnPersonRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceConfigParameter>;
    GetConfigParameterOnPerson(parameterName: string, personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceConfigParameter>;
    GetConfigParametersByLayoutName(request: carriers.Audience_GetConfigParametersByLayoutNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceConfigParameter[]>;
    GetConfigParametersByLayoutName(layoutName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceConfigParameter[]>;
    GetMyConfigParameters(webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceConfigParameter[]>;
    GetConfigParametersOnPerson(request: carriers.Audience_GetConfigParametersOnPersonRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceConfigParameter[]>;
    GetConfigParametersOnPerson(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceConfigParameter[]>;
    GetAudienceLayoutEntity(audienceLayoutEntityId: number): Promise<carriers.AudienceLayoutEntity>;
    GetAudienceLayoutByName(request: carriers.Audience_GetAudienceLayoutByNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceLayoutEntity>;
    GetAudienceLayoutByName(layoutName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceLayoutEntity>;
    GetMyAudienceLayout(webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceLayoutEntity>;
    GetAudienceLayoutOnPerson(request: carriers.Audience_GetAudienceLayoutOnPersonRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceLayoutEntity>;
    GetAudienceLayoutOnPerson(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceLayoutEntity>;
    GetDefaultProjectImage(request: carriers.Audience_GetDefaultProjectImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetDefaultProjectImage(layoutName: string, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    SetDefaultProjectImage(request: carriers.Audience_SetDefaultProjectImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetDefaultProjectImage(layoutName: string, image: ArrayBuffer | string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetDefaultPersonImage(request: carriers.Audience_SetDefaultPersonImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetDefaultPersonImage(layoutName: string, image: ArrayBuffer | string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetDefaultPersonImage(request: carriers.Audience_GetDefaultPersonImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetDefaultPersonImage(layoutName: string, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    SetDefaultCountryFlag(request: carriers.Audience_SetDefaultCountryFlagRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetDefaultCountryFlag(layoutName: string, image: ArrayBuffer | string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetDefaultCountryFlag(request: carriers.Audience_GetDefaultCountryFlagRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetDefaultCountryFlag(layoutName: string, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetLogoImage(request: carriers.Audience_GetLogoImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetLogoImage(layoutName: string, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    SetLogoImage(request: carriers.Audience_SetLogoImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetLogoImage(layoutName: string, image: ArrayBuffer | string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
}
/**
 * Services specific to the Audience client
 */
export declare class AudienceAgent extends base.WebApiBase implements IAudienceAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * Set default values into a new AudienceLayoutEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultAudienceLayoutEntity(options?: base.WebApiRequestOptions): Promise<carriers.AudienceLayoutEntity>;
    SaveAudienceLayoutEntity(entity: carriers.AudienceLayoutEntity, options?: base.WebApiRequestOptions): Promise<carriers.AudienceLayoutEntity>;
    DeleteAudienceLayoutEntity(AudienceLayoutEntityId: number, options?: base.WebApiRequestOptions): Promise<void>;
    private _SaveConfigParameter;
    /**
     * Saves an Audience configuration parameter belonging to a Audience layout
     * @param request - LayoutName, ConfigParameter
     * @returns The new or updated configuration parameter
     */
    SaveConfigParameter(request: carriers.Audience_SaveConfigParameterRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceConfigParameter>;
    /**
     * Saves an Audience configuration parameter belonging to a Audience layout
     * @param layoutName - Name of the Audience layout instance
     * @param configParameter - The Audience configuration parameter to save.
     * @returns The new or updated configuration parameter
     */
    SaveConfigParameter(layoutName: string, configParameter: carriers.AudienceConfigParameter, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceConfigParameter>;
    private _GetConfigParameterValue;
    /**
     * Gets the string value of an Audience configuration parameter belonging to a given Audience layout with the specified configuration parameter name
     * @param request - LayoutName, ParameterName
     * @returns The string value of the Audience configuration parameter.
     */
    GetConfigParameterValue(request: carriers.Audience_GetConfigParameterValueRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Gets the string value of an Audience configuration parameter belonging to a given Audience layout with the specified configuration parameter name
     * @param layoutName - Name of the Audience layout instance
     * @param parameterName - The name of the Audience configuration parameter
     * @returns The string value of the Audience configuration parameter.
     */
    GetConfigParameterValue(layoutName: string, parameterName: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetConfigParameter;
    /**
     * Gets an Audience configuration parameter belonging to a given Audience layout with the specified configuration parameter name
     * @param request - LayoutName, ParameterName
     * @returns The Audience configuration parameter.
     */
    GetConfigParameter(request: carriers.Audience_GetConfigParameterRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceConfigParameter>;
    /**
     * Gets an Audience configuration parameter belonging to a given Audience layout with the specified configuration parameter name
     * @param layoutName - Name of the Audience layout instance
     * @param parameterName - The name of the Audience configuration parameter
     * @returns The Audience configuration parameter.
     */
    GetConfigParameter(layoutName: string, parameterName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceConfigParameter>;
    private _DeleteConfigParameter;
    /**
     * Deletes an Audience configuration parameter belonging to a Audience layout
     * @param request - LayoutName, ParameterName
     * @returns
     */
    DeleteConfigParameter(request: carriers.Audience_DeleteConfigParameterRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Deletes an Audience configuration parameter belonging to a Audience layout
     * @param layoutName - Name of the Audience layout instance
     * @param parameterName - The name of the Audience configuration parameter
     * @returns
     */
    DeleteConfigParameter(layoutName: string, parameterName: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetMyConfigParameter;
    /**
     * Gets an Audience configuration parameter belonging to the currently logged on user with the specified configuration parameter name.
     * @param request - ParameterName
     * @returns The Audience configuration parameter.
     */
    GetMyConfigParameter(request: carriers.Audience_GetMyConfigParameterRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceConfigParameter>;
    /**
     * Gets an Audience configuration parameter belonging to the currently logged on user with the specified configuration parameter name.
     * @param parameterName - The name of the Audience configuration parameter
     * @returns The Audience configuration parameter.
     */
    GetMyConfigParameter(parameterName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceConfigParameter>;
    private _GetMyConfigParameterValue;
    /**
     * Gets the string value of an Audience configuration parameter belonging to the currently logged on user with the specified configuration parameter name.
     * @param request - ParameterName
     * @returns The string value of the Audience configuration parameter.
     */
    GetMyConfigParameterValue(request: carriers.Audience_GetMyConfigParameterValueRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Gets the string value of an Audience configuration parameter belonging to the currently logged on user with the specified configuration parameter name.
     * @param parameterName - The name of the Audience configuration parameter
     * @returns The string value of the Audience configuration parameter.
     */
    GetMyConfigParameterValue(parameterName: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetConfigParameterValueOnPerson;
    /**
     * Gets the string value of an Audience configuration parameter with the specified configuration parameter name on the person specified
     * @param request - ParameterName, PersonId
     * @returns The string value of the Audience configuration parameter.
     */
    GetConfigParameterValueOnPerson(request: carriers.Audience_GetConfigParameterValueOnPersonRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Gets the string value of an Audience configuration parameter with the specified configuration parameter name on the person specified
     * @param parameterName - The name of the Audience configuration parameter
     * @param personId - Id of the person the parameter belongs to
     * @returns The string value of the Audience configuration parameter.
     */
    GetConfigParameterValueOnPerson(parameterName: string, personId: number, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetConfigParameterOnPerson;
    /**
     * Gets an Audience configuration parameter with the specified configuration parameter name on the person specified
     * @param request - ParameterName, PersonId
     * @returns The Audience configuration parameter.
     */
    GetConfigParameterOnPerson(request: carriers.Audience_GetConfigParameterOnPersonRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceConfigParameter>;
    /**
     * Gets an Audience configuration parameter with the specified configuration parameter name on the person specified
     * @param parameterName - The name of the Audience configuration parameter
     * @param personId - Id of the person the parameter belongs to
     * @returns The Audience configuration parameter.
     */
    GetConfigParameterOnPerson(parameterName: string, personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceConfigParameter>;
    private _GetConfigParametersByLayoutName;
    /**
     * Gets the Audience configuration parameters belonging to a given Audience layout.
     * @param request - LayoutName
     * @returns Array of Audience configuration parameters.
     */
    GetConfigParametersByLayoutName(request: carriers.Audience_GetConfigParametersByLayoutNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceConfigParameter[]>;
    /**
     * Gets the Audience configuration parameters belonging to a given Audience layout.
     * @param layoutName - Name of the Audience layout instance
     * @returns Array of Audience configuration parameters.
     */
    GetConfigParametersByLayoutName(layoutName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceConfigParameter[]>;
    private _GetMyConfigParameters;
    /**
     * Gets the Audience configuration parameters belonging to the currently logged on user.
     * @returns Array of Audience configuration parameters.
     */
    GetMyConfigParameters(webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceConfigParameter[]>;
    private _GetConfigParametersOnPerson;
    /**
     * Gets the Audience configuration parameters belonging to the person specified
     * @param request - PersonId
     * @returns Array of Audience configuration parameters.
     */
    GetConfigParametersOnPerson(request: carriers.Audience_GetConfigParametersOnPersonRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceConfigParameter[]>;
    /**
     * Gets the Audience configuration parameters belonging to the person specified
     * @param personId - Id of the person the parameter belongs to
     * @returns Array of Audience configuration parameters.
     */
    GetConfigParametersOnPerson(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceConfigParameter[]>;
    GetAudienceLayoutEntity(audienceLayoutEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.AudienceLayoutEntity>;
    private _GetAudienceLayoutByName;
    /**
     * Gets an Audience layout by it&apos;s instance name
     * @param request - LayoutName
     * @returns Audience layout entity
     */
    GetAudienceLayoutByName(request: carriers.Audience_GetAudienceLayoutByNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceLayoutEntity>;
    /**
     * Gets an Audience layout by it&apos;s instance name
     * @param layoutName - Name of the Audience layout instance
     * @returns Audience layout entity
     */
    GetAudienceLayoutByName(layoutName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceLayoutEntity>;
    private _GetMyAudienceLayout;
    /**
     * Gets the Audience layout belonging to the currently logged on user.
     * @returns Audience layout entity
     */
    GetMyAudienceLayout(webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceLayoutEntity>;
    private _GetAudienceLayoutOnPerson;
    /**
     * Gets the Audience layout belonging to the person specified.
     * @param request - PersonId
     * @returns Audience layout entity
     */
    GetAudienceLayoutOnPerson(request: carriers.Audience_GetAudienceLayoutOnPersonRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceLayoutEntity>;
    /**
     * Gets the Audience layout belonging to the person specified.
     * @param personId - The person id
     * @returns Audience layout entity
     */
    GetAudienceLayoutOnPerson(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AudienceLayoutEntity>;
    private _GetDefaultProjectImage;
    /**
     * Returns the default project or event image that is displayed in Audience when no project/event image is found. The image belongs to a specific Audience layout instance.
     * @param request - LayoutName
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)
     */
    GetDefaultProjectImage(request: carriers.Audience_GetDefaultProjectImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    /**
     * Returns the default project or event image that is displayed in Audience when no project/event image is found. The image belongs to a specific Audience layout instance.
     * @param layoutName - Name of the Audience layout instance
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)
     */
    GetDefaultProjectImage(layoutName: string, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    private _SetDefaultProjectImage;
    /**
     * Stores the default project or event image that is displayed in Audience when no project/event image is found. The image is set on a specific Audience layout instance.
     * @param request - LayoutName, Image
     * @returns
     */
    SetDefaultProjectImage(request: carriers.Audience_SetDefaultProjectImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Stores the default project or event image that is displayed in Audience when no project/event image is found. The image is set on a specific Audience layout instance.
     * @param layoutName - Name of the Audience layout instance
     * @param image - The default project/event image to be stored for this Audience layout instance (System.Drawing.Image)
     * @returns
     */
    SetDefaultProjectImage(layoutName: string, image: ArrayBuffer | string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SetDefaultPersonImage;
    /**
     * Stores the default person (sales rep) image that is displayed in Audience when no person image is found. The image is set on a specific Audience layout instance.
     * @param request - LayoutName, Image
     * @returns
     */
    SetDefaultPersonImage(request: carriers.Audience_SetDefaultPersonImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Stores the default person (sales rep) image that is displayed in Audience when no person image is found. The image is set on a specific Audience layout instance.
     * @param layoutName - Name of the Audience layout instance
     * @param image - The default project/event image to be stored for this Audience layout instance (System.Drawing.Image)
     * @returns
     */
    SetDefaultPersonImage(layoutName: string, image: ArrayBuffer | string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetDefaultPersonImage;
    /**
     * Returns the default person (sales rep) image that is displayed in Audience when no person image is found. The image belongs to a specific Audience layout instance.
     * @param request - LayoutName
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)
     */
    GetDefaultPersonImage(request: carriers.Audience_GetDefaultPersonImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    /**
     * Returns the default person (sales rep) image that is displayed in Audience when no person image is found. The image belongs to a specific Audience layout instance.
     * @param layoutName - Name of the Audience layout instance
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)
     */
    GetDefaultPersonImage(layoutName: string, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    private _SetDefaultCountryFlag;
    /**
     * Stores the default country flag image that is displayed in Audience when no person image is found. The image is set on a specific Audience layout instance.
     * @param request - LayoutName, Image
     * @returns
     */
    SetDefaultCountryFlag(request: carriers.Audience_SetDefaultCountryFlagRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Stores the default country flag image that is displayed in Audience when no person image is found. The image is set on a specific Audience layout instance.
     * @param layoutName - Name of the Audience layout instance
     * @param image - The default country image to be stored for this Audience layout instance (System.Drawing.Image)
     * @returns
     */
    SetDefaultCountryFlag(layoutName: string, image: ArrayBuffer | string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetDefaultCountryFlag;
    /**
     * Returns the default country flag image that is displayed in Audience when no person image is found. The image belongs to a specific Audience layout instance.
     * @param request - LayoutName
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)
     */
    GetDefaultCountryFlag(request: carriers.Audience_GetDefaultCountryFlagRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    /**
     * Returns the default country flag image that is displayed in Audience when no person image is found. The image belongs to a specific Audience layout instance.
     * @param layoutName - Name of the Audience layout instance
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)
     */
    GetDefaultCountryFlag(layoutName: string, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    private _GetLogoImage;
    /**
     *
     * @param request - LayoutName
     * @returns
     */
    GetLogoImage(request: carriers.Audience_GetLogoImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    /**
     *
     * @param layoutName -
     * @returns
     */
    GetLogoImage(layoutName: string, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    private _SetLogoImage;
    /**
     *
     * @param request - LayoutName, Image
     * @returns
     */
    SetLogoImage(request: carriers.Audience_SetLogoImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     *
     * @param layoutName -
     * @param image -
     * @returns
     */
    SetLogoImage(layoutName: string, image: ArrayBuffer | string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
}
//# sourceMappingURL=AudienceAgent.d.ts.map