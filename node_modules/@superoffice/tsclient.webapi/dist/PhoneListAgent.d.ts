import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Collection of all services for searching for person or contact (company) phone numbers.
 */
export interface IPhoneListAgent {
    Search(request: carriers.PhoneList_SearchRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PhoneListItem[]>;
    Search(searchString: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PhoneListItem[]>;
    SearchWithPreferences(request: carriers.PhoneList_SearchWithPreferencesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PhoneListItem[]>;
    SearchWithPreferences(searchString: string, preferences: carriers.PhoneListPreferences, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PhoneListItem[]>;
    GetDepartmentPhones(request: carriers.PhoneList_GetDepartmentPhonesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PhoneListItem[]>;
    GetDepartmentPhones(departmentId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PhoneListItem[]>;
    GetFavoritesPhones(webapi_options?: base.WebApiRequestOptions): Promise<carriers.PhoneListItem[]>;
    GetContactPhones(request: carriers.PhoneList_GetContactPhonesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PhoneListItem[]>;
    GetContactPhones(contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PhoneListItem[]>;
    AddToFavorites(request: carriers.PhoneList_AddToFavoritesRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    AddToFavorites(contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    GetPreferences(webapi_options?: base.WebApiRequestOptions): Promise<carriers.PhoneListPreferences>;
    SetPreferences(request: carriers.PhoneList_SetPreferencesRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetPreferences(preferences: carriers.PhoneListPreferences, webapi_options?: base.WebApiRequestOptions): Promise<void>;
}
/**
 * Collection of all services for searching for person or contact (company) phone numbers.
 */
export declare class PhoneListAgent extends base.WebApiBase implements IPhoneListAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    private _Search;
    /**
     * Searching the phone list. Using default search preferences or the preferences already set by the PhoneListPreferences Service
     * @param request - SearchString
     * @returns The resulting phone list
     */
    Search(request: carriers.PhoneList_SearchRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PhoneListItem[]>;
    /**
     * Searching the phone list. Using default search preferences or the preferences already set by the PhoneListPreferences Service
     * @param searchString - The search string
     * @returns The resulting phone list
     */
    Search(searchString: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PhoneListItem[]>;
    private _SearchWithPreferences;
    /**
     * Searching the phone list. Search is based on the supplied preferences.
     * @param request - SearchString, Preferences
     * @returns The resulting phone list.
     */
    SearchWithPreferences(request: carriers.PhoneList_SearchWithPreferencesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PhoneListItem[]>;
    /**
     * Searching the phone list. Search is based on the supplied preferences.
     * @param searchString - The search string.
     * @param preferences - The search preferences
     * @returns The resulting phone list.
     */
    SearchWithPreferences(searchString: string, preferences: carriers.PhoneListPreferences, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PhoneListItem[]>;
    private _GetDepartmentPhones;
    /**
     * Returns an array of phone list items with the in-parameter as restriction. The in-parameter must be a valid department id (UserGroupId).
     * @param request - DepartmentId
     * @returns The department phone list
     */
    GetDepartmentPhones(request: carriers.PhoneList_GetDepartmentPhonesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PhoneListItem[]>;
    /**
     * Returns an array of phone list items with the in-parameter as restriction. The in-parameter must be a valid department id (UserGroupId).
     * @param departmentId - The department to get the phone list for
     * @returns The department phone list
     */
    GetDepartmentPhones(departmentId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PhoneListItem[]>;
    private _GetFavoritesPhones;
    /**
     * Returns an array of phone list items with the Contacts in the users favorites dropdown list.
     * @returns The favorite contact phone list
     */
    GetFavoritesPhones(webapi_options?: base.WebApiRequestOptions): Promise<carriers.PhoneListItem[]>;
    private _GetContactPhones;
    /**
     * Returns an array of phone list items for all the persons belonging to a contact (company). The in-parameter must be a valid contact-id.
     * @param request - ContactId
     * @returns The contacts phone list.
     */
    GetContactPhones(request: carriers.PhoneList_GetContactPhonesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PhoneListItem[]>;
    /**
     * Returns an array of phone list items for all the persons belonging to a contact (company). The in-parameter must be a valid contact-id.
     * @param contactId - The contact id
     * @returns The contacts phone list.
     */
    GetContactPhones(contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PhoneListItem[]>;
    private _AddToFavorites;
    /**
     * Adds a new contact to the history/favorites. Returns the rank of the new history item. If the contact already existed in the history, it isn&apos;t added but the rank is updated.
     * @param request - ContactId
     * @returns The rank of the history item
     */
    AddToFavorites(request: carriers.PhoneList_AddToFavoritesRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Adds a new contact to the history/favorites. Returns the rank of the new history item. If the contact already existed in the history, it isn&apos;t added but the rank is updated.
     * @param contactId - The contact id
     * @returns The rank of the history item
     */
    AddToFavorites(contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _GetPreferences;
    /**
     * Getting Phone List Preferences from the CRM 5 user preferences
     * @returns The Phone List Preferences
     */
    GetPreferences(webapi_options?: base.WebApiRequestOptions): Promise<carriers.PhoneListPreferences>;
    private _SetPreferences;
    /**
     * Setting Phone List Preferences to the CRM 5 user preferences
     * @param request - Preferences
     * @returns
     */
    SetPreferences(request: carriers.PhoneList_SetPreferencesRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Setting Phone List Preferences to the CRM 5 user preferences
     * @param preferences - The preference that is set as user preferences
     * @returns
     */
    SetPreferences(preferences: carriers.PhoneListPreferences, webapi_options?: base.WebApiRequestOptions): Promise<void>;
}
//# sourceMappingURL=PhoneListAgent.d.ts.map