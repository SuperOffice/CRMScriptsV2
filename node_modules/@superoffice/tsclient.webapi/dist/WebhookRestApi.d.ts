import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Webhook definitions. Webhooks broadcast events from NetServer to remote servers.
 * Webhook definitions - webhooks signal other systems about events inside NetServer
 *
 * `api/v1/Webhook`
 *
 * **Online Restricted:** This agent is not available in Online by default. Access must be requested specifically when app is registered.
 */
export interface IWebhookRestApi {
    GetDefault(options?: base.WebApiGetRequestOptions): Promise<carriers.Webhook>;
    Post(entity: carriers.Webhook, options?: base.WebApiPutRequestOptions): Promise<carriers.Webhook>;
    PutById(id: number, entity: carriers.Webhook, options?: base.WebApiPutRequestOptions): Promise<carriers.Webhook>;
    PatchById(id: number, entity: base.WebApiPatchOperation[] | carriers.Webhook, options?: base.WebApiPutRequestOptions): Promise<carriers.Webhook>;
    DeleteById(WebhookId: number, options?: base.WebApiPutRequestOptions): Promise<void>;
    GetById(WebhookId: number, options?: base.WebApiGetRequestOptions): Promise<carriers.Webhook>;
}
/**
 * Webhook definitions. Webhooks broadcast events from NetServer to remote servers.
 * Webhook definitions - webhooks signal other systems about events inside NetServer
 *
 * `api/v1/Webhook`
 */
export declare class WebhookRestApi extends base.WebApiBase implements IWebhookRestApi {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * `GET /api/v1/Webhook/default`
     * Set default values into a new Webhook.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    GetDefault(options?: base.WebApiGetRequestOptions): Promise<carriers.Webhook>;
    Post(newWebhook: carriers.Webhook, options?: base.WebApiPutRequestOptions): Promise<carriers.Webhook>;
    PutById(id: number, webhook: carriers.Webhook, options?: base.WebApiPutRequestOptions): Promise<carriers.Webhook>;
    PatchById(id: number, webhook: base.WebApiPatchOperation[] | carriers.Webhook, options?: base.WebApiPutRequestOptions): Promise<carriers.Webhook>;
    DeleteById(webhookId: number, options?: base.WebApiPutRequestOptions): Promise<void>;
    GetById(webhookId: number, options?: base.WebApiGetRequestOptions): Promise<carriers.Webhook>;
}
//# sourceMappingURL=WebhookRestApi.d.ts.map