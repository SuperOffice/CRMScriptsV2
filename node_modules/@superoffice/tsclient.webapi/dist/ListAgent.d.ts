import { AxiosRequestConfig } from 'axios';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Collection of all services that works with Lists. These are typical lists of data shown in dropdown list, checkbox lists, etc.
 */
export interface IListAgent {
    CreateDefaultAmountClassEntity(): Promise<carriers.AmountClassEntity>;
    SaveAmountClassEntity(entity: carriers.AmountClassEntity): Promise<carriers.AmountClassEntity>;
    CreateDefaultTaskMenu(): Promise<carriers.TaskMenu>;
    SaveTaskMenu(entity: carriers.TaskMenu): Promise<carriers.TaskMenu>;
    DeleteTaskMenu(TaskMenuId: number): Promise<void>;
    CreateDefaultCurrencyEntity(): Promise<carriers.CurrencyEntity>;
    SaveCurrencyEntity(entity: carriers.CurrencyEntity): Promise<carriers.CurrencyEntity>;
    CreateDefaultDocumentTemplateEntity(): Promise<carriers.DocumentTemplateEntity>;
    SaveDocumentTemplateEntity(entity: carriers.DocumentTemplateEntity): Promise<carriers.DocumentTemplateEntity>;
    CreateDefaultExtAppEntity(): Promise<carriers.ExtAppEntity>;
    SaveExtAppEntity(entity: carriers.ExtAppEntity): Promise<carriers.ExtAppEntity>;
    CreateDefaultHeadingEntity(): Promise<carriers.HeadingEntity>;
    SaveHeadingEntity(entity: carriers.HeadingEntity): Promise<carriers.HeadingEntity>;
    CreateDefaultHierarchyEntity(): Promise<carriers.HierarchyEntity>;
    SaveHierarchyEntity(entity: carriers.HierarchyEntity): Promise<carriers.HierarchyEntity>;
    DeleteHierarchyEntity(HierarchyEntityId: number): Promise<void>;
    CreateDefaultListEntity(): Promise<carriers.ListEntity>;
    SaveListEntity(entity: carriers.ListEntity): Promise<carriers.ListEntity>;
    DeleteListEntity(ListEntityId: number): Promise<void>;
    CreateDefaultListItemEntity(): Promise<carriers.ListItemEntity>;
    CreateDefaultProjectTypeEntity(): Promise<carriers.ProjectTypeEntity>;
    SaveProjectTypeEntity(entity: carriers.ProjectTypeEntity): Promise<carriers.ProjectTypeEntity>;
    CreateDefaultRelationDefinitionEntity(): Promise<carriers.RelationDefinitionEntity>;
    SaveRelationDefinitionEntity(entity: carriers.RelationDefinitionEntity): Promise<carriers.RelationDefinitionEntity>;
    CreateDefaultResourceEntity(): Promise<carriers.ResourceEntity>;
    SaveResourceEntity(entity: carriers.ResourceEntity): Promise<carriers.ResourceEntity>;
    DeleteResourceEntity(ResourceEntityId: number): Promise<void>;
    CreateDefaultSaleStageEntity(): Promise<carriers.SaleStageEntity>;
    SaveSaleStageEntity(entity: carriers.SaleStageEntity): Promise<carriers.SaleStageEntity>;
    CreateDefaultSaleTypeEntity(): Promise<carriers.SaleTypeEntity>;
    SaveSaleTypeEntity(entity: carriers.SaleTypeEntity): Promise<carriers.SaleTypeEntity>;
    CreateDefaultTicketCategoryEntity(): Promise<carriers.TicketCategoryEntity>;
    SaveTicketCategoryEntity(entity: carriers.TicketCategoryEntity): Promise<carriers.TicketCategoryEntity>;
    DeleteTicketCategoryEntity(TicketCategoryEntityId: number): Promise<void>;
    CreateDefaultTicketPriorityEntity(): Promise<carriers.TicketPriorityEntity>;
    SaveTicketPriorityEntity(entity: carriers.TicketPriorityEntity): Promise<carriers.TicketPriorityEntity>;
    DeleteTicketPriorityEntity(TicketPriorityEntityId: number): Promise<void>;
    CreateDefaultTicketStatusEntity(): Promise<carriers.TicketStatusEntity>;
    SaveTicketStatusEntity(entity: carriers.TicketStatusEntity): Promise<carriers.TicketStatusEntity>;
    DeleteTicketStatusEntity(TicketStatusEntityId: number): Promise<void>;
    CreateDefaultWebPanelEntity(): Promise<carriers.WebPanelEntity>;
    SaveWebPanelEntity(entity: carriers.WebPanelEntity): Promise<carriers.WebPanelEntity>;
    GetAmountClassEntity(amountClassEntityId: number): Promise<carriers.AmountClassEntity>;
    GetBusiness(businessId: number): Promise<carriers.Business>;
    GetBusinessList(businessIds: number[]): Promise<carriers.Business[]>;
    GetBusinesses(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Business[]>;
    GetCategory(categoryId: number): Promise<carriers.Category>;
    GetCategoryList(categoryIds: number[]): Promise<carriers.Category[]>;
    GetCategories(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Category[]>;
    GetCompetitor(competitorId: number): Promise<carriers.Competitor>;
    GetCompetitorList(competitorIds: number[]): Promise<carriers.Competitor[]>;
    GetCompetitors(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Competitor[]>;
    GetTaskMenu(taskMenuId: number): Promise<carriers.TaskMenu>;
    GetAppTaskMenus(webapi_options?: base.WebApiRequestOptions): Promise<carriers.TaskMenu[]>;
    DeleteAppTaskMenus(webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetTaskMenuByProgId(request: carriers.List_GetTaskMenuByProgIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TaskMenu>;
    GetTaskMenuByProgId(progId: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TaskMenu>;
    GetConsentPurpose(consentPurposeId: number): Promise<carriers.ConsentPurpose>;
    SaveConsentPurpose(request: carriers.List_SaveConsentPurposeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ConsentPurpose>;
    SaveConsentPurpose(consentPurpose: carriers.ConsentPurpose, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ConsentPurpose>;
    SetEmarketingStrictMode(request: carriers.List_SetEmarketingStrictModeRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetEmarketingStrictMode(enable: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetEmarketingStrictMode(webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    GetConsentPurposeList(consentPurposeIds: number[]): Promise<carriers.ConsentPurpose[]>;
    GetConsentPurposes(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ConsentPurpose[]>;
    GetConsentSource(consentSourceId: number): Promise<carriers.ConsentSource>;
    SaveConsentSource(request: carriers.List_SaveConsentSourceRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ConsentSource>;
    SaveConsentSource(consentSource: carriers.ConsentSource, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ConsentSource>;
    GetConsentSourceList(consentSourceIds: number[]): Promise<carriers.ConsentSource[]>;
    GetConsentSources(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ConsentSource[]>;
    GetCountry(countryId: number): Promise<carriers.Country>;
    SaveCountry(request: carriers.List_SaveCountryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Country>;
    SaveCountry(country: carriers.Country, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Country>;
    CreateDefaultCountry(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Country>;
    GetCountryList(countryIds: number[]): Promise<carriers.Country[]>;
    GetCountries(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Country[]>;
    GetAllCountries(request: carriers.List_GetAllCountriesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Country[]>;
    GetAllCountries(includeDeleted: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Country[]>;
    GetCredited(creditedId: number): Promise<carriers.Credited>;
    GetCreditedList(creditedIds: number[]): Promise<carriers.Credited[]>;
    GetCrediteds(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Credited[]>;
    GetCurrency(currencyId: number): Promise<carriers.Currency>;
    GetOurCurrency(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Currency>;
    ChangeCurrency(request: carriers.List_ChangeCurrencyRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    ChangeCurrency(amount: number, fromCurrency: string, toCurrency: string, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    GetOwnerCompanysCurrency(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Currency>;
    GetCurrencyEntity(currencyEntityId: number): Promise<carriers.CurrencyEntity>;
    GetBaseCurrency(webapi_options?: base.WebApiRequestOptions): Promise<carriers.CurrencyEntity>;
    GetCurrencyList(currencyIds: number[]): Promise<carriers.Currency[]>;
    GetCurrencies(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Currency[]>;
    GetAllCurrencies(request: carriers.List_GetAllCurrenciesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CurrencyEntity[]>;
    GetAllCurrencies(includeDeleted: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CurrencyEntity[]>;
    GetCustomerLanguage(customerLanguageId: number): Promise<carriers.CustomerLanguage>;
    GetCustomerLanguageList(customerLanguageIds: number[]): Promise<carriers.CustomerLanguage[]>;
    GetCustomerLanguages(webapi_options?: base.WebApiRequestOptions): Promise<carriers.CustomerLanguage[]>;
    GetDeliveryTerm(deliveryTermId: number): Promise<carriers.DeliveryTerm>;
    GetDeliveryTerms(webapi_options?: base.WebApiRequestOptions): Promise<carriers.DeliveryTerm[]>;
    GetDeliveryType(deliveryTypeId: number): Promise<carriers.DeliveryType>;
    GetDeliveryTypes(webapi_options?: base.WebApiRequestOptions): Promise<carriers.DeliveryType[]>;
    GetDepartment(departmentId: number): Promise<carriers.Department>;
    GetDepartmentList(departmentIds: number[]): Promise<carriers.Department[]>;
    GetDepartments(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Department[]>;
    GetDocumentTemplate(documentTemplateId: number): Promise<carriers.DocumentTemplate>;
    GetDocumentTemplateEntity(documentTemplateEntityId: number): Promise<carriers.DocumentTemplateEntity>;
    SetDocumentTemplateStream(request: carriers.List_SetDocumentTemplateStreamRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DocumentTemplateEntity>;
    SetDocumentTemplateStream(documentTemplateEntity: carriers.DocumentTemplateEntity, stream: ArrayBuffer | string, languageCode: string, pluginId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DocumentTemplateEntity>;
    GetDocumentTemplateUsedInSalesStage(request: carriers.List_GetDocumentTemplateUsedInSalesStageRequest, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    GetDocumentTemplateUsedInSalesStage(documentTemplateId: number, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    GetDocumentTemplateUsedInProjectStage(request: carriers.List_GetDocumentTemplateUsedInProjectStageRequest, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    GetDocumentTemplateUsedInProjectStage(documentTemplateId: number, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    GetDocumentTemplateUrl(request: carriers.List_GetDocumentTemplateUrlRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetDocumentTemplateUrl(documentTemplateId: number, writableUrl: boolean, languageCode: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetDocumentTemplateProperties(request: carriers.List_GetDocumentTemplatePropertiesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    GetDocumentTemplateProperties(documentTemplateId: number, requestedProperties: string[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    GetDocumentTemplateLanguages(request: carriers.List_GetDocumentTemplateLanguagesRequest, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    GetDocumentTemplateLanguages(documentTemplateId: number, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    CreateDefaultDocumentTemplateLanguage(request: carriers.List_CreateDefaultDocumentTemplateLanguageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    CreateDefaultDocumentTemplateLanguage(documentTemplateId: number, languageCode: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteDocumentTemplateLanguage(request: carriers.List_DeleteDocumentTemplateLanguageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteDocumentTemplateLanguage(documentTemplateId: number, languageCode: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetDocumentTemplateExtension(request: carriers.List_GetDocumentTemplateExtensionRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetDocumentTemplateExtension(documentTemplateId: number, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    SetDocumentTemplateFromDocumentTemplate(request: carriers.List_SetDocumentTemplateFromDocumentTemplateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DocumentTemplateEntity>;
    SetDocumentTemplateFromDocumentTemplate(sourceDocumentTemplateId: number, documentTemplateEntity: carriers.DocumentTemplateEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DocumentTemplateEntity>;
    GetDocumentTemplateStreamFromId(request: carriers.List_GetDocumentTemplateStreamFromIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetDocumentTemplateStreamFromId(documentTemplateId: number, languageCode: string, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    SaveDocumentTemplateStream(request: carriers.List_SaveDocumentTemplateStreamRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TemplateInfo>;
    SaveDocumentTemplateStream(documentTemplateId: number, content: ArrayBuffer | string, languageCode: string, pluginId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TemplateInfo>;
    GetPluginList(webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    GetPluginCapabilities(request: carriers.List_GetPluginCapabilitiesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    GetPluginCapabilities(pluginId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    GetDocumentTypesForPlugin(request: carriers.List_GetDocumentTypesForPluginRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.IntStringDictionary>;
    GetDocumentTypesForPlugin(pluginId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.IntStringDictionary>;
    GetDocumentTemplateList(documentTemplateIds: number[]): Promise<carriers.DocumentTemplate[]>;
    GetDocumentTemplates(webapi_options?: base.WebApiRequestOptions): Promise<carriers.DocumentTemplate[]>;
    GetAllDocumentTemplates(request: carriers.List_GetAllDocumentTemplatesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DocumentTemplateEntity[]>;
    GetAllDocumentTemplates(includeDeleted: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DocumentTemplateEntity[]>;
    SetDocumentPluginForAllDocumentTemplates(request: carriers.List_SetDocumentPluginForAllDocumentTemplatesRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetDocumentPluginForAllDocumentTemplates(documentPluginId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetExtAppEntity(extAppEntityId: number): Promise<carriers.ExtAppEntity>;
    GetHeadingEntity(headingEntityId: number): Promise<carriers.HeadingEntity>;
    CreateDefaultHeadingFromListDefinition(request: carriers.List_CreateDefaultHeadingFromListDefinitionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HeadingEntity>;
    CreateDefaultHeadingFromListDefinition(udListDefinitionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HeadingEntity>;
    GetHierarchyEntity(hierarchyEntityId: number): Promise<carriers.HierarchyEntity>;
    GetAllDomains(webapi_options?: base.WebApiRequestOptions): Promise<enums.Domain[]>;
    GetAllInDomain(request: carriers.List_GetAllInDomainRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HierarchyEntity[]>;
    GetAllInDomain(domain: enums.Domain, children: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HierarchyEntity[]>;
    GetHierarchyFromPath(request: carriers.List_GetHierarchyFromPathRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HierarchyEntity>;
    GetHierarchyFromPath(domain: enums.Domain, path: string, children: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HierarchyEntity>;
    AddHierarchyToPath(request: carriers.List_AddHierarchyToPathRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HierarchyEntity>;
    AddHierarchyToPath(domain: enums.Domain, path: string, name: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HierarchyEntity>;
    UpdateHierarchyFromPath(request: carriers.List_UpdateHierarchyFromPathRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HierarchyEntity>;
    UpdateHierarchyFromPath(domain: enums.Domain, path: string, entity: carriers.HierarchyEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HierarchyEntity>;
    DeleteHierarchyFromPath(request: carriers.List_DeleteHierarchyFromPathRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteHierarchyFromPath(domain: enums.Domain, path: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetLanguageInfo(languageInfoId: number): Promise<carriers.LanguageInfo>;
    GetLanguageInfoList(languageInfoIds: number[]): Promise<carriers.LanguageInfo[]>;
    GetInstalledLanguages(webapi_options?: base.WebApiRequestOptions): Promise<carriers.LanguageInfo[]>;
    GetLegalBase(legalBaseId: number): Promise<carriers.LegalBase>;
    SaveLegalBase(request: carriers.List_SaveLegalBaseRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LegalBase>;
    SaveLegalBase(legalBase: carriers.LegalBase, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LegalBase>;
    GetLegalBaseList(legalBaseIds: number[]): Promise<carriers.LegalBase[]>;
    GetLegalBases(webapi_options?: base.WebApiRequestOptions): Promise<carriers.LegalBase[]>;
    GetLink(linkId: number): Promise<carriers.Link>;
    GetLinkList(linkIds: number[]): Promise<carriers.Link[]>;
    GetListEntity(listEntityId: number): Promise<carriers.ListEntity>;
    GetListDefinitions(request: carriers.List_GetListDefinitionsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListEntity[]>;
    GetListDefinitions(includeDeleted: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListEntity[]>;
    GetListEntityByName(request: carriers.List_GetListEntityByNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListEntity>;
    GetListEntityByName(name: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListEntity>;
    SaveListEntityByName(request: carriers.List_SaveListEntityByNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListEntity>;
    SaveListEntityByName(name: string, listEntity: carriers.ListEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListEntity>;
    DeleteListEntityByName(request: carriers.List_DeleteListEntityByNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteListEntityByName(name: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SaveListItemEntity(request: carriers.List_SaveListItemEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity>;
    SaveListItemEntity(listItemEntity: carriers.ListItemEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity>;
    SortListItems(request: carriers.List_SortListItemsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SortListItems(udListDefinitionId: number, cultureName: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    MoveListItem(request: carriers.List_MoveListItemRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    MoveListItem(udListDefinitionId: number, listItemId: number, direction: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetVisibleForUserGroups(request: carriers.List_GetVisibleForUserGroupsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    GetVisibleForUserGroups(udListDefinitionId: number, listItemId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    GetVisibleForUserGroupsFromListName(request: carriers.List_GetVisibleForUserGroupsFromListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    GetVisibleForUserGroupsFromListName(udListDefinitionName: string, listItemId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    SetVisibleForUserGroups(request: carriers.List_SetVisibleForUserGroupsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    SetVisibleForUserGroups(udListDefinitionId: number, listItemId: number, userGroups: carriers.SelectableMDOListItem[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    SetVisibleForUserGroupsFromListName(request: carriers.List_SetVisibleForUserGroupsFromListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    SetVisibleForUserGroupsFromListName(udListDefinitionName: string, listItemId: number, userGroups: carriers.SelectableMDOListItem[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    SetVisibleForUserGroup(request: carriers.List_SetVisibleForUserGroupRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetVisibleForUserGroup(udListDefinitionId: number, listItemId: number, userGroupId: number[], enable: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetListItemsForUserGroup(request: carriers.List_GetListItemsForUserGroupRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    GetListItemsForUserGroup(udListDefinitionId: number, groupId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    GetListItemsForUserGroupFromListName(request: carriers.List_GetListItemsForUserGroupFromListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    GetListItemsForUserGroupFromListName(udListDefinitionName: string, groupId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    SetListItemsForUserGroup(request: carriers.List_SetListItemsForUserGroupRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetListItemsForUserGroup(udListDefinitionId: number, usergroupId: number, listItemIds: number[], enable: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetListItemsForUserGroupFromListName(request: carriers.List_SetListItemsForUserGroupFromListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetListItemsForUserGroupFromListName(udListDefinitionName: string, usergroupId: number, listItemsID: number[], enable: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetHeadings(request: carriers.List_GetHeadingsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    GetHeadings(udListDefinitionId: number, listItemId: number, showDeleted: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    GetHeadingsForListItemFromListName(request: carriers.List_GetHeadingsForListItemFromListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    GetHeadingsForListItemFromListName(udListDefinitionName: string, listItemId: number, showDeleted: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    SaveHeadingsForListItemFromListDefinition(request: carriers.List_SaveHeadingsForListItemFromListDefinitionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    SaveHeadingsForListItemFromListDefinition(udListDefinitionId: number, listItemId: number, headings: carriers.SelectableMDOListItem[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    SaveHeadingsForListItemFromListName(request: carriers.List_SaveHeadingsForListItemFromListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    SaveHeadingsForListItemFromListName(udListDefinitionName: string, listItemId: number, headings: carriers.SelectableMDOListItem[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    GetListItemsForHeading(request: carriers.List_GetListItemsForHeadingRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    GetListItemsForHeading(udListDefinitionId: number, headingId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    GetListItemsForHeadingFromListName(request: carriers.List_GetListItemsForHeadingFromListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    GetListItemsForHeadingFromListName(udListDefinitionName: string, headingId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    SetListItemsForHeading(request: carriers.List_SetListItemsForHeadingRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetListItemsForHeading(udListDefinitionId: number, headingId: number, listItemIds: number[], enable: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetListItemsForHeadingFromListName(request: carriers.List_SetListItemsForHeadingFromListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetListItemsForHeadingFromListName(udListDefinitionName: string, headingId: number, listItemIds: number[], enable: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetHeadingsForListItem(request: carriers.List_SetHeadingsForListItemRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetHeadingsForListItem(udListDefinitionId: number, listItemId: number, headingIds: number[], enable: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetRankOnHeadings(request: carriers.List_SetRankOnHeadingsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetRankOnHeadings(udListDefinitionId: number, headingIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetRankOnSaleActivity(request: carriers.List_SetRankOnSaleActivityRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetRankOnSaleActivity(saleTypeStageLinkId: number, itemsIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetRankOnSaleDocument(request: carriers.List_SetRankOnSaleDocumentRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetRankOnSaleDocument(saleTypeStageLinkId: number, itemsIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetRankOnProjectActivity(request: carriers.List_SetRankOnProjectActivityRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetRankOnProjectActivity(projectTypeStatusLinkId: number, itemsIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetRankOnProjectDocument(request: carriers.List_SetRankOnProjectDocumentRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetRankOnProjectDocument(projectTypeStatusLinkId: number, itemsIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetAllFromListDefinition(request: carriers.List_GetAllFromListDefinitionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity[]>;
    GetAllFromListDefinition(udListDefinitionId: number, includeDeleted: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity[]>;
    GetAllFromListName(request: carriers.List_GetAllFromListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity[]>;
    GetAllFromListName(udListDefinitionName: string, includeDeleted: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity[]>;
    SaveAllFromListDefinition(request: carriers.List_SaveAllFromListDefinitionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity[]>;
    SaveAllFromListDefinition(udListDefinitionId: number, items: carriers.ListItemEntity[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity[]>;
    SaveAllFromListName(request: carriers.List_SaveAllFromListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity[]>;
    SaveAllFromListName(udListDefinitionName: string, items: carriers.ListItemEntity[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity[]>;
    AddFromListDefinition(request: carriers.List_AddFromListDefinitionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity>;
    AddFromListDefinition(udListDefinitionId: number, item: carriers.ListItemEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity>;
    AddFromListName(request: carriers.List_AddFromListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity>;
    AddFromListName(udListDefinitionName: string, item: carriers.ListItemEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity>;
    DeleteAllFromListDefinition(request: carriers.List_DeleteAllFromListDefinitionRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteAllFromListDefinition(udListDefinitionId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteAllFromListName(request: carriers.List_DeleteAllFromListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteAllFromListName(udListDefinitionName: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetFromListDefinition(request: carriers.List_GetFromListDefinitionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity>;
    GetFromListDefinition(id: number, udListDefinitionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity>;
    GetFromListName(request: carriers.List_GetFromListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity>;
    GetFromListName(id: number, udListDefinitionName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity>;
    SaveFromListDefinition(request: carriers.List_SaveFromListDefinitionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity>;
    SaveFromListDefinition(id: number, udListDefinitionId: number, item: carriers.ListItemEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity>;
    SaveFromListName(request: carriers.List_SaveFromListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity>;
    SaveFromListName(id: number, udListDefinitionName: string, item: carriers.ListItemEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity>;
    DeleteFromListDefinition(request: carriers.List_DeleteFromListDefinitionRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteFromListDefinition(id: number, udListDefinitionId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteFromListName(request: carriers.List_DeleteFromListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteFromListName(id: number, udListDefinitionName: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetHeadingsFromName(request: carriers.List_GetHeadingsFromNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HeadingEntity[]>;
    GetHeadingsFromName(name: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HeadingEntity[]>;
    GetHeadingsFromListDefinition(request: carriers.List_GetHeadingsFromListDefinitionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HeadingEntity[]>;
    GetHeadingsFromListDefinition(id: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HeadingEntity[]>;
    SaveHeadingsFromName(request: carriers.List_SaveHeadingsFromNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HeadingEntity[]>;
    SaveHeadingsFromName(name: string, entities: carriers.HeadingEntity[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.HeadingEntity[]>;
    SaveHeadingsFromListDefinition(request: carriers.List_SaveHeadingsFromListDefinitionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HeadingEntity[]>;
    SaveHeadingsFromListDefinition(id: number, entities: carriers.HeadingEntity[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.HeadingEntity[]>;
    SaveHeadingFromName(request: carriers.List_SaveHeadingFromNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HeadingEntity>;
    SaveHeadingFromName(name: string, entity: carriers.HeadingEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HeadingEntity>;
    SaveHeadingFromListDefinition(request: carriers.List_SaveHeadingFromListDefinitionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HeadingEntity>;
    SaveHeadingFromListDefinition(id: number, entity: carriers.HeadingEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HeadingEntity>;
    DeleteAllHeadingsFromName(request: carriers.List_DeleteAllHeadingsFromNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteAllHeadingsFromName(name: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteAllHeadingsFromListDefinition(request: carriers.List_DeleteAllHeadingsFromListDefinitionRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteAllHeadingsFromListDefinition(id: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetLocalizedText(localizedTextId: number): Promise<carriers.LocalizedText>;
    GetLocalizedTextByType(request: carriers.List_GetLocalizedTextByTypeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LocalizedText>;
    GetLocalizedTextByType(textType: enums.LocalizedTextType, resourceId: number, languageId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LocalizedText>;
    GetLocalizedTextList(localizedTextIds: number[]): Promise<carriers.LocalizedText[]>;
    GetLocalizedTexts(webapi_options?: base.WebApiRequestOptions): Promise<carriers.LocalizedText[]>;
    GetLocalizedTextsByLanguageId(request: carriers.List_GetLocalizedTextsByLanguageIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LocalizedText[]>;
    GetLocalizedTextsByLanguageId(languageId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LocalizedText[]>;
    GetLocalizedTextsByType(request: carriers.List_GetLocalizedTextsByTypeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LocalizedText[]>;
    GetLocalizedTextsByType(textTypes: enums.LocalizedTextType[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.LocalizedText[]>;
    GetMrMrs(mrMrsId: number): Promise<carriers.MrMrs>;
    GetMrMrsList(mrMrsIds: number[]): Promise<carriers.MrMrs[]>;
    GetMrMrses(webapi_options?: base.WebApiRequestOptions): Promise<carriers.MrMrs[]>;
    GetPaymentTerm(paymentTermId: number): Promise<carriers.PaymentTerm>;
    GetPaymentTerms(webapi_options?: base.WebApiRequestOptions): Promise<carriers.PaymentTerm[]>;
    GetPaymentType(paymentTypeId: number): Promise<carriers.PaymentType>;
    GetPaymentTypes(webapi_options?: base.WebApiRequestOptions): Promise<carriers.PaymentType[]>;
    GetPosition(positionId: number): Promise<carriers.Position>;
    GetPositionList(positionIds: number[]): Promise<carriers.Position[]>;
    GetPositions(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Position[]>;
    GetPriority(priorityId: number): Promise<carriers.Priority>;
    GetPriorityList(priorityIds: number[]): Promise<carriers.Priority[]>;
    GetPriorities(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Priority[]>;
    GetProductCategory(productCategoryId: number): Promise<carriers.ProductCategory>;
    GetProductCategories(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProductCategory[]>;
    GetProductFamily(productFamilyId: number): Promise<carriers.ProductFamily>;
    GetProductFamilies(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProductFamily[]>;
    GetProductType(productTypeId: number): Promise<carriers.ProductType>;
    GetProductTypes(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProductType[]>;
    GetProjectStatus(projectStatusId: number): Promise<carriers.ProjectStatus>;
    DeleteProjectStatus(request: carriers.List_DeleteProjectStatusRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteProjectStatus(projectStatusId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetProjectStatusList(projectStatusIds: number[]): Promise<carriers.ProjectStatus[]>;
    GetProjectStatuses(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProjectStatus[]>;
    GetProjectType(projectTypeId: number): Promise<carriers.ProjectType>;
    GetProjectTypeEntity(projectTypeEntityId: number): Promise<carriers.ProjectTypeEntity>;
    GetProjectTypeList(projectTypeIds: number[]): Promise<carriers.ProjectType[]>;
    GetProjectTypes(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProjectType[]>;
    SaveQuickReplies(request: carriers.List_SaveQuickRepliesRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SaveQuickReplies(quickReplies: carriers.QuickReply[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetQuickReplies(webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuickReply[]>;
    GetRating(ratingId: number): Promise<carriers.Rating>;
    GetRatingList(ratingIds: number[]): Promise<carriers.Rating[]>;
    GetRatings(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Rating[]>;
    GetAllSaleStages(request: carriers.List_GetAllSaleStagesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleStageEntity[]>;
    GetAllSaleStages(includeDeleted: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleStageEntity[]>;
    GetReason(reasonId: number): Promise<carriers.Reason>;
    GetReasonList(reasonIds: number[]): Promise<carriers.Reason[]>;
    GetReasons(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Reason[]>;
    GetQuoteApproveReason(quoteApproveReasonId: number): Promise<carriers.QuoteApproveReason>;
    GetQuoteApproveReasonList(quoteApproveReasonIds: number[]): Promise<carriers.QuoteApproveReason[]>;
    GetQuoteApproveReasons(webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteApproveReason[]>;
    GetQuoteDenyReason(quoteDenyReasonId: number): Promise<carriers.QuoteDenyReason>;
    GetQuoteDenyReasonList(quoteDenyReasonIds: number[]): Promise<carriers.QuoteDenyReason[]>;
    GetQuoteDenyReasons(webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteDenyReason[]>;
    GetReasonSold(reasonSoldId: number): Promise<carriers.ReasonSold>;
    GetReasonSoldList(reasonSoldIds: number[]): Promise<carriers.ReasonSold[]>;
    GetReasonStalled(reasonStalledId: number): Promise<carriers.ReasonStalled>;
    GetReasonStalledList(reasonStalledIds: number[]): Promise<carriers.ReasonStalled[]>;
    GetRelationDefinitionEntity(relationDefinitionEntityId: number): Promise<carriers.RelationDefinitionEntity>;
    GetResourceEntity(resourceEntityId: number): Promise<carriers.ResourceEntity>;
    GetSaleStageEntity(saleStageEntityId: number): Promise<carriers.SaleStageEntity>;
    GetSaleType(saleTypeId: number): Promise<carriers.SaleType>;
    GetSaleTypeEntity(saleTypeEntityId: number): Promise<carriers.SaleTypeEntity>;
    GetSaleTypeList(saleTypeIds: number[]): Promise<carriers.SaleType[]>;
    GetAllSaleType(webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleType[]>;
    GetAllSaleTypeEntities(request: carriers.List_GetAllSaleTypeEntitiesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleTypeEntity[]>;
    GetAllSaleTypeEntities(includeDeleted: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleTypeEntity[]>;
    GetSelectionCategory(selectionCategoryId: number): Promise<carriers.SelectionCategory>;
    GetSelectionCategoryList(selectionCategoryIds: number[]): Promise<carriers.SelectionCategory[]>;
    GetSource(sourceId: number): Promise<carriers.Source>;
    GetSourceList(sourceIds: number[]): Promise<carriers.Source[]>;
    GetSources(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Source[]>;
    GetTask(taskId: number): Promise<carriers.Task>;
    GetDocumentTemplateTask(request: carriers.List_GetDocumentTemplateTaskRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Task>;
    GetDocumentTemplateTask(documentTemplateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Task>;
    GetTaskList(taskIds: number[]): Promise<carriers.Task[]>;
    GetTasks(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Task[]>;
    GetDocumentTemplatesTasks(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Task[]>;
    GetAllTasks(request: carriers.List_GetAllTasksRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TaskListItem[]>;
    GetAllTasks(includeDeleted: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TaskListItem[]>;
    GetTicketCategory(ticketCategoryId: number): Promise<carriers.TicketCategory>;
    GetTicketCategoryEntity(ticketCategoryEntityId: number): Promise<carriers.TicketCategoryEntity>;
    MoveAllTickets(request: carriers.List_MoveAllTicketsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    MoveAllTickets(fromTicketCategoryId: number, toTicketCategoryId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RebuildFullnames(webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetTicketCategoryList(ticketCategoryEntityIds: number[]): Promise<carriers.TicketCategoryEntity[]>;
    GetTicketCategories(webapi_options?: base.WebApiRequestOptions): Promise<carriers.TicketCategoryEntity[]>;
    GetTicketCategoriesForUserGroups(request: carriers.List_GetTicketCategoriesForUserGroupsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    GetTicketCategoriesForUserGroups(userGroupIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    SetTicketCategoriesForUserGroup(request: carriers.List_SetTicketCategoriesForUserGroupRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetTicketCategoriesForUserGroup(userGroupId: number, categoryIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    UpdateCategoryMemberships(request: carriers.List_UpdateCategoryMembershipsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    UpdateCategoryMemberships(ticketCategoryId: number, membershipsToAdd: carriers.TicketCategoryMembershipEntity[], membershipsToUpdate: carriers.TicketCategoryMembershipEntity[], membershipsToDelete: carriers.TicketCategoryMembershipEntity[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetTicketPriority(ticketPriorityId: number): Promise<carriers.TicketPriority>;
    GetTicketPriorityEntity(ticketPriorityEntityId: number): Promise<carriers.TicketPriorityEntity>;
    SetTicketPrioritySortOrder(request: carriers.List_SetTicketPrioritySortOrderRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetTicketPrioritySortOrder(ticketPriorityId: number, sortOrder: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetTicketPriorityList(ticketPriorityIds: number[]): Promise<carriers.TicketPriority[]>;
    GetTicketPriorities(webapi_options?: base.WebApiRequestOptions): Promise<carriers.TicketPriority[]>;
    GetAllTicketPriorities(request: carriers.List_GetAllTicketPrioritiesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TicketPriorityEntity[]>;
    GetAllTicketPriorities(includeDeleted: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TicketPriorityEntity[]>;
    GetTicketStatusEntity(ticketStatusEntityId: number): Promise<carriers.TicketStatusEntity>;
    GlobalChangeTicketStatus(request: carriers.List_GlobalChangeTicketStatusRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GlobalChangeTicketStatus(fromTicketStatusId: number, toTicketStatusId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetTicketStatusSortOrder(request: carriers.List_SetTicketStatusSortOrderRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetTicketStatusSortOrder(ticketStatusId: number, sortOrder: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetTicketStatusList(ticketStatusEntityIds: number[]): Promise<carriers.TicketStatusEntity[]>;
    GetTicketStatuses(webapi_options?: base.WebApiRequestOptions): Promise<carriers.TicketStatusEntity[]>;
    GetWebPanelEntity(webPanelEntityId: number): Promise<carriers.WebPanelEntity>;
    GenerateNavigationUrl(request: carriers.List_GenerateNavigationUrlRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GenerateNavigationUrl(visibleIn: enums.Navigation, windowName: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetWebPanelList(webapi_options?: base.WebApiRequestOptions): Promise<carriers.WebPanelEntity[]>;
    DeleteWebPanel(request: carriers.List_DeleteWebPanelRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteWebPanel(id: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetAppWebPanels(webapi_options?: base.WebApiRequestOptions): Promise<carriers.WebPanelEntity[]>;
    DeleteAppWebPanels(webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetWebPanelByProgId(request: carriers.List_GetWebPanelByProgIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WebPanelEntity>;
    GetWebPanelByProgId(progId: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WebPanelEntity>;
}
/**
 * Collection of all services that works with Lists. These are typical lists of data shown in dropdown list, checkbox lists, etc.
 */
export declare class ListAgent extends base.WebApiBase implements IListAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * Set default values into a new AmountClassEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultAmountClassEntity(options?: base.WebApiRequestOptions): Promise<carriers.AmountClassEntity>;
    SaveAmountClassEntity(entity: carriers.AmountClassEntity, options?: base.WebApiRequestOptions): Promise<carriers.AmountClassEntity>;
    /**
     * Set default values into a new TaskMenu.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultTaskMenu(options?: base.WebApiRequestOptions): Promise<carriers.TaskMenu>;
    SaveTaskMenu(entity: carriers.TaskMenu, options?: base.WebApiRequestOptions): Promise<carriers.TaskMenu>;
    DeleteTaskMenu(TaskMenuId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new CurrencyEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultCurrencyEntity(options?: base.WebApiRequestOptions): Promise<carriers.CurrencyEntity>;
    SaveCurrencyEntity(entity: carriers.CurrencyEntity, options?: base.WebApiRequestOptions): Promise<carriers.CurrencyEntity>;
    /**
     * Set default values into a new DocumentTemplateEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultDocumentTemplateEntity(options?: base.WebApiRequestOptions): Promise<carriers.DocumentTemplateEntity>;
    SaveDocumentTemplateEntity(entity: carriers.DocumentTemplateEntity, options?: base.WebApiRequestOptions): Promise<carriers.DocumentTemplateEntity>;
    /**
     * Set default values into a new ExtAppEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultExtAppEntity(options?: base.WebApiRequestOptions): Promise<carriers.ExtAppEntity>;
    SaveExtAppEntity(entity: carriers.ExtAppEntity, options?: base.WebApiRequestOptions): Promise<carriers.ExtAppEntity>;
    /**
     * Set default values into a new HeadingEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultHeadingEntity(options?: base.WebApiRequestOptions): Promise<carriers.HeadingEntity>;
    SaveHeadingEntity(entity: carriers.HeadingEntity, options?: base.WebApiRequestOptions): Promise<carriers.HeadingEntity>;
    /**
     * Set default values into a new HierarchyEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultHierarchyEntity(options?: base.WebApiRequestOptions): Promise<carriers.HierarchyEntity>;
    SaveHierarchyEntity(entity: carriers.HierarchyEntity, options?: base.WebApiRequestOptions): Promise<carriers.HierarchyEntity>;
    DeleteHierarchyEntity(HierarchyEntityId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new ListEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultListEntity(options?: base.WebApiRequestOptions): Promise<carriers.ListEntity>;
    SaveListEntity(entity: carriers.ListEntity, options?: base.WebApiRequestOptions): Promise<carriers.ListEntity>;
    DeleteListEntity(ListEntityId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new ListItemEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultListItemEntity(options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity>;
    /**
     * Set default values into a new ProjectTypeEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultProjectTypeEntity(options?: base.WebApiRequestOptions): Promise<carriers.ProjectTypeEntity>;
    SaveProjectTypeEntity(entity: carriers.ProjectTypeEntity, options?: base.WebApiRequestOptions): Promise<carriers.ProjectTypeEntity>;
    /**
     * Set default values into a new RelationDefinitionEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultRelationDefinitionEntity(options?: base.WebApiRequestOptions): Promise<carriers.RelationDefinitionEntity>;
    SaveRelationDefinitionEntity(entity: carriers.RelationDefinitionEntity, options?: base.WebApiRequestOptions): Promise<carriers.RelationDefinitionEntity>;
    /**
     * Set default values into a new ResourceEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultResourceEntity(options?: base.WebApiRequestOptions): Promise<carriers.ResourceEntity>;
    SaveResourceEntity(entity: carriers.ResourceEntity, options?: base.WebApiRequestOptions): Promise<carriers.ResourceEntity>;
    DeleteResourceEntity(ResourceEntityId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new SaleStageEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultSaleStageEntity(options?: base.WebApiRequestOptions): Promise<carriers.SaleStageEntity>;
    SaveSaleStageEntity(entity: carriers.SaleStageEntity, options?: base.WebApiRequestOptions): Promise<carriers.SaleStageEntity>;
    /**
     * Set default values into a new SaleTypeEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultSaleTypeEntity(options?: base.WebApiRequestOptions): Promise<carriers.SaleTypeEntity>;
    SaveSaleTypeEntity(entity: carriers.SaleTypeEntity, options?: base.WebApiRequestOptions): Promise<carriers.SaleTypeEntity>;
    /**
     * Set default values into a new TicketCategoryEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultTicketCategoryEntity(options?: base.WebApiRequestOptions): Promise<carriers.TicketCategoryEntity>;
    SaveTicketCategoryEntity(entity: carriers.TicketCategoryEntity, options?: base.WebApiRequestOptions): Promise<carriers.TicketCategoryEntity>;
    DeleteTicketCategoryEntity(TicketCategoryEntityId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new TicketPriorityEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultTicketPriorityEntity(options?: base.WebApiRequestOptions): Promise<carriers.TicketPriorityEntity>;
    SaveTicketPriorityEntity(entity: carriers.TicketPriorityEntity, options?: base.WebApiRequestOptions): Promise<carriers.TicketPriorityEntity>;
    DeleteTicketPriorityEntity(TicketPriorityEntityId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new TicketStatusEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultTicketStatusEntity(options?: base.WebApiRequestOptions): Promise<carriers.TicketStatusEntity>;
    SaveTicketStatusEntity(entity: carriers.TicketStatusEntity, options?: base.WebApiRequestOptions): Promise<carriers.TicketStatusEntity>;
    DeleteTicketStatusEntity(TicketStatusEntityId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new WebPanelEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultWebPanelEntity(options?: base.WebApiRequestOptions): Promise<carriers.WebPanelEntity>;
    SaveWebPanelEntity(entity: carriers.WebPanelEntity, options?: base.WebApiRequestOptions): Promise<carriers.WebPanelEntity>;
    GetAmountClassEntity(amountClassEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.AmountClassEntity>;
    GetBusiness(businessId: number, options?: base.WebApiRequestOptions): Promise<carriers.Business>;
    GetBusinessList(businessIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.Business[]>;
    private _GetBusinesses;
    /**
     * Returns all available businesses that a contact could have.
     * @returns An array of all available businesses
     */
    GetBusinesses(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Business[]>;
    GetCategory(categoryId: number, options?: base.WebApiRequestOptions): Promise<carriers.Category>;
    GetCategoryList(categoryIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.Category[]>;
    private _GetCategories;
    /**
     * Returns all categories a contact could belong to
     * @returns An array of all available categories
     */
    GetCategories(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Category[]>;
    GetCompetitor(competitorId: number, options?: base.WebApiRequestOptions): Promise<carriers.Competitor>;
    GetCompetitorList(competitorIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.Competitor[]>;
    private _GetCompetitors;
    /**
     * Returns all competitors
     * @returns
     */
    GetCompetitors(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Competitor[]>;
    GetTaskMenu(taskMenuId: number, options?: base.WebApiRequestOptions): Promise<carriers.TaskMenu>;
    private _GetAppTaskMenus;
    /**
     * Get all task menus owned by your app; works in Online only, for registered Apps that send a valid ApplicationToken
     * @returns List of all task menus owned by the current App
     */
    GetAppTaskMenus(webapi_options?: base.WebApiRequestOptions): Promise<carriers.TaskMenu[]>;
    private _DeleteAppTaskMenus;
    /**
     * Permanentely delete all task menus owned by your app; works in Online only, for registered Apps that send a valid ApplicationToken; otherwise nothing happens
     * @returns This method has no return value
     */
    DeleteAppTaskMenus(webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetTaskMenuByProgId;
    /**
     * Get a task menu using the ProgId key that was specified when it was created
     * @param request - ProgId
     * @returns The task menu
     */
    GetTaskMenuByProgId(request: carriers.List_GetTaskMenuByProgIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TaskMenu>;
    /**
     * Get a task menu using the ProgId key that was specified when it was created
     * @param progId - String key that can be used to uniquely retrieve the taskmenu, set in the TaskMenu when saving
     * @returns The task menu
     */
    GetTaskMenuByProgId(progId: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TaskMenu>;
    GetConsentPurpose(consentPurposeId: number, options?: base.WebApiRequestOptions): Promise<carriers.ConsentPurpose>;
    private _SaveConsentPurpose;
    /**
     * Save a ConsentPurpose object
     * @param request - ConsentPurpose
     * @returns The saved ConsentPurpose object, updated with the ConsentPurposeId if it is a new database entry
     */
    SaveConsentPurpose(request: carriers.List_SaveConsentPurposeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ConsentPurpose>;
    /**
     * Save a ConsentPurpose object
     * @param consentPurpose - The ConsentPurpose object to save
     * @returns The saved ConsentPurpose object, updated with the ConsentPurposeId if it is a new database entry
     */
    SaveConsentPurpose(consentPurpose: carriers.ConsentPurpose, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ConsentPurpose>;
    private _SetEmarketingStrictMode;
    /**
     * Turn on the Emarketing strict mode, which will enable full GDPR rules concerning Emarketing consents and subscriptions
     * @param request - Enable
     * @returns A void return
     */
    SetEmarketingStrictMode(request: carriers.List_SetEmarketingStrictModeRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Turn on the Emarketing strict mode, which will enable full GDPR rules concerning Emarketing consents and subscriptions
     * @param enable - Set to true to enable strict mode
     * @returns A void return
     */
    SetEmarketingStrictMode(enable: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetEmarketingStrictMode;
    /**
     * Get the value of the Emarketing strict mode setting
     * @returns Returns true if Emarkerint strict mode is set, false otherwise
     */
    GetEmarketingStrictMode(webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    GetConsentPurposeList(consentPurposeIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.ConsentPurpose[]>;
    private _GetConsentPurposes;
    /**
     * Returns all defined purposes.
     * @returns An array of all defined purposes
     */
    GetConsentPurposes(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ConsentPurpose[]>;
    GetConsentSource(consentSourceId: number, options?: base.WebApiRequestOptions): Promise<carriers.ConsentSource>;
    private _SaveConsentSource;
    /**
     *
     * @param request - ConsentSource
     * @returns
     */
    SaveConsentSource(request: carriers.List_SaveConsentSourceRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ConsentSource>;
    /**
     *
     * @param consentSource -
     * @returns
     */
    SaveConsentSource(consentSource: carriers.ConsentSource, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ConsentSource>;
    GetConsentSourceList(consentSourceIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.ConsentSource[]>;
    private _GetConsentSources;
    /**
     * Returns all defined Sources.
     * @returns An array of all defined Sources
     */
    GetConsentSources(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ConsentSource[]>;
    GetCountry(countryId: number, options?: base.WebApiRequestOptions): Promise<carriers.Country>;
    private _SaveCountry;
    /**
     * Saves a country
     * @param request - Country
     * @returns The country that is saved
     */
    SaveCountry(request: carriers.List_SaveCountryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Country>;
    /**
     * Saves a country
     * @param country - The country to save
     * @returns The country that is saved
     */
    SaveCountry(country: carriers.Country, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Country>;
    private _CreateDefaultCountry;
    /**
     * Gets a new country
     * @returns A new country with default values
     */
    CreateDefaultCountry(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Country>;
    GetCountryList(countryIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.Country[]>;
    private _GetCountries;
    /**
     * Returns all available countries a contact or person could belong to.
     * @returns An array of all available countries
     */
    GetCountries(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Country[]>;
    private _GetAllCountries;
    /**
     * Returns all available countries a contact or person could belong to.
     * @param request - IncludeDeleted
     * @returns An array of all available countries
     */
    GetAllCountries(request: carriers.List_GetAllCountriesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Country[]>;
    /**
     * Returns all available countries a contact or person could belong to.
     * @param includeDeleted - Include deleted items in result?
     * @returns An array of all available countries
     */
    GetAllCountries(includeDeleted: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Country[]>;
    GetCredited(creditedId: number, options?: base.WebApiRequestOptions): Promise<carriers.Credited>;
    GetCreditedList(creditedIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.Credited[]>;
    private _GetCrediteds;
    /**
     * Returns all credited
     * @returns
     */
    GetCrediteds(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Credited[]>;
    GetCurrency(currencyId: number, options?: base.WebApiRequestOptions): Promise<carriers.Currency>;
    private _GetOurCurrency;
    /**
     * Gets the Our currency object if currency is enabled
     * @returns Our currency
     */
    GetOurCurrency(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Currency>;
    private _ChangeCurrency;
    /**
     * Recalculates the amount to the new currency.
     * @param request - Amount, FromCurrency, ToCurrency
     * @returns Amount in new currency
     */
    ChangeCurrency(request: carriers.List_ChangeCurrencyRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Recalculates the amount to the new currency.
     * @param amount - The amount in the old currency
     * @param fromCurrency - The old currency name
     * @param toCurrency - The new currency name
     * @returns Amount in new currency
     */
    ChangeCurrency(amount: number, fromCurrency: string, toCurrency: string, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _GetOwnerCompanysCurrency;
    /**
     * Get the currency of the user&apos;s owner company
     * @returns Currency of the user's owner company
     */
    GetOwnerCompanysCurrency(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Currency>;
    GetCurrencyEntity(currencyEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.CurrencyEntity>;
    private _GetBaseCurrency;
    /**
     * Get the base currency, used for calculating exchange rates
     * @returns The base currency that other currencies are expressed in terms of
     */
    GetBaseCurrency(webapi_options?: base.WebApiRequestOptions): Promise<carriers.CurrencyEntity>;
    GetCurrencyList(currencyIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.Currency[]>;
    private _GetCurrencies;
    /**
     * Returns all currencies
     * @returns Array of currencies
     */
    GetCurrencies(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Currency[]>;
    private _GetAllCurrencies;
    /**
     * Returns all currencies
     * @param request - IncludeDeleted
     * @returns Array of currencies
     */
    GetAllCurrencies(request: carriers.List_GetAllCurrenciesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CurrencyEntity[]>;
    /**
     * Returns all currencies
     * @param includeDeleted - Include deleted items in result?
     * @returns Array of currencies
     */
    GetAllCurrencies(includeDeleted: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CurrencyEntity[]>;
    GetCustomerLanguage(customerLanguageId: number, options?: base.WebApiRequestOptions): Promise<carriers.CustomerLanguage>;
    GetCustomerLanguageList(customerLanguageIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.CustomerLanguage[]>;
    private _GetCustomerLanguages;
    /**
     *
     * @returns
     */
    GetCustomerLanguages(webapi_options?: base.WebApiRequestOptions): Promise<carriers.CustomerLanguage[]>;
    GetDeliveryTerm(deliveryTermId: number, options?: base.WebApiRequestOptions): Promise<carriers.DeliveryTerm>;
    private _GetDeliveryTerms;
    /**
     * Returns all DeliveryTerms in SuperOffice db.
     * @returns An array of all available DeliveryTerms
     */
    GetDeliveryTerms(webapi_options?: base.WebApiRequestOptions): Promise<carriers.DeliveryTerm[]>;
    GetDeliveryType(deliveryTypeId: number, options?: base.WebApiRequestOptions): Promise<carriers.DeliveryType>;
    private _GetDeliveryTypes;
    /**
     * Returns all DeliveryTypes in SuperOffice db.
     * @returns An array of all available DeliveryType
     */
    GetDeliveryTypes(webapi_options?: base.WebApiRequestOptions): Promise<carriers.DeliveryType[]>;
    GetDepartment(departmentId: number, options?: base.WebApiRequestOptions): Promise<carriers.Department>;
    GetDepartmentList(departmentIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.Department[]>;
    private _GetDepartments;
    /**
     * Getting all departments/user groups for the internal phone list with the user&apos;s colleagues.
     * @returns Returns all departments.
     */
    GetDepartments(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Department[]>;
    GetDocumentTemplate(documentTemplateId: number, options?: base.WebApiRequestOptions): Promise<carriers.DocumentTemplate>;
    GetDocumentTemplateEntity(documentTemplateEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.DocumentTemplateEntity>;
    private _SetDocumentTemplateStream;
    /**
     * Store a document template from its stream. Since there is a potential for a name conflict (the file name stored by the document entity earlier may prove to be invalid), the (possibly amended) document entity is returned. The client should not assume that any earlier, cached entity information is valid.
     * @param request - DocumentTemplateEntity, Stream, LanguageCode, PluginId
     * @returns Since there is a potential for a name conflict (the file name stored by the document entity earlier may prove to be invalid), the (possibly amended) document entity is returned. The client should not assume that any earlier, cached entity information is valid.
     */
    SetDocumentTemplateStream(request: carriers.List_SetDocumentTemplateStreamRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DocumentTemplateEntity>;
    /**
     * Store a document template from its stream. Since there is a potential for a name conflict (the file name stored by the document entity earlier may prove to be invalid), the (possibly amended) document entity is returned. The client should not assume that any earlier, cached entity information is valid.
     * @param documentTemplateEntity - The document entity object that the binary data (document) should be stored to. Its file name may be amended by this call, see the return value
     * @param stream - The document as a stream.
     * @param languageCode - The language code ('en-US', 'nb-NO', etc). Use empty string if not supported or used.
     * @param pluginId - The plugin id to store the template with. 0 for SOArc
     * @returns Since there is a potential for a name conflict (the file name stored by the document entity earlier may prove to be invalid), the (possibly amended) document entity is returned. The client should not assume that any earlier, cached entity information is valid.
     */
    SetDocumentTemplateStream(documentTemplateEntity: carriers.DocumentTemplateEntity, stream: ArrayBuffer | string, languageCode: string, pluginId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DocumentTemplateEntity>;
    private _GetDocumentTemplateUsedInSalesStage;
    /**
     * Get a String array of names in sales guide that this template is used in
     * @param request - DocumentTemplateId
     * @returns The name of the salesguides that use this template
     */
    GetDocumentTemplateUsedInSalesStage(request: carriers.List_GetDocumentTemplateUsedInSalesStageRequest, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    /**
     * Get a String array of names in sales guide that this template is used in
     * @param documentTemplateId - The id of the template
     * @returns The name of the salesguides that use this template
     */
    GetDocumentTemplateUsedInSalesStage(documentTemplateId: number, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    private _GetDocumentTemplateUsedInProjectStage;
    /**
     * Get a String array of names in project guide that this template is used in
     * @param request - DocumentTemplateId
     * @returns The name of the projectguides that use this template
     */
    GetDocumentTemplateUsedInProjectStage(request: carriers.List_GetDocumentTemplateUsedInProjectStageRequest, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    /**
     * Get a String array of names in project guide that this template is used in
     * @param documentTemplateId - The id of the template
     * @returns The name of the projectguides that use this template
     */
    GetDocumentTemplateUsedInProjectStage(documentTemplateId: number, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    private _GetDocumentTemplateUrl;
    /**
     * Get a url to the document template
     * @param request - DocumentTemplateId, WritableUrl, LanguageCode
     * @returns The URL to the document template
     */
    GetDocumentTemplateUrl(request: carriers.List_GetDocumentTemplateUrlRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Get a url to the document template
     * @param documentTemplateId - The id of the template
     * @param writableUrl - Get a writeable url to the document template?
     * @param languageCode - The language code ('en-US', 'nb-NO', etc). Use empty string if not supported or used.
     * @returns The URL to the document template
     */
    GetDocumentTemplateUrl(documentTemplateId: number, writableUrl: boolean, languageCode: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetDocumentTemplateProperties;
    /**
     * Get document template properties
     * @param request - DocumentTemplateId, RequestedProperties
     * @returns Dictionary of key=value pairs of requested properties
     */
    GetDocumentTemplateProperties(request: carriers.List_GetDocumentTemplatePropertiesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    /**
     * Get document template properties
     * @param documentTemplateId - The primary key id of the document template
     * @param requestedProperties - An array of properties to get the values for
     * @returns Dictionary of key=value pairs of requested properties
     */
    GetDocumentTemplateProperties(documentTemplateId: number, requestedProperties: string[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    private _GetDocumentTemplateLanguages;
    /**
     * Get the supported language variations for a document template
     * @param request - DocumentTemplateId
     * @returns Returns the list of languages as ISO cultures (en-US, no, sv, etc)
     */
    GetDocumentTemplateLanguages(request: carriers.List_GetDocumentTemplateLanguagesRequest, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    /**
     * Get the supported language variations for a document template
     * @param documentTemplateId - The id of the document template
     * @returns Returns the list of languages as ISO cultures (en-US, no, sv, etc)
     */
    GetDocumentTemplateLanguages(documentTemplateId: number, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    private _CreateDefaultDocumentTemplateLanguage;
    /**
     * Create a new document template language based on an existing template
     * @param request - DocumentTemplateId, LanguageCode
     * @returns Returns nothing - throws on error
     */
    CreateDefaultDocumentTemplateLanguage(request: carriers.List_CreateDefaultDocumentTemplateLanguageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Create a new document template language based on an existing template
     * @param documentTemplateId - The id of the document template
     * @param languageCode - The language code ('en-US, 'nb-NO', etc)
     * @returns Returns nothing - throws on error
     */
    CreateDefaultDocumentTemplateLanguage(documentTemplateId: number, languageCode: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _DeleteDocumentTemplateLanguage;
    /**
     * Deletes language variant of the document template
     * @param request - DocumentTemplateId, LanguageCode
     * @returns This method has no return value
     */
    DeleteDocumentTemplateLanguage(request: carriers.List_DeleteDocumentTemplateLanguageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Deletes language variant of the document template
     * @param documentTemplateId - The id of the document template
     * @param languageCode - The language code ('en-US, 'nb-NO', etc)
     * @returns This method has no return value
     */
    DeleteDocumentTemplateLanguage(documentTemplateId: number, languageCode: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetDocumentTemplateExtension;
    /**
     * Get the file extension for the document template
     * @param request - DocumentTemplateId
     * @returns File name extension including '.': '.doc' or '.xlsx'
     */
    GetDocumentTemplateExtension(request: carriers.List_GetDocumentTemplateExtensionRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Get the file extension for the document template
     * @param documentTemplateId - The primary key of the document template
     * @returns File name extension including '.': '.doc' or '.xlsx'
     */
    GetDocumentTemplateExtension(documentTemplateId: number, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _SetDocumentTemplateFromDocumentTemplate;
    /**
     * Create a new document template based on another template
     * @param request - SourceDocumentTemplateId, DocumentTemplateEntity
     * @returns The new document template entity
     */
    SetDocumentTemplateFromDocumentTemplate(request: carriers.List_SetDocumentTemplateFromDocumentTemplateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DocumentTemplateEntity>;
    /**
     * Create a new document template based on another template
     * @param sourceDocumentTemplateId - The document template to copy contents from.
     * @param documentTemplateEntity - The new document template entity
     * @returns The new document template entity
     */
    SetDocumentTemplateFromDocumentTemplate(sourceDocumentTemplateId: number, documentTemplateEntity: carriers.DocumentTemplateEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DocumentTemplateEntity>;
    private _GetDocumentTemplateStreamFromId;
    /**
     * Retrieve a stream to a document template based on its id
     * @param request - DocumentTemplateId, LanguageCode
     * @returns Open stream to the template content
     */
    GetDocumentTemplateStreamFromId(request: carriers.List_GetDocumentTemplateStreamFromIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    /**
     * Retrieve a stream to a document template based on its id
     * @param documentTemplateId - Id of template to retrieve
     * @param languageCode - Language variation of template to use. (ISO code: "en-US" or "nb-NO" etc). Used to select a template of the appropriate language. Can be overridden in SO ARC by user preference "PreferDocLang".
     * @returns Open stream to the template content
     */
    GetDocumentTemplateStreamFromId(documentTemplateId: number, languageCode: string, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    private _SaveDocumentTemplateStream;
    /**
     * Writes content in stream to document template file
     * @param request - DocumentTemplateId, Content, LanguageCode, PluginId
     * @returns Template info
     */
    SaveDocumentTemplateStream(request: carriers.List_SaveDocumentTemplateStreamRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TemplateInfo>;
    /**
     * Writes content in stream to document template file
     * @param documentTemplateId - Identifier for document template
     * @param content - Stream containing content to be saved to document template file
     * @param languageCode - Language variation of template to update. (ISO code: "en-US" or "nb-NO" etc). Used to select a template of the appropriate language. Can be overridden in SO ARC by user preference "PreferDocLang".
     * @param pluginId - Plugin to use for storing document content. 0 = SOARC. Use -1 to use the plugin specified in the template.
     * @returns Template info
     */
    SaveDocumentTemplateStream(documentTemplateId: number, content: ArrayBuffer | string, languageCode: string, pluginId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TemplateInfo>;
    private _GetPluginList;
    /**
     * Get a list of installed document plugins
     * @returns Dictionary mapping plugin id=plugin name
     */
    GetPluginList(webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    private _GetPluginCapabilities;
    /**
     * Get a list of plugin-dependent capabilities for a given document archive plugin.&lt;br/&gt;A standard set of properties is defined in SuperOffice.CRM.Documents.Constants.Capabilities.
     * @param request - PluginId
     * @returns Dictionary mapping capability names=values
     */
    GetPluginCapabilities(request: carriers.List_GetPluginCapabilitiesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    /**
     * Get a list of plugin-dependent capabilities for a given document archive plugin.&lt;br/&gt;A standard set of properties is defined in SuperOffice.CRM.Documents.Constants.Capabilities.
     * @param pluginId - Numeric document plugin id, corresponding to the document.archiveProvider id or doctmpl.AutoeventId.
     * @returns Dictionary mapping capability names=values
     */
    GetPluginCapabilities(pluginId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    private _GetDocumentTypesForPlugin;
    /**
     * Get a list of document types supported by a given document plugin. Use the document template type when creating a new template.
     * @param request - PluginId
     * @returns Dictionary mapping document type id=name
     */
    GetDocumentTypesForPlugin(request: carriers.List_GetDocumentTypesForPluginRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.IntStringDictionary>;
    /**
     * Get a list of document types supported by a given document plugin. Use the document template type when creating a new template.
     * @param pluginId - Numeric document plugin id, corresponding to the doctmpl.AutoeventId, doctmpl.LoadTemplateFromPlugin.
     * @returns Dictionary mapping document type id=name
     */
    GetDocumentTypesForPlugin(pluginId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.IntStringDictionary>;
    GetDocumentTemplateList(documentTemplateIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.DocumentTemplate[]>;
    private _GetDocumentTemplates;
    /**
     * Returns all available document templates
     * @returns Array of DocumentTemplates
     */
    GetDocumentTemplates(webapi_options?: base.WebApiRequestOptions): Promise<carriers.DocumentTemplate[]>;
    private _GetAllDocumentTemplates;
    /**
     * Returns all templates
     * @param request - IncludeDeleted
     * @returns Array of all template items
     */
    GetAllDocumentTemplates(request: carriers.List_GetAllDocumentTemplatesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DocumentTemplateEntity[]>;
    /**
     * Returns all templates
     * @param includeDeleted - Include deleted items in result?
     * @returns Array of all template items
     */
    GetAllDocumentTemplates(includeDeleted: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DocumentTemplateEntity[]>;
    private _SetDocumentPluginForAllDocumentTemplates;
    /**
     * Sets the document-plugin to be used for all templates of type &apos;document&apos;.
     * @param request - DocumentPluginId
     * @returns This method has no return value
     */
    SetDocumentPluginForAllDocumentTemplates(request: carriers.List_SetDocumentPluginForAllDocumentTemplatesRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Sets the document-plugin to be used for all templates of type &apos;document&apos;.
     * @param documentPluginId - The numerical ID of the document-plugin to use.
     * @returns This method has no return value
     */
    SetDocumentPluginForAllDocumentTemplates(documentPluginId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetExtAppEntity(extAppEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.ExtAppEntity>;
    GetHeadingEntity(headingEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.HeadingEntity>;
    private _CreateDefaultHeadingFromListDefinition;
    /**
     * Get a heading for the specified list defintion
     * @param request - UdListDefinitionId
     * @returns The loaded heading
     */
    CreateDefaultHeadingFromListDefinition(request: carriers.List_CreateDefaultHeadingFromListDefinitionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HeadingEntity>;
    /**
     * Get a heading for the specified list defintion
     * @param udListDefinitionId - The id of the list definition, indicating which list to get the item from
     * @returns The loaded heading
     */
    CreateDefaultHeadingFromListDefinition(udListDefinitionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HeadingEntity>;
    GetHierarchyEntity(hierarchyEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.HierarchyEntity>;
    private _GetAllDomains;
    /**
     * Get list of all domains
     * @returns Domain types (scripts, extra tables, etc)
     */
    GetAllDomains(webapi_options?: base.WebApiRequestOptions): Promise<enums.Domain[]>;
    private _GetAllInDomain;
    /**
     * Get all items in a domain
     * @param request - Domain, Children
     * @returns All items and child items within a domain
     */
    GetAllInDomain(request: carriers.List_GetAllInDomainRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HierarchyEntity[]>;
    /**
     * Get all items in a domain
     * @param domain - Type of items to get (scripts, extra tables, etc)
     * @param children - Include sub-items?
     * @returns All items and child items within a domain
     */
    GetAllInDomain(domain: enums.Domain, children: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HierarchyEntity[]>;
    private _GetHierarchyFromPath;
    /**
     * Get a hierarchy item from a path
     * @param request - Domain, Path, Children
     * @returns The hierarchy node at the path
     */
    GetHierarchyFromPath(request: carriers.List_GetHierarchyFromPathRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HierarchyEntity>;
    /**
     * Get a hierarchy item from a path
     * @param domain - Type of items to get
     * @param path - Hierarchy path to item
     * @param children - Include sub-items?
     * @returns The hierarchy node at the path
     */
    GetHierarchyFromPath(domain: enums.Domain, path: string, children: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HierarchyEntity>;
    private _AddHierarchyToPath;
    /**
     * Add a hierarchy item to a path
     * @param request - Domain, Path, Name
     * @returns The hierarchy node added to the path
     */
    AddHierarchyToPath(request: carriers.List_AddHierarchyToPathRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HierarchyEntity>;
    /**
     * Add a hierarchy item to a path
     * @param domain - Type of items to get
     * @param path - Hierarchy path to parent item
     * @param name - Name of node to add
     * @returns The hierarchy node added to the path
     */
    AddHierarchyToPath(domain: enums.Domain, path: string, name: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HierarchyEntity>;
    private _UpdateHierarchyFromPath;
    /**
     * Update a hierarchy item from a path
     * @param request - Domain, Path, Entity
     * @returns The hierarchy node updated to the path
     */
    UpdateHierarchyFromPath(request: carriers.List_UpdateHierarchyFromPathRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HierarchyEntity>;
    /**
     * Update a hierarchy item from a path
     * @param domain - Type of items to get
     * @param path - Hierarchy path to item
     * @param entity - The hierarchy node to update.
     * @returns The hierarchy node updated to the path
     */
    UpdateHierarchyFromPath(domain: enums.Domain, path: string, entity: carriers.HierarchyEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HierarchyEntity>;
    private _DeleteHierarchyFromPath;
    /**
     * Remove a hierarchy item and its children from a path
     * @param request - Domain, Path
     * @returns This method has no return value
     */
    DeleteHierarchyFromPath(request: carriers.List_DeleteHierarchyFromPathRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Remove a hierarchy item and its children from a path
     * @param domain - Type of items to get
     * @param path - Hierarchy path to item to delete
     * @returns This method has no return value
     */
    DeleteHierarchyFromPath(domain: enums.Domain, path: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetLanguageInfo(languageInfoId: number, options?: base.WebApiRequestOptions): Promise<carriers.LanguageInfo>;
    GetLanguageInfoList(languageInfoIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.LanguageInfo[]>;
    private _GetInstalledLanguages;
    /**
     * Returns the list of all languages installed in this database.
     * @returns Array of installed languages
     */
    GetInstalledLanguages(webapi_options?: base.WebApiRequestOptions): Promise<carriers.LanguageInfo[]>;
    GetLegalBase(legalBaseId: number, options?: base.WebApiRequestOptions): Promise<carriers.LegalBase>;
    private _SaveLegalBase;
    /**
     *
     * @param request - LegalBase
     * @returns
     */
    SaveLegalBase(request: carriers.List_SaveLegalBaseRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LegalBase>;
    /**
     *
     * @param legalBase -
     * @returns
     */
    SaveLegalBase(legalBase: carriers.LegalBase, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LegalBase>;
    GetLegalBaseList(legalBaseIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.LegalBase[]>;
    private _GetLegalBases;
    /**
     * Returns all defined bases.
     * @returns An array of all defined bases
     */
    GetLegalBases(webapi_options?: base.WebApiRequestOptions): Promise<carriers.LegalBase[]>;
    GetLink(linkId: number, options?: base.WebApiRequestOptions): Promise<carriers.Link>;
    GetLinkList(linkIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.Link[]>;
    GetListEntity(listEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.ListEntity>;
    private _GetListDefinitions;
    /**
     * Get a list of the lists - built-in and user-defined.
     * @param request - IncludeDeleted
     * @returns The list definitions
     */
    GetListDefinitions(request: carriers.List_GetListDefinitionsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListEntity[]>;
    /**
     * Get a list of the lists - built-in and user-defined.
     * @param includeDeleted - Include deleted items in result?
     * @returns The list definitions
     */
    GetListDefinitions(includeDeleted: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListEntity[]>;
    private _GetListEntityByName;
    /**
     * Gets a ListEntity resolved by the provided name.
     * @param request - Name
     * @returns A ListEntity or null.
     */
    GetListEntityByName(request: carriers.List_GetListEntityByNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListEntity>;
    /**
     * Gets a ListEntity resolved by the provided name.
     * @param name - The name of the list to look up.
     * @returns A ListEntity or null.
     */
    GetListEntityByName(name: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListEntity>;
    private _SaveListEntityByName;
    /**
     * Save a ListEntity resolved by the provided name.
     * @param request - Name, ListEntity
     * @returns A ListEntity or null.
     */
    SaveListEntityByName(request: carriers.List_SaveListEntityByNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListEntity>;
    /**
     * Save a ListEntity resolved by the provided name.
     * @param name - The name of the list to save.
     * @param listEntity - The ListEntity to save.
     * @returns A ListEntity or null.
     */
    SaveListEntityByName(name: string, listEntity: carriers.ListEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListEntity>;
    private _DeleteListEntityByName;
    /**
     * Delete a ListEntity resolved by the provided name.
     * @param request - Name
     * @returns This method has no return value
     */
    DeleteListEntityByName(request: carriers.List_DeleteListEntityByNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Delete a ListEntity resolved by the provided name.
     * @param name - The name of the list to delete.
     * @returns This method has no return value
     */
    DeleteListEntityByName(name: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SaveListItemEntity;
    /**
     * Save the ListItemEntity.
     * @param request - ListItemEntity
     * @returns The saved ListItemEntity.
     */
    SaveListItemEntity(request: carriers.List_SaveListItemEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity>;
    /**
     * Save the ListItemEntity.
     * @param listItemEntity - The ListItemEntity to save.
     * @returns The saved ListItemEntity.
     */
    SaveListItemEntity(listItemEntity: carriers.ListItemEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity>;
    private _SortListItems;
    /**
     * Sort the list items in a given list alphabetically
     * @param request - UdListDefinitionId, CultureName
     * @returns
     */
    SortListItems(request: carriers.List_SortListItemsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Sort the list items in a given list alphabetically
     * @param udListDefinitionId - Id of the list you want to sort. Negative numbers indicate TableNumber value instead of UDListDefId. e.g. -64 = category.
     * @param cultureName - Sort list in this language
     * @returns
     */
    SortListItems(udListDefinitionId: number, cultureName: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _MoveListItem;
    /**
     * Move a list item up or down in the list based on rank
     * @param request - UdListDefinitionId, ListItemId, Direction
     * @returns
     */
    MoveListItem(request: carriers.List_MoveListItemRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Move a list item up or down in the list based on rank
     * @param udListDefinitionId - Id of the list. Negative numbers indicate TableNumber value instead of UDListDefId. e.g. -64 = category.
     * @param listItemId - Id of the list item
     * @param direction - -1 moves the item up one position, 1 moves the item down one position
     * @returns
     */
    MoveListItem(udListDefinitionId: number, listItemId: number, direction: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetVisibleForUserGroups;
    /**
     * List of User groups that this list item is visible for
     * @param request - UdListDefinitionId, ListItemId
     * @returns Array of selectable user groups
     */
    GetVisibleForUserGroups(request: carriers.List_GetVisibleForUserGroupsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    /**
     * List of User groups that this list item is visible for
     * @param udListDefinitionId - The id of the list. Negative numbers indicate TableNumber value instead of UDListDefId. e.g. -64 = category.
     * @param listItemId - The id of the list item
     * @returns Array of selectable user groups
     */
    GetVisibleForUserGroups(udListDefinitionId: number, listItemId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    private _GetVisibleForUserGroupsFromListName;
    /**
     * List of User groups that this list item is visible for
     * @param request - UdListDefinitionName, ListItemId
     * @returns Array of selectable user groups
     */
    GetVisibleForUserGroupsFromListName(request: carriers.List_GetVisibleForUserGroupsFromListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    /**
     * List of User groups that this list item is visible for
     * @param udListDefinitionName - The name of the list definition.
     * @param listItemId - The id of the list item
     * @returns Array of selectable user groups
     */
    GetVisibleForUserGroupsFromListName(udListDefinitionName: string, listItemId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    private _SetVisibleForUserGroups;
    /**
     * Update User groups that this list item is visible for
     * @param request - UdListDefinitionId, ListItemId, UserGroups
     * @returns Array of selectable user groups
     */
    SetVisibleForUserGroups(request: carriers.List_SetVisibleForUserGroupsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    /**
     * Update User groups that this list item is visible for
     * @param udListDefinitionId - The id of the list. Negative numbers indicate TableNumber value instead of UDListDefId. e.g. -64 = category.
     * @param listItemId - The id of the list item
     * @param userGroups - The selectable user groups.
     * @returns Array of selectable user groups
     */
    SetVisibleForUserGroups(udListDefinitionId: number, listItemId: number, userGroups: carriers.SelectableMDOListItem[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    private _SetVisibleForUserGroupsFromListName;
    /**
     * Update User groups that this list item is visible for
     * @param request - UdListDefinitionName, ListItemId, UserGroups
     * @returns Array of selectable user groups
     */
    SetVisibleForUserGroupsFromListName(request: carriers.List_SetVisibleForUserGroupsFromListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    /**
     * Update User groups that this list item is visible for
     * @param udListDefinitionName - The name of the list definition, indicating which list to update the items from.
     * @param listItemId - The id of the list item
     * @param userGroups - The selectable user groups.
     * @returns Array of selectable user groups
     */
    SetVisibleForUserGroupsFromListName(udListDefinitionName: string, listItemId: number, userGroups: carriers.SelectableMDOListItem[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    private _SetVisibleForUserGroup;
    /**
     * Set a group which this list item should be visible for
     * @param request - UdListDefinitionId, ListItemId, UserGroupId, Enable
     * @returns
     */
    SetVisibleForUserGroup(request: carriers.List_SetVisibleForUserGroupRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set a group which this list item should be visible for
     * @param udListDefinitionId - The id of the list. Negative numbers indicate TableNumber value instead of UDListDefId. e.g. -64 = category.
     * @param listItemId - The id of the list item
     * @param userGroupId - The id of the user groups to set for this list item
     * @param enable - Set to true to enable, false to disable
     * @returns
     */
    SetVisibleForUserGroup(udListDefinitionId: number, listItemId: number, userGroupId: number[], enable: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetListItemsForUserGroup;
    /**
     * List of list items that is visible in the usergroup
     * @param request - UdListDefinitionId, GroupId
     * @returns Array of selectable list items
     */
    GetListItemsForUserGroup(request: carriers.List_GetListItemsForUserGroupRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    /**
     * List of list items that is visible in the usergroup
     * @param udListDefinitionId - The id of the list. Negative numbers indicate TableNumber value instead of UDListDefId. e.g. -64 = category.
     * @param groupId - The id of the usergroup
     * @returns Array of selectable list items
     */
    GetListItemsForUserGroup(udListDefinitionId: number, groupId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    private _GetListItemsForUserGroupFromListName;
    /**
     * List of list items that is visible in the usergroup
     * @param request - UdListDefinitionName, GroupId
     * @returns Array of selectable list items
     */
    GetListItemsForUserGroupFromListName(request: carriers.List_GetListItemsForUserGroupFromListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    /**
     * List of list items that is visible in the usergroup
     * @param udListDefinitionName - The name of the list definition.
     * @param groupId - The id of the usergroup
     * @returns Array of selectable list items
     */
    GetListItemsForUserGroupFromListName(udListDefinitionName: string, groupId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    private _SetListItemsForUserGroup;
    /**
     * Update listItems that will be visible for this usergroup
     * @param request - UdListDefinitionId, UsergroupId, ListItemIds, Enable
     * @returns
     */
    SetListItemsForUserGroup(request: carriers.List_SetListItemsForUserGroupRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Update listItems that will be visible for this usergroup
     * @param udListDefinitionId - The id of the list. Negative numbers indicate TableNumber value instead of UDListDefId. e.g. -64 = category.
     * @param usergroupId - The id of the userGroup
     * @param listItemIds - The id of the list items.
     * @param enable - True to enable, false to disable
     * @returns
     */
    SetListItemsForUserGroup(udListDefinitionId: number, usergroupId: number, listItemIds: number[], enable: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SetListItemsForUserGroupFromListName;
    /**
     * Update listItems that will be visible for this usergroup
     * @param request - UdListDefinitionName, UsergroupId, ListItemsID, Enable
     * @returns
     */
    SetListItemsForUserGroupFromListName(request: carriers.List_SetListItemsForUserGroupFromListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Update listItems that will be visible for this usergroup
     * @param udListDefinitionName - The name of the list definition.
     * @param usergroupId - The id of the userGroup
     * @param listItemsID - The id of the list items.
     * @param enable - True to enable, false to disable
     * @returns
     */
    SetListItemsForUserGroupFromListName(udListDefinitionName: string, usergroupId: number, listItemsID: number[], enable: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetHeadings;
    /**
     * Gets a selectable MDO list of the headings for this list item
     * @param request - UdListDefinitionId, ListItemId, ShowDeleted
     * @returns Array of headings
     */
    GetHeadings(request: carriers.List_GetHeadingsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    /**
     * Gets a selectable MDO list of the headings for this list item
     * @param udListDefinitionId - The id of the list. Negative numbers indicate TableNumber value instead of UDListDefId. e.g. -64 = category.
     * @param listItemId - The id of the list item
     * @param showDeleted - Set to true if you want deleted headings
     * @returns Array of headings
     */
    GetHeadings(udListDefinitionId: number, listItemId: number, showDeleted: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    private _GetHeadingsForListItemFromListName;
    /**
     * Gets a selectable MDO list of the headings for this list item
     * @param request - UdListDefinitionName, ListItemId, ShowDeleted
     * @returns Array of headings
     */
    GetHeadingsForListItemFromListName(request: carriers.List_GetHeadingsForListItemFromListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    /**
     * Gets a selectable MDO list of the headings for this list item
     * @param udListDefinitionName - The name of the list definition, indicating which list to delete the items from.
     * @param listItemId - The id of the list item
     * @param showDeleted - Set to true if you want deleted headings
     * @returns Array of headings
     */
    GetHeadingsForListItemFromListName(udListDefinitionName: string, listItemId: number, showDeleted: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    private _SaveHeadingsForListItemFromListDefinition;
    /**
     * Saves the active headings for the list item.
     * @param request - UdListDefinitionId, ListItemId, Headings
     * @returns Array of headings
     */
    SaveHeadingsForListItemFromListDefinition(request: carriers.List_SaveHeadingsForListItemFromListDefinitionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    /**
     * Saves the active headings for the list item.
     * @param udListDefinitionId - The id of the list definition, indicating which list to delete the items from. Negative numbers indicate TableNumber value instead of UDListDefId. e.g. -64 = category.
     * @param listItemId - The identity of the list item to delete
     * @param headings - The headings to save.
     * @returns Array of headings
     */
    SaveHeadingsForListItemFromListDefinition(udListDefinitionId: number, listItemId: number, headings: carriers.SelectableMDOListItem[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    private _SaveHeadingsForListItemFromListName;
    /**
     * Saves the headings for the list item.
     * @param request - UdListDefinitionName, ListItemId, Headings
     * @returns Array of selectable headings
     */
    SaveHeadingsForListItemFromListName(request: carriers.List_SaveHeadingsForListItemFromListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    /**
     * Saves the headings for the list item.
     * @param udListDefinitionName - The name of the list definition, indicating which list to update.
     * @param listItemId - The identity of the list item
     * @param headings - The headings to save.
     * @returns Array of selectable headings
     */
    SaveHeadingsForListItemFromListName(udListDefinitionName: string, listItemId: number, headings: carriers.SelectableMDOListItem[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    private _GetListItemsForHeading;
    /**
     * List of list items that is selected if under this heading
     * @param request - UdListDefinitionId, HeadingId
     * @returns Array of selectable list items
     */
    GetListItemsForHeading(request: carriers.List_GetListItemsForHeadingRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    /**
     * List of list items that is selected if under this heading
     * @param udListDefinitionId - The id of the list. Negative numbers indicate TableNumber value instead of UDListDefId. e.g. -64 = category.
     * @param headingId - The id of the heading
     * @returns Array of selectable list items
     */
    GetListItemsForHeading(udListDefinitionId: number, headingId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    private _GetListItemsForHeadingFromListName;
    /**
     * List of list items that is selected if under this heading
     * @param request - UdListDefinitionName, HeadingId
     * @returns Array of selectable list items
     */
    GetListItemsForHeadingFromListName(request: carriers.List_GetListItemsForHeadingFromListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    /**
     * List of list items that is selected if under this heading
     * @param udListDefinitionName - The name of the list definition.
     * @param headingId - The id of the heading
     * @returns Array of selectable list items
     */
    GetListItemsForHeadingFromListName(udListDefinitionName: string, headingId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    private _SetListItemsForHeading;
    /**
     * Update listItems that will be visible for this usergroup
     * @param request - UdListDefinitionId, HeadingId, ListItemIds, Enable
     * @returns
     */
    SetListItemsForHeading(request: carriers.List_SetListItemsForHeadingRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Update listItems that will be visible for this usergroup
     * @param udListDefinitionId - The id of the list. Negative numbers indicate TableNumber value instead of UDListDefId. e.g. -64 = category.
     * @param headingId - The id of the heading
     * @param listItemIds - The ids of the list items.
     * @param enable - True to enable, false to disable
     * @returns
     */
    SetListItemsForHeading(udListDefinitionId: number, headingId: number, listItemIds: number[], enable: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SetListItemsForHeadingFromListName;
    /**
     * Update listItems under this heading
     * @param request - UdListDefinitionName, HeadingId, ListItemIds, Enable
     * @returns
     */
    SetListItemsForHeadingFromListName(request: carriers.List_SetListItemsForHeadingFromListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Update listItems under this heading
     * @param udListDefinitionName - The name of the list definition.
     * @param headingId - The id of the heading
     * @param listItemIds - The ids of the list items.
     * @param enable - True to enable, false to disable
     * @returns
     */
    SetListItemsForHeadingFromListName(udListDefinitionName: string, headingId: number, listItemIds: number[], enable: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SetHeadingsForListItem;
    /**
     * Set headings which this list item should be listed under
     * @param request - UdListDefinitionId, ListItemId, HeadingIds, Enable
     * @returns
     */
    SetHeadingsForListItem(request: carriers.List_SetHeadingsForListItemRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set headings which this list item should be listed under
     * @param udListDefinitionId - The id of the list. Negative numbers indicate TableNumber value instead of UDListDefId. e.g. -64 = category.
     * @param listItemId - The id of the list item
     * @param headingIds - The ids of the headings to set for this list item
     * @param enable - Set to true to enable, false to disable
     * @returns
     */
    SetHeadingsForListItem(udListDefinitionId: number, listItemId: number, headingIds: number[], enable: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SetRankOnHeadings;
    /**
     * Set rank order on headings
     * @param request - UdListDefinitionId, HeadingIds
     * @returns
     */
    SetRankOnHeadings(request: carriers.List_SetRankOnHeadingsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set rank order on headings
     * @param udListDefinitionId - The id of the list. Negative numbers indicate TableNumber value instead of UDListDefId. e.g. -64 = category.
     * @param headingIds - The ids of the headings in the order you want
     * @returns
     */
    SetRankOnHeadings(udListDefinitionId: number, headingIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SetRankOnSaleActivity;
    /**
     * Set rank order on sale activity
     * @param request - SaleTypeStageLinkId, ItemsIds
     * @returns
     */
    SetRankOnSaleActivity(request: carriers.List_SetRankOnSaleActivityRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set rank order on sale activity
     * @param saleTypeStageLinkId - The id of the list
     * @param itemsIds - The ids of the items in the order you want
     * @returns
     */
    SetRankOnSaleActivity(saleTypeStageLinkId: number, itemsIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SetRankOnSaleDocument;
    /**
     * Set rank order on project document
     * @param request - SaleTypeStageLinkId, ItemsIds
     * @returns
     */
    SetRankOnSaleDocument(request: carriers.List_SetRankOnSaleDocumentRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set rank order on project document
     * @param saleTypeStageLinkId - The id of the list
     * @param itemsIds - The ids of the items in the order you want
     * @returns
     */
    SetRankOnSaleDocument(saleTypeStageLinkId: number, itemsIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SetRankOnProjectActivity;
    /**
     * Set rank order on project activity
     * @param request - ProjectTypeStatusLinkId, ItemsIds
     * @returns
     */
    SetRankOnProjectActivity(request: carriers.List_SetRankOnProjectActivityRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set rank order on project activity
     * @param projectTypeStatusLinkId - The id of the list
     * @param itemsIds - The ids of the items in the order you want
     * @returns
     */
    SetRankOnProjectActivity(projectTypeStatusLinkId: number, itemsIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SetRankOnProjectDocument;
    /**
     * Set rank order on project document
     * @param request - ProjectTypeStatusLinkId, ItemsIds
     * @returns
     */
    SetRankOnProjectDocument(request: carriers.List_SetRankOnProjectDocumentRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set rank order on project document
     * @param projectTypeStatusLinkId - The id of the list
     * @param itemsIds - The ids of the items in the order you want
     * @returns
     */
    SetRankOnProjectDocument(projectTypeStatusLinkId: number, itemsIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetAllFromListDefinition;
    /**
     * Get all list items for the specified list defintion
     * @param request - UdListDefinitionId, IncludeDeleted
     * @returns The list items
     */
    GetAllFromListDefinition(request: carriers.List_GetAllFromListDefinitionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity[]>;
    /**
     * Get all list items for the specified list defintion
     * @param udListDefinitionId - The id of the list definition, indicating which list to get the item from. Negative numbers indicate TableNumber value instead of UDListDefId. e.g. -64 = category.
     * @param includeDeleted - Include deleted items in result?
     * @returns The list items
     */
    GetAllFromListDefinition(udListDefinitionId: number, includeDeleted: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity[]>;
    private _GetAllFromListName;
    /**
     * Get all list items for the specified list defintion
     * @param request - UdListDefinitionName, IncludeDeleted
     * @returns The list items
     */
    GetAllFromListName(request: carriers.List_GetAllFromListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity[]>;
    /**
     * Get all list items for the specified list defintion
     * @param udListDefinitionName - The name of the list definition, indicating which list to get the item from.
     * @param includeDeleted - Include deleted items in result?
     * @returns The list items
     */
    GetAllFromListName(udListDefinitionName: string, includeDeleted: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity[]>;
    private _SaveAllFromListDefinition;
    /**
     * Save all list items for the specified list defintion
     * @param request - UdListDefinitionId, Items
     * @returns The list items
     */
    SaveAllFromListDefinition(request: carriers.List_SaveAllFromListDefinitionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity[]>;
    /**
     * Save all list items for the specified list defintion
     * @param udListDefinitionId - The id of the list definition, indicating which list to save the items to. Negative numbers indicate TableNumber value instead of UDListDefId. e.g. -64 = category.
     * @param items - The list items
     * @returns The list items
     */
    SaveAllFromListDefinition(udListDefinitionId: number, items: carriers.ListItemEntity[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity[]>;
    private _SaveAllFromListName;
    /**
     * Save all list items for the specified list defintion
     * @param request - UdListDefinitionName, Items
     * @returns The list items
     */
    SaveAllFromListName(request: carriers.List_SaveAllFromListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity[]>;
    /**
     * Save all list items for the specified list defintion
     * @param udListDefinitionName - The name of the list definition, indicating which list to save the items to.
     * @param items - The list items
     * @returns The list items
     */
    SaveAllFromListName(udListDefinitionName: string, items: carriers.ListItemEntity[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity[]>;
    private _AddFromListDefinition;
    /**
     * Save a new list item for the specified list defintion
     * @param request - UdListDefinitionId, Item
     * @returns The saved list item
     */
    AddFromListDefinition(request: carriers.List_AddFromListDefinitionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity>;
    /**
     * Save a new list item for the specified list defintion
     * @param udListDefinitionId - The name of the list definition, indicating which list to save the item to.
     * @param item - The item to save
     * @returns The saved list item
     */
    AddFromListDefinition(udListDefinitionId: number, item: carriers.ListItemEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity>;
    private _AddFromListName;
    /**
     * Save a new list item for the specified list defintion
     * @param request - UdListDefinitionName, Item
     * @returns The saved list item
     */
    AddFromListName(request: carriers.List_AddFromListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity>;
    /**
     * Save a new list item for the specified list defintion
     * @param udListDefinitionName - The name of the list definition, indicating which list to save the item to.
     * @param item - The item to save
     * @returns The saved list item
     */
    AddFromListName(udListDefinitionName: string, item: carriers.ListItemEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity>;
    private _DeleteAllFromListDefinition;
    /**
     * Marks all items in the list deleted
     * @param request - UdListDefinitionId
     * @returns This method has no return value
     */
    DeleteAllFromListDefinition(request: carriers.List_DeleteAllFromListDefinitionRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Marks all items in the list deleted
     * @param udListDefinitionId - The id of the list definition, indicating which list to delete the items from. Negative numbers indicate TableNumber value instead of UDListDefId. e.g. -64 = category.
     * @returns This method has no return value
     */
    DeleteAllFromListDefinition(udListDefinitionId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _DeleteAllFromListName;
    /**
     * Marks all items in the list deleted
     * @param request - UdListDefinitionName
     * @returns This method has no return value
     */
    DeleteAllFromListName(request: carriers.List_DeleteAllFromListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Marks all items in the list deleted
     * @param udListDefinitionName - The name of the list definition, indicating which list to delete the items from.
     * @returns This method has no return value
     */
    DeleteAllFromListName(udListDefinitionName: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetFromListDefinition;
    /**
     * Get a list item for the specified list defintion
     * @param request - Id, UdListDefinitionId
     * @returns The loaded list item
     */
    GetFromListDefinition(request: carriers.List_GetFromListDefinitionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity>;
    /**
     * Get a list item for the specified list defintion
     * @param id - The identity of the list item to load
     * @param udListDefinitionId - The id of the list definition, indicating which list to get the item from. Negative numbers indicate TableNumber value instead of UDListDefId. e.g. -64 = category.
     * @returns The loaded list item
     */
    GetFromListDefinition(id: number, udListDefinitionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity>;
    private _GetFromListName;
    /**
     * Get a list item for the specified list defintion
     * @param request - Id, UdListDefinitionName
     * @returns The loaded list item
     */
    GetFromListName(request: carriers.List_GetFromListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity>;
    /**
     * Get a list item for the specified list defintion
     * @param id - The identity of the list item to load
     * @param udListDefinitionName - The name of the list definition, indicating which list to get the item from.
     * @returns The loaded list item
     */
    GetFromListName(id: number, udListDefinitionName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity>;
    private _SaveFromListDefinition;
    /**
     * Save a list item for the specified list defintion
     * @param request - Id, UdListDefinitionId, Item
     * @returns The saved list item
     */
    SaveFromListDefinition(request: carriers.List_SaveFromListDefinitionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity>;
    /**
     * Save a list item for the specified list defintion
     * @param id - The identity of the list item to load
     * @param udListDefinitionId - The id of the list definition, indicating which list to save the item to. Negative numbers indicate TableNumber value instead of UDListDefId. e.g. -64 = category.
     * @param item - The item to save
     * @returns The saved list item
     */
    SaveFromListDefinition(id: number, udListDefinitionId: number, item: carriers.ListItemEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity>;
    private _SaveFromListName;
    /**
     * Save a list item for the specified list defintion
     * @param request - Id, UdListDefinitionName, Item
     * @returns The saved list item
     */
    SaveFromListName(request: carriers.List_SaveFromListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity>;
    /**
     * Save a list item for the specified list defintion
     * @param id - The identity of the list item to load
     * @param udListDefinitionName - The name of the list definition, indicating which list to save the item to.
     * @param item - The item to save
     * @returns The saved list item
     */
    SaveFromListName(id: number, udListDefinitionName: string, item: carriers.ListItemEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItemEntity>;
    private _DeleteFromListDefinition;
    /**
     * Delete a list item from the specified list defintion
     * @param request - Id, UdListDefinitionId
     * @returns This method has no return value
     */
    DeleteFromListDefinition(request: carriers.List_DeleteFromListDefinitionRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Delete a list item from the specified list defintion
     * @param id - The identity of the list item to delete
     * @param udListDefinitionId - The id of the list definition, indicating which list to delete the items from. Negative numbers indicate TableNumber value instead of UDListDefId. e.g. -64 = category.
     * @returns This method has no return value
     */
    DeleteFromListDefinition(id: number, udListDefinitionId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _DeleteFromListName;
    /**
     * Delete a list item from the specified list defintion
     * @param request - Id, UdListDefinitionName
     * @returns This method has no return value
     */
    DeleteFromListName(request: carriers.List_DeleteFromListNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Delete a list item from the specified list defintion
     * @param id - The identity of the list item to delete
     * @param udListDefinitionName - The name of the list definition, indicating which list to delete the items from.
     * @returns This method has no return value
     */
    DeleteFromListName(id: number, udListDefinitionName: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetHeadingsFromName;
    /**
     * Gets headings for list resolved by the provided name.
     * @param request - Name
     * @returns List of headings
     */
    GetHeadingsFromName(request: carriers.List_GetHeadingsFromNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HeadingEntity[]>;
    /**
     * Gets headings for list resolved by the provided name.
     * @param name - The name of the list to look up.
     * @returns List of headings
     */
    GetHeadingsFromName(name: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HeadingEntity[]>;
    private _GetHeadingsFromListDefinition;
    /**
     * Gets headings for list resolved by the provided id.
     * @param request - Id
     * @returns List of headings
     */
    GetHeadingsFromListDefinition(request: carriers.List_GetHeadingsFromListDefinitionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HeadingEntity[]>;
    /**
     * Gets headings for list resolved by the provided id.
     * @param id - The id of the list to look up.
     * @returns List of headings
     */
    GetHeadingsFromListDefinition(id: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HeadingEntity[]>;
    private _SaveHeadingsFromName;
    /**
     * Save headings for list resolved by the provided name.
     * @param request - Name, Entities
     * @returns List of headings
     */
    SaveHeadingsFromName(request: carriers.List_SaveHeadingsFromNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HeadingEntity[]>;
    /**
     * Save headings for list resolved by the provided name.
     * @param name - The name of the list to look up.
     * @param entities - The headings to save
     * @returns List of headings
     */
    SaveHeadingsFromName(name: string, entities: carriers.HeadingEntity[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.HeadingEntity[]>;
    private _SaveHeadingsFromListDefinition;
    /**
     * Save headings for list resolved by the provided id.
     * @param request - Id, Entities
     * @returns List of headings
     */
    SaveHeadingsFromListDefinition(request: carriers.List_SaveHeadingsFromListDefinitionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HeadingEntity[]>;
    /**
     * Save headings for list resolved by the provided id.
     * @param id - The id of the list to look up.
     * @param entities - The headings to save
     * @returns List of headings
     */
    SaveHeadingsFromListDefinition(id: number, entities: carriers.HeadingEntity[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.HeadingEntity[]>;
    private _SaveHeadingFromName;
    /**
     * Save new heading for list resolved by the provided name.
     * @param request - Name, Entity
     * @returns The saved entity.
     */
    SaveHeadingFromName(request: carriers.List_SaveHeadingFromNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HeadingEntity>;
    /**
     * Save new heading for list resolved by the provided name.
     * @param name - The name of the list to look up.
     * @param entity - The new heading to save
     * @returns The saved entity.
     */
    SaveHeadingFromName(name: string, entity: carriers.HeadingEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HeadingEntity>;
    private _SaveHeadingFromListDefinition;
    /**
     * Save new heading for list resolved by the provided id.
     * @param request - Id, Entity
     * @returns The saved entity.
     */
    SaveHeadingFromListDefinition(request: carriers.List_SaveHeadingFromListDefinitionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HeadingEntity>;
    /**
     * Save new heading for list resolved by the provided id.
     * @param id - The id of the list to look up.
     * @param entity - The new heading to save
     * @returns The saved entity.
     */
    SaveHeadingFromListDefinition(id: number, entity: carriers.HeadingEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.HeadingEntity>;
    private _DeleteAllHeadingsFromName;
    /**
     * Delete all headings for list resolved by the provided name.
     * @param request - Name
     * @returns This method has no return value
     */
    DeleteAllHeadingsFromName(request: carriers.List_DeleteAllHeadingsFromNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Delete all headings for list resolved by the provided name.
     * @param name - The name of the list to look up.
     * @returns This method has no return value
     */
    DeleteAllHeadingsFromName(name: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _DeleteAllHeadingsFromListDefinition;
    /**
     * Delete all headings for list resolved by the provided id.
     * @param request - Id
     * @returns This method has no return value
     */
    DeleteAllHeadingsFromListDefinition(request: carriers.List_DeleteAllHeadingsFromListDefinitionRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Delete all headings for list resolved by the provided id.
     * @param id - The id of the list to look up.
     * @returns This method has no return value
     */
    DeleteAllHeadingsFromListDefinition(id: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetLocalizedText(localizedTextId: number, options?: base.WebApiRequestOptions): Promise<carriers.LocalizedText>;
    private _GetLocalizedTextByType;
    /**
     * Returns a localized text based on the resource id for the selected language.
     * @param request - TextType, ResourceId, LanguageId
     * @returns A LocalizedText carrier.
     */
    GetLocalizedTextByType(request: carriers.List_GetLocalizedTextByTypeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LocalizedText>;
    /**
     * Returns a localized text based on the resource id for the selected language.
     * @param textType - Type of the localized text
     * @param resourceId - The resource id. This id has different meaning based on the LocalizedTextType.
     * @param languageId - The LCID number of the language.
     * @returns A LocalizedText carrier.
     */
    GetLocalizedTextByType(textType: enums.LocalizedTextType, resourceId: number, languageId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LocalizedText>;
    GetLocalizedTextList(localizedTextIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.LocalizedText[]>;
    private _GetLocalizedTexts;
    /**
     * Gets all localized texts in the CRM database.
     * @returns Array of LocalizedText objects
     */
    GetLocalizedTexts(webapi_options?: base.WebApiRequestOptions): Promise<carriers.LocalizedText[]>;
    private _GetLocalizedTextsByLanguageId;
    /**
     * Gets all localized text belonging to a specific language.
     * @param request - LanguageId
     * @returns Array of LocalizedText objects
     */
    GetLocalizedTextsByLanguageId(request: carriers.List_GetLocalizedTextsByLanguageIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LocalizedText[]>;
    /**
     * Gets all localized text belonging to a specific language.
     * @param languageId - The LCID number of the language.
     * @returns Array of LocalizedText objects
     */
    GetLocalizedTextsByLanguageId(languageId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LocalizedText[]>;
    private _GetLocalizedTextsByType;
    /**
     * Gets localized text by their type
     * @param request - TextTypes
     * @returns Array of LocalizedText objects
     */
    GetLocalizedTextsByType(request: carriers.List_GetLocalizedTextsByTypeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LocalizedText[]>;
    /**
     * Gets localized text by their type
     * @param textTypes - Array of LocalizedTextTypes. If null all texts are returned.
     * @returns Array of LocalizedText objects
     */
    GetLocalizedTextsByType(textTypes: enums.LocalizedTextType[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.LocalizedText[]>;
    GetMrMrs(mrMrsId: number, options?: base.WebApiRequestOptions): Promise<carriers.MrMrs>;
    GetMrMrsList(mrMrsIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.MrMrs[]>;
    private _GetMrMrses;
    /**
     * Returns all Items from the MrMrs table sorted by their value.
     * @returns All items from the MrMrs table sorted by their value
     */
    GetMrMrses(webapi_options?: base.WebApiRequestOptions): Promise<carriers.MrMrs[]>;
    GetPaymentTerm(paymentTermId: number, options?: base.WebApiRequestOptions): Promise<carriers.PaymentTerm>;
    private _GetPaymentTerms;
    /**
     * Returns all PaymentTerms in SuperOffice db.
     * @returns An array of all available PaymentTerms
     */
    GetPaymentTerms(webapi_options?: base.WebApiRequestOptions): Promise<carriers.PaymentTerm[]>;
    GetPaymentType(paymentTypeId: number, options?: base.WebApiRequestOptions): Promise<carriers.PaymentType>;
    private _GetPaymentTypes;
    /**
     * Returns all PaymentTypes in SuperOffice db.
     * @returns An array of all available PaymentTypes
     */
    GetPaymentTypes(webapi_options?: base.WebApiRequestOptions): Promise<carriers.PaymentType[]>;
    GetPosition(positionId: number, options?: base.WebApiRequestOptions): Promise<carriers.Position>;
    GetPositionList(positionIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.Position[]>;
    private _GetPositions;
    /**
     * Returns all the positions a person could have.
     * @returns An array of all available positions
     */
    GetPositions(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Position[]>;
    GetPriority(priorityId: number, options?: base.WebApiRequestOptions): Promise<carriers.Priority>;
    GetPriorityList(priorityIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.Priority[]>;
    private _GetPriorities;
    /**
     * Returns all priorities an appointment could have.
     * @returns An array of all available priorities
     */
    GetPriorities(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Priority[]>;
    GetProductCategory(productCategoryId: number, options?: base.WebApiRequestOptions): Promise<carriers.ProductCategory>;
    private _GetProductCategories;
    /**
     * Returns all ProductCategories in SuperOffice list.
     * @returns An array of all available ProductCategory
     */
    GetProductCategories(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProductCategory[]>;
    GetProductFamily(productFamilyId: number, options?: base.WebApiRequestOptions): Promise<carriers.ProductFamily>;
    private _GetProductFamilies;
    /**
     * Returns all ProductFamily in SuperOffice list.
     * @returns An array of all available ProductFamilies
     */
    GetProductFamilies(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProductFamily[]>;
    GetProductType(productTypeId: number, options?: base.WebApiRequestOptions): Promise<carriers.ProductType>;
    private _GetProductTypes;
    /**
     * Returns all ProductTypes in SuperOffice list.
     * @returns An array of all available ProductTypes
     */
    GetProductTypes(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProductType[]>;
    GetProjectStatus(projectStatusId: number, options?: base.WebApiRequestOptions): Promise<carriers.ProjectStatus>;
    private _DeleteProjectStatus;
    /**
     * Deletes a project status
     * @param request - ProjectStatusId
     * @returns No return
     */
    DeleteProjectStatus(request: carriers.List_DeleteProjectStatusRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Deletes a project status
     * @param projectStatusId - The project status id to delete
     * @returns No return
     */
    DeleteProjectStatus(projectStatusId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetProjectStatusList(projectStatusIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.ProjectStatus[]>;
    private _GetProjectStatuses;
    /**
     * Gets all items from the Project Status (ProjStatus) table.
     * @returns List of all Project statuses.
     */
    GetProjectStatuses(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProjectStatus[]>;
    GetProjectType(projectTypeId: number, options?: base.WebApiRequestOptions): Promise<carriers.ProjectType>;
    GetProjectTypeEntity(projectTypeEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.ProjectTypeEntity>;
    GetProjectTypeList(projectTypeIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.ProjectType[]>;
    private _GetProjectTypes;
    /**
     * Gets all items from the Project Type (ProjType) table.
     * @returns List of all project types.
     */
    GetProjectTypes(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProjectType[]>;
    private _SaveQuickReplies;
    /**
     * Method to save all quick replies for a given associate
     * @param request - QuickReplies
     * @returns
     */
    SaveQuickReplies(request: carriers.List_SaveQuickRepliesRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Method to save all quick replies for a given associate
     * @param quickReplies - Array of quick replies
     * @returns
     */
    SaveQuickReplies(quickReplies: carriers.QuickReply[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetQuickReplies;
    /**
     * Method to return all quick replies for a given associate
     * @returns Array of quick replies
     */
    GetQuickReplies(webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuickReply[]>;
    GetRating(ratingId: number, options?: base.WebApiRequestOptions): Promise<carriers.Rating>;
    GetRatingList(ratingIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.Rating[]>;
    private _GetRatings;
    /**
     * Returns all ratings
     * @returns Array of ratings
     */
    GetRatings(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Rating[]>;
    private _GetAllSaleStages;
    /**
     * Returns all ratings
     * @param request - IncludeDeleted
     * @returns Array of sale stage ratings
     */
    GetAllSaleStages(request: carriers.List_GetAllSaleStagesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleStageEntity[]>;
    /**
     * Returns all ratings
     * @param includeDeleted - Include deleted items in result?
     * @returns Array of sale stage ratings
     */
    GetAllSaleStages(includeDeleted: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleStageEntity[]>;
    GetReason(reasonId: number, options?: base.WebApiRequestOptions): Promise<carriers.Reason>;
    GetReasonList(reasonIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.Reason[]>;
    private _GetReasons;
    /**
     * Returns all reasons
     * @returns Array of reasons
     */
    GetReasons(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Reason[]>;
    GetQuoteApproveReason(quoteApproveReasonId: number, options?: base.WebApiRequestOptions): Promise<carriers.QuoteApproveReason>;
    GetQuoteApproveReasonList(quoteApproveReasonIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.QuoteApproveReason[]>;
    private _GetQuoteApproveReasons;
    /**
     * Returns all available QuoteApproveReasons.
     * @returns An array of all non-deleted QuoteApproveReason
     */
    GetQuoteApproveReasons(webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteApproveReason[]>;
    GetQuoteDenyReason(quoteDenyReasonId: number, options?: base.WebApiRequestOptions): Promise<carriers.QuoteDenyReason>;
    GetQuoteDenyReasonList(quoteDenyReasonIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.QuoteDenyReason[]>;
    private _GetQuoteDenyReasons;
    /**
     * Returns all available QuoteDenyReasons.
     * @returns An array of all non-deleted QuoteDenyReason
     */
    GetQuoteDenyReasons(webapi_options?: base.WebApiRequestOptions): Promise<carriers.QuoteDenyReason[]>;
    GetReasonSold(reasonSoldId: number, options?: base.WebApiRequestOptions): Promise<carriers.ReasonSold>;
    GetReasonSoldList(reasonSoldIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.ReasonSold[]>;
    GetReasonStalled(reasonStalledId: number, options?: base.WebApiRequestOptions): Promise<carriers.ReasonStalled>;
    GetReasonStalledList(reasonStalledIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.ReasonStalled[]>;
    GetRelationDefinitionEntity(relationDefinitionEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.RelationDefinitionEntity>;
    GetResourceEntity(resourceEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.ResourceEntity>;
    GetSaleStageEntity(saleStageEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.SaleStageEntity>;
    GetSaleType(saleTypeId: number, options?: base.WebApiRequestOptions): Promise<carriers.SaleType>;
    GetSaleTypeEntity(saleTypeEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.SaleTypeEntity>;
    GetSaleTypeList(saleTypeIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.SaleType[]>;
    private _GetAllSaleType;
    /**
     * Returns all sale types as simple list items
     * @returns Array of simple sale type list items
     */
    GetAllSaleType(webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleType[]>;
    private _GetAllSaleTypeEntities;
    /**
     * Returns all sale types as entities with stakeholders, guide and quote properties
     * @param request - IncludeDeleted
     * @returns Array of sale type entities with stakeholders, guide and quote properties
     */
    GetAllSaleTypeEntities(request: carriers.List_GetAllSaleTypeEntitiesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleTypeEntity[]>;
    /**
     * Returns all sale types as entities with stakeholders, guide and quote properties
     * @param includeDeleted - Include deleted items in result?
     * @returns Array of sale type entities with stakeholders, guide and quote properties
     */
    GetAllSaleTypeEntities(includeDeleted: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleTypeEntity[]>;
    GetSelectionCategory(selectionCategoryId: number, options?: base.WebApiRequestOptions): Promise<carriers.SelectionCategory>;
    GetSelectionCategoryList(selectionCategoryIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.SelectionCategory[]>;
    GetSource(sourceId: number, options?: base.WebApiRequestOptions): Promise<carriers.Source>;
    GetSourceList(sourceIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.Source[]>;
    private _GetSources;
    /**
     * Returns all sources
     * @returns Array of sources
     */
    GetSources(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Source[]>;
    GetTask(taskId: number, options?: base.WebApiRequestOptions): Promise<carriers.Task>;
    private _GetDocumentTemplateTask;
    /**
     * Returns a Document Template list item as a TaskListItem. The appointment&apos;s task is a Document template item when the appointment is a document.
     * @param request - DocumentTemplateId
     * @returns Document Template item as TaskListItem.
     */
    GetDocumentTemplateTask(request: carriers.List_GetDocumentTemplateTaskRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Task>;
    /**
     * Returns a Document Template list item as a TaskListItem. The appointment&apos;s task is a Document template item when the appointment is a document.
     * @param documentTemplateId - Id of the document template, i.e. the Appointment.TaskIdx
     * @returns Document Template item as TaskListItem.
     */
    GetDocumentTemplateTask(documentTemplateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Task>;
    GetTaskList(taskIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.Task[]>;
    private _GetTasks;
    /**
     * Returns all appointment tasks
     * @returns An array of all available tasks
     */
    GetTasks(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Task[]>;
    private _GetDocumentTemplatesTasks;
    /**
     * The appointment&apos;s task is a Document template item when the appointment is a document.
     * @returns Document Template list as a array of Tasks
     */
    GetDocumentTemplatesTasks(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Task[]>;
    private _GetAllTasks;
    /**
     * Returns all appointment tasks
     * @param request - IncludeDeleted
     * @returns An array of all available tasks
     */
    GetAllTasks(request: carriers.List_GetAllTasksRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TaskListItem[]>;
    /**
     * Returns all appointment tasks
     * @param includeDeleted - Include deleted items in result?
     * @returns An array of all available tasks
     */
    GetAllTasks(includeDeleted: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TaskListItem[]>;
    GetTicketCategory(ticketCategoryId: number, options?: base.WebApiRequestOptions): Promise<carriers.TicketCategory>;
    GetTicketCategoryEntity(ticketCategoryEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.TicketCategoryEntity>;
    private _MoveAllTickets;
    /**
     * Move all tickets from one ticket category to another
     * @param request - FromTicketCategoryId, ToTicketCategoryId
     * @returns This method has no return value
     */
    MoveAllTickets(request: carriers.List_MoveAllTicketsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Move all tickets from one ticket category to another
     * @param fromTicketCategoryId - The id of the category we want to move tickets from
     * @param toTicketCategoryId - The id of the category we want to move the tickets to
     * @returns This method has no return value
     */
    MoveAllTickets(fromTicketCategoryId: number, toTicketCategoryId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _RebuildFullnames;
    /**
     * Update the fullname field of all categories. Use this e.g. when changing parentId or renaming a category with children.
     * @returns This method has no return value
     */
    RebuildFullnames(webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetTicketCategoryList(ticketCategoryEntityIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.TicketCategoryEntity[]>;
    private _GetTicketCategories;
    /**
     *
     * @returns
     */
    GetTicketCategories(webapi_options?: base.WebApiRequestOptions): Promise<carriers.TicketCategoryEntity[]>;
    private _GetTicketCategoriesForUserGroups;
    /**
     * Ticket categories for user groups
     * @param request - UserGroupIds
     * @returns
     */
    GetTicketCategoriesForUserGroups(request: carriers.List_GetTicketCategoriesForUserGroupsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    /**
     * Ticket categories for user groups
     * @param userGroupIds - The ids of the user groups we want tickets categories from
     * @returns
     */
    GetTicketCategoriesForUserGroups(userGroupIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    private _SetTicketCategoriesForUserGroup;
    /**
     * Set ticket categories for one user group
     * @param request - UserGroupId, CategoryIds
     * @returns This method has no return value
     */
    SetTicketCategoriesForUserGroup(request: carriers.List_SetTicketCategoriesForUserGroupRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set ticket categories for one user group
     * @param userGroupId - The ids of the user groups we want tickets categories from
     * @param categoryIds - The ids of the user groups we want tickets categories from
     * @returns This method has no return value
     */
    SetTicketCategoriesForUserGroup(userGroupId: number, categoryIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _UpdateCategoryMemberships;
    /**
     * Updates category memberships
     * @param request - TicketCategoryId, MembershipsToAdd, MembershipsToUpdate, MembershipsToDelete
     * @returns This method has no return value
     */
    UpdateCategoryMemberships(request: carriers.List_UpdateCategoryMembershipsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Updates category memberships
     * @param ticketCategoryId - Id of ticket category to update memberships for
     * @param membershipsToAdd - List of memberships to add
     * @param membershipsToUpdate - List of memberships to update
     * @param membershipsToDelete - List of memberships to delete
     * @returns This method has no return value
     */
    UpdateCategoryMemberships(ticketCategoryId: number, membershipsToAdd: carriers.TicketCategoryMembershipEntity[], membershipsToUpdate: carriers.TicketCategoryMembershipEntity[], membershipsToDelete: carriers.TicketCategoryMembershipEntity[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetTicketPriority(ticketPriorityId: number, options?: base.WebApiRequestOptions): Promise<carriers.TicketPriority>;
    GetTicketPriorityEntity(ticketPriorityEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.TicketPriorityEntity>;
    private _SetTicketPrioritySortOrder;
    /**
     * This method will set sort order of ticket priority in a list
     * @param request - TicketPriorityId, SortOrder
     * @returns This method has no return value
     */
    SetTicketPrioritySortOrder(request: carriers.List_SetTicketPrioritySortOrderRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * This method will set sort order of ticket priority in a list
     * @param ticketPriorityId - Id of ticket priority
     * @param sortOrder - Indicates the sort order for this priority. 1 is first. Any records following this one will be renumbered automatically
     * @returns This method has no return value
     */
    SetTicketPrioritySortOrder(ticketPriorityId: number, sortOrder: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetTicketPriorityList(ticketPriorityIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.TicketPriority[]>;
    private _GetTicketPriorities;
    /**
     *
     * @returns
     */
    GetTicketPriorities(webapi_options?: base.WebApiRequestOptions): Promise<carriers.TicketPriority[]>;
    private _GetAllTicketPriorities;
    /**
     * Returns all available ticket priorities.
     * @param request - IncludeDeleted
     * @returns An array of all available ticket priorities
     */
    GetAllTicketPriorities(request: carriers.List_GetAllTicketPrioritiesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TicketPriorityEntity[]>;
    /**
     * Returns all available ticket priorities.
     * @param includeDeleted - Include deleted items in result?
     * @returns An array of all available ticket priorities
     */
    GetAllTicketPriorities(includeDeleted: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TicketPriorityEntity[]>;
    GetTicketStatusEntity(ticketStatusEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.TicketStatusEntity>;
    private _GlobalChangeTicketStatus;
    /**
     * This method will change all references from one ticket status to another. Typically used in conjuction with delete
     * @param request - FromTicketStatusId, ToTicketStatusId
     * @returns Does not return anything
     */
    GlobalChangeTicketStatus(request: carriers.List_GlobalChangeTicketStatusRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * This method will change all references from one ticket status to another. Typically used in conjuction with delete
     * @param fromTicketStatusId - The id of the ticket status to change from
     * @param toTicketStatusId - The id of the ticket status to change to
     * @returns Does not return anything
     */
    GlobalChangeTicketStatus(fromTicketStatusId: number, toTicketStatusId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SetTicketStatusSortOrder;
    /**
     * This method will set sort order of ticket status in a list
     * @param request - TicketStatusId, SortOrder
     * @returns This method has no return value
     */
    SetTicketStatusSortOrder(request: carriers.List_SetTicketStatusSortOrderRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * This method will set sort order of ticket status in a list
     * @param ticketStatusId - Id of ticket status
     * @param sortOrder - Indicates the sort order for this status. 1 is first. Any records following this one will be renumbered automatically
     * @returns This method has no return value
     */
    SetTicketStatusSortOrder(ticketStatusId: number, sortOrder: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetTicketStatusList(ticketStatusEntityIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.TicketStatusEntity[]>;
    private _GetTicketStatuses;
    /**
     *
     * @returns
     */
    GetTicketStatuses(webapi_options?: base.WebApiRequestOptions): Promise<carriers.TicketStatusEntity[]>;
    GetWebPanelEntity(webPanelEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.WebPanelEntity>;
    private _GenerateNavigationUrl;
    /**
     * This methods generates the navigation URL to be used to navigate to the panel
     * @param request - VisibleIn, WindowName
     * @returns The navigation url
     */
    GenerateNavigationUrl(request: carriers.List_GenerateNavigationUrlRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * This methods generates the navigation URL to be used to navigate to the panel
     * @param visibleIn - The visble in/navigation to generate for
     * @param windowName - The name of the web panel window
     * @returns The navigation url
     */
    GenerateNavigationUrl(visibleIn: enums.Navigation, windowName: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetWebPanelList;
    /**
     * Return a list of all web panels.
     * @returns List of all web panels
     */
    GetWebPanelList(webapi_options?: base.WebApiRequestOptions): Promise<carriers.WebPanelEntity[]>;
    private _DeleteWebPanel;
    /**
     * Hard-delete (real, permanent DELETE in the database) the given web panel. Use with care!
     * @param request - Id
     * @returns This method has no return value
     */
    DeleteWebPanel(request: carriers.List_DeleteWebPanelRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Hard-delete (real, permanent DELETE in the database) the given web panel. Use with care!
     * @param id - Database id of web panel to delete
     * @returns This method has no return value
     */
    DeleteWebPanel(id: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetAppWebPanels;
    /**
     * Get all web panels owned by your app; works in Online only, for registered Apps that send a valid ApplicationToken
     * @returns List of all web panels owned by the current App
     */
    GetAppWebPanels(webapi_options?: base.WebApiRequestOptions): Promise<carriers.WebPanelEntity[]>;
    private _DeleteAppWebPanels;
    /**
     * Permanentely delete all web panels owned by your app; works in Online only, for registered Apps that send a valid ApplicationToken; otherwise nothing happens
     * @returns This method has no return value
     */
    DeleteAppWebPanels(webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetWebPanelByProgId;
    /**
     * Get a web panel using the ProgId key that was specified when it was created
     * @param request - ProgId
     * @returns The Web panel information
     */
    GetWebPanelByProgId(request: carriers.List_GetWebPanelByProgIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WebPanelEntity>;
    /**
     * Get a web panel using the ProgId key that was specified when it was created
     * @param progId - String key that can be used to uniquely retrieve the panel, set in the WebPanelEntity when saving
     * @returns The Web panel information
     */
    GetWebPanelByProgId(progId: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WebPanelEntity>;
}
//# sourceMappingURL=ListAgent.d.ts.map