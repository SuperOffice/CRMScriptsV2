"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserDefinedFieldInfoAgent = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
/**
 * Returns information about user-defined fields, like field type, field size, field label text, default value. Does not return the actual values in the user-defined fields. The values are returned on the entity objects.
 */
class UserDefinedFieldInfoAgent extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/UserDefinedFieldInfo/";
        super(options);
    }
    /**
     * Set default values into a new UserDefinedFieldInfo.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    async CreateDefaultUserDefinedFieldInfo(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultUserDefinedFieldInfo", null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_UserDefinedFieldInfo_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing UserDefinedFieldInfo or creates a new UserDefinedFieldInfo if the id parameter is empty
     * @param entity - The UserDefinedFieldInfo to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated UserDefinedFieldInfo
     */
    async SaveUserDefinedFieldInfo(entity, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveUserDefinedFieldInfo", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_UserDefinedFieldInfo_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Deletes the UserDefinedFieldInfo
     * @param UserDefinedFieldInfoId - The id of the UserDefinedFieldInfo to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    async DeleteUserDefinedFieldInfo(UserDefinedFieldInfoId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteUserDefinedFieldInfo?UserDefinedFieldInfoId=" + UserDefinedFieldInfoId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async _GetCustomFieldInfoList(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetCustomFieldInfoList", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_FieldInfoBaseArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetCustomFieldInfoList(tableName, includeStandard, webapi_options) {
        let _request = null;
        let _options = null;
        const first = tableName;
        if (typeof (first) === "object" && first && (typeof (first.TableName) != 'undefined' || typeof (first.IncludeStandard) != 'undefined')) {
            _request = tableName;
            _options = includeStandard;
        }
        else {
            _request = {
                TableName: tableName,
                IncludeStandard: includeStandard,
            };
            _options = webapi_options;
        }
        return this._GetCustomFieldInfoList(_request, _options);
    }
    async _GetCustomFieldInfo(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetCustomFieldInfo", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_FieldInfoBase_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetCustomFieldInfo(tableName, fieldName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = tableName;
        if (typeof (first) === "object" && first && (typeof (first.TableName) != 'undefined' || typeof (first.FieldName) != 'undefined')) {
            _request = tableName;
            _options = fieldName;
        }
        else {
            _request = {
                TableName: tableName,
                FieldName: fieldName,
            };
            _options = webapi_options;
        }
        return this._GetCustomFieldInfo(_request, _options);
    }
    /*
     * Gets a UserDefinedFieldInfo object.
     * @param userDefinedFieldInfoId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single UserDefinedFieldInfo
     */
    async GetUserDefinedFieldInfo(userDefinedFieldInfoId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetUserDefinedFieldInfo?userDefinedFieldInfoId=" + userDefinedFieldInfoId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_UserDefinedFieldInfo_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async _GetUserDefinedFieldList(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetUserDefinedFieldList", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_UserDefinedFieldInfoArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetUserDefinedFieldList(ownerType, webapi_options) {
        let _request = null;
        let _options = null;
        const first = ownerType;
        if (typeof (first) === "object" && first && (typeof (first.OwnerType) != 'undefined')) {
            _request = ownerType;
            _options = webapi_options;
        }
        else {
            _request = {
                OwnerType: ownerType,
            };
            _options = webapi_options;
        }
        return this._GetUserDefinedFieldList(_request, _options);
    }
    async _GetPublishedUserDefinedFieldList(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetPublishedUserDefinedFieldList", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_UserDefinedFieldInfoArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetPublishedUserDefinedFieldList(ownerType, webapi_options) {
        let _request = null;
        let _options = null;
        const first = ownerType;
        if (typeof (first) === "object" && first && (typeof (first.OwnerType) != 'undefined')) {
            _request = ownerType;
            _options = webapi_options;
        }
        else {
            _request = {
                OwnerType: ownerType,
            };
            _options = webapi_options;
        }
        return this._GetPublishedUserDefinedFieldList(_request, _options);
    }
    async _GetUserDefinedFieldFromFieldLabel(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetUserDefinedFieldFromFieldLabel", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_UserDefinedFieldInfo_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetUserDefinedFieldFromFieldLabel(fieldLabel, ownerType, webapi_options) {
        let _request = null;
        let _options = null;
        const first = fieldLabel;
        if (typeof (first) === "object" && first && (typeof (first.FieldLabel) != 'undefined' || typeof (first.OwnerType) != 'undefined')) {
            _request = fieldLabel;
            _options = ownerType;
        }
        else {
            _request = {
                FieldLabel: fieldLabel,
                OwnerType: ownerType,
            };
            _options = webapi_options;
        }
        return this._GetUserDefinedFieldFromFieldLabel(_request, _options);
    }
    async _GetPublishedUserDefinedFieldFromFieldLabel(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetPublishedUserDefinedFieldFromFieldLabel", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_UserDefinedFieldInfo_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetPublishedUserDefinedFieldFromFieldLabel(fieldLabel, ownerType, webapi_options) {
        let _request = null;
        let _options = null;
        const first = fieldLabel;
        if (typeof (first) === "object" && first && (typeof (first.FieldLabel) != 'undefined' || typeof (first.OwnerType) != 'undefined')) {
            _request = fieldLabel;
            _options = ownerType;
        }
        else {
            _request = {
                FieldLabel: fieldLabel,
                OwnerType: ownerType,
            };
            _options = webapi_options;
        }
        return this._GetPublishedUserDefinedFieldFromFieldLabel(_request, _options);
    }
    async _GetUserDefinedFieldFromProgId(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetUserDefinedFieldFromProgId", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_UserDefinedFieldInfo_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetUserDefinedFieldFromProgId(progId, ownerType, webapi_options) {
        let _request = null;
        let _options = null;
        const first = progId;
        if (typeof (first) === "object" && first && (typeof (first.ProgId) != 'undefined' || typeof (first.OwnerType) != 'undefined')) {
            _request = progId;
            _options = ownerType;
        }
        else {
            _request = {
                ProgId: progId,
                OwnerType: ownerType,
            };
            _options = webapi_options;
        }
        return this._GetUserDefinedFieldFromProgId(_request, _options);
    }
    async _GetPublishedUserDefinedFieldFromProgId(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetPublishedUserDefinedFieldFromProgId", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_UserDefinedFieldInfo_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetPublishedUserDefinedFieldFromProgId(progId, ownerType, webapi_options) {
        let _request = null;
        let _options = null;
        const first = progId;
        if (typeof (first) === "object" && first && (typeof (first.ProgId) != 'undefined' || typeof (first.OwnerType) != 'undefined')) {
            _request = progId;
            _options = ownerType;
        }
        else {
            _request = {
                ProgId: progId,
                OwnerType: ownerType,
            };
            _options = webapi_options;
        }
        return this._GetPublishedUserDefinedFieldFromProgId(_request, _options);
    }
    async _GetUserDefinedFieldFromIds(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetUserDefinedFieldFromIds", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_UserDefinedFieldInfoArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetUserDefinedFieldFromIds(ids, webapi_options) {
        let _request = null;
        let _options = null;
        const first = ids;
        if (typeof (first) === "object" && first && (typeof (first.Ids) != 'undefined')) {
            _request = ids;
            _options = webapi_options;
        }
        else {
            _request = {
                Ids: ids,
            };
            _options = webapi_options;
        }
        return this._GetUserDefinedFieldFromIds(_request, _options);
    }
    async _GetUserDefinedFieldFromProgIds(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetUserDefinedFieldFromProgIds", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_UserDefinedFieldInfoArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetUserDefinedFieldFromProgIds(progIds, ownerType, webapi_options) {
        let _request = null;
        let _options = null;
        const first = progIds;
        if (typeof (first) === "object" && first && (typeof (first.ProgIds) != 'undefined' || typeof (first.OwnerType) != 'undefined')) {
            _request = progIds;
            _options = ownerType;
        }
        else {
            _request = {
                ProgIds: progIds,
                OwnerType: ownerType,
            };
            _options = webapi_options;
        }
        return this._GetUserDefinedFieldFromProgIds(_request, _options);
    }
    async _CreateUserDefinedFieldInfo(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("CreateUserDefinedFieldInfo", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_UserDefinedFieldInfo_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async CreateUserDefinedFieldInfo(ownerType, fieldType, webapi_options) {
        let _request = null;
        let _options = null;
        const first = ownerType;
        if (typeof (first) === "object" && first && (typeof (first.OwnerType) != 'undefined' || typeof (first.FieldType) != 'undefined')) {
            _request = ownerType;
            _options = fieldType;
        }
        else {
            _request = {
                OwnerType: ownerType,
                FieldType: fieldType,
            };
            _options = webapi_options;
        }
        return this._CreateUserDefinedFieldInfo(_request, _options);
    }
    async _ChangeFieldType(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ChangeFieldType", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_UserDefinedFieldInfo_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async ChangeFieldType(info, fieldType, isIndexed, webapi_options) {
        let _request = null;
        let _options = null;
        const first = info;
        if (typeof (first) === "object" && first && (typeof (first.Info) != 'undefined' || typeof (first.FieldType) != 'undefined' || typeof (first.IsIndexed) != 'undefined')) {
            _request = info;
            _options = fieldType;
        }
        else {
            _request = {
                Info: info,
                FieldType: fieldType,
                IsIndexed: isIndexed,
            };
            _options = webapi_options;
        }
        return this._ChangeFieldType(_request, _options);
    }
    async _GetUserDefinedPageOneFields(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetUserDefinedPageOneFields", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_UserDefinedFieldInfoArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetUserDefinedPageOneFields(ownerType, userGroupId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = ownerType;
        if (typeof (first) === "object" && first && (typeof (first.OwnerType) != 'undefined' || typeof (first.UserGroupId) != 'undefined')) {
            _request = ownerType;
            _options = userGroupId;
        }
        else {
            _request = {
                OwnerType: ownerType,
                UserGroupId: userGroupId,
            };
            _options = webapi_options;
        }
        return this._GetUserDefinedPageOneFields(_request, _options);
    }
    async _GetPublishedUserDefinedPageOneFields(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetPublishedUserDefinedPageOneFields", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_UserDefinedFieldInfoArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetPublishedUserDefinedPageOneFields(ownerType, userGroupId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = ownerType;
        if (typeof (first) === "object" && first && (typeof (first.OwnerType) != 'undefined' || typeof (first.UserGroupId) != 'undefined')) {
            _request = ownerType;
            _options = userGroupId;
        }
        else {
            _request = {
                OwnerType: ownerType,
                UserGroupId: userGroupId,
            };
            _options = webapi_options;
        }
        return this._GetPublishedUserDefinedPageOneFields(_request, _options);
    }
    async _Publish(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("Publish", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async Publish(ownerType, webapi_options) {
        let _request = null;
        let _options = null;
        const first = ownerType;
        if (typeof (first) === "object" && first && (typeof (first.OwnerType) != 'undefined')) {
            _request = ownerType;
            _options = webapi_options;
        }
        else {
            _request = {
                OwnerType: ownerType,
            };
            _options = webapi_options;
        }
        return this._Publish(_request, _options);
    }
    async _Revert(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("Revert", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async Revert(ownerType, webapi_options) {
        let _request = null;
        let _options = null;
        const first = ownerType;
        if (typeof (first) === "object" && first && (typeof (first.OwnerType) != 'undefined')) {
            _request = ownerType;
            _options = webapi_options;
        }
        else {
            _request = {
                OwnerType: ownerType,
            };
            _options = webapi_options;
        }
        return this._Revert(_request, _options);
    }
    async _SaveUserDefinedFieldInfos(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SaveUserDefinedFieldInfos", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SaveUserDefinedFieldInfos(infos, webapi_options) {
        let _request = null;
        let _options = null;
        const first = infos;
        if (typeof (first) === "object" && first && (typeof (first.Infos) != 'undefined')) {
            _request = infos;
            _options = webapi_options;
        }
        else {
            _request = {
                Infos: infos,
            };
            _options = webapi_options;
        }
        return this._SaveUserDefinedFieldInfos(_request, _options);
    }
    async _DetectUnpublishedChanges(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("DetectUnpublishedChanges", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async DetectUnpublishedChanges(ownerType, webapi_options) {
        let _request = null;
        let _options = null;
        const first = ownerType;
        if (typeof (first) === "object" && first && (typeof (first.OwnerType) != 'undefined')) {
            _request = ownerType;
            _options = webapi_options;
        }
        else {
            _request = {
                OwnerType: ownerType,
            };
            _options = webapi_options;
        }
        return this._DetectUnpublishedChanges(_request, _options);
    }
    async _DetectColumnIdChanges(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("DetectColumnIdChanges", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async DetectColumnIdChanges(ownerType, webapi_options) {
        let _request = null;
        let _options = null;
        const first = ownerType;
        if (typeof (first) === "object" && first && (typeof (first.OwnerType) != 'undefined')) {
            _request = ownerType;
            _options = webapi_options;
        }
        else {
            _request = {
                OwnerType: ownerType,
            };
            _options = webapi_options;
        }
        return this._DetectColumnIdChanges(_request, _options);
    }
    async _SetUserDefinedPageOneField(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetUserDefinedPageOneField", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SetUserDefinedPageOneField(ownerType, udefFieldId, userGroupId, fieldLineNo, webapi_options) {
        let _request = null;
        let _options = null;
        const first = ownerType;
        if (typeof (first) === "object" && first && (typeof (first.OwnerType) != 'undefined' || typeof (first.UdefFieldId) != 'undefined' || typeof (first.UserGroupId) != 'undefined' || typeof (first.FieldLineNo) != 'undefined')) {
            _request = ownerType;
            _options = udefFieldId;
        }
        else {
            _request = {
                OwnerType: ownerType,
                UdefFieldId: udefFieldId,
                UserGroupId: userGroupId,
                FieldLineNo: fieldLineNo,
            };
            _options = webapi_options;
        }
        return this._SetUserDefinedPageOneField(_request, _options);
    }
    async _IsPublishEventActive(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("IsPublishEventActive", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async IsPublishEventActive(type, webapi_options) {
        let _request = null;
        let _options = null;
        const first = type;
        if (typeof (first) === "object" && first && (typeof (first.Type) != 'undefined')) {
            _request = type;
            _options = webapi_options;
        }
        else {
            _request = {
                Type: type,
            };
            _options = webapi_options;
        }
        return this._IsPublishEventActive(_request, _options);
    }
    async _IsAnyPublishEventActive(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("IsAnyPublishEventActive", undefined, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Check if any publish events are active
     * @returns
     */
    async IsAnyPublishEventActive(webapi_options) {
        return this._IsAnyPublishEventActive(webapi_options);
    }
    async _GetChangedPageOneFields(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetChangedPageOneFields", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetChangedPageOneFields(ownerType, userGroupId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = ownerType;
        if (typeof (first) === "object" && first && (typeof (first.OwnerType) != 'undefined' || typeof (first.UserGroupId) != 'undefined')) {
            _request = ownerType;
            _options = userGroupId;
        }
        else {
            _request = {
                OwnerType: ownerType,
                UserGroupId: userGroupId,
            };
            _options = webapi_options;
        }
        return this._GetChangedPageOneFields(_request, _options);
    }
    async _SetPageOneFieldGrouping(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetPageOneFieldGrouping", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SetPageOneFieldGrouping(ownerType, active, webapi_options) {
        let _request = null;
        let _options = null;
        const first = ownerType;
        if (typeof (first) === "object" && first && (typeof (first.OwnerType) != 'undefined' || typeof (first.Active) != 'undefined')) {
            _request = ownerType;
            _options = active;
        }
        else {
            _request = {
                OwnerType: ownerType,
                Active: active,
            };
            _options = webapi_options;
        }
        return this._SetPageOneFieldGrouping(_request, _options);
    }
    async _SetListTableIdAndUDListDefinitionIdFromSelectedListId(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetListTableIdAndUDListDefinitionIdFromSelectedListId", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_UserDefinedFieldInfo_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SetListTableIdAndUDListDefinitionIdFromSelectedListId(info, selectedListId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = info;
        if (typeof (first) === "object" && first && (typeof (first.Info) != 'undefined' || typeof (first.SelectedListId) != 'undefined')) {
            _request = info;
            _options = selectedListId;
        }
        else {
            _request = {
                Info: info,
                SelectedListId: selectedListId,
            };
            _options = webapi_options;
        }
        return this._SetListTableIdAndUDListDefinitionIdFromSelectedListId(_request, _options);
    }
    async _FigureOutListIdFromListTableIdAndUDListDefinitionId(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("FigureOutListIdFromListTableIdAndUDListDefinitionId", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async FigureOutListIdFromListTableIdAndUDListDefinitionId(info, webapi_options) {
        let _request = null;
        let _options = null;
        const first = info;
        if (typeof (first) === "object" && first && (typeof (first.Info) != 'undefined')) {
            _request = info;
            _options = webapi_options;
        }
        else {
            _request = {
                Info: info,
            };
            _options = webapi_options;
        }
        return this._FigureOutListIdFromListTableIdAndUDListDefinitionId(_request, _options);
    }
    async _SetRankOnFields(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetRankOnFields", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SetRankOnFields(ownerType, rankedFieldsIds, webapi_options) {
        let _request = null;
        let _options = null;
        const first = ownerType;
        if (typeof (first) === "object" && first && (typeof (first.OwnerType) != 'undefined' || typeof (first.RankedFieldsIds) != 'undefined')) {
            _request = ownerType;
            _options = rankedFieldsIds;
        }
        else {
            _request = {
                OwnerType: ownerType,
                RankedFieldsIds: rankedFieldsIds,
            };
            _options = webapi_options;
        }
        return this._SetRankOnFields(_request, _options);
    }
    async _SetPublishStartSystemEvent(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetPublishStartSystemEvent", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SetPublishStartSystemEvent(ownerType, webapi_options) {
        let _request = null;
        let _options = null;
        const first = ownerType;
        if (typeof (first) === "object" && first && (typeof (first.OwnerType) != 'undefined')) {
            _request = ownerType;
            _options = webapi_options;
        }
        else {
            _request = {
                OwnerType: ownerType,
            };
            _options = webapi_options;
        }
        return this._SetPublishStartSystemEvent(_request, _options);
    }
    async _ClearCaches(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ClearCaches", undefined, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Clear all relevant caches. This is normally done automatically but can be useful in certain circumstances.
     * @returns
     */
    async ClearCaches(webapi_options) {
        return this._ClearCaches(webapi_options);
    }
} // class v1UserDefinedFieldInfoAgentController 
exports.UserDefinedFieldInfoAgent = UserDefinedFieldInfoAgent;
//# sourceMappingURL=UserDefinedFieldInfoAgent.js.map