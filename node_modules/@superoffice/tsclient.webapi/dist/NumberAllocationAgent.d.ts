import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * This agent can be used to manage number allocation
 */
export interface INumberAllocationAgent {
    CreateDefaultRefCountEntity(): Promise<carriers.RefCountEntity>;
    SaveRefCountEntity(entity: carriers.RefCountEntity): Promise<carriers.RefCountEntity>;
    DeleteRefCountEntity(RefCountEntityId: number): Promise<void>;
    GetRefCountEntity(refCountEntityId: number): Promise<carriers.RefCountEntity>;
    SaveDefaultNumbering(request: carriers.NumberAllocation_SaveDefaultNumberingRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SaveDefaultNumbering(refCountEntity: carriers.RefCountEntity, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetNumberEachTemplate(webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    SetNumberEachTemplate(request: carriers.NumberAllocation_SetNumberEachTemplateRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetNumberEachTemplate(setValue: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
}
/**
 * This agent can be used to manage number allocation
 */
export declare class NumberAllocationAgent extends base.WebApiBase implements INumberAllocationAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * Set default values into a new RefCountEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultRefCountEntity(options?: base.WebApiRequestOptions): Promise<carriers.RefCountEntity>;
    SaveRefCountEntity(entity: carriers.RefCountEntity, options?: base.WebApiRequestOptions): Promise<carriers.RefCountEntity>;
    DeleteRefCountEntity(RefCountEntityId: number, options?: base.WebApiRequestOptions): Promise<void>;
    GetRefCountEntity(refCountEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.RefCountEntity>;
    private _SaveDefaultNumbering;
    /**
     * Saves default numbering values in preferences
     * @param request - RefCountEntity
     * @returns void
     */
    SaveDefaultNumbering(request: carriers.NumberAllocation_SaveDefaultNumberingRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Saves default numbering values in preferences
     * @param refCountEntity - The refCountEntity that holds the values that will be saved
     * @returns void
     */
    SaveDefaultNumbering(refCountEntity: carriers.RefCountEntity, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetNumberEachTemplate;
    /**
     * Returns true or false if Automatically create new counters for new document templates
     * @returns Is NumberEachTemplate?
     */
    GetNumberEachTemplate(webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _SetNumberEachTemplate;
    /**
     * Saves true or false if Automatically create new counters for new document templates
     * @param request - SetValue
     * @returns void
     */
    SetNumberEachTemplate(request: carriers.NumberAllocation_SetNumberEachTemplateRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Saves true or false if Automatically create new counters for new document templates
     * @param setValue - true or false if Automatically create new counters for new document templates
     * @returns void
     */
    SetNumberEachTemplate(setValue: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
}
//# sourceMappingURL=NumberAllocationAgent.d.ts.map