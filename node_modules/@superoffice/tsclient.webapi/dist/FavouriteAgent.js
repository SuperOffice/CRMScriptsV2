"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.FavouriteAgent = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
/**
 * Agent used for retrieveing and setting favourites
 */
class FavouriteAgent extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Favourite/";
        super(options);
    }
    async _IsFavourite(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("IsFavourite", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async IsFavourite(tableName, recordId, associateId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = tableName;
        if (typeof (first) === "object" && first && (typeof (first.TableName) != 'undefined' || typeof (first.RecordId) != 'undefined' || typeof (first.AssociateId) != 'undefined')) {
            _request = tableName;
            _options = recordId;
        }
        else {
            _request = {
                TableName: tableName,
                RecordId: recordId,
                AssociateId: associateId,
            };
            _options = webapi_options;
        }
        return this._IsFavourite(_request, _options);
    }
    async _AddFavourite(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("AddFavourite", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async AddFavourite(tableName, recordId, associateId, extraInfo, webapi_options) {
        let _request = null;
        let _options = null;
        const first = tableName;
        if (typeof (first) === "object" && first && (typeof (first.TableName) != 'undefined' || typeof (first.RecordId) != 'undefined' || typeof (first.AssociateId) != 'undefined' || typeof (first.ExtraInfo) != 'undefined')) {
            _request = tableName;
            _options = recordId;
        }
        else {
            _request = {
                TableName: tableName,
                RecordId: recordId,
                AssociateId: associateId,
                ExtraInfo: extraInfo,
            };
            _options = webapi_options;
        }
        return this._AddFavourite(_request, _options);
    }
    async _AddFavourites(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("AddFavourites", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async AddFavourites(tableName, recordIds, associateId, extraInfo, webapi_options) {
        let _request = null;
        let _options = null;
        const first = tableName;
        if (typeof (first) === "object" && first && (typeof (first.TableName) != 'undefined' || typeof (first.RecordIds) != 'undefined' || typeof (first.AssociateId) != 'undefined' || typeof (first.ExtraInfo) != 'undefined')) {
            _request = tableName;
            _options = recordIds;
        }
        else {
            _request = {
                TableName: tableName,
                RecordIds: recordIds,
                AssociateId: associateId,
                ExtraInfo: extraInfo,
            };
            _options = webapi_options;
        }
        return this._AddFavourites(_request, _options);
    }
    async _AddTicketsToFavouritesByProvider(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("AddTicketsToFavouritesByProvider", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async AddTicketsToFavouritesByProvider(providerName, restrictions, associateId, extraInfo, webapi_options) {
        let _request = null;
        let _options = null;
        const first = providerName;
        if (typeof (first) === "object" && first && (typeof (first.ProviderName) != 'undefined' || typeof (first.Restrictions) != 'undefined' || typeof (first.AssociateId) != 'undefined' || typeof (first.ExtraInfo) != 'undefined')) {
            _request = providerName;
            _options = restrictions;
        }
        else {
            _request = {
                ProviderName: providerName,
                Restrictions: restrictions,
                AssociateId: associateId,
                ExtraInfo: extraInfo,
            };
            _options = webapi_options;
        }
        return this._AddTicketsToFavouritesByProvider(_request, _options);
    }
    async _RemoveFavourites(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("RemoveFavourites", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async RemoveFavourites(tableName, recordIds, associateId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = tableName;
        if (typeof (first) === "object" && first && (typeof (first.TableName) != 'undefined' || typeof (first.RecordIds) != 'undefined' || typeof (first.AssociateId) != 'undefined')) {
            _request = tableName;
            _options = recordIds;
        }
        else {
            _request = {
                TableName: tableName,
                RecordIds: recordIds,
                AssociateId: associateId,
            };
            _options = webapi_options;
        }
        return this._RemoveFavourites(_request, _options);
    }
    async _RemoveTicketsFromFavouritesByProvider(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("RemoveTicketsFromFavouritesByProvider", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async RemoveTicketsFromFavouritesByProvider(providerName, restrictions, associateId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = providerName;
        if (typeof (first) === "object" && first && (typeof (first.ProviderName) != 'undefined' || typeof (first.Restrictions) != 'undefined' || typeof (first.AssociateId) != 'undefined')) {
            _request = providerName;
            _options = restrictions;
        }
        else {
            _request = {
                ProviderName: providerName,
                Restrictions: restrictions,
                AssociateId: associateId,
            };
            _options = webapi_options;
        }
        return this._RemoveTicketsFromFavouritesByProvider(_request, _options);
    }
    async _GetFavourites(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetFavourites", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_FavouriteArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetFavourites(tableName, associateId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = tableName;
        if (typeof (first) === "object" && first && (typeof (first.TableName) != 'undefined' || typeof (first.AssociateId) != 'undefined')) {
            _request = tableName;
            _options = associateId;
        }
        else {
            _request = {
                TableName: tableName,
                AssociateId: associateId,
            };
            _options = webapi_options;
        }
        return this._GetFavourites(_request, _options);
    }
    async _RemoveFavourite(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("RemoveFavourite", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async RemoveFavourite(tableName, recordId, associateId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = tableName;
        if (typeof (first) === "object" && first && (typeof (first.TableName) != 'undefined' || typeof (first.RecordId) != 'undefined' || typeof (first.AssociateId) != 'undefined')) {
            _request = tableName;
            _options = recordId;
        }
        else {
            _request = {
                TableName: tableName,
                RecordId: recordId,
                AssociateId: associateId,
            };
            _options = webapi_options;
        }
        return this._RemoveFavourite(_request, _options);
    }
    async _RemoveAllFavourites(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("RemoveAllFavourites", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async RemoveAllFavourites(tableName, associateId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = tableName;
        if (typeof (first) === "object" && first && (typeof (first.TableName) != 'undefined' || typeof (first.AssociateId) != 'undefined')) {
            _request = tableName;
            _options = associateId;
        }
        else {
            _request = {
                TableName: tableName,
                AssociateId: associateId,
            };
            _options = webapi_options;
        }
        return this._RemoveAllFavourites(_request, _options);
    }
    async _ToggleFavourite(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ToggleFavourite", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async ToggleFavourite(tableName, recordId, associateId, extraInfo, webapi_options) {
        let _request = null;
        let _options = null;
        const first = tableName;
        if (typeof (first) === "object" && first && (typeof (first.TableName) != 'undefined' || typeof (first.RecordId) != 'undefined' || typeof (first.AssociateId) != 'undefined' || typeof (first.ExtraInfo) != 'undefined')) {
            _request = tableName;
            _options = recordId;
        }
        else {
            _request = {
                TableName: tableName,
                RecordId: recordId,
                AssociateId: associateId,
                ExtraInfo: extraInfo,
            };
            _options = webapi_options;
        }
        return this._ToggleFavourite(_request, _options);
    }
    async _RemoveFavouritesById(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("RemoveFavouritesById", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async RemoveFavouritesById(favouriteIds, webapi_options) {
        let _request = null;
        let _options = null;
        const first = favouriteIds;
        if (typeof (first) === "object" && first && (typeof (first.FavouriteIds) != 'undefined')) {
            _request = favouriteIds;
            _options = webapi_options;
        }
        else {
            _request = {
                FavouriteIds: favouriteIds,
            };
            _options = webapi_options;
        }
        return this._RemoveFavouritesById(_request, _options);
    }
} // class v1FavouriteAgentController 
exports.FavouriteAgent = FavouriteAgent;
//# sourceMappingURL=FavouriteAgent.js.map