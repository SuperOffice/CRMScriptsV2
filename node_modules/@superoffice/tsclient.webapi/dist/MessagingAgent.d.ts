import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * SMS and other external messaging systems
 *
 * **Online Restricted:** This agent is not available in Online by default. Access must be requested specifically when app is registered.
 */
export interface IMessagingAgent {
    CreateMessage(request: carriers.Messaging_CreateMessageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    CreateMessage(incomingMessage: carriers.IncomingMessage, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetDeliveryStatus(request: carriers.Messaging_GetDeliveryStatusRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MessageDeliveryStatus[]>;
    GetDeliveryStatus(messagingIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.MessageDeliveryStatus[]>;
    SetDeliveryStatus(request: carriers.Messaging_SetDeliveryStatusRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetDeliveryStatus(plugin: string, externalMessageId: string, status: number, statusDescription: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SendMessages(request: carriers.Messaging_SendMessagesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MessageDeliveryStatus[]>;
    SendMessages(plugin: string, outgoingMessages: carriers.OutgoingMessage[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.MessageDeliveryStatus[]>;
    SendMessagesWithConfig(request: carriers.Messaging_SendMessagesWithConfigRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MessageDeliveryStatus[]>;
    SendMessagesWithConfig(plugin: string, outgoingMessages: carriers.OutgoingMessage[], config: carriers.StringDictionary, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MessageDeliveryStatus[]>;
    GetPlugins(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProviderInfo[]>;
}
/**
 * SMS and other external messaging systems
 */
export declare class MessagingAgent extends base.WebApiBase implements IMessagingAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    private _CreateMessage;
    /**
     * Create a new message and insert it in the message queue. (inbox)
     * @param request - IncomingMessage
     * @returns
     */
    CreateMessage(request: carriers.Messaging_CreateMessageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Create a new message and insert it in the message queue. (inbox)
     * @param incomingMessage -
     * @returns
     */
    CreateMessage(incomingMessage: carriers.IncomingMessage, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetDeliveryStatus;
    /**
     * Get delivery status
     * @param request - MessagingIds
     * @returns
     */
    GetDeliveryStatus(request: carriers.Messaging_GetDeliveryStatusRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MessageDeliveryStatus[]>;
    /**
     * Get delivery status
     * @param messagingIds - Array of messaging ids.
     * @returns
     */
    GetDeliveryStatus(messagingIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.MessageDeliveryStatus[]>;
    private _SetDeliveryStatus;
    /**
     * Set or change the delivery status on an outgoing messsage.
     * @param request - Plugin, ExternalMessageId, Status, StatusDescription
     * @returns
     */
    SetDeliveryStatus(request: carriers.Messaging_SetDeliveryStatusRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set or change the delivery status on an outgoing messsage.
     * @param plugin - Name of plugin
     * @param externalMessageId - External message id known to plugin.
     * @param status - Delivery status
     * @param statusDescription - String describing delivery status.
     * @returns
     */
    SetDeliveryStatus(plugin: string, externalMessageId: string, status: number, statusDescription: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SendMessages;
    /**
     * Send an array of messages
     * @param request - Plugin, OutgoingMessages
     * @returns Array of MessageDeliveryStatus. Length of the array is equal to the number of outgoing messages.
     */
    SendMessages(request: carriers.Messaging_SendMessagesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MessageDeliveryStatus[]>;
    /**
     * Send an array of messages
     * @param plugin - Name of plugin to use.
     * @param outgoingMessages - Array of outgoing messages you want to send.
     * @returns Array of MessageDeliveryStatus. Length of the array is equal to the number of outgoing messages.
     */
    SendMessages(plugin: string, outgoingMessages: carriers.OutgoingMessage[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.MessageDeliveryStatus[]>;
    private _SendMessagesWithConfig;
    /**
     * Send an array of messages using given config
     * @param request - Plugin, OutgoingMessages, Config
     * @returns Array of MessageDeliveryStatus. Length of the array is equal to the number of outgoing messages.
     */
    SendMessagesWithConfig(request: carriers.Messaging_SendMessagesWithConfigRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MessageDeliveryStatus[]>;
    /**
     * Send an array of messages using given config
     * @param plugin - Name of plugin to use.
     * @param outgoingMessages - Array of outgoing messages you want to send.
     * @param config - Config values used by the plugin.
     * @returns Array of MessageDeliveryStatus. Length of the array is equal to the number of outgoing messages.
     */
    SendMessagesWithConfig(plugin: string, outgoingMessages: carriers.OutgoingMessage[], config: carriers.StringDictionary, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MessageDeliveryStatus[]>;
    private _GetPlugins;
    /**
     *
     * @returns
     */
    GetPlugins(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ProviderInfo[]>;
}
//# sourceMappingURL=MessagingAgent.d.ts.map