import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * User interface view state, history, currentXXX values
 */
export interface IViewStateAgent {
    GetLiveUiConfig(webapi_options?: base.WebApiRequestOptions): Promise<carriers.LiveUiConfig>;
    GetHistory(historyId: number): Promise<carriers.History>;
    GetCurrent(request: carriers.ViewState_GetCurrentRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.History>;
    GetCurrent(historyName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.History>;
    SaveCurrent(request: carriers.ViewState_SaveCurrentRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.History>;
    SaveCurrent(current: carriers.History, webapi_options?: base.WebApiRequestOptions): Promise<carriers.History>;
    GetNextCurrent(request: carriers.ViewState_GetNextCurrentRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.History>;
    GetNextCurrent(historyName: string, id: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.History>;
    GetPreviousCurrent(request: carriers.ViewState_GetPreviousCurrentRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.History>;
    GetPreviousCurrent(historyName: string, id: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.History>;
    DeleteHistory(request: carriers.ViewState_DeleteHistoryRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteHistory(historyName: string, id: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetHistories(webapi_options?: base.WebApiRequestOptions): Promise<carriers.History[]>;
    GetHistoriesByName(request: carriers.ViewState_GetHistoriesByNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.History[]>;
    GetHistoriesByName(historyName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.History[]>;
    GetHistoriesByNames(request: carriers.ViewState_GetHistoriesByNamesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.History[]>;
    GetHistoriesByNames(historyNames: string[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.History[]>;
    SaveHistories(request: carriers.ViewState_SaveHistoriesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.History[]>;
    SaveHistories(historyName: string, history: carriers.History[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.History[]>;
    GetHistoryLengthPrefValue(webapi_options?: base.WebApiRequestOptions): Promise<number>;
    SetHistoryLengthPrefValue(request: carriers.ViewState_SetHistoryLengthPrefValueRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetHistoryLengthPrefValue(length: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SaveCurrents(request: carriers.ViewState_SaveCurrentsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.History[]>;
    SaveCurrents(currents: carriers.History[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.History[]>;
    GetHistoriesByNamesAndIds(request: carriers.ViewState_GetHistoriesByNamesAndIdsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.History[]>;
    GetHistoriesByNamesAndIds(requests: carriers.HistoryRequest[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.History[]>;
    PublishAndRetrieveUiEvents(request: carriers.ViewState_PublishAndRetrieveUiEventsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UiEvent[]>;
    PublishAndRetrieveUiEvents(latestKnownEventId: number, publishEvents: carriers.UiEvent[], metrics: carriers.MetricPair[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.UiEvent[]>;
}
/**
 * User interface view state, history, currentXXX values
 */
export declare class ViewStateAgent extends base.WebApiBase implements IViewStateAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    private _GetLiveUiConfig;
    /**
     * Gets live UI configuration
     * @returns Live UI configuration containing the parameters needed for live UI functionality
     */
    GetLiveUiConfig(webapi_options?: base.WebApiRequestOptions): Promise<carriers.LiveUiConfig>;
    GetHistory(historyId: number, options?: base.WebApiRequestOptions): Promise<carriers.History>;
    private _GetCurrent;
    /**
     * Get the current (most recent) value of the history list. This is the item with rank = 1. If no item exists a default value is returned. This is usually the first item in the table representing the history list.
     * @param request - HistoryName
     * @returns The current (most recent) history item
     */
    GetCurrent(request: carriers.ViewState_GetCurrentRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.History>;
    /**
     * Get the current (most recent) value of the history list. This is the item with rank = 1. If no item exists a default value is returned. This is usually the first item in the table representing the history list.
     * @param historyName - Name of the history list, e.g. contact, project
     * @returns The current (most recent) history item
     */
    GetCurrent(historyName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.History>;
    private _SaveCurrent;
    /**
     * Saving the current history item. This history item is saved with Rank = 1, and all the remaining elements rank values are shifted one down. The list is maintained with the max lenght of the History list length preference.
     * @param request - Current
     * @returns The current (most recent) history item
     */
    SaveCurrent(request: carriers.ViewState_SaveCurrentRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.History>;
    /**
     * Saving the current history item. This history item is saved with Rank = 1, and all the remaining elements rank values are shifted one down. The list is maintained with the max lenght of the History list length preference.
     * @param current - The new current history element.
     * @returns The current (most recent) history item
     */
    SaveCurrent(current: carriers.History, webapi_options?: base.WebApiRequestOptions): Promise<carriers.History>;
    private _GetNextCurrent;
    /**
     * Returns the next current item. If no item exists a default value is returned. This is usually the first item in the table representing the history list.
     * @param request - HistoryName, Id
     * @returns The current value.
     */
    GetNextCurrent(request: carriers.ViewState_GetNextCurrentRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.History>;
    /**
     * Returns the next current item. If no item exists a default value is returned. This is usually the first item in the table representing the history list.
     * @param historyName - Name of the history list, e.g. contact, project
     * @param id - Id of the history element, e.g. Contact id
     * @returns The current value.
     */
    GetNextCurrent(historyName: string, id: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.History>;
    private _GetPreviousCurrent;
    /**
     * Returns the previous current item. If no item exists a default value is returned. This is usually the first item in the table representing the history list.
     * @param request - HistoryName, Id
     * @returns The current value.
     */
    GetPreviousCurrent(request: carriers.ViewState_GetPreviousCurrentRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.History>;
    /**
     * Returns the previous current item. If no item exists a default value is returned. This is usually the first item in the table representing the history list.
     * @param historyName - Name of the history list, e.g. contact, project
     * @param id - Id of the history element, e.g. Contact id
     * @returns The current value.
     */
    GetPreviousCurrent(historyName: string, id: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.History>;
    private _DeleteHistory;
    /**
     * Deletes the history element
     * @param request - HistoryName, Id
     * @returns
     */
    DeleteHistory(request: carriers.ViewState_DeleteHistoryRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Deletes the history element
     * @param historyName - Name of the history list, e.g. contact, project
     * @param id - Id of the history element, e.g. Contact id
     * @returns
     */
    DeleteHistory(historyName: string, id: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetHistories;
    /**
     * Returns all history items that belong to the currently logged in user
     * @returns Array of History items
     */
    GetHistories(webapi_options?: base.WebApiRequestOptions): Promise<carriers.History[]>;
    private _GetHistoriesByName;
    /**
     * Returns the named history list that belong to the currently logged in user
     * @param request - HistoryName
     * @returns Array of History items
     */
    GetHistoriesByName(request: carriers.ViewState_GetHistoriesByNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.History[]>;
    /**
     * Returns the named history list that belong to the currently logged in user
     * @param historyName - Name of the history list
     * @returns Array of History items
     */
    GetHistoriesByName(historyName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.History[]>;
    private _GetHistoriesByNames;
    /**
     * Returns the named history lists that belong to the currently logged in user
     * @param request - HistoryNames
     * @returns Array of History items
     */
    GetHistoriesByNames(request: carriers.ViewState_GetHistoriesByNamesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.History[]>;
    /**
     * Returns the named history lists that belong to the currently logged in user
     * @param historyNames - String array of list names
     * @returns Array of History items
     */
    GetHistoriesByNames(historyNames: string[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.History[]>;
    private _SaveHistories;
    /**
     * Replaces the existing history-list for the currently logged in user. All elements must belong to the same history list. If not they are ignored.
     * @param request - HistoryName, History
     * @returns Array of the saved History items
     */
    SaveHistories(request: carriers.ViewState_SaveHistoriesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.History[]>;
    /**
     * Replaces the existing history-list for the currently logged in user. All elements must belong to the same history list. If not they are ignored.
     * @param historyName -
     * @param history - Array of new history items to save.
     * @returns Array of the saved History items
     */
    SaveHistories(historyName: string, history: carriers.History[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.History[]>;
    private _GetHistoryLengthPrefValue;
    /**
     * Get the logged on user&apos;s preferred history list length. Will return the system preference if no user preferences are available.
     * @returns The history list lenght
     */
    GetHistoryLengthPrefValue(webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _SetHistoryLengthPrefValue;
    /**
     * Set the logged on user&apos;s preferred history list length.
     * @param request - Length
     * @returns
     */
    SetHistoryLengthPrefValue(request: carriers.ViewState_SetHistoryLengthPrefValueRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set the logged on user&apos;s preferred history list length.
     * @param length - The new history list lenght
     * @returns
     */
    SetHistoryLengthPrefValue(length: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SaveCurrents;
    /**
     * Saves the history elements as the current value for their respective lists. If more than one item is submitted for the same list, they are added sequently, meaning that the last one is the most current.
     * @param request - Currents
     * @returns Array of the saved History items
     */
    SaveCurrents(request: carriers.ViewState_SaveCurrentsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.History[]>;
    /**
     * Saves the history elements as the current value for their respective lists. If more than one item is submitted for the same list, they are added sequently, meaning that the last one is the most current.
     * @param currents - Array of new history items to save.
     * @returns Array of the saved History items
     */
    SaveCurrents(currents: carriers.History[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.History[]>;
    private _GetHistoriesByNamesAndIds;
    /**
     * Returns history data for the named entities and the given ids - which may not directly correspond to the current history records in the database.&lt;para/&gt;Use this method if you know exactly which items you need, regardless of whether they are in the current history or not.&lt;para/&gt;The history in the database is not changed or even looked at by this method.
     * @param request - Requests
     * @returns On history item for each history name/id pair specified, in exactly the same order as specified.<para/>If a specified item cannot be found in the database, its Id will be 0 and its name will be blank in the return array.
     */
    GetHistoriesByNamesAndIds(request: carriers.ViewState_GetHistoriesByNamesAndIdsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.History[]>;
    /**
     * Returns history data for the named entities and the given ids - which may not directly correspond to the current history records in the database.&lt;para/&gt;Use this method if you know exactly which items you need, regardless of whether they are in the current history or not.&lt;para/&gt;The history in the database is not changed or even looked at by this method.
     * @param requests - Array of request objects that define what entities we are requesting history information for
     * @returns On history item for each history name/id pair specified, in exactly the same order as specified.<para/>If a specified item cannot be found in the database, its Id will be 0 and its name will be blank in the return array.
     */
    GetHistoriesByNamesAndIds(requests: carriers.HistoryRequest[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.History[]>;
    private _PublishAndRetrieveUiEvents;
    /**
     * Publish zero or more events, and return any new events since the given event id. The initial implementation is in-memory only; applies solely to the front-end web server; and anything older than 20 minutes is discarded
     * @param request - LatestKnownEventId, PublishEvents, Metrics
     * @returns Array of events since the given event ID; within the time span kept by the event mechanism. Event/primarykey combinations are not guaranteed to be unique, and events in the PublishEvents parameter are echoed back to the client
     */
    PublishAndRetrieveUiEvents(request: carriers.ViewState_PublishAndRetrieveUiEventsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UiEvent[]>;
    /**
     * Publish zero or more events, and return any new events since the given event id. The initial implementation is in-memory only; applies solely to the front-end web server; and anything older than 20 minutes is discarded
     * @param latestKnownEventId - The last event ID that this client knows about. The return value will be any events occurring /after/ that point, numbered by the server. Clients need to keep track themselves of this number between calls
     * @param publishEvents - Array of events to publish. This can be empty if the client only wants to retrieve information
     * @param metrics - Optional statistical and performance metrics collected by the frontend. Can be null or empty. Metrics are sum-accumulated and reported once a minute; please do not report the same logical event twice
     * @returns Array of events since the given event ID; within the time span kept by the event mechanism. Event/primarykey combinations are not guaranteed to be unique, and events in the PublishEvents parameter are echoed back to the client
     */
    PublishAndRetrieveUiEvents(latestKnownEventId: number, publishEvents: carriers.UiEvent[], metrics: carriers.MetricPair[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.UiEvent[]>;
}
//# sourceMappingURL=ViewStateAgent.d.ts.map