"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssociateAgent = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
/**
 * Associate utilities, notes, not user admininstration
 */
class AssociateAgent extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Associate/";
        super(options);
    }
    /*
     * Gets a Associate object.
     * @param associateId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single Associate
     */
    async GetAssociate(associateId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetAssociate?associateId=" + associateId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_Associate_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async _GetAssociateByPersonId(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetAssociateByPersonId", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_Associate_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetAssociateByPersonId(personId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = personId;
        if (typeof (first) === "object" && first && (typeof (first.PersonId) != 'undefined')) {
            _request = personId;
            _options = webapi_options;
        }
        else {
            _request = {
                PersonId: personId,
            };
            _options = webapi_options;
        }
        return this._GetAssociateByPersonId(_request, _options);
    }
    async _GetNote(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetNote", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetNote(associateId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = associateId;
        if (typeof (first) === "object" && first && (typeof (first.AssociateId) != 'undefined')) {
            _request = associateId;
            _options = webapi_options;
        }
        else {
            _request = {
                AssociateId: associateId,
            };
            _options = webapi_options;
        }
        return this._GetNote(_request, _options);
    }
    async _SaveNote(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SaveNote", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SaveNote(associateId, note, webapi_options) {
        let _request = null;
        let _options = null;
        const first = associateId;
        if (typeof (first) === "object" && first && (typeof (first.AssociateId) != 'undefined' || typeof (first.Note) != 'undefined')) {
            _request = associateId;
            _options = note;
        }
        else {
            _request = {
                AssociateId: associateId,
                Note: note,
            };
            _options = webapi_options;
        }
        return this._SaveNote(_request, _options);
    }
    async _GetEncryptionKey(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetEncryptionKey", undefined, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Get unique key made from AssociateId and dbTag used for local storage encryption operations.
     * @returns encryptionKey
     */
    async GetEncryptionKey(webapi_options) {
        return this._GetEncryptionKey(webapi_options);
    }
    /*
     * Gets an array of Associate objects.
     * @param associateIds - The primary keys.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns An array of Associate
     */
    async GetAssociateList(associateIds, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetAssociateList", associateIds, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_AssociateArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async _GetAssociatesByGroup(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetAssociatesByGroup", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_AssociateArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetAssociatesByGroup(groupId, type, webapi_options) {
        let _request = null;
        let _options = null;
        const first = groupId;
        if (typeof (first) === "object" && first && (typeof (first.GroupId) != 'undefined' || typeof (first.Type) != 'undefined')) {
            _request = groupId;
            _options = type;
        }
        else {
            _request = {
                GroupId: groupId,
                Type: type,
            };
            _options = webapi_options;
        }
        return this._GetAssociatesByGroup(_request, _options);
    }
    async _LogOffWindowsUsers(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("LogOffWindowsUsers", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async LogOffWindowsUsers(associateIds, webapi_options) {
        let _request = null;
        let _options = null;
        const first = associateIds;
        if (typeof (first) === "object" && first && (typeof (first.AssociateIds) != 'undefined')) {
            _request = associateIds;
            _options = webapi_options;
        }
        else {
            _request = {
                AssociateIds: associateIds,
            };
            _options = webapi_options;
        }
        return this._LogOffWindowsUsers(_request, _options);
    }
} // class v1AssociateAgentController 
exports.AssociateAgent = AssociateAgent;
//# sourceMappingURL=AssociateAgent.js.map