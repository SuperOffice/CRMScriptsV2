"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseAgent = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
/**
 * Database schema queries and changes
 */
class DatabaseAgent extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Database/";
        super(options);
    }
    async _GetStepsInDatabase(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetStepsInDatabase", undefined, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_DictionaryStepInformationArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Get information about the dictionary steps that are in the currently-loggedon database
     * @returns Array of dictionary steps in the database, listing only the highest number for each step
     */
    async GetStepsInDatabase(webapi_options) {
        return this._GetStepsInDatabase(webapi_options);
    }
    async _GetStepsFromNetServerCode(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetStepsFromNetServerCode", undefined, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_DictionaryStepInformationArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Get information about the dictionary steps that NetServer was generated for
     * @returns Array of dictionary steps used when NetServer was generated, listing only the highest number for each step
     */
    async GetStepsFromNetServerCode(webapi_options) {
        return this._GetStepsFromNetServerCode(webapi_options);
    }
} // class v1DatabaseAgentController 
exports.DatabaseAgent = DatabaseAgent;
//# sourceMappingURL=DatabaseAgent.js.map