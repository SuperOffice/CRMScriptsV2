"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tswebapi.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.BulkUpdateAgent = exports.DatabaseAgent = exports.FavouriteAgent = exports.TargetsAgent = exports.DashAgent = exports.DashboardAgent = exports.PocketAgent = exports.CustomerServiceAgent = exports.NumberAllocationAgent = exports.FreeTextAgent = exports.ImportAgent = exports.MessagingAgent = exports.TimeZoneAgent = exports.ReplicationAgent = exports.UserAgent = exports.LicenseAgent = exports.PreferenceAgent = exports.AudienceAgent = exports.ArchiveAgent = exports.RelationAgent = exports.BatchAgent = exports.SaintAgent = exports.ReportAgent = exports.UserDefinedFieldInfoAgent = exports.SentryAgent = exports.WebhookAgent = exports.FindAgent = exports.EMailAgent = exports.SelectionAgent = exports.PreviewsAgent = exports.TooltipsAgent = exports.DiagnosticsAgent = exports.AssociateAgent = exports.ViewStateAgent = exports.ConfigurationAgent = exports.MDOAgent = exports.NavigatorAgent = exports.BLOBAgent = exports.ListAgent = exports.DocumentAgent = exports.ForeignSystemAgent = exports.AppointmentAgent = exports.ProjectAgent = exports.PhoneListAgent = exports.SaleAgent = exports.PersonAgent = exports.ContactAgent = exports.ResourceAgent = exports.ErpSyncAgent = exports.QuoteAgent = void 0;
exports.AgentsApi = exports.ResourceParsing = exports.WebApiStatus = exports.DocumentRestApi = exports.AppointmentRestApi = exports.ProjectRestApi = exports.SaleRestApi = exports.PersonRestApi = exports.ContactRestApi = exports.WorkflowAgent = exports.DocumentMigrationAgent = exports.AIAgent = exports.ChatAgent = exports.DatabaseTableAgent = exports.TicketAgent = exports.CRMScriptAgent = exports.MarketingAgent = void 0;
const tslib_1 = require("tslib");
/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
//
// Generated:
// File:          WebApi/WebApi.cs
//
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------
const base = tslib_1.__importStar(require("./WebApiBase"));
const QuoteAgent_1 = require("./QuoteAgent");
Object.defineProperty(exports, "QuoteAgent", { enumerable: true, get: function () { return QuoteAgent_1.QuoteAgent; } });
const ErpSyncAgent_1 = require("./ErpSyncAgent");
Object.defineProperty(exports, "ErpSyncAgent", { enumerable: true, get: function () { return ErpSyncAgent_1.ErpSyncAgent; } });
const ResourceAgent_1 = require("./ResourceAgent");
Object.defineProperty(exports, "ResourceAgent", { enumerable: true, get: function () { return ResourceAgent_1.ResourceAgent; } });
const ContactAgent_1 = require("./ContactAgent");
Object.defineProperty(exports, "ContactAgent", { enumerable: true, get: function () { return ContactAgent_1.ContactAgent; } });
const PersonAgent_1 = require("./PersonAgent");
Object.defineProperty(exports, "PersonAgent", { enumerable: true, get: function () { return PersonAgent_1.PersonAgent; } });
const SaleAgent_1 = require("./SaleAgent");
Object.defineProperty(exports, "SaleAgent", { enumerable: true, get: function () { return SaleAgent_1.SaleAgent; } });
const PhoneListAgent_1 = require("./PhoneListAgent");
Object.defineProperty(exports, "PhoneListAgent", { enumerable: true, get: function () { return PhoneListAgent_1.PhoneListAgent; } });
const ProjectAgent_1 = require("./ProjectAgent");
Object.defineProperty(exports, "ProjectAgent", { enumerable: true, get: function () { return ProjectAgent_1.ProjectAgent; } });
const AppointmentAgent_1 = require("./AppointmentAgent");
Object.defineProperty(exports, "AppointmentAgent", { enumerable: true, get: function () { return AppointmentAgent_1.AppointmentAgent; } });
const ForeignSystemAgent_1 = require("./ForeignSystemAgent");
Object.defineProperty(exports, "ForeignSystemAgent", { enumerable: true, get: function () { return ForeignSystemAgent_1.ForeignSystemAgent; } });
const DocumentAgent_1 = require("./DocumentAgent");
Object.defineProperty(exports, "DocumentAgent", { enumerable: true, get: function () { return DocumentAgent_1.DocumentAgent; } });
const ListAgent_1 = require("./ListAgent");
Object.defineProperty(exports, "ListAgent", { enumerable: true, get: function () { return ListAgent_1.ListAgent; } });
const BLOBAgent_1 = require("./BLOBAgent");
Object.defineProperty(exports, "BLOBAgent", { enumerable: true, get: function () { return BLOBAgent_1.BLOBAgent; } });
const NavigatorAgent_1 = require("./NavigatorAgent");
Object.defineProperty(exports, "NavigatorAgent", { enumerable: true, get: function () { return NavigatorAgent_1.NavigatorAgent; } });
const MDOAgent_1 = require("./MDOAgent");
Object.defineProperty(exports, "MDOAgent", { enumerable: true, get: function () { return MDOAgent_1.MDOAgent; } });
const ConfigurationAgent_1 = require("./ConfigurationAgent");
Object.defineProperty(exports, "ConfigurationAgent", { enumerable: true, get: function () { return ConfigurationAgent_1.ConfigurationAgent; } });
const ViewStateAgent_1 = require("./ViewStateAgent");
Object.defineProperty(exports, "ViewStateAgent", { enumerable: true, get: function () { return ViewStateAgent_1.ViewStateAgent; } });
const AssociateAgent_1 = require("./AssociateAgent");
Object.defineProperty(exports, "AssociateAgent", { enumerable: true, get: function () { return AssociateAgent_1.AssociateAgent; } });
const DiagnosticsAgent_1 = require("./DiagnosticsAgent");
Object.defineProperty(exports, "DiagnosticsAgent", { enumerable: true, get: function () { return DiagnosticsAgent_1.DiagnosticsAgent; } });
const TooltipsAgent_1 = require("./TooltipsAgent");
Object.defineProperty(exports, "TooltipsAgent", { enumerable: true, get: function () { return TooltipsAgent_1.TooltipsAgent; } });
const PreviewsAgent_1 = require("./PreviewsAgent");
Object.defineProperty(exports, "PreviewsAgent", { enumerable: true, get: function () { return PreviewsAgent_1.PreviewsAgent; } });
const SelectionAgent_1 = require("./SelectionAgent");
Object.defineProperty(exports, "SelectionAgent", { enumerable: true, get: function () { return SelectionAgent_1.SelectionAgent; } });
const EMailAgent_1 = require("./EMailAgent");
Object.defineProperty(exports, "EMailAgent", { enumerable: true, get: function () { return EMailAgent_1.EMailAgent; } });
const FindAgent_1 = require("./FindAgent");
Object.defineProperty(exports, "FindAgent", { enumerable: true, get: function () { return FindAgent_1.FindAgent; } });
const WebhookAgent_1 = require("./WebhookAgent");
Object.defineProperty(exports, "WebhookAgent", { enumerable: true, get: function () { return WebhookAgent_1.WebhookAgent; } });
const SentryAgent_1 = require("./SentryAgent");
Object.defineProperty(exports, "SentryAgent", { enumerable: true, get: function () { return SentryAgent_1.SentryAgent; } });
const UserDefinedFieldInfoAgent_1 = require("./UserDefinedFieldInfoAgent");
Object.defineProperty(exports, "UserDefinedFieldInfoAgent", { enumerable: true, get: function () { return UserDefinedFieldInfoAgent_1.UserDefinedFieldInfoAgent; } });
const ReportAgent_1 = require("./ReportAgent");
Object.defineProperty(exports, "ReportAgent", { enumerable: true, get: function () { return ReportAgent_1.ReportAgent; } });
const SaintAgent_1 = require("./SaintAgent");
Object.defineProperty(exports, "SaintAgent", { enumerable: true, get: function () { return SaintAgent_1.SaintAgent; } });
const BatchAgent_1 = require("./BatchAgent");
Object.defineProperty(exports, "BatchAgent", { enumerable: true, get: function () { return BatchAgent_1.BatchAgent; } });
const RelationAgent_1 = require("./RelationAgent");
Object.defineProperty(exports, "RelationAgent", { enumerable: true, get: function () { return RelationAgent_1.RelationAgent; } });
const ArchiveAgent_1 = require("./ArchiveAgent");
Object.defineProperty(exports, "ArchiveAgent", { enumerable: true, get: function () { return ArchiveAgent_1.ArchiveAgent; } });
const AudienceAgent_1 = require("./AudienceAgent");
Object.defineProperty(exports, "AudienceAgent", { enumerable: true, get: function () { return AudienceAgent_1.AudienceAgent; } });
const PreferenceAgent_1 = require("./PreferenceAgent");
Object.defineProperty(exports, "PreferenceAgent", { enumerable: true, get: function () { return PreferenceAgent_1.PreferenceAgent; } });
const LicenseAgent_1 = require("./LicenseAgent");
Object.defineProperty(exports, "LicenseAgent", { enumerable: true, get: function () { return LicenseAgent_1.LicenseAgent; } });
const UserAgent_1 = require("./UserAgent");
Object.defineProperty(exports, "UserAgent", { enumerable: true, get: function () { return UserAgent_1.UserAgent; } });
const ReplicationAgent_1 = require("./ReplicationAgent");
Object.defineProperty(exports, "ReplicationAgent", { enumerable: true, get: function () { return ReplicationAgent_1.ReplicationAgent; } });
const TimeZoneAgent_1 = require("./TimeZoneAgent");
Object.defineProperty(exports, "TimeZoneAgent", { enumerable: true, get: function () { return TimeZoneAgent_1.TimeZoneAgent; } });
const MessagingAgent_1 = require("./MessagingAgent");
Object.defineProperty(exports, "MessagingAgent", { enumerable: true, get: function () { return MessagingAgent_1.MessagingAgent; } });
const ImportAgent_1 = require("./ImportAgent");
Object.defineProperty(exports, "ImportAgent", { enumerable: true, get: function () { return ImportAgent_1.ImportAgent; } });
const FreeTextAgent_1 = require("./FreeTextAgent");
Object.defineProperty(exports, "FreeTextAgent", { enumerable: true, get: function () { return FreeTextAgent_1.FreeTextAgent; } });
const NumberAllocationAgent_1 = require("./NumberAllocationAgent");
Object.defineProperty(exports, "NumberAllocationAgent", { enumerable: true, get: function () { return NumberAllocationAgent_1.NumberAllocationAgent; } });
const CustomerServiceAgent_1 = require("./CustomerServiceAgent");
Object.defineProperty(exports, "CustomerServiceAgent", { enumerable: true, get: function () { return CustomerServiceAgent_1.CustomerServiceAgent; } });
const PocketAgent_1 = require("./PocketAgent");
Object.defineProperty(exports, "PocketAgent", { enumerable: true, get: function () { return PocketAgent_1.PocketAgent; } });
const DashboardAgent_1 = require("./DashboardAgent");
Object.defineProperty(exports, "DashboardAgent", { enumerable: true, get: function () { return DashboardAgent_1.DashboardAgent; } });
const DashAgent_1 = require("./DashAgent");
Object.defineProperty(exports, "DashAgent", { enumerable: true, get: function () { return DashAgent_1.DashAgent; } });
const TargetsAgent_1 = require("./TargetsAgent");
Object.defineProperty(exports, "TargetsAgent", { enumerable: true, get: function () { return TargetsAgent_1.TargetsAgent; } });
const FavouriteAgent_1 = require("./FavouriteAgent");
Object.defineProperty(exports, "FavouriteAgent", { enumerable: true, get: function () { return FavouriteAgent_1.FavouriteAgent; } });
const DatabaseAgent_1 = require("./DatabaseAgent");
Object.defineProperty(exports, "DatabaseAgent", { enumerable: true, get: function () { return DatabaseAgent_1.DatabaseAgent; } });
const BulkUpdateAgent_1 = require("./BulkUpdateAgent");
Object.defineProperty(exports, "BulkUpdateAgent", { enumerable: true, get: function () { return BulkUpdateAgent_1.BulkUpdateAgent; } });
const MarketingAgent_1 = require("./MarketingAgent");
Object.defineProperty(exports, "MarketingAgent", { enumerable: true, get: function () { return MarketingAgent_1.MarketingAgent; } });
const CRMScriptAgent_1 = require("./CRMScriptAgent");
Object.defineProperty(exports, "CRMScriptAgent", { enumerable: true, get: function () { return CRMScriptAgent_1.CRMScriptAgent; } });
const TicketAgent_1 = require("./TicketAgent");
Object.defineProperty(exports, "TicketAgent", { enumerable: true, get: function () { return TicketAgent_1.TicketAgent; } });
const DatabaseTableAgent_1 = require("./DatabaseTableAgent");
Object.defineProperty(exports, "DatabaseTableAgent", { enumerable: true, get: function () { return DatabaseTableAgent_1.DatabaseTableAgent; } });
const ChatAgent_1 = require("./ChatAgent");
Object.defineProperty(exports, "ChatAgent", { enumerable: true, get: function () { return ChatAgent_1.ChatAgent; } });
const AIAgent_1 = require("./AIAgent");
Object.defineProperty(exports, "AIAgent", { enumerable: true, get: function () { return AIAgent_1.AIAgent; } });
const DocumentMigrationAgent_1 = require("./DocumentMigrationAgent");
Object.defineProperty(exports, "DocumentMigrationAgent", { enumerable: true, get: function () { return DocumentMigrationAgent_1.DocumentMigrationAgent; } });
const WorkflowAgent_1 = require("./WorkflowAgent");
Object.defineProperty(exports, "WorkflowAgent", { enumerable: true, get: function () { return WorkflowAgent_1.WorkflowAgent; } });
const ContactRestApi_1 = require("./ContactRestApi");
Object.defineProperty(exports, "ContactRestApi", { enumerable: true, get: function () { return ContactRestApi_1.ContactRestApi; } });
const PersonRestApi_1 = require("./PersonRestApi");
Object.defineProperty(exports, "PersonRestApi", { enumerable: true, get: function () { return PersonRestApi_1.PersonRestApi; } });
const SaleRestApi_1 = require("./SaleRestApi");
Object.defineProperty(exports, "SaleRestApi", { enumerable: true, get: function () { return SaleRestApi_1.SaleRestApi; } });
const ProjectRestApi_1 = require("./ProjectRestApi");
Object.defineProperty(exports, "ProjectRestApi", { enumerable: true, get: function () { return ProjectRestApi_1.ProjectRestApi; } });
const AppointmentRestApi_1 = require("./AppointmentRestApi");
Object.defineProperty(exports, "AppointmentRestApi", { enumerable: true, get: function () { return AppointmentRestApi_1.AppointmentRestApi; } });
const DocumentRestApi_1 = require("./DocumentRestApi");
Object.defineProperty(exports, "DocumentRestApi", { enumerable: true, get: function () { return DocumentRestApi_1.DocumentRestApi; } });
// Re-export useful things from base 
const WebApiBase_1 = require("./WebApiBase");
Object.defineProperty(exports, "WebApiStatus", { enumerable: true, get: function () { return WebApiBase_1.WebApiStatus; } });
Object.defineProperty(exports, "ResourceParsing", { enumerable: true, get: function () { return WebApiBase_1.ResourceParsing; } });
/**
 * WebApi Agents connection - configure base URL and authentication here, then get the agents you want to use.
 */
class AgentsApi extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        base.WebApiBase._global_options = undefined;
        let options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        super(options, false);
    }
    /** Define global options for webapi agents. Once called, you don't need to pass baseUrl to agents.
     *  This configuration also happens first time an agent is constructed.
     */
    static configure(baseUrlOrOptions, configOrOptions, resourceManagerOrOptions) {
        base.WebApiBase._global_options = undefined;
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, configOrOptions, resourceManagerOrOptions);
        base.WebApiBase._global_options = options;
    }
    /** Authenticate with Basic username:password value. Will not work in CRM Online. */
    authenticateWithPassword(username, password) {
        let opts = base.WebApiBase._global_options;
        opts = opts || this._options || {};
        opts.axiosConfig = opts.axiosConfig || {};
        opts.axiosConfig.auth = { username: username, password: password };
    }
    /** Authenticate with SOTicket value. */
    authenticateWithTicket(ticket) {
        let opts = base.WebApiBase._global_options;
        opts = opts || this._options || {};
        opts.axiosConfig = opts.axiosConfig || {};
        opts.axiosConfig.headers = opts.axiosConfig.headers || {};
        opts.axiosConfig.headers["Authorization"] = "SOTicket " + ticket;
    }
    /** Authenticate with Bearer token */
    authenticateWithToken(token) {
        let opts = base.WebApiBase._global_options;
        opts = opts || this._options || {};
        opts.axiosConfig = opts.axiosConfig || {};
        opts.axiosConfig.headers = opts.axiosConfig.headers || {};
        opts.axiosConfig.headers["Authorization"] = "Bearer " + token;
    }
    /** Set SO-AppToken header when talking to CRM Online */
    applicationToken(token) {
        let opts = base.WebApiBase._global_options;
        opts = opts || this._options || {};
        opts.axiosConfig = opts.axiosConfig || {};
        opts.axiosConfig.headers = opts.axiosConfig.headers || {};
        opts.axiosConfig.headers["SO-AppToken"] = token;
    }
    /** Services for the Quote Management feature, part of the Sale module */
    getQuoteAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new QuoteAgent_1.QuoteAgent(options);
    }
    /** Services for the ERP Integration Services feature */
    getErpSyncAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new ErpSyncAgent_1.ErpSyncAgent(options);
    }
    /** String resource substitution management. */
    getResourceAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new ResourceAgent_1.ResourceAgent(options);
    }
    /** Contact (company) data services. */
    getContactAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new ContactAgent_1.ContactAgent(options);
    }
    /** Person data services. */
    getPersonAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new PersonAgent_1.PersonAgent(options);
    }
    /** Sale data services */
    getSaleAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new SaleAgent_1.SaleAgent(options);
    }
    /** Collection of all services for searching for person or contact (company) phone numbers. */
    getPhoneListAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new PhoneListAgent_1.PhoneListAgent(options);
    }
    /** Collection of all services that works with Project data. */
    getProjectAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new ProjectAgent_1.ProjectAgent(options);
    }
    /** Collection of all services that works with Appointment data. */
    getAppointmentAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new AppointmentAgent_1.AppointmentAgent(options);
    }
    /** Collection of all services that works with Foreign key data (Key/Value pairs) */
    getForeignSystemAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new ForeignSystemAgent_1.ForeignSystemAgent(options);
    }
    /** Collection of all services that works with Document data. This is services for the document information, not the physical document themselves. These are handled by the BLOB service methods. */
    getDocumentAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new DocumentAgent_1.DocumentAgent(options);
    }
    /** Collection of all services that works with Lists. These are typical lists of data shown in dropdown list, checkbox lists, etc. */
    getListAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new ListAgent_1.ListAgent(options);
    }
    /** Collection of all services that works with binary objects (BLOBS), e.g. Images and documents. */
    getBLOBAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new BLOBAgent_1.BLOBAgent(options);
    }
    /** Navigator stuff. */
    getNavigatorAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new NavigatorAgent_1.NavigatorAgent(options);
    }
    /** MDO Lists, reading, searching, and item lookup. */
    getMDOAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new MDOAgent_1.MDOAgent(options);
    }
    /** User interface configuration - XMLs and other elements such as inter-client URLs */
    getConfigurationAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new ConfigurationAgent_1.ConfigurationAgent(options);
    }
    /** User interface view state, history, currentXXX values */
    getViewStateAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new ViewStateAgent_1.ViewStateAgent(options);
    }
    /** Associate utilities, notes, not user admininstration */
    getAssociateAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new AssociateAgent_1.AssociateAgent(options);
    }
    /** Diagnostics, usage data collection, caches and flushing */
    getDiagnosticsAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new DiagnosticsAgent_1.DiagnosticsAgent(options);
    }
    /** Tooltip system, hint to text transformation */
    getTooltipsAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new TooltipsAgent_1.TooltipsAgent(options);
    }
    /** Get preview strings from a hint */
    getPreviewsAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new PreviewsAgent_1.PreviewsAgent(options);
    }
    /** Selections, entities, members and tasks */
    getSelectionAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new SelectionAgent_1.SelectionAgent(options);
    }
    /** Email connection, reading, sending */
    getEMailAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new EMailAgent_1.EMailAgent(options);
    }
    /** Find functions */
    getFindAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new FindAgent_1.FindAgent(options);
    }
    /** Webhook definitions - webhooks signal other systems about events inside NetServer */
    getWebhookAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new WebhookAgent_1.WebhookAgent(options);
    }
    /** Data and function right queries */
    getSentryAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new SentryAgent_1.SentryAgent(options);
    }
    /** Returns information about user-defined fields, like field type, field size, field label text, default value. Does not return the actual values in the user-defined fields. The values are returned on the entity objects. */
    getUserDefinedFieldInfoAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new UserDefinedFieldInfoAgent_1.UserDefinedFieldInfoAgent(options);
    }
    /** Run reports, set favourites, labels */
    getReportAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new ReportAgent_1.ReportAgent(options);
    }
    /** Administration and maintenance of SAINT counters and statuses */
    getSaintAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new SaintAgent_1.SaintAgent(options);
    }
    /** Start, stop and monitor predefined batch tasks */
    getBatchAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new BatchAgent_1.BatchAgent(options);
    }
    /** Contact/Person relations */
    getRelationAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new RelationAgent_1.RelationAgent(options);
    }
    /** ArchiveList functions of all kinds */
    getArchiveAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new ArchiveAgent_1.ArchiveAgent(options);
    }
    /** Services specific to the Audience client */
    getAudienceAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new AudienceAgent_1.AudienceAgent(options);
    }
    /** Preferences, user interface tab configuration */
    getPreferenceAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new PreferenceAgent_1.PreferenceAgent(options);
    }
    /** License query, download, activation */
    getLicenseAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new LicenseAgent_1.LicenseAgent(options);
    }
    /** User administration */
    getUserAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new UserAgent_1.UserAgent(options);
    }
    /** Replication/Travel administration */
    getReplicationAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new ReplicationAgent_1.ReplicationAgent(options);
    }
    /** TimeZone maintenance */
    getTimeZoneAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new TimeZoneAgent_1.TimeZoneAgent(options);
    }
    /** SMS and other external messaging systems */
    getMessagingAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new MessagingAgent_1.MessagingAgent(options);
    }
    /** This agent can be used to import data into the system */
    getImportAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new ImportAgent_1.ImportAgent(options);
    }
    /** This agent can be used to manage the free text system */
    getFreeTextAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new FreeTextAgent_1.FreeTextAgent(options);
    }
    /** This agent can be used to manage number allocation */
    getNumberAllocationAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new NumberAllocationAgent_1.NumberAllocationAgent(options);
    }
    /** Agent used for Customer Service methods */
    getCustomerServiceAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new CustomerServiceAgent_1.CustomerServiceAgent(options);
    }
    /** Agent with Pocket specific functionality */
    getPocketAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new PocketAgent_1.PocketAgent(options);
    }
    /** Agent lets you configure dashboard tiles and retrieve dashboard data */
    getDashboardAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new DashboardAgent_1.DashboardAgent(options);
    }
    /** Agent that lets you configure dashboard tiles and retrieve dashboard data */
    getDashAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new DashAgent_1.DashAgent(options);
    }
    /** Agent lets you configure targets, and retrieve targets */
    getTargetsAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new TargetsAgent_1.TargetsAgent(options);
    }
    /** Agent used for retrieveing and setting favourites */
    getFavouriteAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new FavouriteAgent_1.FavouriteAgent(options);
    }
    /** Database schema queries and changes */
    getDatabaseAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new DatabaseAgent_1.DatabaseAgent(options);
    }
    /** Agent used for bulk update methods */
    getBulkUpdateAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new BulkUpdateAgent_1.BulkUpdateAgent(options);
    }
    /** Agent used for Marketing functions, such as Forms */
    getMarketingAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new MarketingAgent_1.MarketingAgent(options);
    }
    /** Manage and execute CRMScript functions. */
    getCRMScriptAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new CRMScriptAgent_1.CRMScriptAgent(options);
    }
    /** Agent used for Ticket functions */
    getTicketAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new TicketAgent_1.TicketAgent(options);
    }
    /** Agent used for CRUD operations on database tables. Read, add, update, delete rows in tables. */
    getDatabaseTableAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new DatabaseTableAgent_1.DatabaseTableAgent(options);
    }
    /** Chat functions. Manage chat channels, sessions and messages. */
    getChatAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new ChatAgent_1.ChatAgent(options);
    }
    /** AI services, such as Translation, Statistics, Sentiment analysis, backed by calls to Public Cloud providers */
    getAIAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new AIAgent_1.AIAgent(options);
    }
    /** Agent used to support migrating documents between different document-plugins, as single documents or batches. */
    getDocumentMigrationAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new DocumentMigrationAgent_1.DocumentMigrationAgent(options);
    }
    /** Agent lets you configure workflow automation */
    getWorkflowAgent(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new WorkflowAgent_1.WorkflowAgent(options);
    }
    /** The Contact Service. The service implements all services working with the Contact object */
    getContactRestApi(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new ContactRestApi_1.ContactRestApi(options);
    }
    /** The Person Service. The service implements all services working with the Person object. */
    getPersonRestApi(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new PersonRestApi_1.PersonRestApi(options);
    }
    /** The Sale Entity contains the sale amount, currency, and sale members. Sales are linked to contacts, persons, and/or projects. */
    getSaleRestApi(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new SaleRestApi_1.SaleRestApi(options);
    }
    /** The Project Service. The service implements all services working with the Project object */
    getProjectRestApi(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new ProjectRestApi_1.ProjectRestApi(options);
    }
    /** Appointments appear in the diary, and have links to a Contact/Person and possibly a Project or Sale. They have start and end time+date. */
    getAppointmentRestApi(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new AppointmentRestApi_1.AppointmentRestApi(options);
    }
    /**  */
    getDocumentRestApi(resourceParsing) {
        const options = base.WebApiBase.FigureOutOptions(this._options);
        if (typeof (resourceParsing) == "number")
            options.resourceParsing = resourceParsing;
        return new DocumentRestApi_1.DocumentRestApi(options);
    }
}
exports.AgentsApi = AgentsApi;
//# sourceMappingURL=WebApi.js.map