"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.DashboardAgent = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
/**
 * Agent lets you configure dashboard tiles and retrieve dashboard data
 */
class DashboardAgent extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Dashboard/";
        super(options);
    }
    /**
     * Set default values into a new Dashboard.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    async CreateDefaultDashboard(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultDashboard", null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_Dashboard_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing Dashboard or creates a new Dashboard if the id parameter is empty
     * @param entity - The Dashboard to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated Dashboard
     */
    async SaveDashboard(entity, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveDashboard", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_Dashboard_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Deletes the Dashboard
     * @param DashboardId - The id of the Dashboard to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    async DeleteDashboard(DashboardId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteDashboard?DashboardId=" + DashboardId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Set default values into a new DashboardTile.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    async CreateDefaultDashboardTile(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultDashboardTile", null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_DashboardTile_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing DashboardTile or creates a new DashboardTile if the id parameter is empty
     * @param entity - The DashboardTile to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated DashboardTile
     */
    async SaveDashboardTile(entity, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveDashboardTile", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_DashboardTile_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Deletes the DashboardTile
     * @param DashboardTileId - The id of the DashboardTile to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    async DeleteDashboardTile(DashboardTileId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteDashboardTile?DashboardTileId=" + DashboardTileId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Gets a Dashboard object.
     * @param dashboardId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single Dashboard
     */
    async GetDashboard(dashboardId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetDashboard?dashboardId=" + dashboardId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_Dashboard_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async _GetDashboards(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetDashboards", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_DashboardArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetDashboards(associateId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = associateId;
        if (typeof (first) === "object" && first && (typeof (first.AssociateId) != 'undefined')) {
            _request = associateId;
            _options = webapi_options;
        }
        else {
            _request = {
                AssociateId: associateId,
            };
            _options = webapi_options;
        }
        return this._GetDashboards(_request, _options);
    }
    async _SetTile(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetTile", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_Dashboard_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SetTile(dashboardId, tileId, position, webapi_options) {
        let _request = null;
        let _options = null;
        const first = dashboardId;
        if (typeof (first) === "object" && first && (typeof (first.DashboardId) != 'undefined' || typeof (first.TileId) != 'undefined' || typeof (first.Position) != 'undefined')) {
            _request = dashboardId;
            _options = tileId;
        }
        else {
            _request = {
                DashboardId: dashboardId,
                TileId: tileId,
                Position: position,
            };
            _options = webapi_options;
        }
        return this._SetTile(_request, _options);
    }
    /*
     * Gets a DashboardTile object.
     * @param dashboardTileId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single DashboardTile
     */
    async GetDashboardTile(dashboardTileId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetDashboardTile?dashboardTileId=" + dashboardTileId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_DashboardTile_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async _GetDashboardTiles(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetDashboardTiles", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_DashboardTileArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetDashboardTiles(dashboardTileIds, webapi_options) {
        let _request = null;
        let _options = null;
        const first = dashboardTileIds;
        if (typeof (first) === "object" && first && (typeof (first.DashboardTileIds) != 'undefined')) {
            _request = dashboardTileIds;
            _options = webapi_options;
        }
        else {
            _request = {
                DashboardTileIds: dashboardTileIds,
            };
            _options = webapi_options;
        }
        return this._GetDashboardTiles(_request, _options);
    }
    async _GetStandardDashboardTileFromChartId(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetStandardDashboardTileFromChartId", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_DashboardTile_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetStandardDashboardTileFromChartId(chartId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = chartId;
        if (typeof (first) === "object" && first && (typeof (first.ChartId) != 'undefined')) {
            _request = chartId;
            _options = webapi_options;
        }
        else {
            _request = {
                ChartId: chartId,
            };
            _options = webapi_options;
        }
        return this._GetStandardDashboardTileFromChartId(_request, _options);
    }
    async _GetData(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetData", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_TileDataArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetData(dashboardTileId, restrictions, webapi_options) {
        let _request = null;
        let _options = null;
        const first = dashboardTileId;
        if (typeof (first) === "object" && first && (typeof (first.DashboardTileId) != 'undefined' || typeof (first.Restrictions) != 'undefined')) {
            _request = dashboardTileId;
            _options = restrictions;
        }
        else {
            _request = {
                DashboardTileId: dashboardTileId,
                Restrictions: restrictions,
            };
            _options = webapi_options;
        }
        return this._GetData(_request, _options);
    }
    async _CreateNewFromTemplate(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("CreateNewFromTemplate", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_DashboardTile_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async CreateNewFromTemplate(dashboardTileId, caption, description, selectionId, visibleFor, webapi_options) {
        let _request = null;
        let _options = null;
        const first = dashboardTileId;
        if (typeof (first) === "object" && first && (typeof (first.DashboardTileId) != 'undefined' || typeof (first.Caption) != 'undefined' || typeof (first.Description) != 'undefined' || typeof (first.SelectionId) != 'undefined' || typeof (first.VisibleFor) != 'undefined')) {
            _request = dashboardTileId;
            _options = caption;
        }
        else {
            _request = {
                DashboardTileId: dashboardTileId,
                Caption: caption,
                Description: description,
                SelectionId: selectionId,
                VisibleFor: visibleFor,
            };
            _options = webapi_options;
        }
        return this._CreateNewFromTemplate(_request, _options);
    }
    async _GetDataWithSelection(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetDataWithSelection", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_TileDataArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetDataWithSelection(dashboardTileId, selectionId, restrictions, webapi_options) {
        let _request = null;
        let _options = null;
        const first = dashboardTileId;
        if (typeof (first) === "object" && first && (typeof (first.DashboardTileId) != 'undefined' || typeof (first.SelectionId) != 'undefined' || typeof (first.Restrictions) != 'undefined')) {
            _request = dashboardTileId;
            _options = selectionId;
        }
        else {
            _request = {
                DashboardTileId: dashboardTileId,
                SelectionId: selectionId,
                Restrictions: restrictions,
            };
            _options = webapi_options;
        }
        return this._GetDataWithSelection(_request, _options);
    }
} // class v1DashboardAgentController 
exports.DashboardAgent = DashboardAgent;
//# sourceMappingURL=DashboardAgent.js.map