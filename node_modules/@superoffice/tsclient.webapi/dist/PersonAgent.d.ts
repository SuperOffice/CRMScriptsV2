import { AxiosRequestConfig } from 'axios';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Person data services.
 */
export interface IPersonAgent {
    CreateDefaultConsentPerson(): Promise<carriers.ConsentPerson>;
    SaveConsentPerson(entity: carriers.ConsentPerson): Promise<carriers.ConsentPerson>;
    DeleteConsentPerson(ConsentPersonId: number): Promise<void>;
    CreateDefaultPersonEntity(): Promise<carriers.PersonEntity>;
    SavePersonEntity(entity: carriers.PersonEntity): Promise<carriers.PersonEntity>;
    DeletePersonEntity(PersonEntityId: number): Promise<void>;
    CreateDefaultPersonImage(): Promise<carriers.PersonImage>;
    GetConsentPerson(consentPersonId: number): Promise<carriers.ConsentPerson>;
    GetPerson(personId: number): Promise<carriers.Person>;
    GetPersonEntity(personEntityId: number): Promise<carriers.PersonEntity>;
    Undelete(request: carriers.Person_UndeleteRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    Undelete(id: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetMyPerson(webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonEntity>;
    GetSalesRep(request: carriers.Person_GetSalesRepRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonEntity>;
    GetSalesRep(contactName: string, personFirstname: string, personLastname: string, emailAddress: string, phoneNumber: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonEntity>;
    GetPhones(request: carriers.Person_GetPhonesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EntityElement[]>;
    GetPhones(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EntityElement[]>;
    ChangeCountry(request: carriers.Person_ChangeCountryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonEntity>;
    ChangeCountry(personEntity: carriers.PersonEntity, toCountryId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonEntity>;
    GetAddress(request: carriers.Person_GetAddressRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Address>;
    GetAddress(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Address>;
    GetAddressByCountry(request: carriers.Person_GetAddressByCountryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Address>;
    GetAddressByCountry(personId: number, countryId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Address>;
    GetPersonImage(request: carriers.Person_GetPersonImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetPersonImage(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    SetPersonImage(request: carriers.Person_SetPersonImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetPersonImage(personId: number, image: ArrayBuffer | string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    CreateDefaultByContactId(request: carriers.Person_CreateDefaultByContactIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonEntity>;
    CreateDefaultByContactId(contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonEntity>;
    Move(request: carriers.Person_MoveRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    Move(personId: number, destinationContactId: number, moveAfterDate: Date, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    Merge(request: carriers.Person_MergeRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    Merge(sourcePersonId: number, destinationPersonId: number, moveAfterDate: Date, deleteSource: boolean, replaceEmptyFieldsOnDestination: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    CreateDefaultFromCredential(request: carriers.Person_CreateDefaultFromCredentialRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonEntity>;
    CreateDefaultFromCredential(contactId: number, credentialType: string, credentialValue: string, credentialDisplayValue: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonEntity>;
    IsNumberValid(request: carriers.Person_IsNumberValidRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    IsNumberValid(contactId: number, number: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    SetConsent(request: carriers.Person_SetConsentRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetConsent(personId: number, purpose: string, source: string, legalBase: string, comment: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RemoveConsent(request: carriers.Person_RemoveConsentRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RemoveConsent(personId: number, purpose: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    HasConsent(request: carriers.Person_HasConsentRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    HasConsent(personId: number, purpose: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    GetConsentInfos(request: carriers.Person_GetConsentInfosRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ConsentInfo[]>;
    GetConsentInfos(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ConsentInfo[]>;
    SendConsentConfirmationEmail(request: carriers.Person_SendConsentConfirmationEmailRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SendConsentConfirmationEmail(personId: number, emailAddress: string, emailTemplateId: number, cultureLcidId: number, subject: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    ResolvePersonFromInfo(request: carriers.Person_ResolvePersonFromInfoRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ResolvedPerson>;
    ResolvePersonFromInfo(contactId: number, personName: string, phoneNumbers: string[], emails: string[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.ResolvedPerson>;
    AddEmailAddressToPerson(request: carriers.Person_AddEmailAddressToPersonRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    AddEmailAddressToPerson(personId: number, emailAddress: string, setAsPrimaryEmail: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    CreateTemporaryKey(request: carriers.Person_CreateTemporaryKeyRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    CreateTemporaryKey(domain: enums.TemporaryKeyDomain, targetId: number, personId: number, expires: Date, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    CheckTemporaryKey(request: carriers.Person_CheckTemporaryKeyRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TemporaryKeyInfo>;
    CheckTemporaryKey(temporaryKey: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TemporaryKeyInfo>;
    DeleteTemporaryKeysOfDomain(request: carriers.Person_DeleteTemporaryKeysOfDomainRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteTemporaryKeysOfDomain(domain: enums.TemporaryKeyDomain, personId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteExpired(webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetPersonSummary(request: carriers.Person_GetPersonSummaryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonSummary>;
    GetPersonSummary(personId: number, limit: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonSummary>;
    AddBounce(request: carriers.Person_AddBounceRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    AddBounce(emailAddress: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    ValidatePersonEntity(request: carriers.Person_ValidatePersonEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    ValidatePersonEntity(personEntity: carriers.PersonEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    AddBounceWithCount(request: carriers.Person_AddBounceWithCountRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    AddBounceWithCount(emailAddress: string, counts: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetBestSoLanguageForTemplate(request: carriers.Person_GetBestSoLanguageForTemplateRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetBestSoLanguageForTemplate(personId: number, templateId: number, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    AddBounceWithDetails(request: carriers.Person_AddBounceWithDetailsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    AddBounceWithDetails(emailAddress: string, counts: number, code: number, reason: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetPersonImages(request: carriers.Person_GetPersonImagesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonImage[]>;
    GetPersonImages(personIds: number[], scaledWidth: number, scaledHeight: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonImage[]>;
    CreateOrUpdateUserCandidate(request: carriers.Person_CreateOrUpdateUserCandidateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserCandidate>;
    CreateOrUpdateUserCandidate(personId: number, username: string, accessAllRequests: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserCandidate>;
    GetUserCandidateByPerson(request: carriers.Person_GetUserCandidateByPersonRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserCandidate>;
    GetUserCandidateByPerson(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserCandidate>;
    GetCustomerCentrePasswordReplyTemplate(request: carriers.Person_GetCustomerCentrePasswordReplyTemplateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ReplyTemplateParsed>;
    GetCustomerCentrePasswordReplyTemplate(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ReplyTemplateParsed>;
    SendEmail(request: carriers.Person_SendEmailRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SendEmail(from: string, to: string, subject: string, plainBody: string, htmlBody: string, attachmentIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetPersonList(personIds: number[]): Promise<carriers.Person[]>;
    GetPersonsFromContact(request: carriers.Person_GetPersonsFromContactRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person[]>;
    GetPersonsFromContact(contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person[]>;
    GetPersonsFromProject(request: carriers.Person_GetPersonsFromProjectRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person[]>;
    GetPersonsFromProject(projectId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person[]>;
    GetColleagues(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person[]>;
    GetColleaguesByDepartment(request: carriers.Person_GetColleaguesByDepartmentRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person[]>;
    GetColleaguesByDepartment(departmentId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person[]>;
    GetColleaguesBySource(request: carriers.Person_GetColleaguesBySourceRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person[]>;
    GetColleaguesBySource(sourceType: enums.AssociateSourceType, count: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person[]>;
    GetMyOwner(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person>;
    GetOwnerOnPersonId(request: carriers.Person_GetOwnerOnPersonIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person>;
    GetOwnerOnPersonId(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person>;
    ChangePersonRank(request: carriers.Person_ChangePersonRankRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    ChangePersonRank(personId: number, moveUp: boolean, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    SetPersonRank(request: carriers.Person_SetPersonRankRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    SetPersonRank(personId: number, desiredRank: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    NormalizeRanks(request: carriers.Person_NormalizeRanksRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    NormalizeRanks(contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
}
/**
 * Person data services.
 */
export declare class PersonAgent extends base.WebApiBase implements IPersonAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * Set default values into a new ConsentPerson.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultConsentPerson(options?: base.WebApiRequestOptions): Promise<carriers.ConsentPerson>;
    SaveConsentPerson(entity: carriers.ConsentPerson, options?: base.WebApiRequestOptions): Promise<carriers.ConsentPerson>;
    DeleteConsentPerson(ConsentPersonId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new PersonEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultPersonEntity(options?: base.WebApiRequestOptions): Promise<carriers.PersonEntity>;
    SavePersonEntity(entity: carriers.PersonEntity, options?: base.WebApiRequestOptions): Promise<carriers.PersonEntity>;
    DeletePersonEntity(PersonEntityId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new PersonImage.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultPersonImage(options?: base.WebApiRequestOptions): Promise<carriers.PersonImage>;
    GetConsentPerson(consentPersonId: number, options?: base.WebApiRequestOptions): Promise<carriers.ConsentPerson>;
    GetPerson(personId: number, options?: base.WebApiRequestOptions): Promise<carriers.Person>;
    GetPersonEntity(personEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.PersonEntity>;
    private _Undelete;
    /**
     * This entity supports Soft Delete. Call this method to Undelete a previously soft-deleted record
     * @param request - Id
     * @returns This method has no return value
     */
    Undelete(request: carriers.Person_UndeleteRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * This entity supports Soft Delete. Call this method to Undelete a previously soft-deleted record
     * @param id - The primary key of the entity to undelete
     * @returns This method has no return value
     */
    Undelete(id: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetMyPerson;
    /**
     * Gets the person info belonging to the currently logged on user.
     * @returns The PersonEntity
     */
    GetMyPerson(webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonEntity>;
    private _GetSalesRep;
    /**
     * Returns the sales representative for an external user. If this method is accessed with anonymous authentication the external user is recognized by contact and name, or by email, or phone number. If the external user is recognized as an CRM5 user (internal or external) the input fields can be left blank.
     * @param request - ContactName, PersonFirstname, PersonLastname, EmailAddress, PhoneNumber
     * @returns The PersonEntity of the sales rep.
     */
    GetSalesRep(request: carriers.Person_GetSalesRepRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonEntity>;
    /**
     * Returns the sales representative for an external user. If this method is accessed with anonymous authentication the external user is recognized by contact and name, or by email, or phone number. If the external user is recognized as an CRM5 user (internal or external) the input fields can be left blank.
     * @param contactName - The company name of the person requesting his sales representative. May be empty if email or phone is provided.
     * @param personFirstname - The firstname of the person requesting his sales representative. May be empty if email or phone is provided.
     * @param personLastname - The lastname of the person requesting his sales representative. May be empty if email or phone is provided.
     * @param emailAddress - The email address of the person requesting his sales representative. May be empty if phone, or contact and person name is provided.
     * @param phoneNumber - The phone number of the person requesting his sales representative. May be empty if email, or contact and person name is provided.
     * @returns The PersonEntity of the sales rep.
     */
    GetSalesRep(contactName: string, personFirstname: string, personLastname: string, emailAddress: string, phoneNumber: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonEntity>;
    private _GetPhones;
    /**
     * Returning all phones that belong to a person, ordered by the phone type.
     * @param request - PersonId
     * @returns An array of Phones
     */
    GetPhones(request: carriers.Person_GetPhonesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EntityElement[]>;
    /**
     * Returning all phones that belong to a person, ordered by the phone type.
     * @param personId - The person id
     * @returns An array of Phones
     */
    GetPhones(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EntityElement[]>;
    private _ChangeCountry;
    /**
     * Change country regenerates the default values and localized information such as phone number and address format for this entity.
     * @param request - PersonEntity, ToCountryId
     * @returns The PersonEntity
     */
    ChangeCountry(request: carriers.Person_ChangeCountryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonEntity>;
    /**
     * Change country regenerates the default values and localized information such as phone number and address format for this entity.
     * @param personEntity - The PersonEntity to change country on
     * @param toCountryId - The country to switch to
     * @returns The PersonEntity
     */
    ChangeCountry(personEntity: carriers.PersonEntity, toCountryId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonEntity>;
    private _GetAddress;
    /**
     * Gets the person&apos;s localized address.
     * @param request - PersonId
     * @returns The address as LocalizedField[][].
     */
    GetAddress(request: carriers.Person_GetAddressRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Address>;
    /**
     * Gets the person&apos;s localized address.
     * @param personId - The person id
     * @returns The address as LocalizedField[][].
     */
    GetAddress(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Address>;
    private _GetAddressByCountry;
    /**
     * Gets the person&apos;s localized address.
     * @param request - PersonId, CountryId
     * @returns The address as LocalizedField[][].
     */
    GetAddressByCountry(request: carriers.Person_GetAddressByCountryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Address>;
    /**
     * Gets the person&apos;s localized address.
     * @param personId - The person id
     * @param countryId -
     * @returns The address as LocalizedField[][].
     */
    GetAddressByCountry(personId: number, countryId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Address>;
    private _GetPersonImage;
    /**
     * Returns the person image that is displayed in the CRM application.
     * @param request - PersonId
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)
     */
    GetPersonImage(request: carriers.Person_GetPersonImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    /**
     * Returns the person image that is displayed in the CRM application.
     * @param personId - The person id of the person the image belongs to.
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)
     */
    GetPersonImage(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    private _SetPersonImage;
    /**
     * Stores the person image that is displayed in the CRM application.
     * @param request - PersonId, Image
     * @returns
     */
    SetPersonImage(request: carriers.Person_SetPersonImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Stores the person image that is displayed in the CRM application.
     * @param personId - The person id of the person the image belongs to.
     * @param image - The image that is stored on the person (System.Drawing.Image)
     * @returns
     */
    SetPersonImage(personId: number, image: ArrayBuffer | string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _CreateDefaultByContactId;
    /**
     * Creates a PersonEntity with default values based on the contactId.
     * @param request - ContactId
     * @returns
     */
    CreateDefaultByContactId(request: carriers.Person_CreateDefaultByContactIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonEntity>;
    /**
     * Creates a PersonEntity with default values based on the contactId.
     * @param contactId - Contact id of the person
     * @returns
     */
    CreateDefaultByContactId(contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonEntity>;
    private _Move;
    /**
     * Move a person to a specified contact. You must specify the date after which activities will be moved along with the person.
     * @param request - PersonId, DestinationContactId, MoveAfterDate
     * @returns
     */
    Move(request: carriers.Person_MoveRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Move a person to a specified contact. You must specify the date after which activities will be moved along with the person.
     * @param personId - The identifier for the person
     * @param destinationContactId - The identifier for the contact which the person will be moved to
     * @param moveAfterDate - Move activites after this date. Activities before this date are left alone.
     * @returns
     */
    Move(personId: number, destinationContactId: number, moveAfterDate: Date, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _Merge;
    /**
     * Merge two persons. The destination person will remain. You must specify the date after which activities will be moved along with the person.
     * @param request - SourcePersonId, DestinationPersonId, MoveAfterDate, DeleteSource, ReplaceEmptyFieldsOnDestination
     * @returns
     */
    Merge(request: carriers.Person_MergeRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Merge two persons. The destination person will remain. You must specify the date after which activities will be moved along with the person.
     * @param sourcePersonId - The identifier for the person which will be merged into the destination person. The source person is deleted/marked retired after the merge.
     * @param destinationPersonId - The identifier for the person which will remain after the merge. The target person is updated.
     * @param moveAfterDate - Merge activites after this date. Activities before this date are left alone.
     * @param deleteSource - If true, the source person will be deleted after the merge. If false, it will have its retired flag set
     * @param replaceEmptyFieldsOnDestination - If true, empty fields on destination will be replaced by values from source.
     * @returns
     */
    Merge(sourcePersonId: number, destinationPersonId: number, moveAfterDate: Date, deleteSource: boolean, replaceEmptyFieldsOnDestination: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _CreateDefaultFromCredential;
    /**
     * Creates a PersonEntity with default values based on the contactId and credentials.
     * @param request - ContactId, CredentialType, CredentialValue, CredentialDisplayValue
     * @returns
     */
    CreateDefaultFromCredential(request: carriers.Person_CreateDefaultFromCredentialRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonEntity>;
    /**
     * Creates a PersonEntity with default values based on the contactId and credentials.
     * @param contactId - Contact id of the person
     * @param credentialType - Type of credentials, corresponding to name of plugin and type in the credentials table.
     * @param credentialValue - This is the actuall value of the credentials.  This will typically be the password or teh users SID in active directory
     * @param credentialDisplayValue - The value displayed to the user. this will typically be the users login name in active directory.
     * @returns
     */
    CreateDefaultFromCredential(contactId: number, credentialType: string, credentialValue: string, credentialDisplayValue: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonEntity>;
    private _IsNumberValid;
    /**
     * Checks if the number is unique or required.  The setting is configured from admin under system options.
     * @param request - ContactId, Number
     * @returns True if number is ok (passes uniqueness/required checks)
     */
    IsNumberValid(request: carriers.Person_IsNumberValidRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Checks if the number is unique or required.  The setting is configured from admin under system options.
     * @param contactId -
     * @param number - Number to check.
     * @returns True if number is ok (passes uniqueness/required checks)
     */
    IsNumberValid(contactId: number, number: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _SetConsent;
    /**
     * Set a specified type of consent on the person.
     * @param request - PersonId, Purpose, Source, LegalBase, Comment
     * @returns
     */
    SetConsent(request: carriers.Person_SetConsentRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set a specified type of consent on the person.
     * @param personId - The person id
     * @param purpose - The Key of the purpose this affects. e.g. 'STORE' or 'EMARKETING'.
     * @param source - The Key of the source of this consent. e.g. 'USER', 'WEBFORM' or 'API'.
     * @param legalBase - The Key of the legal base for this consent. e.g. '61A', '61B', '61F'
     * @param comment - A comment regarding this consent. May be null or empty.
     * @returns
     */
    SetConsent(personId: number, purpose: string, source: string, legalBase: string, comment: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _RemoveConsent;
    /**
     * Turn off consent for a specified person and purpose.
     * @param request - PersonId, Purpose
     * @returns
     */
    RemoveConsent(request: carriers.Person_RemoveConsentRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Turn off consent for a specified person and purpose.
     * @param personId - The person id
     * @param purpose - The key of the purpose to remove. (e.g. 'STORE' or 'EMARKETING')
     * @returns
     */
    RemoveConsent(personId: number, purpose: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _HasConsent;
    /**
     * Check if consent has been given by a specified person, for a specific purpose. Withdraw consents return FALSE.
     * @param request - PersonId, Purpose
     * @returns True if the person has consented to the given purpose.
     */
    HasConsent(request: carriers.Person_HasConsentRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Check if consent has been given by a specified person, for a specific purpose. Withdraw consents return FALSE.
     * @param personId - The person id
     * @param purpose - The key of the purpose to check. (e.g. 'STORE' or 'EMARKETING')
     * @returns True if the person has consented to the given purpose.
     */
    HasConsent(personId: number, purpose: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _GetConsentInfos;
    /**
     * Get all consent information for a given person. May include withdrawn consents (check
     * @param request - PersonId
     * @returns List of consents recorded on this person
     */
    GetConsentInfos(request: carriers.Person_GetConsentInfosRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ConsentInfo[]>;
    /**
     * Get all consent information for a given person. May include withdrawn consents (check
     * @param personId - The person id to get consents for
     * @returns List of consents recorded on this person
     */
    GetConsentInfos(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ConsentInfo[]>;
    private _SendConsentConfirmationEmail;
    /**
     * Send confirmation email to the provided person, email address (id), using the document template
     * @param request - PersonId, EmailAddress, EmailTemplateId, CultureLcidId, Subject
     * @returns
     */
    SendConsentConfirmationEmail(request: carriers.Person_SendConsentConfirmationEmailRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Send confirmation email to the provided person, email address (id), using the document template
     * @param personId - The person id
     * @param emailAddress - The email address to send to.
     * @param emailTemplateId - The id of the email template (doctmpl_id)
     * @param cultureLcidId - The id of the culture (LCID)
     * @param subject - Optional email subject
     * @returns
     */
    SendConsentConfirmationEmail(personId: number, emailAddress: string, emailTemplateId: number, cultureLcidId: number, subject: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _ResolvePersonFromInfo;
    /**
     * Get a person from the provided information. If the person does not exist, it will be created on demand.
     * @param request - ContactId, PersonName, PhoneNumbers, Emails
     * @returns The results of the resolve-operation.
     */
    ResolvePersonFromInfo(request: carriers.Person_ResolvePersonFromInfoRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ResolvedPerson>;
    /**
     * Get a person from the provided information. If the person does not exist, it will be created on demand.
     * @param contactId - The contact Id of the contact which the person belongs to. Cannot be 0.
     * @param personName - The full name of the person to be resolved. Optional.
     * @param phoneNumbers - Phone numbers registered on the person. Optional.
     * @param emails - Email-addresses registered on the person. Optional.
     * @returns The results of the resolve-operation.
     */
    ResolvePersonFromInfo(contactId: number, personName: string, phoneNumbers: string[], emails: string[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.ResolvedPerson>;
    private _AddEmailAddressToPerson;
    /**
     * Sets the primary email address on person, possibly re-ranking email addresses accordingly.
     * @param request - PersonId, EmailAddress, SetAsPrimaryEmail
     * @returns
     */
    AddEmailAddressToPerson(request: carriers.Person_AddEmailAddressToPersonRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Sets the primary email address on person, possibly re-ranking email addresses accordingly.
     * @param personId - Person id of the person
     * @param emailAddress - The email address to set as primary email address
     * @param setAsPrimaryEmail - True if the address shall be primary email address (have rank == 1)
     * @returns
     */
    AddEmailAddressToPerson(personId: number, emailAddress: string, setAsPrimaryEmail: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _CreateTemporaryKey;
    /**
     * Create a temporary key in the database from the given parameters and return the key string. Used for temporary keys for accessing customer centric functionality, such as UpdateSubscriptions.
     * @param request - Domain, TargetId, PersonId, Expires
     * @returns The key as base64, ready to be used e.g. in a URL
     */
    CreateTemporaryKey(request: carriers.Person_CreateTemporaryKeyRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Create a temporary key in the database from the given parameters and return the key string. Used for temporary keys for accessing customer centric functionality, such as UpdateSubscriptions.
     * @param domain - The domain this key is for
     * @param targetId - The primary key of the entity this is for. Depends on domain.
     * @param personId - The person this key is for. May be null.
     * @param expires - When the key will expire (servers local time)
     * @returns The key as base64, ready to be used e.g. in a URL
     */
    CreateTemporaryKey(domain: enums.TemporaryKeyDomain, targetId: number, personId: number, expires: Date, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _CheckTemporaryKey;
    /**
     * Check a temporary key for validity, and in case it is valid, return its domain, targetId and personId
     * @param request - TemporaryKey
     * @returns The info about the temporary key. Domain will be Unknown if key is not valid.
     */
    CheckTemporaryKey(request: carriers.Person_CheckTemporaryKeyRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TemporaryKeyInfo>;
    /**
     * Check a temporary key for validity, and in case it is valid, return its domain, targetId and personId
     * @param temporaryKey - The base64 encoded key value, as returned by CreateTemporaryKey
     * @returns The info about the temporary key. Domain will be Unknown if key is not valid.
     */
    CheckTemporaryKey(temporaryKey: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TemporaryKeyInfo>;
    private _DeleteTemporaryKeysOfDomain;
    /**
     * Delete all temporary keys for a given domain and person
     * @param request - Domain, PersonId
     * @returns
     */
    DeleteTemporaryKeysOfDomain(request: carriers.Person_DeleteTemporaryKeysOfDomainRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Delete all temporary keys for a given domain and person
     * @param domain - The domain type to delete
     * @param personId - The person for which to delete the keys
     * @returns
     */
    DeleteTemporaryKeysOfDomain(domain: enums.TemporaryKeyDomain, personId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _DeleteExpired;
    /**
     * Trigger deletion of persons that has been (soft) deleted and have timed out the expiry period (the SoftDeleteRetention preference).
     * @returns
     */
    DeleteExpired(webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetPersonSummary;
    /**
     * Get summary of person and recent activity.
     * @param request - PersonId, Limit
     * @returns Summary of person, with recent requests, sales, follow-ups, chats.
     */
    GetPersonSummary(request: carriers.Person_GetPersonSummaryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonSummary>;
    /**
     * Get summary of person and recent activity.
     * @param personId - The person id to summarize.
     * @param limit - Max number of items to include in summary lists.
     * @returns Summary of person, with recent requests, sales, follow-ups, chats.
     */
    GetPersonSummary(personId: number, limit: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonSummary>;
    private _AddBounce;
    /**
     * Add a bounce count on the email address if it exists
     * @param request - EmailAddress
     * @returns
     */
    AddBounce(request: carriers.Person_AddBounceRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Add a bounce count on the email address if it exists
     * @param emailAddress - The email address which we want to add a bounce count to
     * @returns
     */
    AddBounce(emailAddress: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _ValidatePersonEntity;
    /**
     * Check that entity is ready for saving, return error messages by field.
     * @param request - PersonEntity
     * @returns Error messages tagged by field.
     */
    ValidatePersonEntity(request: carriers.Person_ValidatePersonEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    /**
     * Check that entity is ready for saving, return error messages by field.
     * @param personEntity - Entity to be checked for errors.
     * @returns Error messages tagged by field.
     */
    ValidatePersonEntity(personEntity: carriers.PersonEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    private _AddBounceWithCount;
    /**
     * Add a number of bounce counts on the email address if it exists
     * @param request - EmailAddress, Counts
     * @returns
     */
    AddBounceWithCount(request: carriers.Person_AddBounceWithCountRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Add a number of bounce counts on the email address if it exists
     * @param emailAddress - The email address which we want to add bounce counts to
     * @param counts - The number of bounce counts to add
     * @returns
     */
    AddBounceWithCount(emailAddress: string, counts: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetBestSoLanguageForTemplate;
    /**
     * Get the best language for this person on this template
     * @param request - PersonId, TemplateId
     * @returns The solang code for best language, empty string if no best language found
     */
    GetBestSoLanguageForTemplate(request: carriers.Person_GetBestSoLanguageForTemplateRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Get the best language for this person on this template
     * @param personId - The id of the person
     * @param templateId - The id of the template to find languages on
     * @returns The solang code for best language, empty string if no best language found
     */
    GetBestSoLanguageForTemplate(personId: number, templateId: number, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _AddBounceWithDetails;
    /**
     * Add a number of bounce counts on the email address if it exists, and with possible bounce code and reason
     * @param request - EmailAddress, Counts, Code, Reason
     * @returns
     */
    AddBounceWithDetails(request: carriers.Person_AddBounceWithDetailsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Add a number of bounce counts on the email address if it exists, and with possible bounce code and reason
     * @param emailAddress - The email address which we want to add bounce counts to
     * @param counts - The number of bounce counts to add
     * @param code - A numeric code representing the bounce reason
     * @param reason - A textual tag representing the bounce reason
     * @returns
     */
    AddBounceWithDetails(emailAddress: string, counts: number, code: number, reason: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetPersonImages;
    /**
     * Get the image for a set of persons scaled to a specific size. Returned images are in PNG format.
     * @param request - PersonIds, ScaledWidth, ScaledHeight
     * @returns List of person images. Persons without an image are not present in this list.
     */
    GetPersonImages(request: carriers.Person_GetPersonImagesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonImage[]>;
    /**
     * Get the image for a set of persons scaled to a specific size. Returned images are in PNG format.
     * @param personIds - List of persons to get images for.
     * @param scaledWidth - Returned images are scaled to this width
     * @param scaledHeight - Returned images are scaled to this height
     * @returns List of person images. Persons without an image are not present in this list.
     */
    GetPersonImages(personIds: number[], scaledWidth: number, scaledHeight: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonImage[]>;
    private _CreateOrUpdateUserCandidate;
    /**
     * Creates a Customer Centre User (UserCandidate) for a given Contact (personId) with the supplied parameters. If the Customer Centre User already exists for a given Contact, the user is updated with the supplied parameters.
     * @param request - PersonId, Username, AccessAllRequests
     * @returns UserCandidate created or updated.
     */
    CreateOrUpdateUserCandidate(request: carriers.Person_CreateOrUpdateUserCandidateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserCandidate>;
    /**
     * Creates a Customer Centre User (UserCandidate) for a given Contact (personId) with the supplied parameters. If the Customer Centre User already exists for a given Contact, the user is updated with the supplied parameters.
     * @param personId - Person to create UserCandidate for.
     * @param username - Desired username. Username must be unique. If the username is not unique, method will throw an error.
     * @param accessAllRequests - Determines if Custom Center User has access to all requests created for all Contacts in the company.
     * @returns UserCandidate created or updated.
     */
    CreateOrUpdateUserCandidate(personId: number, username: string, accessAllRequests: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserCandidate>;
    private _GetUserCandidateByPerson;
    /**
     * Gets user candidate linked to a person.
     * @param request - PersonId
     * @returns UserCandidate linked to a person.
     */
    GetUserCandidateByPerson(request: carriers.Person_GetUserCandidateByPersonRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserCandidate>;
    /**
     * Gets user candidate linked to a person.
     * @param personId - Person related to requested UserCandidate.
     * @returns UserCandidate linked to a person.
     */
    GetUserCandidateByPerson(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserCandidate>;
    private _GetCustomerCentrePasswordReplyTemplate;
    /**
     * Gets a parsed Customer Centre password reply template for a particular customer
     * @param request - PersonId
     * @returns A parsed Customer Centre password reply template.
     */
    GetCustomerCentrePasswordReplyTemplate(request: carriers.Person_GetCustomerCentrePasswordReplyTemplateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ReplyTemplateParsed>;
    /**
     * Gets a parsed Customer Centre password reply template for a particular customer
     * @param personId - Person/customer id to get the template for.
     * @returns A parsed Customer Centre password reply template.
     */
    GetCustomerCentrePasswordReplyTemplate(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ReplyTemplateParsed>;
    private _SendEmail;
    /**
     * Inserts into outbox an email with specified details.
     * @param request - From, To, Subject, PlainBody, HtmlBody, AttachmentIds
     * @returns This method has no return value
     */
    SendEmail(request: carriers.Person_SendEmailRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Inserts into outbox an email with specified details.
     * @param from - Sender's email address.
     * @param to - Recipient's email address.
     * @param subject - Email's subject.
     * @param plainBody - Email's plain body.
     * @param htmlBody - Email's html body.
     * @param attachmentIds - Ids of email's attachments.
     * @returns This method has no return value
     */
    SendEmail(from: string, to: string, subject: string, plainBody: string, htmlBody: string, attachmentIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetPersonList(personIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.Person[]>;
    private _GetPersonsFromContact;
    /**
     * Returns all the persons belonging to a contact.
     * @param request - ContactId
     * @returns The persons belonging to a contact.
     */
    GetPersonsFromContact(request: carriers.Person_GetPersonsFromContactRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person[]>;
    /**
     * Returns all the persons belonging to a contact.
     * @param contactId - The project id
     * @returns The persons belonging to a contact.
     */
    GetPersonsFromContact(contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person[]>;
    private _GetPersonsFromProject;
    /**
     * Returns all the persons belonging to a project.
     * @param request - ProjectId
     * @returns The persons belonging to a project.
     */
    GetPersonsFromProject(request: carriers.Person_GetPersonsFromProjectRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person[]>;
    /**
     * Returns all the persons belonging to a project.
     * @param projectId - The project id
     * @returns The persons belonging to a project.
     */
    GetPersonsFromProject(projectId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person[]>;
    private _GetColleagues;
    /**
     * Gets the persons working in the same company as the logged on user.
     * @returns Colleagues.
     */
    GetColleagues(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person[]>;
    private _GetColleaguesByDepartment;
    /**
     * Gets the persons working in a specific department in the same company as the logged on user. Departments can be retrieved with the PhoneList.DepartmentList service.
     * @param request - DepartmentId
     * @returns PersonList with colleagues.
     */
    GetColleaguesByDepartment(request: carriers.Person_GetColleaguesByDepartmentRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person[]>;
    /**
     * Gets the persons working in a specific department in the same company as the logged on user. Departments can be retrieved with the PhoneList.DepartmentList service.
     * @param departmentId - The department id.
     * @returns PersonList with colleagues.
     */
    GetColleaguesByDepartment(departmentId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person[]>;
    private _GetColleaguesBySource;
    /**
     * Gets the persons working in the same company as the logged on user. The list of person could be retrieved from the history list, the diary view list, or from all sources.
     * @param request - SourceType, Count
     * @returns Colleagues.
     */
    GetColleaguesBySource(request: carriers.Person_GetColleaguesBySourceRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person[]>;
    /**
     * Gets the persons working in the same company as the logged on user. The list of person could be retrieved from the history list, the diary view list, or from all sources.
     * @param sourceType - The “source” the colleagues should be retrieved from. <see cref="AssociateSourceType"/> for more information.
     * @param count -
     * @returns Colleagues.
     */
    GetColleaguesBySource(sourceType: enums.AssociateSourceType, count: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person[]>;
    private _GetMyOwner;
    /**
     * Get the owner of the logged in person.
     * @returns Person
     */
    GetMyOwner(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person>;
    private _GetOwnerOnPersonId;
    /**
     * Get the owner of the person by id.
     * @param request - PersonId
     * @returns Person
     */
    GetOwnerOnPersonId(request: carriers.Person_GetOwnerOnPersonIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person>;
    /**
     * Get the owner of the person by id.
     * @param personId -
     * @returns Person
     */
    GetOwnerOnPersonId(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person>;
    private _ChangePersonRank;
    /**
     * Move one person up or down in the ranking in the Person Archive, if possible.&lt;para/&gt;The person record that has rank = 1 is the primary contact for a company, and is the one used in situations where no person has been explicitly chosen (such as in selections).&lt;para/&gt;This method corresponds to the move up/move down functions in the person archive in the contact panel.&lt;para/&gt;This method always affects two records.
     * @param request - PersonId, MoveUp
     * @returns If movement occurred, the return value will be the ID of the OTHER person that got moved. A GUI should switch the positions of the original person ID and this return value.<para/>If no movement occurred, for any reason,  0 is returned.
     */
    ChangePersonRank(request: carriers.Person_ChangePersonRankRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Move one person up or down in the ranking in the Person Archive, if possible.&lt;para/&gt;The person record that has rank = 1 is the primary contact for a company, and is the one used in situations where no person has been explicitly chosen (such as in selections).&lt;para/&gt;This method corresponds to the move up/move down functions in the person archive in the contact panel.&lt;para/&gt;This method always affects two records.
     * @param personId - Primary key of person record to move up or down. You must have write access both to this record AND to whatever record is adjacent in the direction you want to move.
     * @param moveUp - If true, the given person is moved to an earlier rank (lower numeric rank value, down to a limit of 1; up in the GUI if sorted by ascending rank). If false, movement is to later priority (higher numeric rank value).
     * @returns If movement occurred, the return value will be the ID of the OTHER person that got moved. A GUI should switch the positions of the original person ID and this return value.<para/>If no movement occurred, for any reason,  0 is returned.
     */
    ChangePersonRank(personId: number, moveUp: boolean, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _SetPersonRank;
    /**
     * Directly set the rank field of a person record, adjusting all other person records under the same contact as needed.&lt;para/&gt;This call may affect multiple records, potentially all person records belonging to one contact.&lt;para/&gt;You must have write access for to affected records for this method to succeed.
     * @param request - PersonId, DesiredRank
     * @returns If movement occurred, or the person already had exactly the desired rank value, then the return value will be true. If movement did not occur, for any other reason, the return value is false.
     */
    SetPersonRank(request: carriers.Person_SetPersonRankRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Directly set the rank field of a person record, adjusting all other person records under the same contact as needed.&lt;para/&gt;This call may affect multiple records, potentially all person records belonging to one contact.&lt;para/&gt;You must have write access for to affected records for this method to succeed.
     * @param personId - Id of person to change
     * @param desiredRank - Desired rank to set, legal values are from 1 to the number of person records on this contact. Out of range values will be moved to the closest valid value and processed.
     * @returns If movement occurred, or the person already had exactly the desired rank value, then the return value will be true. If movement did not occur, for any other reason, the return value is false.
     */
    SetPersonRank(personId: number, desiredRank: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _NormalizeRanks;
    /**
     * Nomralize the ranks for all persons that belong to a contact. This means that the persons will be sorted according to their current rank values, and the ranks will be made monotonically increasing from 1.
     * @param request - ContactId
     * @returns The reutrn value is true if the operation suceeded, either because all persons were already normalized, or because normalization was done. It is false if Sentry blocks any required changes.
     */
    NormalizeRanks(request: carriers.Person_NormalizeRanksRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Nomralize the ranks for all persons that belong to a contact. This means that the persons will be sorted according to their current rank values, and the ranks will be made monotonically increasing from 1.
     * @param contactId - Id of contact whose persons are to be rank normalized
     * @returns The reutrn value is true if the operation suceeded, either because all persons were already normalized, or because normalization was done. It is false if Sentry blocks any required changes.
     */
    NormalizeRanks(contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
}
//# sourceMappingURL=PersonAgent.d.ts.map