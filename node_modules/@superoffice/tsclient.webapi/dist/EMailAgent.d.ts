import { AxiosRequestConfig } from 'axios';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Email connection, reading, sending
 *
 * **Online Restricted:** This agent is not available in Online by default. Access must be requested specifically when app is registered.
 */
export interface IEMailAgent {
    CreateDefaultEMailAccount(): Promise<carriers.EMailAccount>;
    SaveEMailAccount(entity: carriers.EMailAccount): Promise<carriers.EMailAccount>;
    DeleteEMailAccount(EMailAccountId: number): Promise<void>;
    CreateDefaultEMailAddress(): Promise<carriers.EMailAddress>;
    CreateDefaultEMailAppointment(): Promise<carriers.EMailAppointment>;
    CreateDefaultEMailAttachment(): Promise<carriers.EMailAttachment>;
    CreateDefaultEMailConnectionInfo(): Promise<carriers.EMailConnectionInfo>;
    CreateDefaultEMailConnectionInfoExtended(): Promise<carriers.EMailConnectionInfoExtended>;
    CreateDefaultEMailCustomHeader(): Promise<carriers.EMailCustomHeader>;
    CreateDefaultEMailEntity(): Promise<carriers.EMailEntity>;
    CreateDefaultEMailEnvelope(): Promise<carriers.EMailEnvelope>;
    CreateDefaultEMailFolder(): Promise<carriers.EMailFolder>;
    CreateDefaultEMailSOInfo(): Promise<carriers.EMailSOInfo>;
    GetEMailAccount(eMailAccountId: number): Promise<carriers.EMailAccount>;
    GetEMailAccountFromEMailAddress(request: carriers.EMail_GetEMailAccountFromEMailAddressRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAccount>;
    GetEMailAccountFromEMailAddress(fromAddress: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAccount>;
    GetCurrentAccountId(webapi_options?: base.WebApiRequestOptions): Promise<number>;
    GetCurrentAccount(webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAccount>;
    GetPersonEntitiesFromEmailAddress(request: carriers.EMail_GetPersonEntitiesFromEmailAddressRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonEntity[]>;
    GetPersonEntitiesFromEmailAddress(emailAddress: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonEntity[]>;
    GetPersonsFromEmailAddress(request: carriers.EMail_GetPersonsFromEmailAddressRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person[]>;
    GetPersonsFromEmailAddress(emailAddress: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person[]>;
    HasMXRecord(request: carriers.EMail_HasMXRecordRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    HasMXRecord(mailDomain: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    HasSPFRecord(request: carriers.EMail_HasSPFRecordRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    HasSPFRecord(sourceSpf: string, targetDomain: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    ResolveEMailRecipients(request: carriers.EMail_ResolveEMailRecipientsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAddress[]>;
    ResolveEMailRecipients(emailAddress: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAddress[]>;
    GetEMailFromId(request: carriers.EMail_GetEMailFromIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    GetEMailFromId(connectionInfo: carriers.EMailConnectionInfo, messageServerId: number, lookupAddresses: boolean, flags: enums.EMailFlags, includeAttachments: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    SendEMails(request: carriers.EMail_SendEMailsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity[]>;
    SendEMails(outgoingConnectionInfo: carriers.EMailConnectionInfo, emails: carriers.EMailEntity[], sentItemsConnectionInfo: carriers.EMailConnectionInfo, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity[]>;
    SaveEMail(request: carriers.EMail_SaveEMailRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    SaveEMail(connectionInfo: carriers.EMailConnectionInfo, email: carriers.EMailEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    AuthenticateIncoming(request: carriers.EMail_AuthenticateIncomingRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    AuthenticateIncoming(connectionInfo: carriers.EMailConnectionInfo, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    AuthenticateOutgoing(request: carriers.EMail_AuthenticateOutgoingRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    AuthenticateOutgoing(connectionInfo: carriers.EMailConnectionInfo, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    GetFolderList(request: carriers.EMail_GetFolderListRequest, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    GetFolderList(connectionInfo: carriers.EMailConnectionInfo, includeItemCount: boolean, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    GetAttachment(request: carriers.EMail_GetAttachmentRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAttachment>;
    GetAttachment(connectionInfo: carriers.EMailConnectionInfo, messageServerId: number, attachmentId: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAttachment>;
    MarkAsRead(request: carriers.EMail_MarkAsReadRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    MarkAsRead(connectionInfo: carriers.EMailConnectionInfo, messageServerIds: number[], read: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetFolderEMailCount(request: carriers.EMail_GetFolderEMailCountRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    GetFolderEMailCount(connectionInfo: carriers.EMailConnectionInfo, onlyUnread: boolean, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    Delete(request: carriers.EMail_DeleteRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    Delete(connectionInfo: carriers.EMailConnectionInfo, messageServerIds: number[], moveToFolder: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    MoveToFolder(request: carriers.EMail_MoveToFolderRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    MoveToFolder(connectionInfo: carriers.EMailConnectionInfo, messageServerIds: number[], targetFolder: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    EmptyFolder(request: carriers.EMail_EmptyFolderRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    EmptyFolder(connectionInfo: carriers.EMailConnectionInfo, moveToFolder: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetEMailAsStream(request: carriers.EMail_GetEMailAsStreamRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetEMailAsStream(connectionInfo: carriers.EMailConnectionInfo, messageServerId: number, stripAttachments: boolean, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    FindAddress(request: carriers.EMail_FindAddressRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAddress[]>;
    FindAddress(address: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAddress[]>;
    GetEMailFromDocumentId(request: carriers.EMail_GetEMailFromDocumentIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    GetEMailFromDocumentId(documentId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    GetUnsanitizedEMailFromDocumentId(request: carriers.EMail_GetUnsanitizedEMailFromDocumentIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    GetUnsanitizedEMailFromDocumentId(documentId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    GetEMailFromAttachmentId(request: carriers.EMail_GetEMailFromAttachmentIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    GetEMailFromAttachmentId(emailId: number, attachmentIds: string[], includeAttachments: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    GetUnsanitizedEMailFromAttachmentId(request: carriers.EMail_GetUnsanitizedEMailFromAttachmentIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    GetUnsanitizedEMailFromAttachmentId(emailId: number, attachmentIds: string[], includeAttachments: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    GetEMailFromDocumentAttachmentId(request: carriers.EMail_GetEMailFromDocumentAttachmentIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    GetEMailFromDocumentAttachmentId(docId: number, attachmentIds: string[], includeAttachments: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    GetUnsanitizedEMailFromDocumentAttachmentId(request: carriers.EMail_GetUnsanitizedEMailFromDocumentAttachmentIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    GetUnsanitizedEMailFromDocumentAttachmentId(docId: number, attachmentIds: string[], includeAttachments: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    GetEMailEnvelopes(request: carriers.EMail_GetEMailEnvelopesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEnvelope[]>;
    GetEMailEnvelopes(connectionInfo: carriers.EMailConnectionInfo, messageServerIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEnvelope[]>;
    SetSubscription(request: carriers.EMail_SetSubscriptionRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetSubscription(connectionInfo: carriers.EMailConnectionInfo, folders: carriers.EMailFolder[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    CreateFolder(request: carriers.EMail_CreateFolderRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    CreateFolder(connectionInfo: carriers.EMailConnectionInfo, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteFolder(request: carriers.EMail_DeleteFolderRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteFolder(connectionInfo: carriers.EMailConnectionInfo, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    CreateEMailFromDocumentEntity(request: carriers.EMail_CreateEMailFromDocumentEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    CreateEMailFromDocumentEntity(documentEntity: carriers.DocumentEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    CreateEMailFromMimeMessage(request: carriers.EMail_CreateEMailFromMimeMessageRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    CreateEMailFromMimeMessage(mimeMessage: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    GetFolderInfo(request: carriers.EMail_GetFolderInfoRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailFolder[]>;
    GetFolderInfo(connectionInfo: carriers.EMailConnectionInfo, folders: string[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailFolder[]>;
    GetFolderHasNewEMail(request: carriers.EMail_GetFolderHasNewEMailRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    GetFolderHasNewEMail(connectionInfo: carriers.EMailConnectionInfo, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    GetEMailAddresses(request: carriers.EMail_GetEMailAddressesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAddress[]>;
    GetEMailAddresses(emailIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAddress[]>;
    RefreshFolder(request: carriers.EMail_RefreshFolderRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    RefreshFolder(connectionInfo: carriers.EMailConnectionInfo, folders: string[], webapi_options?: base.WebApiRequestOptions): Promise<number>;
    GetEMailFromTemp(request: carriers.EMail_GetEMailFromTempRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    GetEMailFromTemp(fileName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    Authenticate(request: carriers.EMail_AuthenticateRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    Authenticate(connectionInfoExtended: carriers.EMailConnectionInfoExtended, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    GetEmailMessageIds(request: carriers.EMail_GetEmailMessageIdsRequest, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    GetEmailMessageIds(connectionInfoExtended: carriers.EMailConnectionInfoExtended, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    GetExtendedEmailMessageIds(request: carriers.EMail_GetExtendedEmailMessageIdsRequest, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    GetExtendedEmailMessageIds(connectionInfoExtended: carriers.EMailConnectionInfoExtended, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    GetEmailsAsString(request: carriers.EMail_GetEmailsAsStringRequest, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    GetEmailsAsString(connectionInfoExtended: carriers.EMailConnectionInfoExtended, messageIds: string[], webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    DeleteExtended(request: carriers.EMail_DeleteExtendedRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteExtended(connectionInfoExtended: carriers.EMailConnectionInfoExtended, messageIds: string[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RelayMessage(request: carriers.EMail_RelayMessageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RelayMessage(connectionInfoExtended: carriers.EMailConnectionInfoExtended, rfc822: string, from: string, recipients: string[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetEMail(request: carriers.EMail_GetEMailRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    GetEMail(id: number, includeAttachments: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    GetUnsanitizedEMail(request: carriers.EMail_GetUnsanitizedEMailRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    GetUnsanitizedEMail(id: number, includeAttachments: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    MarkEmailsAsRead(request: carriers.EMail_MarkEmailsAsReadRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    MarkEmailsAsRead(ids: number[], read: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteEmails(request: carriers.EMail_DeleteEmailsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteEmails(ids: number[], moveToFolder: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    MoveEmailsToTrash(request: carriers.EMail_MoveEmailsToTrashRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    MoveEmailsToTrash(ids: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    Save(request: carriers.EMail_SaveRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    Save(email: carriers.EMailEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    SaveToMailServer(request: carriers.EMail_SaveToMailServerRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    SaveToMailServer(email: carriers.EMailEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    Send(request: carriers.EMail_SendRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity[]>;
    Send(emails: carriers.EMailEntity[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity[]>;
    CreateForwardEmail(request: carriers.EMail_CreateForwardEmailRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    CreateForwardEmail(email: carriers.EMailEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    FindContactOrPersonByEmailName(request: carriers.EMail_FindContactOrPersonByEmailNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactOrPersonFromEmail[]>;
    FindContactOrPersonByEmailName(name: string, emailAddress: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactOrPersonFromEmail[]>;
    FindContactOrPersonByEmailNameWithLimit(request: carriers.EMail_FindContactOrPersonByEmailNameWithLimitRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactOrPersonFromEmail[]>;
    FindContactOrPersonByEmailNameWithLimit(name: string, emailAddress: string, numberOfContacts: number, numberOfPersons: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactOrPersonFromEmail[]>;
    RefreshFolderForAssociate(request: carriers.EMail_RefreshFolderForAssociateRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    RefreshFolderForAssociate(folders: string[], webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetNewMail(request: carriers.EMail_GetNewMailRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEnvelope[]>;
    GetNewMail(folders: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEnvelope[]>;
    CacheFolderList(webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailFolder[]>;
    MoveEmailsToFolder(request: carriers.EMail_MoveEmailsToFolderRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    MoveEmailsToFolder(folderId: number, emailItemIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetMailFromMessageId(request: carriers.EMail_GetMailFromMessageIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    GetMailFromMessageId(messageId: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    GetMailFromInReplyTo(request: carriers.EMail_GetMailFromInReplyToRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    GetMailFromInReplyTo(messageId: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    SendAndSaveEmailToTmpDocument(request: carriers.EMail_SendAndSaveEmailToTmpDocumentRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    SendAndSaveEmailToTmpDocument(email: carriers.EMailEntity, stripAttachments: boolean, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    SaveEmailToTmpDocument(request: carriers.EMail_SaveEmailToTmpDocumentRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    SaveEmailToTmpDocument(email: carriers.EMailEntity, folderId: number, stripAttachments: boolean, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    SaveDraft(request: carriers.EMail_SaveDraftRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    SaveDraft(entity: carriers.EMailEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    SetRepliedAt(request: carriers.EMail_SetRepliedAtRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetRepliedAt(messageId: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetEMailFromDocumentIdWithoutAttachmentStream(request: carriers.EMail_GetEMailFromDocumentIdWithoutAttachmentStreamRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    GetEMailFromDocumentIdWithoutAttachmentStream(documentId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    GetUnsanitizedEMailFromDocumentIdWithoutAttachmentStream(request: carriers.EMail_GetUnsanitizedEMailFromDocumentIdWithoutAttachmentStreamRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    GetUnsanitizedEMailFromDocumentIdWithoutAttachmentStream(documentId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    GetAttachmentFromId(request: carriers.EMail_GetAttachmentFromIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAttachment>;
    GetAttachmentFromId(mailItemId: number, attachmentId: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAttachment>;
    GetPreviewAttachmentFromId(request: carriers.EMail_GetPreviewAttachmentFromIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAttachment>;
    GetPreviewAttachmentFromId(mailItemId: number, attachmentId: string, attachmentType: string, attachmentFilename: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAttachment>;
    GetUnsanitizedPreviewAttachmentFromId(request: carriers.EMail_GetUnsanitizedPreviewAttachmentFromIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAttachment>;
    GetUnsanitizedPreviewAttachmentFromId(mailItemId: number, attachmentId: string, attachmentType: string, attachmentFilename: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAttachment>;
    GetPreviewAttachmentFromDocId(request: carriers.EMail_GetPreviewAttachmentFromDocIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAttachment>;
    GetPreviewAttachmentFromDocId(docId: number, attachmentId: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAttachment>;
    GetUnsanitizedPreviewAttachmentFromDocId(request: carriers.EMail_GetUnsanitizedPreviewAttachmentFromDocIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAttachment>;
    GetUnsanitizedPreviewAttachmentFromDocId(docId: number, attachmentId: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAttachment>;
    TestAuthenticate(webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    ToggleSubscription(request: carriers.EMail_ToggleSubscriptionRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    ToggleSubscription(folderId: number, subscriptionStatus: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    HasNewMail(request: carriers.EMail_HasNewMailRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    HasNewMail(mailItemId: number, folderId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    LatestItemIdByFolder(request: carriers.EMail_LatestItemIdByFolderRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    LatestItemIdByFolder(folderId: number, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    CreateInlineHtmlHeader(request: carriers.EMail_CreateInlineHtmlHeaderRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    CreateInlineHtmlHeader(email: carriers.EMailEntity, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetEmailAppointment(request: carriers.EMail_GetEmailAppointmentRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAppointment>;
    GetEmailAppointment(mailItemId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAppointment>;
    GetEmailAppointmentRecurrence(request: carriers.EMail_GetEmailAppointmentRecurrenceRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RecurrenceInfo>;
    GetEmailAppointmentRecurrence(mailItemId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RecurrenceInfo>;
    GetParticipantInfoFromEmailAddress(request: carriers.EMail_GetParticipantInfoFromEmailAddressRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person>;
    GetParticipantInfoFromEmailAddress(emailAddress: string, appointmentId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person>;
    GetEmailDocumentAsMimeStream(request: carriers.EMail_GetEmailDocumentAsMimeStreamRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetEmailDocumentAsMimeStream(documentId: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetEMailSOInfo(eMailSOInfoId: number): Promise<carriers.EMailSOInfo>;
    GetReadySyncEmailAccounts(webapi_options?: base.WebApiRequestOptions): Promise<carriers.SyncUserAccount[]>;
    SyncEmailAccount(request: carriers.EMail_SyncEmailAccountRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SyncEmailAccount(syncUserAccount: carriers.SyncUserAccount, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SyncEmailAccounts(request: carriers.EMail_SyncEmailAccountsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SyncEmailAccounts(syncUserAccounts: carriers.SyncUserAccount[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
}
/**
 * Email connection, reading, sending
 */
export declare class EMailAgent extends base.WebApiBase implements IEMailAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * Set default values into a new EMailAccount.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultEMailAccount(options?: base.WebApiRequestOptions): Promise<carriers.EMailAccount>;
    SaveEMailAccount(entity: carriers.EMailAccount, options?: base.WebApiRequestOptions): Promise<carriers.EMailAccount>;
    DeleteEMailAccount(EMailAccountId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new EMailAddress.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultEMailAddress(options?: base.WebApiRequestOptions): Promise<carriers.EMailAddress>;
    /**
     * Set default values into a new EMailAppointment.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultEMailAppointment(options?: base.WebApiRequestOptions): Promise<carriers.EMailAppointment>;
    /**
     * Set default values into a new EMailAttachment.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultEMailAttachment(options?: base.WebApiRequestOptions): Promise<carriers.EMailAttachment>;
    /**
     * Set default values into a new EMailConnectionInfo.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultEMailConnectionInfo(options?: base.WebApiRequestOptions): Promise<carriers.EMailConnectionInfo>;
    /**
     * Set default values into a new EMailConnectionInfoExtended.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultEMailConnectionInfoExtended(options?: base.WebApiRequestOptions): Promise<carriers.EMailConnectionInfoExtended>;
    /**
     * Set default values into a new EMailCustomHeader.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultEMailCustomHeader(options?: base.WebApiRequestOptions): Promise<carriers.EMailCustomHeader>;
    /**
     * Set default values into a new EMailEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultEMailEntity(options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    /**
     * Set default values into a new EMailEnvelope.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultEMailEnvelope(options?: base.WebApiRequestOptions): Promise<carriers.EMailEnvelope>;
    /**
     * Set default values into a new EMailFolder.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultEMailFolder(options?: base.WebApiRequestOptions): Promise<carriers.EMailFolder>;
    /**
     * Set default values into a new EMailSOInfo.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultEMailSOInfo(options?: base.WebApiRequestOptions): Promise<carriers.EMailSOInfo>;
    GetEMailAccount(eMailAccountId: number, options?: base.WebApiRequestOptions): Promise<carriers.EMailAccount>;
    private _GetEMailAccountFromEMailAddress;
    /**
     * Returns the email account corresponding to this email address (for the current associate).
     * @param request - FromAddress
     * @returns Found or empty email account
     */
    GetEMailAccountFromEMailAddress(request: carriers.EMail_GetEMailAccountFromEMailAddressRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAccount>;
    /**
     * Returns the email account corresponding to this email address (for the current associate).
     * @param fromAddress - The address associated with this email account
     * @returns Found or empty email account
     */
    GetEMailAccountFromEMailAddress(fromAddress: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAccount>;
    private _GetCurrentAccountId;
    /**
     * Get current accountId (last logged into should normally be current) for logged in associate
     * @returns Id of current account
     */
    GetCurrentAccountId(webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _GetCurrentAccount;
    /**
     * Get current account (last logged into should normally be current) for logged in associate
     * @returns Id of current account
     */
    GetCurrentAccount(webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAccount>;
    private _GetPersonEntitiesFromEmailAddress;
    /**
     * Get all persons and contacts with the given email address
     * @param request - EmailAddress
     * @returns
     */
    GetPersonEntitiesFromEmailAddress(request: carriers.EMail_GetPersonEntitiesFromEmailAddressRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonEntity[]>;
    /**
     * Get all persons and contacts with the given email address
     * @param emailAddress - The emailAddress to find persons and contacts for
     * @returns
     */
    GetPersonEntitiesFromEmailAddress(emailAddress: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonEntity[]>;
    private _GetPersonsFromEmailAddress;
    /**
     * Get all persons and contacts with the given email address
     * @param request - EmailAddress
     * @returns
     */
    GetPersonsFromEmailAddress(request: carriers.EMail_GetPersonsFromEmailAddressRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person[]>;
    /**
     * Get all persons and contacts with the given email address
     * @param emailAddress - The emailAddress to find persons and contacts for
     * @returns
     */
    GetPersonsFromEmailAddress(emailAddress: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person[]>;
    private _HasMXRecord;
    /**
     * Return true if there is one or more MX records in DNS for the given mail domain
     * @param request - MailDomain
     * @returns True if there is at least one MX record
     */
    HasMXRecord(request: carriers.EMail_HasMXRecordRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Return true if there is one or more MX records in DNS for the given mail domain
     * @param mailDomain - The mail domain to check. Normally this is the part after @ in an email address
     * @returns True if there is at least one MX record
     */
    HasMXRecord(mailDomain: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _HasSPFRecord;
    /**
     * Return true if target domain contains a SPF record which is under the given SPF record
     * @param request - SourceSpf, TargetDomain
     * @returns True if a match is found
     */
    HasSPFRecord(request: carriers.EMail_HasSPFRecordRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Return true if target domain contains a SPF record which is under the given SPF record
     * @param sourceSpf - The SPF to match from
     * @param targetDomain - The domain to verify if it has at least one SPF record contained in the source SPF
     * @returns True if a match is found
     */
    HasSPFRecord(sourceSpf: string, targetDomain: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _ResolveEMailRecipients;
    /**
     * Resolve separate emails from single string. Also lookup persons by emails.
     * @param request - EmailAddress
     * @returns Resolved EMail recipients
     */
    ResolveEMailRecipients(request: carriers.EMail_ResolveEMailRecipientsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAddress[]>;
    /**
     * Resolve separate emails from single string. Also lookup persons by emails.
     * @param emailAddress - The string to lookup emails from
     * @returns Resolved EMail recipients
     */
    ResolveEMailRecipients(emailAddress: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAddress[]>;
    private _GetEMailFromId;
    /**
     * Get en e-mail based on its unique id
     * @param request - ConnectionInfo, MessageServerId, LookupAddresses, Flags, IncludeAttachments
     * @returns The e-mail
     */
    GetEMailFromId(request: carriers.EMail_GetEMailFromIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    /**
     * Get en e-mail based on its unique id
     * @param connectionInfo - All information needed to connect to the mailserver
     * @param messageServerId - Unique ID for the e-mail to retrieve
     * @param lookupAddresses - If true try to look up e-mail addresses in from/to/cc/bcc fields against superoffice contacts
     * @param flags - Any flags to apply to the fetched item. Ex: Seen/Answered
     * @param includeAttachments - Should we retrieve attachments embedded in the e-mail from the server
     * @returns The e-mail
     */
    GetEMailFromId(connectionInfo: carriers.EMailConnectionInfo, messageServerId: number, lookupAddresses: boolean, flags: enums.EMailFlags, includeAttachments: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    private _SendEMails;
    /**
     * Send the provided e-mails
     * @param request - OutgoingConnectionInfo, Emails, SentItemsConnectionInfo
     * @returns The sent e-mails (updated with message id etc.)
     */
    SendEMails(request: carriers.EMail_SendEMailsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity[]>;
    /**
     * Send the provided e-mails
     * @param outgoingConnectionInfo - All information needed to connect to the mailserver
     * @param emails - The e-mails to send
     * @param sentItemsConnectionInfo - If provided, save sent item(s) in the folder specified.  May be null.
     * @returns The sent e-mails (updated with message id etc.)
     */
    SendEMails(outgoingConnectionInfo: carriers.EMailConnectionInfo, emails: carriers.EMailEntity[], sentItemsConnectionInfo: carriers.EMailConnectionInfo, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity[]>;
    private _SaveEMail;
    /**
     * Save the passed e-mail back to the server
     * @param request - ConnectionInfo, Email
     * @returns The updated saved entity
     */
    SaveEMail(request: carriers.EMail_SaveEMailRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    /**
     * Save the passed e-mail back to the server
     * @param connectionInfo - All information needed to connect to the mailserver
     * @param email - The e-mail to save
     * @returns The updated saved entity
     */
    SaveEMail(connectionInfo: carriers.EMailConnectionInfo, email: carriers.EMailEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    private _AuthenticateIncoming;
    /**
     * Authenticate against a mail-server to retrieve e-mails from
     * @param request - ConnectionInfo
     * @returns True if authentication was succcesfull
     */
    AuthenticateIncoming(request: carriers.EMail_AuthenticateIncomingRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Authenticate against a mail-server to retrieve e-mails from
     * @param connectionInfo - All information needed to connect to the mailserver
     * @returns True if authentication was succcesfull
     */
    AuthenticateIncoming(connectionInfo: carriers.EMailConnectionInfo, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _AuthenticateOutgoing;
    /**
     * Authenticate against a mail server to send items with
     * @param request - ConnectionInfo
     * @returns True if authentication was succcesfull
     */
    AuthenticateOutgoing(request: carriers.EMail_AuthenticateOutgoingRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Authenticate against a mail server to send items with
     * @param connectionInfo - All information needed to connect to the mailserver
     * @returns True if authentication was succcesfull
     */
    AuthenticateOutgoing(connectionInfo: carriers.EMailConnectionInfo, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _GetFolderList;
    /**
     * Retrieve all folders for the mail account. String is separated in sections by the paragraph character.  First section contains the folder delimeter char. Next is folder name. Additional sections may be unread and total items.
     * @param request - ConnectionInfo, IncludeItemCount
     * @returns List of available folders as a string array
     */
    GetFolderList(request: carriers.EMail_GetFolderListRequest, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    /**
     * Retrieve all folders for the mail account. String is separated in sections by the paragraph character.  First section contains the folder delimeter char. Next is folder name. Additional sections may be unread and total items.
     * @param connectionInfo - All information needed to connect to the mailserver
     * @param includeItemCount - If true, unread and total items are added to the foldername separated by a comma
     * @returns List of available folders as a string array
     */
    GetFolderList(connectionInfo: carriers.EMailConnectionInfo, includeItemCount: boolean, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    private _GetAttachment;
    /**
     * Retrieve an attachment from an e-mail
     * @param request - ConnectionInfo, MessageServerId, AttachmentId
     * @returns The attachment
     */
    GetAttachment(request: carriers.EMail_GetAttachmentRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAttachment>;
    /**
     * Retrieve an attachment from an e-mail
     * @param connectionInfo - All information needed to connect to the mailserver
     * @param messageServerId - Unique ID for the e-mail to retrieve the attachment from
     * @param attachmentId - Id of the attachment in the e-mail
     * @returns The attachment
     */
    GetAttachment(connectionInfo: carriers.EMailConnectionInfo, messageServerId: number, attachmentId: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAttachment>;
    private _MarkAsRead;
    /**
     * Mark one or more e-mails as (un)read
     * @param request - ConnectionInfo, MessageServerIds, Read
     * @returns
     */
    MarkAsRead(request: carriers.EMail_MarkAsReadRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Mark one or more e-mails as (un)read
     * @param connectionInfo - All information needed to connect to the mailserver
     * @param messageServerIds - The e-mails to handle
     * @param read - If true mails are marked as read. If false mails are marked as unread.
     * @returns
     */
    MarkAsRead(connectionInfo: carriers.EMailConnectionInfo, messageServerIds: number[], read: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetFolderEMailCount;
    /**
     * Retrieve total/unread mail items in current folder
     * @param request - ConnectionInfo, OnlyUnread
     * @returns Number of mail items
     */
    GetFolderEMailCount(request: carriers.EMail_GetFolderEMailCountRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Retrieve total/unread mail items in current folder
     * @param connectionInfo - All information needed to connect to the mailserver
     * @param onlyUnread - If true, only unread items are counted
     * @returns Number of mail items
     */
    GetFolderEMailCount(connectionInfo: carriers.EMailConnectionInfo, onlyUnread: boolean, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _Delete;
    /**
     * Delete specified mail items
     * @param request - ConnectionInfo, MessageServerIds, MoveToFolder
     * @returns
     */
    Delete(request: carriers.EMail_DeleteRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Delete specified mail items
     * @param connectionInfo - All information needed to connect to the mailserver
     * @param messageServerIds - The e-mails to handle
     * @param moveToFolder - If set, move deleted items to this folder
     * @returns
     */
    Delete(connectionInfo: carriers.EMailConnectionInfo, messageServerIds: number[], moveToFolder: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _MoveToFolder;
    /**
     * Moved specified items from current folder to targetFolder
     * @param request - ConnectionInfo, MessageServerIds, TargetFolder
     * @returns
     */
    MoveToFolder(request: carriers.EMail_MoveToFolderRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Moved specified items from current folder to targetFolder
     * @param connectionInfo - All information needed to connect to the mailserver
     * @param messageServerIds - The e-mails to handle
     * @param targetFolder - Name of folder to move items to
     * @returns
     */
    MoveToFolder(connectionInfo: carriers.EMailConnectionInfo, messageServerIds: number[], targetFolder: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _EmptyFolder;
    /**
     * Delete all items in folder specified in the connection object
     * @param request - ConnectionInfo, MoveToFolder
     * @returns
     */
    EmptyFolder(request: carriers.EMail_EmptyFolderRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Delete all items in folder specified in the connection object
     * @param connectionInfo - All information needed to connect to the mailserver
     * @param moveToFolder - If set, move deleted items to this folder
     * @returns
     */
    EmptyFolder(connectionInfo: carriers.EMailConnectionInfo, moveToFolder: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetEMailAsStream;
    /**
     * Retrieve an e-mail optionally stripping attachments as a stream
     * @param request - ConnectionInfo, MessageServerId, StripAttachments
     * @returns The attachment as a stream
     */
    GetEMailAsStream(request: carriers.EMail_GetEMailAsStreamRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    /**
     * Retrieve an e-mail optionally stripping attachments as a stream
     * @param connectionInfo - All information needed to connect to the mailserver
     * @param messageServerId - Unique ID for the e-mail to retrieve
     * @param stripAttachments - If true, do not include attachments in stream
     * @returns The attachment as a stream
     */
    GetEMailAsStream(connectionInfo: carriers.EMailConnectionInfo, messageServerId: number, stripAttachments: boolean, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    private _FindAddress;
    /**
     * Search for contacts and persons with the specified e-mail address (exact match on the email address string required)
     * @param request - Address
     * @returns All resolved contacts/persons
     */
    FindAddress(request: carriers.EMail_FindAddressRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAddress[]>;
    /**
     * Search for contacts and persons with the specified e-mail address (exact match on the email address string required)
     * @param address - E-mail address to look for
     * @returns All resolved contacts/persons
     */
    FindAddress(address: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAddress[]>;
    private _GetEMailFromDocumentId;
    /**
     * Get an e-mail based on an archived document
     * @param request - DocumentId
     * @returns The e-mail
     */
    GetEMailFromDocumentId(request: carriers.EMail_GetEMailFromDocumentIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    /**
     * Get an e-mail based on an archived document
     * @param documentId - Unique id of the document
     * @returns The e-mail
     */
    GetEMailFromDocumentId(documentId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    private _GetUnsanitizedEMailFromDocumentId;
    /**
     * Get an e-mail based on an archived document. The returned value is not sanitized.
     * @param request - DocumentId
     * @returns The e-mail
     */
    GetUnsanitizedEMailFromDocumentId(request: carriers.EMail_GetUnsanitizedEMailFromDocumentIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    /**
     * Get an e-mail based on an archived document. The returned value is not sanitized.
     * @param documentId - Unique id of the document
     * @returns The e-mail
     */
    GetUnsanitizedEMailFromDocumentId(documentId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    private _GetEMailFromAttachmentId;
    /**
     * Get an e-mail based on an email and attachment id
     * @param request - EmailId, AttachmentIds, IncludeAttachments
     * @returns The attachment as an e-mail
     */
    GetEMailFromAttachmentId(request: carriers.EMail_GetEMailFromAttachmentIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    /**
     * Get an e-mail based on an email and attachment id
     * @param emailId - The primary key of the email row in the DB
     * @param attachmentIds - Id of the attachment. If multiple elements this is treated as attachment in attachemnts, e.g. [1, 2] means attachment 2 in attachment 1 of email.
     * @param includeAttachments - Should we retrieve attachments embedded in the e-mail from the server
     * @returns The attachment as an e-mail
     */
    GetEMailFromAttachmentId(emailId: number, attachmentIds: string[], includeAttachments: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    private _GetUnsanitizedEMailFromAttachmentId;
    /**
     * Get an e-mail based on an email and attachment id. The returned value is not sanitized.
     * @param request - EmailId, AttachmentIds, IncludeAttachments
     * @returns The attachment as an e-mail
     */
    GetUnsanitizedEMailFromAttachmentId(request: carriers.EMail_GetUnsanitizedEMailFromAttachmentIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    /**
     * Get an e-mail based on an email and attachment id. The returned value is not sanitized.
     * @param emailId - The primary key of the email row in the DB
     * @param attachmentIds - Id of the attachment. If multiple elements this is treated as attachment in attachemnts, e.g. [1, 2] means attachment 2 in attachment 1 of email.
     * @param includeAttachments - Should we retrieve attachments embedded in the e-mail from the server
     * @returns The attachment as an e-mail
     */
    GetUnsanitizedEMailFromAttachmentId(emailId: number, attachmentIds: string[], includeAttachments: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    private _GetEMailFromDocumentAttachmentId;
    /**
     * Get an e-mail based on an email in the archive system and attachment id
     * @param request - DocId, AttachmentIds, IncludeAttachments
     * @returns The attachment as an e-mail
     */
    GetEMailFromDocumentAttachmentId(request: carriers.EMail_GetEMailFromDocumentAttachmentIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    /**
     * Get an e-mail based on an email in the archive system and attachment id
     * @param docId - The primary key of the document row in the DB
     * @param attachmentIds - Id of the attachment. If multiple elements this is treated as attachment in attachemnts, e.g. [1, 2] means attachment 2 in attachment 1 of email.
     * @param includeAttachments - Should we retrieve attachments embedded in the e-mail from the server
     * @returns The attachment as an e-mail
     */
    GetEMailFromDocumentAttachmentId(docId: number, attachmentIds: string[], includeAttachments: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    private _GetUnsanitizedEMailFromDocumentAttachmentId;
    /**
     * Get an e-mail based on an email in the archive system and attachment id. The returned value is not sanitized.
     * @param request - DocId, AttachmentIds, IncludeAttachments
     * @returns The attachment as an e-mail
     */
    GetUnsanitizedEMailFromDocumentAttachmentId(request: carriers.EMail_GetUnsanitizedEMailFromDocumentAttachmentIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    /**
     * Get an e-mail based on an email in the archive system and attachment id. The returned value is not sanitized.
     * @param docId - The primary key of the document row in the DB
     * @param attachmentIds - Id of the attachment. If multiple elements this is treated as attachment in attachemnts, e.g. [1, 2] means attachment 2 in attachment 1 of email.
     * @param includeAttachments - Should we retrieve attachments embedded in the e-mail from the server
     * @returns The attachment as an e-mail
     */
    GetUnsanitizedEMailFromDocumentAttachmentId(docId: number, attachmentIds: string[], includeAttachments: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    private _GetEMailEnvelopes;
    /**
     * Retrieve a set of e-mail envelopes
     * @param request - ConnectionInfo, MessageServerIds
     * @returns The e-mail envelope objects
     */
    GetEMailEnvelopes(request: carriers.EMail_GetEMailEnvelopesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEnvelope[]>;
    /**
     * Retrieve a set of e-mail envelopes
     * @param connectionInfo - All information needed to connect to the mailserver
     * @param messageServerIds - Unique identitifiers for the e-mails to retrieve envelopes for
     * @returns The e-mail envelope objects
     */
    GetEMailEnvelopes(connectionInfo: carriers.EMailConnectionInfo, messageServerIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEnvelope[]>;
    private _SetSubscription;
    /**
     * Set subscription on or off on a set of folders
     * @param request - ConnectionInfo, Folders
     * @returns
     */
    SetSubscription(request: carriers.EMail_SetSubscriptionRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set subscription on or off on a set of folders
     * @param connectionInfo - All information needed to connect to the mailserver
     * @param folders - Folders to set subscription value on
     * @returns
     */
    SetSubscription(connectionInfo: carriers.EMailConnectionInfo, folders: carriers.EMailFolder[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _CreateFolder;
    /**
     * Create a new folder on the server
     * @param request - ConnectionInfo
     * @returns
     */
    CreateFolder(request: carriers.EMail_CreateFolderRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Create a new folder on the server
     * @param connectionInfo - All information needed to connect to the mailserver
     * @returns
     */
    CreateFolder(connectionInfo: carriers.EMailConnectionInfo, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _DeleteFolder;
    /**
     * Delete a folder from the server
     * @param request - ConnectionInfo
     * @returns
     */
    DeleteFolder(request: carriers.EMail_DeleteFolderRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Delete a folder from the server
     * @param connectionInfo - All information needed to connect to the mailserver
     * @returns
     */
    DeleteFolder(connectionInfo: carriers.EMailConnectionInfo, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _CreateEMailFromDocumentEntity;
    /**
     * Get an e-mail based on the provided DocumentEntity
     * @param request - DocumentEntity
     * @returns The e-mail
     */
    CreateEMailFromDocumentEntity(request: carriers.EMail_CreateEMailFromDocumentEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    /**
     * Get an e-mail based on the provided DocumentEntity
     * @param documentEntity - DocumentEntity data
     * @returns The e-mail
     */
    CreateEMailFromDocumentEntity(documentEntity: carriers.DocumentEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    private _CreateEMailFromMimeMessage;
    /**
     * Get an e-mail based on the provided MIME-message
     * @param request - MimeMessage
     * @returns The e-mail
     */
    CreateEMailFromMimeMessage(request: carriers.EMail_CreateEMailFromMimeMessageRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    /**
     * Get an e-mail based on the provided MIME-message
     * @param mimeMessage - string representing a MIME-formatted message
     * @returns The e-mail
     */
    CreateEMailFromMimeMessage(mimeMessage: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    private _GetFolderInfo;
    /**
     * Retrieve information about folders.  If folders parameter is not specified(null), information about all subscribed folders will be returned.
     * @param request - ConnectionInfo, Folders
     * @returns Folder information
     */
    GetFolderInfo(request: carriers.EMail_GetFolderInfoRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailFolder[]>;
    /**
     * Retrieve information about folders.  If folders parameter is not specified(null), information about all subscribed folders will be returned.
     * @param connectionInfo - All information needed to connect to the mailserver
     * @param folders - Folders to get information about.
     * @returns Folder information
     */
    GetFolderInfo(connectionInfo: carriers.EMailConnectionInfo, folders: string[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailFolder[]>;
    private _GetFolderHasNewEMail;
    /**
     * Check if folder has received new items since previous access.
     * @param request - ConnectionInfo
     * @returns True if new mail is available.
     */
    GetFolderHasNewEMail(request: carriers.EMail_GetFolderHasNewEMailRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Check if folder has received new items since previous access.
     * @param connectionInfo - All information needed to connect to the mailserver
     * @returns True if new mail is available.
     */
    GetFolderHasNewEMail(connectionInfo: carriers.EMailConnectionInfo, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _GetEMailAddresses;
    /**
     * Get information about one or more email addresses, identified by IDs
     * @param request - EmailIds
     * @returns Array of email information objects
     */
    GetEMailAddresses(request: carriers.EMail_GetEMailAddressesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAddress[]>;
    /**
     * Get information about one or more email addresses, identified by IDs
     * @param emailIds - Array of IDs from the email table, each identifying one email address
     * @returns Array of email information objects
     */
    GetEMailAddresses(emailIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAddress[]>;
    private _RefreshFolder;
    /**
     * Refresh the given folders - i.e., fetch data from the mail server and update the in-database cache. This may happen synchronously or as a batch task, the return value will be 0 if the processing was synchronous, or the batch task id if a batch task is used.
     * @param request - ConnectionInfo, Folders
     * @returns Batch task id, or 0 if the processing was synchronous
     */
    RefreshFolder(request: carriers.EMail_RefreshFolderRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Refresh the given folders - i.e., fetch data from the mail server and update the in-database cache. This may happen synchronously or as a batch task, the return value will be 0 if the processing was synchronous, or the batch task id if a batch task is used.
     * @param connectionInfo - Email connection info credentials
     * @param folders - List of folder names to refresh
     * @returns Batch task id, or 0 if the processing was synchronous
     */
    RefreshFolder(connectionInfo: carriers.EMailConnectionInfo, folders: string[], webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _GetEMailFromTemp;
    /**
     *
     * @param request - FileName
     * @returns
     */
    GetEMailFromTemp(request: carriers.EMail_GetEMailFromTempRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    /**
     *
     * @param fileName -
     * @returns
     */
    GetEMailFromTemp(fileName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    private _Authenticate;
    /**
     *
     * @param request - ConnectionInfoExtended
     * @returns
     */
    Authenticate(request: carriers.EMail_AuthenticateRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     *
     * @param connectionInfoExtended -
     * @returns
     */
    Authenticate(connectionInfoExtended: carriers.EMailConnectionInfoExtended, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _GetEmailMessageIds;
    /**
     *
     * @param request - ConnectionInfoExtended
     * @returns
     */
    GetEmailMessageIds(request: carriers.EMail_GetEmailMessageIdsRequest, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    /**
     *
     * @param connectionInfoExtended -
     * @returns
     */
    GetEmailMessageIds(connectionInfoExtended: carriers.EMailConnectionInfoExtended, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    private _GetExtendedEmailMessageIds;
    /**
     * Gets not only the Message-Id&apos;s but also the UID&apos;s and the uniquevalidity property in this format-&gt; uvalidity:uid:MsgId - and this format should be understood by GetEmailsAsString() and DeleteExtended().
     * @param request - ConnectionInfoExtended
     * @returns
     */
    GetExtendedEmailMessageIds(request: carriers.EMail_GetExtendedEmailMessageIdsRequest, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    /**
     * Gets not only the Message-Id&apos;s but also the UID&apos;s and the uniquevalidity property in this format-&gt; uvalidity:uid:MsgId - and this format should be understood by GetEmailsAsString() and DeleteExtended().
     * @param connectionInfoExtended -
     * @returns
     */
    GetExtendedEmailMessageIds(connectionInfoExtended: carriers.EMailConnectionInfoExtended, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    private _GetEmailsAsString;
    /**
     *
     * @param request - ConnectionInfoExtended, MessageIds
     * @returns
     */
    GetEmailsAsString(request: carriers.EMail_GetEmailsAsStringRequest, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    /**
     *
     * @param connectionInfoExtended -
     * @param messageIds -
     * @returns
     */
    GetEmailsAsString(connectionInfoExtended: carriers.EMailConnectionInfoExtended, messageIds: string[], webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    private _DeleteExtended;
    /**
     *
     * @param request - ConnectionInfoExtended, MessageIds
     * @returns
     */
    DeleteExtended(request: carriers.EMail_DeleteExtendedRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     *
     * @param connectionInfoExtended -
     * @param messageIds -
     * @returns
     */
    DeleteExtended(connectionInfoExtended: carriers.EMailConnectionInfoExtended, messageIds: string[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _RelayMessage;
    /**
     *
     * @param request - ConnectionInfoExtended, Rfc822, From, Recipients
     * @returns
     */
    RelayMessage(request: carriers.EMail_RelayMessageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     *
     * @param connectionInfoExtended -
     * @param rfc822 -
     * @param from -
     * @param recipients -
     * @returns
     */
    RelayMessage(connectionInfoExtended: carriers.EMailConnectionInfoExtended, rfc822: string, from: string, recipients: string[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetEMail;
    /**
     * Get en e-mail based on its primary key in the DB
     * @param request - Id, IncludeAttachments
     * @returns The e-mail
     */
    GetEMail(request: carriers.EMail_GetEMailRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    /**
     * Get en e-mail based on its primary key in the DB
     * @param id - The primary key of the email row in the DB
     * @param includeAttachments - Should we retrieve attachments embedded in the e-mail from the server
     * @returns The e-mail
     */
    GetEMail(id: number, includeAttachments: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    private _GetUnsanitizedEMail;
    /**
     * Get en e-mail based on its primary key in the DB. The returned value is not sanitized.
     * @param request - Id, IncludeAttachments
     * @returns The e-mail
     */
    GetUnsanitizedEMail(request: carriers.EMail_GetUnsanitizedEMailRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    /**
     * Get en e-mail based on its primary key in the DB. The returned value is not sanitized.
     * @param id - The primary key of the email row in the DB
     * @param includeAttachments - Should we retrieve attachments embedded in the e-mail from the server
     * @returns The e-mail
     */
    GetUnsanitizedEMail(id: number, includeAttachments: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    private _MarkEmailsAsRead;
    /**
     * Mark one or more e-mails as (un)read
     * @param request - Ids, Read
     * @returns
     */
    MarkEmailsAsRead(request: carriers.EMail_MarkEmailsAsReadRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Mark one or more e-mails as (un)read
     * @param ids - The e-mails to handle
     * @param read - If true mails are marked as read. If false mails are marked as unread.
     * @returns
     */
    MarkEmailsAsRead(ids: number[], read: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _DeleteEmails;
    /**
     * Delete specified mail items and optionally move to the specified folder
     * @param request - Ids, MoveToFolder
     * @returns
     */
    DeleteEmails(request: carriers.EMail_DeleteEmailsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Delete specified mail items and optionally move to the specified folder
     * @param ids - The e-mails to handle
     * @param moveToFolder - If set, move deleted items to this folder
     * @returns
     */
    DeleteEmails(ids: number[], moveToFolder: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _MoveEmailsToTrash;
    /**
     * Delete specified mail items and move to the Trash folder
     * @param request - Ids
     * @returns
     */
    MoveEmailsToTrash(request: carriers.EMail_MoveEmailsToTrashRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Delete specified mail items and move to the Trash folder
     * @param ids - The e-mails to handle
     * @returns
     */
    MoveEmailsToTrash(ids: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _Save;
    /**
     * Save the e-mail back to the database
     * @param request - Email
     * @returns The updated saved entity
     */
    Save(request: carriers.EMail_SaveRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    /**
     * Save the e-mail back to the database
     * @param email - The e-mail to save
     * @returns The updated saved entity
     */
    Save(email: carriers.EMailEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    private _SaveToMailServer;
    /**
     * Save the passed e-mail back to the mail server
     * @param request - Email
     * @returns The updated saved entity
     */
    SaveToMailServer(request: carriers.EMail_SaveToMailServerRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    /**
     * Save the passed e-mail back to the mail server
     * @param email - The e-mail to save
     * @returns The updated saved entity
     */
    SaveToMailServer(email: carriers.EMailEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    private _Send;
    /**
     * Send the provided e-mails
     * @param request - Emails
     * @returns The sent e-mails (updated with message id etc.)
     */
    Send(request: carriers.EMail_SendRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity[]>;
    /**
     * Send the provided e-mails
     * @param emails - The e-mails to send
     * @returns The sent e-mails (updated with message id etc.)
     */
    Send(emails: carriers.EMailEntity[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity[]>;
    private _CreateForwardEmail;
    /**
     * Create forward email
     * @param request - Email
     * @returns The new forward email entity
     */
    CreateForwardEmail(request: carriers.EMail_CreateForwardEmailRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    /**
     * Create forward email
     * @param email - The e-mail to forward
     * @returns The new forward email entity
     */
    CreateForwardEmail(email: carriers.EMailEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    private _FindContactOrPersonByEmailName;
    /**
     *
     * @param request - Name, EmailAddress
     * @returns Contacts and persons matching emailaddress and name
     */
    FindContactOrPersonByEmailName(request: carriers.EMail_FindContactOrPersonByEmailNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactOrPersonFromEmail[]>;
    /**
     *
     * @param name - The sender name
     * @param emailAddress - The sender email address
     * @returns Contacts and persons matching emailaddress and name
     */
    FindContactOrPersonByEmailName(name: string, emailAddress: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactOrPersonFromEmail[]>;
    private _FindContactOrPersonByEmailNameWithLimit;
    /**
     *
     * @param request - Name, EmailAddress, NumberOfContacts, NumberOfPersons
     * @returns Contacts and persons matching emailaddress and name
     */
    FindContactOrPersonByEmailNameWithLimit(request: carriers.EMail_FindContactOrPersonByEmailNameWithLimitRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactOrPersonFromEmail[]>;
    /**
     *
     * @param name - The sender name
     * @param emailAddress - The sender email address
     * @param numberOfContacts - Maximum returned number of contacts
     * @param numberOfPersons - Maximum returned number of persons
     * @returns Contacts and persons matching emailaddress and name
     */
    FindContactOrPersonByEmailNameWithLimit(name: string, emailAddress: string, numberOfContacts: number, numberOfPersons: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactOrPersonFromEmail[]>;
    private _RefreshFolderForAssociate;
    /**
     * Get all emails in folder(s) from current associate
     * @param request - Folders
     * @returns JSON serialized string containing array of data about each folder
     */
    RefreshFolderForAssociate(request: carriers.EMail_RefreshFolderForAssociateRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Get all emails in folder(s) from current associate
     * @param folders - List of folder names to refresh
     * @returns JSON serialized string containing array of data about each folder
     */
    RefreshFolderForAssociate(folders: string[], webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetNewMail;
    /**
     * Get new email in folder(s) for current associate
     * @param request - Folders
     * @returns The downloaded email envelopes
     */
    GetNewMail(request: carriers.EMail_GetNewMailRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEnvelope[]>;
    /**
     * Get new email in folder(s) for current associate
     * @param folders - List of folder ids to check for new email
     * @returns The downloaded email envelopes
     */
    GetNewMail(folders: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEnvelope[]>;
    private _CacheFolderList;
    /**
     * Fetch list of folders from email server for the current account, and cache in DB
     * @returns List of folders from mail server
     */
    CacheFolderList(webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailFolder[]>;
    private _MoveEmailsToFolder;
    /**
     * Move one or more emails to the specified folder in the DB, and on the server
     * @param request - FolderId, EmailItemIds
     * @returns
     */
    MoveEmailsToFolder(request: carriers.EMail_MoveEmailsToFolderRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Move one or more emails to the specified folder in the DB, and on the server
     * @param folderId - The EmailFolderId of the folder to move to
     * @param emailItemIds - The emails to move
     * @returns
     */
    MoveEmailsToFolder(folderId: number, emailItemIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetMailFromMessageId;
    /**
     * Get email from db based on Message Id
     * @param request - MessageId
     * @returns EMailEntity with the provided message id
     */
    GetMailFromMessageId(request: carriers.EMail_GetMailFromMessageIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    /**
     * Get email from db based on Message Id
     * @param messageId - The message id
     * @returns EMailEntity with the provided message id
     */
    GetMailFromMessageId(messageId: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    private _GetMailFromInReplyTo;
    /**
     * Get email from db based on In-Reply-To Message Id
     * @param request - MessageId
     * @returns EMailEntity that is in reply to the provided messageId
     */
    GetMailFromInReplyTo(request: carriers.EMail_GetMailFromInReplyToRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    /**
     * Get email from db based on In-Reply-To Message Id
     * @param messageId - The message id
     * @returns EMailEntity that is in reply to the provided messageId
     */
    GetMailFromInReplyTo(messageId: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    private _SendAndSaveEmailToTmpDocument;
    /**
     * Send the provided e-mail and create tmp document ready to archive
     * @param request - Email, StripAttachments
     * @returns Filename of the tmp document
     */
    SendAndSaveEmailToTmpDocument(request: carriers.EMail_SendAndSaveEmailToTmpDocumentRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Send the provided e-mail and create tmp document ready to archive
     * @param email - The e-mail to send
     * @param stripAttachments - If true, do not include attachments in tmp document
     * @returns Filename of the tmp document
     */
    SendAndSaveEmailToTmpDocument(email: carriers.EMailEntity, stripAttachments: boolean, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _SaveEmailToTmpDocument;
    /**
     * Save the Email as a tmp document ready to archive
     * @param request - Email, FolderId, StripAttachments
     * @returns Filename of the tmp document
     */
    SaveEmailToTmpDocument(request: carriers.EMail_SaveEmailToTmpDocumentRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Save the Email as a tmp document ready to archive
     * @param email - The e-mail to save
     * @param folderId - The folder id where the email is
     * @param stripAttachments - If true, do not include attachments in tmp document
     * @returns Filename of the tmp document
     */
    SaveEmailToTmpDocument(email: carriers.EMailEntity, folderId: number, stripAttachments: boolean, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _SaveDraft;
    /**
     * Save the Email entity to the drafts folder
     * @param request - Entity
     * @returns The saved e-mail entity
     */
    SaveDraft(request: carriers.EMail_SaveDraftRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    /**
     * Save the Email entity to the drafts folder
     * @param entity - The entity to save
     * @returns The saved e-mail entity
     */
    SaveDraft(entity: carriers.EMailEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    private _SetRepliedAt;
    /**
     * Set the replied_at field based on the MessageID
     * @param request - MessageId
     * @returns
     */
    SetRepliedAt(request: carriers.EMail_SetRepliedAtRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set the replied_at field based on the MessageID
     * @param messageId - The MessageID
     * @returns
     */
    SetRepliedAt(messageId: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetEMailFromDocumentIdWithoutAttachmentStream;
    /**
     * Get an e-mail based on an archived document
     * @param request - DocumentId
     * @returns The e-mail
     */
    GetEMailFromDocumentIdWithoutAttachmentStream(request: carriers.EMail_GetEMailFromDocumentIdWithoutAttachmentStreamRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    /**
     * Get an e-mail based on an archived document
     * @param documentId - Unique id of the document
     * @returns The e-mail
     */
    GetEMailFromDocumentIdWithoutAttachmentStream(documentId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    private _GetUnsanitizedEMailFromDocumentIdWithoutAttachmentStream;
    /**
     * Get an e-mail based on an archived document. The returned value is not sanitized.
     * @param request - DocumentId
     * @returns The e-mail
     */
    GetUnsanitizedEMailFromDocumentIdWithoutAttachmentStream(request: carriers.EMail_GetUnsanitizedEMailFromDocumentIdWithoutAttachmentStreamRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    /**
     * Get an e-mail based on an archived document. The returned value is not sanitized.
     * @param documentId - Unique id of the document
     * @returns The e-mail
     */
    GetUnsanitizedEMailFromDocumentIdWithoutAttachmentStream(documentId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailEntity>;
    private _GetAttachmentFromId;
    /**
     * Retrieve an attachment from an e-mail
     * @param request - MailItemId, AttachmentId
     * @returns The attachment
     */
    GetAttachmentFromId(request: carriers.EMail_GetAttachmentFromIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAttachment>;
    /**
     * Retrieve an attachment from an e-mail
     * @param mailItemId - Unique ID for the e-mail to retrieve the attachment from
     * @param attachmentId - Id of the attachment in the e-mail
     * @returns The attachment
     */
    GetAttachmentFromId(mailItemId: number, attachmentId: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAttachment>;
    private _GetPreviewAttachmentFromId;
    /**
     * Retrieve an attachment from an e-mail. The returned data is intended to be use for a preview.
     * @param request - MailItemId, AttachmentId, AttachmentType, AttachmentFilename
     * @returns The attachment
     */
    GetPreviewAttachmentFromId(request: carriers.EMail_GetPreviewAttachmentFromIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAttachment>;
    /**
     * Retrieve an attachment from an e-mail. The returned data is intended to be use for a preview.
     * @param mailItemId - Unique ID for the e-mail to retrieve the attachment from
     * @param attachmentId - Id of the attachment in the e-mail
     * @param attachmentType - Mimetype of the attachment. Must be set if attachmentId contains a chain.
     * @param attachmentFilename - Filename of the attachment. Must be set if attachmentId contains a chain.
     * @returns The attachment
     */
    GetPreviewAttachmentFromId(mailItemId: number, attachmentId: string, attachmentType: string, attachmentFilename: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAttachment>;
    private _GetUnsanitizedPreviewAttachmentFromId;
    /**
     * Retrieve an attachment from an e-mail. The returned data is intended to be use for a preview. The returned data is not sanitized.
     * @param request - MailItemId, AttachmentId, AttachmentType, AttachmentFilename
     * @returns The attachment
     */
    GetUnsanitizedPreviewAttachmentFromId(request: carriers.EMail_GetUnsanitizedPreviewAttachmentFromIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAttachment>;
    /**
     * Retrieve an attachment from an e-mail. The returned data is intended to be use for a preview. The returned data is not sanitized.
     * @param mailItemId - Unique ID for the e-mail to retrieve the attachment from
     * @param attachmentId - Id of the attachment in the e-mail
     * @param attachmentType - Mimetype of the attachment. Must be set if attachmentId contains a chain.
     * @param attachmentFilename - Filename of the attachment. Must be set if attachmentId contains a chain.
     * @returns The attachment
     */
    GetUnsanitizedPreviewAttachmentFromId(mailItemId: number, attachmentId: string, attachmentType: string, attachmentFilename: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAttachment>;
    private _GetPreviewAttachmentFromDocId;
    /**
     * Retrieve an attachment from an e-mail stored in the document archive. The returned data is intended to be use for a preview.
     * @param request - DocId, AttachmentId
     * @returns The attachment
     */
    GetPreviewAttachmentFromDocId(request: carriers.EMail_GetPreviewAttachmentFromDocIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAttachment>;
    /**
     * Retrieve an attachment from an e-mail stored in the document archive. The returned data is intended to be use for a preview.
     * @param docId - Unique ID for the e-mail in the document archive to retrieve the attachment from
     * @param attachmentId - Id of the attachment in the e-mail
     * @returns The attachment
     */
    GetPreviewAttachmentFromDocId(docId: number, attachmentId: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAttachment>;
    private _GetUnsanitizedPreviewAttachmentFromDocId;
    /**
     * Retrieve an attachment from an e-mail stored in the document archive. The returned data is intended to be use for a preview. The returned data is not sanitized.
     * @param request - DocId, AttachmentId
     * @returns The attachment
     */
    GetUnsanitizedPreviewAttachmentFromDocId(request: carriers.EMail_GetUnsanitizedPreviewAttachmentFromDocIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAttachment>;
    /**
     * Retrieve an attachment from an e-mail stored in the document archive. The returned data is intended to be use for a preview. The returned data is not sanitized.
     * @param docId - Unique ID for the e-mail in the document archive to retrieve the attachment from
     * @param attachmentId - Id of the attachment in the e-mail
     * @returns The attachment
     */
    GetUnsanitizedPreviewAttachmentFromDocId(docId: number, attachmentId: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAttachment>;
    private _TestAuthenticate;
    /**
     * Test if logged-in user has a working mail account
     * @returns
     */
    TestAuthenticate(webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _ToggleSubscription;
    /**
     * Set subscription on or off on a set of folders
     * @param request - FolderId, SubscriptionStatus
     * @returns
     */
    ToggleSubscription(request: carriers.EMail_ToggleSubscriptionRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set subscription on or off on a set of folders
     * @param folderId - The folder id to set subscription value on
     * @param subscriptionStatus - The subscription status to set
     * @returns
     */
    ToggleSubscription(folderId: number, subscriptionStatus: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _HasNewMail;
    /**
     * Fast check for new mail in the database
     * @param request - MailItemId, FolderId
     * @returns Has new mail if true
     */
    HasNewMail(request: carriers.EMail_HasNewMailRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Fast check for new mail in the database
     * @param mailItemId - The last known mailitemid
     * @param folderId - The folderId for the folder to check for new mail
     * @returns Has new mail if true
     */
    HasNewMail(mailItemId: number, folderId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _LatestItemIdByFolder;
    /**
     * Returns the latest id of the mail item by folder
     * @param request - FolderId
     * @returns Mail Item id
     */
    LatestItemIdByFolder(request: carriers.EMail_LatestItemIdByFolderRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Returns the latest id of the mail item by folder
     * @param folderId - The folderId for the folder to check for the latest mail id
     * @returns Mail Item id
     */
    LatestItemIdByFolder(folderId: number, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _CreateInlineHtmlHeader;
    /**
     * Create Outlook style HTML header to use in for instance reply entities and when printing
     * @param request - Email
     * @returns The generated HTML header
     */
    CreateInlineHtmlHeader(request: carriers.EMail_CreateInlineHtmlHeaderRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Create Outlook style HTML header to use in for instance reply entities and when printing
     * @param email - The e-mail to generate header based on
     * @returns The generated HTML header
     */
    CreateInlineHtmlHeader(email: carriers.EMailEntity, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetEmailAppointment;
    /**
     * Get appointment data contained in the emails iCal attachment
     * @param request - MailItemId
     * @returns Appointment data
     */
    GetEmailAppointment(request: carriers.EMail_GetEmailAppointmentRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAppointment>;
    /**
     * Get appointment data contained in the emails iCal attachment
     * @param mailItemId - Id identifying the email
     * @returns Appointment data
     */
    GetEmailAppointment(mailItemId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EMailAppointment>;
    private _GetEmailAppointmentRecurrence;
    /**
     * Get recurrence data contained in the email iCal attachment
     * @param request - MailItemId
     * @returns Recurrence information
     */
    GetEmailAppointmentRecurrence(request: carriers.EMail_GetEmailAppointmentRecurrenceRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RecurrenceInfo>;
    /**
     * Get recurrence data contained in the email iCal attachment
     * @param mailItemId - Id identifying the email
     * @returns Recurrence information
     */
    GetEmailAppointmentRecurrence(mailItemId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RecurrenceInfo>;
    private _GetParticipantInfoFromEmailAddress;
    /**
     * Get participant data associated with the participant in the emails iCal attachment
     * @param request - EmailAddress, AppointmentId
     * @returns Person information
     */
    GetParticipantInfoFromEmailAddress(request: carriers.EMail_GetParticipantInfoFromEmailAddressRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person>;
    /**
     * Get participant data associated with the participant in the emails iCal attachment
     * @param emailAddress - Email address of participant
     * @param appointmentId - Appointment id of participant
     * @returns Person information
     */
    GetParticipantInfoFromEmailAddress(emailAddress: string, appointmentId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person>;
    private _GetEmailDocumentAsMimeStream;
    /**
     * Gets a particular document, and tries to parse it, and returns it in MIME/RFC822 format.
     * @param request - DocumentId
     * @returns A document-stream representing the document in MIME/RFC822 format.
     */
    GetEmailDocumentAsMimeStream(request: carriers.EMail_GetEmailDocumentAsMimeStreamRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    /**
     * Gets a particular document, and tries to parse it, and returns it in MIME/RFC822 format.
     * @param documentId - SuperOffice document ID
     * @returns A document-stream representing the document in MIME/RFC822 format.
     */
    GetEmailDocumentAsMimeStream(documentId: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetEMailSOInfo(eMailSOInfoId: number, options?: base.WebApiRequestOptions): Promise<carriers.EMailSOInfo>;
    private _GetReadySyncEmailAccounts;
    /**
     * Gets the list of SyncUserAccounts that should be synced.
     * @returns List of accounts to sync
     */
    GetReadySyncEmailAccounts(webapi_options?: base.WebApiRequestOptions): Promise<carriers.SyncUserAccount[]>;
    private _SyncEmailAccount;
    /**
     * Sync the given account
     * @param request - SyncUserAccount
     * @returns A void return
     */
    SyncEmailAccount(request: carriers.EMail_SyncEmailAccountRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Sync the given account
     * @param syncUserAccount - Account to sync
     * @returns A void return
     */
    SyncEmailAccount(syncUserAccount: carriers.SyncUserAccount, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SyncEmailAccounts;
    /**
     * Start syncing of the given accounts
     * @param request - SyncUserAccounts
     * @returns A void return
     */
    SyncEmailAccounts(request: carriers.EMail_SyncEmailAccountsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Start syncing of the given accounts
     * @param syncUserAccounts - Accounts to sync
     * @returns A void return
     */
    SyncEmailAccounts(syncUserAccounts: carriers.SyncUserAccount[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
}
//# sourceMappingURL=EMailAgent.d.ts.map