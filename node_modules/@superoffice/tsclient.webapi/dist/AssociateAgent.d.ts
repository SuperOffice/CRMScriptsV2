import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Associate utilities, notes, not user admininstration
 */
export interface IAssociateAgent {
    GetAssociate(associateId: number): Promise<carriers.Associate>;
    GetAssociateByPersonId(request: carriers.Associate_GetAssociateByPersonIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Associate>;
    GetAssociateByPersonId(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Associate>;
    GetNote(request: carriers.Associate_GetNoteRequest, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    GetNote(associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    SaveNote(request: carriers.Associate_SaveNoteRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SaveNote(associateId: number, note: string[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetEncryptionKey(webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetAssociateList(associateIds: number[]): Promise<carriers.Associate[]>;
    GetAssociatesByGroup(request: carriers.Associate_GetAssociatesByGroupRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Associate[]>;
    GetAssociatesByGroup(groupId: number, type: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Associate[]>;
    LogOffWindowsUsers(request: carriers.Associate_LogOffWindowsUsersRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    LogOffWindowsUsers(associateIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
}
/**
 * Associate utilities, notes, not user admininstration
 */
export declare class AssociateAgent extends base.WebApiBase implements IAssociateAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    GetAssociate(associateId: number, options?: base.WebApiRequestOptions): Promise<carriers.Associate>;
    private _GetAssociateByPersonId;
    /**
     * Returns the associate that belongs to this person if the person is an associate.
     * @param request - PersonId
     * @returns Associate if person is associate
     */
    GetAssociateByPersonId(request: carriers.Associate_GetAssociateByPersonIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Associate>;
    /**
     * Returns the associate that belongs to this person if the person is an associate.
     * @param personId - The person id
     * @returns Associate if person is associate
     */
    GetAssociateByPersonId(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Associate>;
    private _GetNote;
    /**
     * Returns an array of strings(notepad pages).
     * @param request - AssociateId
     * @returns Returns an array of strings(notepad pages).
     */
    GetNote(request: carriers.Associate_GetNoteRequest, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    /**
     * Returns an array of strings(notepad pages).
     * @param associateId - The associate id
     * @returns Returns an array of strings(notepad pages).
     */
    GetNote(associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    private _SaveNote;
    /**
     * Saves an array of strings(notepad pages).
     * @param request - AssociateId, Note
     * @returns
     */
    SaveNote(request: carriers.Associate_SaveNoteRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Saves an array of strings(notepad pages).
     * @param associateId - The associate id
     * @param note - The array of strings(notepad pages).
     * @returns
     */
    SaveNote(associateId: number, note: string[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetEncryptionKey;
    /**
     * Get unique key made from AssociateId and dbTag used for local storage encryption operations.
     * @returns encryptionKey
     */
    GetEncryptionKey(webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetAssociateList(associateIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.Associate[]>;
    private _GetAssociatesByGroup;
    /**
     * Method that returns a array of associate , based on DiaryGroupType and groupId. The differernt types are, Userdefined, Usergroup and ResourceHeadings
     * @param request - GroupId, Type
     * @returns Array of associate
     */
    GetAssociatesByGroup(request: carriers.Associate_GetAssociatesByGroupRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Associate[]>;
    /**
     * Method that returns a array of associate , based on DiaryGroupType and groupId. The differernt types are, Userdefined, Usergroup and ResourceHeadings
     * @param groupId - Id of the group
     * @param type - The type of group. See DiaryGroupType
     * @returns Array of associate
     */
    GetAssociatesByGroup(groupId: number, type: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Associate[]>;
    private _LogOffWindowsUsers;
    /**
     * Method that logs off associates that are logged on to the win client
     * @param request - AssociateIds
     * @returns A void return
     */
    LogOffWindowsUsers(request: carriers.Associate_LogOffWindowsUsersRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Method that logs off associates that are logged on to the win client
     * @param associateIds - The ids of the associates that shall be logged off
     * @returns A void return
     */
    LogOffWindowsUsers(associateIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
}
//# sourceMappingURL=AssociateAgent.d.ts.map