import { AxiosRequestConfig } from 'axios';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Preferences, user interface tab configuration
 */
export interface IPreferenceAgent {
    CreateDefaultPreference(): Promise<carriers.Preference>;
    CreateDefaultPreferenceDescription(): Promise<carriers.PreferenceDescription>;
    SavePreferenceDescription(entity: carriers.PreferenceDescription): Promise<carriers.PreferenceDescription>;
    DeletePreferenceDescription(PreferenceDescriptionId: number): Promise<void>;
    CreateDefaultPreferenceDescriptionLine(): Promise<carriers.PreferenceDescriptionLine>;
    SavePreferenceDescriptionLine(entity: carriers.PreferenceDescriptionLine): Promise<carriers.PreferenceDescriptionLine>;
    DeletePreferenceDescriptionLine(PreferenceDescriptionLineId: number): Promise<void>;
    SavePreference(request: carriers.Preference_SavePreferenceRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SavePreference(preference: carriers.Preference, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SaveTabOrder(request: carriers.Preference_SaveTabOrderRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SaveTabOrder(tabOrder: carriers.TabOrder, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetTabOrder(request: carriers.Preference_GetTabOrderRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TabOrder>;
    GetTabOrder(tabName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TabOrder>;
    GetPreference(request: carriers.Preference_GetPreferenceRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Preference>;
    GetPreference(id: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Preference>;
    SavePreferenceEntity(request: carriers.Preference_SavePreferenceEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Preference>;
    SavePreferenceEntity(preference: carriers.Preference, removeLowerLevels: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Preference>;
    DeletePreference(request: carriers.Preference_DeletePreferenceRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeletePreference(id: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeletePreferences(request: carriers.Preference_DeletePreferencesRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeletePreferences(ids: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetPreferenceByName(request: carriers.Preference_GetPreferenceByNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Preference>;
    GetPreferenceByName(prefSection: string, prefKey: string, prefLevel: enums.PreferenceLevel, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Preference>;
    GetPreferenceByNameAndId(request: carriers.Preference_GetPreferenceByNameAndIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Preference>;
    GetPreferenceByNameAndId(prefSection: string, prefKey: string, prefLevel: enums.PreferenceLevel, ownerId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Preference>;
    GetNetServicesStatusUrl(webapi_options?: base.WebApiRequestOptions): Promise<string>;
    UpdateNetServicesStatus(request: carriers.Preference_UpdateNetServicesStatusRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    UpdateNetServicesStatus(xmlOrJson: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetXsrfPaths(request: carriers.Preference_GetXsrfPathsRequest, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    GetXsrfPaths(hostname: string, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    SetXsrfPaths(request: carriers.Preference_SetXsrfPathsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetXsrfPaths(hostname: string, paths: string[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetPreferenceDescription(preferenceDescriptionId: number): Promise<carriers.PreferenceDescription>;
    GetFromSectionAndKey(request: carriers.Preference_GetFromSectionAndKeyRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescription>;
    GetFromSectionAndKey(section: string, key: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescription>;
    GetAll(webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescription[]>;
    GetAllFromSection(request: carriers.Preference_GetAllFromSectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescription[]>;
    GetAllFromSection(section: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescription[]>;
    SaveFromSectionAndKey(request: carriers.Preference_SaveFromSectionAndKeyRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescription>;
    SaveFromSectionAndKey(section: string, key: string, preferenceDescription: carriers.PreferenceDescription, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescription>;
    DeleteFromSectionAndKey(request: carriers.Preference_DeleteFromSectionAndKeyRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteFromSectionAndKey(section: string, key: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetPreferenceDescriptionLine(preferenceDescriptionLineId: number): Promise<carriers.PreferenceDescriptionLine>;
    GetPreferenceDescriptionLineFromIdAndValue(request: carriers.Preference_GetPreferenceDescriptionLineFromIdAndValueRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescriptionLine>;
    GetPreferenceDescriptionLineFromIdAndValue(prefDescId: number, prefValue: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescriptionLine>;
    GetPreferenceDescriptionLinesByPrefDescId(request: carriers.Preference_GetPreferenceDescriptionLinesByPrefDescIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescriptionLine[]>;
    GetPreferenceDescriptionLinesByPrefDescId(prefDescId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescriptionLine[]>;
    SavePreferenceDescriptionLines(request: carriers.Preference_SavePreferenceDescriptionLinesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescriptionLine[]>;
    SavePreferenceDescriptionLines(preferenceDescriptionLines: carriers.PreferenceDescriptionLine[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescriptionLine[]>;
    DeletePreferenceDescriptionLines(request: carriers.Preference_DeletePreferenceDescriptionLinesRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeletePreferenceDescriptionLines(prefDescLineIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeletePrefDescLinesByPrefDescId(request: carriers.Preference_DeletePrefDescLinesByPrefDescIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeletePrefDescLinesByPrefDescId(prefDescId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeletePrefDescLinesByPrefDescIds(request: carriers.Preference_DeletePrefDescLinesByPrefDescIdsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeletePrefDescLinesByPrefDescIds(prefDescIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetPreferences(request: carriers.Preference_GetPreferencesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Preference[]>;
    GetPreferences(specifications: carriers.PreferenceSpec[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.Preference[]>;
    SavePreferences(request: carriers.Preference_SavePreferencesRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SavePreferences(preferences: carriers.Preference[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetPreferencesWithDisplayValues(request: carriers.Preference_GetPreferencesWithDisplayValuesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Preference[]>;
    GetPreferencesWithDisplayValues(specifications: carriers.PreferenceSpec[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.Preference[]>;
    GetTabOrders(webapi_options?: base.WebApiRequestOptions): Promise<carriers.TabOrder[]>;
    SaveTabOrders(request: carriers.Preference_SaveTabOrdersRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SaveTabOrders(tabOrders: carriers.TabOrder[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SavePreferenceEntities(request: carriers.Preference_SavePreferenceEntitiesRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SavePreferenceEntities(preferences: carriers.Preference[], removeLowerLevels: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
}
/**
 * Preferences, user interface tab configuration
 */
export declare class PreferenceAgent extends base.WebApiBase implements IPreferenceAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * Set default values into a new Preference.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultPreference(options?: base.WebApiRequestOptions): Promise<carriers.Preference>;
    /**
     * Set default values into a new PreferenceDescription.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultPreferenceDescription(options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescription>;
    SavePreferenceDescription(entity: carriers.PreferenceDescription, options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescription>;
    DeletePreferenceDescription(PreferenceDescriptionId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new PreferenceDescriptionLine.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultPreferenceDescriptionLine(options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescriptionLine>;
    SavePreferenceDescriptionLine(entity: carriers.PreferenceDescriptionLine, options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescriptionLine>;
    DeletePreferenceDescriptionLine(PreferenceDescriptionLineId: number, options?: base.WebApiRequestOptions): Promise<void>;
    private _SavePreference;
    /**
     * Save this preference
     * @param request - Preference
     * @returns This method has no return value
     */
    SavePreference(request: carriers.Preference_SavePreferenceRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Save this preference
     * @param preference - Preference to be saved. All fields must be filled in, and the preference will be saved on the Associate level only. Setting for other levels is an administrative task and not available through this service.
     * @returns This method has no return value
     */
    SavePreference(preference: carriers.Preference, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SaveTabOrder;
    /**
     * Saves the tab order. The order is saved pr. user.
     * @param request - TabOrder
     * @returns This method has no return value
     */
    SaveTabOrder(request: carriers.Preference_SaveTabOrderRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Saves the tab order. The order is saved pr. user.
     * @param tabOrder - Name of the tab control
     * @returns This method has no return value
     */
    SaveTabOrder(tabOrder: carriers.TabOrder, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetTabOrder;
    /**
     * Gets the tab order.
     * @param request - TabName
     * @returns Tab order. Array of strings. Each string represent a named tab.
     */
    GetTabOrder(request: carriers.Preference_GetTabOrderRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TabOrder>;
    /**
     * Gets the tab order.
     * @param tabName - Name of the tab control
     * @returns Tab order. Array of strings. Each string represent a named tab.
     */
    GetTabOrder(tabName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TabOrder>;
    private _GetPreference;
    /**
     * Get a preference by id
     * @param request - Id
     * @returns The preference loaded
     */
    GetPreference(request: carriers.Preference_GetPreferenceRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Preference>;
    /**
     * Get a preference by id
     * @param id - The id of the preference to load
     * @returns The preference loaded
     */
    GetPreference(id: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Preference>;
    private _SavePreferenceEntity;
    /**
     * Saves a complete preference object, on any level and any target. Preference administrator rights are required to use this
     * @param request - Preference, RemoveLowerLevels
     * @returns Returns the saved preference
     */
    SavePreferenceEntity(request: carriers.Preference_SavePreferenceEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Preference>;
    /**
     * Saves a complete preference object, on any level and any target. Preference administrator rights are required to use this
     * @param preference - The preference object to be saved
     * @param removeLowerLevels - If this is true, all user preferences on lower levels will be deleted
     * @returns Returns the saved preference
     */
    SavePreferenceEntity(preference: carriers.Preference, removeLowerLevels: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Preference>;
    private _DeletePreference;
    /**
     * Delete a preference by id
     * @param request - Id
     * @returns This method has no return value
     */
    DeletePreference(request: carriers.Preference_DeletePreferenceRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Delete a preference by id
     * @param id - The id of the preference to delete
     * @returns This method has no return value
     */
    DeletePreference(id: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _DeletePreferences;
    /**
     * Delete some preferences by id
     * @param request - Ids
     * @returns This method has no return value
     */
    DeletePreferences(request: carriers.Preference_DeletePreferencesRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Delete some preferences by id
     * @param ids - The ids of the preference to delete
     * @returns This method has no return value
     */
    DeletePreferences(ids: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetPreferenceByName;
    /**
     * Get a preference by name
     * @param request - PrefSection, PrefKey, PrefLevel
     * @returns The preference. Note that id = 0 and value = null if preference not found in the database at the requested pref-level.
     */
    GetPreferenceByName(request: carriers.Preference_GetPreferenceByNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Preference>;
    /**
     * Get a preference by name
     * @param prefSection - The preference section name. e.g. 'Functions'. See SuperOffice.CRM.UserPreferenceStrings for constants.
     * @param prefKey - The preference key name. e.g. 'ShowTipsAtStart'. See SuperOffice.CRM.UserPreferenceStrings for constants.
     * @param prefLevel - The preference level to read. Undefined (0) means to return the preference defined closest to the user.
     * @returns The preference. Note that id = 0 and value = null if preference not found in the database at the requested pref-level.
     */
    GetPreferenceByName(prefSection: string, prefKey: string, prefLevel: enums.PreferenceLevel, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Preference>;
    private _GetPreferenceByNameAndId;
    /**
     * Get a preference by name and owner id.
     * @param request - PrefSection, PrefKey, PrefLevel, OwnerId
     * @returns The preference. Note that id = 0 and value = null if preference not found in the database at the requested pref-level.
     */
    GetPreferenceByNameAndId(request: carriers.Preference_GetPreferenceByNameAndIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Preference>;
    /**
     * Get a preference by name and owner id.
     * @param prefSection - The preference section name. e.g. 'Functions'. See SuperOffice.CRM.UserPreferenceStrings for constants.
     * @param prefKey - The preference key name. e.g. 'ShowTipsAtStart'. See SuperOffice.CRM.UserPreferenceStrings for constants.
     * @param prefLevel - The preference level to read. Undefined (0) means to return the preference defined closest to the user.
     * @param ownerId - The preference owner id, individual or group.
     * @returns The preference. Note that id = 0 and value = null if preference not found in the database at the requested pref-level.
     */
    GetPreferenceByNameAndId(prefSection: string, prefKey: string, prefLevel: enums.PreferenceLevel, ownerId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Preference>;
    private _GetNetServicesStatusUrl;
    /**
     * Returns URL to status service. e.g. &apos;https://help.superoffice.com/sodispatcher/v1/status&apos; Returns NULL if status does not need to be checked yet.
     * @returns NULL or URL of the status service that returns an XML or JSON block.
     */
    GetNetServicesStatusUrl(webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _UpdateNetServicesStatus;
    /**
     * Update the NetServices preferences with values contained in the content from the Status URL
     * @param request - XmlOrJson
     * @returns This method has no return value
     */
    UpdateNetServicesStatus(request: carriers.Preference_UpdateNetServicesStatusRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Update the NetServices preferences with values contained in the content from the Status URL
     * @param xmlOrJson - The text that was returned by getting the Status URL
     * @returns This method has no return value
     */
    UpdateNetServicesStatus(xmlOrJson: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetXsrfPaths;
    /**
     * Returns paths that XSRF cookies should be set on
     * @param request - Hostname
     * @returns Paths that XSRF cookies should be set for: ['/cs', '/crm']
     */
    GetXsrfPaths(request: carriers.Preference_GetXsrfPathsRequest, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    /**
     * Returns paths that XSRF cookies should be set on
     * @param hostname - The hostname that we are storing paths for.
     * @returns Paths that XSRF cookies should be set for: ['/cs', '/crm']
     */
    GetXsrfPaths(hostname: string, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    private _SetXsrfPaths;
    /**
     * Update the paths that need XSRF cookies
     * @param request - Hostname, Paths
     * @returns This method has no return value
     */
    SetXsrfPaths(request: carriers.Preference_SetXsrfPathsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Update the paths that need XSRF cookies
     * @param hostname - The hostname that we are storing paths for.
     * @param paths - Paths that XSRF cookies should be set for: ['/cs', '/crm']
     * @returns This method has no return value
     */
    SetXsrfPaths(hostname: string, paths: string[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetPreferenceDescription(preferenceDescriptionId: number, options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescription>;
    private _GetFromSectionAndKey;
    /**
     * Gets a PreferenceDescription based on the section and key
     * @param request - Section, Key
     * @returns A PreferenceDescription or null
     */
    GetFromSectionAndKey(request: carriers.Preference_GetFromSectionAndKeyRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescription>;
    /**
     * Gets a PreferenceDescription based on the section and key
     * @param section - The PreferenceDescription-section
     * @param key - The PreferenceDescription-key
     * @returns A PreferenceDescription or null
     */
    GetFromSectionAndKey(section: string, key: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescription>;
    private _GetAll;
    /**
     * Gets a list of all PreferenceDescriptions in the system.
     * @returns All PreferenceDescriptions in the system
     */
    GetAll(webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescription[]>;
    private _GetAllFromSection;
    /**
     * Gets all PreferenceDescription-items in the specified section
     * @param request - Section
     * @returns All PreferenceDescriptions found.
     */
    GetAllFromSection(request: carriers.Preference_GetAllFromSectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescription[]>;
    /**
     * Gets all PreferenceDescription-items in the specified section
     * @param section - The PreferenceDescription-section
     * @returns All PreferenceDescriptions found.
     */
    GetAllFromSection(section: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescription[]>;
    private _SaveFromSectionAndKey;
    /**
     * Update a PreferenceDescription based on the section and key
     * @param request - Section, Key, PreferenceDescription
     * @returns Saved PreferenceDescription
     */
    SaveFromSectionAndKey(request: carriers.Preference_SaveFromSectionAndKeyRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescription>;
    /**
     * Update a PreferenceDescription based on the section and key
     * @param section - The PreferenceDescription-section
     * @param key - The PreferenceDescription-key
     * @param preferenceDescription - The PreferenceDescription to save.
     * @returns Saved PreferenceDescription
     */
    SaveFromSectionAndKey(section: string, key: string, preferenceDescription: carriers.PreferenceDescription, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescription>;
    private _DeleteFromSectionAndKey;
    /**
     * Gets a PreferenceDescription based on the section and key
     * @param request - Section, Key
     * @returns This method has no return value
     */
    DeleteFromSectionAndKey(request: carriers.Preference_DeleteFromSectionAndKeyRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Gets a PreferenceDescription based on the section and key
     * @param section - The PreferenceDescription-section
     * @param key - The PreferenceDescription-key
     * @returns This method has no return value
     */
    DeleteFromSectionAndKey(section: string, key: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetPreferenceDescriptionLine(preferenceDescriptionLineId: number, options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescriptionLine>;
    private _GetPreferenceDescriptionLineFromIdAndValue;
    /**
     * Get a preference description line from a prefDesc_id and a prefValue
     * @param request - PrefDescId, PrefValue
     * @returns The preference description line matching the id and the value
     */
    GetPreferenceDescriptionLineFromIdAndValue(request: carriers.Preference_GetPreferenceDescriptionLineFromIdAndValueRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescriptionLine>;
    /**
     * Get a preference description line from a prefDesc_id and a prefValue
     * @param prefDescId - The id of the preference description this line is connected to
     * @param prefValue - The value of the description line to return
     * @returns The preference description line matching the id and the value
     */
    GetPreferenceDescriptionLineFromIdAndValue(prefDescId: number, prefValue: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescriptionLine>;
    private _GetPreferenceDescriptionLinesByPrefDescId;
    /**
     * Get all preference description lines from a prefDesc_id
     * @param request - PrefDescId
     * @returns The preference description lines matching the id
     */
    GetPreferenceDescriptionLinesByPrefDescId(request: carriers.Preference_GetPreferenceDescriptionLinesByPrefDescIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescriptionLine[]>;
    /**
     * Get all preference description lines from a prefDesc_id
     * @param prefDescId - The id of the preference description this line is connected to
     * @returns The preference description lines matching the id
     */
    GetPreferenceDescriptionLinesByPrefDescId(prefDescId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescriptionLine[]>;
    private _SavePreferenceDescriptionLines;
    /**
     * Saves the PreferenceDescriptionLine array in the SuperOffice database
     * @param request - PreferenceDescriptionLines
     * @returns The updated PrefDesc lines (If the PreferenceDescriptionLine array was new, it returns with id's set.
     */
    SavePreferenceDescriptionLines(request: carriers.Preference_SavePreferenceDescriptionLinesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescriptionLine[]>;
    /**
     * Saves the PreferenceDescriptionLine array in the SuperOffice database
     * @param preferenceDescriptionLines - The PreferenceDescriptionLine array to save.
     * @returns The updated PrefDesc lines (If the PreferenceDescriptionLine array was new, it returns with id's set.
     */
    SavePreferenceDescriptionLines(preferenceDescriptionLines: carriers.PreferenceDescriptionLine[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreferenceDescriptionLine[]>;
    private _DeletePreferenceDescriptionLines;
    /**
     * Delete the PrefDescLines in the SuperOffice database
     * @param request - PrefDescLineIds
     * @returns Nothing
     */
    DeletePreferenceDescriptionLines(request: carriers.Preference_DeletePreferenceDescriptionLinesRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Delete the PrefDescLines in the SuperOffice database
     * @param prefDescLineIds - Primary keys of the PrefDescLines to delete
     * @returns Nothing
     */
    DeletePreferenceDescriptionLines(prefDescLineIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _DeletePrefDescLinesByPrefDescId;
    /**
     * Delete the PrefDescLines associated with Preference Description Id in the SuperOffice database
     * @param request - PrefDescId
     * @returns Nothing
     */
    DeletePrefDescLinesByPrefDescId(request: carriers.Preference_DeletePrefDescLinesByPrefDescIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Delete the PrefDescLines associated with Preference Description Id in the SuperOffice database
     * @param prefDescId - Primary key of the Preference Description that contains PrefDescLines to delete
     * @returns Nothing
     */
    DeletePrefDescLinesByPrefDescId(prefDescId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _DeletePrefDescLinesByPrefDescIds;
    /**
     * Delete the PrefDescLines associated with Preference Description Ids in the SuperOffice database
     * @param request - PrefDescIds
     * @returns Nothing
     */
    DeletePrefDescLinesByPrefDescIds(request: carriers.Preference_DeletePrefDescLinesByPrefDescIdsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Delete the PrefDescLines associated with Preference Description Ids in the SuperOffice database
     * @param prefDescIds - Primary keys of the Preference Descriptions that contains PrefDescLines to delete
     * @returns Nothing
     */
    DeletePrefDescLinesByPrefDescIds(prefDescIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetPreferences;
    /**
     * Get one or more preferences based on a set of specifications.&lt;br/&gt;The prefDisplayvalue and prefDisplaytooltip are blank (faster processing relative to GetPreferencesWithDisplayValues)
     * @param request - Specifications
     * @returns Array of preference values for your given specification(s). More strictly: 'all keys actually set at any accessible level for this associate'; you will NOT get entries for preferences that might exist, but have no set value anywhere.
     */
    GetPreferences(request: carriers.Preference_GetPreferencesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Preference[]>;
    /**
     * Get one or more preferences based on a set of specifications.&lt;br/&gt;The prefDisplayvalue and prefDisplaytooltip are blank (faster processing relative to GetPreferencesWithDisplayValues)
     * @param specifications - Array of preference specifications. The key value may be * (asterisk), which means 'all keys within section'. Note that the semantics of this are more strictly 'all keys actually set at any accessible level for this associate'; you will NOT get entries for preferences that might exist, but have no set value anywhere. You can also have askerisk as the section name. In that case the specification array must contain exactly one entry and the key must also be asterisk. This will return all known preferences in all sections for your associate. It might be a lot, tests have shown that a heavily used database can accumulate up to 500 preferences on a single associate. If the Sentry table/field right preferences have been used, the number could be a lot greater!
     * @returns Array of preference values for your given specification(s). More strictly: 'all keys actually set at any accessible level for this associate'; you will NOT get entries for preferences that might exist, but have no set value anywhere.
     */
    GetPreferences(specifications: carriers.PreferenceSpec[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.Preference[]>;
    private _SavePreferences;
    /**
     * Save this set of preferences. Note this method DOES NOT look at level/targetId - it only saves on behalf of the CURRENT USER.
     * @param request - Preferences
     * @returns
     */
    SavePreferences(request: carriers.Preference_SavePreferencesRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Save this set of preferences. Note this method DOES NOT look at level/targetId - it only saves on behalf of the CURRENT USER.
     * @param preferences - Preferences to be saved. Note that all fields must be filled in, and the preference will be saved on the Associate level only! Setting for other levels is an administrative task and not available through this service.
     * @returns
     */
    SavePreferences(preferences: carriers.Preference[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetPreferencesWithDisplayValues;
    /**
     * Get one or more preferences based on a set of specifications&lt;br/&gt;The PrefDisplayValue and PrefDisplaytooltip are populated, at some additional processing cost.
     * @param request - Specifications
     * @returns Array of preference values for your given specification(s). More strictly: 'all keys actually set at any accessible level for this associate'; you will NOT get entries for preferences that might exist, but have no set value anywhere.<br/>The PrefDisplayValue and PrefDisplaytooltip are populated, at some additional processing cost.
     */
    GetPreferencesWithDisplayValues(request: carriers.Preference_GetPreferencesWithDisplayValuesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Preference[]>;
    /**
     * Get one or more preferences based on a set of specifications&lt;br/&gt;The PrefDisplayValue and PrefDisplaytooltip are populated, at some additional processing cost.
     * @param specifications - Array of preference specifications. The key value may be * (asterisk), which means 'all keys within section'. Note that the semantics of this are more strictly 'all keys actually set at any accessible level for this associate'; you will NOT get entries for preferences that might exist, but have no set value anywhere. You can also have askerisk as the section name. In that case the specification array must contain exactly one entry and the key must also be asterisk. This will return all known preferences in all sections for your associate. It might be a lot, tests have shown that a heavily used database can accumulate up to 500 preferences on a single associate. If the Sentry table/field right preferences have been used, the number could be a lot greater!
     * @returns Array of preference values for your given specification(s). More strictly: 'all keys actually set at any accessible level for this associate'; you will NOT get entries for preferences that might exist, but have no set value anywhere.<br/>The PrefDisplayValue and PrefDisplaytooltip are populated, at some additional processing cost.
     */
    GetPreferencesWithDisplayValues(specifications: carriers.PreferenceSpec[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.Preference[]>;
    private _GetTabOrders;
    /**
     *
     * @returns
     */
    GetTabOrders(webapi_options?: base.WebApiRequestOptions): Promise<carriers.TabOrder[]>;
    private _SaveTabOrders;
    /**
     *
     * @param request - TabOrders
     * @returns
     */
    SaveTabOrders(request: carriers.Preference_SaveTabOrdersRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     *
     * @param tabOrders -
     * @returns
     */
    SaveTabOrders(tabOrders: carriers.TabOrder[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SavePreferenceEntities;
    /**
     * Save this set of preferences.
     * @param request - Preferences, RemoveLowerLevels
     * @returns
     */
    SavePreferenceEntities(request: carriers.Preference_SavePreferenceEntitiesRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Save this set of preferences.
     * @param preferences - Preferences to be saved. Note that all fields must be filled in.
     * @param removeLowerLevels - If this is true, all user preferences on lower levels will be deleted
     * @returns
     */
    SavePreferenceEntities(preferences: carriers.Preference[], removeLowerLevels: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
}
//# sourceMappingURL=PreferenceAgent.d.ts.map