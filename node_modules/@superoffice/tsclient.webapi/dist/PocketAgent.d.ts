import { AxiosRequestConfig } from 'axios';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Agent with Pocket specific functionality
 */
export interface IPocketAgent {
    GetMyCallerIDs(request: carriers.Pocket_GetMyCallerIDsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CallerIDCollection>;
    GetMyCallerIDs(lastHash: string, minDate: Date, maxDate: Date, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CallerIDCollection>;
    GetCallerIDsFromSelection(request: carriers.Pocket_GetCallerIDsFromSelectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CallerIDCollection>;
    GetCallerIDsFromSelection(selectionId: number, lastHash: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CallerIDCollection>;
    GetPocketStartupData(request: carriers.Pocket_GetPocketStartupDataRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PocketStartupData>;
    GetPocketStartupData(tables: string[], currentClientTime: Date, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PocketStartupData>;
    RegisterDeviceForPushNotification(request: carriers.Pocket_RegisterDeviceForPushNotificationRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RegisterDeviceForPushNotification(deviceInfo: carriers.PocketDeviceInfo, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetRegisteredDevices(request: carriers.Pocket_GetRegisteredDevicesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PocketDeviceInfo[]>;
    GetRegisteredDevices(associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PocketDeviceInfo[]>;
    SetPushNotificationTagsForDevice(request: carriers.Pocket_SetPushNotificationTagsForDeviceRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetPushNotificationTagsForDevice(deviceIdentifier: string, tags: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetPushNotificationTagsForUser(request: carriers.Pocket_SetPushNotificationTagsForUserRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetPushNotificationTagsForUser(associateId: number, tags: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetPushNotificationTagsForDevice(request: carriers.Pocket_GetPushNotificationTagsForDeviceRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetPushNotificationTagsForDevice(deviceIdentifier: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    SendPushNotification(request: carriers.Pocket_SendPushNotificationRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SendPushNotification(associateIds: number[], message: carriers.PocketNotificationMessage, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RunAppointmentAlarmBroker(webapi_options?: base.WebApiRequestOptions): Promise<void>;
    NotifyUsers(request: carriers.Pocket_NotifyUsersRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    NotifyUsers(notificationEventType: enums.NotificationEventType, id: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    NotificationHandled(request: carriers.Pocket_NotificationHandledRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    NotificationHandled(notificationEventType: enums.NotificationEventType, id: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    NotificationsHandled(request: carriers.Pocket_NotificationsHandledRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    NotificationsHandled(notificationEvents: carriers.NotificationEvent[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
}
/**
 * Agent with Pocket specific functionality
 */
export declare class PocketAgent extends base.WebApiBase implements IPocketAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    private _GetMyCallerIDs;
    /**
     * Get caller ids that the current principal might be interested in (phone numbers of related persons in sales and appointments created/owned/touched by ourselves or colleagues in our primary group
     * @param request - LastHash, MinDate, MaxDate
     * @returns Collection of caller IDs, containing the hash of the caller ids
     */
    GetMyCallerIDs(request: carriers.Pocket_GetMyCallerIDsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CallerIDCollection>;
    /**
     * Get caller ids that the current principal might be interested in (phone numbers of related persons in sales and appointments created/owned/touched by ourselves or colleagues in our primary group
     * @param lastHash - Hash for the previous call, used for checking if the same set of caller ids was sent in a previous call, and returning null in that case
     * @param minDate - Only check activities after this date
     * @param maxDate - Only check activities before this date
     * @returns Collection of caller IDs, containing the hash of the caller ids
     */
    GetMyCallerIDs(lastHash: string, minDate: Date, maxDate: Date, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CallerIDCollection>;
    private _GetCallerIDsFromSelection;
    /**
     * Get caller ids from a selection. Queries the shadow selection of persons and companies, so selections of any kind can be used
     * @param request - SelectionId, LastHash
     * @returns Collection of caller IDs, containing the hash of the caller ids
     */
    GetCallerIDsFromSelection(request: carriers.Pocket_GetCallerIDsFromSelectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CallerIDCollection>;
    /**
     * Get caller ids from a selection. Queries the shadow selection of persons and companies, so selections of any kind can be used
     * @param selectionId - Id of selection to get caller ids from
     * @param lastHash - Hash for the previous call, used for checking if the same set of caller ids was sent in an earlier call, and returning null in that case
     * @returns Collection of caller IDs, containing the hash of the caller ids
     */
    GetCallerIDsFromSelection(selectionId: number, lastHash: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CallerIDCollection>;
    private _GetPocketStartupData;
    /**
     *
     * @param request - Tables, CurrentClientTime
     * @returns Startup data for pocket
     */
    GetPocketStartupData(request: carriers.Pocket_GetPocketStartupDataRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PocketStartupData>;
    /**
     *
     * @param tables - Tables to check for license
     * @param currentClientTime - Current time on the client, used for overdue sale lookup having correct timezone relative to client
     * @returns Startup data for pocket
     */
    GetPocketStartupData(tables: string[], currentClientTime: Date, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PocketStartupData>;
    private _RegisterDeviceForPushNotification;
    /**
     * Register a device that should receive push notifications when notable events occour
     * @param request - DeviceInfo
     * @returns This method has no return value
     */
    RegisterDeviceForPushNotification(request: carriers.Pocket_RegisterDeviceForPushNotificationRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Register a device that should receive push notifications when notable events occour
     * @param deviceInfo - Properties for the device to register
     * @returns This method has no return value
     */
    RegisterDeviceForPushNotification(deviceInfo: carriers.PocketDeviceInfo, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetRegisteredDevices;
    /**
     * Retrieve all registered devices for an associate
     * @param request - AssociateId
     * @returns
     */
    GetRegisteredDevices(request: carriers.Pocket_GetRegisteredDevicesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PocketDeviceInfo[]>;
    /**
     * Retrieve all registered devices for an associate
     * @param associateId - The user to get devices for
     * @returns
     */
    GetRegisteredDevices(associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PocketDeviceInfo[]>;
    private _SetPushNotificationTagsForDevice;
    /**
     * Specify what kind of notification events a device should receive push notifications for
     * @param request - DeviceIdentifier, Tags
     * @returns This method has no return value
     */
    SetPushNotificationTagsForDevice(request: carriers.Pocket_SetPushNotificationTagsForDeviceRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Specify what kind of notification events a device should receive push notifications for
     * @param deviceIdentifier - The unique identifier for a device
     * @param tags - A comma separated list of events this device should receive push events for
     * @returns This method has no return value
     */
    SetPushNotificationTagsForDevice(deviceIdentifier: string, tags: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SetPushNotificationTagsForUser;
    /**
     * Specify what kind of notification events a user should receive push notifications for.  This will update all registerred devices for this user.
     * @param request - AssociateId, Tags
     * @returns This method has no return value
     */
    SetPushNotificationTagsForUser(request: carriers.Pocket_SetPushNotificationTagsForUserRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Specify what kind of notification events a user should receive push notifications for.  This will update all registerred devices for this user.
     * @param associateId - The associate to set tags for
     * @param tags - A comma separated list of events the associate should receive push events for
     * @returns This method has no return value
     */
    SetPushNotificationTagsForUser(associateId: number, tags: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetPushNotificationTagsForDevice;
    /**
     * Retrieve current tag value for a device
     * @param request - DeviceIdentifier
     * @returns A comma separated list of events this device should receive push events for
     */
    GetPushNotificationTagsForDevice(request: carriers.Pocket_GetPushNotificationTagsForDeviceRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Retrieve current tag value for a device
     * @param deviceIdentifier - The unique identifier of this device
     * @returns A comma separated list of events this device should receive push events for
     */
    GetPushNotificationTagsForDevice(deviceIdentifier: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _SendPushNotification;
    /**
     * Send a push notification to one or more associates
     * @param request - AssociateIds, Message
     * @returns This method has no return value
     */
    SendPushNotification(request: carriers.Pocket_SendPushNotificationRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Send a push notification to one or more associates
     * @param associateIds - The associates to send the push notification message to
     * @param message - The message to send
     * @returns This method has no return value
     */
    SendPushNotification(associateIds: number[], message: carriers.PocketNotificationMessage, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _RunAppointmentAlarmBroker;
    /**
     * Execute the AppointmentAlarmBroker once
     * @returns This method has no return value
     */
    RunAppointmentAlarmBroker(webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _NotifyUsers;
    /**
     * Notify users about a new or changed entity
     * @param request - NotificationEventType, Id
     * @returns This method has no return value
     */
    NotifyUsers(request: carriers.Pocket_NotifyUsersRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Notify users about a new or changed entity
     * @param notificationEventType - Type of notification
     * @param id - Id of entity to notify about
     * @returns This method has no return value
     */
    NotifyUsers(notificationEventType: enums.NotificationEventType, id: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _NotificationHandled;
    /**
     * Mark a notification as handled, so it can be cleaned up on other clients that have received the notification
     * @param request - NotificationEventType, Id
     * @returns This method has no return value
     */
    NotificationHandled(request: carriers.Pocket_NotificationHandledRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Mark a notification as handled, so it can be cleaned up on other clients that have received the notification
     * @param notificationEventType - Type of notification
     * @param id - Id of entity to notify about
     * @returns This method has no return value
     */
    NotificationHandled(notificationEventType: enums.NotificationEventType, id: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _NotificationsHandled;
    /**
     * Mark a set of notifications as handled, so they can be cleaned up on other clients that have received the notification
     * @param request - NotificationEvents
     * @returns This method has no return value
     */
    NotificationsHandled(request: carriers.Pocket_NotificationsHandledRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Mark a set of notifications as handled, so they can be cleaned up on other clients that have received the notification
     * @param notificationEvents - List of notifications to mark as handled
     * @returns This method has no return value
     */
    NotificationsHandled(notificationEvents: carriers.NotificationEvent[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
}
//# sourceMappingURL=PocketAgent.d.ts.map