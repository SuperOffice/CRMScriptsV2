"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowAgent = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
/**
 * Agent lets you configure workflow automation
 */
class WorkflowAgent extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Workflow/";
        super(options);
    }
    /**
     * Set default values into a new EmailFlow.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    async CreateDefaultEmailFlow(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultEmailFlow", null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_EmailFlow_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing EmailFlow or creates a new EmailFlow if the id parameter is empty
     * @param entity - The EmailFlow to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated EmailFlow
     */
    async SaveEmailFlow(entity, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveEmailFlow", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_EmailFlow_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Deletes the EmailFlow
     * @param EmailFlowId - The id of the EmailFlow to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    async DeleteEmailFlow(EmailFlowId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteEmailFlow?EmailFlowId=" + EmailFlowId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Set default values into a new WorkflowFilter.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    async CreateDefaultWorkflowFilter(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultWorkflowFilter", null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_WorkflowFilter_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Set default values into a new WorkflowGoal.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    async CreateDefaultWorkflowGoal(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultWorkflowGoal", null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_WorkflowGoal_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing WorkflowGoal or creates a new WorkflowGoal if the id parameter is empty
     * @param entity - The WorkflowGoal to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated WorkflowGoal
     */
    async SaveWorkflowGoal(entity, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveWorkflowGoal", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_WorkflowGoal_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Deletes the WorkflowGoal
     * @param WorkflowGoalId - The id of the WorkflowGoal to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    async DeleteWorkflowGoal(WorkflowGoalId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteWorkflowGoal?WorkflowGoalId=" + WorkflowGoalId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Set default values into a new WorkflowStepOption.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    async CreateDefaultWorkflowStepOption(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultWorkflowStepOption", null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_WorkflowStepOption_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing WorkflowStepOption or creates a new WorkflowStepOption if the id parameter is empty
     * @param entity - The WorkflowStepOption to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated WorkflowStepOption
     */
    async SaveWorkflowStepOption(entity, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveWorkflowStepOption", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_WorkflowStepOption_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Deletes the WorkflowStepOption
     * @param WorkflowStepOptionId - The id of the WorkflowStepOption to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    async DeleteWorkflowStepOption(WorkflowStepOptionId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteWorkflowStepOption?WorkflowStepOptionId=" + WorkflowStepOptionId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Set default values into a new WorkflowTrigger.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    async CreateDefaultWorkflowTrigger(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultWorkflowTrigger", null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_WorkflowTrigger_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing WorkflowTrigger or creates a new WorkflowTrigger if the id parameter is empty
     * @param entity - The WorkflowTrigger to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated WorkflowTrigger
     */
    async SaveWorkflowTrigger(entity, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveWorkflowTrigger", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_WorkflowTrigger_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Deletes the WorkflowTrigger
     * @param WorkflowTriggerId - The id of the WorkflowTrigger to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    async DeleteWorkflowTrigger(WorkflowTriggerId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteWorkflowTrigger?WorkflowTriggerId=" + WorkflowTriggerId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Gets a EmailFlow object.
     * @param emailFlowId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single EmailFlow
     */
    async GetEmailFlow(emailFlowId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetEmailFlow?emailFlowId=" + emailFlowId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_EmailFlow_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async _TryAddPersonsToEmailFlow(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("TryAddPersonsToEmailFlow", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async TryAddPersonsToEmailFlow(emailFlowId, personIds, webapi_options) {
        let _request = null;
        let _options = null;
        const first = emailFlowId;
        if (typeof (first) === "object" && first && (typeof (first.EmailFlowId) != 'undefined' || typeof (first.PersonIds) != 'undefined')) {
            _request = emailFlowId;
            _options = personIds;
        }
        else {
            _request = {
                EmailFlowId: emailFlowId,
                PersonIds: personIds,
            };
            _options = webapi_options;
        }
        return this._TryAddPersonsToEmailFlow(_request, _options);
    }
    async _CreateEmailFlowContent(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("CreateEmailFlowContent", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async CreateEmailFlowContent(contentName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = contentName;
        if (typeof (first) === "object" && first && (typeof (first.ContentName) != 'undefined')) {
            _request = contentName;
            _options = webapi_options;
        }
        else {
            _request = {
                ContentName: contentName,
            };
            _options = webapi_options;
        }
        return this._CreateEmailFlowContent(_request, _options);
    }
    async _ConnectEmailFlowContent(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ConnectEmailFlowContent", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async ConnectEmailFlowContent(emailFlowId, messageId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = emailFlowId;
        if (typeof (first) === "object" && first && (typeof (first.EmailFlowId) != 'undefined' || typeof (first.MessageId) != 'undefined')) {
            _request = emailFlowId;
            _options = messageId;
        }
        else {
            _request = {
                EmailFlowId: emailFlowId,
                MessageId: messageId,
            };
            _options = webapi_options;
        }
        return this._ConnectEmailFlowContent(_request, _options);
    }
    /*
     * Gets a WorkflowGoal object.
     * @param workflowGoalId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single WorkflowGoal
     */
    async GetWorkflowGoal(workflowGoalId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetWorkflowGoal?workflowGoalId=" + workflowGoalId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_WorkflowGoal_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async _GetWorkflowStep(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetWorkflowStep", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_WorkflowStepBase_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetWorkflowStep(workflowStepId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = workflowStepId;
        if (typeof (first) === "object" && first && (typeof (first.WorkflowStepId) != 'undefined')) {
            _request = workflowStepId;
            _options = webapi_options;
        }
        else {
            _request = {
                WorkflowStepId: workflowStepId,
            };
            _options = webapi_options;
        }
        return this._GetWorkflowStep(_request, _options);
    }
    async _AddAfterWorkflowStep(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("AddAfterWorkflowStep", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_WorkflowStepBase_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async AddAfterWorkflowStep(workflowStepId, subStep, webapi_options) {
        let _request = null;
        let _options = null;
        const first = workflowStepId;
        if (typeof (first) === "object" && first && (typeof (first.WorkflowStepId) != 'undefined' || typeof (first.SubStep) != 'undefined')) {
            _request = workflowStepId;
            _options = subStep;
        }
        else {
            _request = {
                WorkflowStepId: workflowStepId,
                SubStep: subStep,
            };
            _options = webapi_options;
        }
        return this._AddAfterWorkflowStep(_request, _options);
    }
    async _CreateDefaultWorkflowStepFromType(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("CreateDefaultWorkflowStepFromType", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_WorkflowStepBase_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async CreateDefaultWorkflowStepFromType(stepType, webapi_options) {
        let _request = null;
        let _options = null;
        const first = stepType;
        if (typeof (first) === "object" && first && (typeof (first.StepType) != 'undefined')) {
            _request = stepType;
            _options = webapi_options;
        }
        else {
            _request = {
                StepType: stepType,
            };
            _options = webapi_options;
        }
        return this._CreateDefaultWorkflowStepFromType(_request, _options);
    }
    /*
     * Gets a WorkflowStepOption object.
     * @param workflowStepOptionId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single WorkflowStepOption
     */
    async GetWorkflowStepOption(workflowStepOptionId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetWorkflowStepOption?workflowStepOptionId=" + workflowStepOptionId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_WorkflowStepOption_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Gets a WorkflowTrigger object.
     * @param workflowTriggerId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single WorkflowTrigger
     */
    async GetWorkflowTrigger(workflowTriggerId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetWorkflowTrigger?workflowTriggerId=" + workflowTriggerId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_WorkflowTrigger_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
} // class v1WorkflowAgentController 
exports.WorkflowAgent = WorkflowAgent;
//# sourceMappingURL=WorkflowAgent.js.map