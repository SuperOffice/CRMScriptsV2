import { AxiosRequestConfig } from 'axios';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Sale data services
 */
export interface ISaleAgent {
    CreateDefaultSaleEntity(): Promise<carriers.SaleEntity>;
    SaveSaleEntity(entity: carriers.SaleEntity): Promise<carriers.SaleEntity>;
    DeleteSaleEntity(SaleEntityId: number): Promise<void>;
    CreateDefaultSaleStakeholder(): Promise<carriers.SaleStakeholder>;
    SaveSaleStakeholder(entity: carriers.SaleStakeholder): Promise<carriers.SaleStakeholder>;
    DeleteSaleStakeholder(SaleStakeholderId: number): Promise<void>;
    CreateDefaultSaleSummary(): Promise<carriers.SaleSummary>;
    GetSale(saleId: number): Promise<carriers.Sale>;
    GetSaleEntity(saleEntityId: number): Promise<carriers.SaleEntity>;
    HasGuide(request: carriers.Sale_HasGuideRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    HasGuide(saleId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    GetNextDueDate(request: carriers.Sale_GetNextDueDateRequest, webapi_options?: base.WebApiRequestOptions): Promise<Date>;
    GetNextDueDate(saleId: number, webapi_options?: base.WebApiRequestOptions): Promise<Date>;
    BatchUpdateNextDueDate(webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetNextSaleStage(request: carriers.Sale_GetNextSaleStageRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    GetNextSaleStage(saleId: number, includeCurrentStage: boolean, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    HasGuideActivities(request: carriers.Sale_HasGuideActivitiesRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    HasGuideActivities(saleId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    OfferAutoNextStageOnApppointmentCompleted(request: carriers.Sale_OfferAutoNextStageOnApppointmentCompletedRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    OfferAutoNextStageOnApppointmentCompleted(appointmentId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    GetProbabilityFromStage(request: carriers.Sale_GetProbabilityFromStageRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    GetProbabilityFromStage(stageId: number, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    IsNumberValid(request: carriers.Sale_IsNumberValidRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    IsNumberValid(contactId: number, number: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    AddSaleStakeholders(request: carriers.Sale_AddSaleStakeholdersRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    AddSaleStakeholders(saleId: number, saleStakeholders: carriers.SaleStakeholder[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteSaleStakeholders(request: carriers.Sale_DeleteSaleStakeholdersRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteSaleStakeholders(saleStakeholderIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    HasStakeholderSetting(request: carriers.Sale_HasStakeholderSettingRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    HasStakeholderSetting(saleId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    ValidateSaleEntity(request: carriers.Sale_ValidateSaleEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    ValidateSaleEntity(saleEntity: carriers.SaleEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    GetSaleList(saleIds: number[]): Promise<carriers.Sale[]>;
    GetMyOpportunities(request: carriers.Sale_GetMyOpportunitiesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sale[]>;
    GetMyOpportunities(count: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sale[]>;
    GetRecentSales(request: carriers.Sale_GetRecentSalesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sale[]>;
    GetRecentSales(amountLimit: number, count: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sale[]>;
    GetUpcomingSales(request: carriers.Sale_GetUpcomingSalesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sale[]>;
    GetUpcomingSales(weightedAmountLimit: number, count: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sale[]>;
    GetSalesByDate(request: carriers.Sale_GetSalesByDateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sale[]>;
    GetSalesByDate(fromDate: Date, toDate: Date, amountLimit: number, status: enums.SaleStatus, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sale[]>;
    GetOpenSalesForContact(request: carriers.Sale_GetOpenSalesForContactRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sale[]>;
    GetOpenSalesForContact(contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sale[]>;
    SetAsSold(request: carriers.Sale_SetAsSoldRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetAsSold(saleIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetAsLost(request: carriers.Sale_SetAsLostRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetAsLost(saleIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetSalesFromContact(request: carriers.Sale_GetSalesFromContactRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sale[]>;
    GetSalesFromContact(contactId: number, onlyOpenSales: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sale[]>;
    GetSalesFromPerson(request: carriers.Sale_GetSalesFromPersonRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sale[]>;
    GetSalesFromPerson(personId: number, onlyOpenSales: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sale[]>;
    GetSaleStakeholder(saleStakeholderId: number): Promise<carriers.SaleStakeholder>;
    GetSaleStakeholderList(saleStakeholderIds: number[]): Promise<carriers.SaleStakeholder[]>;
    GetSaleStakeholders(request: carriers.Sale_GetSaleStakeholdersRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleStakeholder[]>;
    GetSaleStakeholders(saleId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleStakeholder[]>;
    UpdateSaleStakeholders(request: carriers.Sale_UpdateSaleStakeholdersRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleStakeholder[]>;
    UpdateSaleStakeholders(stakeholders: carriers.SaleStakeholder[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleStakeholder[]>;
    GetSaleStakeholderById(request: carriers.Sale_GetSaleStakeholderByIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleStakeholder[]>;
    GetSaleStakeholderById(saleStakeholderIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleStakeholder[]>;
    GetSummaryByAssociate(request: carriers.Sale_GetSummaryByAssociateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleSummary>;
    GetSummaryByAssociate(associateId: number, fromDate: Date, toDate: Date, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleSummary>;
    GetSummaryByGroup(request: carriers.Sale_GetSummaryByGroupRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleSummary>;
    GetSummaryByGroup(groupId: number, fromDate: Date, toDate: Date, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleSummary>;
    GetSummaryByContact(request: carriers.Sale_GetSummaryByContactRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleSummary>;
    GetSummaryByContact(contactId: number, fromDate: Date, toDate: Date, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleSummary>;
}
/**
 * Sale data services
 */
export declare class SaleAgent extends base.WebApiBase implements ISaleAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * Set default values into a new SaleEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultSaleEntity(options?: base.WebApiRequestOptions): Promise<carriers.SaleEntity>;
    SaveSaleEntity(entity: carriers.SaleEntity, options?: base.WebApiRequestOptions): Promise<carriers.SaleEntity>;
    DeleteSaleEntity(SaleEntityId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new SaleStakeholder.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultSaleStakeholder(options?: base.WebApiRequestOptions): Promise<carriers.SaleStakeholder>;
    SaveSaleStakeholder(entity: carriers.SaleStakeholder, options?: base.WebApiRequestOptions): Promise<carriers.SaleStakeholder>;
    DeleteSaleStakeholder(SaleStakeholderId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new SaleSummary.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultSaleSummary(options?: base.WebApiRequestOptions): Promise<carriers.SaleSummary>;
    GetSale(saleId: number, options?: base.WebApiRequestOptions): Promise<carriers.Sale>;
    GetSaleEntity(saleEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.SaleEntity>;
    private _HasGuide;
    /**
     * Does this sale have a sale guide associated with its sale type?
     * @param request - SaleId
     * @returns True if the sale has a guide
     */
    HasGuide(request: carriers.Sale_HasGuideRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Does this sale have a sale guide associated with its sale type?
     * @param saleId - Sale id
     * @returns True if the sale has a guide
     */
    HasGuide(saleId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _GetNextDueDate;
    /**
     * Gets the next due date for a sale. The next due date is the next future appointment that is not completed.
     * @param request - SaleId
     * @returns Next due date for the given sale.
     */
    GetNextDueDate(request: carriers.Sale_GetNextDueDateRequest, webapi_options?: base.WebApiRequestOptions): Promise<Date>;
    /**
     * Gets the next due date for a sale. The next due date is the next future appointment that is not completed.
     * @param saleId - Sale id
     * @returns Next due date for the given sale.
     */
    GetNextDueDate(saleId: number, webapi_options?: base.WebApiRequestOptions): Promise<Date>;
    private _BatchUpdateNextDueDate;
    /**
     * Re-calculate all the next due dates
     * @returns
     */
    BatchUpdateNextDueDate(webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetNextSaleStage;
    /**
     * Gets the next (not deleted) sale stage id if the current stage is deleted. If the current stage is not deleted, the CurrentStageId is returned
     * @param request - SaleId, IncludeCurrentStage
     * @returns
     */
    GetNextSaleStage(request: carriers.Sale_GetNextSaleStageRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Gets the next (not deleted) sale stage id if the current stage is deleted. If the current stage is not deleted, the CurrentStageId is returned
     * @param saleId -
     * @param includeCurrentStage -
     * @returns
     */
    GetNextSaleStage(saleId: number, includeCurrentStage: boolean, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _HasGuideActivities;
    /**
     *
     * @param request - SaleId
     * @returns
     */
    HasGuideActivities(request: carriers.Sale_HasGuideActivitiesRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     *
     * @param saleId -
     * @returns
     */
    HasGuideActivities(saleId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _OfferAutoNextStageOnApppointmentCompleted;
    /**
     *
     * @param request - AppointmentId
     * @returns
     */
    OfferAutoNextStageOnApppointmentCompleted(request: carriers.Sale_OfferAutoNextStageOnApppointmentCompletedRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     *
     * @param appointmentId -
     * @returns
     */
    OfferAutoNextStageOnApppointmentCompleted(appointmentId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _GetProbabilityFromStage;
    /**
     * Get the probability percentage for a given sale stage
     * @param request - StageId
     * @returns Probability percentage
     */
    GetProbabilityFromStage(request: carriers.Sale_GetProbabilityFromStageRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Get the probability percentage for a given sale stage
     * @param stageId - Probability list id
     * @returns Probability percentage
     */
    GetProbabilityFromStage(stageId: number, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _IsNumberValid;
    /**
     * Checks if the number is unique or required.  The setting is configured from admin under system options.
     * @param request - ContactId, Number
     * @returns True if the number is valid
     */
    IsNumberValid(request: carriers.Sale_IsNumberValidRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Checks if the number is unique or required.  The setting is configured from admin under system options.
     * @param contactId - SaleId
     * @param number - Number value to check for uniqueness/required
     * @returns True if the number is valid
     */
    IsNumberValid(contactId: number, number: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _AddSaleStakeholders;
    /**
     *
     * @param request - SaleId, SaleStakeholders
     * @returns
     */
    AddSaleStakeholders(request: carriers.Sale_AddSaleStakeholdersRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     *
     * @param saleId -
     * @param saleStakeholders -
     * @returns
     */
    AddSaleStakeholders(saleId: number, saleStakeholders: carriers.SaleStakeholder[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _DeleteSaleStakeholders;
    /**
     *
     * @param request - SaleStakeholderIds
     * @returns
     */
    DeleteSaleStakeholders(request: carriers.Sale_DeleteSaleStakeholdersRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     *
     * @param saleStakeholderIds -
     * @returns
     */
    DeleteSaleStakeholders(saleStakeholderIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _HasStakeholderSetting;
    /**
     *
     * @param request - SaleId
     * @returns
     */
    HasStakeholderSetting(request: carriers.Sale_HasStakeholderSettingRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     *
     * @param saleId -
     * @returns
     */
    HasStakeholderSetting(saleId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _ValidateSaleEntity;
    /**
     * Check that entity is ready for saving, return error messages by field.
     * @param request - SaleEntity
     * @returns Error messages tagged by field.
     */
    ValidateSaleEntity(request: carriers.Sale_ValidateSaleEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    /**
     * Check that entity is ready for saving, return error messages by field.
     * @param saleEntity - Entity to be checked for errors.
     * @returns Error messages tagged by field.
     */
    ValidateSaleEntity(saleEntity: carriers.SaleEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    GetSaleList(saleIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.Sale[]>;
    private _GetMyOpportunities;
    /**
     * Returning the opportunities (open sales) belonging to the user currently logged on
     * @param request - Count
     * @returns Array of open sales (opportunities).
     */
    GetMyOpportunities(request: carriers.Sale_GetMyOpportunitiesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sale[]>;
    /**
     * Returning the opportunities (open sales) belonging to the user currently logged on
     * @param count - The number of sales that is returned. -1 returns all.
     * @returns Array of open sales (opportunities).
     */
    GetMyOpportunities(count: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sale[]>;
    private _GetRecentSales;
    /**
     * Returns the latest sales (that are sold) limited by their amount. The result is sorted descending with the latest first. If the amount is -1, the amount restriction is omitted.
     * @param request - AmountLimit, Count
     * @returns Array of all recent sales.
     */
    GetRecentSales(request: carriers.Sale_GetRecentSalesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sale[]>;
    /**
     * Returns the latest sales (that are sold) limited by their amount. The result is sorted descending with the latest first. If the amount is -1, the amount restriction is omitted.
     * @param amountLimit - The amount limit in the local currency.
     * @param count - The maximum number of items to return. If -1 all are returned.
     * @returns Array of all recent sales.
     */
    GetRecentSales(amountLimit: number, count: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sale[]>;
    private _GetUpcomingSales;
    /**
     * Returns all open sales, sorted descending with the latest first.  If the weigthed amount is -1, the amount restriction is omitted.
     * @param request - WeightedAmountLimit, Count
     * @returns Array of upcoming sales.
     */
    GetUpcomingSales(request: carriers.Sale_GetUpcomingSalesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sale[]>;
    /**
     * Returns all open sales, sorted descending with the latest first.  If the weigthed amount is -1, the amount restriction is omitted.
     * @param weightedAmountLimit - The amount weighted by the probability that the sale is closed (amount * probability).
     * @param count - The maximum number of items to return. If -1 all are returned.
     * @returns Array of upcoming sales.
     */
    GetUpcomingSales(weightedAmountLimit: number, count: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sale[]>;
    private _GetSalesByDate;
    /**
     * Returns all sales within a time period. The sales array can be limited by amount and status.
     * @param request - FromDate, ToDate, AmountLimit, Status
     * @returns Array of sales.
     */
    GetSalesByDate(request: carriers.Sale_GetSalesByDateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sale[]>;
    /**
     * Returns all sales within a time period. The sales array can be limited by amount and status.
     * @param fromDate - The beginning of the time interval.
     * @param toDate - The end of the time interval.
     * @param amountLimit - The amount limit in the local currency.  -1 means no amount limit
     * @param status - The sale status (Lost, Open, Sold, Unknown). SaleStatus.Unknown means no status filtering.
     * @returns Array of sales.
     */
    GetSalesByDate(fromDate: Date, toDate: Date, amountLimit: number, status: enums.SaleStatus, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sale[]>;
    private _GetOpenSalesForContact;
    /**
     * Returns all open sales for the contact provided.
     * @param request - ContactId
     * @returns Aray of sales.
     */
    GetOpenSalesForContact(request: carriers.Sale_GetOpenSalesForContactRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sale[]>;
    /**
     * Returns all open sales for the contact provided.
     * @param contactId - The ID of the contact whose sales we want.
     * @returns Aray of sales.
     */
    GetOpenSalesForContact(contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sale[]>;
    private _SetAsSold;
    /**
     * Change the status of one or more Sales to Sold. Note that this does not mark them as Completed.
     * @param request - SaleIds
     * @returns
     */
    SetAsSold(request: carriers.Sale_SetAsSoldRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Change the status of one or more Sales to Sold. Note that this does not mark them as Completed.
     * @param saleIds - Array of sale ids to be marked as lost. All the normal write access rules apply.
     * @returns
     */
    SetAsSold(saleIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SetAsLost;
    /**
     * Change the status of one or more sales to Lost. Note that this does not affect the Completed state of the sale.
     * @param request - SaleIds
     * @returns
     */
    SetAsLost(request: carriers.Sale_SetAsLostRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Change the status of one or more sales to Lost. Note that this does not affect the Completed state of the sale.
     * @param saleIds - Array of sale ids to be marked as lost. All normal write access rules apply.
     * @returns
     */
    SetAsLost(saleIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetSalesFromContact;
    /**
     * Returns all sales for the contact provided.
     * @param request - ContactId, OnlyOpenSales
     * @returns List of sales matching query
     */
    GetSalesFromContact(request: carriers.Sale_GetSalesFromContactRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sale[]>;
    /**
     * Returns all sales for the contact provided.
     * @param contactId - The ID of the contact whose sales we want.
     * @param onlyOpenSales - If true, only get open sales.
     * @returns List of sales matching query
     */
    GetSalesFromContact(contactId: number, onlyOpenSales: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sale[]>;
    private _GetSalesFromPerson;
    /**
     * Returns all sales for the person provided.
     * @param request - PersonId, OnlyOpenSales
     * @returns List of sales matching query
     */
    GetSalesFromPerson(request: carriers.Sale_GetSalesFromPersonRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sale[]>;
    /**
     * Returns all sales for the person provided.
     * @param personId - The ID of the person whose sales we want.
     * @param onlyOpenSales - If true, only get open sales.
     * @returns List of sales matching query
     */
    GetSalesFromPerson(personId: number, onlyOpenSales: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sale[]>;
    GetSaleStakeholder(saleStakeholderId: number, options?: base.WebApiRequestOptions): Promise<carriers.SaleStakeholder>;
    GetSaleStakeholderList(saleStakeholderIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.SaleStakeholder[]>;
    private _GetSaleStakeholders;
    /**
     *
     * @param request - SaleId
     * @returns
     */
    GetSaleStakeholders(request: carriers.Sale_GetSaleStakeholdersRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleStakeholder[]>;
    /**
     *
     * @param saleId -
     * @returns
     */
    GetSaleStakeholders(saleId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleStakeholder[]>;
    private _UpdateSaleStakeholders;
    /**
     *
     * @param request - Stakeholders
     * @returns
     */
    UpdateSaleStakeholders(request: carriers.Sale_UpdateSaleStakeholdersRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleStakeholder[]>;
    /**
     *
     * @param stakeholders -
     * @returns
     */
    UpdateSaleStakeholders(stakeholders: carriers.SaleStakeholder[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleStakeholder[]>;
    private _GetSaleStakeholderById;
    /**
     *
     * @param request - SaleStakeholderIds
     * @returns
     */
    GetSaleStakeholderById(request: carriers.Sale_GetSaleStakeholderByIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleStakeholder[]>;
    /**
     *
     * @param saleStakeholderIds -
     * @returns
     */
    GetSaleStakeholderById(saleStakeholderIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleStakeholder[]>;
    private _GetSummaryByAssociate;
    /**
     *
     * @param request - AssociateId, FromDate, ToDate
     * @returns
     */
    GetSummaryByAssociate(request: carriers.Sale_GetSummaryByAssociateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleSummary>;
    /**
     *
     * @param associateId -
     * @param fromDate -
     * @param toDate -
     * @returns
     */
    GetSummaryByAssociate(associateId: number, fromDate: Date, toDate: Date, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleSummary>;
    private _GetSummaryByGroup;
    /**
     *
     * @param request - GroupId, FromDate, ToDate
     * @returns
     */
    GetSummaryByGroup(request: carriers.Sale_GetSummaryByGroupRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleSummary>;
    /**
     *
     * @param groupId -
     * @param fromDate -
     * @param toDate -
     * @returns
     */
    GetSummaryByGroup(groupId: number, fromDate: Date, toDate: Date, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleSummary>;
    private _GetSummaryByContact;
    /**
     *
     * @param request - ContactId, FromDate, ToDate
     * @returns
     */
    GetSummaryByContact(request: carriers.Sale_GetSummaryByContactRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleSummary>;
    /**
     *
     * @param contactId -
     * @param fromDate -
     * @param toDate -
     * @returns
     */
    GetSummaryByContact(contactId: number, fromDate: Date, toDate: Date, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaleSummary>;
}
//# sourceMappingURL=SaleAgent.d.ts.map