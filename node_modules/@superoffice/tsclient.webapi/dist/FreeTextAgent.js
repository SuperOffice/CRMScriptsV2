"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.FreeTextAgent = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
/**
 * This agent can be used to manage the free text system
 */
class FreeTextAgent extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/FreeText/";
        super(options);
    }
    async _GetStatus(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetStatus", undefined, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_FreeText_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Returns status for the freetext search words
     * @returns The freetext status
     */
    async GetStatus(webapi_options) {
        return this._GetStatus(webapi_options);
    }
    async _SetEnabled(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetEnabled", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SetEnabled(enabled, webapi_options) {
        let _request = null;
        let _options = null;
        const first = enabled;
        if (typeof (first) === "object" && first && (typeof (first.Enabled) != 'undefined')) {
            _request = enabled;
            _options = webapi_options;
        }
        else {
            _request = {
                Enabled: enabled,
            };
            _options = webapi_options;
        }
        return this._SetEnabled(_request, _options);
    }
    async _SetAutoEnableTravelAreas(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetAutoEnableTravelAreas", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SetAutoEnableTravelAreas(autoEnable, webapi_options) {
        let _request = null;
        let _options = null;
        const first = autoEnable;
        if (typeof (first) === "object" && first && (typeof (first.AutoEnable) != 'undefined')) {
            _request = autoEnable;
            _options = webapi_options;
        }
        else {
            _request = {
                AutoEnable: autoEnable,
            };
            _options = webapi_options;
        }
        return this._SetAutoEnableTravelAreas(_request, _options);
    }
    async _SetSingleWordOperator(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetSingleWordOperator", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SetSingleWordOperator(freeTextOperator, webapi_options) {
        let _request = null;
        let _options = null;
        const first = freeTextOperator;
        if (typeof (first) === "object" && first && (typeof (first.FreeTextOperator) != 'undefined')) {
            _request = freeTextOperator;
            _options = webapi_options;
        }
        else {
            _request = {
                FreeTextOperator: freeTextOperator,
            };
            _options = webapi_options;
        }
        return this._SetSingleWordOperator(_request, _options);
    }
    async _SetMultiWordOperator(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetMultiWordOperator", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SetMultiWordOperator(freeTextOperator, webapi_options) {
        let _request = null;
        let _options = null;
        const first = freeTextOperator;
        if (typeof (first) === "object" && first && (typeof (first.FreeTextOperator) != 'undefined')) {
            _request = freeTextOperator;
            _options = webapi_options;
        }
        else {
            _request = {
                FreeTextOperator: freeTextOperator,
            };
            _options = webapi_options;
        }
        return this._SetMultiWordOperator(_request, _options);
    }
    async _GetStopWordList(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetStopWordList", undefined, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Returns the list of stop words
     * @returns The list of stop words
     */
    async GetStopWordList(webapi_options) {
        return this._GetStopWordList(webapi_options);
    }
    async _AddWords(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("AddWords", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async AddWords(stopWords, webapi_options) {
        let _request = null;
        let _options = null;
        const first = stopWords;
        if (typeof (first) === "object" && first && (typeof (first.StopWords) != 'undefined')) {
            _request = stopWords;
            _options = webapi_options;
        }
        else {
            _request = {
                StopWords: stopWords,
            };
            _options = webapi_options;
        }
        return this._AddWords(_request, _options);
    }
    async _DeleteStopWordsById(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("DeleteStopWordsById", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async DeleteStopWordsById(stopWordIds, webapi_options) {
        let _request = null;
        let _options = null;
        const first = stopWordIds;
        if (typeof (first) === "object" && first && (typeof (first.StopWordIds) != 'undefined')) {
            _request = stopWordIds;
            _options = webapi_options;
        }
        else {
            _request = {
                StopWordIds: stopWordIds,
            };
            _options = webapi_options;
        }
        return this._DeleteStopWordsById(_request, _options);
    }
    async _GetSuggestedStopWords(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetSuggestedStopWords", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_MDOListItemArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetSuggestedStopWords(countWords, webapi_options) {
        let _request = null;
        let _options = null;
        const first = countWords;
        if (typeof (first) === "object" && first && (typeof (first.CountWords) != 'undefined')) {
            _request = countWords;
            _options = webapi_options;
        }
        else {
            _request = {
                CountWords: countWords,
            };
            _options = webapi_options;
        }
        return this._GetSuggestedStopWords(_request, _options);
    }
    async _RegenerateIndex(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("RegenerateIndex", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_BatchTaskInfo_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async RegenerateIndex(runAsBatch, webapi_options) {
        let _request = null;
        let _options = null;
        const first = runAsBatch;
        if (typeof (first) === "object" && first && (typeof (first.RunAsBatch) != 'undefined')) {
            _request = runAsBatch;
            _options = webapi_options;
        }
        else {
            _request = {
                RunAsBatch: runAsBatch,
            };
            _options = webapi_options;
        }
        return this._RegenerateIndex(_request, _options);
    }
    async _FreetextIndexRows(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("FreetextIndexRows", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async FreetextIndexRows(tableName, iDs, webapi_options) {
        let _request = null;
        let _options = null;
        const first = tableName;
        if (typeof (first) === "object" && first && (typeof (first.TableName) != 'undefined' || typeof (first.IDs) != 'undefined')) {
            _request = tableName;
            _options = iDs;
        }
        else {
            _request = {
                TableName: tableName,
                IDs: iDs,
            };
            _options = webapi_options;
        }
        return this._FreetextIndexRows(_request, _options);
    }
} // class v1FreeTextAgentController 
exports.FreeTextAgent = FreeTextAgent;
//# sourceMappingURL=FreeTextAgent.js.map