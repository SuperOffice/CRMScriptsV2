"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationAgent = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
/**
 * Contact/Person relations
 */
class RelationAgent extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Relation/";
        super(options);
    }
    /**
     * Set default values into a new ContactRelationEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    async CreateDefaultContactRelationEntity(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultContactRelationEntity", null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ContactRelationEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Gets a ContactRelationEntity object.
     * @param contactRelationEntityId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single ContactRelationEntity
     */
    async GetContactRelationEntity(contactRelationEntityId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetContactRelationEntity?contactRelationEntityId=" + contactRelationEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ContactRelationEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async _SaveContactRelation(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SaveContactRelation", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ContactRelationEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SaveContactRelation(contactRelationEntity, webapi_options) {
        let _request = null;
        let _options = null;
        const first = contactRelationEntity;
        if (typeof (first) === "object" && first && (typeof (first.ContactRelationEntity) != 'undefined')) {
            _request = contactRelationEntity;
            _options = webapi_options;
        }
        else {
            _request = {
                ContactRelationEntity: contactRelationEntity,
            };
            _options = webapi_options;
        }
        return this._SaveContactRelation(_request, _options);
    }
    async _DeleteContactRelation(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("DeleteContactRelation", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async DeleteContactRelation(contactRelationEntityId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = contactRelationEntityId;
        if (typeof (first) === "object" && first && (typeof (first.ContactRelationEntityId) != 'undefined')) {
            _request = contactRelationEntityId;
            _options = webapi_options;
        }
        else {
            _request = {
                ContactRelationEntityId: contactRelationEntityId,
            };
            _options = webapi_options;
        }
        return this._DeleteContactRelation(_request, _options);
    }
} // class v1RelationAgentController 
exports.RelationAgent = RelationAgent;
//# sourceMappingURL=RelationAgent.js.map