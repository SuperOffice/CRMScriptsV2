import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Replication/Travel administration
 *
 * **Online Restricted:** This agent is not available in Online by default. Not available in Online. Only used on-site.
 */
export interface IReplicationAgent {
    CreateDefaultSatellite(): Promise<carriers.Satellite>;
    SaveSatellite(entity: carriers.Satellite): Promise<carriers.Satellite>;
    GetArea(areaId: number): Promise<carriers.Area>;
    SetFreetextSearchEnabledOnArea(request: carriers.Replication_SetFreetextSearchEnabledOnAreaRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetFreetextSearchEnabledOnArea(areaId: number, freetextEnabled: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetAreaList(areaIds: number[]): Promise<carriers.Area[]>;
    GetSatellite(satelliteId: number): Promise<carriers.Satellite>;
    GetCentralLicense(webapi_options?: base.WebApiRequestOptions): Promise<carriers.LicenseOwner[]>;
    SaveCentralLicense(request: carriers.Replication_SaveCentralLicenseRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LicenseOwner[]>;
    SaveCentralLicense(license: carriers.LicenseOwner[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.LicenseOwner[]>;
}
/**
 * Replication/Travel administration
 */
export declare class ReplicationAgent extends base.WebApiBase implements IReplicationAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * Set default values into a new Satellite.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultSatellite(options?: base.WebApiRequestOptions): Promise<carriers.Satellite>;
    SaveSatellite(entity: carriers.Satellite, options?: base.WebApiRequestOptions): Promise<carriers.Satellite>;
    GetArea(areaId: number, options?: base.WebApiRequestOptions): Promise<carriers.Area>;
    private _SetFreetextSearchEnabledOnArea;
    /**
     * Enable freetext search on this area
     * @param request - AreaId, FreetextEnabled
     * @returns No return value
     */
    SetFreetextSearchEnabledOnArea(request: carriers.Replication_SetFreetextSearchEnabledOnAreaRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Enable freetext search on this area
     * @param areaId - The id of the area
     * @param freetextEnabled - True if freetextSearch on this area shall be enabled
     * @returns No return value
     */
    SetFreetextSearchEnabledOnArea(areaId: number, freetextEnabled: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetAreaList(areaIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.Area[]>;
    GetSatellite(satelliteId: number, options?: base.WebApiRequestOptions): Promise<carriers.Satellite>;
    private _GetCentralLicense;
    /**
     *
     * @returns
     */
    GetCentralLicense(webapi_options?: base.WebApiRequestOptions): Promise<carriers.LicenseOwner[]>;
    private _SaveCentralLicense;
    /**
     *
     * @param request - License
     * @returns
     */
    SaveCentralLicense(request: carriers.Replication_SaveCentralLicenseRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LicenseOwner[]>;
    /**
     *
     * @param license -
     * @returns
     */
    SaveCentralLicense(license: carriers.LicenseOwner[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.LicenseOwner[]>;
}
//# sourceMappingURL=ReplicationAgent.d.ts.map