import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Agent lets you configure dashboard tiles and retrieve dashboard data
 */
export interface IDashboardAgent {
    CreateDefaultDashboard(): Promise<carriers.Dashboard>;
    SaveDashboard(entity: carriers.Dashboard): Promise<carriers.Dashboard>;
    DeleteDashboard(DashboardId: number): Promise<void>;
    CreateDefaultDashboardTile(): Promise<carriers.DashboardTile>;
    SaveDashboardTile(entity: carriers.DashboardTile): Promise<carriers.DashboardTile>;
    DeleteDashboardTile(DashboardTileId: number): Promise<void>;
    GetDashboard(dashboardId: number): Promise<carriers.Dashboard>;
    GetDashboards(request: carriers.Dashboard_GetDashboardsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Dashboard[]>;
    GetDashboards(associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Dashboard[]>;
    SetTile(request: carriers.Dashboard_SetTileRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Dashboard>;
    SetTile(dashboardId: number, tileId: number, position: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Dashboard>;
    GetDashboardTile(dashboardTileId: number): Promise<carriers.DashboardTile>;
    GetDashboardTiles(request: carriers.Dashboard_GetDashboardTilesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashboardTile[]>;
    GetDashboardTiles(dashboardTileIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashboardTile[]>;
    GetStandardDashboardTileFromChartId(request: carriers.Dashboard_GetStandardDashboardTileFromChartIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashboardTile>;
    GetStandardDashboardTileFromChartId(chartId: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashboardTile>;
    GetData(request: carriers.Dashboard_GetDataRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TileData[]>;
    GetData(dashboardTileId: number, restrictions: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TileData[]>;
    CreateNewFromTemplate(request: carriers.Dashboard_CreateNewFromTemplateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashboardTile>;
    CreateNewFromTemplate(dashboardTileId: number, caption: string, description: string, selectionId: number, visibleFor: carriers.VisibleFor[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashboardTile>;
    GetDataWithSelection(request: carriers.Dashboard_GetDataWithSelectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TileData[]>;
    GetDataWithSelection(dashboardTileId: number, selectionId: number, restrictions: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TileData[]>;
}
/**
 * Agent lets you configure dashboard tiles and retrieve dashboard data
 */
export declare class DashboardAgent extends base.WebApiBase implements IDashboardAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * Set default values into a new Dashboard.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultDashboard(options?: base.WebApiRequestOptions): Promise<carriers.Dashboard>;
    SaveDashboard(entity: carriers.Dashboard, options?: base.WebApiRequestOptions): Promise<carriers.Dashboard>;
    DeleteDashboard(DashboardId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new DashboardTile.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultDashboardTile(options?: base.WebApiRequestOptions): Promise<carriers.DashboardTile>;
    SaveDashboardTile(entity: carriers.DashboardTile, options?: base.WebApiRequestOptions): Promise<carriers.DashboardTile>;
    DeleteDashboardTile(DashboardTileId: number, options?: base.WebApiRequestOptions): Promise<void>;
    GetDashboard(dashboardId: number, options?: base.WebApiRequestOptions): Promise<carriers.Dashboard>;
    private _GetDashboards;
    /**
     * Gets all dashboards for an associate
     * @param request - AssociateId
     * @returns All the users dashboards
     */
    GetDashboards(request: carriers.Dashboard_GetDashboardsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Dashboard[]>;
    /**
     * Gets all dashboards for an associate
     * @param associateId - Associate Id
     * @returns All the users dashboards
     */
    GetDashboards(associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Dashboard[]>;
    private _SetTile;
    /**
     * Sets tile in the given dashboard position
     * @param request - DashboardId, TileId, Position
     * @returns The new dashboard is returned after the tile change
     */
    SetTile(request: carriers.Dashboard_SetTileRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Dashboard>;
    /**
     * Sets tile in the given dashboard position
     * @param dashboardId - Dashboard Id
     * @param tileId - Tile Id
     * @param position - Tile position in the dashboard
     * @returns The new dashboard is returned after the tile change
     */
    SetTile(dashboardId: number, tileId: number, position: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Dashboard>;
    GetDashboardTile(dashboardTileId: number, options?: base.WebApiRequestOptions): Promise<carriers.DashboardTile>;
    private _GetDashboardTiles;
    /**
     * Gets an array of dashboard tiles for the provided ids
     * @param request - DashboardTileIds
     * @returns Dashboard tiles
     */
    GetDashboardTiles(request: carriers.Dashboard_GetDashboardTilesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashboardTile[]>;
    /**
     * Gets an array of dashboard tiles for the provided ids
     * @param dashboardTileIds - The ids of the tiles to get
     * @returns Dashboard tiles
     */
    GetDashboardTiles(dashboardTileIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashboardTile[]>;
    private _GetStandardDashboardTileFromChartId;
    /**
     * Gets the standard tile (not personal tile) corresponding to the given chart id
     * @param request - ChartId
     * @returns Standard tile
     */
    GetStandardDashboardTileFromChartId(request: carriers.Dashboard_GetStandardDashboardTileFromChartIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashboardTile>;
    /**
     * Gets the standard tile (not personal tile) corresponding to the given chart id
     * @param chartId - The ChartId of the wanted chart/tile
     * @returns Standard tile
     */
    GetStandardDashboardTileFromChartId(chartId: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashboardTile>;
    private _GetData;
    /**
     * Get data for this tile
     * @param request - DashboardTileId, Restrictions
     * @returns The data
     */
    GetData(request: carriers.Dashboard_GetDataRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TileData[]>;
    /**
     * Get data for this tile
     * @param dashboardTileId - Tile Id
     * @param restrictions - Replacement restrictions
     * @returns The data
     */
    GetData(dashboardTileId: number, restrictions: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TileData[]>;
    private _CreateNewFromTemplate;
    /**
     * Create new tile from another tile used as template
     * @param request - DashboardTileId, Caption, Description, SelectionId, VisibleFor
     * @returns The new tile
     */
    CreateNewFromTemplate(request: carriers.Dashboard_CreateNewFromTemplateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashboardTile>;
    /**
     * Create new tile from another tile used as template
     * @param dashboardTileId - Tile template Id
     * @param caption - Caption of new tile
     * @param description - Description of new tile
     * @param selectionId - Selection id of new tile
     * @param visibleFor - Who the tile should be visible for
     * @returns The new tile
     */
    CreateNewFromTemplate(dashboardTileId: number, caption: string, description: string, selectionId: number, visibleFor: carriers.VisibleFor[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashboardTile>;
    private _GetDataWithSelection;
    /**
     * Get data for this tile
     * @param request - DashboardTileId, SelectionId, Restrictions
     * @returns The data
     */
    GetDataWithSelection(request: carriers.Dashboard_GetDataWithSelectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TileData[]>;
    /**
     * Get data for this tile
     * @param dashboardTileId - Tile Id
     * @param selectionId - Selection Id
     * @param restrictions - Replacement restrictions
     * @returns The data
     */
    GetDataWithSelection(dashboardTileId: number, selectionId: number, restrictions: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TileData[]>;
}
//# sourceMappingURL=DashboardAgent.d.ts.map