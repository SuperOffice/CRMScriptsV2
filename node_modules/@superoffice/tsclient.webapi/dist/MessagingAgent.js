"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessagingAgent = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
/**
 * SMS and other external messaging systems
 */
class MessagingAgent extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Messaging/";
        super(options);
    }
    async _CreateMessage(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("CreateMessage", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async CreateMessage(incomingMessage, webapi_options) {
        let _request = null;
        let _options = null;
        const first = incomingMessage;
        if (typeof (first) === "object" && first && (typeof (first.IncomingMessage) != 'undefined')) {
            _request = incomingMessage;
            _options = webapi_options;
        }
        else {
            _request = {
                IncomingMessage: incomingMessage,
            };
            _options = webapi_options;
        }
        return this._CreateMessage(_request, _options);
    }
    async _GetDeliveryStatus(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetDeliveryStatus", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_MessageDeliveryStatusArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetDeliveryStatus(messagingIds, webapi_options) {
        let _request = null;
        let _options = null;
        const first = messagingIds;
        if (typeof (first) === "object" && first && (typeof (first.MessagingIds) != 'undefined')) {
            _request = messagingIds;
            _options = webapi_options;
        }
        else {
            _request = {
                MessagingIds: messagingIds,
            };
            _options = webapi_options;
        }
        return this._GetDeliveryStatus(_request, _options);
    }
    async _SetDeliveryStatus(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetDeliveryStatus", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SetDeliveryStatus(plugin, externalMessageId, status, statusDescription, webapi_options) {
        let _request = null;
        let _options = null;
        const first = plugin;
        if (typeof (first) === "object" && first && (typeof (first.Plugin) != 'undefined' || typeof (first.ExternalMessageId) != 'undefined' || typeof (first.Status) != 'undefined' || typeof (first.StatusDescription) != 'undefined')) {
            _request = plugin;
            _options = externalMessageId;
        }
        else {
            _request = {
                Plugin: plugin,
                ExternalMessageId: externalMessageId,
                Status: status,
                StatusDescription: statusDescription,
            };
            _options = webapi_options;
        }
        return this._SetDeliveryStatus(_request, _options);
    }
    async _SendMessages(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SendMessages", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_MessageDeliveryStatusArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SendMessages(plugin, outgoingMessages, webapi_options) {
        let _request = null;
        let _options = null;
        const first = plugin;
        if (typeof (first) === "object" && first && (typeof (first.Plugin) != 'undefined' || typeof (first.OutgoingMessages) != 'undefined')) {
            _request = plugin;
            _options = outgoingMessages;
        }
        else {
            _request = {
                Plugin: plugin,
                OutgoingMessages: outgoingMessages,
            };
            _options = webapi_options;
        }
        return this._SendMessages(_request, _options);
    }
    async _SendMessagesWithConfig(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SendMessagesWithConfig", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_MessageDeliveryStatusArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SendMessagesWithConfig(plugin, outgoingMessages, config, webapi_options) {
        let _request = null;
        let _options = null;
        const first = plugin;
        if (typeof (first) === "object" && first && (typeof (first.Plugin) != 'undefined' || typeof (first.OutgoingMessages) != 'undefined' || typeof (first.Config) != 'undefined')) {
            _request = plugin;
            _options = outgoingMessages;
        }
        else {
            _request = {
                Plugin: plugin,
                OutgoingMessages: outgoingMessages,
                Config: config,
            };
            _options = webapi_options;
        }
        return this._SendMessagesWithConfig(_request, _options);
    }
    async _GetPlugins(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetPlugins", undefined, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ProviderInfoArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     *
     * @returns
     */
    async GetPlugins(webapi_options) {
        return this._GetPlugins(webapi_options);
    }
} // class v1MessagingAgentController 
exports.MessagingAgent = MessagingAgent;
//# sourceMappingURL=MessagingAgent.js.map