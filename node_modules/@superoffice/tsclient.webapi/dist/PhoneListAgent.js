"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.PhoneListAgent = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
/**
 * Collection of all services for searching for person or contact (company) phone numbers.
 */
class PhoneListAgent extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/PhoneList/";
        super(options);
    }
    async _Search(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("Search", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_PhoneListItemArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async Search(searchString, webapi_options) {
        let _request = null;
        let _options = null;
        const first = searchString;
        if (typeof (first) === "object" && first && (typeof (first.SearchString) != 'undefined')) {
            _request = searchString;
            _options = webapi_options;
        }
        else {
            _request = {
                SearchString: searchString,
            };
            _options = webapi_options;
        }
        return this._Search(_request, _options);
    }
    async _SearchWithPreferences(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SearchWithPreferences", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_PhoneListItemArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SearchWithPreferences(searchString, preferences, webapi_options) {
        let _request = null;
        let _options = null;
        const first = searchString;
        if (typeof (first) === "object" && first && (typeof (first.SearchString) != 'undefined' || typeof (first.Preferences) != 'undefined')) {
            _request = searchString;
            _options = preferences;
        }
        else {
            _request = {
                SearchString: searchString,
                Preferences: preferences,
            };
            _options = webapi_options;
        }
        return this._SearchWithPreferences(_request, _options);
    }
    async _GetDepartmentPhones(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetDepartmentPhones", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_PhoneListItemArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetDepartmentPhones(departmentId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = departmentId;
        if (typeof (first) === "object" && first && (typeof (first.DepartmentId) != 'undefined')) {
            _request = departmentId;
            _options = webapi_options;
        }
        else {
            _request = {
                DepartmentId: departmentId,
            };
            _options = webapi_options;
        }
        return this._GetDepartmentPhones(_request, _options);
    }
    async _GetFavoritesPhones(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetFavoritesPhones", undefined, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_PhoneListItemArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Returns an array of phone list items with the Contacts in the users favorites dropdown list.
     * @returns The favorite contact phone list
     */
    async GetFavoritesPhones(webapi_options) {
        return this._GetFavoritesPhones(webapi_options);
    }
    async _GetContactPhones(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetContactPhones", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_PhoneListItemArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetContactPhones(contactId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = contactId;
        if (typeof (first) === "object" && first && (typeof (first.ContactId) != 'undefined')) {
            _request = contactId;
            _options = webapi_options;
        }
        else {
            _request = {
                ContactId: contactId,
            };
            _options = webapi_options;
        }
        return this._GetContactPhones(_request, _options);
    }
    async _AddToFavorites(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("AddToFavorites", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async AddToFavorites(contactId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = contactId;
        if (typeof (first) === "object" && first && (typeof (first.ContactId) != 'undefined')) {
            _request = contactId;
            _options = webapi_options;
        }
        else {
            _request = {
                ContactId: contactId,
            };
            _options = webapi_options;
        }
        return this._AddToFavorites(_request, _options);
    }
    async _GetPreferences(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetPreferences", undefined, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_PhoneListPreferences_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Getting Phone List Preferences from the CRM 5 user preferences
     * @returns The Phone List Preferences
     */
    async GetPreferences(webapi_options) {
        return this._GetPreferences(webapi_options);
    }
    async _SetPreferences(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetPreferences", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SetPreferences(preferences, webapi_options) {
        let _request = null;
        let _options = null;
        const first = preferences;
        if (typeof (first) === "object" && first && (typeof (first.Preferences) != 'undefined')) {
            _request = preferences;
            _options = webapi_options;
        }
        else {
            _request = {
                Preferences: preferences,
            };
            _options = webapi_options;
        }
        return this._SetPreferences(_request, _options);
    }
} // class v1PhoneListAgentController 
exports.PhoneListAgent = PhoneListAgent;
//# sourceMappingURL=PhoneListAgent.js.map