import { AxiosRequestConfig } from 'axios';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Start, stop and monitor predefined batch tasks
 */
export interface IBatchAgent {
    GetBatchTaskInfo(request: carriers.Batch_GetBatchTaskInfoRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo>;
    GetBatchTaskInfo(id: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo>;
    GetBatchTaskInfosByAssociates(request: carriers.Batch_GetBatchTaskInfosByAssociatesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    GetBatchTaskInfosByAssociates(associateIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    StartBatchJob(request: carriers.Batch_StartBatchJobRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    StartBatchJob(batchTaskInfo: carriers.BatchTaskInfo, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    StopBatchJob(request: carriers.Batch_StopBatchJobRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    StopBatchJob(id: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    GetBatchTaskInfosByState(request: carriers.Batch_GetBatchTaskInfosByStateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    GetBatchTaskInfosByState(state: enums.BatchTaskState, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    UpdateBatchTask(request: carriers.Batch_UpdateBatchTaskRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo>;
    UpdateBatchTask(batchTaskInfo: carriers.BatchTaskInfo, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo>;
    GetBatchTaskInfosByNameAndState(request: carriers.Batch_GetBatchTaskInfosByNameAndStateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    GetBatchTaskInfosByNameAndState(name: string, state: enums.BatchTaskState, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    GetBatchTaskInfosByNameAndAssociates(request: carriers.Batch_GetBatchTaskInfosByNameAndAssociatesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    GetBatchTaskInfosByNameAndAssociates(name: string, associateIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    GetBatchTaskInfosByAssociatesAndState(request: carriers.Batch_GetBatchTaskInfosByAssociatesAndStateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    GetBatchTaskInfosByAssociatesAndState(associateIds: number[], state: enums.BatchTaskState, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    DeleteBatchTasks(request: carriers.Batch_DeleteBatchTasksRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteBatchTasks(batchTaskIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteBatchTask(request: carriers.Batch_DeleteBatchTaskRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteBatchTask(batchTaskId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetAllBatchTaskInfosByName(request: carriers.Batch_GetAllBatchTaskInfosByNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    GetAllBatchTaskInfosByName(taskName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    GetAllBatchTaskInfosByNameAndState(request: carriers.Batch_GetAllBatchTaskInfosByNameAndStateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    GetAllBatchTaskInfosByNameAndState(taskName: string, state: enums.BatchTaskState, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    GetSystemBatchTaskInfosByName(request: carriers.Batch_GetSystemBatchTaskInfosByNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    GetSystemBatchTaskInfosByName(taskName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    GetSystemBatchTaskInfosByNameAndState(request: carriers.Batch_GetSystemBatchTaskInfosByNameAndStateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    GetSystemBatchTaskInfosByNameAndState(taskName: string, state: enums.BatchTaskState, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
}
/**
 * Start, stop and monitor predefined batch tasks
 */
export declare class BatchAgent extends base.WebApiBase implements IBatchAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    private _GetBatchTaskInfo;
    /**
     * Get a single BatchTaskInfo based on Id.
     * @param request - Id
     * @returns Returns a BatchTaskInfo.
     */
    GetBatchTaskInfo(request: carriers.Batch_GetBatchTaskInfoRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo>;
    /**
     * Get a single BatchTaskInfo based on Id.
     * @param id - Id of the BatchTaskInfo to get.
     * @returns Returns a BatchTaskInfo.
     */
    GetBatchTaskInfo(id: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo>;
    private _GetBatchTaskInfosByAssociates;
    /**
     * Get an array of BatchTaskInfo for the provided associate id&apos;s.
     * @param request - AssociateIds
     * @returns Returns an array of user's BatchTaskInfo.
     */
    GetBatchTaskInfosByAssociates(request: carriers.Batch_GetBatchTaskInfosByAssociatesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    /**
     * Get an array of BatchTaskInfo for the provided associate id&apos;s.
     * @param associateIds - Array of associate id's. empty array = all tasks, 0 = system tasks, -1 = all user tasks.
     * @returns Returns an array of user's BatchTaskInfo.
     */
    GetBatchTaskInfosByAssociates(associateIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    private _StartBatchJob;
    /**
     * Start a batch job based on BatchTaskInfo.
     * @param request - BatchTaskInfo
     * @returns Returns the id of the created batch job.
     */
    StartBatchJob(request: carriers.Batch_StartBatchJobRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Start a batch job based on BatchTaskInfo.
     * @param batchTaskInfo - Use BatchTaskInfo to describe the new batch job.
     * @returns Returns the id of the created batch job.
     */
    StartBatchJob(batchTaskInfo: carriers.BatchTaskInfo, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _StopBatchJob;
    /**
     * Stop a batch job based on Id.
     * @param request - Id
     * @returns Returns true if the job was stopped successfully.
     */
    StopBatchJob(request: carriers.Batch_StopBatchJobRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Stop a batch job based on Id.
     * @param id - Id of the batch job to stop.
     * @returns Returns true if the job was stopped successfully.
     */
    StopBatchJob(id: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _GetBatchTaskInfosByState;
    /**
     * Gets an array of user BatchTaskInfo with state defined by a BatchTaskState.
     * @param request - State
     * @returns Returns an array of user BatchTaskInfo. System tasks are excluded.
     */
    GetBatchTaskInfosByState(request: carriers.Batch_GetBatchTaskInfosByStateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    /**
     * Gets an array of user BatchTaskInfo with state defined by a BatchTaskState.
     * @param state - The BatchTaskState to get batch tasks for.
     * @returns Returns an array of user BatchTaskInfo. System tasks are excluded.
     */
    GetBatchTaskInfosByState(state: enums.BatchTaskState, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    private _UpdateBatchTask;
    /**
     * Update information about a BatchTask. Only the following properties can be updated: State, Description, Response and Request.
     * @param request - BatchTaskInfo
     * @returns The updated BatchTaskInfo
     */
    UpdateBatchTask(request: carriers.Batch_UpdateBatchTaskRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo>;
    /**
     * Update information about a BatchTask. Only the following properties can be updated: State, Description, Response and Request.
     * @param batchTaskInfo - The updated information to save.
     * @returns The updated BatchTaskInfo
     */
    UpdateBatchTask(batchTaskInfo: carriers.BatchTaskInfo, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo>;
    private _GetBatchTaskInfosByNameAndState;
    /**
     * Gets an array of user BatchTaskInfo with state defined by a BatchTaskState and the batchtask definition name.
     * @param request - Name, State
     * @returns Returns an array of user BatchTaskInfo. System tasks are excluded.
     */
    GetBatchTaskInfosByNameAndState(request: carriers.Batch_GetBatchTaskInfosByNameAndStateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    /**
     * Gets an array of user BatchTaskInfo with state defined by a BatchTaskState and the batchtask definition name.
     * @param name - Batchtask definition name. Blank for all tasks.
     * @param state - The BatchTaskState to get batch tasks for.
     * @returns Returns an array of user BatchTaskInfo. System tasks are excluded.
     */
    GetBatchTaskInfosByNameAndState(name: string, state: enums.BatchTaskState, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    private _GetBatchTaskInfosByNameAndAssociates;
    /**
     * Get an array of BatchTaskInfo for the provided associate id&apos;s and batch task definition name.
     * @param request - Name, AssociateIds
     * @returns Returns an array of BatchTaskInfo.
     */
    GetBatchTaskInfosByNameAndAssociates(request: carriers.Batch_GetBatchTaskInfosByNameAndAssociatesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    /**
     * Get an array of BatchTaskInfo for the provided associate id&apos;s and batch task definition name.
     * @param name - Batchtask definition name. Blank for all tasks.
     * @param associateIds - Array of associate id's. Empty array for all. 0 for system tasks, -1 for all users, or specific user ids.
     * @returns Returns an array of BatchTaskInfo.
     */
    GetBatchTaskInfosByNameAndAssociates(name: string, associateIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    private _GetBatchTaskInfosByAssociatesAndState;
    /**
     * Get an array of BatchTaskInfo for the provided associate id&apos;s and batch task state.
     * @param request - AssociateIds, State
     * @returns Returns an array of BatchTaskInfo.
     */
    GetBatchTaskInfosByAssociatesAndState(request: carriers.Batch_GetBatchTaskInfosByAssociatesAndStateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    /**
     * Get an array of BatchTaskInfo for the provided associate id&apos;s and batch task state.
     * @param associateIds - Array of associate id's. Empty array for all. 0 for system tasks, -1 for all users, or specific user ids.
     * @param state - The BatchTaskState to get batch tasks for.
     * @returns Returns an array of BatchTaskInfo.
     */
    GetBatchTaskInfosByAssociatesAndState(associateIds: number[], state: enums.BatchTaskState, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    private _DeleteBatchTasks;
    /**
     * Delete batch tasks from the database.
     * @param request - BatchTaskIds
     * @returns
     */
    DeleteBatchTasks(request: carriers.Batch_DeleteBatchTasksRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Delete batch tasks from the database.
     * @param batchTaskIds - Array of batchTask ids to delete.
     * @returns
     */
    DeleteBatchTasks(batchTaskIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _DeleteBatchTask;
    /**
     * Delete a batch task from the database.
     * @param request - BatchTaskId
     * @returns
     */
    DeleteBatchTask(request: carriers.Batch_DeleteBatchTaskRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Delete a batch task from the database.
     * @param batchTaskId - The batchTask id to delete.
     * @returns
     */
    DeleteBatchTask(batchTaskId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetAllBatchTaskInfosByName;
    /**
     * Get an array of system and user BatchTaskInfo for the provided task name.
     * @param request - TaskName
     * @returns Returns an array of user and system BatchTaskInfos.
     */
    GetAllBatchTaskInfosByName(request: carriers.Batch_GetAllBatchTaskInfosByNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    /**
     * Get an array of system and user BatchTaskInfo for the provided task name.
     * @param taskName - A task name, NULL or blank to get all tasks
     * @returns Returns an array of user and system BatchTaskInfos.
     */
    GetAllBatchTaskInfosByName(taskName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    private _GetAllBatchTaskInfosByNameAndState;
    /**
     * Get an array of system and user BatchTaskInfo for the provided task name and state.
     * @param request - TaskName, State
     * @returns Returns an array of user and system BatchTaskInfos.
     */
    GetAllBatchTaskInfosByNameAndState(request: carriers.Batch_GetAllBatchTaskInfosByNameAndStateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    /**
     * Get an array of system and user BatchTaskInfo for the provided task name and state.
     * @param taskName - A task name, NULL or blank to get all tasks
     * @param state - The BatchTaskState to get batch tasks for.
     * @returns Returns an array of user and system BatchTaskInfos.
     */
    GetAllBatchTaskInfosByNameAndState(taskName: string, state: enums.BatchTaskState, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    private _GetSystemBatchTaskInfosByName;
    /**
     * Get an array of system BatchTaskInfo for the provided task name.
     * @param request - TaskName
     * @returns Returns an array of system BatchTaskInfos.
     */
    GetSystemBatchTaskInfosByName(request: carriers.Batch_GetSystemBatchTaskInfosByNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    /**
     * Get an array of system BatchTaskInfo for the provided task name.
     * @param taskName - A task name, NULL or blank to get all tasks
     * @returns Returns an array of system BatchTaskInfos.
     */
    GetSystemBatchTaskInfosByName(taskName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    private _GetSystemBatchTaskInfosByNameAndState;
    /**
     * Get an array of system BatchTaskInfo for the provided task name and state.
     * @param request - TaskName, State
     * @returns Returns an array of system BatchTaskInfos.
     */
    GetSystemBatchTaskInfosByNameAndState(request: carriers.Batch_GetSystemBatchTaskInfosByNameAndStateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
    /**
     * Get an array of system BatchTaskInfo for the provided task name and state.
     * @param taskName - A task name, NULL or blank to get all tasks
     * @param state - The BatchTaskState to get batch tasks for.
     * @returns Returns an array of system BatchTaskInfos.
     */
    GetSystemBatchTaskInfosByNameAndState(taskName: string, state: enums.BatchTaskState, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo[]>;
}
//# sourceMappingURL=BatchAgent.d.ts.map