"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebhookAgent = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
/**
 * Webhook definitions - webhooks signal other systems about events inside NetServer
 */
class WebhookAgent extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Webhook/";
        super(options);
    }
    /**
     * Set default values into a new Webhook.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    async CreateDefaultWebhook(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultWebhook", null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_Webhook_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing Webhook or creates a new Webhook if the id parameter is empty
     * @param entity - The Webhook to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated Webhook
     */
    async SaveWebhook(entity, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveWebhook", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_Webhook_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Deletes the Webhook
     * @param WebhookId - The id of the Webhook to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    async DeleteWebhook(WebhookId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteWebhook?WebhookId=" + WebhookId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Gets a Webhook object.
     * @param webhookId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single Webhook
     */
    async GetWebhook(webhookId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetWebhook?webhookId=" + webhookId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_Webhook_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async _GetAllWebhooks(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetAllWebhooks", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_WebhookArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetAllWebhooks(nameFilter, eventFilter, statusFilter, webapi_options) {
        let _request = null;
        let _options = null;
        const first = nameFilter;
        if (typeof (first) === "object" && first && (typeof (first.NameFilter) != 'undefined' || typeof (first.EventFilter) != 'undefined' || typeof (first.StatusFilter) != 'undefined')) {
            _request = nameFilter;
            _options = eventFilter;
        }
        else {
            _request = {
                NameFilter: nameFilter,
                EventFilter: eventFilter,
                StatusFilter: statusFilter,
            };
            _options = webapi_options;
        }
        return this._GetAllWebhooks(_request, _options);
    }
    async _TestWebhook(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("TestWebhook", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_WebhookResult_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async TestWebhook(webhook, webapi_options) {
        let _request = null;
        let _options = null;
        const first = webhook;
        if (typeof (first) === "object" && first && (typeof (first.Webhook) != 'undefined')) {
            _request = webhook;
            _options = webapi_options;
        }
        else {
            _request = {
                Webhook: webhook,
            };
            _options = webapi_options;
        }
        return this._TestWebhook(_request, _options);
    }
    async _SignalEvent(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SignalEvent", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SignalEvent(eventName, primaryKey, data, webapi_options) {
        let _request = null;
        let _options = null;
        const first = eventName;
        if (typeof (first) === "object" && first && (typeof (first.EventName) != 'undefined' || typeof (first.PrimaryKey) != 'undefined' || typeof (first.Data) != 'undefined')) {
            _request = eventName;
            _options = primaryKey;
        }
        else {
            _request = {
                EventName: eventName,
                PrimaryKey: primaryKey,
                Data: data,
            };
            _options = webapi_options;
        }
        return this._SignalEvent(_request, _options);
    }
    async _GetLastError(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetLastError", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetLastError(webhookId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = webhookId;
        if (typeof (first) === "object" && first && (typeof (first.WebhookId) != 'undefined')) {
            _request = webhookId;
            _options = webapi_options;
        }
        else {
            _request = {
                WebhookId: webhookId,
            };
            _options = webapi_options;
        }
        return this._GetLastError(_request, _options);
    }
} // class v1WebhookAgentController 
exports.WebhookAgent = WebhookAgent;
//# sourceMappingURL=WebhookAgent.js.map