"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.AudienceAgent = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
const Base64_1 = require("./Base64");
/**
 * Services specific to the Audience client
 */
class AudienceAgent extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Audience/";
        super(options);
    }
    /**
     * Set default values into a new AudienceLayoutEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    async CreateDefaultAudienceLayoutEntity(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultAudienceLayoutEntity", null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_AudienceLayoutEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing AudienceLayoutEntity or creates a new AudienceLayoutEntity if the id parameter is empty
     * @param entity - The AudienceLayoutEntity to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated AudienceLayoutEntity
     */
    async SaveAudienceLayoutEntity(entity, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveAudienceLayoutEntity", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_AudienceLayoutEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Deletes the AudienceLayoutEntity
     * @param AudienceLayoutEntityId - The id of the AudienceLayoutEntity to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    async DeleteAudienceLayoutEntity(AudienceLayoutEntityId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteAudienceLayoutEntity?AudienceLayoutEntityId=" + AudienceLayoutEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async _SaveConfigParameter(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SaveConfigParameter", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_AudienceConfigParameter_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SaveConfigParameter(layoutName, configParameter, webapi_options) {
        let _request = null;
        let _options = null;
        const first = layoutName;
        if (typeof (first) === "object" && first && (typeof (first.LayoutName) != 'undefined' || typeof (first.ConfigParameter) != 'undefined')) {
            _request = layoutName;
            _options = configParameter;
        }
        else {
            _request = {
                LayoutName: layoutName,
                ConfigParameter: configParameter,
            };
            _options = webapi_options;
        }
        return this._SaveConfigParameter(_request, _options);
    }
    async _GetConfigParameterValue(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetConfigParameterValue", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetConfigParameterValue(layoutName, parameterName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = layoutName;
        if (typeof (first) === "object" && first && (typeof (first.LayoutName) != 'undefined' || typeof (first.ParameterName) != 'undefined')) {
            _request = layoutName;
            _options = parameterName;
        }
        else {
            _request = {
                LayoutName: layoutName,
                ParameterName: parameterName,
            };
            _options = webapi_options;
        }
        return this._GetConfigParameterValue(_request, _options);
    }
    async _GetConfigParameter(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetConfigParameter", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_AudienceConfigParameter_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetConfigParameter(layoutName, parameterName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = layoutName;
        if (typeof (first) === "object" && first && (typeof (first.LayoutName) != 'undefined' || typeof (first.ParameterName) != 'undefined')) {
            _request = layoutName;
            _options = parameterName;
        }
        else {
            _request = {
                LayoutName: layoutName,
                ParameterName: parameterName,
            };
            _options = webapi_options;
        }
        return this._GetConfigParameter(_request, _options);
    }
    async _DeleteConfigParameter(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("DeleteConfigParameter", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async DeleteConfigParameter(layoutName, parameterName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = layoutName;
        if (typeof (first) === "object" && first && (typeof (first.LayoutName) != 'undefined' || typeof (first.ParameterName) != 'undefined')) {
            _request = layoutName;
            _options = parameterName;
        }
        else {
            _request = {
                LayoutName: layoutName,
                ParameterName: parameterName,
            };
            _options = webapi_options;
        }
        return this._DeleteConfigParameter(_request, _options);
    }
    async _GetMyConfigParameter(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetMyConfigParameter", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_AudienceConfigParameter_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetMyConfigParameter(parameterName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = parameterName;
        if (typeof (first) === "object" && first && (typeof (first.ParameterName) != 'undefined')) {
            _request = parameterName;
            _options = webapi_options;
        }
        else {
            _request = {
                ParameterName: parameterName,
            };
            _options = webapi_options;
        }
        return this._GetMyConfigParameter(_request, _options);
    }
    async _GetMyConfigParameterValue(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetMyConfigParameterValue", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetMyConfigParameterValue(parameterName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = parameterName;
        if (typeof (first) === "object" && first && (typeof (first.ParameterName) != 'undefined')) {
            _request = parameterName;
            _options = webapi_options;
        }
        else {
            _request = {
                ParameterName: parameterName,
            };
            _options = webapi_options;
        }
        return this._GetMyConfigParameterValue(_request, _options);
    }
    async _GetConfigParameterValueOnPerson(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetConfigParameterValueOnPerson", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetConfigParameterValueOnPerson(parameterName, personId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = parameterName;
        if (typeof (first) === "object" && first && (typeof (first.ParameterName) != 'undefined' || typeof (first.PersonId) != 'undefined')) {
            _request = parameterName;
            _options = personId;
        }
        else {
            _request = {
                ParameterName: parameterName,
                PersonId: personId,
            };
            _options = webapi_options;
        }
        return this._GetConfigParameterValueOnPerson(_request, _options);
    }
    async _GetConfigParameterOnPerson(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetConfigParameterOnPerson", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_AudienceConfigParameter_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetConfigParameterOnPerson(parameterName, personId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = parameterName;
        if (typeof (first) === "object" && first && (typeof (first.ParameterName) != 'undefined' || typeof (first.PersonId) != 'undefined')) {
            _request = parameterName;
            _options = personId;
        }
        else {
            _request = {
                ParameterName: parameterName,
                PersonId: personId,
            };
            _options = webapi_options;
        }
        return this._GetConfigParameterOnPerson(_request, _options);
    }
    async _GetConfigParametersByLayoutName(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetConfigParametersByLayoutName", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_AudienceConfigParameterArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetConfigParametersByLayoutName(layoutName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = layoutName;
        if (typeof (first) === "object" && first && (typeof (first.LayoutName) != 'undefined')) {
            _request = layoutName;
            _options = webapi_options;
        }
        else {
            _request = {
                LayoutName: layoutName,
            };
            _options = webapi_options;
        }
        return this._GetConfigParametersByLayoutName(_request, _options);
    }
    async _GetMyConfigParameters(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetMyConfigParameters", undefined, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_AudienceConfigParameterArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Gets the Audience configuration parameters belonging to the currently logged on user.
     * @returns Array of Audience configuration parameters.
     */
    async GetMyConfigParameters(webapi_options) {
        return this._GetMyConfigParameters(webapi_options);
    }
    async _GetConfigParametersOnPerson(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetConfigParametersOnPerson", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_AudienceConfigParameterArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetConfigParametersOnPerson(personId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = personId;
        if (typeof (first) === "object" && first && (typeof (first.PersonId) != 'undefined')) {
            _request = personId;
            _options = webapi_options;
        }
        else {
            _request = {
                PersonId: personId,
            };
            _options = webapi_options;
        }
        return this._GetConfigParametersOnPerson(_request, _options);
    }
    /*
     * Gets a AudienceLayoutEntity object.
     * @param audienceLayoutEntityId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single AudienceLayoutEntity
     */
    async GetAudienceLayoutEntity(audienceLayoutEntityId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetAudienceLayoutEntity?audienceLayoutEntityId=" + audienceLayoutEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_AudienceLayoutEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async _GetAudienceLayoutByName(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetAudienceLayoutByName", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_AudienceLayoutEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetAudienceLayoutByName(layoutName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = layoutName;
        if (typeof (first) === "object" && first && (typeof (first.LayoutName) != 'undefined')) {
            _request = layoutName;
            _options = webapi_options;
        }
        else {
            _request = {
                LayoutName: layoutName,
            };
            _options = webapi_options;
        }
        return this._GetAudienceLayoutByName(_request, _options);
    }
    async _GetMyAudienceLayout(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetMyAudienceLayout", undefined, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_AudienceLayoutEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Gets the Audience layout belonging to the currently logged on user.
     * @returns Audience layout entity
     */
    async GetMyAudienceLayout(webapi_options) {
        return this._GetMyAudienceLayout(webapi_options);
    }
    async _GetAudienceLayoutOnPerson(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetAudienceLayoutOnPerson", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_AudienceLayoutEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetAudienceLayoutOnPerson(personId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = personId;
        if (typeof (first) === "object" && first && (typeof (first.PersonId) != 'undefined')) {
            _request = personId;
            _options = webapi_options;
        }
        else {
            _request = {
                PersonId: personId,
            };
            _options = webapi_options;
        }
        return this._GetAudienceLayoutOnPerson(_request, _options);
    }
    async _GetDefaultProjectImage(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options) || {};
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                if (!options || options.returnBlobAs == base.ReturnBlobType.AsArrayBuffer) {
                    config.responseType = "arraybuffer";
                    config.headers = config.headers || {};
                    config.headers["Accept"] = "application/octet-stream";
                }
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetDefaultProjectImage", request, config);
                base.WebApiBase.SetCompleted(options);
                let res = null;
                if (options && options.returnBlobAs != base.ReturnBlobType.AsArrayBuffer) {
                    res = response.data;
                    if (options.returnBlobAs == base.ReturnBlobType.AsString) {
                        res = (0, Base64_1.FromBase64ToString)(res);
                    }
                }
                else {
                    res = response.data;
                }
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetDefaultProjectImage(layoutName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = layoutName;
        if (typeof (first) === "object" && first && (typeof (first.LayoutName) != 'undefined')) {
            _request = layoutName;
            _options = webapi_options;
        }
        else {
            _request = {
                LayoutName: layoutName,
            };
            _options = webapi_options;
        }
        return this._GetDefaultProjectImage(_request, _options);
    }
    async _SetDefaultProjectImage(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetDefaultProjectImage", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SetDefaultProjectImage(layoutName, image, webapi_options) {
        let _request = null;
        let _options = null;
        const first = layoutName;
        if (typeof (first) === "object" && first && (typeof (first.LayoutName) != 'undefined' || typeof (first.Image) != 'undefined')) {
            _request = layoutName;
            _options = image;
        }
        else {
            _request = {
                LayoutName: layoutName,
                Image: image,
            };
            _options = webapi_options;
        }
        _request.Image = (0, Base64_1.ToBase64)(_request.Image);
        return this._SetDefaultProjectImage(_request, _options);
    }
    async _SetDefaultPersonImage(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetDefaultPersonImage", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SetDefaultPersonImage(layoutName, image, webapi_options) {
        let _request = null;
        let _options = null;
        const first = layoutName;
        if (typeof (first) === "object" && first && (typeof (first.LayoutName) != 'undefined' || typeof (first.Image) != 'undefined')) {
            _request = layoutName;
            _options = image;
        }
        else {
            _request = {
                LayoutName: layoutName,
                Image: image,
            };
            _options = webapi_options;
        }
        _request.Image = (0, Base64_1.ToBase64)(_request.Image);
        return this._SetDefaultPersonImage(_request, _options);
    }
    async _GetDefaultPersonImage(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options) || {};
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                if (!options || options.returnBlobAs == base.ReturnBlobType.AsArrayBuffer) {
                    config.responseType = "arraybuffer";
                    config.headers = config.headers || {};
                    config.headers["Accept"] = "application/octet-stream";
                }
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetDefaultPersonImage", request, config);
                base.WebApiBase.SetCompleted(options);
                let res = null;
                if (options && options.returnBlobAs != base.ReturnBlobType.AsArrayBuffer) {
                    res = response.data;
                    if (options.returnBlobAs == base.ReturnBlobType.AsString) {
                        res = (0, Base64_1.FromBase64ToString)(res);
                    }
                }
                else {
                    res = response.data;
                }
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetDefaultPersonImage(layoutName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = layoutName;
        if (typeof (first) === "object" && first && (typeof (first.LayoutName) != 'undefined')) {
            _request = layoutName;
            _options = webapi_options;
        }
        else {
            _request = {
                LayoutName: layoutName,
            };
            _options = webapi_options;
        }
        return this._GetDefaultPersonImage(_request, _options);
    }
    async _SetDefaultCountryFlag(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetDefaultCountryFlag", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SetDefaultCountryFlag(layoutName, image, webapi_options) {
        let _request = null;
        let _options = null;
        const first = layoutName;
        if (typeof (first) === "object" && first && (typeof (first.LayoutName) != 'undefined' || typeof (first.Image) != 'undefined')) {
            _request = layoutName;
            _options = image;
        }
        else {
            _request = {
                LayoutName: layoutName,
                Image: image,
            };
            _options = webapi_options;
        }
        _request.Image = (0, Base64_1.ToBase64)(_request.Image);
        return this._SetDefaultCountryFlag(_request, _options);
    }
    async _GetDefaultCountryFlag(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options) || {};
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                if (!options || options.returnBlobAs == base.ReturnBlobType.AsArrayBuffer) {
                    config.responseType = "arraybuffer";
                    config.headers = config.headers || {};
                    config.headers["Accept"] = "application/octet-stream";
                }
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetDefaultCountryFlag", request, config);
                base.WebApiBase.SetCompleted(options);
                let res = null;
                if (options && options.returnBlobAs != base.ReturnBlobType.AsArrayBuffer) {
                    res = response.data;
                    if (options.returnBlobAs == base.ReturnBlobType.AsString) {
                        res = (0, Base64_1.FromBase64ToString)(res);
                    }
                }
                else {
                    res = response.data;
                }
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetDefaultCountryFlag(layoutName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = layoutName;
        if (typeof (first) === "object" && first && (typeof (first.LayoutName) != 'undefined')) {
            _request = layoutName;
            _options = webapi_options;
        }
        else {
            _request = {
                LayoutName: layoutName,
            };
            _options = webapi_options;
        }
        return this._GetDefaultCountryFlag(_request, _options);
    }
    async _GetLogoImage(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options) || {};
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                if (!options || options.returnBlobAs == base.ReturnBlobType.AsArrayBuffer) {
                    config.responseType = "arraybuffer";
                    config.headers = config.headers || {};
                    config.headers["Accept"] = "application/octet-stream";
                }
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetLogoImage", request, config);
                base.WebApiBase.SetCompleted(options);
                let res = null;
                if (options && options.returnBlobAs != base.ReturnBlobType.AsArrayBuffer) {
                    res = response.data;
                    if (options.returnBlobAs == base.ReturnBlobType.AsString) {
                        res = (0, Base64_1.FromBase64ToString)(res);
                    }
                }
                else {
                    res = response.data;
                }
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetLogoImage(layoutName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = layoutName;
        if (typeof (first) === "object" && first && (typeof (first.LayoutName) != 'undefined')) {
            _request = layoutName;
            _options = webapi_options;
        }
        else {
            _request = {
                LayoutName: layoutName,
            };
            _options = webapi_options;
        }
        return this._GetLogoImage(_request, _options);
    }
    async _SetLogoImage(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetLogoImage", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SetLogoImage(layoutName, image, webapi_options) {
        let _request = null;
        let _options = null;
        const first = layoutName;
        if (typeof (first) === "object" && first && (typeof (first.LayoutName) != 'undefined' || typeof (first.Image) != 'undefined')) {
            _request = layoutName;
            _options = image;
        }
        else {
            _request = {
                LayoutName: layoutName,
                Image: image,
            };
            _options = webapi_options;
        }
        _request.Image = (0, Base64_1.ToBase64)(_request.Image);
        return this._SetLogoImage(_request, _options);
    }
} // class v1AudienceAgentController 
exports.AudienceAgent = AudienceAgent;
//# sourceMappingURL=AudienceAgent.js.map