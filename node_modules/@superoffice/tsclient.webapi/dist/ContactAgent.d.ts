import { AxiosRequestConfig } from 'axios';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Contact (company) data services.
 */
export interface IContactAgent {
    CreateDefaultContactEntity(): Promise<carriers.ContactEntity>;
    SaveContactEntity(entity: carriers.ContactEntity): Promise<carriers.ContactEntity>;
    DeleteContactEntity(ContactEntityId: number): Promise<void>;
    CreateDefaultPreviewContact(): Promise<carriers.PreviewContact>;
    GetContact(contactId: number): Promise<carriers.Contact>;
    GetMyActiveContacts(request: carriers.Contact_GetMyActiveContactsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactActivity[]>;
    GetMyActiveContacts(activityStartTime: Date, contactCategories: number[], actionType: enums.ContactAction, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactActivity[]>;
    GetContactEntity(contactEntityId: number): Promise<carriers.ContactEntity>;
    Undelete(request: carriers.Contact_UndeleteRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    Undelete(id: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetPersons(request: carriers.Contact_GetPersonsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person[]>;
    GetPersons(contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person[]>;
    GetContactWithPersons(request: carriers.Contact_GetContactWithPersonsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactEntity>;
    GetContactWithPersons(contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactEntity>;
    GetMyContact(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactEntity>;
    GetMyBizCard(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactEntity>;
    ChangeCountry(request: carriers.Contact_ChangeCountryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactEntity>;
    ChangeCountry(contactEntity: carriers.ContactEntity, toCountryId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactEntity>;
    GetAddress(request: carriers.Contact_GetAddressRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Address>;
    GetAddress(contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Address>;
    GetAddressByCountry(request: carriers.Contact_GetAddressByCountryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Address>;
    GetAddressByCountry(contactId: number, countryId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Address>;
    AddPerson(request: carriers.Contact_AddPersonRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonEntity>;
    AddPerson(contactId: number, newPersonEntity: carriers.PersonEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonEntity>;
    GetDuplicates(request: carriers.Contact_GetDuplicatesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DuplicateEntry[]>;
    GetDuplicates(name: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DuplicateEntry[]>;
    CreateNewEntry(request: carriers.Contact_CreateNewEntryRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    CreateNewEntry(duplicate: carriers.DuplicateEntry, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    GetDuplicateRules(webapi_options?: base.WebApiRequestOptions): Promise<carriers.DuplicateRule[]>;
    SetDuplicateRulesStatus(request: carriers.Contact_SetDuplicateRulesStatusRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetDuplicateRulesStatus(rules: carriers.DuplicateRule[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    Merge(request: carriers.Contact_MergeRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    Merge(sourceContactId: number, destinationContactId: number, mergeIdenticalPersons: boolean, replaceEmptyFieldsOnDestination: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    Copy(request: carriers.Contact_CopyRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    Copy(sourceContactId: number, destinationContactName: string, destinationContactDepartment: string, copyPersons: boolean, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    GetNameDepartmentDuplicates(request: carriers.Contact_GetNameDepartmentDuplicatesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DuplicateEntry[]>;
    GetNameDepartmentDuplicates(name: string, department: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DuplicateEntry[]>;
    IsNumberValid(request: carriers.Contact_IsNumberValidRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    IsNumberValid(contactId: number, number: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    GetQuoteVersionAddresses(request: carriers.Contact_GetQuoteVersionAddressesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Address[]>;
    GetQuoteVersionAddresses(quoteVersionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Address[]>;
    SaveQuoteVersionAddress(request: carriers.Contact_SaveQuoteVersionAddressRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Address>;
    SaveQuoteVersionAddress(quoteVersionId: number, address: carriers.Address, addressType: enums.AddressType, countryId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Address>;
    DeleteExpired(webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetContactSummary(request: carriers.Contact_GetContactSummaryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactSummary>;
    GetContactSummary(contactId: number, limit: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactSummary>;
    ValidateContactEntity(request: carriers.Contact_ValidateContactEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    ValidateContactEntity(contactEntity: carriers.ContactEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    GetContactList(contactIds: number[]): Promise<carriers.Contact[]>;
    GetMyContacts(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Contact[]>;
    GetMyRecentContacts(request: carriers.Contact_GetMyRecentContactsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Contact[]>;
    GetMyRecentContacts(sourceType: enums.ContactSourceType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Contact[]>;
    GetPreviewContact(request: carriers.Contact_GetPreviewContactRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreviewContact>;
    GetPreviewContact(contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreviewContact>;
}
/**
 * Contact (company) data services.
 */
export declare class ContactAgent extends base.WebApiBase implements IContactAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * Set default values into a new ContactEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultContactEntity(options?: base.WebApiRequestOptions): Promise<carriers.ContactEntity>;
    SaveContactEntity(entity: carriers.ContactEntity, options?: base.WebApiRequestOptions): Promise<carriers.ContactEntity>;
    DeleteContactEntity(ContactEntityId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new PreviewContact.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultPreviewContact(options?: base.WebApiRequestOptions): Promise<carriers.PreviewContact>;
    GetContact(contactId: number, options?: base.WebApiRequestOptions): Promise<carriers.Contact>;
    private _GetMyActiveContacts;
    /**
     * Returns the contacts where there has been activity since activityStartTime. If activityStartTime is larger than the current date, all contacts with activity since last log-out are returned. The result set can be filtered by category and action type.
     * @param request - ActivityStartTime, ContactCategories, ActionType
     * @returns Array of contacts where there have been activity in the period.
     */
    GetMyActiveContacts(request: carriers.Contact_GetMyActiveContactsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactActivity[]>;
    /**
     * Returns the contacts where there has been activity since activityStartTime. If activityStartTime is larger than the current date, all contacts with activity since last log-out are returned. The result set can be filtered by category and action type.
     * @param activityStartTime - The start time of the activities. If the start time is set to a future date; activites since the user last logged out are returned.
     * @param contactCategories - Integer array of categories to filter on. If the array is empty contacts from all categories will be selected.
     * @param actionType - The type of action that has occured. E.g. updates, deletes, new appointments, etc.
     * @returns Array of contacts where there have been activity in the period.
     */
    GetMyActiveContacts(activityStartTime: Date, contactCategories: number[], actionType: enums.ContactAction, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactActivity[]>;
    GetContactEntity(contactEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.ContactEntity>;
    private _Undelete;
    /**
     * This entity supports Soft Delete. Call this method to Undelete a previously soft-deleted record
     * @param request - Id
     * @returns This method has no return value
     */
    Undelete(request: carriers.Contact_UndeleteRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * This entity supports Soft Delete. Call this method to Undelete a previously soft-deleted record
     * @param id - The primary key of the entity to undelete
     * @returns This method has no return value
     */
    Undelete(id: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetPersons;
    /**
     * Returns an array of all the contact persons for the company card.
     * @param request - ContactId
     * @returns Array of Persons
     */
    GetPersons(request: carriers.Contact_GetPersonsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person[]>;
    /**
     * Returns an array of all the contact persons for the company card.
     * @param contactId -
     * @returns Array of Persons
     */
    GetPersons(contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Person[]>;
    private _GetContactWithPersons;
    /**
     * Returns the contact with all the contact persons belonging to the contact
     * @param request - ContactId
     * @returns ContactEntity with all data and persons.
     */
    GetContactWithPersons(request: carriers.Contact_GetContactWithPersonsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactEntity>;
    /**
     * Returns the contact with all the contact persons belonging to the contact
     * @param contactId - The id of the contact.
     * @returns ContactEntity with all data and persons.
     */
    GetContactWithPersons(contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactEntity>;
    private _GetMyContact;
    /**
     * Gets the contact belonging to the currently logged on user.
     * @returns The Contact
     */
    GetMyContact(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactEntity>;
    private _GetMyBizCard;
    /**
     * Returns all data needed to display the logged on person&apos;s business card. That is company, person, and company interest data.
     * @returns The contact object with persons and interests
     */
    GetMyBizCard(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactEntity>;
    private _ChangeCountry;
    /**
     * Change country regenerates the default values and localized information such as phone number and address format
     * @param request - ContactEntity, ToCountryId
     * @returns
     */
    ChangeCountry(request: carriers.Contact_ChangeCountryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactEntity>;
    /**
     * Change country regenerates the default values and localized information such as phone number and address format
     * @param contactEntity -
     * @param toCountryId - The country to switch to
     * @returns
     */
    ChangeCountry(contactEntity: carriers.ContactEntity, toCountryId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactEntity>;
    private _GetAddress;
    /**
     * Gets the contact&apos;s localized address.
     * @param request - ContactId
     * @returns The address as LocalizedField[][].
     */
    GetAddress(request: carriers.Contact_GetAddressRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Address>;
    /**
     * Gets the contact&apos;s localized address.
     * @param contactId - The contact id
     * @returns The address as LocalizedField[][].
     */
    GetAddress(contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Address>;
    private _GetAddressByCountry;
    /**
     * Gets the contact&apos;s localized address.
     * @param request - ContactId, CountryId
     * @returns The address as LocalizedField[][].
     */
    GetAddressByCountry(request: carriers.Contact_GetAddressByCountryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Address>;
    /**
     * Gets the contact&apos;s localized address.
     * @param contactId - The contact id
     * @param countryId -
     * @returns The address as LocalizedField[][].
     */
    GetAddressByCountry(contactId: number, countryId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Address>;
    private _AddPerson;
    /**
     * Add a person to the given contact
     * @param request - ContactId, NewPersonEntity
     * @returns Updated person object
     */
    AddPerson(request: carriers.Contact_AddPersonRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonEntity>;
    /**
     * Add a person to the given contact
     * @param contactId - Contact to add person to
     * @param newPersonEntity - Person object to add
     * @returns Updated person object
     */
    AddPerson(contactId: number, newPersonEntity: carriers.PersonEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PersonEntity>;
    private _GetDuplicates;
    /**
     * Get duplicates (exact or similar in the database) based on the name
     * @param request - Name
     * @returns Any records matching the specified name
     */
    GetDuplicates(request: carriers.Contact_GetDuplicatesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DuplicateEntry[]>;
    /**
     * Get duplicates (exact or similar in the database) based on the name
     * @param name - Name used for lookup
     * @returns Any records matching the specified name
     */
    GetDuplicates(name: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DuplicateEntry[]>;
    private _CreateNewEntry;
    /**
     * Creates a new contact based on external duplicate
     * @param request - Duplicate
     * @returns The database identity of the newly created entry
     */
    CreateNewEntry(request: carriers.Contact_CreateNewEntryRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Creates a new contact based on external duplicate
     * @param duplicate - The duplicate to create a new entry based upon
     * @returns The database identity of the newly created entry
     */
    CreateNewEntry(duplicate: carriers.DuplicateEntry, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _GetDuplicateRules;
    /**
     * Retrieve all available duplicate rules for contact
     * @returns All available duplicate rules
     */
    GetDuplicateRules(webapi_options?: base.WebApiRequestOptions): Promise<carriers.DuplicateRule[]>;
    private _SetDuplicateRulesStatus;
    /**
     * Set which duplicate rules should be active or not
     * @param request - Rules
     * @returns
     */
    SetDuplicateRulesStatus(request: carriers.Contact_SetDuplicateRulesStatusRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set which duplicate rules should be active or not
     * @param rules - Duplicate rules to update active status for
     * @returns
     */
    SetDuplicateRulesStatus(rules: carriers.DuplicateRule[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _Merge;
    /**
     * Merge two contacts. The destination contact will remain.
     * @param request - SourceContactId, DestinationContactId, MergeIdenticalPersons, ReplaceEmptyFieldsOnDestination
     * @returns
     */
    Merge(request: carriers.Contact_MergeRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Merge two contacts. The destination contact will remain.
     * @param sourceContactId - Source contact to merge from. This contact will disappear after the merge.
     * @param destinationContactId - Destination contact to merge into
     * @param mergeIdenticalPersons - Persons with identical names will be merged
     * @param replaceEmptyFieldsOnDestination - If true, empty fields on destination will be replaced by values from source.
     * @returns
     */
    Merge(sourceContactId: number, destinationContactId: number, mergeIdenticalPersons: boolean, replaceEmptyFieldsOnDestination: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _Copy;
    /**
     * Copy a contact. Activities and related data will be ignored
     * @param request - SourceContactId, DestinationContactName, DestinationContactDepartment, CopyPersons
     * @returns Id of copied contact
     */
    Copy(request: carriers.Contact_CopyRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Copy a contact. Activities and related data will be ignored
     * @param sourceContactId - The id of the contact to copy
     * @param destinationContactName - The name of the destination contact
     * @param destinationContactDepartment - The department of the destination contact
     * @param copyPersons - If true, persons will be copied from source contact
     * @returns Id of copied contact
     */
    Copy(sourceContactId: number, destinationContactName: string, destinationContactDepartment: string, copyPersons: boolean, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _GetNameDepartmentDuplicates;
    /**
     * Get duplicates based on the contact name and department
     * @param request - Name, Department
     * @returns Any records matching the specified name and department
     */
    GetNameDepartmentDuplicates(request: carriers.Contact_GetNameDepartmentDuplicatesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DuplicateEntry[]>;
    /**
     * Get duplicates based on the contact name and department
     * @param name - Name used for lookup
     * @param department - Department used for lookup (if any)
     * @returns Any records matching the specified name and department
     */
    GetNameDepartmentDuplicates(name: string, department: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DuplicateEntry[]>;
    private _IsNumberValid;
    /**
     * Checks if the number is unique or required.  The setting is configured from admin under system options.
     * @param request - ContactId, Number
     * @returns True if the number satisifies the configured rules for uniqueness.
     */
    IsNumberValid(request: carriers.Contact_IsNumberValidRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Checks if the number is unique or required.  The setting is configured from admin under system options.
     * @param contactId - Primary key
     * @param number - Number field value to check.
     * @returns True if the number satisifies the configured rules for uniqueness.
     */
    IsNumberValid(contactId: number, number: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _GetQuoteVersionAddresses;
    /**
     * Get the associated billing and invoice quote version addresses. These addresses might be address on the contact, or a custom address.
     * @param request - QuoteVersionId
     * @returns The quote version addresses. Invoice and billing address, in that order.
     */
    GetQuoteVersionAddresses(request: carriers.Contact_GetQuoteVersionAddressesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Address[]>;
    /**
     * Get the associated billing and invoice quote version addresses. These addresses might be address on the contact, or a custom address.
     * @param quoteVersionId - The version to get the addresses for.
     * @returns The quote version addresses. Invoice and billing address, in that order.
     */
    GetQuoteVersionAddresses(quoteVersionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Address[]>;
    private _SaveQuoteVersionAddress;
    /**
     * Save a custom quote version address.
     * @param request - QuoteVersionId, Address, AddressType, CountryId
     * @returns The saved addresses.
     */
    SaveQuoteVersionAddress(request: carriers.Contact_SaveQuoteVersionAddressRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Address>;
    /**
     * Save a custom quote version address.
     * @param quoteVersionId - The version to save the address on.
     * @param address - The address to save on the quote version.
     * @param addressType - Should be either QuoteBillingAddress or QuoteShippingAddress
     * @param countryId - The country for the custom address
     * @returns The saved addresses.
     */
    SaveQuoteVersionAddress(quoteVersionId: number, address: carriers.Address, addressType: enums.AddressType, countryId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Address>;
    private _DeleteExpired;
    /**
     * Trigger deletion of contacts (companies) that has been (soft) deleted and have timed out the expiry period (the SoftDeleteRetention preference).
     * @returns
     */
    DeleteExpired(webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetContactSummary;
    /**
     * Get summary of contact and its recent activity.
     * @param request - ContactId, Limit
     * @returns Summary of contact, with recent requests, sales, follow-ups, chats.
     */
    GetContactSummary(request: carriers.Contact_GetContactSummaryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactSummary>;
    /**
     * Get summary of contact and its recent activity.
     * @param contactId - The contact id to summarize.
     * @param limit - Max number of items to include in summary lists.
     * @returns Summary of contact, with recent requests, sales, follow-ups, chats.
     */
    GetContactSummary(contactId: number, limit: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ContactSummary>;
    private _ValidateContactEntity;
    /**
     * Check that entity is ready for saving, return error messages by field.
     * @param request - ContactEntity
     * @returns Error messages tagged by field.
     */
    ValidateContactEntity(request: carriers.Contact_ValidateContactEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    /**
     * Check that entity is ready for saving, return error messages by field.
     * @param contactEntity - Entity to be checked for errors.
     * @returns Error messages tagged by field.
     */
    ValidateContactEntity(contactEntity: carriers.ContactEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    GetContactList(contactIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.Contact[]>;
    private _GetMyContacts;
    /**
     * Getting the contacts where the user currently logged in is set as contact owner.
     * @returns Array of contacts
     */
    GetMyContacts(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Contact[]>;
    private _GetMyRecentContacts;
    /**
     * Method that returns a set of initial contacts. This could be the contacts in a favorites selection, the history list, the diary, or from all sources. If retrieved from the diary it will get appointments for the current and the next day.
     * @param request - SourceType
     * @returns Arrayof contacts
     */
    GetMyRecentContacts(request: carriers.Contact_GetMyRecentContactsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Contact[]>;
    /**
     * Method that returns a set of initial contacts. This could be the contacts in a favorites selection, the history list, the diary, or from all sources. If retrieved from the diary it will get appointments for the current and the next day.
     * @param sourceType - The source where the contacts are retrieved from (Favorites, History, Diary)
     * @returns Arrayof contacts
     */
    GetMyRecentContacts(sourceType: enums.ContactSourceType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Contact[]>;
    private _GetPreviewContact;
    /**
     * Get a contact from its ID
     * @param request - ContactId
     * @returns Contact minimal contact suitable for preview
     */
    GetPreviewContact(request: carriers.Contact_GetPreviewContactRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreviewContact>;
    /**
     * Get a contact from its ID
     * @param contactId - Contact ID
     * @returns Contact minimal contact suitable for preview
     */
    GetPreviewContact(contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreviewContact>;
}
//# sourceMappingURL=ContactAgent.d.ts.map