import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Data and function right queries
 */
export interface ISentryAgent {
    GetNewTableRight(request: carriers.Sentry_GetNewTableRightRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TableRight>;
    GetNewTableRight(tableName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TableRight>;
    GetTableRightByOwnership(request: carriers.Sentry_GetTableRightByOwnershipRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TableRight>;
    GetTableRightByOwnership(tableName: string, contactGroupId: number, contactAssociateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TableRight>;
    GetFunctionRights(webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    HasFunctionRight(request: carriers.Sentry_HasFunctionRightRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    HasFunctionRight(functionRight: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    CanCreateAppointmentInAssociateDiaries(request: carriers.Sentry_CanCreateAppointmentInAssociateDiariesRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    CanCreateAppointmentInAssociateDiaries(associateIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    CanCreateAppointmentInAllDiaries(webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    GetTableRightByContactOwnership(request: carriers.Sentry_GetTableRightByContactOwnershipRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TableRight>;
    GetTableRightByContactOwnership(tableName: string, contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TableRight>;
}
/**
 * Data and function right queries
 */
export declare class SentryAgent extends base.WebApiBase implements ISentryAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    private _GetNewTableRight;
    /**
     * Returns a TableRight for a new row based on tableName parameter.
     * @param request - TableName
     * @returns The TableRight
     */
    GetNewTableRight(request: carriers.Sentry_GetNewTableRightRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TableRight>;
    /**
     * Returns a TableRight for a new row based on tableName parameter.
     * @param tableName - Name of the table to get the TableRights from
     * @returns The TableRight
     */
    GetNewTableRight(tableName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TableRight>;
    private _GetTableRightByOwnership;
    /**
     * Return the TableRight from the relationship between the current user and the given user and group.
     * @param request - TableName, ContactGroupId, ContactAssociateId
     * @returns The TableRight
     */
    GetTableRightByOwnership(request: carriers.Sentry_GetTableRightByOwnershipRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TableRight>;
    /**
     * Return the TableRight from the relationship between the current user and the given user and group.
     * @param tableName - Name of the table to get the TableRights from.
     * @param contactGroupId - The user-group that the associate id is part of.
     * @param contactAssociateId - The associate id of the owner of the record
     * @returns The TableRight
     */
    GetTableRightByOwnership(tableName: string, contactGroupId: number, contactAssociateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TableRight>;
    private _GetFunctionRights;
    /**
     * Get a string array of all functions rights for the role of the current associate.
     * @returns String array with the technical names of assigned function rights
     */
    GetFunctionRights(webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    private _HasFunctionRight;
    /**
     * Get a boolean value indicating if the current user has the functional right.
     * @param request - FunctionRight
     * @returns
     */
    HasFunctionRight(request: carriers.Sentry_HasFunctionRightRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Get a boolean value indicating if the current user has the functional right.
     * @param functionRight - Function right to check.
     * @returns
     */
    HasFunctionRight(functionRight: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _CanCreateAppointmentInAssociateDiaries;
    /**
     * CanCreateAppointmentInAssociateDiaries will check if the current associate can create appointments in diaries belonging to the associates listed in associateIds. CanCreateAppointmentInAssociateDiaries will only check against associates that are diary owners. If none of the associates listed in the associateIds parameter is a diary owner, the method will return true.
     * @param request - AssociateIds
     * @returns Returns true if the current associate can create appointments in the diary of all the other associates, otherwise false.
     */
    CanCreateAppointmentInAssociateDiaries(request: carriers.Sentry_CanCreateAppointmentInAssociateDiariesRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * CanCreateAppointmentInAssociateDiaries will check if the current associate can create appointments in diaries belonging to the associates listed in associateIds. CanCreateAppointmentInAssociateDiaries will only check against associates that are diary owners. If none of the associates listed in the associateIds parameter is a diary owner, the method will return true.
     * @param associateIds - Array of associate ids to check.
     * @returns Returns true if the current associate can create appointments in the diary of all the other associates, otherwise false.
     */
    CanCreateAppointmentInAssociateDiaries(associateIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _CanCreateAppointmentInAllDiaries;
    /**
     * CanCreateAppointmentInAllDiaries will check if the current associate can create appointments in diaries belonging all other associates. CanCreateAppointmentInAssociateDiaries will only check against associates that are diary owners.
     * @returns Returns true if the current associate can create appointments in the diary of all the other associates, otherwise false.
     */
    CanCreateAppointmentInAllDiaries(webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _GetTableRightByContactOwnership;
    /**
     * Return the TableRight from the relationship between the current user and the given user and group.
     * @param request - TableName, ContactId
     * @returns The TableRight
     */
    GetTableRightByContactOwnership(request: carriers.Sentry_GetTableRightByContactOwnershipRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TableRight>;
    /**
     * Return the TableRight from the relationship between the current user and the given user and group.
     * @param tableName - Name of the table to get the TableRights from.
     * @param contactId - The owner contact.
     * @returns The TableRight
     */
    GetTableRightByContactOwnership(tableName: string, contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TableRight>;
}
//# sourceMappingURL=SentryAgent.d.ts.map