import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Run reports, set favourites, labels
 */
export interface IReportAgent {
    CreateDefaultReportEntity(): Promise<carriers.ReportEntity>;
    SaveReportEntity(entity: carriers.ReportEntity): Promise<carriers.ReportEntity>;
    CreateDefaultReportLabelLayoutEntity(): Promise<carriers.ReportLabelLayoutEntity>;
    SaveReportLabelLayoutEntity(entity: carriers.ReportLabelLayoutEntity): Promise<carriers.ReportLabelLayoutEntity>;
    DeleteReportLabelLayoutEntity(ReportLabelLayoutEntityId: number): Promise<void>;
    GetReportEntity(reportEntityId: number): Promise<carriers.ReportEntity>;
    CreateFavorite(request: carriers.Report_CreateFavoriteRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ReportEntity>;
    CreateFavorite(sourceId: number, name: string, description: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ReportEntity>;
    DeleteFavorite(request: carriers.Report_DeleteFavoriteRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteFavorite(reportEntityId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    UpdateFavorite(request: carriers.Report_UpdateFavoriteRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ReportEntity>;
    UpdateFavorite(reportEntity: carriers.ReportEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ReportEntity>;
    GenerateReport(request: carriers.Report_GenerateReportRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GenerateReport(reportId: number, labelLayoutId: number, filename: string, language: string, fileType: string, restrictions: carriers.ArchiveRestrictionInfo[], webapi_options?: base.WebApiRequestOptions): Promise<string>;
    ImportReport(request: carriers.Report_ImportReportRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    ImportReport(report: string, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    DeleteReport(request: carriers.Report_DeleteReportRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    DeleteReport(reportId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    GetReportLabelLayoutEntity(reportLabelLayoutEntityId: number): Promise<carriers.ReportLabelLayoutEntity>;
}
/**
 * Run reports, set favourites, labels
 */
export declare class ReportAgent extends base.WebApiBase implements IReportAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * Set default values into a new ReportEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultReportEntity(options?: base.WebApiRequestOptions): Promise<carriers.ReportEntity>;
    SaveReportEntity(entity: carriers.ReportEntity, options?: base.WebApiRequestOptions): Promise<carriers.ReportEntity>;
    /**
     * Set default values into a new ReportLabelLayoutEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultReportLabelLayoutEntity(options?: base.WebApiRequestOptions): Promise<carriers.ReportLabelLayoutEntity>;
    SaveReportLabelLayoutEntity(entity: carriers.ReportLabelLayoutEntity, options?: base.WebApiRequestOptions): Promise<carriers.ReportLabelLayoutEntity>;
    DeleteReportLabelLayoutEntity(ReportLabelLayoutEntityId: number, options?: base.WebApiRequestOptions): Promise<void>;
    GetReportEntity(reportEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.ReportEntity>;
    private _CreateFavorite;
    /**
     * Creates the report as favorite. The sourceId is the key to the report that the favorite is based on.
     * @param request - SourceId, Name, Description
     * @returns The new favorite ReportEntity.
     */
    CreateFavorite(request: carriers.Report_CreateFavoriteRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ReportEntity>;
    /**
     * Creates the report as favorite. The sourceId is the key to the report that the favorite is based on.
     * @param sourceId - The primary key to the report to make the favorite from.
     * @param name - The name of the new favorite.
     * @param description - The description of the new favorite.
     * @returns The new favorite ReportEntity.
     */
    CreateFavorite(sourceId: number, name: string, description: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ReportEntity>;
    private _DeleteFavorite;
    /**
     * Deletes the report favorite.
     * @param request - ReportEntityId
     * @returns
     */
    DeleteFavorite(request: carriers.Report_DeleteFavoriteRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Deletes the report favorite.
     * @param reportEntityId - The id of the report favorite to delete.
     * @returns
     */
    DeleteFavorite(reportEntityId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _UpdateFavorite;
    /**
     * Updates the favorite.
     * @param request - ReportEntity
     * @returns The updated ReportEntity carrier.
     */
    UpdateFavorite(request: carriers.Report_UpdateFavoriteRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ReportEntity>;
    /**
     * Updates the favorite.
     * @param reportEntity - ReportEntity carrier containg updated data.
     * @returns The updated ReportEntity carrier.
     */
    UpdateFavorite(reportEntity: carriers.ReportEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ReportEntity>;
    private _GenerateReport;
    /**
     * Generates the report in PDF format
     * @param request - ReportId, LabelLayoutId, Filename, Language, FileType, Restrictions
     * @returns Batch task id, as string. Used to be path to the generated report, but no more.
     */
    GenerateReport(request: carriers.Report_GenerateReportRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Generates the report in PDF format
     * @param reportId - The id of the report.
     * @param labelLayoutId - The id of the labellayout. Use 0 if the report isn't of type label.
     * @param filename - Filename of the report.
     * @param language - Language to use when generating the report.
     * @param fileType -
     * @param restrictions - Use restrictions to provide additional restrictions when generating the report.
     * @returns Batch task id, as string. Used to be path to the generated report, but no more.
     */
    GenerateReport(reportId: number, labelLayoutId: number, filename: string, language: string, fileType: string, restrictions: carriers.ArchiveRestrictionInfo[], webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _ImportReport;
    /**
     * Takes the input stream and create a report. This stream must be on a valid xml format
     * @param request - Report
     * @returns The id of the newly imported report
     */
    ImportReport(request: carriers.Report_ImportReportRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Takes the input stream and create a report. This stream must be on a valid xml format
     * @param report - The report to import in a correct xml format
     * @returns The id of the newly imported report
     */
    ImportReport(report: string, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _DeleteReport;
    /**
     * Delete the report with the given id
     * @param request - ReportId
     * @returns Delete ok?
     */
    DeleteReport(request: carriers.Report_DeleteReportRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Delete the report with the given id
     * @param reportId - The id of the report to delete
     * @returns Delete ok?
     */
    DeleteReport(reportId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    GetReportLabelLayoutEntity(reportLabelLayoutEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.ReportLabelLayoutEntity>;
}
//# sourceMappingURL=ReportAgent.d.ts.map