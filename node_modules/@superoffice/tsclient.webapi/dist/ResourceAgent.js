"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceAgent = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
/**
 * String resource substitution management.
 */
class ResourceAgent extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Resource/";
        super(options);
    }
    async _SetResourceSubstitution(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetResourceSubstitution", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SetResourceSubstitution(resourceName, resourceValues, culture, isActive, webapi_options) {
        let _request = null;
        let _options = null;
        const first = resourceName;
        if (typeof (first) === "object" && first && (typeof (first.ResourceName) != 'undefined' || typeof (first.ResourceValues) != 'undefined' || typeof (first.Culture) != 'undefined' || typeof (first.IsActive) != 'undefined')) {
            _request = resourceName;
            _options = resourceValues;
        }
        else {
            _request = {
                ResourceName: resourceName,
                ResourceValues: resourceValues,
                Culture: culture,
                IsActive: isActive,
            };
            _options = webapi_options;
        }
        return this._SetResourceSubstitution(_request, _options);
    }
    async _DeleteResourceSubstitution(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("DeleteResourceSubstitution", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async DeleteResourceSubstitution(resourceName, culture, webapi_options) {
        let _request = null;
        let _options = null;
        const first = resourceName;
        if (typeof (first) === "object" && first && (typeof (first.ResourceName) != 'undefined' || typeof (first.Culture) != 'undefined')) {
            _request = resourceName;
            _options = culture;
        }
        else {
            _request = {
                ResourceName: resourceName,
                Culture: culture,
            };
            _options = webapi_options;
        }
        return this._DeleteResourceSubstitution(_request, _options);
    }
    async _ActivateResourceSubstitution(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ActivateResourceSubstitution", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async ActivateResourceSubstitution(resourceName, culture, isActive, webapi_options) {
        let _request = null;
        let _options = null;
        const first = resourceName;
        if (typeof (first) === "object" && first && (typeof (first.ResourceName) != 'undefined' || typeof (first.Culture) != 'undefined' || typeof (first.IsActive) != 'undefined')) {
            _request = resourceName;
            _options = culture;
        }
        else {
            _request = {
                ResourceName: resourceName,
                Culture: culture,
                IsActive: isActive,
            };
            _options = webapi_options;
        }
        return this._ActivateResourceSubstitution(_request, _options);
    }
    async _GetResourceSubstitutions(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetResourceSubstitutions", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ResourceOverrideArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetResourceSubstitutions(resourceNames, culture, activeOnly, webapi_options) {
        let _request = null;
        let _options = null;
        const first = resourceNames;
        if (typeof (first) === "object" && first && (typeof (first.ResourceNames) != 'undefined' || typeof (first.Culture) != 'undefined' || typeof (first.ActiveOnly) != 'undefined')) {
            _request = resourceNames;
            _options = culture;
        }
        else {
            _request = {
                ResourceNames: resourceNames,
                Culture: culture,
                ActiveOnly: activeOnly,
            };
            _options = webapi_options;
        }
        return this._GetResourceSubstitutions(_request, _options);
    }
    async _IsResourceSubstitutionActive(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("IsResourceSubstitutionActive", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ResourceOverrideArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async IsResourceSubstitutionActive(resourceNames, culture, webapi_options) {
        let _request = null;
        let _options = null;
        const first = resourceNames;
        if (typeof (first) === "object" && first && (typeof (first.ResourceNames) != 'undefined' || typeof (first.Culture) != 'undefined')) {
            _request = resourceNames;
            _options = culture;
        }
        else {
            _request = {
                ResourceNames: resourceNames,
                Culture: culture,
            };
            _options = webapi_options;
        }
        return this._IsResourceSubstitutionActive(_request, _options);
    }
} // class v1ResourceAgentController 
exports.ResourceAgent = ResourceAgent;
//# sourceMappingURL=ResourceAgent.js.map