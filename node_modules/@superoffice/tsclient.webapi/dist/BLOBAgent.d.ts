import { AxiosRequestConfig } from 'axios';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Collection of all services that works with binary objects (BLOBS), e.g. Images and documents.
 */
export interface IBLOBAgent {
    CreateDefaultBlobEntity(): Promise<carriers.BlobEntity>;
    SaveBlobEntity(entity: carriers.BlobEntity): Promise<carriers.BlobEntity>;
    DeleteBlobEntity(BlobEntityId: number): Promise<void>;
    GetBlobEntity(blobEntityId: number): Promise<carriers.BlobEntity>;
    SetBlobStream(request: carriers.BLOB_SetBlobStreamRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetBlobStream(blobEntityId: number, stream: ArrayBuffer | string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetBlobStream(request: carriers.BLOB_GetBlobStreamRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetBlobStream(blobEntityId: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetProjectImage(request: carriers.BLOB_GetProjectImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetProjectImage(projectId: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetPersonImage(request: carriers.BLOB_GetPersonImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetPersonImage(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    SetProjectImage(request: carriers.BLOB_SetProjectImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetProjectImage(projectId: number, image: ArrayBuffer | string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetPersonImage(request: carriers.BLOB_SetPersonImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetPersonImage(personId: number, image: ArrayBuffer | string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    ChangeProjectImage(request: carriers.BLOB_ChangeProjectImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    ChangeProjectImage(projectId: number, blobId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SaveProjectImage(request: carriers.BLOB_SaveProjectImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SaveProjectImage(description: string, image: ArrayBuffer | string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetBlobEntityOnProject(request: carriers.BLOB_GetBlobEntityOnProjectRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BlobEntity>;
    GetBlobEntityOnProject(projectId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BlobEntity>;
    GetBlobEntityOnPerson(request: carriers.BLOB_GetBlobEntityOnPersonRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BlobEntity>;
    GetBlobEntityOnPerson(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BlobEntity>;
    GetBlobEntityOnCountry(request: carriers.BLOB_GetBlobEntityOnCountryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BlobEntity>;
    GetBlobEntityOnCountry(countryId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BlobEntity>;
    GetBlobEntityOnProduct(request: carriers.BLOB_GetBlobEntityOnProductRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BlobEntity>;
    GetBlobEntityOnProduct(productId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BlobEntity>;
    ChangePersonImage(request: carriers.BLOB_ChangePersonImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    ChangePersonImage(personId: number, blobId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SaveImageStream(request: carriers.BLOB_SaveImageStreamRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    SaveImageStream(type: enums.BlobLinkType, image: ArrayBuffer | string, description: string, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    GetProductImage(request: carriers.BLOB_GetProductImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetProductImage(productId: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    SetProductImage(request: carriers.BLOB_SetProductImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetProductImage(productId: number, image: ArrayBuffer | string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetProductThumbnail(request: carriers.BLOB_GetProductThumbnailRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetProductThumbnail(productId: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    SetProductThumbnail(request: carriers.BLOB_SetProductThumbnailRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetProductThumbnail(productId: number, image: ArrayBuffer | string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    ChangeProductImage(request: carriers.BLOB_ChangeProductImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    ChangeProductImage(productId: number, blobId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetQuoteLineImage(request: carriers.BLOB_GetQuoteLineImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetQuoteLineImage(quoteLineId: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetAppData(request: carriers.BLOB_GetAppDataRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetAppData(key: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    SetAppData(request: carriers.BLOB_SetAppDataRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetAppData(key: string, data: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetPersonImageWithSize(request: carriers.BLOB_GetPersonImageWithSizeRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetPersonImageWithSize(personId: number, width: number, height: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetProjectImageWithSize(request: carriers.BLOB_GetProjectImageWithSizeRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetProjectImageWithSize(projectId: number, width: number, height: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetChatImageWithSize(request: carriers.BLOB_GetChatImageWithSizeRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetChatImageWithSize(chatTopicId: number, width: number, height: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetContactImage(request: carriers.BLOB_GetContactImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetContactImage(contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    SetContactImage(request: carriers.BLOB_SetContactImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetContactImage(contactId: number, image: ArrayBuffer | string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    ChangeContactImage(request: carriers.BLOB_ChangeContactImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    ChangeContactImage(contactId: number, blobId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetBlobEntityOnContact(request: carriers.BLOB_GetBlobEntityOnContactRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BlobEntity>;
    GetBlobEntityOnContact(contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BlobEntity>;
    GetContactImageWithSize(request: carriers.BLOB_GetContactImageWithSizeRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetContactImageWithSize(contactId: number, width: number, height: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetOutputFromBatch(request: carriers.BLOB_GetOutputFromBatchRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    GetOutputFromBatch(batchTaskId: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    CleanupBatchTask(request: carriers.BLOB_CleanupBatchTaskRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    CleanupBatchTask(batchTaskId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
}
/**
 * Collection of all services that works with binary objects (BLOBS), e.g. Images and documents.
 */
export declare class BLOBAgent extends base.WebApiBase implements IBLOBAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * Set default values into a new BlobEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultBlobEntity(options?: base.WebApiRequestOptions): Promise<carriers.BlobEntity>;
    SaveBlobEntity(entity: carriers.BlobEntity, options?: base.WebApiRequestOptions): Promise<carriers.BlobEntity>;
    DeleteBlobEntity(BlobEntityId: number, options?: base.WebApiRequestOptions): Promise<void>;
    GetBlobEntity(blobEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.BlobEntity>;
    private _SetBlobStream;
    /**
     * Store a binary object from it&apos;s stream
     * @param request - BlobEntityId, Stream
     * @returns
     */
    SetBlobStream(request: carriers.BLOB_SetBlobStreamRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Store a binary object from it&apos;s stream
     * @param blobEntityId - Id of the BLOB entity object that the binary data should be stored to.
     * @param stream - The binary object as a Stream
     * @returns
     */
    SetBlobStream(blobEntityId: number, stream: ArrayBuffer | string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetBlobStream;
    /**
     * Get the binary object as a stream
     * @param request - BlobEntityId
     * @returns The binary object as a Stream
     */
    GetBlobStream(request: carriers.BLOB_GetBlobStreamRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    /**
     * Get the binary object as a stream
     * @param blobEntityId - The ID of the BLOB entity object that refers to the binary data
     * @returns The binary object as a Stream
     */
    GetBlobStream(blobEntityId: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    private _GetProjectImage;
    /**
     * Returns the project image that is displayed in the CRM application.
     * @param request - ProjectId
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)
     */
    GetProjectImage(request: carriers.BLOB_GetProjectImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    /**
     * Returns the project image that is displayed in the CRM application.
     * @param projectId - The project id of the project the image belongs to.
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)
     */
    GetProjectImage(projectId: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    private _GetPersonImage;
    /**
     * Returns the person image that is displayed in the CRM application.
     * @param request - PersonId
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)
     */
    GetPersonImage(request: carriers.BLOB_GetPersonImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    /**
     * Returns the person image that is displayed in the CRM application.
     * @param personId - The person id of the person the image belongs to.
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)
     */
    GetPersonImage(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    private _SetProjectImage;
    /**
     * Stores the project image that is displayed in the CRM application.
     * @param request - ProjectId, Image
     * @returns
     */
    SetProjectImage(request: carriers.BLOB_SetProjectImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Stores the project image that is displayed in the CRM application.
     * @param projectId - The project id of the project the image belongs to.
     * @param image - The image that is stored on the project (System.Drawing.Image)
     * @returns
     */
    SetProjectImage(projectId: number, image: ArrayBuffer | string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SetPersonImage;
    /**
     * Stores the person image that is displayed in the CRM application.
     * @param request - PersonId, Image
     * @returns
     */
    SetPersonImage(request: carriers.BLOB_SetPersonImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Stores the person image that is displayed in the CRM application.
     * @param personId - The person id of the person the image belongs to.
     * @param image - The image that is stored on the person (System.Drawing.Image)
     * @returns
     */
    SetPersonImage(personId: number, image: ArrayBuffer | string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _ChangeProjectImage;
    /**
     * Changes the project image link. If the Binary object id is 0, any image link is removed from the project.
     * @param request - ProjectId, BlobId
     * @returns
     */
    ChangeProjectImage(request: carriers.BLOB_ChangeProjectImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Changes the project image link. If the Binary object id is 0, any image link is removed from the project.
     * @param projectId - The project the image is linked to
     * @param blobId - The Binary object id. If the Binary object id is 0, any image link is removed from the project.
     * @returns
     */
    ChangeProjectImage(projectId: number, blobId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SaveProjectImage;
    /**
     * Saves a project image that is displayed in the CRM application&apos;s project image selection dialog to the database.
     * @param request - Description, Image
     * @returns
     */
    SaveProjectImage(request: carriers.BLOB_SaveProjectImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Saves a project image that is displayed in the CRM application&apos;s project image selection dialog to the database.
     * @param description - Image description. Should be image name (e.g. winter.jpg) for project images
     * @param image - The project image (System.Drawing.Image)
     * @returns
     */
    SaveProjectImage(description: string, image: ArrayBuffer | string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetBlobEntityOnProject;
    /**
     * Gets the blob entity that represents the project image binary object.
     * @param request - ProjectId
     * @returns BlobEntity object
     */
    GetBlobEntityOnProject(request: carriers.BLOB_GetBlobEntityOnProjectRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BlobEntity>;
    /**
     * Gets the blob entity that represents the project image binary object.
     * @param projectId - The project id
     * @returns BlobEntity object
     */
    GetBlobEntityOnProject(projectId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BlobEntity>;
    private _GetBlobEntityOnPerson;
    /**
     * Gets the blob entity that represents the person image binary object.
     * @param request - PersonId
     * @returns BlobEntity object
     */
    GetBlobEntityOnPerson(request: carriers.BLOB_GetBlobEntityOnPersonRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BlobEntity>;
    /**
     * Gets the blob entity that represents the person image binary object.
     * @param personId - The person id
     * @returns BlobEntity object
     */
    GetBlobEntityOnPerson(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BlobEntity>;
    private _GetBlobEntityOnCountry;
    /**
     * Gets the blob entity that represents the country flag binary object.
     * @param request - CountryId
     * @returns BlobEntity object
     */
    GetBlobEntityOnCountry(request: carriers.BLOB_GetBlobEntityOnCountryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BlobEntity>;
    /**
     * Gets the blob entity that represents the country flag binary object.
     * @param countryId - The country id
     * @returns BlobEntity object
     */
    GetBlobEntityOnCountry(countryId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BlobEntity>;
    private _GetBlobEntityOnProduct;
    /**
     * Gets the blob entity that represents the product image binary object.
     * @param request - ProductId
     * @returns BlobEntity object
     */
    GetBlobEntityOnProduct(request: carriers.BLOB_GetBlobEntityOnProductRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BlobEntity>;
    /**
     * Gets the blob entity that represents the product image binary object.
     * @param productId - The product id
     * @returns BlobEntity object
     */
    GetBlobEntityOnProduct(productId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BlobEntity>;
    private _ChangePersonImage;
    /**
     *
     * @param request - PersonId, BlobId
     * @returns
     */
    ChangePersonImage(request: carriers.BLOB_ChangePersonImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     *
     * @param personId - The person the image is linked to
     * @param blobId - The Binary object id. If the Binary object id is 0, any image link is removed from the person.
     * @returns
     */
    ChangePersonImage(personId: number, blobId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SaveImageStream;
    /**
     * Stores an image in the database without linking it to a project or a person. It is possible to ChangePersonImage or ChangeProjectImage to attach image later.
     * @param request - Type, Image, Description
     * @returns The blob id
     */
    SaveImageStream(request: carriers.BLOB_SaveImageStreamRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Stores an image in the database without linking it to a project or a person. It is possible to ChangePersonImage or ChangeProjectImage to attach image later.
     * @param type - The type of the image.
     * @param image - Image to store
     * @param description - Image description
     * @returns The blob id
     */
    SaveImageStream(type: enums.BlobLinkType, image: ArrayBuffer | string, description: string, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _GetProductImage;
    /**
     * Returns the product image (rank=1) that is displayed in the CRM application.
     * @param request - ProductId
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)
     */
    GetProductImage(request: carriers.BLOB_GetProductImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    /**
     * Returns the product image (rank=1) that is displayed in the CRM application.
     * @param productId - The product id of the product the image belongs to.
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)
     */
    GetProductImage(productId: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    private _SetProductImage;
    /**
     * Stores the product image that is displayed in the CRM application. The image is scaled down to max 1000x1000. This method operates only the main (rank=1) image; future extensions may support multiple images. A thumbnail of size 75x75 is also automatically set.
     * @param request - ProductId, Image
     * @returns
     */
    SetProductImage(request: carriers.BLOB_SetProductImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Stores the product image that is displayed in the CRM application. The image is scaled down to max 1000x1000. This method operates only the main (rank=1) image; future extensions may support multiple images. A thumbnail of size 75x75 is also automatically set.
     * @param productId - The product id of the product the image belongs to.
     * @param image - The image that is stored on the product (System.Drawing.Image), scaled down to no more than 1000x1000
     * @returns
     */
    SetProductImage(productId: number, image: ArrayBuffer | string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetProductThumbnail;
    /**
     * Returns the product thumbnail that is displayed in the CRM application.
     * @param request - ProductId
     * @returns The thumbnail as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)
     */
    GetProductThumbnail(request: carriers.BLOB_GetProductThumbnailRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    /**
     * Returns the product thumbnail that is displayed in the CRM application.
     * @param productId - The product id of the product the thumbnail belongs to.
     * @returns The thumbnail as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)
     */
    GetProductThumbnail(productId: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    private _SetProductThumbnail;
    /**
     * Stores the product thumbnail that is displayed in the CRM application. The image is scaled down to max 200x200 pixels.
     * @param request - ProductId, Image
     * @returns
     */
    SetProductThumbnail(request: carriers.BLOB_SetProductThumbnailRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Stores the product thumbnail that is displayed in the CRM application. The image is scaled down to max 200x200 pixels.
     * @param productId - The product id of the product the image belongs to.
     * @param image - The image that is stored on the product (System.Drawing.Image); scaled down to no more than 200x200
     * @returns
     */
    SetProductThumbnail(productId: number, image: ArrayBuffer | string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _ChangeProductImage;
    /**
     *
     * @param request - ProductId, BlobId
     * @returns
     */
    ChangeProductImage(request: carriers.BLOB_ChangeProductImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     *
     * @param productId - The product the image is linked to
     * @param blobId - The Binary object id. If the Binary object id is 0, any image link is removed from the product.
     * @returns
     */
    ChangeProductImage(productId: number, blobId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetQuoteLineImage;
    /**
     * Returns the quoteline image (rank=1) that is displayed in the CRM application.
     * @param request - QuoteLineId
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)
     */
    GetQuoteLineImage(request: carriers.BLOB_GetQuoteLineImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    /**
     * Returns the quoteline image (rank=1) that is displayed in the CRM application.
     * @param quoteLineId - The product id of the quoteline the image belongs to.
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)
     */
    GetQuoteLineImage(quoteLineId: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    private _GetAppData;
    /**
     * Get a CLOB (limited to a reasonable size by the mechanics of Web Services) according to a string key; ALSO limits to the current ApplicationToken if any
     * @param request - Key
     * @returns The applications value, suggested to be a JSON, XML or other readable structure
     */
    GetAppData(request: carriers.BLOB_GetAppDataRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Get a CLOB (limited to a reasonable size by the mechanics of Web Services) according to a string key; ALSO limits to the current ApplicationToken if any
     * @param key - The key string, less than 200 characters. Must be unique within each application.
     * @returns The applications value, suggested to be a JSON, XML or other readable structure
     */
    GetAppData(key: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _SetAppData;
    /**
     * Get a CLOB (limited to a reasonable size by the mechanics of Web Services) according to a string key; ALSO limits to the current ApplicationToken if any. Existing data, if any, will be overwritten. Overwrite with a blank value to delete.
     * @param request - Key, Data
     * @returns This method has no return value
     */
    SetAppData(request: carriers.BLOB_SetAppDataRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Get a CLOB (limited to a reasonable size by the mechanics of Web Services) according to a string key; ALSO limits to the current ApplicationToken if any. Existing data, if any, will be overwritten. Overwrite with a blank value to delete.
     * @param key - The key string, less than 200 characters. Must be unique within each application.
     * @param data - The applications value, suggested to be a JSON, XML or other readable structure
     * @returns This method has no return value
     */
    SetAppData(key: string, data: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetPersonImageWithSize;
    /**
     * Returns the person image that is displayed in the CRM application with a specified maximum size.
     * @param request - PersonId, Width, Height
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a jpeg/base64 encoded string.)
     */
    GetPersonImageWithSize(request: carriers.BLOB_GetPersonImageWithSizeRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    /**
     * Returns the person image that is displayed in the CRM application with a specified maximum size.
     * @param personId - The person id of the person the image belongs to.
     * @param width - The maximum with of the returned image. Specify <= 0 to preserve aspect ratio of existing image
     * @param height - The maximum height of the returned image. Specify <= 0 to preserve aspect ratio of existing image
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a jpeg/base64 encoded string.)
     */
    GetPersonImageWithSize(personId: number, width: number, height: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    private _GetProjectImageWithSize;
    /**
     * Returns the project image that is displayed in the CRM application with a specified maximum size.
     * @param request - ProjectId, Width, Height
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a jpeg/base64 encoded string.)
     */
    GetProjectImageWithSize(request: carriers.BLOB_GetProjectImageWithSizeRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    /**
     * Returns the project image that is displayed in the CRM application with a specified maximum size.
     * @param projectId - The project id of the project the image belongs to.
     * @param width - The maximum with of the returned image. Specify <= 0 to preserve aspect ratio of existing image
     * @param height - The maximum height of the returned image. Specify <= 0 to preserve aspect ratio of existing image
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a jpeg/base64 encoded string.)
     */
    GetProjectImageWithSize(projectId: number, width: number, height: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    private _GetChatImageWithSize;
    /**
     * Returns the chat image that is displayed in chat with a specified maximum size.
     * @param request - ChatTopicId, Width, Height
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a jpeg/base64 encoded string.)
     */
    GetChatImageWithSize(request: carriers.BLOB_GetChatImageWithSizeRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    /**
     * Returns the chat image that is displayed in chat with a specified maximum size.
     * @param chatTopicId - The project id of the project the image belongs to.
     * @param width - The maximum with of the returned image. Specify <= 0 to preserve aspect ratio of existing image
     * @param height - The maximum height of the returned image. Specify <= 0 to preserve aspect ratio of existing image
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a jpeg/base64 encoded string.)
     */
    GetChatImageWithSize(chatTopicId: number, width: number, height: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    private _GetContactImage;
    /**
     * Returns the contact image that is displayed in the CRM application.
     * @param request - ContactId
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)
     */
    GetContactImage(request: carriers.BLOB_GetContactImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    /**
     * Returns the contact image that is displayed in the CRM application.
     * @param contactId - The contact id of the contact the image belongs to.
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)
     */
    GetContactImage(contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    private _SetContactImage;
    /**
     * Stores the contact image that is displayed in the CRM application.
     * @param request - ContactId, Image
     * @returns
     */
    SetContactImage(request: carriers.BLOB_SetContactImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Stores the contact image that is displayed in the CRM application.
     * @param contactId - The contact id of the contact the image belongs to.
     * @param image - The image that is stored on the contact (System.Drawing.Image)
     * @returns
     */
    SetContactImage(contactId: number, image: ArrayBuffer | string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _ChangeContactImage;
    /**
     * Changes the contact image link. If the Binary object id is 0, any image link is removed from the contact.
     * @param request - ContactId, BlobId
     * @returns
     */
    ChangeContactImage(request: carriers.BLOB_ChangeContactImageRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Changes the contact image link. If the Binary object id is 0, any image link is removed from the contact.
     * @param contactId - The Contact the image is linked to
     * @param blobId - The Binary object id. If the Binary object id is 0, any image link is removed from the Contact.
     * @returns
     */
    ChangeContactImage(contactId: number, blobId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetBlobEntityOnContact;
    /**
     * Gets the blob entity that represents the contact image binary object.
     * @param request - ContactId
     * @returns BlobEntity object
     */
    GetBlobEntityOnContact(request: carriers.BLOB_GetBlobEntityOnContactRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BlobEntity>;
    /**
     * Gets the blob entity that represents the contact image binary object.
     * @param contactId - The Contact id
     * @returns BlobEntity object
     */
    GetBlobEntityOnContact(contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BlobEntity>;
    private _GetContactImageWithSize;
    /**
     * Returns the contact image that is displayed in the CRM application with a specified maximum size.
     * @param request - ContactId, Width, Height
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a jpeg/base64 encoded string.)
     */
    GetContactImageWithSize(request: carriers.BLOB_GetContactImageWithSizeRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    /**
     * Returns the contact image that is displayed in the CRM application with a specified maximum size.
     * @param contactId - The contact id of the Contact the image belongs to.
     * @param width - The maximum with of the returned image. Specify <= 0 to preserve aspect ratio of existing image
     * @param height - The maximum height of the returned image. Specify <= 0 to preserve aspect ratio of existing image
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a jpeg/base64 encoded string.)
     */
    GetContactImageWithSize(contactId: number, width: number, height: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    private _GetOutputFromBatch;
    /**
     * Get the output of a batchtask as a stream
     * @param request - BatchTaskId
     * @returns The binary object as a Stream
     */
    GetOutputFromBatch(request: carriers.BLOB_GetOutputFromBatchRequest, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    /**
     * Get the output of a batchtask as a stream
     * @param batchTaskId - The ID of the batchtask that created the output data
     * @returns The binary object as a Stream
     */
    GetOutputFromBatch(batchTaskId: number, webapi_options?: base.WebApiRequestOptions): Promise<ArrayBuffer | string>;
    private _CleanupBatchTask;
    /**
     * Removes the binary objects linked to the batch task, the links themselves and the batch task.
     * @param request - BatchTaskId
     * @returns
     */
    CleanupBatchTask(request: carriers.BLOB_CleanupBatchTaskRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Removes the binary objects linked to the batch task, the links themselves and the batch task.
     * @param batchTaskId - The ID of the batchtask that created the output data
     * @returns
     */
    CleanupBatchTask(batchTaskId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
}
//# sourceMappingURL=BLOBAgent.d.ts.map