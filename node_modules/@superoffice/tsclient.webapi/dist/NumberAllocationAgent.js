"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.NumberAllocationAgent = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
/**
 * This agent can be used to manage number allocation
 */
class NumberAllocationAgent extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/NumberAllocation/";
        super(options);
    }
    /**
     * Set default values into a new RefCountEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    async CreateDefaultRefCountEntity(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultRefCountEntity", null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_RefCountEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing RefCountEntity or creates a new RefCountEntity if the id parameter is empty
     * @param entity - The RefCountEntity to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated RefCountEntity
     */
    async SaveRefCountEntity(entity, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveRefCountEntity", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_RefCountEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Deletes the RefCountEntity
     * @param RefCountEntityId - The id of the RefCountEntity to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    async DeleteRefCountEntity(RefCountEntityId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteRefCountEntity?RefCountEntityId=" + RefCountEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Gets a RefCountEntity object.
     * @param refCountEntityId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single RefCountEntity
     */
    async GetRefCountEntity(refCountEntityId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetRefCountEntity?refCountEntityId=" + refCountEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_RefCountEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async _SaveDefaultNumbering(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SaveDefaultNumbering", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SaveDefaultNumbering(refCountEntity, webapi_options) {
        let _request = null;
        let _options = null;
        const first = refCountEntity;
        if (typeof (first) === "object" && first && (typeof (first.RefCountEntity) != 'undefined')) {
            _request = refCountEntity;
            _options = webapi_options;
        }
        else {
            _request = {
                RefCountEntity: refCountEntity,
            };
            _options = webapi_options;
        }
        return this._SaveDefaultNumbering(_request, _options);
    }
    async _GetNumberEachTemplate(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetNumberEachTemplate", undefined, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Returns true or false if Automatically create new counters for new document templates
     * @returns Is NumberEachTemplate?
     */
    async GetNumberEachTemplate(webapi_options) {
        return this._GetNumberEachTemplate(webapi_options);
    }
    async _SetNumberEachTemplate(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetNumberEachTemplate", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SetNumberEachTemplate(setValue, webapi_options) {
        let _request = null;
        let _options = null;
        const first = setValue;
        if (typeof (first) === "object" && first && (typeof (first.SetValue) != 'undefined')) {
            _request = setValue;
            _options = webapi_options;
        }
        else {
            _request = {
                SetValue: setValue,
            };
            _options = webapi_options;
        }
        return this._SetNumberEachTemplate(_request, _options);
    }
} // class v1NumberAllocationAgentController 
exports.NumberAllocationAgent = NumberAllocationAgent;
//# sourceMappingURL=NumberAllocationAgent.js.map