import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Appointments appear in the diary, and have links to a Contact/Person and possibly a Project or Sale. They have start and end time+date.
 * Collection of all services that works with Appointment data.
 *
 * `api/v1/Appointment`
 */
export interface IAppointmentRestApi {
    GetDefault(options?: base.WebApiGetRequestOptions): Promise<carriers.AppointmentEntity>;
    Post(entity: carriers.AppointmentEntity, options?: base.WebApiPutRequestOptions): Promise<carriers.AppointmentEntity>;
    PutById(id: number, entity: carriers.AppointmentEntity, options?: base.WebApiPutRequestOptions): Promise<carriers.AppointmentEntity>;
    PatchById(id: number, entity: base.WebApiPatchOperation[] | carriers.AppointmentEntity, options?: base.WebApiPutRequestOptions): Promise<carriers.AppointmentEntity>;
    DeleteById(AppointmentEntityId: number, options?: base.WebApiPutRequestOptions): Promise<void>;
    GetById(AppointmentEntityId: number, options?: base.WebApiGetRequestOptions): Promise<carriers.AppointmentEntity>;
}
/**
 * Appointments appear in the diary, and have links to a Contact/Person and possibly a Project or Sale. They have start and end time+date.
 * Collection of all services that works with Appointment data.
 *
 * `api/v1/Appointment`
 */
export declare class AppointmentRestApi extends base.WebApiBase implements IAppointmentRestApi {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * `GET /api/v1/Appointment/default`
     * Set default values into a new AppointmentEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    GetDefault(options?: base.WebApiGetRequestOptions): Promise<carriers.AppointmentEntity>;
    Post(newAppointment: carriers.AppointmentEntity, options?: base.WebApiPutRequestOptions): Promise<carriers.AppointmentEntity>;
    PutById(id: number, appointment: carriers.AppointmentEntity, options?: base.WebApiPutRequestOptions): Promise<carriers.AppointmentEntity>;
    PatchById(id: number, appointment: base.WebApiPatchOperation[] | carriers.AppointmentEntity, options?: base.WebApiPutRequestOptions): Promise<carriers.AppointmentEntity>;
    DeleteById(appointmentId: number, options?: base.WebApiPutRequestOptions): Promise<void>;
    GetById(appointmentId: number, options?: base.WebApiGetRequestOptions): Promise<carriers.AppointmentEntity>;
}
//# sourceMappingURL=AppointmentRestApi.d.ts.map