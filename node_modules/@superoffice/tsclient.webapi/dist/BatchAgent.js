"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.BatchAgent = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
/**
 * Start, stop and monitor predefined batch tasks
 */
class BatchAgent extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Batch/";
        super(options);
    }
    async _GetBatchTaskInfo(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetBatchTaskInfo", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_BatchTaskInfo_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetBatchTaskInfo(id, webapi_options) {
        let _request = null;
        let _options = null;
        const first = id;
        if (typeof (first) === "object" && first && (typeof (first.Id) != 'undefined')) {
            _request = id;
            _options = webapi_options;
        }
        else {
            _request = {
                Id: id,
            };
            _options = webapi_options;
        }
        return this._GetBatchTaskInfo(_request, _options);
    }
    async _GetBatchTaskInfosByAssociates(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetBatchTaskInfosByAssociates", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_BatchTaskInfoArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetBatchTaskInfosByAssociates(associateIds, webapi_options) {
        let _request = null;
        let _options = null;
        const first = associateIds;
        if (typeof (first) === "object" && first && (typeof (first.AssociateIds) != 'undefined')) {
            _request = associateIds;
            _options = webapi_options;
        }
        else {
            _request = {
                AssociateIds: associateIds,
            };
            _options = webapi_options;
        }
        return this._GetBatchTaskInfosByAssociates(_request, _options);
    }
    async _StartBatchJob(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("StartBatchJob", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async StartBatchJob(batchTaskInfo, webapi_options) {
        let _request = null;
        let _options = null;
        const first = batchTaskInfo;
        if (typeof (first) === "object" && first && (typeof (first.BatchTaskInfo) != 'undefined')) {
            _request = batchTaskInfo;
            _options = webapi_options;
        }
        else {
            _request = {
                BatchTaskInfo: batchTaskInfo,
            };
            _options = webapi_options;
        }
        return this._StartBatchJob(_request, _options);
    }
    async _StopBatchJob(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("StopBatchJob", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async StopBatchJob(id, webapi_options) {
        let _request = null;
        let _options = null;
        const first = id;
        if (typeof (first) === "object" && first && (typeof (first.Id) != 'undefined')) {
            _request = id;
            _options = webapi_options;
        }
        else {
            _request = {
                Id: id,
            };
            _options = webapi_options;
        }
        return this._StopBatchJob(_request, _options);
    }
    async _GetBatchTaskInfosByState(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetBatchTaskInfosByState", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_BatchTaskInfoArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetBatchTaskInfosByState(state, webapi_options) {
        let _request = null;
        let _options = null;
        const first = state;
        if (typeof (first) === "object" && first && (typeof (first.State) != 'undefined')) {
            _request = state;
            _options = webapi_options;
        }
        else {
            _request = {
                State: state,
            };
            _options = webapi_options;
        }
        return this._GetBatchTaskInfosByState(_request, _options);
    }
    async _UpdateBatchTask(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("UpdateBatchTask", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_BatchTaskInfo_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async UpdateBatchTask(batchTaskInfo, webapi_options) {
        let _request = null;
        let _options = null;
        const first = batchTaskInfo;
        if (typeof (first) === "object" && first && (typeof (first.BatchTaskInfo) != 'undefined')) {
            _request = batchTaskInfo;
            _options = webapi_options;
        }
        else {
            _request = {
                BatchTaskInfo: batchTaskInfo,
            };
            _options = webapi_options;
        }
        return this._UpdateBatchTask(_request, _options);
    }
    async _GetBatchTaskInfosByNameAndState(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetBatchTaskInfosByNameAndState", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_BatchTaskInfoArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetBatchTaskInfosByNameAndState(name, state, webapi_options) {
        let _request = null;
        let _options = null;
        const first = name;
        if (typeof (first) === "object" && first && (typeof (first.Name) != 'undefined' || typeof (first.State) != 'undefined')) {
            _request = name;
            _options = state;
        }
        else {
            _request = {
                Name: name,
                State: state,
            };
            _options = webapi_options;
        }
        return this._GetBatchTaskInfosByNameAndState(_request, _options);
    }
    async _GetBatchTaskInfosByNameAndAssociates(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetBatchTaskInfosByNameAndAssociates", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_BatchTaskInfoArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetBatchTaskInfosByNameAndAssociates(name, associateIds, webapi_options) {
        let _request = null;
        let _options = null;
        const first = name;
        if (typeof (first) === "object" && first && (typeof (first.Name) != 'undefined' || typeof (first.AssociateIds) != 'undefined')) {
            _request = name;
            _options = associateIds;
        }
        else {
            _request = {
                Name: name,
                AssociateIds: associateIds,
            };
            _options = webapi_options;
        }
        return this._GetBatchTaskInfosByNameAndAssociates(_request, _options);
    }
    async _GetBatchTaskInfosByAssociatesAndState(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetBatchTaskInfosByAssociatesAndState", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_BatchTaskInfoArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetBatchTaskInfosByAssociatesAndState(associateIds, state, webapi_options) {
        let _request = null;
        let _options = null;
        const first = associateIds;
        if (typeof (first) === "object" && first && (typeof (first.AssociateIds) != 'undefined' || typeof (first.State) != 'undefined')) {
            _request = associateIds;
            _options = state;
        }
        else {
            _request = {
                AssociateIds: associateIds,
                State: state,
            };
            _options = webapi_options;
        }
        return this._GetBatchTaskInfosByAssociatesAndState(_request, _options);
    }
    async _DeleteBatchTasks(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("DeleteBatchTasks", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async DeleteBatchTasks(batchTaskIds, webapi_options) {
        let _request = null;
        let _options = null;
        const first = batchTaskIds;
        if (typeof (first) === "object" && first && (typeof (first.BatchTaskIds) != 'undefined')) {
            _request = batchTaskIds;
            _options = webapi_options;
        }
        else {
            _request = {
                BatchTaskIds: batchTaskIds,
            };
            _options = webapi_options;
        }
        return this._DeleteBatchTasks(_request, _options);
    }
    async _DeleteBatchTask(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("DeleteBatchTask", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async DeleteBatchTask(batchTaskId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = batchTaskId;
        if (typeof (first) === "object" && first && (typeof (first.BatchTaskId) != 'undefined')) {
            _request = batchTaskId;
            _options = webapi_options;
        }
        else {
            _request = {
                BatchTaskId: batchTaskId,
            };
            _options = webapi_options;
        }
        return this._DeleteBatchTask(_request, _options);
    }
    async _GetAllBatchTaskInfosByName(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetAllBatchTaskInfosByName", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_BatchTaskInfoArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetAllBatchTaskInfosByName(taskName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = taskName;
        if (typeof (first) === "object" && first && (typeof (first.TaskName) != 'undefined')) {
            _request = taskName;
            _options = webapi_options;
        }
        else {
            _request = {
                TaskName: taskName,
            };
            _options = webapi_options;
        }
        return this._GetAllBatchTaskInfosByName(_request, _options);
    }
    async _GetAllBatchTaskInfosByNameAndState(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetAllBatchTaskInfosByNameAndState", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_BatchTaskInfoArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetAllBatchTaskInfosByNameAndState(taskName, state, webapi_options) {
        let _request = null;
        let _options = null;
        const first = taskName;
        if (typeof (first) === "object" && first && (typeof (first.TaskName) != 'undefined' || typeof (first.State) != 'undefined')) {
            _request = taskName;
            _options = state;
        }
        else {
            _request = {
                TaskName: taskName,
                State: state,
            };
            _options = webapi_options;
        }
        return this._GetAllBatchTaskInfosByNameAndState(_request, _options);
    }
    async _GetSystemBatchTaskInfosByName(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetSystemBatchTaskInfosByName", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_BatchTaskInfoArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetSystemBatchTaskInfosByName(taskName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = taskName;
        if (typeof (first) === "object" && first && (typeof (first.TaskName) != 'undefined')) {
            _request = taskName;
            _options = webapi_options;
        }
        else {
            _request = {
                TaskName: taskName,
            };
            _options = webapi_options;
        }
        return this._GetSystemBatchTaskInfosByName(_request, _options);
    }
    async _GetSystemBatchTaskInfosByNameAndState(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetSystemBatchTaskInfosByNameAndState", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_BatchTaskInfoArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetSystemBatchTaskInfosByNameAndState(taskName, state, webapi_options) {
        let _request = null;
        let _options = null;
        const first = taskName;
        if (typeof (first) === "object" && first && (typeof (first.TaskName) != 'undefined' || typeof (first.State) != 'undefined')) {
            _request = taskName;
            _options = state;
        }
        else {
            _request = {
                TaskName: taskName,
                State: state,
            };
            _options = webapi_options;
        }
        return this._GetSystemBatchTaskInfosByNameAndState(_request, _options);
    }
} // class v1BatchAgentController 
exports.BatchAgent = BatchAgent;
//# sourceMappingURL=BatchAgent.js.map