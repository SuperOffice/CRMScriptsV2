"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.CRMScriptAgent = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
/**
 * Manage and execute CRMScript functions.
 */
class CRMScriptAgent extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/CRMScript/";
        super(options);
    }
    /**
     * Set default values into a new CRMScriptEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    async CreateDefaultCRMScriptEntity(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultCRMScriptEntity", null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_CRMScriptEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing CRMScriptEntity or creates a new CRMScriptEntity if the id parameter is empty
     * @param entity - The CRMScriptEntity to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated CRMScriptEntity
     */
    async SaveCRMScriptEntity(entity, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveCRMScriptEntity", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_CRMScriptEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Deletes the CRMScriptEntity
     * @param CRMScriptEntityId - The id of the CRMScriptEntity to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    async DeleteCRMScriptEntity(CRMScriptEntityId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteCRMScriptEntity?CRMScriptEntityId=" + CRMScriptEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Set default values into a new TriggerScriptEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    async CreateDefaultTriggerScriptEntity(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultTriggerScriptEntity", null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_TriggerScriptEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing TriggerScriptEntity or creates a new TriggerScriptEntity if the id parameter is empty
     * @param entity - The TriggerScriptEntity to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated TriggerScriptEntity
     */
    async SaveTriggerScriptEntity(entity, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveTriggerScriptEntity", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_TriggerScriptEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Deletes the TriggerScriptEntity
     * @param TriggerScriptEntityId - The id of the TriggerScriptEntity to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    async DeleteTriggerScriptEntity(TriggerScriptEntityId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteTriggerScriptEntity?TriggerScriptEntityId=" + TriggerScriptEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async _GetCRMScriptByUniqueIdentifier(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetCRMScriptByUniqueIdentifier", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_Script_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetCRMScriptByUniqueIdentifier(uniqueIdentifier, webapi_options) {
        let _request = null;
        let _options = null;
        const first = uniqueIdentifier;
        if (typeof (first) === "object" && first && (typeof (first.UniqueIdentifier) != 'undefined')) {
            _request = uniqueIdentifier;
            _options = webapi_options;
        }
        else {
            _request = {
                UniqueIdentifier: uniqueIdentifier,
            };
            _options = webapi_options;
        }
        return this._GetCRMScriptByUniqueIdentifier(_request, _options);
    }
    async _SaveCRMScriptByUniqueIdentifier(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SaveCRMScriptByUniqueIdentifier", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_Script_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SaveCRMScriptByUniqueIdentifier(uniqueIdentifier, crmscript, webapi_options) {
        let _request = null;
        let _options = null;
        const first = uniqueIdentifier;
        if (typeof (first) === "object" && first && (typeof (first.UniqueIdentifier) != 'undefined' || typeof (first.Crmscript) != 'undefined')) {
            _request = uniqueIdentifier;
            _options = crmscript;
        }
        else {
            _request = {
                UniqueIdentifier: uniqueIdentifier,
                Crmscript: crmscript,
            };
            _options = webapi_options;
        }
        return this._SaveCRMScriptByUniqueIdentifier(_request, _options);
    }
    async _DeleteCRMScriptByUniqueIdentifier(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("DeleteCRMScriptByUniqueIdentifier", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async DeleteCRMScriptByUniqueIdentifier(uniqueIdentifier, webapi_options) {
        let _request = null;
        let _options = null;
        const first = uniqueIdentifier;
        if (typeof (first) === "object" && first && (typeof (first.UniqueIdentifier) != 'undefined')) {
            _request = uniqueIdentifier;
            _options = webapi_options;
        }
        else {
            _request = {
                UniqueIdentifier: uniqueIdentifier,
            };
            _options = webapi_options;
        }
        return this._DeleteCRMScriptByUniqueIdentifier(_request, _options);
    }
    /*
     * Gets a CRMScriptEntity object.
     * @param cRMScriptEntityId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single CRMScriptEntity
     */
    async GetCRMScriptEntity(cRMScriptEntityId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetCRMScriptEntity?cRMScriptEntityId=" + cRMScriptEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_CRMScriptEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async _ExecuteScript(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ExecuteScript", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async ExecuteScript(cRMScriptId, parameters, webapi_options) {
        let _request = null;
        let _options = null;
        const first = cRMScriptId;
        if (typeof (first) === "object" && first && (typeof (first.CRMScriptId) != 'undefined' || typeof (first.Parameters) != 'undefined')) {
            _request = cRMScriptId;
            _options = parameters;
        }
        else {
            _request = {
                CRMScriptId: cRMScriptId,
                Parameters: parameters,
            };
            _options = webapi_options;
        }
        return this._ExecuteScript(_request, _options);
    }
    async _ExecuteScriptByIncludeId(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ExecuteScriptByIncludeId", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async ExecuteScriptByIncludeId(cRMScriptIncludeId, parameters, webapi_options) {
        let _request = null;
        let _options = null;
        const first = cRMScriptIncludeId;
        if (typeof (first) === "object" && first && (typeof (first.CRMScriptIncludeId) != 'undefined' || typeof (first.Parameters) != 'undefined')) {
            _request = cRMScriptIncludeId;
            _options = parameters;
        }
        else {
            _request = {
                CRMScriptIncludeId: cRMScriptIncludeId,
                Parameters: parameters,
            };
            _options = webapi_options;
        }
        return this._ExecuteScriptByIncludeId(_request, _options);
    }
    async _ExecuteScriptByUniqueId(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ExecuteScriptByUniqueId", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async ExecuteScriptByUniqueId(cRMScriptUniqueId, parameters, webapi_options) {
        let _request = null;
        let _options = null;
        const first = cRMScriptUniqueId;
        if (typeof (first) === "object" && first && (typeof (first.CRMScriptUniqueId) != 'undefined' || typeof (first.Parameters) != 'undefined')) {
            _request = cRMScriptUniqueId;
            _options = parameters;
        }
        else {
            _request = {
                CRMScriptUniqueId: cRMScriptUniqueId,
                Parameters: parameters,
            };
            _options = webapi_options;
        }
        return this._ExecuteScriptByUniqueId(_request, _options);
    }
    async _ExecuteScriptAsEvent(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ExecuteScriptAsEvent", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_EventData_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async ExecuteScriptAsEvent(cRMScriptId, eventData, webapi_options) {
        let _request = null;
        let _options = null;
        const first = cRMScriptId;
        if (typeof (first) === "object" && first && (typeof (first.CRMScriptId) != 'undefined' || typeof (first.EventData) != 'undefined')) {
            _request = cRMScriptId;
            _options = eventData;
        }
        else {
            _request = {
                CRMScriptId: cRMScriptId,
                EventData: eventData,
            };
            _options = webapi_options;
        }
        return this._ExecuteScriptAsEvent(_request, _options);
    }
    async _ExecuteScriptAsEventByUniqueId(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ExecuteScriptAsEventByUniqueId", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_EventData_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async ExecuteScriptAsEventByUniqueId(cRMScriptUniqueId, eventData, webapi_options) {
        let _request = null;
        let _options = null;
        const first = cRMScriptUniqueId;
        if (typeof (first) === "object" && first && (typeof (first.CRMScriptUniqueId) != 'undefined' || typeof (first.EventData) != 'undefined')) {
            _request = cRMScriptUniqueId;
            _options = eventData;
        }
        else {
            _request = {
                CRMScriptUniqueId: cRMScriptUniqueId,
                EventData: eventData,
            };
            _options = webapi_options;
        }
        return this._ExecuteScriptAsEventByUniqueId(_request, _options);
    }
    async _ValidateScript(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ValidateScript", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_CRMScriptResult_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async ValidateScript(cRMScriptId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = cRMScriptId;
        if (typeof (first) === "object" && first && (typeof (first.CRMScriptId) != 'undefined')) {
            _request = cRMScriptId;
            _options = webapi_options;
        }
        else {
            _request = {
                CRMScriptId: cRMScriptId,
            };
            _options = webapi_options;
        }
        return this._ValidateScript(_request, _options);
    }
    async _ValidateScriptByIncludeId(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ValidateScriptByIncludeId", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_CRMScriptResult_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async ValidateScriptByIncludeId(cRMScriptIncludeId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = cRMScriptIncludeId;
        if (typeof (first) === "object" && first && (typeof (first.CRMScriptIncludeId) != 'undefined')) {
            _request = cRMScriptIncludeId;
            _options = webapi_options;
        }
        else {
            _request = {
                CRMScriptIncludeId: cRMScriptIncludeId,
            };
            _options = webapi_options;
        }
        return this._ValidateScriptByIncludeId(_request, _options);
    }
    async _ValidateScriptByUniqueId(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ValidateScriptByUniqueId", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_CRMScriptResult_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async ValidateScriptByUniqueId(cRMScriptUniqueId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = cRMScriptUniqueId;
        if (typeof (first) === "object" && first && (typeof (first.CRMScriptUniqueId) != 'undefined')) {
            _request = cRMScriptUniqueId;
            _options = webapi_options;
        }
        else {
            _request = {
                CRMScriptUniqueId: cRMScriptUniqueId,
            };
            _options = webapi_options;
        }
        return this._ValidateScriptByUniqueId(_request, _options);
    }
    /*
     * Gets a TriggerScriptEntity object.
     * @param triggerScriptEntityId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single TriggerScriptEntity
     */
    async GetTriggerScriptEntity(triggerScriptEntityId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetTriggerScriptEntity?triggerScriptEntityId=" + triggerScriptEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_TriggerScriptEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async _GetTriggerScriptByUniqueId(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetTriggerScriptByUniqueId", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_TriggerScriptEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetTriggerScriptByUniqueId(triggerScriptUniqueId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = triggerScriptUniqueId;
        if (typeof (first) === "object" && first && (typeof (first.TriggerScriptUniqueId) != 'undefined')) {
            _request = triggerScriptUniqueId;
            _options = webapi_options;
        }
        else {
            _request = {
                TriggerScriptUniqueId: triggerScriptUniqueId,
            };
            _options = webapi_options;
        }
        return this._GetTriggerScriptByUniqueId(_request, _options);
    }
    async _SaveTriggerScriptByUniqueId(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SaveTriggerScriptByUniqueId", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_TriggerScriptEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SaveTriggerScriptByUniqueId(triggerScriptUniqueId, entity, webapi_options) {
        let _request = null;
        let _options = null;
        const first = triggerScriptUniqueId;
        if (typeof (first) === "object" && first && (typeof (first.TriggerScriptUniqueId) != 'undefined' || typeof (first.Entity) != 'undefined')) {
            _request = triggerScriptUniqueId;
            _options = entity;
        }
        else {
            _request = {
                TriggerScriptUniqueId: triggerScriptUniqueId,
                Entity: entity,
            };
            _options = webapi_options;
        }
        return this._SaveTriggerScriptByUniqueId(_request, _options);
    }
    async _DeleteTriggerScriptByUniqueId(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("DeleteTriggerScriptByUniqueId", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async DeleteTriggerScriptByUniqueId(triggerScriptUniqueId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = triggerScriptUniqueId;
        if (typeof (first) === "object" && first && (typeof (first.TriggerScriptUniqueId) != 'undefined')) {
            _request = triggerScriptUniqueId;
            _options = webapi_options;
        }
        else {
            _request = {
                TriggerScriptUniqueId: triggerScriptUniqueId,
            };
            _options = webapi_options;
        }
        return this._DeleteTriggerScriptByUniqueId(_request, _options);
    }
    async _ValidateTriggerScript(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ValidateTriggerScript", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_CRMScriptResult_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async ValidateTriggerScript(triggerScriptId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = triggerScriptId;
        if (typeof (first) === "object" && first && (typeof (first.TriggerScriptId) != 'undefined')) {
            _request = triggerScriptId;
            _options = webapi_options;
        }
        else {
            _request = {
                TriggerScriptId: triggerScriptId,
            };
            _options = webapi_options;
        }
        return this._ValidateTriggerScript(_request, _options);
    }
    async _ValidateTriggerScriptByUniqueId(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ValidateTriggerScriptByUniqueId", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_CRMScriptResult_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async ValidateTriggerScriptByUniqueId(triggerScriptUniqueId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = triggerScriptUniqueId;
        if (typeof (first) === "object" && first && (typeof (first.TriggerScriptUniqueId) != 'undefined')) {
            _request = triggerScriptUniqueId;
            _options = webapi_options;
        }
        else {
            _request = {
                TriggerScriptUniqueId: triggerScriptUniqueId,
            };
            _options = webapi_options;
        }
        return this._ValidateTriggerScriptByUniqueId(_request, _options);
    }
} // class v1CRMScriptAgentController 
exports.CRMScriptAgent = CRMScriptAgent;
//# sourceMappingURL=CRMScriptAgent.js.map