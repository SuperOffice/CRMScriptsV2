import { AxiosRequestConfig } from 'axios';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Collection of all services that works with Appointment data.
 */
export interface IAppointmentAgent {
    CreateDefaultAppointmentEntity(): Promise<carriers.AppointmentEntity>;
    SaveAppointmentEntity(entity: carriers.AppointmentEntity): Promise<carriers.AppointmentEntity>;
    DeleteAppointmentEntity(AppointmentEntityId: number): Promise<void>;
    CreateDefaultSuggestedAppointmentEntity(): Promise<carriers.SuggestedAppointmentEntity>;
    SaveSuggestedAppointmentEntity(entity: carriers.SuggestedAppointmentEntity): Promise<carriers.SuggestedAppointmentEntity>;
    CreateDefaultTaskListItem(): Promise<carriers.TaskListItem>;
    SaveTaskListItem(entity: carriers.TaskListItem): Promise<carriers.TaskListItem>;
    GetAppointment(appointmentId: number): Promise<carriers.Appointment>;
    ToggleAppointmentStatus(request: carriers.Appointment_ToggleAppointmentStatusRequest, webapi_options?: base.WebApiRequestOptions): Promise<enums.AppointmentStatus>;
    ToggleAppointmentStatus(appointmentId: number, webapi_options?: base.WebApiRequestOptions): Promise<enums.AppointmentStatus>;
    ToggleActivity(request: carriers.Appointment_ToggleActivityRequest, webapi_options?: base.WebApiRequestOptions): Promise<enums.ActivityStatus>;
    ToggleActivity(activityIdentifier: string, webapi_options?: base.WebApiRequestOptions): Promise<enums.ActivityStatus>;
    ToggleActivities(request: carriers.Appointment_ToggleActivitiesRequest, webapi_options?: base.WebApiRequestOptions): Promise<enums.ActivityStatus>;
    ToggleActivities(activityIdentifier: string[], webapi_options?: base.WebApiRequestOptions): Promise<enums.ActivityStatus>;
    SetActivityStatus(request: carriers.Appointment_SetActivityStatusRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetActivityStatus(activityIdentifier: string[], activityStatus: enums.ActivityStatus, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    ToggleAndSetActivities(request: carriers.Appointment_ToggleAndSetActivitiesRequest, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    ToggleAndSetActivities(activityIdentifiers: string[], webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    GetAppointmentEntity(appointmentEntityId: number): Promise<carriers.AppointmentEntity>;
    CreateDefaultAppointmentEntityByType(request: carriers.Appointment_CreateDefaultAppointmentEntityByTypeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    CreateDefaultAppointmentEntityByType(type: enums.TaskType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    Accept(request: carriers.Appointment_AcceptRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    Accept(appointmentId: number, updateMode: enums.RecurrenceUpdateMode, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    CreateAndAccept(request: carriers.Appointment_CreateAndAcceptRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    CreateAndAccept(emailItemId: number, updateMode: enums.RecurrenceUpdateMode, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    AcceptWithEmailConfirmation(request: carriers.Appointment_AcceptWithEmailConfirmationRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    AcceptWithEmailConfirmation(appointmentId: number, updateMode: enums.RecurrenceUpdateMode, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    CreateAndAcceptWithEmailConfirmation(request: carriers.Appointment_CreateAndAcceptWithEmailConfirmationRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    CreateAndAcceptWithEmailConfirmation(emailItemId: number, updateMode: enums.RecurrenceUpdateMode, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    Reject(request: carriers.Appointment_RejectRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    Reject(appointmentId: number, rejectReason: string, updateMode: enums.RecurrenceUpdateMode, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RejectWithEmailConfirmation(request: carriers.Appointment_RejectWithEmailConfirmationRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RejectWithEmailConfirmation(appointmentId: number, rejectReason: string, updateMode: enums.RecurrenceUpdateMode, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeclineInvitationFromEmailItem(request: carriers.Appointment_DeclineInvitationFromEmailItemRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeclineInvitationFromEmailItem(emailItemId: number, rejectReason: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetOrganizerName(request: carriers.Appointment_GetOrganizerNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetOrganizerName(motherAppointmentId: number, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    Save(request: carriers.Appointment_SaveRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    Save(appointmentEntity: carriers.AppointmentEntity, updateMode: enums.RecurrenceUpdateMode, sendEmailToParticipants: boolean, smtpEMailConnectionInfo: carriers.EMailConnectionInfo, imapEMailConnectionInfo: carriers.EMailConnectionInfo, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    Delete(request: carriers.Appointment_DeleteRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    Delete(appointmentId: number, updateMode: enums.RecurrenceUpdateMode, sendEmailToParticipants: boolean, smtpEMailConnectionInfo: carriers.EMailConnectionInfo, imapEMailConnectionInfo: carriers.EMailConnectionInfo, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    CalculateDays(request: carriers.Appointment_CalculateDaysRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RecurrenceInfo>;
    CalculateDays(appointmentEntity: carriers.AppointmentEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RecurrenceInfo>;
    ValidateDays(request: carriers.Appointment_ValidateDaysRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RecurrenceDate[]>;
    ValidateDays(appointmentEntity: carriers.AppointmentEntity, dates: Date[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.RecurrenceDate[]>;
    CreateDefaultRecurrence(webapi_options?: base.WebApiRequestOptions): Promise<carriers.RecurrenceInfo>;
    AssignTo(request: carriers.Appointment_AssignToRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    AssignTo(appointmentId: number, participant: carriers.ParticipantInfo, updateMode: enums.RecurrenceUpdateMode, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    SetSeen(request: carriers.Appointment_SetSeenRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetSeen(appointmentId: number, updateMode: enums.RecurrenceUpdateMode, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetSeenMany(request: carriers.Appointment_SetSeenManyRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetSeenMany(appointmentIds: number[], updateMode: enums.RecurrenceUpdateMode, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    Move(request: carriers.Appointment_MoveRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    Move(appointmentId: number, newStartTime: Date, updateMode: enums.RecurrenceUpdateMode, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    AcceptRejected(request: carriers.Appointment_AcceptRejectedRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    AcceptRejected(appointmentId: number, updateMode: enums.RecurrenceUpdateMode, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    CreateDefaultRecurrenceByDate(request: carriers.Appointment_CreateDefaultRecurrenceByDateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RecurrenceInfo>;
    CreateDefaultRecurrenceByDate(startDate: Date, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RecurrenceInfo>;
    CleanUpBookingDeleted(request: carriers.Appointment_CleanUpBookingDeletedRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    CleanUpBookingDeleted(appointmentIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<number>;
    CleanUpBookingDeletedWithUpdateMode(request: carriers.Appointment_CleanUpBookingDeletedWithUpdateModeRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    CleanUpBookingDeletedWithUpdateMode(appointmentIds: number[], updateMode: enums.RecurrenceUpdateMode, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    CleanUpRecurringBookingDeleted(webapi_options?: base.WebApiRequestOptions): Promise<number>;
    CreateDefaultAppointmentEntityByTypeAndAssociate(request: carriers.Appointment_CreateDefaultAppointmentEntityByTypeAndAssociateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    CreateDefaultAppointmentEntityByTypeAndAssociate(type: enums.TaskType, associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    GetCanInsertForAssociates(request: carriers.Appointment_GetCanInsertForAssociatesRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean[]>;
    GetCanInsertForAssociates(associateIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<boolean[]>;
    GetAppointmentHaveParticipantsWithEmail(request: carriers.Appointment_GetAppointmentHaveParticipantsWithEmailRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    GetAppointmentHaveParticipantsWithEmail(appointmentId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    CreateDefaultAppointmentEntityFromSaleSuggestion(request: carriers.Appointment_CreateDefaultAppointmentEntityFromSaleSuggestionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    CreateDefaultAppointmentEntityFromSaleSuggestion(suggestedAppointmentId: number, saleId: number, createNow: boolean, ownerId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    GetNextSuggestedAppointmentBySale(request: carriers.Appointment_GetNextSuggestedAppointmentBySaleRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SuggestedAppointment>;
    GetNextSuggestedAppointmentBySale(saleId: number, currentAppointmentId: number, skipCompleteCheck: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SuggestedAppointment>;
    CreateDefaultReOpenAppointment(request: carriers.Appointment_CreateDefaultReOpenAppointmentRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    CreateDefaultReOpenAppointment(saleId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    CreateDefaultAppointmentEntityFromProjectSuggestion(request: carriers.Appointment_CreateDefaultAppointmentEntityFromProjectSuggestionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    CreateDefaultAppointmentEntityFromProjectSuggestion(suggestedAppointmentId: number, projectId: number, createNow: boolean, ownerId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    CreateAppointmentForUID(request: carriers.Appointment_CreateAppointmentForUIDRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    CreateAppointmentForUID(appointmentEntity: carriers.AppointmentEntity, uID: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    GetAppointmentFromUID(request: carriers.Appointment_GetAppointmentFromUIDRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    GetAppointmentFromUID(uID: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    CanAssignToProjectMember(request: carriers.Appointment_CanAssignToProjectMemberRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    CanAssignToProjectMember(projectId: number, suggestedAppointmentId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    GetUIDFromAppointmentId(request: carriers.Appointment_GetUIDFromAppointmentIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetUIDFromAppointmentId(appointmentId: number, useMotherId: boolean, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    UpdateAppointmentFromIcsResponse(request: carriers.Appointment_UpdateAppointmentFromIcsResponseRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    UpdateAppointmentFromIcsResponse(emailAddress: string, icsData: ArrayBuffer | string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    ValidateAppointmentEntity(request: carriers.Appointment_ValidateAppointmentEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    ValidateAppointmentEntity(appointmentEntity: carriers.AppointmentEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    WillSendEmail(request: carriers.Appointment_WillSendEmailRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    WillSendEmail(appointment: carriers.AppointmentEntity, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    AcceptWithSmtpEmailConfirmation(request: carriers.Appointment_AcceptWithSmtpEmailConfirmationRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    AcceptWithSmtpEmailConfirmation(appointmentId: number, updateMode: enums.RecurrenceUpdateMode, smtpEMailConnectionInfo: carriers.EMailConnectionInfo, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RejectWithSmtpEmailConfirmation(request: carriers.Appointment_RejectWithSmtpEmailConfirmationRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RejectWithSmtpEmailConfirmation(appointmentId: number, rejectReason: string, updateMode: enums.RecurrenceUpdateMode, smtpEMailConnectionInfo: carriers.EMailConnectionInfo, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetAppointmentList(appointmentIds: number[]): Promise<carriers.Appointment[]>;
    GetMyAppointments(request: carriers.Appointment_GetMyAppointmentsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetMyAppointments(startTime: Date, endTime: Date, count: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetPersonAppointments(request: carriers.Appointment_GetPersonAppointmentsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetPersonAppointments(personId: number, includeProjectAppointments: boolean, startTime: Date, endTime: Date, count: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetMyDiary(request: carriers.Appointment_GetMyDiaryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetMyDiary(startTime: Date, endTime: Date, count: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetMyTasks(request: carriers.Appointment_GetMyTasksRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetMyTasks(count: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetPersonDiary(request: carriers.Appointment_GetPersonDiaryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetPersonDiary(personId: number, startTime: Date, endTime: Date, count: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetPersonTasks(request: carriers.Appointment_GetPersonTasksRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetPersonTasks(personId: number, count: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetPersonAppointmentsByType(request: carriers.Appointment_GetPersonAppointmentsByTypeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetPersonAppointmentsByType(personId: number, includeProjectAppointments: boolean, startTime: Date, endTime: Date, count: number, appointmentType: enums.AppointmentType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetProjectAppointments(request: carriers.Appointment_GetProjectAppointmentsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetProjectAppointments(projectId: number, startTime: Date, endTime: Date, count: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetProjectAppointmentsByType(request: carriers.Appointment_GetProjectAppointmentsByTypeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetProjectAppointmentsByType(projectId: number, startTime: Date, endTime: Date, count: number, appointmentType: enums.AppointmentType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetContactAppointments(request: carriers.Appointment_GetContactAppointmentsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetContactAppointments(contactId: number, startTime: Date, endTime: Date, count: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetContactAppointmentsByType(request: carriers.Appointment_GetContactAppointmentsByTypeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetContactAppointmentsByType(contactId: number, startTime: Date, endTime: Date, count: number, appointmentType: enums.AppointmentType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetProjectMemberAppointments(request: carriers.Appointment_GetProjectMemberAppointmentsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetProjectMemberAppointments(personId: number, startTime: Date, endTime: Date, count: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetProjectMemberAppointmentsByType(request: carriers.Appointment_GetProjectMemberAppointmentsByTypeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetProjectMemberAppointmentsByType(personId: number, startTime: Date, endTime: Date, count: number, appointmentType: enums.AppointmentType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetPersonAppointmentsByTask(request: carriers.Appointment_GetPersonAppointmentsByTaskRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetPersonAppointmentsByTask(personId: number, includeProjectAppointments: boolean, startTime: Date, endTime: Date, count: number, taskId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetPersonAppointmentsByTasks(request: carriers.Appointment_GetPersonAppointmentsByTasksRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetPersonAppointmentsByTasks(personId: number, includeProjectAppointments: boolean, startTime: Date, endTime: Date, count: number, taskIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetPersonAppointmentsByTaskHeading(request: carriers.Appointment_GetPersonAppointmentsByTaskHeadingRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetPersonAppointmentsByTaskHeading(personId: number, includeProjectAppointments: boolean, startTime: Date, endTime: Date, count: number, taskHeadingId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetProjectAppointmentsByTask(request: carriers.Appointment_GetProjectAppointmentsByTaskRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetProjectAppointmentsByTask(projectId: number, startTime: Date, endTime: Date, count: number, taskId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetProjectAppointmentsByTasks(request: carriers.Appointment_GetProjectAppointmentsByTasksRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetProjectAppointmentsByTasks(projectId: number, startTime: Date, endTime: Date, count: number, taskIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetProjectAppointmentsByTaskHeading(request: carriers.Appointment_GetProjectAppointmentsByTaskHeadingRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetProjectAppointmentsByTaskHeading(projectId: number, startTime: Date, endTime: Date, count: number, taskHeadingId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetProjectMemberAppointmentsByTask(request: carriers.Appointment_GetProjectMemberAppointmentsByTaskRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetProjectMemberAppointmentsByTask(personId: number, startTime: Date, endTime: Date, count: number, taskId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetProjectMemberAppointmentsByTasks(request: carriers.Appointment_GetProjectMemberAppointmentsByTasksRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetProjectMemberAppointmentsByTasks(personId: number, startTime: Date, endTime: Date, count: number, taskIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetProjectMemberAppointmentsByTaskHeading(request: carriers.Appointment_GetProjectMemberAppointmentsByTaskHeadingRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetProjectMemberAppointmentsByTaskHeading(personId: number, startTime: Date, endTime: Date, count: number, taskHeadingId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetContactAppointmentsByTask(request: carriers.Appointment_GetContactAppointmentsByTaskRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetContactAppointmentsByTask(contactId: number, startTime: Date, endTime: Date, count: number, taskId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetContactAppointmentsByTasks(request: carriers.Appointment_GetContactAppointmentsByTasksRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetContactAppointmentsByTasks(contactId: number, startTime: Date, endTime: Date, count: number, taskIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetContactAppointmentsByTaskHeading(request: carriers.Appointment_GetContactAppointmentsByTaskHeadingRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetContactAppointmentsByTaskHeading(contactId: number, startTime: Date, endTime: Date, count: number, taskHeadingId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetPublishedAppointment(request: carriers.Appointment_GetPublishedAppointmentRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment>;
    GetPublishedAppointment(appointmentId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment>;
    GetPublishedAppointments(request: carriers.Appointment_GetPublishedAppointmentsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetPublishedAppointments(appointmentIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetMyPublishedAppointments(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetPublishedProjectAppointments(request: carriers.Appointment_GetPublishedProjectAppointmentsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetPublishedProjectAppointments(projectId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetAppointmentsByTaskHeading(request: carriers.Appointment_GetAppointmentsByTaskHeadingRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetAppointmentsByTaskHeading(taskHeadingId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetAssociateDiary(request: carriers.Appointment_GetAssociateDiaryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetAssociateDiary(associateId: number, startTime: Date, endTime: Date, count: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetDiaryByGroup(request: carriers.Appointment_GetDiaryByGroupRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetDiaryByGroup(groupId: number, groupType: number, startTime: Date, endTime: Date, count: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    UpdateAppointment(request: carriers.Appointment_UpdateAppointmentRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment>;
    UpdateAppointment(id: number, startTime: Date, endTime: Date, status: number, type: number, associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment>;
    GetAssociatesDiary(request: carriers.Appointment_GetAssociatesDiaryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetAssociatesDiary(associateIds: number[], startTime: Date, endTime: Date, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetAppointmentRecords(request: carriers.Appointment_GetAppointmentRecordsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetAppointmentRecords(motherId: number, recurrenceRuleId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    GetMySyncAppointments(request: carriers.Appointment_GetMySyncAppointmentsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentSyncData[]>;
    GetMySyncAppointments(startTime: Date, endTime: Date, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentSyncData[]>;
    GetDayInformationListByDatesAndAssociate(request: carriers.Appointment_GetDayInformationListByDatesAndAssociateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DayInformationListItem[]>;
    GetDayInformationListByDatesAndAssociate(startDate: Date, endDate: Date, associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DayInformationListItem[]>;
    GetActivityInformationListByDatesAndAssociate(request: carriers.Appointment_GetActivityInformationListByDatesAndAssociateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ActivityInformationListItem[]>;
    GetActivityInformationListByDatesAndAssociate(startDate: Date, endDate: Date, associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ActivityInformationListItem[]>;
    GetRedLetterInformationListByDatesAndAssociate(request: carriers.Appointment_GetRedLetterInformationListByDatesAndAssociateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RedLetterInformationListItem[]>;
    GetRedLetterInformationListByDatesAndAssociate(startDate: Date, endDate: Date, associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RedLetterInformationListItem[]>;
    GetAlarms(request: carriers.Appointment_GetAlarmsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MultiAlarmData>;
    GetAlarms(includeInvitations: boolean, includeAllAppointments: boolean, defaultAlarmLeadTimeInMinutes: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MultiAlarmData>;
    GenerateLead(request: carriers.Appointment_GenerateLeadRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SalesActivity>;
    GenerateLead(associateIdForNewContact: number, leadDescription: string, relation: string, relationId: number, leadContact: string, leadPersonFirstname: string, leadPersonLastname: string, leadPersonEmail: string, leadPhoneNumber: string, creatorsContact: string, creatorsFirstname: string, creatorsLastname: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SalesActivity>;
    RequestForInfo(request: carriers.Appointment_RequestForInfoRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SalesActivity>;
    RequestForInfo(associateIdForNewContact: number, channel: string, regarding: string, contactName: string, personFirstname: string, personLastname: string, emailAddress: string, phoneNumber: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SalesActivity>;
    GetSuggestedAppointment(suggestedAppointmentId: number): Promise<carriers.SuggestedAppointment>;
    GetSuggestedAppointmentEntity(suggestedAppointmentEntityId: number): Promise<carriers.SuggestedAppointmentEntity>;
    GetTaskListItem(taskListItemId: number): Promise<carriers.TaskListItem>;
    GetTaskListItems(request: carriers.Appointment_GetTaskListItemsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TaskListItem[]>;
    GetTaskListItems(includeDeleted: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TaskListItem[]>;
}
/**
 * Collection of all services that works with Appointment data.
 */
export declare class AppointmentAgent extends base.WebApiBase implements IAppointmentAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * Set default values into a new AppointmentEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultAppointmentEntity(options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    SaveAppointmentEntity(entity: carriers.AppointmentEntity, options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    DeleteAppointmentEntity(AppointmentEntityId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new SuggestedAppointmentEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultSuggestedAppointmentEntity(options?: base.WebApiRequestOptions): Promise<carriers.SuggestedAppointmentEntity>;
    SaveSuggestedAppointmentEntity(entity: carriers.SuggestedAppointmentEntity, options?: base.WebApiRequestOptions): Promise<carriers.SuggestedAppointmentEntity>;
    /**
     * Set default values into a new TaskListItem.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultTaskListItem(options?: base.WebApiRequestOptions): Promise<carriers.TaskListItem>;
    SaveTaskListItem(entity: carriers.TaskListItem, options?: base.WebApiRequestOptions): Promise<carriers.TaskListItem>;
    GetAppointment(appointmentId: number, options?: base.WebApiRequestOptions): Promise<carriers.Appointment>;
    private _ToggleAppointmentStatus;
    /**
     * Sets an appointment&apos;s status to Completed if the appointment had a different status, or sets the status to started if already set to completed.
     * @param request - AppointmentId
     * @returns The new AppointmentStatus
     */
    ToggleAppointmentStatus(request: carriers.Appointment_ToggleAppointmentStatusRequest, webapi_options?: base.WebApiRequestOptions): Promise<enums.AppointmentStatus>;
    /**
     * Sets an appointment&apos;s status to Completed if the appointment had a different status, or sets the status to started if already set to completed.
     * @param appointmentId - The appointment id.
     * @returns The new AppointmentStatus
     */
    ToggleAppointmentStatus(appointmentId: number, webapi_options?: base.WebApiRequestOptions): Promise<enums.AppointmentStatus>;
    private _ToggleActivity;
    /**
     * Toggle the completed status for an activity. Activity may be sale, document or appointment. The changes are saved immediately.
     * @param request - ActivityIdentifier
     * @returns What the result after toggling was.
     */
    ToggleActivity(request: carriers.Appointment_ToggleActivityRequest, webapi_options?: base.WebApiRequestOptions): Promise<enums.ActivityStatus>;
    /**
     * Toggle the completed status for an activity. Activity may be sale, document or appointment. The changes are saved immediately.
     * @param activityIdentifier - May contain of a mix of appointment_id, sale_id, document_id and todo_id
     * @returns What the result after toggling was.
     */
    ToggleActivity(activityIdentifier: string, webapi_options?: base.WebApiRequestOptions): Promise<enums.ActivityStatus>;
    private _ToggleActivities;
    /**
     * Toggle the completed status for an array of activities.
     * @param request - ActivityIdentifier
     * @returns The resulting ActivityStatus of the first in the array
     */
    ToggleActivities(request: carriers.Appointment_ToggleActivitiesRequest, webapi_options?: base.WebApiRequestOptions): Promise<enums.ActivityStatus>;
    /**
     * Toggle the completed status for an array of activities.
     * @param activityIdentifier - Contain of a mix of appointment_id, sale_id, document_id and todo_id.
     * @returns The resulting ActivityStatus of the first in the array
     */
    ToggleActivities(activityIdentifier: string[], webapi_options?: base.WebApiRequestOptions): Promise<enums.ActivityStatus>;
    private _SetActivityStatus;
    /**
     * Sets the completed status for an array of activities. The string activityIdentifier param may contain of a mix of appointment_id, sale_id, document_id and todo_id. The changes are saved immediately. If an invalid id is passed in (nonexistent record), no changes will be made. If there is no write access to the record being changed, a Sentry exception will be thrown in the usual manner.
     * @param request - ActivityIdentifier, ActivityStatus
     * @returns
     */
    SetActivityStatus(request: carriers.Appointment_SetActivityStatusRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Sets the completed status for an array of activities. The string activityIdentifier param may contain of a mix of appointment_id, sale_id, document_id and todo_id. The changes are saved immediately. If an invalid id is passed in (nonexistent record), no changes will be made. If there is no write access to the record being changed, a Sentry exception will be thrown in the usual manner.
     * @param activityIdentifier - Array of activity ids. ex. appointment_id=666
     * @param activityStatus - The status to set the activities
     * @returns
     */
    SetActivityStatus(activityIdentifier: string[], activityStatus: enums.ActivityStatus, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _ToggleAndSetActivities;
    /**
     * Toggles the first activity and sets the rest of the activities to the result of the first toggle. However, there are some special rules for appointments that trigger a suggested appointment when they are completed. If more than one appointment in the set of identifiers triggers a suggestion, we will not toggle those appointments. This rule is only active when changing the status of an appointment to complete. There must be more than one appointment that triggers such an event for this rule to take effect.
     * @param request - ActivityIdentifiers
     * @returns The identifiers that were not toggled.
     */
    ToggleAndSetActivities(request: carriers.Appointment_ToggleAndSetActivitiesRequest, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    /**
     * Toggles the first activity and sets the rest of the activities to the result of the first toggle. However, there are some special rules for appointments that trigger a suggested appointment when they are completed. If more than one appointment in the set of identifiers triggers a suggestion, we will not toggle those appointments. This rule is only active when changing the status of an appointment to complete. There must be more than one appointment that triggers such an event for this rule to take effect.
     * @param activityIdentifiers - Array of activity ids. ex. appointment_id=666
     * @returns The identifiers that were not toggled.
     */
    ToggleAndSetActivities(activityIdentifiers: string[], webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    GetAppointmentEntity(appointmentEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    private _CreateDefaultAppointmentEntityByType;
    /**
     * Creates a AppointmentEntity populated with the default values for the specific type.
     * @param request - Type
     * @returns AppointmentEntity with default values.
     */
    CreateDefaultAppointmentEntityByType(request: carriers.Appointment_CreateDefaultAppointmentEntityByTypeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    /**
     * Creates a AppointmentEntity populated with the default values for the specific type.
     * @param type - The type of task requested.
     * @returns AppointmentEntity with default values.
     */
    CreateDefaultAppointmentEntityByType(type: enums.TaskType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    private _Accept;
    /**
     * Accepting an appointment invitation.
     * @param request - AppointmentId, UpdateMode
     * @returns Updated AppointmentEntity
     */
    Accept(request: carriers.Appointment_AcceptRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Accepting an appointment invitation.
     * @param appointmentId - The appointmentId. Both master and child record ids are accepted.
     * @param updateMode - Update mode for a recurring appointment.
     * @returns Updated AppointmentEntity
     */
    Accept(appointmentId: number, updateMode: enums.RecurrenceUpdateMode, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _CreateAndAccept;
    /**
     * Creating an appointment from an emailItem invitation and accepting it.
     * @param request - EmailItemId, UpdateMode
     * @returns
     */
    CreateAndAccept(request: carriers.Appointment_CreateAndAcceptRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Creating an appointment from an emailItem invitation and accepting it.
     * @param emailItemId - The emailItemId
     * @param updateMode - Update mode for a recurring appointment.
     * @returns
     */
    CreateAndAccept(emailItemId: number, updateMode: enums.RecurrenceUpdateMode, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _AcceptWithEmailConfirmation;
    /**
     * Accepting an appointment invitation and send an email confirmation to the meeting organizer.
     * @param request - AppointmentId, UpdateMode
     * @returns Updated AppointmentEntity
     */
    AcceptWithEmailConfirmation(request: carriers.Appointment_AcceptWithEmailConfirmationRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Accepting an appointment invitation and send an email confirmation to the meeting organizer.
     * @param appointmentId - The appointmentId. Both master and child record ids are accepted.
     * @param updateMode - Update mode for a recurring appointment.
     * @returns Updated AppointmentEntity
     */
    AcceptWithEmailConfirmation(appointmentId: number, updateMode: enums.RecurrenceUpdateMode, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _CreateAndAcceptWithEmailConfirmation;
    /**
     * Creating an appointment from an emailItem invitation and accepting it with email confirmation to the meeting organizer.
     * @param request - EmailItemId, UpdateMode
     * @returns
     */
    CreateAndAcceptWithEmailConfirmation(request: carriers.Appointment_CreateAndAcceptWithEmailConfirmationRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Creating an appointment from an emailItem invitation and accepting it with email confirmation to the meeting organizer.
     * @param emailItemId - The emailItemId
     * @param updateMode - Update mode for a recurring appointment.
     * @returns
     */
    CreateAndAcceptWithEmailConfirmation(emailItemId: number, updateMode: enums.RecurrenceUpdateMode, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _Reject;
    /**
     * Rejecting an appointment invitation
     * @param request - AppointmentId, RejectReason, UpdateMode
     * @returns Updated AppointmentEntity
     */
    Reject(request: carriers.Appointment_RejectRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Rejecting an appointment invitation
     * @param appointmentId - The appointmentId. Both master and child record ids are accepted.
     * @param rejectReason - The reason the invitation was rejected.
     * @param updateMode - Update mode for a recurring appointment.
     * @returns Updated AppointmentEntity
     */
    Reject(appointmentId: number, rejectReason: string, updateMode: enums.RecurrenceUpdateMode, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _RejectWithEmailConfirmation;
    /**
     * Rejecting an appointment invitation and send an email confirmation to the meeting organizer.
     * @param request - AppointmentId, RejectReason, UpdateMode
     * @returns Updated AppointmentEntity
     */
    RejectWithEmailConfirmation(request: carriers.Appointment_RejectWithEmailConfirmationRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Rejecting an appointment invitation and send an email confirmation to the meeting organizer.
     * @param appointmentId - The appointmentId. Both master and child record ids are accepted.
     * @param rejectReason - The reason the invitation was rejected.
     * @param updateMode - Update mode for a recurring appointment.
     * @returns Updated AppointmentEntity
     */
    RejectWithEmailConfirmation(appointmentId: number, rejectReason: string, updateMode: enums.RecurrenceUpdateMode, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _DeclineInvitationFromEmailItem;
    /**
     * Declining an appointment invitation where no tentative appointments have been created.
     * @param request - EmailItemId, RejectReason
     * @returns
     */
    DeclineInvitationFromEmailItem(request: carriers.Appointment_DeclineInvitationFromEmailItemRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Declining an appointment invitation where no tentative appointments have been created.
     * @param emailItemId - The emailItemId.
     * @param rejectReason - The reason the invitation was rejected.
     * @returns
     */
    DeclineInvitationFromEmailItem(emailItemId: number, rejectReason: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetOrganizerName;
    /**
     * Lookup the name / email of an event-organizer
     * @param request - MotherAppointmentId
     * @returns The displayed name of the organizer: name or email
     */
    GetOrganizerName(request: carriers.Appointment_GetOrganizerNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Lookup the name / email of an event-organizer
     * @param motherAppointmentId - The id of the mother-appointment.
     * @returns The displayed name of the organizer: name or email
     */
    GetOrganizerName(motherAppointmentId: number, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _Save;
    /**
     * Saving a booking.
     * @param request - AppointmentEntity, UpdateMode, SendEmailToParticipants, SmtpEMailConnectionInfo, ImapEMailConnectionInfo
     * @returns Updated AppointmentEntity
     */
    Save(request: carriers.Appointment_SaveRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    /**
     * Saving a booking.
     * @param appointmentEntity -
     * @param updateMode - Update mode for a recurring appointment.
     * @param sendEmailToParticipants - If true, emails will be sent to all participants that is marked with send email flag. If false no mails will be sent even if the send email flag is true.
     * @param smtpEMailConnectionInfo - Login information for outgoing smtp email server. Will be null if no login information is relevant.
     * @param imapEMailConnectionInfo - Login information for imap server. Will be null if no login information is relevant.
     * @returns Updated AppointmentEntity
     */
    Save(appointmentEntity: carriers.AppointmentEntity, updateMode: enums.RecurrenceUpdateMode, sendEmailToParticipants: boolean, smtpEMailConnectionInfo: carriers.EMailConnectionInfo, imapEMailConnectionInfo: carriers.EMailConnectionInfo, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    private _Delete;
    /**
     * Deleting a booking
     * @param request - AppointmentId, UpdateMode, SendEmailToParticipants, SmtpEMailConnectionInfo, ImapEMailConnectionInfo
     * @returns
     */
    Delete(request: carriers.Appointment_DeleteRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Deleting a booking
     * @param appointmentId - The appointmentId. Both master and child record ids are accepted.
     * @param updateMode - Update mode for a recurring appointment.
     * @param sendEmailToParticipants - If true, emails will be sent to all participants that is marked with send email flag. If false no mails will be sent even if the send email flag is true.
     * @param smtpEMailConnectionInfo - Login information for outgoing smtp email server. Will be null if no login information is relevant.
     * @param imapEMailConnectionInfo - Login information for imap server. Will be null if no login information is relevant.
     * @returns
     */
    Delete(appointmentId: number, updateMode: enums.RecurrenceUpdateMode, sendEmailToParticipants: boolean, smtpEMailConnectionInfo: carriers.EMailConnectionInfo, imapEMailConnectionInfo: carriers.EMailConnectionInfo, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _CalculateDays;
    /**
     * Calculates the set of dates that represents a recurrence pattern. Adds conflict information to each date.
     * @param request - AppointmentEntity
     * @returns
     */
    CalculateDays(request: carriers.Appointment_CalculateDaysRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RecurrenceInfo>;
    /**
     * Calculates the set of dates that represents a recurrence pattern. Adds conflict information to each date.
     * @param appointmentEntity -
     * @returns
     */
    CalculateDays(appointmentEntity: carriers.AppointmentEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RecurrenceInfo>;
    private _ValidateDays;
    /**
     * Validates the set of dates to calculate any conflicts.
     * @param request - AppointmentEntity, Dates
     * @returns Array of RecurrenceDate object for each validated date.
     */
    ValidateDays(request: carriers.Appointment_ValidateDaysRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RecurrenceDate[]>;
    /**
     * Validates the set of dates to calculate any conflicts.
     * @param appointmentEntity -
     * @param dates - The dates to validate.
     * @returns Array of RecurrenceDate object for each validated date.
     */
    ValidateDays(appointmentEntity: carriers.AppointmentEntity, dates: Date[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.RecurrenceDate[]>;
    private _CreateDefaultRecurrence;
    /**
     * Creates a RecurrenceInfo object populated with the default values for the specific type.
     * @returns RecurrenceInfo object with default values.
     */
    CreateDefaultRecurrence(webapi_options?: base.WebApiRequestOptions): Promise<carriers.RecurrenceInfo>;
    private _AssignTo;
    /**
     * Assigning an appointment to another person.
     * @param request - AppointmentId, Participant, UpdateMode
     * @returns Updated AppointmentEntity
     */
    AssignTo(request: carriers.Appointment_AssignToRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    /**
     * Assigning an appointment to another person.
     * @param appointmentId - The appointmentId. Both master and child record ids are accepted.
     * @param participant -
     * @param updateMode - Update mode for a recurring appointment.
     * @returns Updated AppointmentEntity
     */
    AssignTo(appointmentId: number, participant: carriers.ParticipantInfo, updateMode: enums.RecurrenceUpdateMode, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    private _SetSeen;
    /**
     * Sets an appointment invitiation to seen.
     * @param request - AppointmentId, UpdateMode
     * @returns
     */
    SetSeen(request: carriers.Appointment_SetSeenRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Sets an appointment invitiation to seen.
     * @param appointmentId - The appointmentId. Both master and child record ids are accepted.
     * @param updateMode - Update mode for a recurring appointment.
     * @returns
     */
    SetSeen(appointmentId: number, updateMode: enums.RecurrenceUpdateMode, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SetSeenMany;
    /**
     * Sets a list of appointment invitations to seen. The same update mode will be used for all appointments in this batch.
     * @param request - AppointmentIds, UpdateMode
     * @returns
     */
    SetSeenMany(request: carriers.Appointment_SetSeenManyRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Sets a list of appointment invitations to seen. The same update mode will be used for all appointments in this batch.
     * @param appointmentIds - List of appointment IDs
     * @param updateMode - Update mode for a recurring appointment.
     * @returns
     */
    SetSeenMany(appointmentIds: number[], updateMode: enums.RecurrenceUpdateMode, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _Move;
    /**
     * Moving a booking to another start time.
     * @param request - AppointmentId, NewStartTime, UpdateMode
     * @returns Updated AppointmentEntity
     */
    Move(request: carriers.Appointment_MoveRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    /**
     * Moving a booking to another start time.
     * @param appointmentId - The appointmentId. Both master and child record ids are accepted.
     * @param newStartTime - The new start time for the moved booking.
     * @param updateMode - Update mode for a recurring appointment.
     * @returns Updated AppointmentEntity
     */
    Move(appointmentId: number, newStartTime: Date, updateMode: enums.RecurrenceUpdateMode, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    private _AcceptRejected;
    /**
     * Accept that an invited participant has rejected your invitation or assignment.
     * @param request - AppointmentId, UpdateMode
     * @returns Updated AppointmentEntity
     */
    AcceptRejected(request: carriers.Appointment_AcceptRejectedRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    /**
     * Accept that an invited participant has rejected your invitation or assignment.
     * @param appointmentId - The appointmentId. Both master and child record ids are accepted.
     * @param updateMode - Update mode for a recurring appointment.
     * @returns Updated AppointmentEntity
     */
    AcceptRejected(appointmentId: number, updateMode: enums.RecurrenceUpdateMode, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    private _CreateDefaultRecurrenceByDate;
    /**
     * Creates a RecurrenceInfo object populated with the default values for the specific type. Using startDate as start date for the recurreing pattern.
     * @param request - StartDate
     * @returns
     */
    CreateDefaultRecurrenceByDate(request: carriers.Appointment_CreateDefaultRecurrenceByDateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RecurrenceInfo>;
    /**
     * Creates a RecurrenceInfo object populated with the default values for the specific type. Using startDate as start date for the recurreing pattern.
     * @param startDate - Date of which the recurring pattern should start.
     * @returns
     */
    CreateDefaultRecurrenceByDate(startDate: Date, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RecurrenceInfo>;
    private _CleanUpBookingDeleted;
    /**
     * Deletes all appointments(within the appointmentIds array) with status BookingDeleted.
     * @param request - AppointmentIds
     * @returns Number of modified or deleted appointments
     */
    CleanUpBookingDeleted(request: carriers.Appointment_CleanUpBookingDeletedRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Deletes all appointments(within the appointmentIds array) with status BookingDeleted.
     * @param appointmentIds -
     * @returns Number of modified or deleted appointments
     */
    CleanUpBookingDeleted(appointmentIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _CleanUpBookingDeletedWithUpdateMode;
    /**
     * Deletes all appointments(within the appointmentIds array) with status BookingDeleted. All appointments in the list will be deleted using the same recurrence update mode.
     * @param request - AppointmentIds, UpdateMode
     * @returns
     */
    CleanUpBookingDeletedWithUpdateMode(request: carriers.Appointment_CleanUpBookingDeletedWithUpdateModeRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Deletes all appointments(within the appointmentIds array) with status BookingDeleted. All appointments in the list will be deleted using the same recurrence update mode.
     * @param appointmentIds - List of appointment IDs
     * @param updateMode - Update mode
     * @returns
     */
    CleanUpBookingDeletedWithUpdateMode(appointmentIds: number[], updateMode: enums.RecurrenceUpdateMode, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _CleanUpRecurringBookingDeleted;
    /**
     * Deletes all appointments with status BookingDeleted and for in logged user.
     * @returns
     */
    CleanUpRecurringBookingDeleted(webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _CreateDefaultAppointmentEntityByTypeAndAssociate;
    /**
     * Creates a AppointmentEntity populated with the default values for the specific type and owner.
     * @param request - Type, AssociateId
     * @returns AppointmentEntity with default values.
     */
    CreateDefaultAppointmentEntityByTypeAndAssociate(request: carriers.Appointment_CreateDefaultAppointmentEntityByTypeAndAssociateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    /**
     * Creates a AppointmentEntity populated with the default values for the specific type and owner.
     * @param type - The type of task requested.
     * @param associateId - The associateId of the appointment owner.
     * @returns AppointmentEntity with default values.
     */
    CreateDefaultAppointmentEntityByTypeAndAssociate(type: enums.TaskType, associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    private _GetCanInsertForAssociates;
    /**
     * Check if current associate can create appointments in the diary of other associates.
     * @param request - AssociateIds
     * @returns Returns an array of bool corresponding to the associate array input parameter.
     */
    GetCanInsertForAssociates(request: carriers.Appointment_GetCanInsertForAssociatesRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean[]>;
    /**
     * Check if current associate can create appointments in the diary of other associates.
     * @param associateIds - Array of associate ids to check for.
     * @returns Returns an array of bool corresponding to the associate array input parameter.
     */
    GetCanInsertForAssociates(associateIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<boolean[]>;
    private _GetAppointmentHaveParticipantsWithEmail;
    /**
     * GetAppointmentHaveParticipantsWithEmail will check if any of the participants is marked to receive emails on this appointment. If no participants are defined, false will be returned.
     * @param request - AppointmentId
     * @returns Return true or false.
     */
    GetAppointmentHaveParticipantsWithEmail(request: carriers.Appointment_GetAppointmentHaveParticipantsWithEmailRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * GetAppointmentHaveParticipantsWithEmail will check if any of the participants is marked to receive emails on this appointment. If no participants are defined, false will be returned.
     * @param appointmentId - The appointmentId.
     * @returns Return true or false.
     */
    GetAppointmentHaveParticipantsWithEmail(appointmentId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _CreateDefaultAppointmentEntityFromSaleSuggestion;
    /**
     * Creates an appointment based on a suggested appointment.
     * @param request - SuggestedAppointmentId, SaleId, CreateNow, OwnerId
     * @returns The newly created appointment
     */
    CreateDefaultAppointmentEntityFromSaleSuggestion(request: carriers.Appointment_CreateDefaultAppointmentEntityFromSaleSuggestionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    /**
     * Creates an appointment based on a suggested appointment.
     * @param suggestedAppointmentId - The id of the suggested appointment
     * @param saleId - This is the id of the sale the appointment is connected to. This will be used to give the appointment it's starting date. If the id is 0 or invalid, we assume the start date is now
     * @param createNow - If this parameter is true, we override the suggested start time and create the appointment with the current date and time
     * @param ownerId -
     * @returns The newly created appointment
     */
    CreateDefaultAppointmentEntityFromSaleSuggestion(suggestedAppointmentId: number, saleId: number, createNow: boolean, ownerId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    private _GetNextSuggestedAppointmentBySale;
    /**
     * Gets the next suggested appointment for a given sale (or rather a given sale&apos;s guide).
     * @param request - SaleId, CurrentAppointmentId, SkipCompleteCheck
     * @returns  The next suggestion based on the sale id of a guided sale and the id of the current apopintment. If we cannot find a next suggestion or the sale is not guided (or if any of the paramters are invalid), we will return null.
     */
    GetNextSuggestedAppointmentBySale(request: carriers.Appointment_GetNextSuggestedAppointmentBySaleRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SuggestedAppointment>;
    /**
     * Gets the next suggested appointment for a given sale (or rather a given sale&apos;s guide).
     * @param saleId - The identifier of the (guided) sale from which we want to find a suggested appointment
     * @param currentAppointmentId - The identifier of the appointment from which we calculate the next suggestion. The next suggested appointment is the subsequent appointment defined in the SoAdmin's sales guide.
     * @param skipCompleteCheck - If you want to get the next appointment step in a sales guide for an appointment which is not completed, this value must be true. In all other cases, this value should be false, as it would return the value of null if the current appointment is not completes.
     * @returns  The next suggestion based on the sale id of a guided sale and the id of the current apopintment. If we cannot find a next suggestion or the sale is not guided (or if any of the paramters are invalid), we will return null.
     */
    GetNextSuggestedAppointmentBySale(saleId: number, currentAppointmentId: number, skipCompleteCheck: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SuggestedAppointment>;
    private _CreateDefaultReOpenAppointment;
    /**
     * A re-open appointment should be created as a reminder to re-open the sale at a certain date with information regarding the stalled sale.
     * @param request - SaleId
     * @returns The re-open appointment with start date = the re-open date of the sale and a description matching the sales stalled reason.
     */
    CreateDefaultReOpenAppointment(request: carriers.Appointment_CreateDefaultReOpenAppointmentRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    /**
     * A re-open appointment should be created as a reminder to re-open the sale at a certain date with information regarding the stalled sale.
     * @param saleId - The identifier of the stalled sale from which we create a re-open appointment
     * @returns The re-open appointment with start date = the re-open date of the sale and a description matching the sales stalled reason.
     */
    CreateDefaultReOpenAppointment(saleId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    private _CreateDefaultAppointmentEntityFromProjectSuggestion;
    /**
     *
     * @param request - SuggestedAppointmentId, ProjectId, CreateNow, OwnerId
     * @returns
     */
    CreateDefaultAppointmentEntityFromProjectSuggestion(request: carriers.Appointment_CreateDefaultAppointmentEntityFromProjectSuggestionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    /**
     *
     * @param suggestedAppointmentId -
     * @param projectId -
     * @param createNow -
     * @param ownerId -
     * @returns
     */
    CreateDefaultAppointmentEntityFromProjectSuggestion(suggestedAppointmentId: number, projectId: number, createNow: boolean, ownerId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    private _CreateAppointmentForUID;
    /**
     * Create an invitation record and an appointment with a given UID to reserve it if the UID is unused, otherwise null.
     * @param request - AppointmentEntity, UID
     * @returns The newly created AppointmentEntity or null if the UID is in the DB already.
     */
    CreateAppointmentForUID(request: carriers.Appointment_CreateAppointmentForUIDRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    /**
     * Create an invitation record and an appointment with a given UID to reserve it if the UID is unused, otherwise null.
     * @param appointmentEntity -
     * @param uID - The UID associated with the appointment
     * @returns The newly created AppointmentEntity or null if the UID is in the DB already.
     */
    CreateAppointmentForUID(appointmentEntity: carriers.AppointmentEntity, uID: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    private _GetAppointmentFromUID;
    /**
     * Get the appointment that corresponds to the given UID.
     * @param request - UID
     * @returns The corresponding AppointmentEntity if exists or a default appointment entity.
     */
    GetAppointmentFromUID(request: carriers.Appointment_GetAppointmentFromUIDRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    /**
     * Get the appointment that corresponds to the given UID.
     * @param uID - The UID associated with the appointment
     * @returns The corresponding AppointmentEntity if exists or a default appointment entity.
     */
    GetAppointmentFromUID(uID: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentEntity>;
    private _CanAssignToProjectMember;
    /**
     *
     * @param request - ProjectId, SuggestedAppointmentId
     * @returns
     */
    CanAssignToProjectMember(request: carriers.Appointment_CanAssignToProjectMemberRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     *
     * @param projectId -
     * @param suggestedAppointmentId -
     * @returns
     */
    CanAssignToProjectMember(projectId: number, suggestedAppointmentId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _GetUIDFromAppointmentId;
    /**
     * Get the UID associated with the appointment id in the Invitation table.
     * @param request - AppointmentId, UseMotherId
     * @returns The associated UID, or null if none exist.
     */
    GetUIDFromAppointmentId(request: carriers.Appointment_GetUIDFromAppointmentIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Get the UID associated with the appointment id in the Invitation table.
     * @param appointmentId -
     * @param useMotherId - Uses motherId if no UID is found for appointmentId.
     * @returns The associated UID, or null if none exist.
     */
    GetUIDFromAppointmentId(appointmentId: number, useMotherId: boolean, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _UpdateAppointmentFromIcsResponse;
    /**
     * Update the attendance to an appointment based on incoming ICS RSVPs.
     * @param request - EmailAddress, IcsData
     * @returns True if successfull.
     */
    UpdateAppointmentFromIcsResponse(request: carriers.Appointment_UpdateAppointmentFromIcsResponseRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Update the attendance to an appointment based on incoming ICS RSVPs.
     * @param emailAddress - The email-address of the person responding to our meeting-request.
     * @param icsData - The iCal ICS RSVP-content in byte-form.
     * @returns True if successfull.
     */
    UpdateAppointmentFromIcsResponse(emailAddress: string, icsData: ArrayBuffer | string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _ValidateAppointmentEntity;
    /**
     * Check that entity is ready for saving.
     * @param request - AppointmentEntity
     * @returns Error messages tagged by field.
     */
    ValidateAppointmentEntity(request: carriers.Appointment_ValidateAppointmentEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    /**
     * Check that entity is ready for saving.
     * @param appointmentEntity - Entity to be checked.
     * @returns Error messages tagged by field.
     */
    ValidateAppointmentEntity(appointmentEntity: carriers.AppointmentEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    private _WillSendEmail;
    /**
     * Returns true if the changes will trigger email sending on Save, so you can inform the user.
     * @param request - Appointment
     * @returns True if the changes to the appointment and preference settings etc. indicates an email should be sent.
     */
    WillSendEmail(request: carriers.Appointment_WillSendEmailRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Returns true if the changes will trigger email sending on Save, so you can inform the user.
     * @param appointment - The appointment carrier with changes made, before saving the changes.
     * @returns True if the changes to the appointment and preference settings etc. indicates an email should be sent.
     */
    WillSendEmail(appointment: carriers.AppointmentEntity, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _AcceptWithSmtpEmailConfirmation;
    /**
     * Accepting an appointment invitation and send an email confirmation to the meeting organizer.
     * @param request - AppointmentId, UpdateMode, SmtpEMailConnectionInfo
     * @returns Updated AppointmentEntity
     */
    AcceptWithSmtpEmailConfirmation(request: carriers.Appointment_AcceptWithSmtpEmailConfirmationRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Accepting an appointment invitation and send an email confirmation to the meeting organizer.
     * @param appointmentId - The appointmentId. Both master and child record ids are accepted.
     * @param updateMode - Update mode for a recurring appointment.
     * @param smtpEMailConnectionInfo - Login information for outgoing smtp email server. Will be null if no login information is relevant.
     * @returns Updated AppointmentEntity
     */
    AcceptWithSmtpEmailConfirmation(appointmentId: number, updateMode: enums.RecurrenceUpdateMode, smtpEMailConnectionInfo: carriers.EMailConnectionInfo, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _RejectWithSmtpEmailConfirmation;
    /**
     * Rejecting an appointment invitation and send an email confirmation to the meeting organizer.
     * @param request - AppointmentId, RejectReason, UpdateMode, SmtpEMailConnectionInfo
     * @returns Updated AppointmentEntity
     */
    RejectWithSmtpEmailConfirmation(request: carriers.Appointment_RejectWithSmtpEmailConfirmationRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Rejecting an appointment invitation and send an email confirmation to the meeting organizer.
     * @param appointmentId - The appointmentId. Both master and child record ids are accepted.
     * @param rejectReason - The reason the invitation was rejected.
     * @param updateMode - Update mode for a recurring appointment.
     * @param smtpEMailConnectionInfo - Login information for outgoing smtp email server. Will be null if no login information is relevant.
     * @returns Updated AppointmentEntity
     */
    RejectWithSmtpEmailConfirmation(appointmentId: number, rejectReason: string, updateMode: enums.RecurrenceUpdateMode, smtpEMailConnectionInfo: carriers.EMailConnectionInfo, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetAppointmentList(appointmentIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetMyAppointments;
    /**
     * Method that returns a specified number of appointments within a time range. The appointments belong to the currently logged on user.
     * @param request - StartTime, EndTime, Count
     * @returns Array of Appointments.
     */
    GetMyAppointments(request: carriers.Appointment_GetMyAppointmentsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     * Method that returns a specified number of appointments within a time range. The appointments belong to the currently logged on user.
     * @param startTime - The start of the time interval we want appointments from. This will usually be the current time.
     * @param endTime - The end of the time interval.
     * @param count - The maximum number of appointments that should be returned. -1 means no count restrictions.
     * @returns Array of Appointments.
     */
    GetMyAppointments(startTime: Date, endTime: Date, count: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetPersonAppointments;
    /**
     * Method that returns a specified number of appointments within a time range. The appointments belong to the person specified. If the person not is a SuperOffice user (associate) or the logged on user is not allowed to view this persons appointments an exception is thrown.
     * @param request - PersonId, IncludeProjectAppointments, StartTime, EndTime, Count
     * @returns Array of Appointments.
     */
    GetPersonAppointments(request: carriers.Appointment_GetPersonAppointmentsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     * Method that returns a specified number of appointments within a time range. The appointments belong to the person specified. If the person not is a SuperOffice user (associate) or the logged on user is not allowed to view this persons appointments an exception is thrown.
     * @param personId - The person id of the SuperOffice user (associate).
     * @param includeProjectAppointments - If true, all appointments that belong to projects where the user is a project member are included as well as the appointments belonging to the person.
     * @param startTime - The start of the time interval we want appointments from. This will usually be the current time.
     * @param endTime - The end of the time interval.
     * @param count - The maximum number of appointments that should be returned. -1 means no count restrictions.
     * @returns Array of Appointments.
     */
    GetPersonAppointments(personId: number, includeProjectAppointments: boolean, startTime: Date, endTime: Date, count: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetMyDiary;
    /**
     * Method that returns a specified number of appointments within a time range. It only returns appointments that would be displayed in the user&apos;s diary. The appointments belong to the currently logged on user.
     * @param request - StartTime, EndTime, Count
     * @returns Array of Appointments.
     */
    GetMyDiary(request: carriers.Appointment_GetMyDiaryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     * Method that returns a specified number of appointments within a time range. It only returns appointments that would be displayed in the user&apos;s diary. The appointments belong to the currently logged on user.
     * @param startTime - The start of the time interval we want appointments from. This will usually be the current time.
     * @param endTime - The end of the time interval.
     * @param count - The maximum number of appointments that should be returned. -1 means no count restrictions.
     * @returns Array of Appointments.
     */
    GetMyDiary(startTime: Date, endTime: Date, count: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetMyTasks;
    /**
     * Method that returns a specified number of appointments within a time range. It only returns appointments that would be displayed in the user&apos;s task list. The appointments belong to the currently logged on user.
     * @param request - Count
     * @returns Array of Appointments.
     */
    GetMyTasks(request: carriers.Appointment_GetMyTasksRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     * Method that returns a specified number of appointments within a time range. It only returns appointments that would be displayed in the user&apos;s task list. The appointments belong to the currently logged on user.
     * @param count - The maximum number of appointments that should be returned. -1 means no count restrictions.
     * @returns Array of Appointments.
     */
    GetMyTasks(count: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetPersonDiary;
    /**
     * Method that returns a specified number of appointments within a time range. It only returns appointments that would be displayed in the user&apos;s diary. The appointments belong to the person specified. If the person not is a SuperOffice user (associate) or the logged on user is not allowed to view this persons appointments an exception is thrown.
     * @param request - PersonId, StartTime, EndTime, Count
     * @returns Array of Appointments.
     */
    GetPersonDiary(request: carriers.Appointment_GetPersonDiaryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     * Method that returns a specified number of appointments within a time range. It only returns appointments that would be displayed in the user&apos;s diary. The appointments belong to the person specified. If the person not is a SuperOffice user (associate) or the logged on user is not allowed to view this persons appointments an exception is thrown.
     * @param personId - The person id of the SuperOffice user (associate).
     * @param startTime - The start of the time interval we want appointments from. This will usually be the current time.
     * @param endTime - The end of the time interval.
     * @param count - The maximum number of appointments that should be returned. -1 means no count restrictions.
     * @returns Array of Appointments.
     */
    GetPersonDiary(personId: number, startTime: Date, endTime: Date, count: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetPersonTasks;
    /**
     * Method that returns a specified number of appointments within a time range. It only returns appointments that would be displayed in the user&apos;s task list. The appointments belong to the person specified. If the person not is a SuperOffice user (associate) or the logged on user is not allowed to view this persons appointments an exception is thrown.
     * @param request - PersonId, Count
     * @returns Array of Appointments.
     */
    GetPersonTasks(request: carriers.Appointment_GetPersonTasksRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     * Method that returns a specified number of appointments within a time range. It only returns appointments that would be displayed in the user&apos;s task list. The appointments belong to the person specified. If the person not is a SuperOffice user (associate) or the logged on user is not allowed to view this persons appointments an exception is thrown.
     * @param personId - The person id of the SuperOffice user (associate).
     * @param count - The maximum number of appointments that should be returned. -1 means no count restrictions.
     * @returns Array of Appointments.
     */
    GetPersonTasks(personId: number, count: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetPersonAppointmentsByType;
    /**
     * Method that returns a specified number of appointments of a specific appointment type within a time range. The appointments belong to the person specified.
     * @param request - PersonId, IncludeProjectAppointments, StartTime, EndTime, Count, AppointmentType
     * @returns Array of Appointments.
     */
    GetPersonAppointmentsByType(request: carriers.Appointment_GetPersonAppointmentsByTypeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     * Method that returns a specified number of appointments of a specific appointment type within a time range. The appointments belong to the person specified.
     * @param personId - The person id of the SuperOffice user (associate).
     * @param includeProjectAppointments - If true, all appointments that belong to projects where the user is a project member are included as well as the appointments belonging to the person.
     * @param startTime - The start of the time interval we want appointments from. This will usually be the current time.
     * @param endTime - The end of the time interval.
     * @param count - The maximum number of appointments that should be returned. -1 means no count restrictions.
     * @param appointmentType - The appointment type, e.g. inDiary, inChecklist etc.
     * @returns Array of Appointments.
     */
    GetPersonAppointmentsByType(personId: number, includeProjectAppointments: boolean, startTime: Date, endTime: Date, count: number, appointmentType: enums.AppointmentType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetProjectAppointments;
    /**
     * Method that returns a specified number of appointments within a time range. The appointments belong to the project specified. If the logged on user is not allowed to view this projects appointments an exception is thrown.
     * @param request - ProjectId, StartTime, EndTime, Count
     * @returns Array of Appointments.
     */
    GetProjectAppointments(request: carriers.Appointment_GetProjectAppointmentsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     * Method that returns a specified number of appointments within a time range. The appointments belong to the project specified. If the logged on user is not allowed to view this projects appointments an exception is thrown.
     * @param projectId - The project id
     * @param startTime - The start of the time interval we want appointments from. This will usually be the current time.
     * @param endTime - The end of the time interval.
     * @param count - The maximum number of appointments that should be returned. -1 means no count restrictions.
     * @returns Array of Appointments.
     */
    GetProjectAppointments(projectId: number, startTime: Date, endTime: Date, count: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetProjectAppointmentsByType;
    /**
     * Method that returns a specified number of appointments of a specific appointment type within a time range. The appointments belong to the project specified.
     * @param request - ProjectId, StartTime, EndTime, Count, AppointmentType
     * @returns Array of Appointments.
     */
    GetProjectAppointmentsByType(request: carriers.Appointment_GetProjectAppointmentsByTypeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     * Method that returns a specified number of appointments of a specific appointment type within a time range. The appointments belong to the project specified.
     * @param projectId - The project id
     * @param startTime - The start of the time interval we want appointments from. This will usually be the current time.
     * @param endTime - The end of the time interval.
     * @param count - The maximum number of appointments that should be returned. -1 means no count restrictions.
     * @param appointmentType - The appointment type, e.g. inDiary, inChecklist etc.
     * @returns Array of Appointments.
     */
    GetProjectAppointmentsByType(projectId: number, startTime: Date, endTime: Date, count: number, appointmentType: enums.AppointmentType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetContactAppointments;
    /**
     * Method that returns a specified number of appointments within a time range. The appointments belong to the contact specified. If the logged on user is not allowed to view this persons appointments an exception is thrown.
     * @param request - ContactId, StartTime, EndTime, Count
     * @returns Array of Appointments.
     */
    GetContactAppointments(request: carriers.Appointment_GetContactAppointmentsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     * Method that returns a specified number of appointments within a time range. The appointments belong to the contact specified. If the logged on user is not allowed to view this persons appointments an exception is thrown.
     * @param contactId - The contact id
     * @param startTime - The start of the time interval we want appointments from. This will usually be the current time.
     * @param endTime - The end of the time interval.
     * @param count - The maximum number of appointments that should be returned. -1 means no count restrictions.
     * @returns Array of Appointments.
     */
    GetContactAppointments(contactId: number, startTime: Date, endTime: Date, count: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetContactAppointmentsByType;
    /**
     * Method that returns a specified number of appointments of a specific appointment type within a time range. The appointments belong to the contact specified. If the logged on user is not allowed to view this contacts appointments an exception is thrown.
     * @param request - ContactId, StartTime, EndTime, Count, AppointmentType
     * @returns Array of Appointments.
     */
    GetContactAppointmentsByType(request: carriers.Appointment_GetContactAppointmentsByTypeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     * Method that returns a specified number of appointments of a specific appointment type within a time range. The appointments belong to the contact specified. If the logged on user is not allowed to view this contacts appointments an exception is thrown.
     * @param contactId - The contact id
     * @param startTime - The start of the time interval we want appointments from. This will usually be the current time.
     * @param endTime - The end of the time interval.
     * @param count - The maximum number of appointments that should be returned. -1 means no count restrictions.
     * @param appointmentType - The appointment type, e.g. inDiary, inChecklist etc.
     * @returns Array of Appointments.
     */
    GetContactAppointmentsByType(contactId: number, startTime: Date, endTime: Date, count: number, appointmentType: enums.AppointmentType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetProjectMemberAppointments;
    /**
     * Method that returns a specified number of appointments within a time range. The appointments belong to the projects where the person specified is member.
     * @param request - PersonId, StartTime, EndTime, Count
     * @returns Array of Appointments.
     */
    GetProjectMemberAppointments(request: carriers.Appointment_GetProjectMemberAppointmentsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     * Method that returns a specified number of appointments within a time range. The appointments belong to the projects where the person specified is member.
     * @param personId - The project member's person id
     * @param startTime - The start of the time interval we want appointments from. This will usually be the current time.
     * @param endTime - The end of the time interval.
     * @param count - The maximum number of appointments that should be returned. -1 means no count restrictions.
     * @returns Array of Appointments.
     */
    GetProjectMemberAppointments(personId: number, startTime: Date, endTime: Date, count: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetProjectMemberAppointmentsByType;
    /**
     * Method that returns a specified number of appointments of a specific appointment type within a time range. The appointments belong to the projects where the person specified is member.
     * @param request - PersonId, StartTime, EndTime, Count, AppointmentType
     * @returns Array of Appointments.
     */
    GetProjectMemberAppointmentsByType(request: carriers.Appointment_GetProjectMemberAppointmentsByTypeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     * Method that returns a specified number of appointments of a specific appointment type within a time range. The appointments belong to the projects where the person specified is member.
     * @param personId - The project member's person id
     * @param startTime - The start of the time interval we want appointments from. This will usually be the current time.
     * @param endTime - The end of the time interval.
     * @param count - The maximum number of appointments that should be returned. -1 means no count restrictions.
     * @param appointmentType - The appointment type, e.g. inDiary, inChecklist etc.
     * @returns Array of Appointments.
     */
    GetProjectMemberAppointmentsByType(personId: number, startTime: Date, endTime: Date, count: number, appointmentType: enums.AppointmentType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetPersonAppointmentsByTask;
    /**
     * Method that returns a specified number of appointments of a specific appointment task type within a time range. The appointments belong to the person specified.  Task represents the different types of activities, like “Phone call”, “Meeting” and so on.
     * @param request - PersonId, IncludeProjectAppointments, StartTime, EndTime, Count, TaskId
     * @returns Array of Appointments.
     */
    GetPersonAppointmentsByTask(request: carriers.Appointment_GetPersonAppointmentsByTaskRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     * Method that returns a specified number of appointments of a specific appointment task type within a time range. The appointments belong to the person specified.  Task represents the different types of activities, like “Phone call”, “Meeting” and so on.
     * @param personId - The person id of the SuperOffice user (associate).
     * @param includeProjectAppointments - If true, all appointments that belong to projects where the user is a project member are included as well as the appointments belonging to the person.
     * @param startTime - The start of the time interval we want appointments from. This will usually be the current time.
     * @param endTime - The end of the time interval.
     * @param count - The maximum number of appointments that should be returned. -1 means no count restrictions.
     * @param taskId - The task id. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.
     * @returns Array of Appointments.
     */
    GetPersonAppointmentsByTask(personId: number, includeProjectAppointments: boolean, startTime: Date, endTime: Date, count: number, taskId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetPersonAppointmentsByTasks;
    /**
     * Method that returns a specified number of appointments from a list of appointment task types within a time range. The appointments belong to the person specified.  Task represents the different types of activities, like “Phone call”, “Meeting” and so on.
     * @param request - PersonId, IncludeProjectAppointments, StartTime, EndTime, Count, TaskIds
     * @returns Array of Appointments.
     */
    GetPersonAppointmentsByTasks(request: carriers.Appointment_GetPersonAppointmentsByTasksRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     * Method that returns a specified number of appointments from a list of appointment task types within a time range. The appointments belong to the person specified.  Task represents the different types of activities, like “Phone call”, “Meeting” and so on.
     * @param personId - The person id of the SuperOffice user (associate).
     * @param includeProjectAppointments - If true, all appointments that belong to projects where the user is a project member are included as well as the appointments belonging to the person.
     * @param startTime - The start of the time interval we want appointments from. This will usually be the current time.
     * @param endTime - The end of the time interval.
     * @param count - The maximum number of appointments that should be returned. -1 means no count restrictions.
     * @param taskIds - The task ids as an integer array. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.
     * @returns Array of Appointments.
     */
    GetPersonAppointmentsByTasks(personId: number, includeProjectAppointments: boolean, startTime: Date, endTime: Date, count: number, taskIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetPersonAppointmentsByTaskHeading;
    /**
     * Method that returns a specified number of appointments of a specific appointment task heading within a time range. The appointments belong to the person specified.  Task represents the different types of activities, like “Phone call”, “Meeting” and so on. The heading represents a grouping or filtering of tasks.
     * @param request - PersonId, IncludeProjectAppointments, StartTime, EndTime, Count, TaskHeadingId
     * @returns Array of Appointments.
     */
    GetPersonAppointmentsByTaskHeading(request: carriers.Appointment_GetPersonAppointmentsByTaskHeadingRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     * Method that returns a specified number of appointments of a specific appointment task heading within a time range. The appointments belong to the person specified.  Task represents the different types of activities, like “Phone call”, “Meeting” and so on. The heading represents a grouping or filtering of tasks.
     * @param personId - The person id of the SuperOffice user (associate).
     * @param includeProjectAppointments - If true, all appointments that belong to projects where the user is a project member are included as well as the appointments belonging to the person.
     * @param startTime - The start of the time interval we want appointments from. This will usually be the current time.
     * @param endTime - The end of the time interval.
     * @param count - The maximum number of appointments that should be returned. -1 means no count restrictions.
     * @param taskHeadingId - The task heading id. The heading represents a grouping or filtering of tasks. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.
     * @returns Array of Appointments.
     */
    GetPersonAppointmentsByTaskHeading(personId: number, includeProjectAppointments: boolean, startTime: Date, endTime: Date, count: number, taskHeadingId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetProjectAppointmentsByTask;
    /**
     * Method that returns a specified number of appointments of a specific appointment task type within a time range. The appointments belong to the project specified.  Task represents the different types of activities, like “Phone call”, “Meeting” and so on.
     * @param request - ProjectId, StartTime, EndTime, Count, TaskId
     * @returns Array of Appointments.
     */
    GetProjectAppointmentsByTask(request: carriers.Appointment_GetProjectAppointmentsByTaskRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     * Method that returns a specified number of appointments of a specific appointment task type within a time range. The appointments belong to the project specified.  Task represents the different types of activities, like “Phone call”, “Meeting” and so on.
     * @param projectId - The project id
     * @param startTime - The start of the time interval we want appointments from. This will usually be the current time.
     * @param endTime - The end of the time interval.
     * @param count - The maximum number of appointments that should be returned. -1 means no count restrictions.
     * @param taskId - The task id. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.
     * @returns Array of Appointments.
     */
    GetProjectAppointmentsByTask(projectId: number, startTime: Date, endTime: Date, count: number, taskId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetProjectAppointmentsByTasks;
    /**
     * Method that returns a specified number of appointments matching the list of appointment task types within a time range. The appointments belong to the project specified.  Task represents the different types of activities, like “Phone call”, “Meeting” and so on.
     * @param request - ProjectId, StartTime, EndTime, Count, TaskIds
     * @returns Array of Appointments.
     */
    GetProjectAppointmentsByTasks(request: carriers.Appointment_GetProjectAppointmentsByTasksRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     * Method that returns a specified number of appointments matching the list of appointment task types within a time range. The appointments belong to the project specified.  Task represents the different types of activities, like “Phone call”, “Meeting” and so on.
     * @param projectId - The project id
     * @param startTime - The start of the time interval we want appointments from. This will usually be the current time.
     * @param endTime - The end of the time interval.
     * @param count - The maximum number of appointments that should be returned. -1 means no count restrictions.
     * @param taskIds - The task ids as an integer array. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.
     * @returns Array of Appointments.
     */
    GetProjectAppointmentsByTasks(projectId: number, startTime: Date, endTime: Date, count: number, taskIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetProjectAppointmentsByTaskHeading;
    /**
     * Method that returns a specified number of appointments of a specific appointment task heading within a time range. The appointments belong to the project specified.  Task represents the different types of activities, like “Phone call”, “Meeting” and so on. The heading represents a grouping or filtering of tasks.
     * @param request - ProjectId, StartTime, EndTime, Count, TaskHeadingId
     * @returns Array of Appointments.
     */
    GetProjectAppointmentsByTaskHeading(request: carriers.Appointment_GetProjectAppointmentsByTaskHeadingRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     * Method that returns a specified number of appointments of a specific appointment task heading within a time range. The appointments belong to the project specified.  Task represents the different types of activities, like “Phone call”, “Meeting” and so on. The heading represents a grouping or filtering of tasks.
     * @param projectId - The project id
     * @param startTime - The start of the time interval we want appointments from. This will usually be the current time.
     * @param endTime - The end of the time interval.
     * @param count - The maximum number of appointments that should be returned. -1 means no count restrictions.
     * @param taskHeadingId - The task heading id. The heading represents a grouping or filtering of tasks. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.
     * @returns Array of Appointments.
     */
    GetProjectAppointmentsByTaskHeading(projectId: number, startTime: Date, endTime: Date, count: number, taskHeadingId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetProjectMemberAppointmentsByTask;
    /**
     * Method that returns a specified number of appointments of a specific appointment task type within a time range. The appointments belong to the projects where the person specified is member. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.
     * @param request - PersonId, StartTime, EndTime, Count, TaskId
     * @returns Array of Appointments.
     */
    GetProjectMemberAppointmentsByTask(request: carriers.Appointment_GetProjectMemberAppointmentsByTaskRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     * Method that returns a specified number of appointments of a specific appointment task type within a time range. The appointments belong to the projects where the person specified is member. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.
     * @param personId - The project member's person id
     * @param startTime - The start of the time interval we want appointments from. This will usually be the current time.
     * @param endTime - The end of the time interval.
     * @param count - The maximum number of appointments that should be returned. -1 means no count restrictions.
     * @param taskId - The task id. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.
     * @returns Array of Appointments.
     */
    GetProjectMemberAppointmentsByTask(personId: number, startTime: Date, endTime: Date, count: number, taskId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetProjectMemberAppointmentsByTasks;
    /**
     * Method that returns a specified number of appointments matching a set of appointment task types within a time range. The appointments belong to the projects where the person specified is member. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.
     * @param request - PersonId, StartTime, EndTime, Count, TaskIds
     * @returns Array of Appointments.
     */
    GetProjectMemberAppointmentsByTasks(request: carriers.Appointment_GetProjectMemberAppointmentsByTasksRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     * Method that returns a specified number of appointments matching a set of appointment task types within a time range. The appointments belong to the projects where the person specified is member. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.
     * @param personId - The project member's person id
     * @param startTime - The start of the time interval we want appointments from. This will usually be the current time.
     * @param endTime - The end of the time interval.
     * @param count - The maximum number of appointments that should be returned. -1 means no count restrictions.
     * @param taskIds - The task ids as an integer array. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.
     * @returns Array of Appointments.
     */
    GetProjectMemberAppointmentsByTasks(personId: number, startTime: Date, endTime: Date, count: number, taskIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetProjectMemberAppointmentsByTaskHeading;
    /**
     * Method that returns a specified number of appointments of a specific appointment task heading within a time range. The appointments belong to the projects where the person specified is member. Task represents the different types of activities, like “Phone call”, “Meeting” and so on. The heading represents a grouping or filtering of tasks.
     * @param request - PersonId, StartTime, EndTime, Count, TaskHeadingId
     * @returns Array of Appointments.
     */
    GetProjectMemberAppointmentsByTaskHeading(request: carriers.Appointment_GetProjectMemberAppointmentsByTaskHeadingRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     * Method that returns a specified number of appointments of a specific appointment task heading within a time range. The appointments belong to the projects where the person specified is member. Task represents the different types of activities, like “Phone call”, “Meeting” and so on. The heading represents a grouping or filtering of tasks.
     * @param personId - The project member's person id
     * @param startTime - The start of the time interval we want appointments from. This will usually be the current time.
     * @param endTime - The end of the time interval.
     * @param count - The maximum number of appointments that should be returned. -1 means no count restrictions.
     * @param taskHeadingId - The task heading id. The heading represents a grouping or filtering of tasks. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.
     * @returns Array of Appointments.
     */
    GetProjectMemberAppointmentsByTaskHeading(personId: number, startTime: Date, endTime: Date, count: number, taskHeadingId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetContactAppointmentsByTask;
    /**
     * Method that returns a specified number of appointments of a specific appointment task type within a time range. The appointments belong to the contact specified. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.
     * @param request - ContactId, StartTime, EndTime, Count, TaskId
     * @returns Array of Appointments.
     */
    GetContactAppointmentsByTask(request: carriers.Appointment_GetContactAppointmentsByTaskRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     * Method that returns a specified number of appointments of a specific appointment task type within a time range. The appointments belong to the contact specified. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.
     * @param contactId - The contact id
     * @param startTime - The start of the time interval we want appointments from. This will usually be the current time.
     * @param endTime - The end of the time interval.
     * @param count - The maximum number of appointments that should be returned. -1 means no count restrictions.
     * @param taskId - The task id. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.
     * @returns Array of Appointments.
     */
    GetContactAppointmentsByTask(contactId: number, startTime: Date, endTime: Date, count: number, taskId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetContactAppointmentsByTasks;
    /**
     * Method that returns a specified number of appointments belonging to an array of appointment task types within a time range. The appointments belong to the contact specified. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.
     * @param request - ContactId, StartTime, EndTime, Count, TaskIds
     * @returns Array of Appointments.
     */
    GetContactAppointmentsByTasks(request: carriers.Appointment_GetContactAppointmentsByTasksRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     * Method that returns a specified number of appointments belonging to an array of appointment task types within a time range. The appointments belong to the contact specified. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.
     * @param contactId - The contact id
     * @param startTime - The start of the time interval we want appointments from. This will usually be the current time.
     * @param endTime - The end of the time interval.
     * @param count - The maximum number of appointments that should be returned. -1 means no count restrictions.
     * @param taskIds - The task ids as an integer array. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.
     * @returns Array of Appointments.
     */
    GetContactAppointmentsByTasks(contactId: number, startTime: Date, endTime: Date, count: number, taskIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetContactAppointmentsByTaskHeading;
    /**
     * Method that returns a specified number of appointments of a specific appointment task heading within a time range. The appointments belong to the contact specified. Task represents the different types of activities, like “Phone call”, “Meeting” and so on. The heading represents a grouping or filtering of tasks.
     * @param request - ContactId, StartTime, EndTime, Count, TaskHeadingId
     * @returns Array of Appointments.
     */
    GetContactAppointmentsByTaskHeading(request: carriers.Appointment_GetContactAppointmentsByTaskHeadingRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     * Method that returns a specified number of appointments of a specific appointment task heading within a time range. The appointments belong to the contact specified. Task represents the different types of activities, like “Phone call”, “Meeting” and so on. The heading represents a grouping or filtering of tasks.
     * @param contactId - The contact id
     * @param startTime - The start of the time interval we want appointments from. This will usually be the current time.
     * @param endTime - The end of the time interval.
     * @param count - The maximum number of appointments that should be returned. -1 means no count restrictions.
     * @param taskHeadingId - The task heading id. The heading represents a grouping or filtering of tasks. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.
     * @returns Array of Appointments.
     */
    GetContactAppointmentsByTaskHeading(contactId: number, startTime: Date, endTime: Date, count: number, taskHeadingId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetPublishedAppointment;
    /**
     * Get published appointment by appointment id.
     * @param request - AppointmentId
     * @returns Appointment
     */
    GetPublishedAppointment(request: carriers.Appointment_GetPublishedAppointmentRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment>;
    /**
     * Get published appointment by appointment id.
     * @param appointmentId - The appointment id
     * @returns Appointment
     */
    GetPublishedAppointment(appointmentId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment>;
    private _GetPublishedAppointments;
    /**
     * Get published appointments by appointment ids.
     * @param request - AppointmentIds
     * @returns Array of Appointment
     */
    GetPublishedAppointments(request: carriers.Appointment_GetPublishedAppointmentsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     * Get published appointments by appointment ids.
     * @param appointmentIds - The array of appointment ids
     * @returns Array of Appointment
     */
    GetPublishedAppointments(appointmentIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetMyPublishedAppointments;
    /**
     * Get published appointments from the logged in user.
     * @returns Appointments
     */
    GetMyPublishedAppointments(webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetPublishedProjectAppointments;
    /**
     * Get published appointments by project id.
     * @param request - ProjectId
     * @returns Array of Appointment
     */
    GetPublishedProjectAppointments(request: carriers.Appointment_GetPublishedProjectAppointmentsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     * Get published appointments by project id.
     * @param projectId - The project id
     * @returns Array of Appointment
     */
    GetPublishedProjectAppointments(projectId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetAppointmentsByTaskHeading;
    /**
     * Method that returns appointments of a specific appointment task heading. Task represents the different types of activities, like “Phone call”, “Meeting” and so on. The heading represents a grouping or filtering of tasks.
     * @param request - TaskHeadingId
     * @returns Array of Appointments.
     */
    GetAppointmentsByTaskHeading(request: carriers.Appointment_GetAppointmentsByTaskHeadingRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     * Method that returns appointments of a specific appointment task heading. Task represents the different types of activities, like “Phone call”, “Meeting” and so on. The heading represents a grouping or filtering of tasks.
     * @param taskHeadingId - The task heading id. The heading represents a grouping or filtering of tasks. Task represents the different types of activities, like “Phone call”, “Meeting” and so on
     * @returns Array of Appointments.
     */
    GetAppointmentsByTaskHeading(taskHeadingId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetAssociateDiary;
    /**
     *
     * @param request - AssociateId, StartTime, EndTime, Count
     * @returns
     */
    GetAssociateDiary(request: carriers.Appointment_GetAssociateDiaryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     *
     * @param associateId -
     * @param startTime -
     * @param endTime -
     * @param count -
     * @returns
     */
    GetAssociateDiary(associateId: number, startTime: Date, endTime: Date, count: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetDiaryByGroup;
    /**
     *
     * @param request - GroupId, GroupType, StartTime, EndTime, Count
     * @returns
     */
    GetDiaryByGroup(request: carriers.Appointment_GetDiaryByGroupRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     *
     * @param groupId -
     * @param groupType -
     * @param startTime -
     * @param endTime -
     * @param count -
     * @returns
     */
    GetDiaryByGroup(groupId: number, groupType: number, startTime: Date, endTime: Date, count: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _UpdateAppointment;
    /**
     * Updates an appointment record.
     * @param request - Id, StartTime, EndTime, Status, Type, AssociateId
     * @returns
     */
    UpdateAppointment(request: carriers.Appointment_UpdateAppointmentRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment>;
    /**
     * Updates an appointment record.
     * @param id -
     * @param startTime -
     * @param endTime -
     * @param status -
     * @param type -
     * @param associateId - The appointment owner's id (associate id)
     * @returns
     */
    UpdateAppointment(id: number, startTime: Date, endTime: Date, status: number, type: number, associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment>;
    private _GetAssociatesDiary;
    /**
     *
     * @param request - AssociateIds, StartTime, EndTime
     * @returns
     */
    GetAssociatesDiary(request: carriers.Appointment_GetAssociatesDiaryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     *
     * @param associateIds -
     * @param startTime -
     * @param endTime -
     * @returns
     */
    GetAssociatesDiary(associateIds: number[], startTime: Date, endTime: Date, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetAppointmentRecords;
    /**
     * Get all records involved in a booking and/or recurring appointments. MotherId can be zero for repeating appointments or bookings, and recurrenceRuleId can be zero for bookings that are not repeating.
     * @param request - MotherId, RecurrenceRuleId
     * @returns
     */
    GetAppointmentRecords(request: carriers.Appointment_GetAppointmentRecordsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    /**
     * Get all records involved in a booking and/or recurring appointments. MotherId can be zero for repeating appointments or bookings, and recurrenceRuleId can be zero for bookings that are not repeating.
     * @param motherId - Appointment id of the owner of a booking
     * @param recurrenceRuleId - RecurrenceId of a recuring appointment
     * @returns
     */
    GetAppointmentRecords(motherId: number, recurrenceRuleId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Appointment[]>;
    private _GetMySyncAppointments;
    /**
     * Method that returns a specified number of appointments within a time range. The appointments belong to the currently logged on user.
     * @param request - StartTime, EndTime
     * @returns Array of Appointments.
     */
    GetMySyncAppointments(request: carriers.Appointment_GetMySyncAppointmentsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentSyncData[]>;
    /**
     * Method that returns a specified number of appointments within a time range. The appointments belong to the currently logged on user.
     * @param startTime - The start of the time interval in which we want appointments. This will usually be the current time.
     * @param endTime - The end of the time interval.
     * @returns Array of Appointments.
     */
    GetMySyncAppointments(startTime: Date, endTime: Date, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AppointmentSyncData[]>;
    private _GetDayInformationListByDatesAndAssociate;
    /**
     * Get combined day information (activity + redletter summary) for one or more days according to the given date interval. The time portion of the dates is ignored. Private appointments are counted, but may not be visible through tooltips or other more detailed services.
     * @param request - StartDate, EndDate, AssociateId
     * @returns Exactly one item per day of the given time span is returned. Days where nothing happens will have all values set to 0, but will still be in the returned array. Start end dates are treated as inclusive.
     */
    GetDayInformationListByDatesAndAssociate(request: carriers.Appointment_GetDayInformationListByDatesAndAssociateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DayInformationListItem[]>;
    /**
     * Get combined day information (activity + redletter summary) for one or more days according to the given date interval. The time portion of the dates is ignored. Private appointments are counted, but may not be visible through tooltips or other more detailed services.
     * @param startDate - Start date of interval. Time portion is ignored.
     * @param endDate - End date of interval. Time portion is ignored.
     * @param associateId - Associate id to identify the calendar to scan. If 0 is passed in, the currently authenticated associate is used instead.
     * @returns Exactly one item per day of the given time span is returned. Days where nothing happens will have all values set to 0, but will still be in the returned array. Start end dates are treated as inclusive.
     */
    GetDayInformationListByDatesAndAssociate(startDate: Date, endDate: Date, associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DayInformationListItem[]>;
    private _GetActivityInformationListByDatesAndAssociate;
    /**
     * Get activity information for one or more days according to the given date interval. The time portion of the dates is ignored. Private appointments are counted, but may not be visible through tooltips or other more detailed services.
     * @param request - StartDate, EndDate, AssociateId
     * @returns Exactly one item per day of the given time span is returned. Days where nothing happens will have all values set to 0, but will still be in the returned array. Start end dates are treated as inclusive.
     */
    GetActivityInformationListByDatesAndAssociate(request: carriers.Appointment_GetActivityInformationListByDatesAndAssociateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ActivityInformationListItem[]>;
    /**
     * Get activity information for one or more days according to the given date interval. The time portion of the dates is ignored. Private appointments are counted, but may not be visible through tooltips or other more detailed services.
     * @param startDate - Start date of interval. Time portion is ignored.
     * @param endDate - End date of interval. Time portion is ignored.
     * @param associateId - Associate id to identify the calendar to scan. If 0 is passed in, the currently authenticated associate is used instead.
     * @returns Exactly one item per day of the given time span is returned. Days where nothing happens will have all values set to 0, but will still be in the returned array. Start end dates are treated as inclusive.
     */
    GetActivityInformationListByDatesAndAssociate(startDate: Date, endDate: Date, associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ActivityInformationListItem[]>;
    private _GetRedLetterInformationListByDatesAndAssociate;
    /**
     * Get detailed red letter day information (redletter summary + individual day texts) for one or more days according to the given date interval. The time portion of the dates is ignored.
     * @param request - StartDate, EndDate, AssociateId
     * @returns Exactly one item per day of the given time span is returned. Days where nothing happens will have all values set to 0, but will still be in the returned array. Start end dates are treated as inclusive.
     */
    GetRedLetterInformationListByDatesAndAssociate(request: carriers.Appointment_GetRedLetterInformationListByDatesAndAssociateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RedLetterInformationListItem[]>;
    /**
     * Get detailed red letter day information (redletter summary + individual day texts) for one or more days according to the given date interval. The time portion of the dates is ignored.
     * @param startDate - Start date of interval. Time portion is ignored.
     * @param endDate - End date of interval. Time portion is ignored.
     * @param associateId - Associate id to identify the calendar to scan. If 0 is passed in, the currently authenticated associate is used instead.
     * @returns Exactly one item per day of the given time span is returned. Days where nothing happens will have all values set to 0, but will still be in the returned array. Start end dates are treated as inclusive.
     */
    GetRedLetterInformationListByDatesAndAssociate(startDate: Date, endDate: Date, associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RedLetterInformationListItem[]>;
    private _GetAlarms;
    /**
     *
     * @param request - IncludeInvitations, IncludeAllAppointments, DefaultAlarmLeadTimeInMinutes
     * @returns
     */
    GetAlarms(request: carriers.Appointment_GetAlarmsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MultiAlarmData>;
    /**
     *
     * @param includeInvitations -
     * @param includeAllAppointments -
     * @param defaultAlarmLeadTimeInMinutes -
     * @returns
     */
    GetAlarms(includeInvitations: boolean, includeAllAppointments: boolean, defaultAlarmLeadTimeInMinutes: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MultiAlarmData>;
    private _GenerateLead;
    /**
     * Adds a sales lead (task) to a contact in SuperOffice. If the contact or person is known, the sales lead is added to the current contact. If not, a new contact is created, with the associate with ownerIdForNewContact as responsible (Our Contact). A relation is created between the contact and the person submitting the lead. Based on wether the person the request is made for is found or not, the following happens: If the person is found, the person, person&apos;s contact and sales representative is returned. If neither the person nor the contact is found a new person and contact is created (if sufficient data is supplied), and the person, person&apos;s contact and sales representative is returned. If the contact and not the person is found a new person is created on this contact, and the contact, salesrep, and person is returned (if there was enough data to return the person). If more than one contact is found a list of contacts is returned.
     * @param request - AssociateIdForNewContact, LeadDescription, Relation, RelationId, LeadContact, LeadPersonFirstname, LeadPersonLastname, LeadPersonEmail, LeadPhoneNumber, CreatorsContact, CreatorsFirstname, CreatorsLastname
     * @returns True if successfull.
     */
    GenerateLead(request: carriers.Appointment_GenerateLeadRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SalesActivity>;
    /**
     * Adds a sales lead (task) to a contact in SuperOffice. If the contact or person is known, the sales lead is added to the current contact. If not, a new contact is created, with the associate with ownerIdForNewContact as responsible (Our Contact). A relation is created between the contact and the person submitting the lead. Based on wether the person the request is made for is found or not, the following happens: If the person is found, the person, person&apos;s contact and sales representative is returned. If neither the person nor the contact is found a new person and contact is created (if sufficient data is supplied), and the person, person&apos;s contact and sales representative is returned. If the contact and not the person is found a new person is created on this contact, and the contact, salesrep, and person is returned (if there was enough data to return the person). If more than one contact is found a list of contacts is returned.
     * @param associateIdForNewContact - Associate id of the person set as "Our Contact" if a new Contact is created. Ensures that the sales lead is assigned to the correct salesman.
     * @param leadDescription - Description of the lead. The lead text as shown in SuperOffice
     * @param relation - The relation the person submitting the lead has to the contact.
     * @param relationId - Id of the relation type. Database specific.
     * @param leadContact - Name of the new or existing contact (company) the lead is created for.
     * @param leadPersonFirstname - Firstname of the contact's person.
     * @param leadPersonLastname - Lastname of the contact's person.
     * @param leadPersonEmail - Email to the contact's person.
     * @param leadPhoneNumber - Phone number of the contact or contact's person.
     * @param creatorsContact - The contact (company) of the person creating the lead
     * @param creatorsFirstname - The firstname of the person creating the lead
     * @param creatorsLastname - The lastname of the person creating the lead
     * @returns True if successfull.
     */
    GenerateLead(associateIdForNewContact: number, leadDescription: string, relation: string, relationId: number, leadContact: string, leadPersonFirstname: string, leadPersonLastname: string, leadPersonEmail: string, leadPhoneNumber: string, creatorsContact: string, creatorsFirstname: string, creatorsLastname: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SalesActivity>;
    private _RequestForInfo;
    /**
     * Submits a request for information. The request is added to the task list of the user that is responsible for this contact. Based on wether the person the request is made for is found or not, the following happens: If the person is found, the person, person&apos;s contact and sales representative is returned. If neither the person nor the contact is found a new person and contact is created (if sufficient data is supplied), and the person, person&apos;s contact and sales representative is returned. If the contact and not the person is found a new person is created on this contact, and the contact, salesrep, and person is returned (if there was enough data to return the person). If more than one contact is found a list of contacts is returned.
     * @param request - AssociateIdForNewContact, Channel, Regarding, ContactName, PersonFirstname, PersonLastname, EmailAddress, PhoneNumber
     * @returns True if the submission was successful.
     */
    RequestForInfo(request: carriers.Appointment_RequestForInfoRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SalesActivity>;
    /**
     * Submits a request for information. The request is added to the task list of the user that is responsible for this contact. Based on wether the person the request is made for is found or not, the following happens: If the person is found, the person, person&apos;s contact and sales representative is returned. If neither the person nor the contact is found a new person and contact is created (if sufficient data is supplied), and the person, person&apos;s contact and sales representative is returned. If the contact and not the person is found a new person is created on this contact, and the contact, salesrep, and person is returned (if there was enough data to return the person). If more than one contact is found a list of contacts is returned.
     * @param associateIdForNewContact - Associate id of the person set as "Our Contact" if a new Contact is created. Ensures that the request is assigned to the correct salesman.
     * @param channel - The requested channel, e.g. "Phone"
     * @param regarding - The text submitted by the user.
     * @param contactName - The name of the contact that the RFI will be added to. May be empty.
     * @param personFirstname - The firstname of the person that the RFI will be added to. May be empty.
     * @param personLastname - The lastname of the person that the RFI will be added to. May be empty.
     * @param emailAddress - The email address of the person that the RFI will be added to.
     * @param phoneNumber - Phone number of the contact or contact's person.
     * @returns True if the submission was successful.
     */
    RequestForInfo(associateIdForNewContact: number, channel: string, regarding: string, contactName: string, personFirstname: string, personLastname: string, emailAddress: string, phoneNumber: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SalesActivity>;
    GetSuggestedAppointment(suggestedAppointmentId: number, options?: base.WebApiRequestOptions): Promise<carriers.SuggestedAppointment>;
    GetSuggestedAppointmentEntity(suggestedAppointmentEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.SuggestedAppointmentEntity>;
    GetTaskListItem(taskListItemId: number, options?: base.WebApiRequestOptions): Promise<carriers.TaskListItem>;
    private _GetTaskListItems;
    /**
     * Gets all takslist items
     * @param request - IncludeDeleted
     * @returns An array of tasklist items
     */
    GetTaskListItems(request: carriers.Appointment_GetTaskListItemsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TaskListItem[]>;
    /**
     * Gets all takslist items
     * @param includeDeleted - Include deleted items
     * @returns An array of tasklist items
     */
    GetTaskListItems(includeDeleted: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TaskListItem[]>;
}
//# sourceMappingURL=AppointmentAgent.d.ts.map