import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Agent that lets you configure dashboard tiles and retrieve dashboard data
 */
export interface IDashAgent {
    CreateDefaultDash(): Promise<carriers.Dash>;
    SaveDash(entity: carriers.Dash): Promise<carriers.Dash>;
    DeleteDash(DashId: number): Promise<void>;
    CreateDefaultDashCollection(): Promise<carriers.DashCollection>;
    CreateDefaultDashTheme(): Promise<carriers.DashTheme>;
    SaveDashTheme(entity: carriers.DashTheme): Promise<carriers.DashTheme>;
    DeleteDashTheme(DashThemeId: number): Promise<void>;
    CreateDefaultDashTile(): Promise<carriers.DashTile>;
    SaveDashTile(entity: carriers.DashTile): Promise<carriers.DashTile>;
    DeleteDashTile(DashTileId: number): Promise<void>;
    CreateDefaultDashTileDefinition(): Promise<carriers.DashTileDefinition>;
    SaveDashTileDefinition(entity: carriers.DashTileDefinition): Promise<carriers.DashTileDefinition>;
    DeleteDashTileDefinition(DashTileDefinitionId: number): Promise<void>;
    CreateDefaultPreviewDash(): Promise<carriers.PreviewDash>;
    CreateDefaultPreviewDashTile(): Promise<carriers.PreviewDashTile>;
    GetDash(dashId: number): Promise<carriers.Dash>;
    AddTileToDashboard(request: carriers.Dash_AddTileToDashboardRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTile>;
    AddTileToDashboard(dashboardId: number, dashTileDefinitionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTile>;
    AddNewTileToDashboard(request: carriers.Dash_AddNewTileToDashboardRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTile>;
    AddNewTileToDashboard(dashboardId: number, dashTileDefinition: carriers.DashTileDefinition, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTile>;
    DuplicateDashboard(request: carriers.Dash_DuplicateDashboardRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Dash>;
    DuplicateDashboard(dashboardId: number, name: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Dash>;
    GetDashList(request: carriers.Dash_GetDashListRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Dash[]>;
    GetDashList(dashboards: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.Dash[]>;
    GetDashCollection(webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashCollection>;
    GetDashTheme(dashThemeId: number): Promise<carriers.DashTheme>;
    GetDashTile(dashTileId: number): Promise<carriers.DashTile>;
    GetDashTiles(request: carriers.Dash_GetDashTilesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTile[]>;
    GetDashTiles(dashboardId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTile[]>;
    SaveDashTiles(request: carriers.Dash_SaveDashTilesRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SaveDashTiles(dashboardId: number, dashTiles: carriers.DashTile[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    CreateDashTileSelectionFromEntity(request: carriers.Dash_CreateDashTileSelectionFromEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    CreateDashTileSelectionFromEntity(entityName: string, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    CopyTileSelection(request: carriers.Dash_CopyTileSelectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    CopyTileSelection(selectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    GetTempTileSelection(request: carriers.Dash_GetTempTileSelectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    GetTempTileSelection(selectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    GetSecondaryTempTileSelection(request: carriers.Dash_GetSecondaryTempTileSelectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    GetSecondaryTempTileSelection(selectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    CreateDefaultTileForEntity(request: carriers.Dash_CreateDefaultTileForEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTile>;
    CreateDefaultTileForEntity(entityName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTile>;
    DuplicateTile(request: carriers.Dash_DuplicateTileRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTile>;
    DuplicateTile(dashTileId: number, name: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTile>;
    GetDashTileDefinition(dashTileDefinitionId: number): Promise<carriers.DashTileDefinition>;
    CreateDefaultTileDefinitionForEntity(request: carriers.Dash_CreateDefaultTileDefinitionForEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTileDefinition>;
    CreateDefaultTileDefinitionForEntity(entityName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTileDefinition>;
    GetDashTileHtml(request: carriers.Dash_GetDashTileHtmlRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTileHtml>;
    GetDashTileHtml(dashboardTileDefinitionId: number, languageCode: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTileHtml>;
    GetDashTileHtmlList(request: carriers.Dash_GetDashTileHtmlListRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTileHtml[]>;
    GetDashTileHtmlList(dashboardTileDefinitionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTileHtml[]>;
    SaveDashTileHtmlList(request: carriers.Dash_SaveDashTileHtmlListRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTileHtml[]>;
    SaveDashTileHtmlList(dashboardTileDefinitionId: number, languages: carriers.DashTileHtml[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTileHtml[]>;
    GetPreviewDash(request: carriers.Dash_GetPreviewDashRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreviewDash>;
    GetPreviewDash(dashboardId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreviewDash>;
}
/**
 * Agent that lets you configure dashboard tiles and retrieve dashboard data
 */
export declare class DashAgent extends base.WebApiBase implements IDashAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * Set default values into a new Dash.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultDash(options?: base.WebApiRequestOptions): Promise<carriers.Dash>;
    SaveDash(entity: carriers.Dash, options?: base.WebApiRequestOptions): Promise<carriers.Dash>;
    DeleteDash(DashId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new DashCollection.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultDashCollection(options?: base.WebApiRequestOptions): Promise<carriers.DashCollection>;
    /**
     * Set default values into a new DashTheme.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultDashTheme(options?: base.WebApiRequestOptions): Promise<carriers.DashTheme>;
    SaveDashTheme(entity: carriers.DashTheme, options?: base.WebApiRequestOptions): Promise<carriers.DashTheme>;
    DeleteDashTheme(DashThemeId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new DashTile.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultDashTile(options?: base.WebApiRequestOptions): Promise<carriers.DashTile>;
    SaveDashTile(entity: carriers.DashTile, options?: base.WebApiRequestOptions): Promise<carriers.DashTile>;
    DeleteDashTile(DashTileId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new DashTileDefinition.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultDashTileDefinition(options?: base.WebApiRequestOptions): Promise<carriers.DashTileDefinition>;
    SaveDashTileDefinition(entity: carriers.DashTileDefinition, options?: base.WebApiRequestOptions): Promise<carriers.DashTileDefinition>;
    DeleteDashTileDefinition(DashTileDefinitionId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new PreviewDash.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultPreviewDash(options?: base.WebApiRequestOptions): Promise<carriers.PreviewDash>;
    /**
     * Set default values into a new PreviewDashTile.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultPreviewDashTile(options?: base.WebApiRequestOptions): Promise<carriers.PreviewDashTile>;
    GetDash(dashId: number, options?: base.WebApiRequestOptions): Promise<carriers.Dash>;
    private _AddTileToDashboard;
    /**
     * Add a tile to a dashboard with next rank
     * @param request - DashboardId, DashTileDefinitionId
     * @returns The newly added tile
     */
    AddTileToDashboard(request: carriers.Dash_AddTileToDashboardRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTile>;
    /**
     * Add a tile to a dashboard with next rank
     * @param dashboardId - The id of the dashboard to add the tile to
     * @param dashTileDefinitionId - The id of the dashboard tile definition
     * @returns The newly added tile
     */
    AddTileToDashboard(dashboardId: number, dashTileDefinitionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTile>;
    private _AddNewTileToDashboard;
    /**
     * Add a new tile to a dashboard with next rank
     * @param request - DashboardId, DashTileDefinition
     * @returns The newly added tile
     */
    AddNewTileToDashboard(request: carriers.Dash_AddNewTileToDashboardRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTile>;
    /**
     * Add a new tile to a dashboard with next rank
     * @param dashboardId - The id of the dashboard to add the tile to
     * @param dashTileDefinition - The tile definition data to add to the dashboard
     * @returns The newly added tile
     */
    AddNewTileToDashboard(dashboardId: number, dashTileDefinition: carriers.DashTileDefinition, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTile>;
    private _DuplicateDashboard;
    /**
     * Duplicate for the dashboard and all the sub elements
     * @param request - DashboardId, Name
     * @returns New dashboard
     */
    DuplicateDashboard(request: carriers.Dash_DuplicateDashboardRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Dash>;
    /**
     * Duplicate for the dashboard and all the sub elements
     * @param dashboardId - The id of the dashboard to add the tile to
     * @param name - The name of the new dashboard
     * @returns New dashboard
     */
    DuplicateDashboard(dashboardId: number, name: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Dash>;
    private _GetDashList;
    /**
     * Gets the ordered list of dashboards
     * @param request - Dashboards
     * @returns List of dashboards
     */
    GetDashList(request: carriers.Dash_GetDashListRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Dash[]>;
    /**
     * Gets the ordered list of dashboards
     * @param dashboards - List of dashboardIds
     * @returns List of dashboards
     */
    GetDashList(dashboards: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.Dash[]>;
    private _GetDashCollection;
    /**
     * Gets a collection of dashboards for the current associate
     * @returns Dashboard collection
     */
    GetDashCollection(webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashCollection>;
    GetDashTheme(dashThemeId: number, options?: base.WebApiRequestOptions): Promise<carriers.DashTheme>;
    GetDashTile(dashTileId: number, options?: base.WebApiRequestOptions): Promise<carriers.DashTile>;
    private _GetDashTiles;
    /**
     * Gets the ordered list of tiles for a dashboard
     * @param request - DashboardId
     * @returns Ordered list of dashboard tiles
     */
    GetDashTiles(request: carriers.Dash_GetDashTilesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTile[]>;
    /**
     * Gets the ordered list of tiles for a dashboard
     * @param dashboardId - The id of the dashboard
     * @returns Ordered list of dashboard tiles
     */
    GetDashTiles(dashboardId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTile[]>;
    private _SaveDashTiles;
    /**
     * Saves the ordered list of tiles for a dashboard
     * @param request - DashboardId, DashTiles
     * @returns
     */
    SaveDashTiles(request: carriers.Dash_SaveDashTilesRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Saves the ordered list of tiles for a dashboard
     * @param dashboardId - The id of the dashboard
     * @param dashTiles - The tiles in order
     * @returns
     */
    SaveDashTiles(dashboardId: number, dashTiles: carriers.DashTile[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _CreateDashTileSelectionFromEntity;
    /**
     * Returns the id to a dashboard tile selection
     * @param request - EntityName
     * @returns Selection Id
     */
    CreateDashTileSelectionFromEntity(request: carriers.Dash_CreateDashTileSelectionFromEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Returns the id to a dashboard tile selection
     * @param entityName - The name of the entity to create a default selection for
     * @returns Selection Id
     */
    CreateDashTileSelectionFromEntity(entityName: string, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _CopyTileSelection;
    /**
     * Copy Tile Selection for the dashboard
     * @param request - SelectionId
     * @returns Selection Id
     */
    CopyTileSelection(request: carriers.Dash_CopyTileSelectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Copy Tile Selection for the dashboard
     * @param selectionId - The id of the selection to copy from
     * @returns Selection Id
     */
    CopyTileSelection(selectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _GetTempTileSelection;
    /**
     * Copy selection to temporary personal tile selection
     * @param request - SelectionId
     * @returns Selection Id
     */
    GetTempTileSelection(request: carriers.Dash_GetTempTileSelectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Copy selection to temporary personal tile selection
     * @param selectionId - The id of the selection to copy from
     * @returns Selection Id
     */
    GetTempTileSelection(selectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _GetSecondaryTempTileSelection;
    /**
     * Copy selection to secondary temporary personal tile selection
     * @param request - SelectionId
     * @returns Selection Id
     */
    GetSecondaryTempTileSelection(request: carriers.Dash_GetSecondaryTempTileSelectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Copy selection to secondary temporary personal tile selection
     * @param selectionId - The id of the selection to copy from
     * @returns Selection Id
     */
    GetSecondaryTempTileSelection(selectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _CreateDefaultTileForEntity;
    /**
     * Set Measure to CountAll and MeasureField to primary key field
     * @param request - EntityName
     * @returns Default
     */
    CreateDefaultTileForEntity(request: carriers.Dash_CreateDefaultTileForEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTile>;
    /**
     * Set Measure to CountAll and MeasureField to primary key field
     * @param entityName - Name of entity to use for primary key
     * @returns Default
     */
    CreateDefaultTileForEntity(entityName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTile>;
    private _DuplicateTile;
    /**
     * Duplicate for the tile and all the sub elements
     * @param request - DashTileId, Name
     * @returns New tile
     */
    DuplicateTile(request: carriers.Dash_DuplicateTileRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTile>;
    /**
     * Duplicate for the tile and all the sub elements
     * @param dashTileId - The id of the tile to copy
     * @param name - The name of the new tile
     * @returns New tile
     */
    DuplicateTile(dashTileId: number, name: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTile>;
    GetDashTileDefinition(dashTileDefinitionId: number, options?: base.WebApiRequestOptions): Promise<carriers.DashTileDefinition>;
    private _CreateDefaultTileDefinitionForEntity;
    /**
     * Set Measure to CountAll and MeasureField to primary key field
     * @param request - EntityName
     * @returns Default
     */
    CreateDefaultTileDefinitionForEntity(request: carriers.Dash_CreateDefaultTileDefinitionForEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTileDefinition>;
    /**
     * Set Measure to CountAll and MeasureField to primary key field
     * @param entityName - Name of entity to use for primary key
     * @returns Default
     */
    CreateDefaultTileDefinitionForEntity(entityName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTileDefinition>;
    private _GetDashTileHtml;
    /**
     * Get HTML for a dashboard tile definition with TileType = HTML
     * @param request - DashboardTileDefinitionId, LanguageCode
     * @returns HTML data
     */
    GetDashTileHtml(request: carriers.Dash_GetDashTileHtmlRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTileHtml>;
    /**
     * Get HTML for a dashboard tile definition with TileType = HTML
     * @param dashboardTileDefinitionId - The id of the dashboard tile definition
     * @param languageCode - Preferred language code.
     * @returns HTML data
     */
    GetDashTileHtml(dashboardTileDefinitionId: number, languageCode: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTileHtml>;
    private _GetDashTileHtmlList;
    /**
     * Get HTML for a dashboard tile definition with TileType = HTML. Retrieve a list with all registered languages.
     * @param request - DashboardTileDefinitionId
     * @returns
     */
    GetDashTileHtmlList(request: carriers.Dash_GetDashTileHtmlListRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTileHtml[]>;
    /**
     * Get HTML for a dashboard tile definition with TileType = HTML. Retrieve a list with all registered languages.
     * @param dashboardTileDefinitionId - The id of the dashboard tile definition
     * @returns
     */
    GetDashTileHtmlList(dashboardTileDefinitionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTileHtml[]>;
    private _SaveDashTileHtmlList;
    /**
     * Set the HTML data for a tile with TileType = HTML.
     * @param request - DashboardTileDefinitionId, Languages
     * @returns
     */
    SaveDashTileHtmlList(request: carriers.Dash_SaveDashTileHtmlListRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTileHtml[]>;
    /**
     * Set the HTML data for a tile with TileType = HTML.
     * @param dashboardTileDefinitionId - The id of the dashboard tile definition
     * @param languages - List of HTML content per language
     * @returns
     */
    SaveDashTileHtmlList(dashboardTileDefinitionId: number, languages: carriers.DashTileHtml[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.DashTileHtml[]>;
    private _GetPreviewDash;
    /**
     * Get a dashboard from its id
     * @param request - DashboardId
     * @returns Dashboard suitable for preview
     */
    GetPreviewDash(request: carriers.Dash_GetPreviewDashRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreviewDash>;
    /**
     * Get a dashboard from its id
     * @param dashboardId - Dashboard ID
     * @returns Dashboard suitable for preview
     */
    GetPreviewDash(dashboardId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreviewDash>;
}
//# sourceMappingURL=DashAgent.d.ts.map