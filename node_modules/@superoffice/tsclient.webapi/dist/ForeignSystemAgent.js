"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.ForeignSystemAgent = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
/**
 * Collection of all services that works with Foreign key data (Key/Value pairs)
 */
class ForeignSystemAgent extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/ForeignSystem/";
        super(options);
    }
    /**
     * Set default values into a new ForeignAppEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    async CreateDefaultForeignAppEntity(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultForeignAppEntity", null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ForeignAppEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing ForeignAppEntity or creates a new ForeignAppEntity if the id parameter is empty
     * @param entity - The ForeignAppEntity to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated ForeignAppEntity
     */
    async SaveForeignAppEntity(entity, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveForeignAppEntity", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ForeignAppEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Deletes the ForeignAppEntity
     * @param ForeignAppEntityId - The id of the ForeignAppEntity to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    async DeleteForeignAppEntity(ForeignAppEntityId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteForeignAppEntity?ForeignAppEntityId=" + ForeignAppEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Gets a ForeignAppEntity object.
     * @param foreignAppEntityId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single ForeignAppEntity
     */
    async GetForeignAppEntity(foreignAppEntityId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetForeignAppEntity?foreignAppEntityId=" + foreignAppEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ForeignAppEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async _GetAppByName(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetAppByName", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ForeignAppEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetAppByName(applicationName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = applicationName;
        if (typeof (first) === "object" && first && (typeof (first.ApplicationName) != 'undefined')) {
            _request = applicationName;
            _options = webapi_options;
        }
        else {
            _request = {
                ApplicationName: applicationName,
            };
            _options = webapi_options;
        }
        return this._GetAppByName(_request, _options);
    }
    async _GetApplicationDevices(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetApplicationDevices", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ForeignDeviceArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetApplicationDevices(applicationName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = applicationName;
        if (typeof (first) === "object" && first && (typeof (first.ApplicationName) != 'undefined')) {
            _request = applicationName;
            _options = webapi_options;
        }
        else {
            _request = {
                ApplicationName: applicationName,
            };
            _options = webapi_options;
        }
        return this._GetApplicationDevices(_request, _options);
    }
    async _GetDeviceByName(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetDeviceByName", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ForeignDevice_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetDeviceByName(applicationName, deviceName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = applicationName;
        if (typeof (first) === "object" && first && (typeof (first.ApplicationName) != 'undefined' || typeof (first.DeviceName) != 'undefined')) {
            _request = applicationName;
            _options = deviceName;
        }
        else {
            _request = {
                ApplicationName: applicationName,
                DeviceName: deviceName,
            };
            _options = webapi_options;
        }
        return this._GetDeviceByName(_request, _options);
    }
    async _GetDeviceByIdentifier(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetDeviceByIdentifier", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ForeignDevice_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetDeviceByIdentifier(applicationName, deviceName, deviceIdentifier, webapi_options) {
        let _request = null;
        let _options = null;
        const first = applicationName;
        if (typeof (first) === "object" && first && (typeof (first.ApplicationName) != 'undefined' || typeof (first.DeviceName) != 'undefined' || typeof (first.DeviceIdentifier) != 'undefined')) {
            _request = applicationName;
            _options = deviceName;
        }
        else {
            _request = {
                ApplicationName: applicationName,
                DeviceName: deviceName,
                DeviceIdentifier: deviceIdentifier,
            };
            _options = webapi_options;
        }
        return this._GetDeviceByIdentifier(_request, _options);
    }
    async _AddDeviceByIdentifier(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("AddDeviceByIdentifier", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ForeignDevice_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async AddDeviceByIdentifier(applicationName, deviceName, deviceIdentifier, webapi_options) {
        let _request = null;
        let _options = null;
        const first = applicationName;
        if (typeof (first) === "object" && first && (typeof (first.ApplicationName) != 'undefined' || typeof (first.DeviceName) != 'undefined' || typeof (first.DeviceIdentifier) != 'undefined')) {
            _request = applicationName;
            _options = deviceName;
        }
        else {
            _request = {
                ApplicationName: applicationName,
                DeviceName: deviceName,
                DeviceIdentifier: deviceIdentifier,
            };
            _options = webapi_options;
        }
        return this._AddDeviceByIdentifier(_request, _options);
    }
    async _SaveDeviceByIdentifier(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SaveDeviceByIdentifier", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ForeignDevice_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SaveDeviceByIdentifier(applicationName, deviceName, deviceIdentifier, foreignDevice, webapi_options) {
        let _request = null;
        let _options = null;
        const first = applicationName;
        if (typeof (first) === "object" && first && (typeof (first.ApplicationName) != 'undefined' || typeof (first.DeviceName) != 'undefined' || typeof (first.DeviceIdentifier) != 'undefined' || typeof (first.ForeignDevice) != 'undefined')) {
            _request = applicationName;
            _options = deviceName;
        }
        else {
            _request = {
                ApplicationName: applicationName,
                DeviceName: deviceName,
                DeviceIdentifier: deviceIdentifier,
                ForeignDevice: foreignDevice,
            };
            _options = webapi_options;
        }
        return this._SaveDeviceByIdentifier(_request, _options);
    }
    async _DeleteDeviceByIdentifier(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("DeleteDeviceByIdentifier", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async DeleteDeviceByIdentifier(applicationName, deviceName, deviceIdentifier, webapi_options) {
        let _request = null;
        let _options = null;
        const first = applicationName;
        if (typeof (first) === "object" && first && (typeof (first.ApplicationName) != 'undefined' || typeof (first.DeviceName) != 'undefined' || typeof (first.DeviceIdentifier) != 'undefined')) {
            _request = applicationName;
            _options = deviceName;
        }
        else {
            _request = {
                ApplicationName: applicationName,
                DeviceName: deviceName,
                DeviceIdentifier: deviceIdentifier,
            };
            _options = webapi_options;
        }
        return this._DeleteDeviceByIdentifier(_request, _options);
    }
    async _GetKey(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetKey", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ForeignKey_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetKey(applicationName, deviceName, keyName, tableName, recordId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = applicationName;
        if (typeof (first) === "object" && first && (typeof (first.ApplicationName) != 'undefined' || typeof (first.DeviceName) != 'undefined' || typeof (first.KeyName) != 'undefined' || typeof (first.TableName) != 'undefined' || typeof (first.RecordId) != 'undefined')) {
            _request = applicationName;
            _options = deviceName;
        }
        else {
            _request = {
                ApplicationName: applicationName,
                DeviceName: deviceName,
                KeyName: keyName,
                TableName: tableName,
                RecordId: recordId,
            };
            _options = webapi_options;
        }
        return this._GetKey(_request, _options);
    }
    async _GetKeyValue(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetKeyValue", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetKeyValue(applicationName, deviceName, keyName, tableName, recordId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = applicationName;
        if (typeof (first) === "object" && first && (typeof (first.ApplicationName) != 'undefined' || typeof (first.DeviceName) != 'undefined' || typeof (first.KeyName) != 'undefined' || typeof (first.TableName) != 'undefined' || typeof (first.RecordId) != 'undefined')) {
            _request = applicationName;
            _options = deviceName;
        }
        else {
            _request = {
                ApplicationName: applicationName,
                DeviceName: deviceName,
                KeyName: keyName,
                TableName: tableName,
                RecordId: recordId,
            };
            _options = webapi_options;
        }
        return this._GetKeyValue(_request, _options);
    }
    async _GetKeyOnDeviceIdentifier(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetKeyOnDeviceIdentifier", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ForeignKey_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetKeyOnDeviceIdentifier(applicationName, deviceName, deviceIdentifier, keyName, tableName, recordId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = applicationName;
        if (typeof (first) === "object" && first && (typeof (first.ApplicationName) != 'undefined' || typeof (first.DeviceName) != 'undefined' || typeof (first.DeviceIdentifier) != 'undefined' || typeof (first.KeyName) != 'undefined' || typeof (first.TableName) != 'undefined' || typeof (first.RecordId) != 'undefined')) {
            _request = applicationName;
            _options = deviceName;
        }
        else {
            _request = {
                ApplicationName: applicationName,
                DeviceName: deviceName,
                DeviceIdentifier: deviceIdentifier,
                KeyName: keyName,
                TableName: tableName,
                RecordId: recordId,
            };
            _options = webapi_options;
        }
        return this._GetKeyOnDeviceIdentifier(_request, _options);
    }
    async _GetKeyValueOnDeviceIdentifier(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetKeyValueOnDeviceIdentifier", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetKeyValueOnDeviceIdentifier(applicationName, deviceName, deviceIdentifier, keyName, tableName, recordId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = applicationName;
        if (typeof (first) === "object" && first && (typeof (first.ApplicationName) != 'undefined' || typeof (first.DeviceName) != 'undefined' || typeof (first.DeviceIdentifier) != 'undefined' || typeof (first.KeyName) != 'undefined' || typeof (first.TableName) != 'undefined' || typeof (first.RecordId) != 'undefined')) {
            _request = applicationName;
            _options = deviceName;
        }
        else {
            _request = {
                ApplicationName: applicationName,
                DeviceName: deviceName,
                DeviceIdentifier: deviceIdentifier,
                KeyName: keyName,
                TableName: tableName,
                RecordId: recordId,
            };
            _options = webapi_options;
        }
        return this._GetKeyValueOnDeviceIdentifier(_request, _options);
    }
    async _AddForeignKey(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("AddForeignKey", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ForeignKey_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async AddForeignKey(foreignKey, applicationName, deviceName, deviceIdentifier, webapi_options) {
        let _request = null;
        let _options = null;
        const first = foreignKey;
        if (typeof (first) === "object" && first && (typeof (first.ForeignKey) != 'undefined' || typeof (first.ApplicationName) != 'undefined' || typeof (first.DeviceName) != 'undefined' || typeof (first.DeviceIdentifier) != 'undefined')) {
            _request = foreignKey;
            _options = applicationName;
        }
        else {
            _request = {
                ForeignKey: foreignKey,
                ApplicationName: applicationName,
                DeviceName: deviceName,
                DeviceIdentifier: deviceIdentifier,
            };
            _options = webapi_options;
        }
        return this._AddForeignKey(_request, _options);
    }
    async _SaveForeignKey(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SaveForeignKey", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ForeignKey_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SaveForeignKey(foreignKey, applicationName, deviceName, deviceIdentifier, webapi_options) {
        let _request = null;
        let _options = null;
        const first = foreignKey;
        if (typeof (first) === "object" && first && (typeof (first.ForeignKey) != 'undefined' || typeof (first.ApplicationName) != 'undefined' || typeof (first.DeviceName) != 'undefined' || typeof (first.DeviceIdentifier) != 'undefined')) {
            _request = foreignKey;
            _options = applicationName;
        }
        else {
            _request = {
                ForeignKey: foreignKey,
                ApplicationName: applicationName,
                DeviceName: deviceName,
                DeviceIdentifier: deviceIdentifier,
            };
            _options = webapi_options;
        }
        return this._SaveForeignKey(_request, _options);
    }
    async _DeleteForeignKeyOnName(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("DeleteForeignKeyOnName", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async DeleteForeignKeyOnName(applicationName, deviceName, deviceIdentifier, keyName, tableName, recordId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = applicationName;
        if (typeof (first) === "object" && first && (typeof (first.ApplicationName) != 'undefined' || typeof (first.DeviceName) != 'undefined' || typeof (first.DeviceIdentifier) != 'undefined' || typeof (first.KeyName) != 'undefined' || typeof (first.TableName) != 'undefined' || typeof (first.RecordId) != 'undefined')) {
            _request = applicationName;
            _options = deviceName;
        }
        else {
            _request = {
                ApplicationName: applicationName,
                DeviceName: deviceName,
                DeviceIdentifier: deviceIdentifier,
                KeyName: keyName,
                TableName: tableName,
                RecordId: recordId,
            };
            _options = webapi_options;
        }
        return this._DeleteForeignKeyOnName(_request, _options);
    }
    async _GetKeyByValue(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetKeyByValue", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ForeignKey_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetKeyByValue(applicationName, deviceName, keyName, keyValue, tableName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = applicationName;
        if (typeof (first) === "object" && first && (typeof (first.ApplicationName) != 'undefined' || typeof (first.DeviceName) != 'undefined' || typeof (first.KeyName) != 'undefined' || typeof (first.KeyValue) != 'undefined' || typeof (first.TableName) != 'undefined')) {
            _request = applicationName;
            _options = deviceName;
        }
        else {
            _request = {
                ApplicationName: applicationName,
                DeviceName: deviceName,
                KeyName: keyName,
                KeyValue: keyValue,
                TableName: tableName,
            };
            _options = webapi_options;
        }
        return this._GetKeyByValue(_request, _options);
    }
    async _GetKeyByValueAndIdentifier(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetKeyByValueAndIdentifier", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ForeignKey_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetKeyByValueAndIdentifier(applicationName, deviceName, deviceIdentifier, keyName, keyValue, tableName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = applicationName;
        if (typeof (first) === "object" && first && (typeof (first.ApplicationName) != 'undefined' || typeof (first.DeviceName) != 'undefined' || typeof (first.DeviceIdentifier) != 'undefined' || typeof (first.KeyName) != 'undefined' || typeof (first.KeyValue) != 'undefined' || typeof (first.TableName) != 'undefined')) {
            _request = applicationName;
            _options = deviceName;
        }
        else {
            _request = {
                ApplicationName: applicationName,
                DeviceName: deviceName,
                DeviceIdentifier: deviceIdentifier,
                KeyName: keyName,
                KeyValue: keyValue,
                TableName: tableName,
            };
            _options = webapi_options;
        }
        return this._GetKeyByValueAndIdentifier(_request, _options);
    }
    async _GetAllForeignKeysOnEntity(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetAllForeignKeysOnEntity", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_StringDictionary_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetAllForeignKeysOnEntity(entityType, entityId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = entityType;
        if (typeof (first) === "object" && first && (typeof (first.EntityType) != 'undefined' || typeof (first.EntityId) != 'undefined')) {
            _request = entityType;
            _options = entityId;
        }
        else {
            _request = {
                EntityType: entityType,
                EntityId: entityId,
            };
            _options = webapi_options;
        }
        return this._GetAllForeignKeysOnEntity(_request, _options);
    }
    /*
     * Gets a ForeignDevice object.
     * @param foreignDeviceId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single ForeignDevice
     */
    async GetForeignDevice(foreignDeviceId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetForeignDevice?foreignDeviceId=" + foreignDeviceId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ForeignDevice_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async _SaveForeignDevice(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SaveForeignDevice", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ForeignDevice_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SaveForeignDevice(foreignDevice, applicationName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = foreignDevice;
        if (typeof (first) === "object" && first && (typeof (first.ForeignDevice) != 'undefined' || typeof (first.ApplicationName) != 'undefined')) {
            _request = foreignDevice;
            _options = applicationName;
        }
        else {
            _request = {
                ForeignDevice: foreignDevice,
                ApplicationName: applicationName,
            };
            _options = webapi_options;
        }
        return this._SaveForeignDevice(_request, _options);
    }
    async _DeleteForeignDevice(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("DeleteForeignDevice", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async DeleteForeignDevice(foreignDevice, applicationName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = foreignDevice;
        if (typeof (first) === "object" && first && (typeof (first.ForeignDevice) != 'undefined' || typeof (first.ApplicationName) != 'undefined')) {
            _request = foreignDevice;
            _options = applicationName;
        }
        else {
            _request = {
                ForeignDevice: foreignDevice,
                ApplicationName: applicationName,
            };
            _options = webapi_options;
        }
        return this._DeleteForeignDevice(_request, _options);
    }
    async _DeleteForeignKey(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("DeleteForeignKey", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async DeleteForeignKey(foreignKey, applicationName, deviceName, deviceIdentifier, tableName, recordId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = foreignKey;
        if (typeof (first) === "object" && first && (typeof (first.ForeignKey) != 'undefined' || typeof (first.ApplicationName) != 'undefined' || typeof (first.DeviceName) != 'undefined' || typeof (first.DeviceIdentifier) != 'undefined' || typeof (first.TableName) != 'undefined' || typeof (first.RecordId) != 'undefined')) {
            _request = foreignKey;
            _options = applicationName;
        }
        else {
            _request = {
                ForeignKey: foreignKey,
                ApplicationName: applicationName,
                DeviceName: deviceName,
                DeviceIdentifier: deviceIdentifier,
                TableName: tableName,
                RecordId: recordId,
            };
            _options = webapi_options;
        }
        return this._DeleteForeignKey(_request, _options);
    }
    async _GetDeviceKeys(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetDeviceKeys", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ForeignKeyArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetDeviceKeys(applicationName, deviceName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = applicationName;
        if (typeof (first) === "object" && first && (typeof (first.ApplicationName) != 'undefined' || typeof (first.DeviceName) != 'undefined')) {
            _request = applicationName;
            _options = deviceName;
        }
        else {
            _request = {
                ApplicationName: applicationName,
                DeviceName: deviceName,
            };
            _options = webapi_options;
        }
        return this._GetDeviceKeys(_request, _options);
    }
    async _GetApplicationKeys(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetApplicationKeys", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ForeignKeyArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetApplicationKeys(applicationName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = applicationName;
        if (typeof (first) === "object" && first && (typeof (first.ApplicationName) != 'undefined')) {
            _request = applicationName;
            _options = webapi_options;
        }
        else {
            _request = {
                ApplicationName: applicationName,
            };
            _options = webapi_options;
        }
        return this._GetApplicationKeys(_request, _options);
    }
    async _GetDeviceKeysOnDeviceIdentifier(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetDeviceKeysOnDeviceIdentifier", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ForeignKeyArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetDeviceKeysOnDeviceIdentifier(applicationName, deviceName, deviceIdentifier, webapi_options) {
        let _request = null;
        let _options = null;
        const first = applicationName;
        if (typeof (first) === "object" && first && (typeof (first.ApplicationName) != 'undefined' || typeof (first.DeviceName) != 'undefined' || typeof (first.DeviceIdentifier) != 'undefined')) {
            _request = applicationName;
            _options = deviceName;
        }
        else {
            _request = {
                ApplicationName: applicationName,
                DeviceName: deviceName,
                DeviceIdentifier: deviceIdentifier,
            };
            _options = webapi_options;
        }
        return this._GetDeviceKeysOnDeviceIdentifier(_request, _options);
    }
    async _GetDeviceKeysOnDeviceIdentifierTable(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetDeviceKeysOnDeviceIdentifierTable", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ForeignKeyArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetDeviceKeysOnDeviceIdentifierTable(applicationName, deviceName, deviceIdentifier, tableName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = applicationName;
        if (typeof (first) === "object" && first && (typeof (first.ApplicationName) != 'undefined' || typeof (first.DeviceName) != 'undefined' || typeof (first.DeviceIdentifier) != 'undefined' || typeof (first.TableName) != 'undefined')) {
            _request = applicationName;
            _options = deviceName;
        }
        else {
            _request = {
                ApplicationName: applicationName,
                DeviceName: deviceName,
                DeviceIdentifier: deviceIdentifier,
                TableName: tableName,
            };
            _options = webapi_options;
        }
        return this._GetDeviceKeysOnDeviceIdentifierTable(_request, _options);
    }
    async _GetDeviceKeysOnDeviceIdentifierTableRecordId(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetDeviceKeysOnDeviceIdentifierTableRecordId", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ForeignKeyArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetDeviceKeysOnDeviceIdentifierTableRecordId(applicationName, deviceName, deviceIdentifier, tableName, recordId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = applicationName;
        if (typeof (first) === "object" && first && (typeof (first.ApplicationName) != 'undefined' || typeof (first.DeviceName) != 'undefined' || typeof (first.DeviceIdentifier) != 'undefined' || typeof (first.TableName) != 'undefined' || typeof (first.RecordId) != 'undefined')) {
            _request = applicationName;
            _options = deviceName;
        }
        else {
            _request = {
                ApplicationName: applicationName,
                DeviceName: deviceName,
                DeviceIdentifier: deviceIdentifier,
                TableName: tableName,
                RecordId: recordId,
            };
            _options = webapi_options;
        }
        return this._GetDeviceKeysOnDeviceIdentifierTableRecordId(_request, _options);
    }
} // class v1ForeignSystemAgentController 
exports.ForeignSystemAgent = ForeignSystemAgent;
//# sourceMappingURL=ForeignSystemAgent.js.map