"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportAgent = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
/**
 * This agent can be used to import data into the system
 */
class ImportAgent extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Import/";
        super(options);
    }
    async _PreviewImport(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("PreviewImport", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ImportLineArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async PreviewImport(importLines, columnDefinition, culture, context, webapi_options) {
        let _request = null;
        let _options = null;
        const first = importLines;
        if (typeof (first) === "object" && first && (typeof (first.ImportLines) != 'undefined' || typeof (first.ColumnDefinition) != 'undefined' || typeof (first.Culture) != 'undefined' || typeof (first.Context) != 'undefined')) {
            _request = importLines;
            _options = columnDefinition;
        }
        else {
            _request = {
                ImportLines: importLines,
                ColumnDefinition: columnDefinition,
                Culture: culture,
                Context: context,
            };
            _options = webapi_options;
        }
        return this._PreviewImport(_request, _options);
    }
    async _SaveImport(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SaveImport", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SaveImport(importLines, columnDefinition, createSelection, culture, context, webapi_options) {
        let _request = null;
        let _options = null;
        const first = importLines;
        if (typeof (first) === "object" && first && (typeof (first.ImportLines) != 'undefined' || typeof (first.ColumnDefinition) != 'undefined' || typeof (first.CreateSelection) != 'undefined' || typeof (first.Culture) != 'undefined' || typeof (first.Context) != 'undefined')) {
            _request = importLines;
            _options = columnDefinition;
        }
        else {
            _request = {
                ImportLines: importLines,
                ColumnDefinition: columnDefinition,
                CreateSelection: createSelection,
                Culture: culture,
                Context: context,
            };
            _options = webapi_options;
        }
        return this._SaveImport(_request, _options);
    }
    async _CreateDefaultImportLine(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("CreateDefaultImportLine", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ImportLine_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async CreateDefaultImportLine(countColumns, webapi_options) {
        let _request = null;
        let _options = null;
        const first = countColumns;
        if (typeof (first) === "object" && first && (typeof (first.CountColumns) != 'undefined')) {
            _request = countColumns;
            _options = webapi_options;
        }
        else {
            _request = {
                CountColumns: countColumns,
            };
            _options = webapi_options;
        }
        return this._CreateDefaultImportLine(_request, _options);
    }
    async _CreateErpImportData(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("CreateErpImportData", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ImportErpData_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async CreateErpImportData(restriction, columns, connectionId, erpActorType, webapi_options) {
        let _request = null;
        let _options = null;
        const first = restriction;
        if (typeof (first) === "object" && first && (typeof (first.Restriction) != 'undefined' || typeof (first.Columns) != 'undefined' || typeof (first.ConnectionId) != 'undefined' || typeof (first.ErpActorType) != 'undefined')) {
            _request = restriction;
            _options = columns;
        }
        else {
            _request = {
                Restriction: restriction,
                Columns: columns,
                ConnectionId: connectionId,
                ErpActorType: erpActorType,
            };
            _options = webapi_options;
        }
        return this._CreateErpImportData(_request, _options);
    }
} // class v1ImportAgentController 
exports.ImportAgent = ImportAgent;
//# sourceMappingURL=ImportAgent.js.map