"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViewStateAgent = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
/**
 * User interface view state, history, currentXXX values
 */
class ViewStateAgent extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/ViewState/";
        super(options);
    }
    async _GetLiveUiConfig(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetLiveUiConfig", undefined, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_LiveUiConfig_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Gets live UI configuration
     * @returns Live UI configuration containing the parameters needed for live UI functionality
     */
    async GetLiveUiConfig(webapi_options) {
        return this._GetLiveUiConfig(webapi_options);
    }
    /*
     * Gets a History object.
     * @param historyId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single History
     */
    async GetHistory(historyId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetHistory?historyId=" + historyId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_History_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async _GetCurrent(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetCurrent", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_History_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetCurrent(historyName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = historyName;
        if (typeof (first) === "object" && first && (typeof (first.HistoryName) != 'undefined')) {
            _request = historyName;
            _options = webapi_options;
        }
        else {
            _request = {
                HistoryName: historyName,
            };
            _options = webapi_options;
        }
        return this._GetCurrent(_request, _options);
    }
    async _SaveCurrent(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SaveCurrent", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_History_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SaveCurrent(current, webapi_options) {
        let _request = null;
        let _options = null;
        const first = current;
        if (typeof (first) === "object" && first && (typeof (first.Current) != 'undefined')) {
            _request = current;
            _options = webapi_options;
        }
        else {
            _request = {
                Current: current,
            };
            _options = webapi_options;
        }
        return this._SaveCurrent(_request, _options);
    }
    async _GetNextCurrent(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetNextCurrent", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_History_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetNextCurrent(historyName, id, webapi_options) {
        let _request = null;
        let _options = null;
        const first = historyName;
        if (typeof (first) === "object" && first && (typeof (first.HistoryName) != 'undefined' || typeof (first.Id) != 'undefined')) {
            _request = historyName;
            _options = id;
        }
        else {
            _request = {
                HistoryName: historyName,
                Id: id,
            };
            _options = webapi_options;
        }
        return this._GetNextCurrent(_request, _options);
    }
    async _GetPreviousCurrent(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetPreviousCurrent", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_History_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetPreviousCurrent(historyName, id, webapi_options) {
        let _request = null;
        let _options = null;
        const first = historyName;
        if (typeof (first) === "object" && first && (typeof (first.HistoryName) != 'undefined' || typeof (first.Id) != 'undefined')) {
            _request = historyName;
            _options = id;
        }
        else {
            _request = {
                HistoryName: historyName,
                Id: id,
            };
            _options = webapi_options;
        }
        return this._GetPreviousCurrent(_request, _options);
    }
    async _DeleteHistory(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("DeleteHistory", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async DeleteHistory(historyName, id, webapi_options) {
        let _request = null;
        let _options = null;
        const first = historyName;
        if (typeof (first) === "object" && first && (typeof (first.HistoryName) != 'undefined' || typeof (first.Id) != 'undefined')) {
            _request = historyName;
            _options = id;
        }
        else {
            _request = {
                HistoryName: historyName,
                Id: id,
            };
            _options = webapi_options;
        }
        return this._DeleteHistory(_request, _options);
    }
    async _GetHistories(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetHistories", undefined, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_HistoryArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Returns all history items that belong to the currently logged in user
     * @returns Array of History items
     */
    async GetHistories(webapi_options) {
        return this._GetHistories(webapi_options);
    }
    async _GetHistoriesByName(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetHistoriesByName", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_HistoryArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetHistoriesByName(historyName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = historyName;
        if (typeof (first) === "object" && first && (typeof (first.HistoryName) != 'undefined')) {
            _request = historyName;
            _options = webapi_options;
        }
        else {
            _request = {
                HistoryName: historyName,
            };
            _options = webapi_options;
        }
        return this._GetHistoriesByName(_request, _options);
    }
    async _GetHistoriesByNames(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetHistoriesByNames", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_HistoryArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetHistoriesByNames(historyNames, webapi_options) {
        let _request = null;
        let _options = null;
        const first = historyNames;
        if (typeof (first) === "object" && first && (typeof (first.HistoryNames) != 'undefined')) {
            _request = historyNames;
            _options = webapi_options;
        }
        else {
            _request = {
                HistoryNames: historyNames,
            };
            _options = webapi_options;
        }
        return this._GetHistoriesByNames(_request, _options);
    }
    async _SaveHistories(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SaveHistories", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_HistoryArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SaveHistories(historyName, history, webapi_options) {
        let _request = null;
        let _options = null;
        const first = historyName;
        if (typeof (first) === "object" && first && (typeof (first.HistoryName) != 'undefined' || typeof (first.History) != 'undefined')) {
            _request = historyName;
            _options = history;
        }
        else {
            _request = {
                HistoryName: historyName,
                History: history,
            };
            _options = webapi_options;
        }
        return this._SaveHistories(_request, _options);
    }
    async _GetHistoryLengthPrefValue(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetHistoryLengthPrefValue", undefined, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Get the logged on user&apos;s preferred history list length. Will return the system preference if no user preferences are available.
     * @returns The history list lenght
     */
    async GetHistoryLengthPrefValue(webapi_options) {
        return this._GetHistoryLengthPrefValue(webapi_options);
    }
    async _SetHistoryLengthPrefValue(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetHistoryLengthPrefValue", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SetHistoryLengthPrefValue(length, webapi_options) {
        let _request = null;
        let _options = null;
        const first = length;
        if (typeof (first) === "object" && first && (typeof (first.Length) != 'undefined')) {
            _request = length;
            _options = webapi_options;
        }
        else {
            _request = {
                Length: length,
            };
            _options = webapi_options;
        }
        return this._SetHistoryLengthPrefValue(_request, _options);
    }
    async _SaveCurrents(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SaveCurrents", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_HistoryArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SaveCurrents(currents, webapi_options) {
        let _request = null;
        let _options = null;
        const first = currents;
        if (typeof (first) === "object" && first && (typeof (first.Currents) != 'undefined')) {
            _request = currents;
            _options = webapi_options;
        }
        else {
            _request = {
                Currents: currents,
            };
            _options = webapi_options;
        }
        return this._SaveCurrents(_request, _options);
    }
    async _GetHistoriesByNamesAndIds(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetHistoriesByNamesAndIds", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_HistoryArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetHistoriesByNamesAndIds(requests, webapi_options) {
        let _request = null;
        let _options = null;
        const first = requests;
        if (typeof (first) === "object" && first && (typeof (first.Requests) != 'undefined')) {
            _request = requests;
            _options = webapi_options;
        }
        else {
            _request = {
                Requests: requests,
            };
            _options = webapi_options;
        }
        return this._GetHistoriesByNamesAndIds(_request, _options);
    }
    async _PublishAndRetrieveUiEvents(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("PublishAndRetrieveUiEvents", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_UiEventArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async PublishAndRetrieveUiEvents(latestKnownEventId, publishEvents, metrics, webapi_options) {
        let _request = null;
        let _options = null;
        const first = latestKnownEventId;
        if (typeof (first) === "object" && first && (typeof (first.LatestKnownEventId) != 'undefined' || typeof (first.PublishEvents) != 'undefined' || typeof (first.Metrics) != 'undefined')) {
            _request = latestKnownEventId;
            _options = publishEvents;
        }
        else {
            _request = {
                LatestKnownEventId: latestKnownEventId,
                PublishEvents: publishEvents,
                Metrics: metrics,
            };
            _options = webapi_options;
        }
        return this._PublishAndRetrieveUiEvents(_request, _options);
    }
} // class v1ViewStateAgentController 
exports.ViewStateAgent = ViewStateAgent;
//# sourceMappingURL=ViewStateAgent.js.map