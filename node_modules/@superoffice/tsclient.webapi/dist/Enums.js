"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsenums.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErpSyncResponseCode = exports.FreeTextOperator = exports.ImportAction = exports.ImportEntityType = exports.SystemEventScope = exports.CustomFieldType = exports.UDefFieldType = exports.UDefType = exports.RelationTarget = exports.UrlEncoding = exports.ColorIndex = exports.AssignmentStatus = exports.EMailMergeTargetType = exports.LicenseType = exports.ShowWindowState = exports.RecurrencePattern = exports.RoleType = exports.UdefJustification = exports.PublishType = exports.CrmActorType = exports.ErpActorType = exports.ValueOverride = exports.QuoteStatus = exports.BlobLinkType = exports.QuoteVersionState = exports.TicketStatusTimeCounter = exports.TicketOrigin = exports.ShipmentAddrStatus = exports.ShipmentStatus = exports.SelectionUnionType = exports.DurationUnit = exports.PreferenceLevel = exports.TaskType = exports.TaskDirection = exports.ShowState = exports.SaleStatus = exports.PrefDescValueType = exports.PrefDescAccessFlags = exports.Navigation = exports.ExtraDataFieldType = exports.ExecuteOnEvent = exports.DocTmplType = exports.DocTmplQuoteType = exports.DocTmplDirection = exports.FieldMetadataType = exports.FieldAccess = exports.AppointmentType = exports.AppointmentStatus = exports.AppointmentPrivate = exports.AddressType = void 0;
exports.RecurrenceEndType = exports.CredentialControlType = exports.Visibility = exports.ContactSourceType = exports.UserType = exports.RecurrenceUpdateMode = exports.LicenseStatus = exports.ETableRight = exports.ReturnType = exports.StringSearchType = exports.CheckoutState = exports.ContactAction = exports.LocalizedTextType = exports.BookingType = exports.InvitationStatus = exports.ActivityStatus = exports.WorkflowTriggerType = exports.WorkflowStepType = exports.WorkflowGoalType = exports.WorkflowTimeWaitIntervalType = exports.WorkflowTimeWaitAlgorithm = exports.EmailReplyToType = exports.EmailFromType = exports.WorkflowDefinitionStatus = exports.LogEvent = exports.TargetLevel = exports.TargetPeriodType = exports.TargetMeasurementUnit = exports.TargetEntityType = exports.TargetAssignementLevel = exports.DashTileUsage = exports.DashTileEntityType = exports.DashTileMeasure = exports.DashTileCurrencyMode = exports.DashTileType = exports.DashboardTileOptionType = exports.DashboardTileEntityType = exports.DashboardTileType = exports.DashboardLayout = exports.GeneratorEncoding = exports.DocumentLockSemantics = exports.ReportPaperOrientation = exports.ReportLayout = exports.SelectionType = exports.BatchTaskCancellationBehaviour = exports.BatchTaskState = exports.EMailFlags = exports.EMailPriority = exports.ReportCategory = exports.TicketBaseStatus = void 0;
exports.TicketCategoryClosingStatus = exports.TicketCategoryDelegateMethod = exports.TicketPriorityStatus = exports.FormSubmissionStatus = exports.Domain = exports.EventHandlerType = exports.ArchiveBehaviour = exports.ShowTaskItemInClient = exports.TaskListItemType = exports.ImageEmbedType = exports.RecipientType = exports.MessageActionType = exports.MessageHeaderStdItemCol = exports.MessageHeaderStdItem = exports.ChangePasswordType = exports.NotificationEventType = exports.DeltaState = exports.DeltaType = exports.MailboxType = exports.UpsertRowActionStatus = exports.UpsertNomatchAction = exports.VideoMeetingStatus = exports.DocTmplInvitationType = exports.AppointmentCautionWarning = exports.FormsRecaptchaMode = exports.SenderMailMode = exports.CalReplyStatus = exports.CalMethod = exports.NotificationMessageType = exports.NotificationPlatform = exports.CommandActionResult = exports.CommandAction = exports.WebhookState = exports.DocTmplPrivacyType = exports.TemporaryKeyDomain = exports.QuoteVersionButtonAction = exports.NetServerBuildType = exports.StatusScreenPanelType = exports.EjUserStatus = exports.OrderBySortType = exports.WeekOfMonth = exports.RecurrenceDailyPattern = exports.RecurrenceMonthlyPattern = exports.RecurrenceYearlyPattern = exports.Weekday = exports.InterRestrictionOperator = exports.EFieldRight = exports.ExternalUserInfoModification = exports.RoleRelationToOwner = exports.AssociateSourceType = void 0;
exports.ChatWidgetSize = exports.ChatMessageSpecialType = exports.ChatMessageType = exports.ChatSessionStatus = exports.FormType = exports.ConfigType = exports.ChatSessionFlags = exports.WidgetRequiredFields = exports.WidgetTheme = exports.BadgeType = exports.TicketAlertAction = exports.ShipmentMessageType = exports.DesignType = exports.TicketMessageCategory = exports.TicketMessageType = exports.TicketReadStatus = exports.TicketSecurityLevel = exports.TicketPriorityEscalateEvent = exports.TicketPriorityFlags = exports.TicketCategoryFlags = void 0;
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
// Typescript Enums                               Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------
/**
 * The type of Address
 * This Enum is used by:  address.atype_idx
 */
var AddressType;
(function (AddressType) {
    /**
     * 0: Unknown - used when initializing
     */
    AddressType["Unknown"] = "Unknown";
    /**
     * 1: The address is a contact's postal address
     */
    AddressType["ContactPostalAddress"] = "ContactPostalAddress";
    /**
     * 2: The address is a contact's street address
     */
    AddressType["ContactStreetAddress"] = "ContactStreetAddress";
    /**
     * 16387: The address is a person's private address
     */
    AddressType["PersonPrivateAddress"] = "PersonPrivateAddress";
    /**
     * 8196: The address is the shipping address for a quote
     */
    AddressType["QuoteBillingAddress"] = "QuoteBillingAddress";
    /**
     * 8197: The address is the shipping address for a quote
     */
    AddressType["QuoteShippingAddress"] = "QuoteShippingAddress";
})(AddressType = exports.AddressType || (exports.AddressType = {}));
/**
 * Value for field 'private' in table 'appointment'.
 * This Enum is used by:  appointment.private
 */
var AppointmentPrivate;
(function (AppointmentPrivate) {
    /**
     * 0: This appointment can be read by anyone
     */
    AppointmentPrivate["Public"] = "Public";
    /**
     * 1: This appointment can only be read/seen by the owner
     */
    AppointmentPrivate["PrivateUser"] = "PrivateUser";
    /**
     * 2: This appointment can only be read by members of the owners group
     */
    AppointmentPrivate["PrivateGroup"] = "PrivateGroup";
})(AppointmentPrivate = exports.AppointmentPrivate || (exports.AppointmentPrivate = {}));
/**
 * Value for field 'status' in table 'appointment'.
 * This Enum is used by:  appointment.status
 */
var AppointmentStatus;
(function (AppointmentStatus) {
    /**
     * 0: Appointment is not initialized or it is a Post-IT for users diary, used together with ApointmentType.Note only
     */
    AppointmentStatus["UnknownOrPostIt"] = "UnknownOrPostIt";
    /**
     * 1: Appointment has not been started
     */
    AppointmentStatus["NotStarted"] = "NotStarted";
    /**
     * 2: Appointment has been started, but not completed
     */
    AppointmentStatus["Started"] = "Started";
    /**
     * 3: Appointment is completed
     */
    AppointmentStatus["Completed"] = "Completed";
    /**
     * 4: Appointment is hidden
     */
    AppointmentStatus["Hidden"] = "Hidden";
    /**
     * 5: Appointment is a booking invitation (initial status for a booking)
     */
    AppointmentStatus["Booking"] = "Booking";
    /**
     * 6: Appointment is a booking that has been moved since it was seen by the invitee
     */
    AppointmentStatus["BookingMoved"] = "BookingMoved";
    /**
     * 7: Appointment is a booking and has been seen, but neither accepted nor rejected
     */
    AppointmentStatus["BookingSeen"] = "BookingSeen";
    /**
     * 8: Appointment is a booking that has been moved. The movement has been seen but neither accepted nor rejected
     */
    AppointmentStatus["BookingMovedSeen"] = "BookingMovedSeen";
    /**
     * 9: Appointment is a booking that has been seen and declined
     */
    AppointmentStatus["BookingDeclined"] = "BookingDeclined";
    /**
     * 10: Status of "child" appointment whose "mother" has been deleted (the meeting is cancelled)
     */
    AppointmentStatus["BookingDeleted"] = "BookingDeleted";
    /**
     * 11: You are assigned this appointment (initial status, like Booking(5) )
     */
    AppointmentStatus["Assignment"] = "Assignment";
    /**
     * 12: You have seen the assignment, but not yet declined or accepted it
     */
    AppointmentStatus["AssignmentSeen"] = "AssignmentSeen";
    /**
     * 13: You have declined the appointment assigned to you
     */
    AppointmentStatus["AssignmentDeclined"] = "AssignmentDeclined";
})(AppointmentStatus = exports.AppointmentStatus || (exports.AppointmentStatus = {}));
/**
 * Value for field 'type' in table 'appointment'.
 * This Enum is used by:  appointment.type
 */
var AppointmentType;
(function (AppointmentType) {
    /**
     * 0: Unknown - used when initializing
     */
    AppointmentType["Unknown"] = "Unknown";
    /**
     * 1: Show in diary. If overdue or done today, show in checklist also
     */
    AppointmentType["inDiary"] = "inDiary";
    /**
     * 2: Appointment is a followup with no specific starttime
     */
    AppointmentType["inChecklist"] = "inChecklist";
    /**
     * 3: Paper clip on diary, expands to “post-it” note when clicked
     */
    AppointmentType["Note"] = "Note";
    /**
     * 4: Document of any kind, including outgoing, incoming and email
     */
    AppointmentType["Document"] = "Document";
    /**
     * 5: Saved Report (i.e., not a Report Definition but the result of an actual report run)
     */
    AppointmentType["SavedReport"] = "SavedReport";
    /**
     * 6: Booking, made for diary. When accepted this will change type to inDiary
     */
    AppointmentType["BookingForDiary"] = "BookingForDiary";
    /**
     * 7: Booking, made for check list. When accepted this will change type to inChecklist
     */
    AppointmentType["BookingForChecklist"] = "BookingForChecklist";
    /**
     * 8: Document is a template for mailmerge operations
     */
    AppointmentType["MergeDraft"] = "MergeDraft";
    /**
     * 9: Document is a result of a mailmerge operations (there are probably many documents like this!)
     */
    AppointmentType["MergeFinal"] = "MergeFinal";
})(AppointmentType = exports.AppointmentType || (exports.AppointmentType = {}));
/**
 * Access restrictions and mandatory status, if any.
 * This Enum is used by:  ErpField.Access
 */
var FieldAccess;
(function (FieldAccess) {
    /**
     * 0: Normal field, no particular restrictions
     */
    FieldAccess["Normal"] = "Normal";
    /**
     * 1: This field is mandatory.
     */
    FieldAccess["Mandatory"] = "Mandatory";
    /**
     * 2: This field is read-only.
     */
    FieldAccess["ReadOnly"] = "ReadOnly";
})(FieldAccess = exports.FieldAccess || (exports.FieldAccess = {}));
/**
 * Describes the different types of controls that can appear in the Configure connection dialog
 * This Enum is used by:  ErpField.FieldType
 */
var FieldMetadataType;
(function (FieldMetadataType) {
    /**
     * 0: Checkbox widget: Boolean value
     */
    FieldMetadataType["Checkbox"] = "Checkbox";
    /**
     * 1: Single line textbox.
     */
    FieldMetadataType["Text"] = "Text";
    /**
     * 2: Single line edit field with password characters - input is hidden.
     */
    FieldMetadataType["Password"] = "Password";
    /**
     * 3: Single line integer number field.
     */
    FieldMetadataType["Integer"] = "Integer";
    /**
     * 4: Single line decimal number field.
     */
    FieldMetadataType["Double"] = "Double";
    /**
     * 5: Dropdown listbox. The list name must be provided. The list items are provided by another interface. The default value should be the list key, not the text of the list item.
     */
    FieldMetadataType["List"] = "List";
    /**
     * 6: Date
     */
    FieldMetadataType["Date"] = "Date";
    /**
     * 99: Static text - has no input widget associated with it. Can be used for spacing/layout.
     */
    FieldMetadataType["Label"] = "Label";
})(FieldMetadataType = exports.FieldMetadataType || (exports.FieldMetadataType = {}));
/**
 * Value for field 'direction' in table 'doctmpl'.
 * This Enum is used by:  DocTmpl.direction
 */
var DocTmplDirection;
(function (DocTmplDirection) {
    /**
     * 0: The direction of documents from this template is unknown/undecided
     */
    DocTmplDirection["Unknown"] = "Unknown";
    /**
     * 1: Document template for incoming documents
     */
    DocTmplDirection["Incoming"] = "Incoming";
    /**
     * 2: Document template is used for outgoing documents
     */
    DocTmplDirection["Outgoing"] = "Outgoing";
    /**
     * 3: All' choice for Saint. This is NOT an acceptable value for a task definition, but is used by the Saint system for indexing all directions
     */
    DocTmplDirection["SaintAll"] = "SaintAll";
})(DocTmplDirection = exports.DocTmplDirection || (exports.DocTmplDirection = {}));
/**
 * Is this document template some kind of quote document, and if so what
 * This Enum is used by:  DocTmpl.quoteDocType
 */
var DocTmplQuoteType;
(function (DocTmplQuoteType) {
    /**
     * 0: This document template is in no way related to Quote Management
     */
    DocTmplQuoteType["None"] = "None";
    /**
     * 1: This is a template for the offer mail body
     */
    DocTmplQuoteType["MailBody"] = "MailBody";
    /**
     * 2: This is a template for the main offer document, document instances will be referred through Quote.DocumentId
     */
    DocTmplQuoteType["MainDocument"] = "MainDocument";
    /**
     * 3: This is a template for the AsposeWords merge process, generating the offer line details
     */
    DocTmplQuoteType["QuoteLines"] = "QuoteLines";
    /**
     * 4: This is a template for the mail body of the order confirmation
     */
    DocTmplQuoteType["ConfirmationMailBody"] = "ConfirmationMailBody";
    /**
     * 5: This is a template for the lines document that is an attachment to the confirmation mail
     */
    DocTmplQuoteType["ConfirmationLines"] = "ConfirmationLines";
})(DocTmplQuoteType = exports.DocTmplQuoteType || (exports.DocTmplQuoteType = {}));
/**
 * Value for field 'record_type' in table 'doctmpl'.
 * This Enum is used by:  DocTmpl.record_type
 */
var DocTmplType;
(function (DocTmplType) {
    /**
     * 0: The document type is unknown/undecided
     */
    DocTmplType["Unknown"] = "Unknown";
    /**
     * 1: (not used for document templates)
     */
    DocTmplType["Appointment"] = "Appointment";
    /**
     * 2: Generic text document (for instance, a letter)
     */
    DocTmplType["Document"] = "Document";
    /**
     * 3: Email message
     */
    DocTmplType["Email"] = "Email";
    /**
     * 4: Facsimile
     */
    DocTmplType["Fax"] = "Fax";
    /**
     * 5: (not used for document templates)
     */
    DocTmplType["Phone"] = "Phone";
    /**
     * 6: (not used for document templates)
     */
    DocTmplType["Todo"] = "Todo";
    /**
     * 7: Template for mailmerge operations
     */
    DocTmplType["MergeDraft"] = "MergeDraft";
    /**
     * 8: Result of a mailmerge operation
     */
    DocTmplType["MergeFinal"] = "MergeFinal";
    /**
     * 9: Saved result of running a report (output from Reporter)
     */
    DocTmplType["SavedReport"] = "SavedReport";
})(DocTmplType = exports.DocTmplType || (exports.DocTmplType = {}));
/**
 * Value for the executeOnEvent field in table externalapplication
 * This Enum is used by:  ExtApp.executeOnEvent
 */
var ExecuteOnEvent;
(function (ExecuteOnEvent) {
    /**
     * 0: This application is never executed automatically
     */
    ExecuteOnEvent["Never"] = "Never";
    /**
     * 1: Execute this application during logon
     */
    ExecuteOnEvent["Logon"] = "Logon";
    /**
     * 2: Execute this application before logoff
     */
    ExecuteOnEvent["Logoff"] = "Logoff";
    /**
     * 3: Execute this application before a local update (start travelling)
     */
    ExecuteOnEvent["LocalUpdate"] = "LocalUpdate";
    /**
     * 16384: When executing this application, wait for it to start
     */
    ExecuteOnEvent["Wait"] = "Wait";
})(ExecuteOnEvent = exports.ExecuteOnEvent || (exports.ExecuteOnEvent = {}));
/**
 * String, int, decimal, image, url, etc. How should the value be interpreted.
 */
var ExtraDataFieldType;
(function (ExtraDataFieldType) {
    /**
     * 0: Anything to be shown as text, left aligned. If type is string, it can contain formatspecifiers (use this for displaying numbers correctly as the user's computer is set up).
     */
    ExtraDataFieldType["String"] = "String";
    /**
     * 1: A web address
     */
    ExtraDataFieldType["Url"] = "Url";
    /**
     * 2: Contains the url of the image, or a base64 encoded version of it.
     */
    ExtraDataFieldType["Image"] = "Image";
})(ExtraDataFieldType = exports.ExtraDataFieldType || (exports.ExtraDataFieldType = {}));
/**
 * Value for the navigation field in table externalapplication
 * This Enum is used by:  ExtApp.navigation
 */
var Navigation;
(function (Navigation) {
    /**
     * 0: This application has no explicit navigation in GUI
     */
    Navigation["Invisible"] = "Invisible";
    /**
     * 1: This application appears in the list of the Toolbox icon in the CRM5 Navigator sidebar
     */
    Navigation["ToolboxMenu"] = "ToolboxMenu";
    /**
     * 2: This application has its own navigator button (remember to set icon resource)
     */
    Navigation["NavigatorButton"] = "NavigatorButton";
    /**
     * 3: This application appears in the View pulldown menu
     */
    Navigation["ViewMenu"] = "ViewMenu";
    /**
     * 4: (not yet implemented) This application appears as a Task in the Selection Task card
     */
    Navigation["SelectionTaskCard"] = "SelectionTaskCard";
    /**
     * 5: This application (type IntegratedHTML or IntegratedURL) appears as a tab on the Contact card
     */
    Navigation["ContactCard"] = "ContactCard";
    /**
     * 6: This application (type IntegratedHTML or IntegratedURL)  appears as a tab on the Contact Archive
     */
    Navigation["ContactArchive"] = "ContactArchive";
    /**
     * 7: This application (type IntegratedHTML or IntegratedURL)  appears as a tab on the Project card
     */
    Navigation["ProjectCard"] = "ProjectCard";
    /**
     * 8: This application (type IntegratedHTML or IntegratedURL)  appears as a tab on the Project Archive
     */
    Navigation["ProjectArchive"] = "ProjectArchive";
    /**
     * 9: This application (type IntegratedHTML or IntegratedURL)  appears as a tab in the Sale dialog
     */
    Navigation["SaleCard"] = "SaleCard";
    /**
     * 10: This application (type IntegratedHTML or IntegratedURL)  appears as a tab in the Person Card
     */
    Navigation["PersonCard"] = "PersonCard";
    /**
     * 11: This application (type IntegratedHTML or IntegratedURL)  appears as a tab in the Appointment dialog
     */
    Navigation["ActivityDialog"] = "ActivityDialog";
    /**
     * 12: This application (type IntegratedHTML or IntegratedURL)  appears as a tab in the Document dialog
     */
    Navigation["DocumentDialog"] = "DocumentDialog";
    /**
     * 13: In the Browser panel
     */
    Navigation["BrowserPanel"] = "BrowserPanel";
    /**
     * 14: Task button visible on the Contact Selection task panel
     */
    Navigation["ContSelectionTask"] = "ContSelectionTask";
    /**
     * 15: Task button visible on the Appointment Selection task panel
     */
    Navigation["AppntSelectionTask"] = "AppntSelectionTask";
    /**
     * 16: Task button visible on the Sale Selection task panel
     */
    Navigation["SaleSelectionTask"] = "SaleSelectionTask";
    /**
     * 17: Task button visible on the Document Selection task panel
     */
    Navigation["DocSelectionTask"] = "DocSelectionTask";
    /**
     * 18: Task button visible on the Project Selection task panel
     */
    Navigation["ProjSelectionTask"] = "ProjSelectionTask";
    /**
     * 19: In company minicard
     */
    Navigation["CompanyMinicard"] = "CompanyMinicard";
    /**
     * 20: In project minicard
     */
    Navigation["ProjectMinicard"] = "ProjectMinicard";
    /**
     * 21: In diary minicard
     */
    Navigation["DiaryMinicard"] = "DiaryMinicard";
    /**
     * 22: In selection minicard
     */
    Navigation["SelectionMinicard"] = "SelectionMinicard";
    /**
     * 23: In the main ButtonBar
     */
    Navigation["ButtonPanelTask"] = "ButtonPanelTask";
    /**
     * 24: In the appointment dialog
     */
    Navigation["AppointmentDialogTask"] = "AppointmentDialogTask";
    /**
     * 25: In the sale dialog
     */
    Navigation["SaleDialogTask"] = "SaleDialogTask";
    /**
     * 26: In the document dialog
     */
    Navigation["DocumentDialogTask"] = "DocumentDialogTask";
    /**
     * 27: In the person dialog
     */
    Navigation["PersonDialogTask"] = "PersonDialogTask";
    /**
     * 28: In the sale minicard
     */
    Navigation["SaleMinicard"] = "SaleMinicard";
    /**
     * 29: In the sale archive
     */
    Navigation["SaleArchive"] = "SaleArchive";
    /**
     * 30: Task tab for appointment selection, while showing shadow sel
     */
    Navigation["AppntSelectionShadowTask"] = "AppntSelectionShadowTask";
    /**
     * 31: Task tab for sale selection, while showing shadow sel
     */
    Navigation["SaleSelectionShadowTask"] = "SaleSelectionShadowTask";
    /**
     * 32: Task tab for document selection, while showing shadow sel
     */
    Navigation["DocSelectionShadowTask"] = "DocSelectionShadowTask";
    /**
     * 33: Task tab for project selection, while showing shadow sel
     */
    Navigation["ProjSelectionShadowTask"] = "ProjSelectionShadowTask";
    /**
     * 34: Context (popup) menu in Diary archive
     */
    Navigation["DiaryArchive"] = "DiaryArchive";
    /**
     * 35: Context (popup) menu in Contact selection
     */
    Navigation["SelectionContactArchive"] = "SelectionContactArchive";
    /**
     * 36: Context (popup) menu in Project archive
     */
    Navigation["SelectionProjectArchive"] = "SelectionProjectArchive";
    /**
     * 37: Context (popup) menu in Sale archive
     */
    Navigation["SelectionSaleArchive"] = "SelectionSaleArchive";
    /**
     * 38: Context (popup) menu in Appointment archive
     */
    Navigation["SelectionAppointmentArchive"] = "SelectionAppointmentArchive";
    /**
     * 39: Context (popup) menu in Document archive
     */
    Navigation["SelectionDocumentArchive"] = "SelectionDocumentArchive";
    /**
     * 40: Task card in Contact selection, when a custom archive is shown
     */
    Navigation["ContSelectionCustomTask"] = "ContSelectionCustomTask";
    /**
     * 41: Task card in Appointment selection, when a custom archive is shown
     */
    Navigation["AppntSelectionCustomTask"] = "AppntSelectionCustomTask";
    /**
     * 42: Task card in Sale selection, when a custom archive is shown
     */
    Navigation["SaleSelectionCustomTask"] = "SaleSelectionCustomTask";
    /**
     * 43: Task card in Document selection, when a custom archive is shown
     */
    Navigation["DocSelectionCustomTask"] = "DocSelectionCustomTask";
    /**
     * 44: Task card in Project selection, when a custom archive is shown
     */
    Navigation["ProjSelectionCustomTask"] = "ProjSelectionCustomTask";
    /**
     * 45: ?
     */
    Navigation["CustomArchiveMiniCard"] = "CustomArchiveMiniCard";
    /**
     * 46: ?
     */
    Navigation["SelectionCard"] = "SelectionCard";
    /**
     * 47: In the Reporter panel minicard, so far only in Web
     */
    Navigation["ReportMinicard"] = "ReportMinicard";
    /**
     * 48:
     */
    Navigation["QuoteDialog"] = "QuoteDialog";
    /**
     * 49:
     */
    Navigation["QuoteDialogTask"] = "QuoteDialogTask";
    /**
     * 50:
     */
    Navigation["QuoteDialogArchive"] = "QuoteDialogArchive";
    /**
     * 51:
     */
    Navigation["QuoteLineDialogTask"] = "QuoteLineDialogTask";
    /**
     * 52:
     */
    Navigation["QuoteLineDialog"] = "QuoteLineDialog";
    /**
     * 53:
     */
    Navigation["QuoteLineSelectionMainTask"] = "QuoteLineSelectionMainTask";
    /**
     * 54:
     */
    Navigation["QuoteLineSelectionShadowTask"] = "QuoteLineSelectionShadowTask";
    /**
     * 55:
     */
    Navigation["SelectionQuoteLineArchive"] = "SelectionQuoteLineArchive";
    /**
     * 56:
     */
    Navigation["QuoteLineSelectionCustomTask"] = "QuoteLineSelectionCustomTask";
    /**
     * 57:
     */
    Navigation["FindSystem"] = "FindSystem";
    /**
     * 58: Task button visible on the Mailing Selection task panel
     */
    Navigation["MailingSelectionTask"] = "MailingSelectionTask";
    /**
     * 59: Task button visible on the Mailing Selection task panel
     */
    Navigation["ContactSelectionMailingsTask"] = "ContactSelectionMailingsTask";
    /**
     * 60: Task button visible on the Mailing Selection task panel
     */
    Navigation["AppointmentSelectionMailingsTask"] = "AppointmentSelectionMailingsTask";
    /**
     * 61: Task button visible on the Mailing Selection task panel
     */
    Navigation["SaleSelectionMailingsTask"] = "SaleSelectionMailingsTask";
    /**
     * 62: Task button visible on the Mailing Selection task panel
     */
    Navigation["DocumentSelectionMailingsTask"] = "DocumentSelectionMailingsTask";
    /**
     * 63: Task button visible on the Mailing Selection task panel
     */
    Navigation["ProjectSelectionMailingsTask"] = "ProjectSelectionMailingsTask";
    /**
     * 64: Task button visible on the Mailing Selection task panel
     */
    Navigation["QuoteLineSelectionMailingsTask"] = "QuoteLineSelectionMailingsTask";
    /**
     * 65: Visible in top panels new menu
     */
    Navigation["TopPanelNewMenu"] = "TopPanelNewMenu";
    /**
     * 66: Dashboard panel
     */
    Navigation["Dashboard"] = "Dashboard";
    /**
     * 67: This application (type IntegratedHTML or IntegratedURL)  appears as a tab in the Person Archive
     */
    Navigation["PersonArchive"] = "PersonArchive";
    /**
     * 68: In the person minicard
     */
    Navigation["PersonMinicard"] = "PersonMinicard";
    /**
     * 69: In the company card, task button
     */
    Navigation["CompanyCardTask"] = "CompanyCardTask";
    /**
     * 70: In the project card, task button
     */
    Navigation["ProjectCardTask"] = "ProjectCardTask";
    /**
     * 71: This application (type IntegratedHTML or IntegratedURL) appears as a tab in the Request card
     */
    Navigation["TicketCard"] = "TicketCard";
    /**
     * 72: In the ticket minicard
     */
    Navigation["TicketMinicard"] = "TicketMinicard";
})(Navigation = exports.Navigation || (exports.Navigation = {}));
/**
 * Value for field 'accessflags' in table 'prefdesc'.
 * This Enum is used by:  PrefDesc.accessFlags
 * This Enum consists of flag values that can be combined.
 */
var PrefDescAccessFlags;
(function (PrefDescAccessFlags) {
    /**
     * 0: Unknown - used when initializing
     */
    PrefDescAccessFlags[PrefDescAccessFlags["Unknown"] = 0] = "Unknown";
    /**
     * 1: Wizard mode is password-protected and only accessible to SuperOffice personnel.
     */
    PrefDescAccessFlags[PrefDescAccessFlags["WizardMode"] = 1] = "WizardMode";
    /**
     * 2: Preference settable only by CRM5 superuser
     */
    PrefDescAccessFlags[PrefDescAccessFlags["Level0"] = 2] = "Level0";
    /**
     * 4: Show preference in SOADMIN GUI
     */
    PrefDescAccessFlags[PrefDescAccessFlags["adminGUI"] = 4] = "adminGUI";
    /**
     * 8: Show preference in CRM5 GUI
     */
    PrefDescAccessFlags[PrefDescAccessFlags["CRMGUI"] = 8] = "CRMGUI";
})(PrefDescAccessFlags = exports.PrefDescAccessFlags || (exports.PrefDescAccessFlags = {}));
/**
 * Value for field 'valueType' in table 'prefdesc'.
 * This Enum is used by:  PrefDesc.valueType
 */
var PrefDescValueType;
(function (PrefDescValueType) {
    /**
     * 0: Unknown - used when initializing
     */
    PrefDescValueType["Unknown"] = "Unknown";
    /**
     * 1: Preference value is a number
     */
    PrefDescValueType["Number"] = "Number";
    /**
     * 2: Preference value is a text (max len 99 characters)
     */
    PrefDescValueType["Text"] = "Text";
    /**
     * 3: Preference value is Boolean
     */
    PrefDescValueType["Bool"] = "Bool";
    /**
     * 4: Preference value is a list of separate value
     */
    PrefDescValueType["ListOfValues"] = "ListOfValues";
    /**
     * 5: Preference value is a record ID in the given MDO list table; maxValue contains the tablenumberø
     */
    PrefDescValueType["ListTableRef"] = "ListTableRef";
    /**
     * 6: Preference value is a time, value is seconds since midnight (28800 = 08:00)
     */
    PrefDescValueType["TimeList"] = "TimeList";
    /**
     * 7: Preference value is a contact ID
     */
    PrefDescValueType["ContactID"] = "ContactID";
    /**
     * 8: Preference value is a person ID
     */
    PrefDescValueType["PersonID"] = "PersonID";
    /**
     * 9: Preference value is a project ID
     */
    PrefDescValueType["ProjectID"] = "ProjectID";
    /**
     * 10: Preference value is a selection ID
     */
    PrefDescValueType["SelectionID"] = "SelectionID";
    /**
     * 11: Obsolete: Windows position and size
     */
    PrefDescValueType["PosSize"] = "PosSize";
    /**
     * 12: TimeZone location
     */
    PrefDescValueType["TimeZone"] = "TimeZone";
    /**
     * 13: Time, preference value is 13:45:50
     */
    PrefDescValueType["Time"] = "Time";
    /**
     * 14: Password, stored as plain text but shown with dots
     */
    PrefDescValueType["Password"] = "Password";
    /**
     * 15: Multi-line text that preserves line breaks
     */
    PrefDescValueType["MultiLineText"] = "MultiLineText";
})(PrefDescValueType = exports.PrefDescValueType || (exports.PrefDescValueType = {}));
/**
 * Value for the 'status' field in the sale table
 * This Enum is used by:  sale.status; SaleHist.status; CounterValue.sale_status
 */
var SaleStatus;
(function (SaleStatus) {
    /**
     * 0: Sale status is unknown
     */
    SaleStatus["Unknown"] = "Unknown";
    /**
     * 1: Sale is open
     */
    SaleStatus["Open"] = "Open";
    /**
     * 2: Sale has been sold (green $ in GUI)
     */
    SaleStatus["Sold"] = "Sold";
    /**
     * 3: Sale has been lost (red $ in GUI)
     */
    SaleStatus["Lost"] = "Lost";
    /**
     * 4: Sale has been stalled, or "parked", awaiting further developments
     */
    SaleStatus["Stalled"] = "Stalled";
    /**
     * 1000: All' choice for Saint. This is NOT an acceptable value for a sale, but is used by the Saint system for indexing all sales
     */
    SaleStatus["SaintAll"] = "SaintAll";
})(SaleStatus = exports.SaleStatus || (exports.SaleStatus = {}));
/**
 * Value for the showState field in table externalapplication
 * This Enum is used by:  ExtApp.showState
 * This Enum consists of flag values that can be combined.
 */
var ShowState;
(function (ShowState) {
    /**
     * 0: Start application in minimized state
     */
    ShowState[ShowState["Minimized"] = 0] = "Minimized";
    /**
     * 1: Start application in maximized state
     */
    ShowState[ShowState["Maximized"] = 1] = "Maximized";
    /**
     * 2: Start application with default window size and position
     */
    ShowState[ShowState["Default"] = 2] = "Default";
    /**
     * 4: Undefined and generated value 4
     */
    ShowState[ShowState["UndefinedValue4"] = 4] = "UndefinedValue4";
    /**
     * 8: Undefined and generated value 8
     */
    ShowState[ShowState["UndefinedValue8"] = 8] = "UndefinedValue8";
    /**
     * 16: Undefined and generated value 16
     */
    ShowState[ShowState["UndefinedValue16"] = 16] = "UndefinedValue16";
    /**
     * 32: Undefined and generated value 32
     */
    ShowState[ShowState["UndefinedValue32"] = 32] = "UndefinedValue32";
    /**
     * 64: Undefined and generated value 64
     */
    ShowState[ShowState["UndefinedValue64"] = 64] = "UndefinedValue64";
    /**
     * 128: Undefined and generated value 128
     */
    ShowState[ShowState["UndefinedValue128"] = 128] = "UndefinedValue128";
    /**
     * 256: Show the Browser toolbar
     */
    ShowState[ShowState["ToolBar"] = 256] = "ToolBar";
    /**
     * 512: Show the Browser addressbar (where the user can type URL's and stuff)
     */
    ShowState[ShowState["AddressBar"] = 512] = "AddressBar";
    /**
     * 1024: Show the Browser statusbar
     */
    ShowState[ShowState["StatusBar"] = 1024] = "StatusBar";
    /**
     * 2048: Show the Browser Menu bar (currently not implemented)
     */
    ShowState[ShowState["MenuBar"] = 2048] = "MenuBar";
})(ShowState = exports.ShowState || (exports.ShowState = {}));
/**
 * Value for field 'direction' in table 'task'. Controls icons used in GUI
 * This Enum is used by:  Task.direction
 */
var TaskDirection;
(function (TaskDirection) {
    /**
     * 0: Unknown - used when initializing
     */
    TaskDirection["Unknown"] = "Unknown";
    /**
     * 1: The task is sent in to SuperOffice CRM 5
     */
    TaskDirection["Incoming"] = "Incoming";
    /**
     * 2: The task is sent out from SuperOffice CRM 5
     */
    TaskDirection["Outgoing"] = "Outgoing";
    /**
     * 3: All' choice for Saint. This is NOT an acceptable value for a task definition, but is used by the Saint system for indexing all directions
     */
    TaskDirection["SaintAll"] = "SaintAll";
})(TaskDirection = exports.TaskDirection || (exports.TaskDirection = {}));
/**
 * Value for field 'record_type' in table 'task'. Controls icons used in GUI
 * This Enum is used by:  Task.record_type
 */
var TaskType;
(function (TaskType) {
    /**
     * 0: This task is of an unknown/undecided type
     */
    TaskType["Unknown"] = "Unknown";
    /**
     * 1: The task is an appointment
     */
    TaskType["Appointment"] = "Appointment";
    /**
     * 2: The task is a document
     */
    TaskType["Document"] = "Document";
    /**
     * 3: The task is an email
     */
    TaskType["Email"] = "Email";
    /**
     * 4: The task is a fax
     */
    TaskType["Fax"] = "Fax";
    /**
     * 5: The task is a phone call
     */
    TaskType["Phone"] = "Phone";
    /**
     * 6: The task is a To-do
     */
    TaskType["ToDo"] = "ToDo";
    /**
     * 7: Mail merge draft document
     */
    TaskType["MailMergeDraft"] = "MailMergeDraft";
    /**
     * 8: Merged result of mail merge
     */
    TaskType["MailMergeFinal"] = "MailMergeFinal";
    /**
     * 9: Saved report run
     */
    TaskType["Report"] = "Report";
    /**
     * 10: All' choice for Saint, every activity is recorded under this type as well as the specific type. This is NOT an acceptable value for an individual activity
     */
    TaskType["SaintAll"] = "SaintAll";
})(TaskType = exports.TaskType || (exports.TaskType = {}));
/**
 * Value for field 'deflevel' in table 'userpreference'.
 * This Enum is used by:  UserPreference.deflevel; UserPreference.maxlevel; PrefDesc.maxLevel; PrefDesc.sysMaxLevel
 */
var PreferenceLevel;
(function (PreferenceLevel) {
    /**
     * 0: Undefined value (error)
     */
    PreferenceLevel["Undefined"] = "Undefined";
    /**
     * 1: Default value used if no other value has been specified
     */
    PreferenceLevel["HardDefault"] = "HardDefault";
    /**
     * 2: Value valid for all databases under this licence
     */
    PreferenceLevel["SystemWide"] = "SystemWide";
    /**
     * 3: Value valid for this database
     */
    PreferenceLevel["Database"] = "Database";
    /**
     * 4: Value valid for this group
     */
    PreferenceLevel["Group"] = "Group";
    /**
     * 5: Value valid for this user
     */
    PreferenceLevel["Individual"] = "Individual";
    /**
     * 6: Value valid for this computer (note: stored in the Registry, not in the database)
     */
    PreferenceLevel["PC"] = "PC";
})(PreferenceLevel = exports.PreferenceLevel || (exports.PreferenceLevel = {}));
/**
 * Units of duration - from seconds to centuries
 * This Enum is used by:  ProjType.durationUnit; SaleType.durationUnit
 */
var DurationUnit;
(function (DurationUnit) {
    /**
     * 0: Duration is unknown
     */
    DurationUnit["Unknown"] = "Unknown";
    /**
     * 1: Duration is in Seconds
     */
    DurationUnit["Second"] = "Second";
    /**
     * 2: Duration is in Minutes
     */
    DurationUnit["Minute"] = "Minute";
    /**
     * 3: Duration is in Hours
     */
    DurationUnit["Hour"] = "Hour";
    /**
     * 4: Duration is in Days
     */
    DurationUnit["Day"] = "Day";
    /**
     * 5: Duration is in Weeks
     */
    DurationUnit["Week"] = "Week";
    /**
     * 6: Duration is in Months
     */
    DurationUnit["Month"] = "Month";
    /**
     * 7: Duration is in Quarters
     */
    DurationUnit["Quarter"] = "Quarter";
    /**
     * 8: Duration is in HalfYears
     */
    DurationUnit["HalfYear"] = "HalfYear";
    /**
     * 9: Duration is in Years
     */
    DurationUnit["Year"] = "Year";
    /**
     * 10: Duration is in Decades
     */
    DurationUnit["Decade"] = "Decade";
    /**
     * 11: Duration is in Centurys
     */
    DurationUnit["Century"] = "Century";
    /**
     * 12: Duration is in Milleniums
     */
    DurationUnit["Millenium"] = "Millenium";
})(DurationUnit = exports.DurationUnit || (exports.DurationUnit = {}));
/**
 * How the selections in a combined selections should be put together
 * This Enum is used by:  selection.combinationType
 */
var SelectionUnionType;
(function (SelectionUnionType) {
    /**
     * 0: Combination type is unknown/indefined
     */
    SelectionUnionType["Unknown"] = "Unknown";
    /**
     * 1: All of left, except where it overlaps with right
     */
    SelectionUnionType["SubtractRightFromLeft"] = "SubtractRightFromLeft";
    /**
     * 2: All of right, except where it overlaps with left
     */
    SelectionUnionType["SubtractLeftFromRight"] = "SubtractLeftFromRight";
    /**
     * 3: Those present in left AND right only
     */
    SelectionUnionType["Intersect"] = "Intersect";
    /**
     * 4: Those present in left or right, but not both
     */
    SelectionUnionType["XOR"] = "XOR";
    /**
     * 5: All, but no duplicates for those present in left and right
     */
    SelectionUnionType["Union"] = "Union";
})(SelectionUnionType = exports.SelectionUnionType || (exports.SelectionUnionType = {}));
/**
 * Status for shipment (started, cancelled etc)
 * This Enum is used by:  s_shipment.status
 */
var ShipmentStatus;
(function (ShipmentStatus) {
    /**
     * 0: Initial status, shipment is left alone, can be used for working with shipment
     */
    ShipmentStatus["None"] = "None";
    /**
     * 1: Finished, no errors.
     */
    ShipmentStatus["Ok"] = "Ok";
    /**
     * 2: Stopped by user.
     */
    ShipmentStatus["Canceled"] = "Canceled";
    /**
     * 3: Ready for execution, in the queue.
     */
    ShipmentStatus["Waiting"] = "Waiting";
    /**
     * 4: Executing (sending).
     */
    ShipmentStatus["Started"] = "Started";
    /**
     * 5: Finished, had some errors.
     */
    ShipmentStatus["StatusFailed"] = "StatusFailed";
    /**
     * 6: Retrying the addresses which did not work
     */
    ShipmentStatus["Retry"] = "Retry";
    /**
     * 7: Between waiting and starting. Used when we populate the recipient lists.
     */
    ShipmentStatus["Populating"] = "Populating";
    /**
     * 8: Deleted
     */
    ShipmentStatus["Deleted"] = "Deleted";
    /**
     * 9: Awaiting ejournalCron to start populate
     */
    ShipmentStatus["AwaitPopulate"] = "AwaitPopulate";
    /**
     * 10: eJournalCron has started populateOnly after someone saved choose recipients screen.
     */
    ShipmentStatus["PopulatingOnly"] = "PopulatingOnly";
    /**
     * 11: eJournalCron has started populating, but by user request it is canceled. Now we finish populating, and then set status back to none.
     */
    ShipmentStatus["PopulateAborted"] = "PopulateAborted";
    /**
     * 12:
     */
    ShipmentStatus["PopulateError"] = "PopulateError";
    /**
     * 13:
     */
    ShipmentStatus["TooManyRecipients"] = "TooManyRecipients";
})(ShipmentStatus = exports.ShipmentStatus || (exports.ShipmentStatus = {}));
/**
 * Status for sending to a particular recipient
 * This Enum is used by:  s_shipment_addr.status
 */
var ShipmentAddrStatus;
(function (ShipmentAddrStatus) {
    /**
     * 0: Default value for empty rows
     */
    ShipmentAddrStatus["Unknown"] = "Unknown";
    /**
     * 1: Ready for shipment
     */
    ShipmentAddrStatus["Ready"] = "Ready";
    /**
     * 2: Blocked because it duplicates another shipment addr in the same batch
     */
    ShipmentAddrStatus["Duplicate"] = "Duplicate";
    /**
     * 3: Blocked because of nomailing flag
     */
    ShipmentAddrStatus["Blocked"] = "Blocked";
    /**
     * 4: Sent
     */
    ShipmentAddrStatus["Sent"] = "Sent";
    /**
     * 5: Bounce received from transport channel
     */
    ShipmentAddrStatus["Bounced"] = "Bounced";
    /**
     * 6: Recipient has opened the message, we know because of tracking
     */
    ShipmentAddrStatus["Opened"] = "Opened";
    /**
     * 7: Test recipient, will be deleted after sent (enum name is not correct, but that cant be changed now)
     */
    ShipmentAddrStatus["Clicked"] = "Clicked";
    /**
     * 8: Vacation notice, etc
     */
    ShipmentAddrStatus["SoftBounced"] = "SoftBounced";
    /**
     * 9: Recipient does not have subscription for shipmentType
     */
    ShipmentAddrStatus["NoSubscription"] = "NoSubscription";
    /**
     * 10: Recipient sent a complaint
     */
    ShipmentAddrStatus["Complained"] = "Complained";
    /**
     * 11: Recipient address has bounced too many times
     */
    ShipmentAddrStatus["TooManyBounces"] = "TooManyBounces";
})(ShipmentAddrStatus = exports.ShipmentAddrStatus || (exports.ShipmentAddrStatus = {}));
/**
 * Communication channel leading to ticket being created
 * This Enum is used by:  ticket.origin
 */
var TicketOrigin;
(function (TicketOrigin) {
    /**
     * 0: We just have no idea. Maybe it was too long ago
     */
    TicketOrigin["Unknown"] = "Unknown";
    /**
     * 1: Email communiqué
     */
    TicketOrigin["Email"] = "Email";
    /**
     * 2: SMS
     */
    TicketOrigin["SMS"] = "SMS";
    /**
     * 3: Telefacsimile
     */
    TicketOrigin["Fax"] = "Fax";
    /**
     * 4: Phone call to human operator
     */
    TicketOrigin["Phone"] = "Phone";
    /**
     * 5: Facebook wall
     */
    TicketOrigin["Facebook"] = "Facebook";
    /**
     * 6: Tweet tweet
     */
    TicketOrigin["Twitter"] = "Twitter";
    /**
     * 7: Internal, by human operator
     */
    TicketOrigin["Internal"] = "Internal";
    /**
     * 8: Direct by customer through CustomerCentre web pages
     */
    TicketOrigin["CustomerCentre"] = "CustomerCentre";
    /**
     * 9: Auto-generated from Emarketing link
     */
    TicketOrigin["EMarketing"] = "EMarketing";
    /**
     * 10: Automatic processes in CS
     */
    TicketOrigin["AutoGenerated"] = "AutoGenerated";
    /**
     * 11: Chat
     */
    TicketOrigin["Chat"] = "Chat";
    /**
     * 12: Form submission
     */
    TicketOrigin["Form"] = "Form";
})(TicketOrigin = exports.TicketOrigin || (exports.TicketOrigin = {}));
/**
 * Which field in ticket we count time spent on
 * This Enum is used by:  ticket_status.time_counter
 */
var TicketStatusTimeCounter;
(function (TicketStatusTimeCounter) {
    /**
     * 0: Not counted
     */
    TicketStatusTimeCounter["None"] = "None";
    /**
     * 1: Time is counted in the _internally field
     */
    TicketStatusTimeCounter["Internally"] = "Internally";
    /**
     * 2: Time is counted in the _externally field
     */
    TicketStatusTimeCounter["Externally"] = "Externally";
    /**
     * 3: Time is counted in the _queue field
     */
    TicketStatusTimeCounter["Queue"] = "Queue";
})(TicketStatusTimeCounter = exports.TicketStatusTimeCounter || (exports.TicketStatusTimeCounter = {}));
/**
 * State of a Quote Version
 * This Enum is used by:  QuoteVersion.State; QuoteVersion.ArchivedState
 */
var QuoteVersionState;
(function (QuoteVersionState) {
    /**
     * 0: State unknown
     */
    QuoteVersionState["Unknown"] = "Unknown";
    /**
     * 1: Draft that has been calculated, and ERP has verified it as OK
     */
    QuoteVersionState["Draft"] = "Draft";
    /**
     * 2: This is a draft that has not been calculated, prices and other attributes may be 'invalid' relative to ERP system rules
     */
    QuoteVersionState["DraftNotCalculated"] = "DraftNotCalculated";
    /**
     * 3: Draft has been checked, and there was a problem that needs (human) approval
     */
    QuoteVersionState["DraftNeedsApproval"] = "DraftNeedsApproval";
    /**
     * 4: Draft with potential problems has been human-approved
     */
    QuoteVersionState["DraftApproved"] = "DraftApproved";
    /**
     * 5: Draft has been checked, there was a problem, and (human) approval was NOT granted
     */
    QuoteVersionState["DraftNotApproved"] = "DraftNotApproved";
    /**
     * 6: Sent to customer, and is now a legally binding document
     */
    QuoteVersionState["Sent"] = "Sent";
    /**
     * 7: Archived - previous state saved in ArchivedState, newer versions exist
     */
    QuoteVersionState["Archived"] = "Archived";
    /**
     * 8: Version was rejected be the customer - we lost the sale
     */
    QuoteVersionState["Lost"] = "Lost";
    /**
     * 9: Quote was accepted and the sale is 'Sold'
     */
    QuoteVersionState["Sold"] = "Sold";
})(QuoteVersionState = exports.QuoteVersionState || (exports.QuoteVersionState = {}));
/**
 * The link type, often synonymous with the blob type, of a BinaryObjectLink row
 * This Enum is used by:  BinaryObjectLink.linkType
 */
var BlobLinkType;
(function (BlobLinkType) {
    /**
     * 1: Portrait picture of a person
     */
    BlobLinkType["PersonImage"] = "PersonImage";
    /**
     * 2: Picture bound to a project
     */
    BlobLinkType["ProjectImage"] = "ProjectImage";
    /**
     * 3: Picture used for a project of type Event, in the Audience client
     */
    BlobLinkType["EventImage"] = "EventImage";
    /**
     * 4: Generic thumbnail - not used?
     */
    BlobLinkType["Thumbnail"] = "Thumbnail";
    /**
     * 5: Watermark image for a Status Monitor in Sales Intelligence
     */
    BlobLinkType["StatusMonitorImage"] = "StatusMonitorImage";
    /**
     * 6: Information related to a BatchTask in NetServer
     */
    BlobLinkType["BatchTask"] = "BatchTask";
    /**
     * 7: Image (possibly more than one, differentiated by rank) of a Product; exactly one row should have rank=1
     */
    BlobLinkType["ProductImage"] = "ProductImage";
    /**
     * 8: Thumbnail image for a product, only one allowed per product
     */
    BlobLinkType["ProductThumbnail"] = "ProductThumbnail";
    /**
     * 9: Image (possibly more than one, differentiated by rank) of a Product image for a quote line, only one allowed per quote line
     */
    BlobLinkType["QuoteLineImage"] = "QuoteLineImage";
    /**
     * 10: Thumbnail image for a quote line, only one allowed per quote line
     */
    BlobLinkType["QuoteLineThumbnail"] = "QuoteLineThumbnail";
    /**
     * 11: Access Token used by Cloud Documents for accessing external services
     */
    BlobLinkType["AccessToken"] = "AccessToken";
    /**
     * 12: Refresh Token used by Cloud Documents for accessing external services
     */
    BlobLinkType["RefreshToken"] = "RefreshToken";
    /**
     * 13: Dashboard
     */
    BlobLinkType["Dashboard"] = "Dashboard";
    /**
     * 14: Dashboard tile
     */
    BlobLinkType["DashboardTile"] = "DashboardTile";
    /**
     * 15: Chat topic image
     */
    BlobLinkType["ChatTopicImage"] = "ChatTopicImage";
    /**
     * 16: Forms background image
     */
    BlobLinkType["FormsBackgroundImage"] = "FormsBackgroundImage";
    /**
     * 17: Contact logo image
     */
    BlobLinkType["ContactImage"] = "ContactImage";
    /**
     * 18: HTML data for dashboard tiles
     */
    BlobLinkType["DashboardHtmlTileData"] = "DashboardHtmlTileData";
})(BlobLinkType = exports.BlobLinkType || (exports.BlobLinkType = {}));
/**
 * The state of a quote-alternative or line: Ok / OkWithInfo / Warn / Error
 * This Enum is used by:  QuoteVersion.Status; QuoteAlternative.Status; QuoteLine.Status
 */
var QuoteStatus;
(function (QuoteStatus) {
    /**
     * 0: OK, all is good
     */
    QuoteStatus["Ok"] = "Ok";
    /**
     * 1: All is good, but there is some additional information that the user should be made aware of.
     */
    QuoteStatus["OkWithInfo"] = "OkWithInfo";
    /**
     * 2: There is a problem that the user must be made aware of.
     */
    QuoteStatus["Warning"] = "Warning";
    /**
     * 3: There is a problem that the system will not be able to get around. The user needs to do something. Example: The user has registered a quoteline that is discountinued and the amount the user has registered is not in stock.
     */
    QuoteStatus["Error"] = "Error";
})(QuoteStatus = exports.QuoteStatus || (exports.QuoteStatus = {}));
/**
 * Has a pre-calculated value been overriden in a QuoteAlternative or QuoteLine, and in that case what & how?
 * This Enum is used by:  QuoteAlternative.UserValueOverride; QuoteLine.UserValueOverride
 */
var ValueOverride;
(function (ValueOverride) {
    /**
     * 0: Discount data is from the ERP system and has not been overridden
     */
    ValueOverride["None"] = "None";
    /**
     * 1: The Total amount has been overridden; all other fields should be recalculated
     */
    ValueOverride["Total"] = "Total";
    /**
     * 2: The discount percentage has been overriden; all other fields should be recalculated
     */
    ValueOverride["DiscountPercent"] = "DiscountPercent";
    /**
     * 3: The discount amount has been overridden; all other fields should be recalculated
     */
    ValueOverride["DiscountAmount"] = "DiscountAmount";
    /**
     * 4: The earning percent has been overridden; all other fields should be recalculated
     */
    ValueOverride["EarningPercent"] = "EarningPercent";
    /**
     * 5: The earning amount has been overridden; all other fields should be recalculated
     */
    ValueOverride["EarningAmount"] = "EarningAmount";
})(ValueOverride = exports.ValueOverride || (exports.ValueOverride = {}));
/**
 * Actor type within the ERP system, related but not identitcal to SuperOffice Entity type
 * This Enum is used by:  ErpConnectionActorType.ActorTypeErp; ErpExternalKey.ActorType
 */
var ErpActorType;
(function (ErpActorType) {
    /**
     * 0: Unknown - used when initializing
     */
    ErpActorType["Unknown"] = "Unknown";
    /**
     * 1: Erp Customer
     */
    ErpActorType["Customer"] = "Customer";
    /**
     * 2: Supplier or Vendor
     */
    ErpActorType["Supplier"] = "Supplier";
    /**
     * 3: Both customer and supplier
     */
    ErpActorType["Partner"] = "Partner";
    /**
     * 4: Contact person
     */
    ErpActorType["Person"] = "Person";
    /**
     * 5: Project
     */
    ErpActorType["Project"] = "Project";
    /**
     * 6: Employee, often mapped to associate
     */
    ErpActorType["Employee"] = "Employee";
    /**
     * 7: Sale
     */
    ErpActorType["Sale"] = "Sale";
})(ErpActorType = exports.ErpActorType || (exports.ErpActorType = {}));
/**
 * Actor type within the CRM, system, a subset of the SuperOffice Entity types
 * This Enum is used by:  ErpConnectionActorType.ActorTypeCrm
 */
var CrmActorType;
(function (CrmActorType) {
    /**
     * 0: Unknown - used when initializing
     */
    CrmActorType["Unknown"] = "Unknown";
    /**
     * 1: Crm Customer
     */
    CrmActorType["Contact"] = "Contact";
    /**
     * 2: Person
     */
    CrmActorType["Person"] = "Person";
    /**
     * 3: Project
     */
    CrmActorType["Project"] = "Project";
    /**
     * 4: Sale
     */
    CrmActorType["Sale"] = "Sale";
})(CrmActorType = exports.CrmActorType || (exports.CrmActorType = {}));
/**
 * Should this field be published by default?
 * This Enum is used by:  Task.defaultPublishType; DocTmpl.defaultPublishType; Publish.publishType
 */
var PublishType;
(function (PublishType) {
    /**
     * 0:
     */
    PublishType["Undefined"] = "Undefined";
    /**
     * 1: Published to external persons
     */
    PublishType["External"] = "External";
})(PublishType = exports.PublishType || (exports.PublishType = {}));
/**
 * Justification - 0 = default, left, right, center
 * This Enum is used by:  UDefField.justification
 */
var UdefJustification;
(function (UdefJustification) {
    /**
     * 0:
     */
    UdefJustification["Default"] = "Default";
    /**
     * 1:
     */
    UdefJustification["Left"] = "Left";
    /**
     * 2:
     */
    UdefJustification["Center"] = "Center";
    /**
     * 3:
     */
    UdefJustification["Right"] = "Right";
})(UdefJustification = exports.UdefJustification || (exports.UdefJustification = {}));
/**
 * 0 = employee, 1 = external user, 2 = anonymous
 * This Enum is used by:  Role.roleType
 */
var RoleType;
(function (RoleType) {
    /**
     * 0: Normal employee
     */
    RoleType["Employee"] = "Employee";
    /**
     * 1: External User
     */
    RoleType["ExternalUser"] = "ExternalUser";
    /**
     * 2: Anonymous (implicit) users.
     */
    RoleType["Anonymous"] = "Anonymous";
    /**
     * 3: System users - sentry is bypassed for this kind of users.
     */
    RoleType["System"] = "System";
})(RoleType = exports.RoleType || (exports.RoleType = {}));
/**
 * Enumerator describing the main pattern of recurrence.
 * This Enum is used by:  RecurrenceRule.pattern
 */
var RecurrencePattern;
(function (RecurrencePattern) {
    /**
     * 0: 0: Unknown/undecided type
     */
    RecurrencePattern["Unknown"] = "Unknown";
    /**
     * 1: Dayly recurrence.
     */
    RecurrencePattern["Daily"] = "Daily";
    /**
     * 2: Weekly recurrence.
     */
    RecurrencePattern["Weekly"] = "Weekly";
    /**
     * 3: Monthly recurrence.
     */
    RecurrencePattern["Monthly"] = "Monthly";
    /**
     * 4: Yearly recurrence.
     */
    RecurrencePattern["Yearly"] = "Yearly";
    /**
     * 5: Custom recurrence, only dates are specified.  See RecurrenceDayPattern for details
     */
    RecurrencePattern["Custom"] = "Custom";
})(RecurrencePattern = exports.RecurrencePattern || (exports.RecurrencePattern = {}));
/**
 * Normal = 0, Maximized = 1, Minimized = 2
 * This Enum is used by:  WinPosSize.state
 */
var ShowWindowState;
(function (ShowWindowState) {
    /**
     * 0: Show Normal
     */
    ShowWindowState["Normal"] = "Normal";
    /**
     * 1: Show Maximized
     */
    ShowWindowState["Maximized"] = "Maximized";
    /**
     * 2: Show Minimized
     */
    ShowWindowState["Minimized"] = "Minimized";
})(ShowWindowState = exports.ShowWindowState || (exports.ShowWindowState = {}));
/**
 * Entire system, per database, or per associate
 * This Enum is used by:  ModuleLicense.licenseType
 */
var LicenseType;
(function (LicenseType) {
    /**
     * 0:
     */
    LicenseType["Unknown"] = "Unknown";
    /**
     * 1:
     */
    LicenseType["SiteLicense"] = "SiteLicense";
    /**
     * 2:
     */
    LicenseType["SatelliteLicense"] = "SatelliteLicense";
    /**
     * 3:
     */
    LicenseType["UserLicense"] = "UserLicense";
})(LicenseType = exports.LicenseType || (exports.LicenseType = {}));
/**
 * What type of delivery system to use for a mail merge
 */
var EMailMergeTargetType;
(function (EMailMergeTargetType) {
    /**
     * 0: Default to mail, then fax, then printer
     */
    EMailMergeTargetType["BestFit"] = "BestFit";
    /**
     * 1: Default to mail, then fax
     */
    EMailMergeTargetType["Electronic"] = "Electronic";
    /**
     * 2: Deliver by mail
     */
    EMailMergeTargetType["Mail"] = "Mail";
    /**
     * 3: Deliver by fax
     */
    EMailMergeTargetType["Fax"] = "Fax";
    /**
     * 4: Deliver to printer
     */
    EMailMergeTargetType["Printer"] = "Printer";
    /**
     * 5: Output mails as xml. This target is used in conjunction with external mail clients.
     */
    EMailMergeTargetType["Xml"] = "Xml";
    /**
     * 6: Same as Xml, but use fax format for recipient addresses
     */
    EMailMergeTargetType["XmlFax"] = "XmlFax";
})(EMailMergeTargetType = exports.EMailMergeTargetType || (exports.EMailMergeTargetType = {}));
/**
 * Status if this appointment is in the process of being assigned to someone else
 */
var AssignmentStatus;
(function (AssignmentStatus) {
    /**
     * 0: Unknown - used when initializing
     */
    AssignmentStatus["Unknown"] = "Unknown";
    /**
     * 1: 1: All appointments not in the process of being assigned to someone else
     */
    AssignmentStatus["None"] = "None";
    /**
     * 11: 11: Appointment in the process of being assigned to someone else
     */
    AssignmentStatus["Assigning"] = "Assigning";
    /**
     * 12: 12: Appointment where the party requested to take ownership of the appointment or task has observed the request, but not yet accepted or declined the request.
     */
    AssignmentStatus["Seen"] = "Seen";
    /**
     * 13: 13: Appointment where the person requested to take ownership has declined.
     */
    AssignmentStatus["Declined"] = "Declined";
})(AssignmentStatus = exports.AssignmentStatus || (exports.AssignmentStatus = {}));
/**
 * Color index of tasks
 */
var ColorIndex;
(function (ColorIndex) {
    /**
     * 0: Light blue
     */
    ColorIndex["LightBlue"] = "LightBlue";
    /**
     * 1: Dark blue
     */
    ColorIndex["DarkBlue"] = "DarkBlue";
    /**
     * 2: Light gray
     */
    ColorIndex["LightGray"] = "LightGray";
    /**
     * 3: Dark gray
     */
    ColorIndex["DarkGray"] = "DarkGray";
    /**
     * 4: Light green
     */
    ColorIndex["LightGreen"] = "LightGreen";
    /**
     * 5: Dark Green
     */
    ColorIndex["DarkGreen"] = "DarkGreen";
    /**
     * 6: Light Yellow
     */
    ColorIndex["LightYellow"] = "LightYellow";
    /**
     * 7: Dark Yellow
     */
    ColorIndex["DarkYellow"] = "DarkYellow";
    /**
     * 8: Light Red
     */
    ColorIndex["LightRed"] = "LightRed";
    /**
     * 9: Dark Red
     */
    ColorIndex["DarkRed"] = "DarkRed";
    /**
     * 10: Blue alternative 1
     */
    ColorIndex["BlueAlt1"] = "BlueAlt1";
    /**
     * 11: Blue alternative 2
     */
    ColorIndex["BlueAlt2"] = "BlueAlt2";
    /**
     * 12: Blue alternative 3
     */
    ColorIndex["BlueAlt3"] = "BlueAlt3";
    /**
     * 13: Gray alternative 1
     */
    ColorIndex["GrayAlt1"] = "GrayAlt1";
    /**
     * 14: Gray alternative 2
     */
    ColorIndex["GrayAlt2"] = "GrayAlt2";
    /**
     * 15: Gray alternative 3
     */
    ColorIndex["GrayAlt3"] = "GrayAlt3";
    /**
     * 16: Green alternative 1
     */
    ColorIndex["GreenAlt1"] = "GreenAlt1";
    /**
     * 17: Green alternative 2
     */
    ColorIndex["GreenAlt2"] = "GreenAlt2";
    /**
     * 18: Green alternative 3
     */
    ColorIndex["GreenAlt3"] = "GreenAlt3";
    /**
     * 19: Yellow alternative 1
     */
    ColorIndex["YellowAlt1"] = "YellowAlt1";
    /**
     * 20: Yellow alternative 2
     */
    ColorIndex["YellowAlt2"] = "YellowAlt2";
    /**
     * 21: Yellow alternative 3
     */
    ColorIndex["YellowAlt3"] = "YellowAlt3";
    /**
     * 22: Red alternative 1
     */
    ColorIndex["RedAlt1"] = "RedAlt1";
    /**
     * 23: Red alternative 2
     */
    ColorIndex["RedAlt2"] = "RedAlt2";
    /**
     * 24: Red alternative 3
     */
    ColorIndex["RedAlt3"] = "RedAlt3";
})(ColorIndex = exports.ColorIndex || (exports.ColorIndex = {}));
/**
 * Url encoding
 * This Enum is used by:  TaskMenu.encoding
 */
var UrlEncoding;
(function (UrlEncoding) {
    /**
     * 0: Unknown
     */
    UrlEncoding["Unknown"] = "Unknown";
    /**
     * 1: No encoding
     */
    UrlEncoding["None"] = "None";
    /**
     * 2: ANSI
     */
    UrlEncoding["ANSI"] = "ANSI";
    /**
     * 3: Unicode
     */
    UrlEncoding["Unicode"] = "Unicode";
})(UrlEncoding = exports.UrlEncoding || (exports.UrlEncoding = {}));
/**
 * Target type of relation. (Contact, person or both)
 */
var RelationTarget;
(function (RelationTarget) {
    /**
     * 0: None
     */
    RelationTarget["None"] = "None";
    /**
     * 1: Contact
     */
    RelationTarget["Contact"] = "Contact";
    /**
     * 2: Person
     */
    RelationTarget["Person"] = "Person";
    /**
     * 3: Both
     */
    RelationTarget["Both"] = "Both";
})(RelationTarget = exports.RelationTarget || (exports.RelationTarget = {}));
/**
 * Same as the EUDefType enum in the C++ client, this is the DATABASE value used for udef definitions
 */
var UDefType;
(function (UDefType) {
    /**
     * 0: Invalid
     */
    UDefType["Invalid"] = "Invalid";
    /**
     * 7: Owner is the contact table
     */
    UDefType["Contact"] = "Contact";
    /**
     * 8: Owner is the Person table
     */
    UDefType["Person"] = "Person";
    /**
     * 9: Owner is the project table
     */
    UDefType["Project"] = "Project";
    /**
     * 10: Owner is the sale table
     */
    UDefType["Sale"] = "Sale";
    /**
     * 11: This is the temporary udef table pair, used during reorganizations
     */
    UDefType["Temp"] = "Temp";
    /**
     * 12: Owner is the appointment table
     */
    UDefType["Appointment"] = "Appointment";
    /**
     * 13: Owner is the document table
     */
    UDefType["Document"] = "Document";
    /**
     * 14: Owner is undefined, you should not see this value in a real database
     */
    UDefType["None"] = "None";
})(UDefType = exports.UDefType || (exports.UDefType = {}));
/**
 * Field type: 1 = Number, 2 = Short text, 3 = Long text, 4 = Date, 5 = Unlimited date, 6 = Checkbox, 7 = Drop-down listbox, 8 = Decimal
 */
var UDefFieldType;
(function (UDefFieldType) {
    /**
     * 1: Number (32-bit integer)
     */
    UDefFieldType["Number"] = "Number";
    /**
     * 2: Short text, up to 39 characters, stored in the 'small' table
     */
    UDefFieldType["ShortText"] = "ShortText";
    /**
     * 3: Long text, up to 199 characters, stored in the 'large' table
     */
    UDefFieldType["LongText"] = "LongText";
    /**
     * 4: Date, between 1.1.1970 and 2038, stored as seconds after 1.1.1970
     */
    UDefFieldType["Date"] = "Date";
    /**
     * 5: Unlimited date (without time), stored as an YYYYMMDD string
     */
    UDefFieldType["UnlimitedDate"] = "UnlimitedDate";
    /**
     * 6: Checkbox, stored as an integer, 1 = checked
     */
    UDefFieldType["Checkbox"] = "Checkbox";
    /**
     * 7: List item reference, stored as an integer ID
     */
    UDefFieldType["List"] = "List";
    /**
     * 8: Decimal / floating point, stored as a double
     */
    UDefFieldType["Decimal"] = "Decimal";
})(UDefFieldType = exports.UDefFieldType || (exports.UDefFieldType = {}));
/**
 * Custom Field type: 1 = Number, 2 = Short text, 3 = Long text, 4 = Date, 5 = Unlimited date, 6 = Checkbox, 7 = Drop-down listbox, 8 = Decimal, 9 = DateTime, 10 = Time, 11 = TimeSpan, 12 = Relation, 13 = Attachment
 */
var CustomFieldType;
(function (CustomFieldType) {
    /**
     * 0: Unknown/Undefined field type: 0
     */
    CustomFieldType["Unknown"] = "Unknown";
    /**
     * 1: Number (32-bit integer): '[I:123]'
     */
    CustomFieldType["Integer"] = "Integer";
    /**
     * 2: Short text, up to 255 characters: 'text value'
     */
    CustomFieldType["ShortText"] = "ShortText";
    /**
     * 3: Long text: 'long text value'
     */
    CustomFieldType["LongText"] = "LongText";
    /**
     * 4: Date: '[D:06/19/2019]'
     */
    CustomFieldType["Date"] = "Date";
    /**
     * 5: Binary blob, encoded as Base64 string.
     */
    CustomFieldType["Blob"] = "Blob";
    /**
     * 6: Boolean, stored as an integer, 1 = checked/true, 0 = unchecked/false: '[I:1]'
     */
    CustomFieldType["Checkbox"] = "Checkbox";
    /**
     * 7: MDO List item reference, stored as an integer ID: '[I:123]'
     */
    CustomFieldType["MdoList"] = "MdoList";
    /**
     * 8: Decimal / floating point, stored as a double: '[F:3.14159]'
     */
    CustomFieldType["Decimal"] = "Decimal";
    /**
     * 9: Date + Time:  '[DT:06/19/2019 14:35:56.00000]'
     */
    CustomFieldType["DateTime"] = "DateTime";
    /**
     * 10: Time only - ignore the date part: '[T:06/19/2019 14:35:56.00000]'
     */
    CustomFieldType["Time"] = "Time";
    /**
     * 11: Timespan in some units (hours, minutes or seconds): '[I:1234]'
     */
    CustomFieldType["TimeSpan"] = "TimeSpan";
    /**
     * 12: Relation to another table. Stored as an int (primary key of record in other table): '[I:1234]'
     */
    CustomFieldType["RelationTo"] = "RelationTo";
    /**
     * 13: File Attachment: int record id in attachment table: '[I:1234]'
     */
    CustomFieldType["Attachment"] = "Attachment";
    /**
     * 14: Dynamic Link: contains link redirect value: 'https://example.com/scripts/ticket.fcgi?action=redirectLink&extraFieldId=5&table=y_equipment&id=2'
     */
    CustomFieldType["DynamicLink"] = "DynamicLink";
    /**
     * 15: Text with list items to choose between: 'text value'
     */
    CustomFieldType["ListText"] = "ListText";
})(CustomFieldType = exports.CustomFieldType || (exports.CustomFieldType = {}));
/**
 * Value for field 'scope' in table 'systemevent'.
 */
var SystemEventScope;
(function (SystemEventScope) {
    /**
     * 0: Undefined value (error)
     */
    SystemEventScope["Undefined"] = "Undefined";
    /**
     * 1: Value valid for all databases under this licence
     */
    SystemEventScope["SystemWide"] = "SystemWide";
    /**
     * 2: Value valid for this database
     */
    SystemEventScope["Database"] = "Database";
    /**
     * 3: Value valid for this group
     */
    SystemEventScope["Group"] = "Group";
    /**
     * 4: Value valid for this user
     */
    SystemEventScope["User"] = "User";
})(SystemEventScope = exports.SystemEventScope || (exports.SystemEventScope = {}));
/**
 * Entitys type for import
 * This Enum consists of flag values that can be combined.
 */
var ImportEntityType;
(function (ImportEntityType) {
    /**
     * 0: Unknown
     */
    ImportEntityType[ImportEntityType["Unknown"] = 0] = "Unknown";
    /**
     * 1: Person
     */
    ImportEntityType[ImportEntityType["Person"] = 1] = "Person";
    /**
     * 2: Contact
     */
    ImportEntityType[ImportEntityType["Contact"] = 2] = "Contact";
    /**
     * 4: Product
     */
    ImportEntityType[ImportEntityType["Product"] = 4] = "Product";
})(ImportEntityType = exports.ImportEntityType || (exports.ImportEntityType = {}));
/**
 * Action being done for the import row
 * This Enum consists of flag values that can be combined.
 */
var ImportAction;
(function (ImportAction) {
    /**
     * 0: Unknown
     */
    ImportAction[ImportAction["Unknown"] = 0] = "Unknown";
    /**
     * 1: PersonAdded
     */
    ImportAction[ImportAction["PersonAdded"] = 1] = "PersonAdded";
    /**
     * 2: PersonUpdated
     */
    ImportAction[ImportAction["PersonUpdated"] = 2] = "PersonUpdated";
    /**
     * 4: PersonNoChange
     */
    ImportAction[ImportAction["PersonNoChange"] = 4] = "PersonNoChange";
    /**
     * 8: ContactAdded
     */
    ImportAction[ImportAction["ContactAdded"] = 8] = "ContactAdded";
    /**
     * 16: ContactUpdated
     */
    ImportAction[ImportAction["ContactUpdated"] = 16] = "ContactUpdated";
    /**
     * 32: ContactNoChange
     */
    ImportAction[ImportAction["ContactNoChange"] = 32] = "ContactNoChange";
    /**
     * 64: ProductAdded
     */
    ImportAction[ImportAction["ProductAdded"] = 64] = "ProductAdded";
    /**
     * 128: ProductUpdated
     */
    ImportAction[ImportAction["ProductUpdated"] = 128] = "ProductUpdated";
    /**
     * 256: ProductNoChange
     */
    ImportAction[ImportAction["ProductNoChange"] = 256] = "ProductNoChange";
    /**
     * 512: Obs
     */
    ImportAction[ImportAction["Obs"] = 512] = "Obs";
    /**
     * 1024: ObsERPDuplicate
     */
    ImportAction[ImportAction["ObsERPDuplicate"] = 1024] = "ObsERPDuplicate";
})(ImportAction = exports.ImportAction || (exports.ImportAction = {}));
/**
 * Freetext operator
 */
var FreeTextOperator;
(function (FreeTextOperator) {
    /**
     * 1: Contains
     */
    FreeTextOperator["Contains"] = "Contains";
    /**
     * 2: Starts with
     */
    FreeTextOperator["StartsWith"] = "StartsWith";
    /**
     * 3: Exact match
     */
    FreeTextOperator["ExactMatch"] = "ExactMatch";
})(FreeTextOperator = exports.FreeTextOperator || (exports.FreeTextOperator = {}));
/**
 * Response codes used by ErpSync services
 */
var ErpSyncResponseCode;
(function (ErpSyncResponseCode) {
    /**
     * 0: No error
     */
    ErpSyncResponseCode["NoError"] = "NoError";
    /**
     * 1: Could not perform operation because connector has connections
     */
    ErpSyncResponseCode["ErrorConnectorHasConnections"] = "ErrorConnectorHasConnections";
    /**
     * 2: Could not perform operation because the entity wasn't found
     */
    ErpSyncResponseCode["ErrorNotFound"] = "ErrorNotFound";
})(ErpSyncResponseCode = exports.ErpSyncResponseCode || (exports.ErpSyncResponseCode = {}));
/**
 * Status of a ticket/request
 * This Enum is used by:  ticket.status; ticket_status.status
 */
var TicketBaseStatus;
(function (TicketBaseStatus) {
    /**
     * 0: Unknown / uninitialized
     */
    TicketBaseStatus["Unknown"] = "Unknown";
    /**
     * 1: Request is currently active
     */
    TicketBaseStatus["Active"] = "Active";
    /**
     * 2: Request has been closed
     */
    TicketBaseStatus["Closed"] = "Closed";
    /**
     * 3: Request has been postponed
     */
    TicketBaseStatus["Postponed"] = "Postponed";
    /**
     * 4: Request has been deleted
     */
    TicketBaseStatus["Deleted"] = "Deleted";
    /**
     * 5: Request has been merged with another request
     */
    TicketBaseStatus["Merged"] = "Merged";
    /**
     * 1001: Should only be used for UI, when saved to DB it will be converted to Postponed
     */
    TicketBaseStatus["PostponedSpecific"] = "PostponedSpecific";
    /**
     * 1002: Should only be used for UI, when saved to DB it will be converted to Postponed
     */
    TicketBaseStatus["Postponed1Hour"] = "Postponed1Hour";
    /**
     * 1003: Should only be used for UI, when saved to DB it will be converted to Postponed
     */
    TicketBaseStatus["Postponed2Hours"] = "Postponed2Hours";
    /**
     * 1004: Should only be used for UI, when saved to DB it will be converted to Postponed
     */
    TicketBaseStatus["Postponed3Hours"] = "Postponed3Hours";
    /**
     * 1005: Should only be used for UI, when saved to DB it will be converted to Postponed
     */
    TicketBaseStatus["Postponed4Hours"] = "Postponed4Hours";
    /**
     * 1006: Should only be used for UI, when saved to DB it will be converted to Postponed
     */
    TicketBaseStatus["PostponedDay"] = "PostponedDay";
    /**
     * 1007: Should only be used for UI, when saved to DB it will be converted to Postponed
     */
    TicketBaseStatus["PostponedWeek"] = "PostponedWeek";
    /**
     * 1008: Should only be used for UI, when saved to DB it will be converted to Postponed
     */
    TicketBaseStatus["PostponedMonth"] = "PostponedMonth";
})(TicketBaseStatus = exports.TicketBaseStatus || (exports.TicketBaseStatus = {}));
/**
 * The avaliable category
 */
var ReportCategory;
(function (ReportCategory) {
    /**
     * 0: New/empty report
     */
    ReportCategory["None"] = "None";
    /**
     * 1: All reports
     */
    ReportCategory["All"] = "All";
    /**
     * 2: 2: Company reports
     */
    ReportCategory["Contact"] = "Contact";
    /**
     * 3: 3: Project reports
     */
    ReportCategory["Project"] = "Project";
    /**
     * 4: 4: Sale reports
     */
    ReportCategory["Sale"] = "Sale";
    /**
     * 5: 5: Appointment reports
     */
    ReportCategory["Appointment"] = "Appointment";
    /**
     * 6: 6: Selection reports
     */
    ReportCategory["Selection"] = "Selection";
    /**
     * 7: 7: Person reports
     */
    ReportCategory["Person"] = "Person";
    /**
     * 8: 8: Diary reports
     */
    ReportCategory["Diary"] = "Diary";
    /**
     * 9: Favorite reports for an associate
     */
    ReportCategory["Favorites"] = "Favorites";
})(ReportCategory = exports.ReportCategory || (exports.ReportCategory = {}));
/**
 *
 * This Enum is used by:  email_item.priority
 */
var EMailPriority;
(function (EMailPriority) {
    /**
     * 0:
     */
    EMailPriority["NoPriority"] = "NoPriority";
    /**
     * 1:
     */
    EMailPriority["Highest"] = "Highest";
    /**
     * 2:
     */
    EMailPriority["High"] = "High";
    /**
     * 3:
     */
    EMailPriority["Normal"] = "Normal";
    /**
     * 4:
     */
    EMailPriority["Low"] = "Low";
    /**
     * 5:
     */
    EMailPriority["Lowest"] = "Lowest";
})(EMailPriority = exports.EMailPriority || (exports.EMailPriority = {}));
/**
 *
 * This Enum is used by:  email_item.flags
 * This Enum consists of flag values that can be combined.
 */
var EMailFlags;
(function (EMailFlags) {
    /**
     * 0: 0: No flags set
     */
    EMailFlags[EMailFlags["None"] = 0] = "None";
    /**
     * 1: 1: Mail has been read
     */
    EMailFlags[EMailFlags["Seen"] = 1] = "Seen";
    /**
     * 2: 2: Mail has been deleted
     */
    EMailFlags[EMailFlags["Deleted"] = 2] = "Deleted";
    /**
     * 4: 4: Mail is recent
     */
    EMailFlags[EMailFlags["Recent"] = 4] = "Recent";
    /**
     * 8: 8: Mail is flagged in the GUI
     */
    EMailFlags[EMailFlags["Flagged"] = 8] = "Flagged";
    /**
     * 16: 16: Mail is an unsent draft
     */
    EMailFlags[EMailFlags["Draft"] = 16] = "Draft";
    /**
     * 32: 32: Mail has been replied to at least once
     */
    EMailFlags[EMailFlags["Answered"] = 32] = "Answered";
})(EMailFlags = exports.EMailFlags || (exports.EMailFlags = {}));
/**
 *
 */
var BatchTaskState;
(function (BatchTaskState) {
    /**
     * 0: Unknown state of the task.
     */
    BatchTaskState["Unknown"] = "Unknown";
    /**
     * 1: The task is new, but not assigned or run by any party.
     */
    BatchTaskState["New"] = "New";
    /**
     * 2: The task has been aquired by an instance that wants to execute the task, but has not been started.
     */
    BatchTaskState["Aquired"] = "Aquired";
    /**
     * 3: The task is executing.
     */
    BatchTaskState["Started"] = "Started";
    /**
     * 4: Executing the task has completed successfully.
     */
    BatchTaskState["Succeeded"] = "Succeeded";
    /**
     * 5: Executing the task has halted and the task failed.
     */
    BatchTaskState["Failed"] = "Failed";
    /**
     * 6: Executing the task has completed successfully, and related data will be cleaned up by the responsible code.
     */
    BatchTaskState["SucceededManualCleanup"] = "SucceededManualCleanup";
    /**
     * 99999: Special type.
     */
    BatchTaskState["All"] = "All";
})(BatchTaskState = exports.BatchTaskState || (exports.BatchTaskState = {}));
/**
 * Batch task cancel support
 */
var BatchTaskCancellationBehaviour;
(function (BatchTaskCancellationBehaviour) {
    /**
     * 0: The batch task can be cancelled
     */
    BatchTaskCancellationBehaviour["CanCancel"] = "CanCancel";
    /**
     * 1: The batch task can be cancelled, but the UI will display a warning (symbol SR_BATCH_<snakeCaseName>_CANCELLATION
     */
    BatchTaskCancellationBehaviour["CancelWithWarning"] = "CancelWithWarning";
    /**
     * 2: The batch task cannot be cancelled
     */
    BatchTaskCancellationBehaviour["CannotCancel"] = "CannotCancel";
})(BatchTaskCancellationBehaviour = exports.BatchTaskCancellationBehaviour || (exports.BatchTaskCancellationBehaviour = {}));
/**
 * Selection type - static/dynamic/combined. Works together with targetTable to define what kind of Selection this is.
 */
var SelectionType;
(function (SelectionType) {
    /**
     * 0: Static selection
     */
    SelectionType["Static"] = "Static";
    /**
     * 1: Dynamic selection
     */
    SelectionType["Dynamic"] = "Dynamic";
    /**
     * 2: Combined selection
     */
    SelectionType["Combined"] = "Combined";
})(SelectionType = exports.SelectionType || (exports.SelectionType = {}));
/**
 *
 */
var ReportLayout;
(function (ReportLayout) {
    /**
     * 0:
     */
    ReportLayout["Unknown"] = "Unknown";
    /**
     * 1:
     */
    ReportLayout["List"] = "List";
    /**
     * 2:
     */
    ReportLayout["Label"] = "Label";
    /**
     * 3:
     */
    ReportLayout["GroupList"] = "GroupList";
    /**
     * 4:
     */
    ReportLayout["CrossTable"] = "CrossTable";
    /**
     * 5:
     */
    ReportLayout["CalendarWeek5"] = "CalendarWeek5";
    /**
     * 6:
     */
    ReportLayout["CalendarWeek7"] = "CalendarWeek7";
    /**
     * 7:
     */
    ReportLayout["CalendarMonth"] = "CalendarMonth";
    /**
     * 8:
     */
    ReportLayout["Text"] = "Text";
})(ReportLayout = exports.ReportLayout || (exports.ReportLayout = {}));
/**
 * Describes the orientation of the paper when printing a report. The report layout must be "Label"
 */
var ReportPaperOrientation;
(function (ReportPaperOrientation) {
    /**
     * 0:
     */
    ReportPaperOrientation["None"] = "None";
    /**
     * 1: The taller orientation
     */
    ReportPaperOrientation["Portrait"] = "Portrait";
    /**
     * 2: The wider orientation
     */
    ReportPaperOrientation["Landscape"] = "Landscape";
})(ReportPaperOrientation = exports.ReportPaperOrientation || (exports.ReportPaperOrientation = {}));
/**
 * Locking semantics requested/applied to a document
 */
var DocumentLockSemantics;
(function (DocumentLockSemantics) {
    /**
     * 0: Neither locking nor versioning is requested for the document
     */
    DocumentLockSemantics["None"] = "None";
    /**
     * 1: Locking, but not versioning, is requested for the document
     */
    DocumentLockSemantics["Locking"] = "Locking";
    /**
     * 2: Versioning is requested for the document (locking is implied)
     */
    DocumentLockSemantics["Versioning"] = "Versioning";
})(DocumentLockSemantics = exports.DocumentLockSemantics || (exports.DocumentLockSemantics = {}));
/**
 *
 */
var GeneratorEncoding;
(function (GeneratorEncoding) {
    /**
     * 0: Plain text document.
     */
    GeneratorEncoding["Text"] = "Text";
    /**
     * 1: Html encoded document, it is not strictly parsed.
     */
    GeneratorEncoding["Html"] = "Html";
    /**
     * 2: XML Document, it is not strictly parsed
     */
    GeneratorEncoding["Xml"] = "Xml";
    /**
     * 3: Microsoft word document.
     */
    GeneratorEncoding["MsWord"] = "MsWord";
    /**
     * 4: Microsoft Excel document.
     */
    GeneratorEncoding["MsExcel"] = "MsExcel";
    /**
     * 5: Microsoft Powerpoint document
     */
    GeneratorEncoding["MsPowerpoint"] = "MsPowerpoint";
    /**
     * 6: Microsoft office documents zipped (Office 2007)
     */
    GeneratorEncoding["MsOffice2007"] = "MsOffice2007";
    /**
     * 7: Microsoft office xml documents (content of zipped x files)
     */
    GeneratorEncoding["MsOffice2007Xml"] = "MsOffice2007Xml";
    /**
     * 8: The tags result are url-encoded (ansi), the source itself is treated as plain text.
     */
    GeneratorEncoding["Url"] = "Url";
    /**
     * 9: The tags result are url-encoded (unicode), the source itself is treated as plain text.
     */
    GeneratorEncoding["UrlUnicode"] = "UrlUnicode";
    /**
     * 10: Adobe pdf format
     */
    GeneratorEncoding["Pdf"] = "Pdf";
    /**
     * 11: RFC822 Mime-content. Handles the actual mime part, but leaves a normal Text-generator to handle the actual content embedded within the MIME-layers.
     */
    GeneratorEncoding["Mime"] = "Mime";
    /**
     * 12: OpenOffice/LibreOffice documents (zipped)
     */
    GeneratorEncoding["OpenDocument"] = "OpenDocument";
    /**
     * 13: OpenOffice/LibreOffice documents (contents of zipped files)
     */
    GeneratorEncoding["OpenDocumentXml"] = "OpenDocumentXml";
})(GeneratorEncoding = exports.GeneratorEncoding || (exports.GeneratorEncoding = {}));
/**
 * Dashboard layout
 */
var DashboardLayout;
(function (DashboardLayout) {
    /**
     * 0: Unknown layout
     */
    DashboardLayout["None"] = "None";
    /**
     * 1: One tile.
     */
    DashboardLayout["One"] = "One";
    /**
     * 2: Two vertical split.
     */
    DashboardLayout["TwoVerticalSplit"] = "TwoVerticalSplit";
    /**
     * 3: Three E split.
     */
    DashboardLayout["ThreeESplit"] = "ThreeESplit";
    /**
     * 4: Two horizontal split.
     */
    DashboardLayout["TwoHorizontalSplit"] = "TwoHorizontalSplit";
    /**
     * 5: Three T split.
     */
    DashboardLayout["ThreeTSplit"] = "ThreeTSplit";
    /**
     * 7: Four tiles.
     */
    DashboardLayout["Four"] = "Four";
})(DashboardLayout = exports.DashboardLayout || (exports.DashboardLayout = {}));
/**
 * Dashboard tile type
 */
var DashboardTileType;
(function (DashboardTileType) {
    /**
     * 0: Unknown layout
     */
    DashboardTileType["None"] = "None";
    /**
     * 1: Chart tile
     */
    DashboardTileType["Chart"] = "Chart";
    /**
     * 2: Web tile
     */
    DashboardTileType["Web"] = "Web";
    /**
     * 3: List tile
     */
    DashboardTileType["List"] = "List";
    /**
     * 4: Number tile
     */
    DashboardTileType["Bignum"] = "Bignum";
})(DashboardTileType = exports.DashboardTileType || (exports.DashboardTileType = {}));
/**
 * Dashboard tile entity type
 */
var DashboardTileEntityType;
(function (DashboardTileEntityType) {
    /**
     * 0: Unknown entity type
     */
    DashboardTileEntityType["None"] = "None";
    /**
     * 1:
     */
    DashboardTileEntityType["Company"] = "Company";
    /**
     * 2:
     */
    DashboardTileEntityType["Project"] = "Project";
    /**
     * 3:
     */
    DashboardTileEntityType["Sale"] = "Sale";
    /**
     * 4:
     */
    DashboardTileEntityType["Product"] = "Product";
    /**
     * 5:
     */
    DashboardTileEntityType["Activity"] = "Activity";
    /**
     * 6:
     */
    DashboardTileEntityType["Document"] = "Document";
    /**
     * 7:
     */
    DashboardTileEntityType["WebPanel"] = "WebPanel";
    /**
     * 8:
     */
    DashboardTileEntityType["Followup"] = "Followup";
})(DashboardTileEntityType = exports.DashboardTileEntityType || (exports.DashboardTileEntityType = {}));
/**
 * Dashboard tile option type
 */
var DashboardTileOptionType;
(function (DashboardTileOptionType) {
    /**
     * 0: Unknown type
     */
    DashboardTileOptionType["None"] = "None";
    /**
     * 1: String
     */
    DashboardTileOptionType["String"] = "String";
    /**
     * 2: Integer
     */
    DashboardTileOptionType["Integer"] = "Integer";
    /**
     * 3: Boolean
     */
    DashboardTileOptionType["Boolean"] = "Boolean";
    /**
     * 4: List
     */
    DashboardTileOptionType["List"] = "List";
})(DashboardTileOptionType = exports.DashboardTileOptionType || (exports.DashboardTileOptionType = {}));
/**
 * Dashboard tile chart type (V2)
 * This Enum is used by:  dashboard_tile_definition.tile_type
 */
var DashTileType;
(function (DashTileType) {
    /**
     * 0: None
     */
    DashTileType["None"] = "None";
    /**
     * 1: Pie
     */
    DashTileType["Pie"] = "Pie";
    /**
     * 2: List
     */
    DashTileType["List"] = "List";
    /**
     * 3: BigNum
     */
    DashTileType["BigNum"] = "BigNum";
    /**
     * 4: Bar
     */
    DashTileType["Bar"] = "Bar";
    /**
     * 5: Line
     */
    DashTileType["Line"] = "Line";
    /**
     * 6: Area
     */
    DashTileType["Area"] = "Area";
    /**
     * 7: Column
     */
    DashTileType["Column"] = "Column";
    /**
     * 8: CombinedBarLine
     */
    DashTileType["CombinedBarLine"] = "CombinedBarLine";
    /**
     * 9: CombinedColumnLine
     */
    DashTileType["CombinedColumnLine"] = "CombinedColumnLine";
    /**
     * 10: WebPanel
     */
    DashTileType["WebPanel"] = "WebPanel";
    /**
     * 11: HTML
     */
    DashTileType["HTML"] = "HTML";
    /**
     * 12: Gauge
     */
    DashTileType["Gauge"] = "Gauge";
})(DashTileType = exports.DashTileType || (exports.DashTileType = {}));
/**
 * Dashboard tile currency mode
 * This Enum is used by:  dashboard_tile_definition.currency_mode
 */
var DashTileCurrencyMode;
(function (DashTileCurrencyMode) {
    /**
     * 0: None
     */
    DashTileCurrencyMode["None"] = "None";
    /**
     * 1: Base
     */
    DashTileCurrencyMode["Base"] = "Base";
    /**
     * 2: Own
     */
    DashTileCurrencyMode["Own"] = "Own";
    /**
     * 3: Specified
     */
    DashTileCurrencyMode["Specified"] = "Specified";
})(DashTileCurrencyMode = exports.DashTileCurrencyMode || (exports.DashTileCurrencyMode = {}));
/**
 * Dashboard tile measure
 * This Enum is used by:  dashboard_tile_definition.measure
 */
var DashTileMeasure;
(function (DashTileMeasure) {
    /**
     * 0: None
     */
    DashTileMeasure["None"] = "None";
    /**
     * 1: CountAll
     */
    DashTileMeasure["CountAll"] = "CountAll";
    /**
     * 2: Sum
     */
    DashTileMeasure["Sum"] = "Sum";
    /**
     * 3: Average
     */
    DashTileMeasure["Average"] = "Average";
    /**
     * 4: Max
     */
    DashTileMeasure["Max"] = "Max";
    /**
     * 5: Min
     */
    DashTileMeasure["Min"] = "Min";
    /**
     * 6: Count
     */
    DashTileMeasure["Count"] = "Count";
})(DashTileMeasure = exports.DashTileMeasure || (exports.DashTileMeasure = {}));
/**
 * Dashboard tile entity type (V2)
 * This Enum is used by:  dashboard_tile_definition.entity_type
 */
var DashTileEntityType;
(function (DashTileEntityType) {
    /**
     * 0: None
     */
    DashTileEntityType["None"] = "None";
    /**
     * 1: Contact
     */
    DashTileEntityType["Contact"] = "Contact";
    /**
     * 2: Sale
     */
    DashTileEntityType["Sale"] = "Sale";
    /**
     * 3: Project
     */
    DashTileEntityType["Project"] = "Project";
    /**
     * 4: Appointment
     */
    DashTileEntityType["Appointment"] = "Appointment";
    /**
     * 5: Person
     */
    DashTileEntityType["Person"] = "Person";
})(DashTileEntityType = exports.DashTileEntityType || (exports.DashTileEntityType = {}));
/**
 * Defines where a DashTileDefinition can be used
 * This Enum is used by:  dashboard_tile_definition.usage
 * This Enum consists of flag values that can be combined.
 */
var DashTileUsage;
(function (DashTileUsage) {
    /**
     * 0: Not visible anywhere
     */
    DashTileUsage[DashTileUsage["None"] = 0] = "None";
    /**
     * 1: Visible in the tile library on the dashboard page
     */
    DashTileUsage[DashTileUsage["Dashboard"] = 1] = "Dashboard";
    /**
     * 2: Visible in the tile library on the selection page
     */
    DashTileUsage[DashTileUsage["Selection"] = 2] = "Selection";
})(DashTileUsage = exports.DashTileUsage || (exports.DashTileUsage = {}));
/**
 * Target assignement levels
 * This Enum is used by:  target_dimension.assignment_level
 * This Enum consists of flag values that can be combined.
 */
var TargetAssignementLevel;
(function (TargetAssignementLevel) {
    /**
     * 0: No level
     */
    TargetAssignementLevel[TargetAssignementLevel["None"] = 0] = "None";
    /**
     * 1: Company
     */
    TargetAssignementLevel[TargetAssignementLevel["Company"] = 1] = "Company";
    /**
     * 2: Group
     */
    TargetAssignementLevel[TargetAssignementLevel["Group"] = 2] = "Group";
    /**
     * 4: Associate
     */
    TargetAssignementLevel[TargetAssignementLevel["Associate"] = 4] = "Associate";
})(TargetAssignementLevel = exports.TargetAssignementLevel || (exports.TargetAssignementLevel = {}));
/**
 * Target entity type
 * This Enum is used by:  target_group.entity_type; target_revision_history.entity_type; target_dimension.entity_type
 */
var TargetEntityType;
(function (TargetEntityType) {
    /**
     * 0: None
     */
    TargetEntityType["None"] = "None";
    /**
     * 1: Sale
     */
    TargetEntityType["Sale"] = "Sale";
})(TargetEntityType = exports.TargetEntityType || (exports.TargetEntityType = {}));
/**
 * Target measurement unit
 * This Enum is used by:  target_dimension.measurement_unit
 */
var TargetMeasurementUnit;
(function (TargetMeasurementUnit) {
    /**
     * 0: None
     */
    TargetMeasurementUnit["None"] = "None";
    /**
     * 1: Amount
     */
    TargetMeasurementUnit["Amount"] = "Amount";
    /**
     * 2: Count
     */
    TargetMeasurementUnit["Count"] = "Count";
    /**
     * 3: Profit
     */
    TargetMeasurementUnit["Profit"] = "Profit";
})(TargetMeasurementUnit = exports.TargetMeasurementUnit || (exports.TargetMeasurementUnit = {}));
/**
 * Target period type
 * This Enum is used by:  target_group.period_type
 */
var TargetPeriodType;
(function (TargetPeriodType) {
    /**
     * 0: None
     */
    TargetPeriodType["None"] = "None";
    /**
     * 1: Year
     */
    TargetPeriodType["Year"] = "Year";
    /**
     * 2: HalfYear
     */
    TargetPeriodType["HalfYear"] = "HalfYear";
    /**
     * 3: Quarter
     */
    TargetPeriodType["Quarter"] = "Quarter";
    /**
     * 4: Month
     */
    TargetPeriodType["Month"] = "Month";
})(TargetPeriodType = exports.TargetPeriodType || (exports.TargetPeriodType = {}));
/**
 * Target level
 */
var TargetLevel;
(function (TargetLevel) {
    /**
     * 0: None
     */
    TargetLevel["None"] = "None";
    /**
     * 1: Global
     */
    TargetLevel["Global"] = "Global";
    /**
     * 2: Company
     */
    TargetLevel["Company"] = "Company";
    /**
     * 3: UserGroup
     */
    TargetLevel["UserGroup"] = "UserGroup";
    /**
     * 4: Associate
     */
    TargetLevel["Associate"] = "Associate";
})(TargetLevel = exports.TargetLevel || (exports.TargetLevel = {}));
/**
 * Log events
 * This Enum is used by:  target_revision.log_event
 */
var LogEvent;
(function (LogEvent) {
    /**
     * 0: None
     */
    LogEvent["None"] = "None";
    /**
     * 1: Create
     */
    LogEvent["Create"] = "Create";
    /**
     * 2: Edit
     */
    LogEvent["Edit"] = "Edit";
    /**
     * 3: Delete
     */
    LogEvent["Delete"] = "Delete";
    /**
     * 4: Lock
     */
    LogEvent["Lock"] = "Lock";
    /**
     * 5: Unlock
     */
    LogEvent["Unlock"] = "Unlock";
})(LogEvent = exports.LogEvent || (exports.LogEvent = {}));
/**
 * Workflow definition status
 * This Enum is used by:  workflow.status
 */
var WorkflowDefinitionStatus;
(function (WorkflowDefinitionStatus) {
    /**
     * 0: None
     */
    WorkflowDefinitionStatus["None"] = "None";
    /**
     * 1: Stopped
     */
    WorkflowDefinitionStatus["Stopped"] = "Stopped";
    /**
     * 2: Paused
     */
    WorkflowDefinitionStatus["Paused"] = "Paused";
    /**
     * 3: Running
     */
    WorkflowDefinitionStatus["Running"] = "Running";
})(WorkflowDefinitionStatus = exports.WorkflowDefinitionStatus || (exports.WorkflowDefinitionStatus = {}));
/**
 * Email/Mailing From field address algorithm
 * This Enum is used by:  email_flow.from_type
 */
var EmailFromType;
(function (EmailFromType) {
    /**
     * 0: FromOnlySpecified
     */
    EmailFromType["FromOnlySpecified"] = "FromOnlySpecified";
    /**
     * 1: FromSalesContact
     */
    EmailFromType["FromSalesContact"] = "FromSalesContact";
    /**
     * 2: FromSupportContact
     */
    EmailFromType["FromSupportContact"] = "FromSupportContact";
})(EmailFromType = exports.EmailFromType || (exports.EmailFromType = {}));
/**
 * Email/Mailing ReplyTo field address algorithm
 * This Enum is used by:  email_flow.reply_to_type
 */
var EmailReplyToType;
(function (EmailReplyToType) {
    /**
     * 0: ReplyToOnlySpecified
     */
    EmailReplyToType["ReplyToOnlySpecified"] = "ReplyToOnlySpecified";
    /**
     * 1: ReplyToSalesContact
     */
    EmailReplyToType["ReplyToSalesContact"] = "ReplyToSalesContact";
    /**
     * 2: ReplyToSupportContact
     */
    EmailReplyToType["ReplyToSupportContact"] = "ReplyToSupportContact";
    /**
     * 3: ReplyToEmpty (skip reply-to header, email agents will use from instead)
     */
    EmailReplyToType["ReplyToEmpty"] = "ReplyToEmpty";
})(EmailReplyToType = exports.EmailReplyToType || (exports.EmailReplyToType = {}));
/**
 * Workflow waiting step wait algorithm
 */
var WorkflowTimeWaitAlgorithm;
(function (WorkflowTimeWaitAlgorithm) {
    /**
     * 0: None
     */
    WorkflowTimeWaitAlgorithm["None"] = "None";
    /**
     * 1: Number of intervals (min, hour, workdays, days, weeks...)
     */
    WorkflowTimeWaitAlgorithm["NumIntervals"] = "NumIntervals";
    /**
     * 2: Until specified datetime
     */
    WorkflowTimeWaitAlgorithm["UntilSpecified"] = "UntilSpecified";
    /**
     * 3: Until date on person/company (a persons birthdate etc)
     */
    WorkflowTimeWaitAlgorithm["UntilDateField"] = "UntilDateField";
})(WorkflowTimeWaitAlgorithm = exports.WorkflowTimeWaitAlgorithm || (exports.WorkflowTimeWaitAlgorithm = {}));
/**
 * Workflow waiting time interval type
 */
var WorkflowTimeWaitIntervalType;
(function (WorkflowTimeWaitIntervalType) {
    /**
     * 0: None
     */
    WorkflowTimeWaitIntervalType["None"] = "None";
    /**
     * 1: Seconds
     */
    WorkflowTimeWaitIntervalType["Seconds"] = "Seconds";
    /**
     * 2: Minutes
     */
    WorkflowTimeWaitIntervalType["Minutes"] = "Minutes";
    /**
     * 3: Hours
     */
    WorkflowTimeWaitIntervalType["Hours"] = "Hours";
    /**
     * 4: Working days
     */
    WorkflowTimeWaitIntervalType["WorkingDays"] = "WorkingDays";
    /**
     * 5: Days
     */
    WorkflowTimeWaitIntervalType["Days"] = "Days";
    /**
     * 6: Weeks
     */
    WorkflowTimeWaitIntervalType["Weeks"] = "Weeks";
})(WorkflowTimeWaitIntervalType = exports.WorkflowTimeWaitIntervalType || (exports.WorkflowTimeWaitIntervalType = {}));
/**
 * Workflow Goal Type
 * This Enum is used by:  workflow_goal.goal_type
 */
var WorkflowGoalType;
(function (WorkflowGoalType) {
    /**
     * 0: None
     */
    WorkflowGoalType["None"] = "None";
    /**
     * 1: ContactUpdated
     */
    WorkflowGoalType["ContactUpdated"] = "ContactUpdated";
    /**
     * 2: SaleCreatedOnContact
     */
    WorkflowGoalType["SaleCreatedOnContact"] = "SaleCreatedOnContact";
    /**
     * 3: SaleCreatedOnCompany
     */
    WorkflowGoalType["SaleCreatedOnCompany"] = "SaleCreatedOnCompany";
    /**
     * 4: AppointmentCreated
     */
    WorkflowGoalType["AppointmentCreated"] = "AppointmentCreated";
    /**
     * 5: AddedToProject
     */
    WorkflowGoalType["AddedToProject"] = "AddedToProject";
    /**
     * 6: AddedToSelection
     */
    WorkflowGoalType["AddedToSelection"] = "AddedToSelection";
    /**
     * 7: FormSubmitted
     */
    WorkflowGoalType["FormSubmitted"] = "FormSubmitted";
    /**
     * 8: HadChat
     */
    WorkflowGoalType["HadChat"] = "HadChat";
    /**
     * 9: LinkClicked
     */
    WorkflowGoalType["LinkClicked"] = "LinkClicked";
    /**
     * 10: RequestCreated
     */
    WorkflowGoalType["RequestCreated"] = "RequestCreated";
})(WorkflowGoalType = exports.WorkflowGoalType || (exports.WorkflowGoalType = {}));
/**
 * Workflow Step Type
 * This Enum is used by:  workflow_step.step_type
 */
var WorkflowStepType;
(function (WorkflowStepType) {
    /**
     * 0: None
     */
    WorkflowStepType["None"] = "None";
    /**
     * 1: SendEmail
     */
    WorkflowStepType["SendEmail"] = "SendEmail";
    /**
     * 2: SendSMS
     */
    WorkflowStepType["SendSMS"] = "SendSMS";
    /**
     * 3: WaitForTime
     */
    WorkflowStepType["WaitForTime"] = "WaitForTime";
    /**
     * 4: WaitForAction
     */
    WorkflowStepType["WaitForAction"] = "WaitForAction";
    /**
     * 5: Split
     */
    WorkflowStepType["Split"] = "Split";
    /**
     * 6: UpdateContact
     */
    WorkflowStepType["UpdateContact"] = "UpdateContact";
    /**
     * 7: AddToList
     */
    WorkflowStepType["AddToList"] = "AddToList";
    /**
     * 8: RemoveFromList
     */
    WorkflowStepType["RemoveFromList"] = "RemoveFromList";
    /**
     * 9: CreateRequest
     */
    WorkflowStepType["CreateRequest"] = "CreateRequest";
    /**
     * 10: CreateFollowUp
     */
    WorkflowStepType["CreateFollowUp"] = "CreateFollowUp";
    /**
     * 11: CreateSale
     */
    WorkflowStepType["CreateSale"] = "CreateSale";
    /**
     * 12: NotifyByEmail
     */
    WorkflowStepType["NotifyByEmail"] = "NotifyByEmail";
    /**
     * 13: NotifyBySMS
     */
    WorkflowStepType["NotifyBySMS"] = "NotifyBySMS";
    /**
     * 14: RunScript
     */
    WorkflowStepType["RunScript"] = "RunScript";
})(WorkflowStepType = exports.WorkflowStepType || (exports.WorkflowStepType = {}));
/**
 * Workflow Trigger Type
 * This Enum is used by:  workflow_trigger.trigger_type
 */
var WorkflowTriggerType;
(function (WorkflowTriggerType) {
    /**
     * 0: None
     */
    WorkflowTriggerType["None"] = "None";
    /**
     * 1: ContactCreated
     */
    WorkflowTriggerType["SendEmail"] = "SendEmail";
    /**
     * 2: ContactUpdated
     */
    WorkflowTriggerType["SendSMS"] = "SendSMS";
    /**
     * 3: AddedToProject
     */
    WorkflowTriggerType["WaitForTime"] = "WaitForTime";
    /**
     * 4: CreatedRequest
     */
    WorkflowTriggerType["WaitForAction"] = "WaitForAction";
    /**
     * 5: LinkClicked
     */
    WorkflowTriggerType["Split"] = "Split";
    /**
     * 6: AddedToSelection
     */
    WorkflowTriggerType["UpdateContact"] = "UpdateContact";
    /**
     * 7: FormSubmitted
     */
    WorkflowTriggerType["AddToList"] = "AddToList";
    /**
     * 8: AddedMessage
     */
    WorkflowTriggerType["RemoveFromList"] = "RemoveFromList";
    /**
     * 9: StartedChat
     */
    WorkflowTriggerType["CreateRequest"] = "CreateRequest";
    /**
     * 10: OrderPlaced
     */
    WorkflowTriggerType["CreateFollowUp"] = "CreateFollowUp";
    /**
     * 11: SaleCreated
     */
    WorkflowTriggerType["CreateSale"] = "CreateSale";
    /**
     * 12: SaleSold
     */
    WorkflowTriggerType["NotifyByEmail"] = "NotifyByEmail";
    /**
     * 13: SaleLost
     */
    WorkflowTriggerType["NotifyBySMS"] = "NotifyBySMS";
})(WorkflowTriggerType = exports.WorkflowTriggerType || (exports.WorkflowTriggerType = {}));
/**
 * Completed status enum common to appointments, documents and sales
 */
var ActivityStatus;
(function (ActivityStatus) {
    /**
     * 0: 0: Unknown - used when initializing
     */
    ActivityStatus["Unknown"] = "Unknown";
    /**
     * 1: 1: Appointment has not been started
     */
    ActivityStatus["NotStarted"] = "NotStarted";
    /**
     * 2: 2: Appointment has been started, but not completed
     */
    ActivityStatus["Started"] = "Started";
    /**
     * 3: 3: Appointment is completed
     */
    ActivityStatus["Completed"] = "Completed";
})(ActivityStatus = exports.ActivityStatus || (exports.ActivityStatus = {}));
/**
 * Status if this appointment represents an invitation
 */
var InvitationStatus;
(function (InvitationStatus) {
    /**
     * 0: Unknown - used when initializing
     */
    InvitationStatus["Unknown"] = "Unknown";
    /**
     * 1: 1: Default value when the appointment is not a booking child
     */
    InvitationStatus["None"] = "None";
    /**
     * 2: 2: The invitation has been accepted
     */
    InvitationStatus["Accepted"] = "Accepted";
    /**
     * 4: 4: Hidden
     */
    InvitationStatus["Hidden"] = "Hidden";
    /**
     * 5: 5: An invitation to a meeting not observed by the attending party
     */
    InvitationStatus["Invitation"] = "Invitation";
    /**
     * 6: 6: The meeting has been moved
     */
    InvitationStatus["Moved"] = "Moved";
    /**
     * 7: 7: An invitation to a meeting observed by the attending party. This can also be viewed upon as a tentative response to participate in the meeting.
     */
    InvitationStatus["Seen"] = "Seen";
    /**
     * 8: 8: The meeting has been moved, and this is observed by the attending party
     */
    InvitationStatus["MovedSeen"] = "MovedSeen";
    /**
     * 9: 9: The invitation has been declined/rejected
     */
    InvitationStatus["Declined"] = "Declined";
    /**
     * 10: 10: The meeting has been cancelled.
     */
    InvitationStatus["Cancelled"] = "Cancelled";
})(InvitationStatus = exports.InvitationStatus || (exports.InvitationStatus = {}));
/**
 * The type of booking the appointment represents
 */
var BookingType;
(function (BookingType) {
    /**
     * 0: 0: Unknown - used when initializing
     */
    BookingType["Unknown"] = "Unknown";
    /**
     * 1: 1: Single appointment records
     */
    BookingType["None"] = "None";
    /**
     * 2: 2: Owner of a booking
     */
    BookingType["Owner"] = "Owner";
    /**
     * 3: 3: Participant of a booking
     */
    BookingType["Participant"] = "Participant";
})(BookingType = exports.BookingType || (exports.BookingType = {}));
/**
 * The type of the locale text strings
 */
var LocalizedTextType;
(function (LocalizedTextType) {
    /**
     * 0: Unknown - used when initializing
     */
    LocalizedTextType["Unknown"] = "Unknown";
    /**
     * 1: 1 = fieldlabels
     */
    LocalizedTextType["Label"] = "Label";
    /**
     * 2:
     */
    LocalizedTextType["Table"] = "Table";
    /**
     * 3:
     */
    LocalizedTextType["Column"] = "Column";
    /**
     * 4: 4 - import system field names
     */
    LocalizedTextType["ImportField"] = "ImportField";
    /**
     * 5: 5 - import system table names
     */
    LocalizedTextType["ImportObject"] = "ImportObject";
    /**
     * 6: 6 - import system table groups
     */
    LocalizedTextType["ImportGUICategory"] = "ImportGUICategory";
    /**
     * 7: 7  (languageid > 0)
     */
    LocalizedTextType["StartupHints"] = "StartupHints";
    /**
     * 11: 11 (languageid > 0)
     */
    LocalizedTextType["FunctionRightLabel"] = "FunctionRightLabel";
    /**
     * 12: 12 (languageid > 0)
     */
    LocalizedTextType["FunctionRightDesc"] = "FunctionRightDesc";
    /**
     * 16: languageid = 0
     */
    LocalizedTextType["StatusMonitorName"] = "StatusMonitorName";
    /**
     * 19: 19  (languageid = 0)
     */
    LocalizedTextType["UdefContactLabel"] = "UdefContactLabel";
    /**
     * 20: 20  (languageid = 0)
     */
    LocalizedTextType["UdefPersonLabel"] = "UdefPersonLabel";
    /**
     * 21: 21  (languageid = 0)
     */
    LocalizedTextType["UdefProjectLabel"] = "UdefProjectLabel";
    /**
     * 22: 22 (languageid = 0)
     */
    LocalizedTextType["UdefSaleLabel"] = "UdefSaleLabel";
    /**
     * 23: 23 (languageid = 0)
     */
    LocalizedTextType["UdefAppointmentLabel"] = "UdefAppointmentLabel";
    /**
     * 24: 24 (languageid = 0)
     */
    LocalizedTextType["UdefDocumentLabel"] = "UdefDocumentLabel";
    /**
     * 41: 41 - push notification tex
     */
    LocalizedTextType["PushNotificationText"] = "PushNotificationText";
})(LocalizedTextType = exports.LocalizedTextType || (exports.LocalizedTextType = {}));
/**
 * Describes what type of activity/action there has been on a contact
 * This Enum consists of flag values that can be combined.
 */
var ContactAction;
(function (ContactAction) {
    /**
     * 0: Unknown/undecided type
     */
    ContactAction[ContactAction["Unknown"] = 0] = "Unknown";
    /**
     * 1: The contact was created
     */
    ContactAction[ContactAction["Created"] = 1] = "Created";
    /**
     * 2: The contact was updated
     */
    ContactAction[ContactAction["Updated"] = 2] = "Updated";
    /**
     * 4: A new activity was created on the contact
     */
    ContactAction[ContactAction["NewActivity"] = 4] = "NewActivity";
    /**
     * 8: An activity belonging to the contact was completed
     */
    ContactAction[ContactAction["ActivityCompleted"] = 8] = "ActivityCompleted";
    /**
     * 16: A person was added to the contact
     */
    ContactAction[ContactAction["PersonAdded"] = 16] = "PersonAdded";
    /**
     * 32: A person belonging to the contact was updated
     */
    ContactAction[ContactAction["PersonUpdated"] = 32] = "PersonUpdated";
    /**
     * 64: A document was added to the contact
     */
    ContactAction[ContactAction["DocumentAdded"] = 64] = "DocumentAdded";
    /**
     * 127: Enumeration generated from the wsdl doesn't handle the [Flags] attribute (bit enumeration)
     */
    ContactAction[ContactAction["All"] = 127] = "All";
    /**
     * 128: Undefined and generated value 128
     */
    ContactAction[ContactAction["UndefinedValue128"] = 128] = "UndefinedValue128";
})(ContactAction = exports.ContactAction || (exports.ContactAction = {}));
/**
 * Enum listing the possible checkout states of a document, as seen from outside the document plugin
 */
var CheckoutState;
(function (CheckoutState) {
    /**
     * 0: Document is not checked out
     */
    CheckoutState["NotCheckedOut"] = "NotCheckedOut";
    /**
     * 1: Document is checked out, to the user making the query
     */
    CheckoutState["CheckedOutOwn"] = "CheckedOutOwn";
    /**
     * 2: Document is checked out, to a user different from the one making the query
     */
    CheckoutState["CheckedOutOther"] = "CheckedOutOther";
    /**
     * 3: Locking is not supported or selected for this document. The document is always 'writeable' in the sense of not being protected by any locks. The document may still be read-only due to Sentry constraints.
     */
    CheckoutState["LockingNotSupported"] = "LockingNotSupported";
})(CheckoutState = exports.CheckoutState || (exports.CheckoutState = {}));
/**
 * Enumeration that exposes what search types that are supported.
 */
var StringSearchType;
(function (StringSearchType) {
    /**
     * 0: The Exact element searches for an exact string in your searchable content.
     */
    StringSearchType["Exact"] = "Exact";
    /**
     * 1: The BeginsWith element searches for a string at the start of your searchable content.
     */
    StringSearchType["BeginsWith"] = "BeginsWith";
    /**
     * 2: The EndsWith element searches for a string at the end of your searchable content.
     */
    StringSearchType["EndsWith"] = "EndsWith";
    /**
     * 3: The Exact element searches for a string in searchable content.
     */
    StringSearchType["Contains"] = "Contains";
})(StringSearchType = exports.StringSearchType || (exports.StringSearchType = {}));
/**
 * Type of responce
 */
var ReturnType;
(function (ReturnType) {
    /**
     * 0: here is no return value to be parsed
     */
    ReturnType["None"] = "None";
    /**
     * 1: The return value is a string, to be shown to the user as a message by client
     */
    ReturnType["Message"] = "Message";
    /**
     * 2: The return value is an soprotocol-compliant navigation string, to be parsed according to the rules for soprotocol strings. Client should navigate according to the given protocol.
     */
    ReturnType["SoProtocol"] = "SoProtocol";
    /**
     * 3: The return value is the name of a custom GUI. The GetCustomGui method on the document plugin will be invoked, and the resulting GUI rendered by the client.
     */
    ReturnType["CustomGui"] = "CustomGui";
    /**
     * 4: The return value is intended for custom processing; this implies that the document plugin has installed some component on the intended client that will intercept and handle this return value.  Note that this requires advanced knowledge of the client and its construction and navigation. Also note that this will make the functionality client-specific, so that it may not be available or work as intended on clients not specifically supported or known.
     */
    ReturnType["Other"] = "Other";
    /**
     * 5: The return value is a URL that should be opened in a new window by the client.
     */
    ReturnType["URL"] = "URL";
})(ReturnType = exports.ReturnType || (exports.ReturnType = {}));
/**
 * Table right is a combination of bits representing permissions on a row.
 * This Enum consists of flag values that can be combined.
 */
var ETableRight;
(function (ETableRight) {
    /**
     * 0: The row should be hidden from the user.
     */
    ETableRight[ETableRight["None"] = 0] = "None";
    /**
     * 1: The user is allowed to see the row.
     */
    ETableRight[ETableRight["Select"] = 1] = "Select";
    /**
     * 2: The user is allowed to modify the values in this row.
     */
    ETableRight[ETableRight["Update"] = 2] = "Update";
    /**
     * 3: Select or Update
     */
    ETableRight[ETableRight["UR"] = 3] = "UR";
    /**
     * 4: The user is allowed to add new rows to the table.
     */
    ETableRight[ETableRight["Insert"] = 4] = "Insert";
    /**
     * 5: Select and Insert (Anonymous)
     */
    ETableRight[ETableRight["RI"] = 5] = "RI";
    /**
     * 7: Select, Update, Insert
     */
    ETableRight[ETableRight["URI"] = 7] = "URI";
    /**
     * 8: The user is allowed to delete this row.
     */
    ETableRight[ETableRight["Delete"] = 8] = "Delete";
    /**
     * 11: Select, Update, Delete
     */
    ETableRight[ETableRight["UDR"] = 11] = "UDR";
    /**
     * 15: Select, Update, Insert, Delete - no restrictions
     */
    ETableRight[ETableRight["FULL"] = 15] = "FULL";
    /**
     * 16: A flag used to indicate that some fields may be hidden.
     */
    ETableRight[ETableRight["Filtering"] = 16] = "Filtering";
    /**
     * 17: Select or Filter
     */
    ETableRight[ETableRight["RF"] = 17] = "RF";
    /**
     * 20: Filtering and Insert (Anonymous)
     */
    ETableRight[ETableRight["FI"] = 20] = "FI";
    /**
     * 32: A hint flag used to indicate that some fields may not be updateable, even though the user has update access to the row.
     */
    ETableRight[ETableRight["RestrictedUpdate"] = 32] = "RestrictedUpdate";
    /**
     * 64: Unused value only present for serializatrion purposes
     */
    ETableRight[ETableRight["Unused1"] = 64] = "Unused1";
    /**
     * 128: Magic value to indicate not
     */
    ETableRight[ETableRight["Uninitialized"] = 128] = "Uninitialized";
    /**
     * 1: Select only
     */
    ETableRight[ETableRight["R"] = 1] = "R";
    /**
     * 16: just Filtering
     */
    ETableRight[ETableRight["F"] = 16] = "F";
})(ETableRight = exports.ETableRight || (exports.ETableRight = {}));
/**
 * Used in the CheckLicenseStatusResult to describe how SOADMIN should handle
 */
var LicenseStatus;
(function (LicenseStatus) {
    /**
     * 0: License is ok. No changes detected
     */
    LicenseStatus["Ok"] = "Ok";
    /**
     * 1: New license information available. Get new license and activate it.
     */
    LicenseStatus["NewLicenseAvailable"] = "NewLicenseAvailable";
    /**
     * 2: Name change detected. Fetch new license and activate it.
     */
    LicenseStatus["NewCompanyNameAvailable"] = "NewCompanyNameAvailable";
    /**
     * 3: Serial number change detected. Fetch new license and activate it.
     */
    LicenseStatus["NewSerialAvailable"] = "NewSerialAvailable";
    /**
     * 4: See message for details.
     */
    LicenseStatus["UseCustomMessage"] = "UseCustomMessage";
    /**
     * 5: See message and URL for details. Client should make URL clickable.
     */
    LicenseStatus["UseCustomMessageAndUrl"] = "UseCustomMessageAndUrl";
    /**
     * 100: Something seems to be wrong. Cannot fetch new license.
     */
    LicenseStatus["ProblemWithLicense"] = "ProblemWithLicense";
    /**
     * 5000: Bad things are happening.
     */
    LicenseStatus["UnknownError"] = "UnknownError";
})(LicenseStatus = exports.LicenseStatus || (exports.LicenseStatus = {}));
/**
 * Appointment recurrence change mode: only this, this and forward, stop
 */
var RecurrenceUpdateMode;
(function (RecurrenceUpdateMode) {
    /**
     * 0: 0: Unknown/undecided type
     */
    RecurrenceUpdateMode["Unknown"] = "Unknown";
    /**
     * 1: Update only this instance
     */
    RecurrenceUpdateMode["OnlyThis"] = "OnlyThis";
    /**
     * 2: Update this instance and all instances forward in time
     */
    RecurrenceUpdateMode["ThisAndForward"] = "ThisAndForward";
    /**
     * 9: Stop the recurrence from this instance and forward in time
     */
    RecurrenceUpdateMode["StopRecurrence"] = "StopRecurrence";
})(RecurrenceUpdateMode = exports.RecurrenceUpdateMode || (exports.RecurrenceUpdateMode = {}));
/**
 * Type of user (or resource). Mapps functionally to associate type - but with different binary values.
 */
var UserType;
(function (UserType) {
    /**
     * 0:
     */
    UserType["Unknown"] = "Unknown";
    /**
     * 1: Employee
     */
    UserType["InternalAssociate"] = "InternalAssociate";
    /**
     * 2: Resource - meeting room, projector or other bookable resource
     */
    UserType["ResourceAssociate"] = "ResourceAssociate";
    /**
     * 3: External person
     */
    UserType["ExternalAssociate"] = "ExternalAssociate";
    /**
     * 4: Anonymous user - used by applications that does not require logins
     */
    UserType["AnonymousAssociate"] = "AnonymousAssociate";
    /**
     * 5: System user - mainly used for integrations or administration.  This user is not goverened sentry
     */
    UserType["SystemAssociate"] = "SystemAssociate";
})(UserType = exports.UserType || (exports.UserType = {}));
/**
 * Describes what source the contacts should be retrieved from.
 * This Enum consists of flag values that can be combined.
 */
var ContactSourceType;
(function (ContactSourceType) {
    /**
     * 0: Unknown/undecided type
     */
    ContactSourceType[ContactSourceType["Unknown"] = 0] = "Unknown";
    /**
     * 1: Contact is retrieved from the history list
     */
    ContactSourceType[ContactSourceType["History"] = 1] = "History";
    /**
     * 2: Contact is retrieved from the diary
     */
    ContactSourceType[ContactSourceType["Diary"] = 2] = "Diary";
    /**
     * 4: Contact is retrieved from the favorites list
     */
    ContactSourceType[ContactSourceType["Favorites"] = 4] = "Favorites";
    /**
     * 7: Enumeration generated from the wsdl doesn't handle the [Flags] attribute (bit enumeration)
     */
    ContactSourceType[ContactSourceType["All"] = 7] = "All";
    /**
     * 8: Undefined and generated value 8
     */
    ContactSourceType[ContactSourceType["UndefinedValue8"] = 8] = "UndefinedValue8";
})(ContactSourceType = exports.ContactSourceType || (exports.ContactSourceType = {}));
/**
 * The visibility of the record
 */
var Visibility;
(function (Visibility) {
    /**
     * 0: 0 = Visible for all users
     */
    Visibility["All"] = "All";
    /**
     * 1: 1 = The visibility is set for an associate
     */
    Visibility["Associate"] = "Associate";
    /**
     * 2: 2 = The visibility is set for a group
     */
    Visibility["Group"] = "Group";
})(Visibility = exports.Visibility || (exports.Visibility = {}));
/**
 * Types of control used with user administration work with credentials
 */
var CredentialControlType;
(function (CredentialControlType) {
    /**
     * 0: The value is static and can not be modified by the user interface.
     */
    CredentialControlType["Static"] = "Static";
    /**
     * 1: The value is a normal edit field
     */
    CredentialControlType["Edit"] = "Edit";
    /**
     * 2: The value is a password field and a pasword control should be used.
     */
    CredentialControlType["Password"] = "Password";
    /**
     * 3: The GetCredentialsGroups and GetCredentialUsers needs to be used to select a value.
     */
    CredentialControlType["Link"] = "Link";
    /**
     * 4: The value should be hidden in the user interface.
     */
    CredentialControlType["Hidden"] = "Hidden";
})(CredentialControlType = exports.CredentialControlType || (exports.CredentialControlType = {}));
/**
 * Enumerator describing how the series of recurring activities are terminated.
 */
var RecurrenceEndType;
(function (RecurrenceEndType) {
    /**
     * 0: 0: Unknown/undecided type
     */
    RecurrenceEndType["Unknown"] = "Unknown";
    /**
     * 1: The end of the recurrence is described by an end date.
     */
    RecurrenceEndType["EndDate"] = "EndDate";
    /**
     * 2: The end of the recurrence is described with a number of recurring activities.
     */
    RecurrenceEndType["Counter"] = "Counter";
})(RecurrenceEndType = exports.RecurrenceEndType || (exports.RecurrenceEndType = {}));
/**
 * Describes what source the associates should be retrieved from.
 * This Enum consists of flag values that can be combined.
 */
var AssociateSourceType;
(function (AssociateSourceType) {
    /**
     * 0: Unknown - used when initializing
     */
    AssociateSourceType[AssociateSourceType["Unknown"] = 0] = "Unknown";
    /**
     * 1: Associate is retrieved from the history list
     */
    AssociateSourceType[AssociateSourceType["History"] = 1] = "History";
    /**
     * 2: Associate is retrieved from the diary view list
     */
    AssociateSourceType[AssociateSourceType["DiaryViewList"] = 2] = "DiaryViewList";
    /**
     * 4: Associate is retrieved from the department (usergroup) list
     */
    AssociateSourceType[AssociateSourceType["Department"] = 4] = "Department";
    /**
     * 7: Enumeration generated from the wsdl doesn't handle the [Flags] attribute (bit enumeration)
     */
    AssociateSourceType[AssociateSourceType["All"] = 7] = "All";
    /**
     * 8: Undefined and generated value 8
     */
    AssociateSourceType[AssociateSourceType["UndefinedValue8"] = 8] = "UndefinedValue8";
})(AssociateSourceType = exports.AssociateSourceType || (exports.AssociateSourceType = {}));
/**
 * Describes the available relation to owner types available for roles
 */
var RoleRelationToOwner;
(function (RoleRelationToOwner) {
    /**
     * 0: Data owned by my own user
     */
    RoleRelationToOwner["MyOwn"] = "MyOwn";
    /**
     * 1: Data owned by users in my primary group
     */
    RoleRelationToOwner["PrimaryGroup"] = "PrimaryGroup";
    /**
     * 2: Data owned by users in my other groups
     */
    RoleRelationToOwner["OtherGroups"] = "OtherGroups";
    /**
     * 3: Data owned by users that has no common user groups with the current user
     */
    RoleRelationToOwner["OtherAssociates"] = "OtherAssociates";
    /**
     * 4: Data owned by external users
     */
    RoleRelationToOwner["ExternalUser"] = "ExternalUser";
    /**
     * 5: Data owned by anonymous users
     */
    RoleRelationToOwner["Anonymous"] = "Anonymous";
    /**
     * 6: Data owned by my company
     */
    RoleRelationToOwner["MyCompany"] = "MyCompany";
    /**
     * 7: Data owned by users on the same project
     */
    RoleRelationToOwner["SameProject"] = "SameProject";
})(RoleRelationToOwner = exports.RoleRelationToOwner || (exports.RoleRelationToOwner = {}));
/**
 * Describes what part of the external user should be changed.
 * This Enum consists of flag values that can be combined.
 */
var ExternalUserInfoModification;
(function (ExternalUserInfoModification) {
    /**
     * 0: Unknown - used when initializing
     */
    ExternalUserInfoModification[ExternalUserInfoModification["Unknown"] = 0] = "Unknown";
    /**
     * 1: Change the UserName
     */
    ExternalUserInfoModification[ExternalUserInfoModification["UserName"] = 1] = "UserName";
    /**
     * 2: Change the Password
     */
    ExternalUserInfoModification[ExternalUserInfoModification["Password"] = 2] = "Password";
    /**
     * 4: Change role id.
     */
    ExternalUserInfoModification[ExternalUserInfoModification["Role"] = 4] = "Role";
    /**
     * 8: Change isActive
     */
    ExternalUserInfoModification[ExternalUserInfoModification["Active"] = 8] = "Active";
    /**
     * 15: Enumeration generated from the wsdl doesn't handle the [Flags] attribute (bit enumeration)
     */
    ExternalUserInfoModification[ExternalUserInfoModification["All"] = 15] = "All";
    /**
     * 16: Undefined and generated value 16
     */
    ExternalUserInfoModification[ExternalUserInfoModification["UndefinedValue16"] = 16] = "UndefinedValue16";
})(ExternalUserInfoModification = exports.ExternalUserInfoModification || (exports.ExternalUserInfoModification = {}));
/**
 * Access levels to a single field. Read and/or write.
 * This Enum consists of flag values that can be combined.
 */
var EFieldRight;
(function (EFieldRight) {
    /**
     * 0: Hidden from user.
     */
    EFieldRight[EFieldRight["None"] = 0] = "None";
    /**
     * 1: Read-only right
     */
    EFieldRight[EFieldRight["Read"] = 1] = "Read";
    /**
     * 2: Write-only (not terribly useful)
     */
    EFieldRight[EFieldRight["Write"] = 2] = "Write";
    /**
     * 3: Read + Write rights combined
     */
    EFieldRight[EFieldRight["Update"] = 3] = "Update";
    /**
     * 4:
     */
    EFieldRight[EFieldRight["Unused1"] = 4] = "Unused1";
    /**
     * 8:
     */
    EFieldRight[EFieldRight["Unused2"] = 8] = "Unused2";
    /**
     * 16:
     */
    EFieldRight[EFieldRight["Unused3"] = 16] = "Unused3";
    /**
     * 32:
     */
    EFieldRight[EFieldRight["Unused4"] = 32] = "Unused4";
    /**
     * 64: Field must be filled out (not blank)
     */
    EFieldRight[EFieldRight["UIHintMandatory"] = 64] = "UIHintMandatory";
    /**
     * 128: Field can only be read, not updated, in the user interface.
     */
    EFieldRight[EFieldRight["UIHintReadOnly"] = 128] = "UIHintReadOnly";
    /**
     * 192: Rights only applied in the user interface.  These rights are threated as deny rights.
     */
    EFieldRight[EFieldRight["UIHints"] = 192] = "UIHints";
    /**
     * 256: Undefined and generated value 256
     */
    EFieldRight[EFieldRight["UndefinedValue256"] = 256] = "UndefinedValue256";
    /**
     * 32: Field can have NULL as a valid value.
     */
    EFieldRight[EFieldRight["Nullable"] = 32] = "Nullable";
})(EFieldRight = exports.EFieldRight || (exports.EFieldRight = {}));
/**
 * Operators to be used between restrictions, describes how this restriction is related to the next one in an array
 */
var InterRestrictionOperator;
(function (InterRestrictionOperator) {
    /**
     * 0:
     */
    InterRestrictionOperator["None"] = "None";
    /**
     * 1:
     */
    InterRestrictionOperator["And"] = "And";
    /**
     * 2:
     */
    InterRestrictionOperator["Or"] = "Or";
})(InterRestrictionOperator = exports.InterRestrictionOperator || (exports.InterRestrictionOperator = {}));
/**
 * Enumerator for the days of the week
 * This Enum is used by:  email_flow.selected_days
 * This Enum consists of flag values that can be combined.
 */
var Weekday;
(function (Weekday) {
    /**
     * 0: 0: Unknown/undecided type
     */
    Weekday[Weekday["Unknown"] = 0] = "Unknown";
    /**
     * 1: Monday
     */
    Weekday[Weekday["Monday"] = 1] = "Monday";
    /**
     * 2: Tuesday
     */
    Weekday[Weekday["Tuesday"] = 2] = "Tuesday";
    /**
     * 4: Wednesday
     */
    Weekday[Weekday["Wednesday"] = 4] = "Wednesday";
    /**
     * 8: Thursday
     */
    Weekday[Weekday["Thursday"] = 8] = "Thursday";
    /**
     * 16: Friday
     */
    Weekday[Weekday["Friday"] = 16] = "Friday";
    /**
     * 32: Saturday
     */
    Weekday[Weekday["Saturday"] = 32] = "Saturday";
    /**
     * 64: Sunday
     */
    Weekday[Weekday["Sunday"] = 64] = "Sunday";
})(Weekday = exports.Weekday || (exports.Weekday = {}));
/**
 * Enumerator describing the different patterns for a yearly recurrence
 */
var RecurrenceYearlyPattern;
(function (RecurrenceYearlyPattern) {
    /**
     * 0: 0: Unknown/undecided type
     */
    RecurrenceYearlyPattern["Unknown"] = "Unknown";
    /**
     * 6: The recurrence is for a numbered day of the month, e.g. the 17. day of August
     */
    RecurrenceYearlyPattern["DayOfMonth"] = "DayOfMonth";
    /**
     * 7: The recurrence is for weekdays in the month, e.g. the 3. thursday of August
     */
    RecurrenceYearlyPattern["WeekdayOfMonth"] = "WeekdayOfMonth";
})(RecurrenceYearlyPattern = exports.RecurrenceYearlyPattern || (exports.RecurrenceYearlyPattern = {}));
/**
 * Enumerator describing the different patterns for a monthly recurrence
 */
var RecurrenceMonthlyPattern;
(function (RecurrenceMonthlyPattern) {
    /**
     * 0: 0: Unknown/undecided type
     */
    RecurrenceMonthlyPattern["Unknown"] = "Unknown";
    /**
     * 4: The recurrence is for a numbered day of the month, e.g. the 17. day of every 2 months
     */
    RecurrenceMonthlyPattern["DayOfMonth"] = "DayOfMonth";
    /**
     * 5: The recurrence is for weekdays in the month, e.g. the 3. thursday of every 3 months
     */
    RecurrenceMonthlyPattern["WeekdayOfMonth"] = "WeekdayOfMonth";
})(RecurrenceMonthlyPattern = exports.RecurrenceMonthlyPattern || (exports.RecurrenceMonthlyPattern = {}));
/**
 * Enumerator describing the different patterns for a daily recurrence
 */
var RecurrenceDailyPattern;
(function (RecurrenceDailyPattern) {
    /**
     * 0: 0: Unknown/undecided type
     */
    RecurrenceDailyPattern["Unknown"] = "Unknown";
    /**
     * 1: The recurrence is for every workday (Mon-Fri)
     */
    RecurrenceDailyPattern["EveryWorkday"] = "EveryWorkday";
    /**
     * 2: The recurrence is for every workday (Mon-Sun)
     */
    RecurrenceDailyPattern["EveryWeekday"] = "EveryWeekday";
    /**
     * 3: The recurrence is for every cyclic interval of days.
     */
    RecurrenceDailyPattern["EveryCyclicDay"] = "EveryCyclicDay";
})(RecurrenceDailyPattern = exports.RecurrenceDailyPattern || (exports.RecurrenceDailyPattern = {}));
/**
 * Enumerator representing a week of the month
 */
var WeekOfMonth;
(function (WeekOfMonth) {
    /**
     * 0: 0: Unknown/undecided type
     */
    WeekOfMonth["Unknown"] = "Unknown";
    /**
     * 1: The first week of the month
     */
    WeekOfMonth["First"] = "First";
    /**
     * 2: The second week of the month
     */
    WeekOfMonth["Second"] = "Second";
    /**
     * 3: The third week of the month
     */
    WeekOfMonth["Third"] = "Third";
    /**
     * 4: The fourth week of the month
     */
    WeekOfMonth["Fourth"] = "Fourth";
    /**
     * 5: The last week of the month
     */
    WeekOfMonth["Last"] = "Last";
})(WeekOfMonth = exports.WeekOfMonth || (exports.WeekOfMonth = {}));
/**
 * How to sort the Order by statement.
 */
var OrderBySortType;
(function (OrderBySortType) {
    /**
     * 0: Sort the Order by Ascending
     */
    OrderBySortType["ASC"] = "ASC";
    /**
     * 1: Sort the Order by Descending
     */
    OrderBySortType["DESC"] = "DESC";
})(OrderBySortType = exports.OrderBySortType || (exports.OrderBySortType = {}));
/**
 *
 */
var EjUserStatus;
(function (EjUserStatus) {
    /**
     * 0:
     */
    EjUserStatus["StatusNone"] = "StatusNone";
    /**
     * 1:
     */
    EjUserStatus["StatusNormal"] = "StatusNormal";
    /**
     * 2:
     */
    EjUserStatus["StatusNotAvailable"] = "StatusNotAvailable";
    /**
     * 3:
     */
    EjUserStatus["StatusDeleted"] = "StatusDeleted";
    /**
     * 4:
     */
    EjUserStatus["StatusReadOnly"] = "StatusReadOnly";
    /**
     * 5:
     */
    EjUserStatus["StatusSpm"] = "StatusSpm";
    /**
     * 127:
     */
    EjUserStatus["StatusSystem"] = "StatusSystem";
})(EjUserStatus = exports.EjUserStatus || (exports.EjUserStatus = {}));
/**
 *
 */
var StatusScreenPanelType;
(function (StatusScreenPanelType) {
    /**
     * 0:
     */
    StatusScreenPanelType["None"] = "None";
    /**
     * 1:
     */
    StatusScreenPanelType["OpenRequestsPerCategory"] = "OpenRequestsPerCategory";
    /**
     * 2:
     */
    StatusScreenPanelType["OpenRequestsPerTopCategory"] = "OpenRequestsPerTopCategory";
    /**
     * 3:
     */
    StatusScreenPanelType["OpenRequestsPerUser"] = "OpenRequestsPerUser";
    /**
     * 4:
     */
    StatusScreenPanelType["OpenRequestsPerUserGroup"] = "OpenRequestsPerUserGroup";
    /**
     * 5:
     */
    StatusScreenPanelType["OpenRequestsPerPriority"] = "OpenRequestsPerPriority";
    /**
     * 6:
     */
    StatusScreenPanelType["OpenRequestsPerStatus"] = "OpenRequestsPerStatus";
    /**
     * 7:
     */
    StatusScreenPanelType["OpenRequestsPerOrigin"] = "OpenRequestsPerOrigin";
    /**
     * 11:
     */
    StatusScreenPanelType["NumberOfCreatedRequestsPerDay"] = "NumberOfCreatedRequestsPerDay";
    /**
     * 12:
     */
    StatusScreenPanelType["NumberOfCreatedRequestsPerWeek"] = "NumberOfCreatedRequestsPerWeek";
    /**
     * 13:
     */
    StatusScreenPanelType["NumberOfCreatedRequestsPerMonth"] = "NumberOfCreatedRequestsPerMonth";
    /**
     * 21:
     */
    StatusScreenPanelType["UserResponseTimePerDay"] = "UserResponseTimePerDay";
    /**
     * 22:
     */
    StatusScreenPanelType["UserReponseTimePerWeek"] = "UserReponseTimePerWeek";
    /**
     * 23:
     */
    StatusScreenPanelType["UserResponseTimePerMonth"] = "UserResponseTimePerMonth";
    /**
     * 101:
     */
    StatusScreenPanelType["OwnOpenRequests"] = "OwnOpenRequests";
    /**
     * 102:
     */
    StatusScreenPanelType["UnassignedRequests"] = "UnassignedRequests";
    /**
     * 103:
     */
    StatusScreenPanelType["Hotlist"] = "Hotlist";
    /**
     * 111:
     */
    StatusScreenPanelType["StatusScreen"] = "StatusScreen";
})(StatusScreenPanelType = exports.StatusScreenPanelType || (exports.StatusScreenPanelType = {}));
/**
 *
 */
var NetServerBuildType;
(function (NetServerBuildType) {
    /**
     * 0: SuperOffice Research and Product Development confidential version that never shall run on machines not owned by SuperOffice Research and Product Development.
     */
    NetServerBuildType["Feature"] = "Feature";
    /**
     * 1: SuperOffice Research and Product Development confidential version that never shall run on machines not owned by SuperOffice Research and Product Development.
     */
    NetServerBuildType["Stable"] = "Stable";
    /**
     * 2: SuperOffice Confidential version that shall only be used by SuperOffice or partners with a signed and valid agreement with SuperOffice.
     */
    NetServerBuildType["Alpha"] = "Alpha";
    /**
     * 3: Beta version intended for SuperOffice with beta partners
     */
    NetServerBuildType["Beta"] = "Beta";
    /**
     * 4: Release candidate intended for customers participating in a ramp-up or beta program.
     */
    NetServerBuildType["ReleaseCandidate"] = "ReleaseCandidate";
    /**
     * 5: Release intended for customers.
     */
    NetServerBuildType["Release"] = "Release";
})(NetServerBuildType = exports.NetServerBuildType || (exports.NetServerBuildType = {}));
/**
 * Possible actions for QuoteVersionButton states.
 */
var QuoteVersionButtonAction;
(function (QuoteVersionButtonAction) {
    /**
     * 0: No action
     */
    QuoteVersionButtonAction["None"] = "None";
    /**
     * 1: Validate the quote version.
     */
    QuoteVersionButtonAction["ValidateVersion"] = "ValidateVersion";
    /**
     * 2: Edit the quote version.
     */
    QuoteVersionButtonAction["Edit"] = "Edit";
    /**
     * 3: Send the quote version.
     */
    QuoteVersionButtonAction["Send"] = "Send";
    /**
     * 4: Approve the quote version.
     */
    QuoteVersionButtonAction["Approve"] = "Approve";
    /**
     * 5: Reject the quote version.
     */
    QuoteVersionButtonAction["Reject"] = "Reject";
    /**
     * 7: Validate the quote version and send if possible.
     */
    QuoteVersionButtonAction["ValidateVersionAndSendIfPossible"] = "ValidateVersionAndSendIfPossible";
    /**
     * 8: Validate the quote version and place the order if possible.
     */
    QuoteVersionButtonAction["ValidateVersionAndPlaceOrderIfPossible"] = "ValidateVersionAndPlaceOrderIfPossible";
    /**
     * 9: Make a copy of the quote version.
     */
    QuoteVersionButtonAction["CloneVersion"] = "CloneVersion";
    /**
     * 10: Send confirmation.
     */
    QuoteVersionButtonAction["SendConfirmation"] = "SendConfirmation";
    /**
     * 11: Fetch updated values from the ERP system and show the results in the dialog.
     */
    QuoteVersionButtonAction["GetOrderState"] = "GetOrderState";
    /**
     * 12: Ask the quote connector to update the prices for the entire version.
     */
    QuoteVersionButtonAction["UpdatePrices"] = "UpdatePrices";
})(QuoteVersionButtonAction = exports.QuoteVersionButtonAction || (exports.QuoteVersionButtonAction = {}));
/**
 * Domains for temporary keys.
 * This Enum is used by:  TemporaryKey.domain
 */
var TemporaryKeyDomain;
(function (TemporaryKeyDomain) {
    /**
     * 0: Unknown
     */
    TemporaryKeyDomain["Unknown"] = "Unknown";
    /**
     * 1: Mailing recipient.
     */
    TemporaryKeyDomain["MailingRecipient"] = "MailingRecipient";
    /**
     * 2: Form submission recipient
     */
    TemporaryKeyDomain["FormSubmitterRecipient"] = "FormSubmitterRecipient";
    /**
     * 3: View request in customer center
     */
    TemporaryKeyDomain["ViewTicketInCustomerCenter"] = "ViewTicketInCustomerCenter";
    /**
     * 4: Customer center login key
     */
    TemporaryKeyDomain["LoginCustomerCenter"] = "LoginCustomerCenter";
    /**
     * 5: Customer center public faq key
     */
    TemporaryKeyDomain["PublicFaq"] = "PublicFaq";
    /**
     * 6: Customer center change password key
     */
    TemporaryKeyDomain["ChangePasswordCustomerCenter"] = "ChangePasswordCustomerCenter";
})(TemporaryKeyDomain = exports.TemporaryKeyDomain || (exports.TemporaryKeyDomain = {}));
/**
 * Is this document template some kind of quote document, and if so what
 * This Enum is used by:  DocTmpl.privacyDocType
 */
var DocTmplPrivacyType;
(function (DocTmplPrivacyType) {
    /**
     * 0: This document template is in no way related to GDPR
     */
    DocTmplPrivacyType["None"] = "None";
    /**
     * 1: This is a template for the 'you have been added to our system' kind of email; must be an .html email template
     */
    DocTmplPrivacyType["PersonRegistered"] = "PersonRegistered";
})(DocTmplPrivacyType = exports.DocTmplPrivacyType || (exports.DocTmplPrivacyType = {}));
/**
 * Webhook status: active, stopped, or tooManyErrors
 * This Enum is used by:  Webhook.state
 */
var WebhookState;
(function (WebhookState) {
    /**
     * 0: 0: Unknown state
     */
    WebhookState["Unknown"] = "Unknown";
    /**
     * 1: 1: Active - webhook is posting events to receiver
     */
    WebhookState["Active"] = "Active";
    /**
     * 2: 2: Stopped - webhook has been turned off. Not posting events to receiver.
     */
    WebhookState["Stopped"] = "Stopped";
    /**
     * 3: 3: Too many errors received - webhook has been turned off automatically.
     */
    WebhookState["TooManyErrors"] = "TooManyErrors";
})(WebhookState = exports.WebhookState || (exports.WebhookState = {}));
/**
 * Command action
 */
var CommandAction;
(function (CommandAction) {
    /**
     * 0: Command should be implicitly executed.
     */
    CommandAction["Implicit"] = "Implicit";
    /**
     * 1: The client must display a dialog with buttons Yes and No.
     */
    CommandAction["YesNo"] = "YesNo";
    /**
     * 2: The client must display a dialog with buttons Ok and Cancel.
     */
    CommandAction["OkCancel"] = "OkCancel";
    /**
     * 3: The client must display a dialog with Ok-button
     */
    CommandAction["Ok"] = "Ok";
})(CommandAction = exports.CommandAction || (exports.CommandAction = {}));
/**
 * Result of an action
 */
var CommandActionResult;
(function (CommandActionResult) {
    /**
     * 0: Command should be implicitly executed.
     */
    CommandActionResult["Implicit"] = "Implicit";
    /**
     * 1: The user clicked Yes.
     */
    CommandActionResult["Yes"] = "Yes";
    /**
     * 2: The client clicked Ok
     */
    CommandActionResult["Ok"] = "Ok";
    /**
     * 3: The client clicked No
     */
    CommandActionResult["No"] = "No";
    /**
     * 4: The client clicked Cancel
     */
    CommandActionResult["Cancel"] = "Cancel";
})(CommandActionResult = exports.CommandActionResult || (exports.CommandActionResult = {}));
/**
 * Value for field 'DevicePlatform' in table 'PushNotificationService'
 * This Enum is used by:  PushNotificationService.DevicePlatform
 */
var NotificationPlatform;
(function (NotificationPlatform) {
    /**
     * 0: Device is by Apple
     */
    NotificationPlatform["Apple"] = "Apple";
    /**
     * 1: Device is by Google
     */
    NotificationPlatform["Google"] = "Google";
    /**
     * 2: Device is by Microsoft
     */
    NotificationPlatform["Microsoft"] = "Microsoft";
    /**
     * 3: Device is by Apple, used for development and debugging
     */
    NotificationPlatform["AppleDeveloper"] = "AppleDeveloper";
    /**
     * 4: Device is by Apple, used for testing
     */
    NotificationPlatform["AppleAdHoc"] = "AppleAdHoc";
    /**
     * 5: Device is by Google, used for testing, development and debugging
     */
    NotificationPlatform["GoogleDeveloper"] = "GoogleDeveloper";
})(NotificationPlatform = exports.NotificationPlatform || (exports.NotificationPlatform = {}));
/**
 * Defines what type of content the notification contains
 */
var NotificationMessageType;
(function (NotificationMessageType) {
    /**
     * 0: A plain message
     */
    NotificationMessageType["Message"] = "Message";
    /**
     * 1: A message with high priority
     */
    NotificationMessageType["ImportantMessage"] = "ImportantMessage";
    /**
     * 2: Trigger an action
     */
    NotificationMessageType["RemoteAction"] = "RemoteAction";
    /**
     * 3: Ask user a yes or no question
     */
    NotificationMessageType["YesNoQuestion"] = "YesNoQuestion";
    /**
     * 4: Show a web page
     */
    NotificationMessageType["ShowWebPage"] = "ShowWebPage";
})(NotificationMessageType = exports.NotificationMessageType || (exports.NotificationMessageType = {}));
/**
 * Valid iCal methods
 */
var CalMethod;
(function (CalMethod) {
    /**
     * 0: Method is not known
     */
    CalMethod["Unknown"] = "Unknown";
    /**
     * 1: Add one or more instances to an existing event.
     */
    CalMethod["Add"] = "Add";
    /**
     * 2: Cancel one or more instances of an existing event.
     */
    CalMethod["Cancel"] = "Cancel";
    /**
     * 3: Counter a REQUEST with an alternative proposal, Sent by an 'Attendee' to the 'Organizer'.
     */
    CalMethod["Counter"] = "Counter";
    /**
     * 4: Decline a counter proposal. Sent to an 'Attendee' by the 'Organizer'.
     */
    CalMethod["DeclineCounter"] = "DeclineCounter";
    /**
     * 5: Post notification of an event. Used primarily as a method of advertising the existence of an event.
     */
    CalMethod["Publish"] = "Publish";
    /**
     * 6: A request is sent to an 'Organizer' by an 'Attendee' asking for the latest version of an event to be resent to the requester.
     */
    CalMethod["Refresh"] = "Refresh";
    /**
     * 7: Reply to an event request. Clients may set their status ('partstat') to ACCEPTED, DECLINED, TENTATIVE, or DELEGATED.
     */
    CalMethod["Reply"] = "Reply";
    /**
     * 8: Make a request for an event. This is an explicit invitation to one or more 'Attendees'. Event Requests are also used to update or change an existing event. Clients that cannot handle REQUEST may degrade the event to view it as an PUBLISH.
     */
    CalMethod["Request"] = "Request";
})(CalMethod = exports.CalMethod || (exports.CalMethod = {}));
/**
 * iCal reply status
 */
var CalReplyStatus;
(function (CalReplyStatus) {
    /**
     * 0: Status is not known
     */
    CalReplyStatus["Unknown"] = "Unknown";
    /**
     * 1: The sender accepted the meeting.
     */
    CalReplyStatus["Accepted"] = "Accepted";
    /**
     * 2: The sender declined the meeting.
     */
    CalReplyStatus["Declined"] = "Declined";
    /**
     * 3: The sender tentatively accepted the meeting.
     */
    CalReplyStatus["Tentative"] = "Tentative";
})(CalReplyStatus = exports.CalReplyStatus || (exports.CalReplyStatus = {}));
/**
 * Sender email mode
 * This Enum is used by:  DocTmpl.senderEmailMode
 */
var SenderMailMode;
(function (SenderMailMode) {
    /**
     * 0: Use default sender, saved in template SenderEmailAddress
     */
    SenderMailMode["UseDefaultSender"] = "UseDefaultSender";
    /**
     * 1: Use persons our contact email address
     */
    SenderMailMode["UseOurContact"] = "UseOurContact";
    /**
     * 2: Use persons support contact.
     */
    SenderMailMode["UseSupportContact"] = "UseSupportContact";
    /**
     * 3: Use logged in user.
     */
    SenderMailMode["UseLoggedInUser"] = "UseLoggedInUser";
})(SenderMailMode = exports.SenderMailMode || (exports.SenderMailMode = {}));
/**
 * Forms recaptcha mode
 */
var FormsRecaptchaMode;
(function (FormsRecaptchaMode) {
    /**
     * 0: Recpatcha is turned off
     */
    FormsRecaptchaMode["NotAvailable"] = "NotAvailable";
    /**
     * 1: Global recaptcha keys are configured
     */
    FormsRecaptchaMode["GlobalKeysExist"] = "GlobalKeysExist";
    /**
     * 2: Recaptcha keys need to be supplied
     */
    FormsRecaptchaMode["KeysNeeded"] = "KeysNeeded";
})(FormsRecaptchaMode = exports.FormsRecaptchaMode || (exports.FormsRecaptchaMode = {}));
/**
 * Appointment and invitation synchronization info
 * This Enum is used by:  appointment.cautionWarning
 */
var AppointmentCautionWarning;
(function (AppointmentCautionWarning) {
    /**
     * 0: OK - no special warnings
     */
    AppointmentCautionWarning["OK"] = "OK";
    /**
     * 1: Possibly not in sync with external systems
     */
    AppointmentCautionWarning["NotInSync"] = "NotInSync";
    /**
     * 2: Updated without sending email notifications
     */
    AppointmentCautionWarning["NotNotifiedByEmail"] = "NotNotifiedByEmail";
    /**
     * 3: This recurrence pattern might not be supported in the external participants calendars
     */
    AppointmentCautionWarning["RecurrencePatternNotSupported"] = "RecurrencePatternNotSupported";
    /**
     * 4: A requested change to a recurrence appointment was not supported
     */
    AppointmentCautionWarning["IncomingRecurrenceChangeNotSupported"] = "IncomingRecurrenceChangeNotSupported";
    /**
     * 5: Time and date may be wrong for external participants due to unsupported changes
     */
    AppointmentCautionWarning["ExternalParticipantsDateTimeMismatch"] = "ExternalParticipantsDateTimeMismatch";
})(AppointmentCautionWarning = exports.AppointmentCautionWarning || (exports.AppointmentCautionWarning = {}));
/**
 * Is this document template some kind of appointment document, and if so what
 * This Enum is used by:  DocTmpl.invitationDocType
 */
var DocTmplInvitationType;
(function (DocTmplInvitationType) {
    /**
     * 0: None - Not an appointment type
     */
    DocTmplInvitationType["None"] = "None";
    /**
     * 1: 1 - New appointment
     */
    DocTmplInvitationType["New"] = "New";
    /**
     * 2: 2 - Changed appointment
     */
    DocTmplInvitationType["Changed"] = "Changed";
    /**
     * 3: 3 - Cancelled appointment
     */
    DocTmplInvitationType["Cancelled"] = "Cancelled";
})(DocTmplInvitationType = exports.DocTmplInvitationType || (exports.DocTmplInvitationType = {}));
/**
 * Default video-meeting status for meetings created in SuperOffice CRM
 * This Enum is used by:  Task.default_videomeeting_status
 */
var VideoMeetingStatus;
(function (VideoMeetingStatus) {
    /**
     * 0: No Change
     */
    VideoMeetingStatus["NoChange"] = "NoChange";
    /**
     * 1: Appointments created from this task-type should enable video-meetings by default.
     */
    VideoMeetingStatus["VideoMeetingOn"] = "VideoMeetingOn";
    /**
     * 2: Appointments created from this task-type should disable video-meetings by default.
     */
    VideoMeetingStatus["VideoMeetingOff"] = "VideoMeetingOff";
})(VideoMeetingStatus = exports.VideoMeetingStatus || (exports.VideoMeetingStatus = {}));
/**
 * Upsert: Action to take on target table rows that do not match any incoming keys
 */
var UpsertNomatchAction;
(function (UpsertNomatchAction) {
    /**
     * 0: No action, leave target table row unchanged
     */
    UpsertNomatchAction["NoChange"] = "NoChange";
    /**
     * 1: Zero/default-value the targeted 'columns' in all non-matching rows
     */
    UpsertNomatchAction["ZeroColumns"] = "ZeroColumns";
    /**
     * 2: Delete the entire row, for all non-matching-row
     */
    UpsertNomatchAction["DeleteRow"] = "DeleteRow";
})(UpsertNomatchAction = exports.UpsertNomatchAction || (exports.UpsertNomatchAction = {}));
/**
 * Upsert: Action status for each row
 */
var UpsertRowActionStatus;
(function (UpsertRowActionStatus) {
    /**
     * 1: Row not found in target, inserted; primary key assigned as required
     */
    UpsertRowActionStatus["Inserted"] = "Inserted";
    /**
     * 2: Row found in target, update needed
     */
    UpsertRowActionStatus["Updated"] = "Updated";
    /**
     * 3: Row found in target, no updated needed
     */
    UpsertRowActionStatus["NoUpdateNeeded"] = "NoUpdateNeeded";
    /**
     * 4: Row not matched in incoming keys and DELETED
     */
    UpsertRowActionStatus["Deleted"] = "Deleted";
    /**
     * 5: Row not matched in incoming keys and COLUMNS ZEROED
     */
    UpsertRowActionStatus["ColumnsZeroed"] = "ColumnsZeroed";
})(UpsertRowActionStatus = exports.UpsertRowActionStatus || (exports.UpsertRowActionStatus = {}));
/**
 * Service mailbox type
 * This Enum is used by:  mail_in_filter.server_type
 */
var MailboxType;
(function (MailboxType) {
    /**
     * 0: Unknown
     */
    MailboxType["Unknown"] = "Unknown";
    /**
     * 1: Pop
     */
    MailboxType["Pop"] = "Pop";
    /**
     * 2: Imap - without OAuth support. Use ImapOAuth instead if OAuth is needed
     */
    MailboxType["Imap"] = "Imap";
    /**
     * 3: Mapi - Obsolete
     */
    MailboxType["Mapi"] = "Mapi";
    /**
     * 4: TypeFacebook
     */
    MailboxType["Facebook"] = "Facebook";
    /**
     * 5: Pop SSL
     */
    MailboxType["Pops"] = "Pops";
    /**
     * 6: Imap SSL
     */
    MailboxType["Imaps"] = "Imaps";
    /**
     * 7: Incoming SMS, using a plugin
     */
    MailboxType["SmsPlugin"] = "SmsPlugin";
    /**
     * 8: Used by mailboxes set up as a Mailgun route
     */
    MailboxType["Mailgun"] = "Mailgun";
    /**
     * 9: This is a Imap mailbox using OAuth authentication
     */
    MailboxType["ImapOAuth"] = "ImapOAuth";
})(MailboxType = exports.MailboxType || (exports.MailboxType = {}));
/**
 * Type and content of delta
 * This Enum is used by:  ConfigurableScreenDelta.deltaType
 */
var DeltaType;
(function (DeltaType) {
    /**
     * 0: Unknown
     */
    DeltaType["Unknown"] = "Unknown";
    /**
     * 1: System
     */
    DeltaType["System"] = "System";
    /**
     * 2: WebPanel from list table extapp, generated by code
     */
    DeltaType["WebPanel"] = "WebPanel";
    /**
     * 3: UDefs and extrafields, generated by code
     */
    DeltaType["CustomFields"] = "CustomFields";
    /**
     * 4: Customized, added by admin user
     */
    DeltaType["Customized"] = "Customized";
})(DeltaType = exports.DeltaType || (exports.DeltaType = {}));
/**
 * State of delta
 * This Enum is used by:  ConfigurableScreenDelta.deltaState
 */
var DeltaState;
(function (DeltaState) {
    /**
     * 0: No state applicable for this delta, or not yet decided
     */
    DeltaState["Unknown"] = "Unknown";
    /**
     * 1: Draft
     */
    DeltaState["Draft"] = "Draft";
    /**
     * 2: Published
     */
    DeltaState["Published"] = "Published";
})(DeltaState = exports.DeltaState || (exports.DeltaState = {}));
/**
 * Types of events that are sent through the Pocket Notification API, where they are paired with an entity id
 */
var NotificationEventType;
(function (NotificationEventType) {
    /**
     * 0: Unknown
     */
    NotificationEventType["Unknown"] = "Unknown";
    /**
     * 1: New ticket
     */
    NotificationEventType["NewTicket"] = "NewTicket";
    /**
     * 2: Appointment invitation
     */
    NotificationEventType["AppointmentInvitation"] = "AppointmentInvitation";
    /**
     * 3: Appointment moved or changed
     */
    NotificationEventType["AppointmentMoved"] = "AppointmentMoved";
    /**
     * 4: Appointment cancelled
     */
    NotificationEventType["AppointmentCancelled"] = "AppointmentCancelled";
    /**
     * 5: New ticket message
     */
    NotificationEventType["NewTicketMessage"] = "NewTicketMessage";
    /**
     * 6: Ticket activated
     */
    NotificationEventType["TicketActivated"] = "TicketActivated";
    /**
     * 7: Ticket escalated
     */
    NotificationEventType["TicketEscalated"] = "TicketEscalated";
    /**
     * 8: Quote approval requested
     */
    NotificationEventType["QuoteApprovalRequest"] = "QuoteApprovalRequest";
    /**
     * 9: Quote approval approved
     */
    NotificationEventType["QuoteApprovalApproved"] = "QuoteApprovalApproved";
    /**
     * 10: Quote approval denied
     */
    NotificationEventType["QuoteApprovalDenied"] = "QuoteApprovalDenied";
    /**
     * 11: Invitation or assignment declined
     */
    NotificationEventType["AppointmentDeclined"] = "AppointmentDeclined";
})(NotificationEventType = exports.NotificationEventType || (exports.NotificationEventType = {}));
/**
 * Different methods the user may use to change password
 */
var ChangePasswordType;
(function (ChangePasswordType) {
    /**
     * 0: The user can change password by triggering a change password email.
     */
    ChangePasswordType["Email"] = "Email";
    /**
     * 1: The user can change password by providing a new password
     */
    ChangePasswordType["Password"] = "Password";
})(ChangePasswordType = exports.ChangePasswordType || (exports.ChangePasswordType = {}));
/**
 * Standard/predefined values for ticket message header
 */
var MessageHeaderStdItem;
(function (MessageHeaderStdItem) {
    /**
     * 0: A standard header without predefined meaning
     */
    MessageHeaderStdItem["None"] = "None";
    /**
     * 1: Forward
     */
    MessageHeaderStdItem["Forward"] = "Forward";
    /**
     * 2: Message contains certain attachments we simply do not import
     */
    MessageHeaderStdItem["UnnamedAttachmentBlocked"] = "UnnamedAttachmentBlocked";
    /**
     * 3: NoAutoReply
     */
    MessageHeaderStdItem["NoAutoReply"] = "NoAutoReply";
    /**
     * 4: Auto-reply sent to customers A
     */
    MessageHeaderStdItem["SentAutoReplyToCustomersA"] = "SentAutoReplyToCustomersA";
    /**
     * 5: Auto-reply sent to customers B
     */
    MessageHeaderStdItem["SentAutoReplyToCustomersB"] = "SentAutoReplyToCustomersB";
    /**
     * 6: Customer read FAQ
     */
    MessageHeaderStdItem["CustomerReadFAQ"] = "CustomerReadFAQ";
    /**
     * 7: This message was generated from reply template
     */
    MessageHeaderStdItem["ReplyTemplate"] = "ReplyTemplate";
})(MessageHeaderStdItem = exports.MessageHeaderStdItem || (exports.MessageHeaderStdItem = {}));
/**
 * Ticket message header modification options
 */
var MessageHeaderStdItemCol;
(function (MessageHeaderStdItemCol) {
    /**
     * 0: The header should be returned/treated as-is, no modifications
     */
    MessageHeaderStdItemCol["None"] = "None";
    /**
     * 1: The localization resource should be added to the Name of a header
     */
    MessageHeaderStdItemCol["Name"] = "Name";
    /**
     * 2: The localization resource should be added to the Value of a header
     */
    MessageHeaderStdItemCol["Value"] = "Value";
})(MessageHeaderStdItemCol = exports.MessageHeaderStdItemCol || (exports.MessageHeaderStdItemCol = {}));
/**
 * Ticket message actions
 */
var MessageActionType;
(function (MessageActionType) {
    /**
     * 0: None
     */
    MessageActionType["None"] = "None";
    /**
     * 1: Reply to message
     */
    MessageActionType["Reply"] = "Reply";
    /**
     * 2: Reply to all
     */
    MessageActionType["ReplyAll"] = "ReplyAll";
    /**
     * 3: Forward message
     */
    MessageActionType["Forward"] = "Forward";
    /**
     * 4: Add internal commnet
     */
    MessageActionType["InternalComment"] = "InternalComment";
})(MessageActionType = exports.MessageActionType || (exports.MessageActionType = {}));
/**
 * Recipient type
 */
var RecipientType;
(function (RecipientType) {
    /**
     * 0: To
     */
    RecipientType["To"] = "To";
    /**
     * 1: CC
     */
    RecipientType["CC"] = "CC";
    /**
     * 3: BCC
     */
    RecipientType["BCC"] = "BCC";
})(RecipientType = exports.RecipientType || (exports.RecipientType = {}));
/**
 * Embedded images type
 */
var ImageEmbedType;
(function (ImageEmbedType) {
    /**
     * 0: Link image via href.
     */
    ImageEmbedType["Link"] = "Link";
    /**
     * 1: Inline image via base64 encoded data in document.
     */
    ImageEmbedType["Inline"] = "Inline";
})(ImageEmbedType = exports.ImageEmbedType || (exports.ImageEmbedType = {}));
/**
 * Task List Item Type
 * This Enum is used by:  TaskMenu.taskType
 */
var TaskListItemType;
(function (TaskListItemType) {
    /**
     * 0: None
     */
    TaskListItemType["None"] = "None";
    /**
     * 1: Url
     */
    TaskListItemType["Url"] = "Url";
    /**
     * 2: Crm Script
     */
    TaskListItemType["CrmScript"] = "CrmScript";
    /**
     * 3: SoProtocol
     */
    TaskListItemType["SoProtocol"] = "SoProtocol";
})(TaskListItemType = exports.TaskListItemType || (exports.TaskListItemType = {}));
/**
 * Show Task Item In Client
 * This Enum is used by:  TaskMenu.showInClient
 * This Enum consists of flag values that can be combined.
 */
var ShowTaskItemInClient;
(function (ShowTaskItemInClient) {
    /**
     * 0: None
     */
    ShowTaskItemInClient[ShowTaskItemInClient["None"] = 0] = "None";
    /**
     * 1: SuperOffice Web
     */
    ShowTaskItemInClient[ShowTaskItemInClient["Web"] = 1] = "Web";
    /**
     * 2: Mobile
     */
    ShowTaskItemInClient[ShowTaskItemInClient["Mobile"] = 2] = "Mobile";
})(ShowTaskItemInClient = exports.ShowTaskItemInClient || (exports.ShowTaskItemInClient = {}));
/**
 * Behaviour in archives
 * This Enum is used by:  TaskMenu.archiveBehaviour
 * This Enum consists of flag values that can be combined.
 */
var ArchiveBehaviour;
(function (ArchiveBehaviour) {
    /**
     * 0: None
     */
    ArchiveBehaviour[ArchiveBehaviour["None"] = 0] = "None";
    /**
     * 1: RightClick in archives
     */
    ArchiveBehaviour[ArchiveBehaviour["InArchives"] = 1] = "InArchives";
    /**
     * 2: RightClick with multiselect in archives
     */
    ArchiveBehaviour[ArchiveBehaviour["MultiSelectInArchives"] = 2] = "MultiSelectInArchives";
})(ArchiveBehaviour = exports.ArchiveBehaviour || (exports.ArchiveBehaviour = {}));
/**
 * CrmScript Event triggers - when CRMScript is run based on user or system actions.
 */
var EventHandlerType;
(function (EventHandlerType) {
    /**
     * 0: Unknown trigger
     */
    EventHandlerType["Unknown"] = "Unknown";
    /**
     * 100: NewTicket
     */
    EventHandlerType["NewTicket"] = "NewTicket";
    /**
     * 101: NewTicketFromCustomerCenter
     */
    EventHandlerType["NewTicketFromCustomerCenter"] = "NewTicketFromCustomerCenter";
    /**
     * 102: NewTicketFromEmail
     */
    EventHandlerType["NewTicketFromEmail"] = "NewTicketFromEmail";
    /**
     * 103: NewTicketFromCustomerCenterBeforeSave
     */
    EventHandlerType["NewTicketFromCustomerCenterBeforeSave"] = "NewTicketFromCustomerCenterBeforeSave";
    /**
     * 104: NewTicketFromSpmLink
     */
    EventHandlerType["NewTicketFromSpmLink"] = "NewTicketFromSpmLink";
    /**
     * 105: NewNotifyTicketFromForm
     */
    EventHandlerType["NewNotifyTicketFromForm"] = "NewNotifyTicketFromForm";
    /**
     * 106: NewTicketFromForm
     */
    EventHandlerType["NewTicketFromForm"] = "NewTicketFromForm";
    /**
     * 109: TicketSave
     */
    EventHandlerType["TicketSave"] = "TicketSave";
    /**
     * 110: TicketClosed
     */
    EventHandlerType["TicketClosed"] = "TicketClosed";
    /**
     * 111: TicketPostponed
     */
    EventHandlerType["TicketPostponed"] = "TicketPostponed";
    /**
     * 112: TicketDeleted
     */
    EventHandlerType["TicketDeleted"] = "TicketDeleted";
    /**
     * 113: TicketActivated
     */
    EventHandlerType["TicketActivated"] = "TicketActivated";
    /**
     * 120: TicketReopened
     */
    EventHandlerType["TicketReopened"] = "TicketReopened";
    /**
     * 121: TicketReopenedFromCustomerCenter
     */
    EventHandlerType["TicketReopenedFromCustomerCenter"] = "TicketReopenedFromCustomerCenter";
    /**
     * 122: TicketReopenedFromEmail
     */
    EventHandlerType["TicketReopenedFromEmail"] = "TicketReopenedFromEmail";
    /**
     * 140: TicketChangedPriority
     */
    EventHandlerType["TicketChangedPriority"] = "TicketChangedPriority";
    /**
     * 141: TicketChangedCategory
     */
    EventHandlerType["TicketChangedCategory"] = "TicketChangedCategory";
    /**
     * 142: TicketChangedOwnedBy
     */
    EventHandlerType["TicketChangedOwnedBy"] = "TicketChangedOwnedBy";
    /**
     * 143: TicketChangedPrimaryCustomer
     */
    EventHandlerType["TicketChangedPrimaryCustomer"] = "TicketChangedPrimaryCustomer";
    /**
     * 144: TicketChangedTicketStatus
     */
    EventHandlerType["TicketChangedTicketStatus"] = "TicketChangedTicketStatus";
    /**
     * 145: TicketChangedSlevel
     */
    EventHandlerType["TicketChangedSlevel"] = "TicketChangedSlevel";
    /**
     * 150: TicketMessageAdded
     */
    EventHandlerType["TicketMessageAdded"] = "TicketMessageAdded";
    /**
     * 151: TicketInternalMessageAdded
     */
    EventHandlerType["TicketInternalMessageAdded"] = "TicketInternalMessageAdded";
    /**
     * 152: TicketExternalMessageAdded
     */
    EventHandlerType["TicketExternalMessageAdded"] = "TicketExternalMessageAdded";
    /**
     * 153: TicketMessageSentimentCalculated
     */
    EventHandlerType["TicketMessageSentimentCalculated"] = "TicketMessageSentimentCalculated";
    /**
     * 200: CompactModeInjection
     */
    EventHandlerType["CompactModeInjection"] = "CompactModeInjection";
    /**
     * 210: CustomerCenterAuthentication
     */
    EventHandlerType["CustomerCenterAuthentication"] = "CustomerCenterAuthentication";
    /**
     * 300: ScheduledTaskFailed
     */
    EventHandlerType["ScheduledTaskFailed"] = "ScheduledTaskFailed";
    /**
     * 301: DbiTaskFailed
     */
    EventHandlerType["DbiTaskFailed"] = "DbiTaskFailed";
    /**
     * 302: CustomerSetSubscriptions
     */
    EventHandlerType["CustomerSetSubscriptions"] = "CustomerSetSubscriptions";
    /**
     * 303: ImportMailBeforeProcessing
     */
    EventHandlerType["ImportMailBeforeProcessing"] = "ImportMailBeforeProcessing";
    /**
     * 304: ImportMailAfterProcessing
     */
    EventHandlerType["ImportMailAfterProcessing"] = "ImportMailAfterProcessing";
    /**
     * 305: MainMenu
     */
    EventHandlerType["MainMenu"] = "MainMenu";
    /**
     * 400: ChatNewSession
     */
    EventHandlerType["ChatNewSession"] = "ChatNewSession";
    /**
     * 401: ChatSessionChangedStatus
     */
    EventHandlerType["ChatSessionChangedStatus"] = "ChatSessionChangedStatus";
    /**
     * 402: ChatBeforeSaveNewMessage
     */
    EventHandlerType["ChatBeforeSaveNewMessage"] = "ChatBeforeSaveNewMessage";
    /**
     * 403: ChatAfterSaveNewMessage
     */
    EventHandlerType["ChatAfterSaveNewMessage"] = "ChatAfterSaveNewMessage";
    /**
     * 500: ServiceScreenNewTicketLoad
     */
    EventHandlerType["ServiceScreenNewTicketLoad"] = "ServiceScreenNewTicketLoad";
    /**
     * 501: ServiceScreenNewQuickTicketLoad
     */
    EventHandlerType["ServiceScreenNewQuickTicketLoad"] = "ServiceScreenNewQuickTicketLoad";
    /**
     * 502: ServiceScreenListTicketMessagesLoad
     */
    EventHandlerType["ServiceScreenListTicketMessagesLoad"] = "ServiceScreenListTicketMessagesLoad";
    /**
     * 503: ServiceScreenAddMessageLoad
     */
    EventHandlerType["ServiceScreenAddMessageLoad"] = "ServiceScreenAddMessageLoad";
    /**
     * 504: ServiceScreenEditTicketLoad
     */
    EventHandlerType["ServiceScreenEditTicketLoad"] = "ServiceScreenEditTicketLoad";
    /**
     * 505: ServiceScreenViewCustomerLoad
     */
    EventHandlerType["ServiceScreenViewCustomerLoad"] = "ServiceScreenViewCustomerLoad";
    /**
     * 506: ServiceScreenEditCustomerLoad
     */
    EventHandlerType["ServiceScreenEditCustomerLoad"] = "ServiceScreenEditCustomerLoad";
    /**
     * 507: ServiceScreenViewCompanyLoad
     */
    EventHandlerType["ServiceScreenViewCompanyLoad"] = "ServiceScreenViewCompanyLoad";
    /**
     * 508: ServiceScreenEditCompanyLoad
     */
    EventHandlerType["ServiceScreenEditCompanyLoad"] = "ServiceScreenEditCompanyLoad";
    /**
     * 509: ServiceScreenForwardLoad
     */
    EventHandlerType["ServiceScreenForwardLoad"] = "ServiceScreenForwardLoad";
    /**
     * 510: ServiceScreenEditExtraTableLoad
     */
    EventHandlerType["ServiceScreenEditExtraTableLoad"] = "ServiceScreenEditExtraTableLoad";
    /**
     * 600: ServiceScreenNewTicketBeforeSubmit
     */
    EventHandlerType["ServiceScreenNewTicketBeforeSubmit"] = "ServiceScreenNewTicketBeforeSubmit";
    /**
     * 601: ServiceScreenNewQuickTicketBeforeSubmit
     */
    EventHandlerType["ServiceScreenNewQuickTicketBeforeSubmit"] = "ServiceScreenNewQuickTicketBeforeSubmit";
    /**
     * 602: ServiceScreenListTicketMessagesBeforeSubmit
     */
    EventHandlerType["ServiceScreenListTicketMessagesBeforeSubmit"] = "ServiceScreenListTicketMessagesBeforeSubmit";
    /**
     * 603: ServiceScreenAddMessageBeforeSubmit
     */
    EventHandlerType["ServiceScreenAddMessageBeforeSubmit"] = "ServiceScreenAddMessageBeforeSubmit";
    /**
     * 604: ServiceScreenEditTicketBeforeSubmit
     */
    EventHandlerType["ServiceScreenEditTicketBeforeSubmit"] = "ServiceScreenEditTicketBeforeSubmit";
    /**
     * 605: ServiceScreenViewCustomerBeforeSubmit
     */
    EventHandlerType["ServiceScreenViewCustomerBeforeSubmit"] = "ServiceScreenViewCustomerBeforeSubmit";
    /**
     * 606: ServiceScreenEditCustomerBeforeSubmit
     */
    EventHandlerType["ServiceScreenEditCustomerBeforeSubmit"] = "ServiceScreenEditCustomerBeforeSubmit";
    /**
     * 607: ServiceScreenViewCompanyBeforeSubmit
     */
    EventHandlerType["ServiceScreenViewCompanyBeforeSubmit"] = "ServiceScreenViewCompanyBeforeSubmit";
    /**
     * 608: ServiceScreenEditCompanyBeforeSubmit
     */
    EventHandlerType["ServiceScreenEditCompanyBeforeSubmit"] = "ServiceScreenEditCompanyBeforeSubmit";
    /**
     * 609: ServiceScreenForwardBeforeSubmit
     */
    EventHandlerType["ServiceScreenForwardBeforeSubmit"] = "ServiceScreenForwardBeforeSubmit";
    /**
     * 610: ServiceScreenEditExtraTableBeforeSubmit
     */
    EventHandlerType["ServiceScreenEditExtraTableBeforeSubmit"] = "ServiceScreenEditExtraTableBeforeSubmit";
    /**
     * 700: ServiceScreenNewTicketAfterSubmit
     */
    EventHandlerType["ServiceScreenNewTicketAfterSubmit"] = "ServiceScreenNewTicketAfterSubmit";
    /**
     * 701: ServiceScreenNewQuickTicketAfterSubmit
     */
    EventHandlerType["ServiceScreenNewQuickTicketAfterSubmit"] = "ServiceScreenNewQuickTicketAfterSubmit";
    /**
     * 702: ServiceScreenListTicketMessagesAfterSubmit
     */
    EventHandlerType["ServiceScreenListTicketMessagesAfterSubmit"] = "ServiceScreenListTicketMessagesAfterSubmit";
    /**
     * 703: ServiceScreenAddMessageAfterSubmit
     */
    EventHandlerType["ServiceScreenAddMessageAfterSubmit"] = "ServiceScreenAddMessageAfterSubmit";
    /**
     * 704: ServiceScreenEditTicketAfterSubmit
     */
    EventHandlerType["ServiceScreenEditTicketAfterSubmit"] = "ServiceScreenEditTicketAfterSubmit";
    /**
     * 705: ServiceScreenViewCustomerAfterSubmit
     */
    EventHandlerType["ServiceScreenViewCustomerAfterSubmit"] = "ServiceScreenViewCustomerAfterSubmit";
    /**
     * 706: ServiceScreenEditCustomerAfterSubmit
     */
    EventHandlerType["ServiceScreenEditCustomerAfterSubmit"] = "ServiceScreenEditCustomerAfterSubmit";
    /**
     * 707: ServiceScreenViewCompanyAfterSubmit
     */
    EventHandlerType["ServiceScreenViewCompanyAfterSubmit"] = "ServiceScreenViewCompanyAfterSubmit";
    /**
     * 708: ServiceScreenEditCompanyAfterSubmit
     */
    EventHandlerType["ServiceScreenEditCompanyAfterSubmit"] = "ServiceScreenEditCompanyAfterSubmit";
    /**
     * 709: ServiceScreenForwardAfterSubmit
     */
    EventHandlerType["ServiceScreenForwardAfterSubmit"] = "ServiceScreenForwardAfterSubmit";
    /**
     * 710: ServiceScreenEditExtraTableAfterSubmit
     */
    EventHandlerType["ServiceScreenEditExtraTableAfterSubmit"] = "ServiceScreenEditExtraTableAfterSubmit";
    /**
     * 1001: SalesBeforeSaveAppointment
     */
    EventHandlerType["SalesBeforeSaveAppointment"] = "SalesBeforeSaveAppointment";
    /**
     * 1002: SalesBeforeSaveStakeholder
     */
    EventHandlerType["SalesBeforeSaveStakeholder"] = "SalesBeforeSaveStakeholder";
    /**
     * 1003: SalesBeforeSaveQuote
     */
    EventHandlerType["SalesBeforeSaveQuote"] = "SalesBeforeSaveQuote";
    /**
     * 1004: SalesBeforeSaveDocument
     */
    EventHandlerType["SalesBeforeSaveDocument"] = "SalesBeforeSaveDocument";
    /**
     * 1005: SalesBeforeSaveContact
     */
    EventHandlerType["SalesBeforeSaveContact"] = "SalesBeforeSaveContact";
    /**
     * 1006: SalesBeforeSavePerson
     */
    EventHandlerType["SalesBeforeSavePerson"] = "SalesBeforeSavePerson";
    /**
     * 1007: SalesBeforeSaveRelation
     */
    EventHandlerType["SalesBeforeSaveRelation"] = "SalesBeforeSaveRelation";
    /**
     * 1008: SalesBeforeSaveSale
     */
    EventHandlerType["SalesBeforeSaveSale"] = "SalesBeforeSaveSale";
    /**
     * 1009: SalesBeforeSaveProject
     */
    EventHandlerType["SalesBeforeSaveProject"] = "SalesBeforeSaveProject";
    /**
     * 1010: SalesBeforeSaveSelection
     */
    EventHandlerType["SalesBeforeSaveSelection"] = "SalesBeforeSaveSelection";
    /**
     * 1011: SalesBeforeSaveProjectMember
     */
    EventHandlerType["SalesBeforeSaveProjectMember"] = "SalesBeforeSaveProjectMember";
    /**
     * 1012: SalesBeforeSaveSelectionMember
     */
    EventHandlerType["SalesBeforeSaveSelectionMember"] = "SalesBeforeSaveSelectionMember";
    /**
     * 1013: SalesBeforeSaveQuoteLine
     */
    EventHandlerType["SalesBeforeSaveQuoteLine"] = "SalesBeforeSaveQuoteLine";
    /**
     * 1014: SalesBeforeSaveApproveQuote
     */
    EventHandlerType["SalesBeforeSaveApproveQuote"] = "SalesBeforeSaveApproveQuote";
    /**
     * 1015: SalesBeforeSaveRejectQuote
     */
    EventHandlerType["SalesBeforeSaveRejectQuote"] = "SalesBeforeSaveRejectQuote";
    /**
     * 1016: SalesBeforeSaveTicket
     */
    EventHandlerType["SalesBeforeSaveTicket"] = "SalesBeforeSaveTicket";
    /**
     * 1101: SalesAfterSaveAppointment
     */
    EventHandlerType["SalesAfterSaveAppointment"] = "SalesAfterSaveAppointment";
    /**
     * 1102: SalesAfterSaveStakeholder
     */
    EventHandlerType["SalesAfterSaveStakeholder"] = "SalesAfterSaveStakeholder";
    /**
     * 1103: SalesAfterSaveQuote
     */
    EventHandlerType["SalesAfterSaveQuote"] = "SalesAfterSaveQuote";
    /**
     * 1104: SalesAfterSaveDocument
     */
    EventHandlerType["SalesAfterSaveDocument"] = "SalesAfterSaveDocument";
    /**
     * 1105: SalesAfterSaveContact
     */
    EventHandlerType["SalesAfterSaveContact"] = "SalesAfterSaveContact";
    /**
     * 1106: SalesAfterSavePerson
     */
    EventHandlerType["SalesAfterSavePerson"] = "SalesAfterSavePerson";
    /**
     * 1107: SalesAfterSaveRelation
     */
    EventHandlerType["SalesAfterSaveRelation"] = "SalesAfterSaveRelation";
    /**
     * 1108: SalesAfterSaveSale
     */
    EventHandlerType["SalesAfterSaveSale"] = "SalesAfterSaveSale";
    /**
     * 1109: SalesAfterSaveProject
     */
    EventHandlerType["SalesAfterSaveProject"] = "SalesAfterSaveProject";
    /**
     * 1110: SalesAfterSaveSelection
     */
    EventHandlerType["SalesAfterSaveSelection"] = "SalesAfterSaveSelection";
    /**
     * 1111: SalesAfterSaveProjectMember
     */
    EventHandlerType["SalesAfterSaveProjectMember"] = "SalesAfterSaveProjectMember";
    /**
     * 1112: SalesAfterSaveSelectionMember
     */
    EventHandlerType["SalesAfterSaveSelectionMember"] = "SalesAfterSaveSelectionMember";
    /**
     * 1113: SalesAfterSaveQuoteLine
     */
    EventHandlerType["SalesAfterSaveQuoteLine"] = "SalesAfterSaveQuoteLine";
    /**
     * 1114: SalesAfterSaveApproveQuote
     */
    EventHandlerType["SalesAfterSaveApproveQuote"] = "SalesAfterSaveApproveQuote";
    /**
     * 1115: SalesAfterSaveRejectQuote
     */
    EventHandlerType["SalesAfterSaveRejectQuote"] = "SalesAfterSaveRejectQuote";
    /**
     * 1116: SalesAfterSaveTicket
     */
    EventHandlerType["SalesAfterSaveTicket"] = "SalesAfterSaveTicket";
})(EventHandlerType = exports.EventHandlerType || (exports.EventHandlerType = {}));
/**
 * Hierarchy domain
 */
var Domain;
(function (Domain) {
    /**
     * 0: Unknown folders
     */
    Domain["Unknown"] = "Unknown";
    /**
     * 1: ExtraTable folders
     */
    Domain["ExtraTables"] = "ExtraTables";
    /**
     * 2: ScreenDefinition folders
     */
    Domain["ScreenDefinitions"] = "ScreenDefinitions";
    /**
     * 3: Script folders
     */
    Domain["Scripts"] = "Scripts";
    /**
     * 4: Selection folders
     */
    Domain["Selections"] = "Selections";
    /**
     * 5: ExternalDocument folders
     */
    Domain["ExternalDocuments"] = "ExternalDocuments";
    /**
     * 6: UserGroup folders
     */
    Domain["UserGroups"] = "UserGroups";
    /**
     * 7: ExternalDocuments related to spam messages folders
     */
    Domain["ExternalDocumentRelatedToSpmMessage"] = "ExternalDocumentRelatedToSpmMessage";
    /**
     * 8: Dashboard folders
     */
    Domain["Dashboards"] = "Dashboards";
    /**
     * 9: EmailFlow folders
     */
    Domain["EmailFlows"] = "EmailFlows";
})(Domain = exports.Domain || (exports.Domain = {}));
/**
 * What is the status of this submission
 * This Enum is used by:  form_submission.status
 */
var FormSubmissionStatus;
(function (FormSubmissionStatus) {
    /**
     * 0: Unknown status
     */
    FormSubmissionStatus["Unknown"] = "Unknown";
    /**
     * 1: In progress, the customer has started filling out fields but has not yet submitted
     */
    FormSubmissionStatus["InProgress"] = "InProgress";
    /**
     * 2: EmailVerification, the customer has submitted but we are waiting for click from sent email
     */
    FormSubmissionStatus["EmailVerification"] = "EmailVerification";
    /**
     * 3: Submitted, the form is submitted but has not yet been executed
     */
    FormSubmissionStatus["Submitted"] = "Submitted";
    /**
     * 4: Processed, the actions of the form have been executed
     */
    FormSubmissionStatus["Processed"] = "Processed";
    /**
     * 5: Failed, there was an error when processing the form
     */
    FormSubmissionStatus["Failed"] = "Failed";
})(FormSubmissionStatus = exports.FormSubmissionStatus || (exports.FormSubmissionStatus = {}));
/**
 * Status of the ticket priority
 * This Enum is used by:  ticket_priority.status
 */
var TicketPriorityStatus;
(function (TicketPriorityStatus) {
    /**
     * 0: The status is unknown, should normally not occure in the database
     */
    TicketPriorityStatus["Unknown"] = "Unknown";
    /**
     * 1: The status is normal
     */
    TicketPriorityStatus["Normal"] = "Normal";
    /**
     * 2: The status is marked as deleted
     */
    TicketPriorityStatus["Deleted"] = "Deleted";
})(TicketPriorityStatus = exports.TicketPriorityStatus || (exports.TicketPriorityStatus = {}));
/**
 * The delegate method used for request assigned to this category
 * This Enum is used by:  ej_category.delegate_method
 */
var TicketCategoryDelegateMethod;
(function (TicketCategoryDelegateMethod) {
    /**
     * 0: The delegate method is unknown, should normally not occure in the database
     */
    TicketCategoryDelegateMethod["Unknown"] = "Unknown";
    /**
     * 1: Delegate request even among the members of the category
     */
    TicketCategoryDelegateMethod["Even"] = "Even";
    /**
     * 2: Use weights on each member of the category when delegating requests
     */
    TicketCategoryDelegateMethod["Weighted"] = "Weighted";
    /**
     * 3: The user with the least active request will be delegated the request
     */
    TicketCategoryDelegateMethod["Unfair"] = "Unfair";
    /**
     * 4: Do not delegate request. Instead set them as unassigned
     */
    TicketCategoryDelegateMethod["Not"] = "Not";
})(TicketCategoryDelegateMethod = exports.TicketCategoryDelegateMethod || (exports.TicketCategoryDelegateMethod = {}));
/**
 * Default status for requests. Note that this is a preference which should be respected if making UI. It is not enforced by the APIs
 */
var TicketCategoryClosingStatus;
(function (TicketCategoryClosingStatus) {
    /**
     * 0: The ticket status should respect the user defined behaviour
     */
    TicketCategoryClosingStatus["UserDefined"] = "UserDefined";
    /**
     * 1: Indicates that the ticket status should be active as default
     */
    TicketCategoryClosingStatus["Active"] = "Active";
    /**
     * 2: Indicates that the ticket status should be closed as default
     */
    TicketCategoryClosingStatus["Closed"] = "Closed";
    /**
     * 3: Indicates that the ticket status should be postponed as default
     */
    TicketCategoryClosingStatus["Postponed"] = "Postponed";
})(TicketCategoryClosingStatus = exports.TicketCategoryClosingStatus || (exports.TicketCategoryClosingStatus = {}));
/**
 * Flags for the ticket category
 * This Enum is used by:  ej_category.flags
 * This Enum consists of flag values that can be combined.
 */
var TicketCategoryFlags;
(function (TicketCategoryFlags) {
    /**
     * 0: No flags set
     */
    TicketCategoryFlags[TicketCategoryFlags["Unknown"] = 0] = "Unknown";
    /**
     * 1: The category is set to internal and is not available in the Customer Centre
     */
    TicketCategoryFlags[TicketCategoryFlags["Internal"] = 1] = "Internal";
    /**
     * 2: Only assign requests to logged in users
     */
    TicketCategoryFlags[TicketCategoryFlags["OnlyLoggedInUsers"] = 2] = "OnlyLoggedInUsers";
    /**
     * 4: Assign to category administrator if no one is available
     */
    TicketCategoryFlags[TicketCategoryFlags["DefaultToCategoryMaster"] = 4] = "DefaultToCategoryMaster";
    /**
     * 8: Show category in status view
     */
    TicketCategoryFlags[TicketCategoryFlags["ListInMain"] = 8] = "ListInMain";
    /**
     * 16: Reassign requests on new message if user is not present
     */
    TicketCategoryFlags[TicketCategoryFlags["RedelegateNewMsg"] = 16] = "RedelegateNewMsg";
    /**
     * 32: Assign to our service contact if available
     */
    TicketCategoryFlags[TicketCategoryFlags["DelegateToOurContact"] = 32] = "DelegateToOurContact";
    /**
     * 64: Merge outbound e-mails for this category with reply template
     */
    TicketCategoryFlags[TicketCategoryFlags["PropagateReplyTemplate"] = 64] = "PropagateReplyTemplate";
    /**
     * 128: Only members have access to requests in this category
     */
    TicketCategoryFlags[TicketCategoryFlags["MembersOnly"] = 128] = "MembersOnly";
    /**
     * 256: Send notification to members about new request
     */
    TicketCategoryFlags[TicketCategoryFlags["NotifyMembers"] = 256] = "NotifyMembers";
    /**
     * 512: Take ownership by default when replying
     */
    TicketCategoryFlags[TicketCategoryFlags["AcceptWhenReplying"] = 512] = "AcceptWhenReplying";
})(TicketCategoryFlags = exports.TicketCategoryFlags || (exports.TicketCategoryFlags = {}));
/**
 * Flags for the ticket priority
 * This Enum is used by:  ticket_priority.flags
 * This Enum consists of flag values that can be combined.
 */
var TicketPriorityFlags;
(function (TicketPriorityFlags) {
    /**
     * 0: No flags set
     */
    TicketPriorityFlags[TicketPriorityFlags["Unknown"] = 0] = "Unknown";
    /**
     * 1: The ticket priority will be avilable in the Customer Centre
     */
    TicketPriorityFlags[TicketPriorityFlags["External"] = 1] = "External";
    /**
     * 2: This is the ticket priority that should default be set in the UI when creating a request
     */
    TicketPriorityFlags[TicketPriorityFlags["Default"] = 2] = "Default";
    /**
     * 4: Escalate requests according to time frame
     */
    TicketPriorityFlags[TicketPriorityFlags["AlertSchedule"] = 4] = "AlertSchedule";
})(TicketPriorityFlags = exports.TicketPriorityFlags || (exports.TicketPriorityFlags = {}));
/**
 * The different types of escalate events that can be set
 * This Enum is used by:  ticket_priority.ticket_read; ticket_priority.changed_owner; ticket_priority.ticket_newinfo; ticket_priority.ticket_closed; ticket_priority.ticket_changed_priority; ticket_priority.ticket_new
 */
var TicketPriorityEscalateEvent;
(function (TicketPriorityEscalateEvent) {
    /**
     * -1: No esclate event set
     */
    TicketPriorityEscalateEvent["None"] = "None";
    /**
     * 0: This event will stop the escalation chain
     */
    TicketPriorityEscalateEvent["Stop"] = "Stop";
    /**
     * 1: Continue the escalation event from where it was previously stopped
     */
    TicketPriorityEscalateEvent["Continue"] = "Continue";
    /**
     * 2: Start the escalation chain over from the beginning
     */
    TicketPriorityEscalateEvent["Restart"] = "Restart";
})(TicketPriorityEscalateEvent = exports.TicketPriorityEscalateEvent || (exports.TicketPriorityEscalateEvent = {}));
/**
 * Indicates if a ticket is external or internal
 * This Enum is used by:  ej_message.slevel; ticket.slevel
 */
var TicketSecurityLevel;
(function (TicketSecurityLevel) {
    /**
     * 0: Unknown level
     */
    TicketSecurityLevel["Unknown"] = "Unknown";
    /**
     * 1: Internal tickets will not be shown on the Customer Centre
     */
    TicketSecurityLevel["Internal"] = "Internal";
    /**
     * 2: External tickets will be shown on the Customer Centre
     */
    TicketSecurityLevel["External"] = "External";
})(TicketSecurityLevel = exports.TicketSecurityLevel || (exports.TicketSecurityLevel = {}));
/**
 * Whether the owner has read the ticket or not (red, yellow, green)
 * This Enum is used by:  ticket.read_status
 */
var TicketReadStatus;
(function (TicketReadStatus) {
    /**
     * 0: Unknown status
     */
    TicketReadStatus["Unknown"] = "Unknown";
    /**
     * 1: The ticket has been read by the owner
     */
    TicketReadStatus["Green"] = "Green";
    /**
     * 2: The ticket has received new information since last read
     */
    TicketReadStatus["Yellow"] = "Yellow";
    /**
     * 3: The ticket is unread by the owner
     */
    TicketReadStatus["Red"] = "Red";
})(TicketReadStatus = exports.TicketReadStatus || (exports.TicketReadStatus = {}));
/**
 * Indicates if the field body contains plain or html text
 * This Enum is used by:  ej_message.type
 */
var TicketMessageType;
(function (TicketMessageType) {
    /**
     * 0: Unknown type
     */
    TicketMessageType["Unknown"] = "Unknown";
    /**
     * 1: The body field contains plain text
     */
    TicketMessageType["Plain"] = "Plain";
    /**
     * 2: The body field contains html text
     */
    TicketMessageType["Html"] = "Html";
})(TicketMessageType = exports.TicketMessageType || (exports.TicketMessageType = {}));
/**
 * Classification of ticket messages
 * This Enum is used by:  ej_message.message_category
 */
var TicketMessageCategory;
(function (TicketMessageCategory) {
    /**
     * 0: A normal message
     */
    TicketMessageCategory["Message"] = "Message";
    /**
     * 1: Email bounce
     */
    TicketMessageCategory["Bounce"] = "Bounce";
    /**
     * 2: This message is the error message returned by the sending system (for example a mail server)
     */
    TicketMessageCategory["OutboxFailed"] = "OutboxFailed";
})(TicketMessageCategory = exports.TicketMessageCategory || (exports.TicketMessageCategory = {}));
/**
 * Indicates what design type this message is created with
 * This Enum is used by:  s_message.designtype
 */
var DesignType;
(function (DesignType) {
    /**
     * 0: Unknown type
     */
    DesignType["Unknown"] = "Unknown";
    /**
     * 1: Created with SOEditor
     */
    DesignType["SOEditor"] = "SOEditor";
    /**
     * 2: Created with Unlayer editor
     */
    DesignType["Unlayer"] = "Unlayer";
})(DesignType = exports.DesignType || (exports.DesignType = {}));
/**
 * Bitmask defining what type of shipment message this is
 * This Enum is used by:  s_message.flags
 * This Enum consists of flag values that can be combined.
 */
var ShipmentMessageType;
(function (ShipmentMessageType) {
    /**
     * 1: Contains a plain part
     */
    ShipmentMessageType[ShipmentMessageType["Plain"] = 1] = "Plain";
    /**
     * 2: Contains a HTML part
     */
    ShipmentMessageType[ShipmentMessageType["Html"] = 2] = "Html";
    /**
     * 4: Obsolete
     */
    ShipmentMessageType[ShipmentMessageType["SourceView"] = 4] = "SourceView";
    /**
     * 8: Contains a SMS
     */
    ShipmentMessageType[ShipmentMessageType["Sms"] = 8] = "Sms";
    /**
     * 16: Contains a document. The document_message field contains the id of the actual document
     */
    ShipmentMessageType[ShipmentMessageType["Document"] = 16] = "Document";
})(ShipmentMessageType = exports.ShipmentMessageType || (exports.ShipmentMessageType = {}));
/**
 * Bitmask available ticket alert action
 * This Enum consists of flag values that can be combined.
 */
var TicketAlertAction;
(function (TicketAlertAction) {
    /**
     * 1: Controls Reassign
     */
    TicketAlertAction[TicketAlertAction["ActionDelegate"] = 1] = "ActionDelegate";
    /**
     * 2: Undefined and generated value 2
     */
    TicketAlertAction[TicketAlertAction["UndefinedValue2"] = 2] = "UndefinedValue2";
    /**
     * 4: Controls Email others
     */
    TicketAlertAction[TicketAlertAction["ActionEmail"] = 4] = "ActionEmail";
    /**
     * 8: Controls Email Contact
     */
    TicketAlertAction[TicketAlertAction["ActionEmailCustomer"] = 8] = "ActionEmailCustomer";
    /**
     * 16: Controls Email User
     */
    TicketAlertAction[TicketAlertAction["ActionEmailUser"] = 16] = "ActionEmailUser";
    /**
     * 32: Controls Email Category administrator
     */
    TicketAlertAction[TicketAlertAction["ActionEmailCategoryMaster"] = 32] = "ActionEmailCategoryMaster";
    /**
     * 64: Controls SMS others
     */
    TicketAlertAction[TicketAlertAction["ActionSms"] = 64] = "ActionSms";
    /**
     * 128: Controls SMS Contact
     */
    TicketAlertAction[TicketAlertAction["ActionSmsCustomer"] = 128] = "ActionSmsCustomer";
    /**
     * 256: Controls SMS User
     */
    TicketAlertAction[TicketAlertAction["ActionSmsUser"] = 256] = "ActionSmsUser";
    /**
     * 512: Controls SMS Category administrator
     */
    TicketAlertAction[TicketAlertAction["ActionSmsCategoryMaster"] = 512] = "ActionSmsCategoryMaster";
    /**
     * 1024: Controls Script
     */
    TicketAlertAction[TicketAlertAction["ActionScript"] = 1024] = "ActionScript";
})(TicketAlertAction = exports.TicketAlertAction || (exports.TicketAlertAction = {}));
/**
 * Value for field 'badge' in table 'ej_message'. Defines the initial source of a message.
 * This Enum is used by:  ej_message.badge
 */
var BadgeType;
(function (BadgeType) {
    /**
     * 0: Initial message source is unknown
     */
    BadgeType["Unknown"] = "Unknown";
    /**
     * 1: Message created as a reply
     */
    BadgeType["Reply"] = "Reply";
    /**
     * 2: Message created as a forward
     */
    BadgeType["Forward"] = "Forward";
    /**
     * 3: Message created as an internal comment
     */
    BadgeType["Comment"] = "Comment";
    /**
     * 4: Message created as a result of other events processing
     */
    BadgeType["Incoming"] = "Incoming";
    /**
     * 5: Message created as first outgoing message on ticket
     */
    BadgeType["Outgoing"] = "Outgoing";
})(BadgeType = exports.BadgeType || (exports.BadgeType = {}));
/**
 * Chat Topic widget_theme: classic(0) or modern(1).
 * This Enum is used by:  chat_topic.widget_theme
 */
var WidgetTheme;
(function (WidgetTheme) {
    /**
     * 0: Set widget theme to classic
     */
    WidgetTheme["Classic"] = "Classic";
    /**
     * 1: Set widget theme to modern
     */
    WidgetTheme["Modern"] = "Modern";
})(WidgetTheme = exports.WidgetTheme || (exports.WidgetTheme = {}));
/**
 * Chat Topic required fields in pre-form.
 * This Enum is used by:  chat_topic.widget_offline_fields; chat_topic.widget_required_fields
 * This Enum consists of flag values that can be combined.
 */
var WidgetRequiredFields;
(function (WidgetRequiredFields) {
    /**
     * 0: No required fields
     */
    WidgetRequiredFields[WidgetRequiredFields["None"] = 0] = "None";
    /**
     * 1: Email field is required
     */
    WidgetRequiredFields[WidgetRequiredFields["Email"] = 1] = "Email";
    /**
     * 2: Name field is required
     */
    WidgetRequiredFields[WidgetRequiredFields["Name"] = 2] = "Name";
    /**
     * 4: Company field is required
     */
    WidgetRequiredFields[WidgetRequiredFields["Company"] = 4] = "Company";
    /**
     * 8: Phone field is required
     */
    WidgetRequiredFields[WidgetRequiredFields["Phone"] = 8] = "Phone";
    /**
     * 16: Country field is required
     */
    WidgetRequiredFields[WidgetRequiredFields["Country"] = 16] = "Country";
})(WidgetRequiredFields = exports.WidgetRequiredFields || (exports.WidgetRequiredFields = {}));
/**
 * Value for field 'flags' in table 'chat_session'.
 * This Enum is used by:  chat_session.flags
 * This Enum consists of flag values that can be combined.
 */
var ChatSessionFlags;
(function (ChatSessionFlags) {
    /**
     * 0: Set if the customer is currently typing a chat message
     */
    ChatSessionFlags[ChatSessionFlags["CustomerIsTyping"] = 0] = "CustomerIsTyping";
    /**
     * 1: Set if the agent is currently typing a chat message
     */
    ChatSessionFlags[ChatSessionFlags["UserIsTyping"] = 1] = "UserIsTyping";
})(ChatSessionFlags = exports.ChatSessionFlags || (exports.ChatSessionFlags = {}));
/**
 * Value for field 'type' in table 'cust_config'.
 * This Enum is used by:  cust_config.type
 */
var ConfigType;
(function (ConfigType) {
    /**
     * 0: The row contains style data
     */
    ConfigType["Style"] = "Style";
    /**
     * 1: The row contains options data
     */
    ConfigType["Options"] = "Options";
})(ConfigType = exports.ConfigType || (exports.ConfigType = {}));
/**
 * What kind of form is this
 * This Enum is used by:  form.type
 */
var FormType;
(function (FormType) {
    /**
     * 0: A form instance
     */
    FormType["Normal"] = "Normal";
    /**
     * 1: A form template
     */
    FormType["Template"] = "Template";
})(FormType = exports.FormType || (exports.FormType = {}));
/**
 * Chat Session status
 * This Enum is used by:  chat_session.status
 */
var ChatSessionStatus;
(function (ChatSessionStatus) {
    /**
     * 0: Unknown
     */
    ChatSessionStatus["Invalid"] = "Invalid";
    /**
     * 1: PreChatForm
     */
    ChatSessionStatus["PreChatForm"] = "PreChatForm";
    /**
     * 2: FAQ
     */
    ChatSessionStatus["Faq"] = "Faq";
    /**
     * 3: OfflineForm
     */
    ChatSessionStatus["OfflineForm"] = "OfflineForm";
    /**
     * 4: InQueue - waiting to be picked up
     */
    ChatSessionStatus["InQueue"] = "InQueue";
    /**
     * 5: CustomerLast - customer wrote last message
     */
    ChatSessionStatus["CustomerLast"] = "CustomerLast";
    /**
     * 6: UserLast - user agent wrote last message
     */
    ChatSessionStatus["UserLast"] = "UserLast";
    /**
     * 7: Finished - may be deleted later
     */
    ChatSessionStatus["Finished"] = "Finished";
    /**
     * 8: Deleted - ready to delete. Usually cleaned within 24 hrs
     */
    ChatSessionStatus["Deleted"] = "Deleted";
    /**
     * 9: Closed
     */
    ChatSessionStatus["Closed"] = "Closed";
    /**
     * 10: RequestPosted
     */
    ChatSessionStatus["RequestPosted"] = "RequestPosted";
    /**
     * 11: ClosedFromQueue
     */
    ChatSessionStatus["ClosedFromQueue"] = "ClosedFromQueue";
})(ChatSessionStatus = exports.ChatSessionStatus || (exports.ChatSessionStatus = {}));
/**
 * Chat Message type
 * This Enum is used by:  chat_message.type
 */
var ChatMessageType;
(function (ChatMessageType) {
    /**
     * 0: Invalid
     */
    ChatMessageType["Invalid"] = "Invalid";
    /**
     * 1: Message is from user agent to customer
     */
    ChatMessageType["ToCustomer"] = "ToCustomer";
    /**
     * 2: Message is from customer to user agent
     */
    ChatMessageType["ToUser"] = "ToUser";
    /**
     * 3: Special message - see SpecialType field for details
     */
    ChatMessageType["Special"] = "Special";
})(ChatMessageType = exports.ChatMessageType || (exports.ChatMessageType = {}));
/**
 * Chat Message Special type
 * This Enum is used by:  chat_message.special_type
 */
var ChatMessageSpecialType;
(function (ChatMessageSpecialType) {
    /**
     * 0: None
     */
    ChatMessageSpecialType["None"] = "None";
    /**
     * 1: Welcome
     */
    ChatMessageSpecialType["Welcome"] = "Welcome";
    /**
     * 2: Url
     */
    ChatMessageSpecialType["Url"] = "Url";
    /**
     * 3: Block
     */
    ChatMessageSpecialType["Block"] = "Block";
    /**
     * 5: NewSession
     */
    ChatMessageSpecialType["NewSession"] = "NewSession";
    /**
     * 6: TransferedSession
     */
    ChatMessageSpecialType["TransferedSession"] = "TransferedSession";
    /**
     * 7: Error
     */
    ChatMessageSpecialType["Error"] = "Error";
    /**
     * 8: SessionDeleted
     */
    ChatMessageSpecialType["SessionDeleted"] = "SessionDeleted";
    /**
     * 9: FaqSuccessQuestion
     */
    ChatMessageSpecialType["FaqSuccessQuestion"] = "FaqSuccessQuestion";
    /**
     * 10: ClosedByUser
     */
    ChatMessageSpecialType["ClosedByUser"] = "ClosedByUser";
    /**
     * 11: ClosedByCustomer
     */
    ChatMessageSpecialType["ClosedByCustomer"] = "ClosedByCustomer";
    /**
     * 12: ClosedByIdle
     */
    ChatMessageSpecialType["ClosedByIdle"] = "ClosedByIdle";
    /**
     * 13: TransferRejected
     */
    ChatMessageSpecialType["TransferRejected"] = "TransferRejected";
    /**
     * 14: ReopenedByCustomer
     */
    ChatMessageSpecialType["ReopenedByCustomer"] = "ReopenedByCustomer";
    /**
     * 15: ClickedOption
     */
    ChatMessageSpecialType["ClickedOption"] = "ClickedOption";
    /**
     * 16: Bot message
     */
    ChatMessageSpecialType["BotMessage"] = "BotMessage";
    /**
     * 17: Message has a list of clickable options. Options are as JSON array in specialParam
     */
    ChatMessageSpecialType["Options"] = "Options";
    /**
     * 18: Uploaded file has illegal type
     */
    ChatMessageSpecialType["IllegalFileType"] = "IllegalFileType";
})(ChatMessageSpecialType = exports.ChatMessageSpecialType || (exports.ChatMessageSpecialType = {}));
/**
 * Chat widget size: normal or large
 */
var ChatWidgetSize;
(function (ChatWidgetSize) {
    /**
     * 0: Normal chat widget size.
     */
    ChatWidgetSize["Normal"] = "Normal";
    /**
     * 1: Large size chat widget.
     */
    ChatWidgetSize["Large"] = "Large";
})(ChatWidgetSize = exports.ChatWidgetSize || (exports.ChatWidgetSize = {}));
//# sourceMappingURL=Enums.js.map