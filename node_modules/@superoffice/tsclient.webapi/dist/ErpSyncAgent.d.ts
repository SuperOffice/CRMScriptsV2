import { AxiosRequestConfig } from 'axios';
import * as moment from 'moment';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Services for the ERP Integration Services feature
 *
 * **Online Restricted:** This agent is not available in Online by default. Access must be requested specifically when app is registered. Intended for ERP integration apps.
 */
export interface IErpSyncAgent {
    CreateDefaultErpSyncConnectorEntity(): Promise<carriers.ErpSyncConnectorEntity>;
    SaveErpSyncConnectorEntity(entity: carriers.ErpSyncConnectorEntity): Promise<carriers.ErpSyncConnectorEntity>;
    DeleteErpSyncConnectorEntity(ErpSyncConnectorEntityId: number): Promise<void>;
    GetConnection(request: carriers.ErpSync_GetConnectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpConnection>;
    GetConnection(erpConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpConnection>;
    SaveConnection(request: carriers.ErpSync_SaveConnectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpConnection>;
    SaveConnection(connection: carriers.ErpConnection, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpConnection>;
    DeleteConnection(request: carriers.ErpSync_DeleteConnectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteConnection(erpConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetConfigurationFields(request: carriers.ErpSync_GetConfigurationFieldsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FieldMetadata[]>;
    GetConfigurationFields(erpConnectorId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FieldMetadata[]>;
    GetErpConnectionConfigFields(request: carriers.ErpSync_GetErpConnectionConfigFieldsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    GetErpConnectionConfigFields(erpConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    ToggleErpConnectionActive(request: carriers.ErpSync_ToggleErpConnectionActiveRequest, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    ToggleErpConnectionActive(erpConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    TestConnectionById(request: carriers.ErpSync_TestConnectionByIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    TestConnectionById(erpConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    TestConnectionByConfig(request: carriers.ErpSync_TestConnectionByConfigRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    TestConnectionByConfig(erpConnectionId: number, configFields: carriers.StringDictionary, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    SaveErpConnectionSyncPriorities(request: carriers.ErpSync_SaveErpConnectionSyncPrioritiesRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    SaveErpConnectionSyncPriorities(erpConnectionIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    MoveErpFieldItem(request: carriers.ErpSync_MoveErpFieldItemRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    MoveErpFieldItem(erpFieldId: number, direction: number, erpConnectionId: number, erpActorType: enums.ErpActorType, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SupportsAdvancedSearch(request: carriers.ErpSync_SupportsAdvancedSearchRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    SupportsAdvancedSearch(erpConnectionId: number, erpActorType: enums.ErpActorType, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    GetAllConnectors(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItem[]>;
    GetAllConnections(request: carriers.ErpSync_GetAllConnectionsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpConnection[]>;
    GetAllConnections(includeDeleted: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpConnection[]>;
    GetConnectionsAndDisplayFields(request: carriers.ErpSync_GetConnectionsAndDisplayFieldsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpConnectionData[]>;
    GetConnectionsAndDisplayFields(crmActorType: enums.CrmActorType, entityId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpConnectionData[]>;
    GetErpFieldValues(request: carriers.ErpSync_GetErpFieldValuesRequest, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    GetErpFieldValues(erpConnectionId: number, crmActorType: enums.CrmActorType, entityId: number, fieldKeys: string[], webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    GetFieldsForNewErpActor(request: carriers.ErpSync_GetFieldsForNewErpActorRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FieldMetadata[]>;
    GetFieldsForNewErpActor(erpConnectionId: number, erpActorType: enums.ErpActorType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FieldMetadata[]>;
    GetConnectionListMappings(request: carriers.ErpSync_GetConnectionListMappingsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpConnectionListMappingContainer>;
    GetConnectionListMappings(erpConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpConnectionListMappingContainer>;
    SaveConnectionListMappings(request: carriers.ErpSync_SaveConnectionListMappingsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpConnectionListMappingContainer>;
    SaveConnectionListMappings(listMapping: carriers.ErpConnectionListMappingContainer, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpConnectionListMappingContainer>;
    ConnectActor(request: carriers.ErpSync_ConnectActorRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    ConnectActor(erpConnectionId: number, crmRecordId: number, crmActorType: enums.CrmActorType, erpKey: string, erpActorType: enums.ErpActorType, fieldValues: carriers.ErpSyncFieldValue[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    TryConnectActor(request: carriers.ErpSync_TryConnectActorRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    TryConnectActor(erpConnectionId: number, crmRecordId: number, crmActorType: enums.CrmActorType, erpKey: string, erpActorType: enums.ErpActorType, fieldValues: carriers.ErpSyncFieldValue[], webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    GetFieldValuesFromCrm(request: carriers.ErpSync_GetFieldValuesFromCrmRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncFieldValue[]>;
    GetFieldValuesFromCrm(recordId: number, actorTypeCrm: enums.CrmActorType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncFieldValue[]>;
    GetFieldValuesFromErp(request: carriers.ErpSync_GetFieldValuesFromErpRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncFieldValue[]>;
    GetFieldValuesFromErp(erpConnectionId: number, actorTypeErp: enums.ErpActorType, erpKey: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncFieldValue[]>;
    GetActorTypeMapping(request: carriers.ErpSync_GetActorTypeMappingRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncActorTypeMapping>;
    GetActorTypeMapping(erpConnectionId: number, actorType: enums.ErpActorType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncActorTypeMapping>;
    CreateActorLink(request: carriers.ErpSync_CreateActorLinkRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    CreateActorLink(erpConnectionId: number, crmRecordId: number, crmActorType: enums.CrmActorType, erpKey: string, erpActorType: enums.ErpActorType, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    BreakActorLink(request: carriers.ErpSync_BreakActorLinkRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    BreakActorLink(erpConnectionId: number, crmRecordId: number, crmActorType: enums.CrmActorType, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    CreateErpActorFromCrm(request: carriers.ErpSync_CreateErpActorFromCrmRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    CreateErpActorFromCrm(connectionId: number, crmEntityId: number, erpActorType: enums.ErpActorType, crmActorType: enums.CrmActorType, erpFieldKeyValues: carriers.StringDictionary, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    SaveActorTypeMapping(request: carriers.ErpSync_SaveActorTypeMappingRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncActorTypeMapping>;
    SaveActorTypeMapping(mapping: carriers.ErpSyncActorTypeMapping, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncActorTypeMapping>;
    ValidateArchiveColumnConfig(request: carriers.ErpSync_ValidateArchiveColumnConfigRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    ValidateArchiveColumnConfig(listOwner: string, erpConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    UpdateConnectionFields(request: carriers.ErpSync_UpdateConnectionFieldsRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    UpdateConnectionFields(erpConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    GetCrmActorType(request: carriers.ErpSync_GetCrmActorTypeRequest, webapi_options?: base.WebApiRequestOptions): Promise<enums.CrmActorType>;
    GetCrmActorType(erpConnectionId: number, erpActorType: enums.ErpActorType, webapi_options?: base.WebApiRequestOptions): Promise<enums.CrmActorType>;
    GetErpSyncConnectionSummary(request: carriers.ErpSync_GetErpSyncConnectionSummaryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncConnectionSummary>;
    GetErpSyncConnectionSummary(erpSyncConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncConnectionSummary>;
    GetErpSyncConnectorEntity(erpSyncConnectorEntityId: number): Promise<carriers.ErpSyncConnectorEntity>;
    CanDeleteErpSyncConnectorEntity(request: carriers.ErpSync_CanDeleteErpSyncConnectorEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<enums.ErpSyncResponseCode>;
    CanDeleteErpSyncConnectorEntity(erpSyncConnectorId: number, webapi_options?: base.WebApiRequestOptions): Promise<enums.ErpSyncResponseCode>;
    TestConnectorUrl(request: carriers.ErpSync_TestConnectorUrlRequest, webapi_options?: base.WebApiRequestOptions): Promise<enums.ErpSyncResponseCode>;
    TestConnectorUrl(url: string, webapi_options?: base.WebApiRequestOptions): Promise<enums.ErpSyncResponseCode>;
    SaveDefaultValueInfo(request: carriers.ErpSync_SaveDefaultValueInfoRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncDefaultValue>;
    SaveDefaultValueInfo(erpSyncDefaultValue: carriers.ErpSyncDefaultValue, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncDefaultValue>;
    GetDefaultValueInfo(request: carriers.ErpSync_GetDefaultValueInfoRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncDefaultValue>;
    GetDefaultValueInfo(erpFieldId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncDefaultValue>;
    SyncAll(webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    ForceSyncAll(webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    ForceResync(request: carriers.ErpSync_ForceResyncRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    ForceResync(erpConnectionId: number, internalKeyIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    ForceResyncNoBlankValues(request: carriers.ErpSync_ForceResyncNoBlankValuesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    ForceResyncNoBlankValues(erpConnectionId: number, internalKeyIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    ForceResyncBatchTask(request: carriers.ErpSync_ForceResyncBatchTaskRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    ForceResyncBatchTask(erpConnectionId: number, internalKeyIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    ForceResyncExternal(request: carriers.ErpSync_ForceResyncExternalRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    ForceResyncExternal(erpConnectionId: number, erpActorType: enums.ErpActorType, externalKeys: string[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    ForceResyncExternalNoBlankValues(request: carriers.ErpSync_ForceResyncExternalNoBlankValuesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    ForceResyncExternalNoBlankValues(erpConnectionId: number, erpActorType: enums.ErpActorType, externalKeys: string[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    GetEngineStatus(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncEngineStatus>;
    ChangeEngineStatus(request: carriers.ErpSync_ChangeEngineStatusRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncEngineStatus>;
    ChangeEngineStatus(run: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncEngineStatus>;
    ChangeEngineInterval(request: carriers.ErpSync_ChangeEngineIntervalRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    ChangeEngineInterval(interval: moment.Duration, webapi_options?: base.WebApiRequestOptions): Promise<void>;
}
/**
 * Services for the ERP Integration Services feature
 */
export declare class ErpSyncAgent extends base.WebApiBase implements IErpSyncAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * Set default values into a new ErpSyncConnectorEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultErpSyncConnectorEntity(options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncConnectorEntity>;
    SaveErpSyncConnectorEntity(entity: carriers.ErpSyncConnectorEntity, options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncConnectorEntity>;
    DeleteErpSyncConnectorEntity(ErpSyncConnectorEntityId: number, options?: base.WebApiRequestOptions): Promise<void>;
    private _GetConnection;
    /**
     * Returns the specified connection.
     * @param request - ErpConnectionId
     * @returns The connection
     */
    GetConnection(request: carriers.ErpSync_GetConnectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpConnection>;
    /**
     * Returns the specified connection.
     * @param erpConnectionId - Primary key of the connection
     * @returns The connection
     */
    GetConnection(erpConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpConnection>;
    private _SaveConnection;
    /**
     * Saves a connection to the database.
     * @param request - Connection
     * @returns The resulting connection.
     */
    SaveConnection(request: carriers.ErpSync_SaveConnectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpConnection>;
    /**
     * Saves a connection to the database.
     * @param connection - The connection to save.
     * @returns The resulting connection.
     */
    SaveConnection(connection: carriers.ErpConnection, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpConnection>;
    private _DeleteConnection;
    /**
     * Deletes a connection from the database.
     * @param request - ErpConnectionId
     * @returns A void return
     */
    DeleteConnection(request: carriers.ErpSync_DeleteConnectionRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Deletes a connection from the database.
     * @param erpConnectionId - Primary key of the connection
     * @returns A void return
     */
    DeleteConnection(erpConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetConfigurationFields;
    /**
     * Returns all fields needed to connect to the given connector
     * @param request - ErpConnectorId
     * @returns The fields
     */
    GetConfigurationFields(request: carriers.ErpSync_GetConfigurationFieldsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FieldMetadata[]>;
    /**
     * Returns all fields needed to connect to the given connector
     * @param erpConnectorId - The id of the erp connector
     * @returns The fields
     */
    GetConfigurationFields(erpConnectorId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FieldMetadata[]>;
    private _GetErpConnectionConfigFields;
    /**
     * Returns the config fields for the connection.
     * @param request - ErpConnectionId
     * @returns Config Fields
     */
    GetErpConnectionConfigFields(request: carriers.ErpSync_GetErpConnectionConfigFieldsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    /**
     * Returns the config fields for the connection.
     * @param erpConnectionId - Primary key of the erp connection
     * @returns Config Fields
     */
    GetErpConnectionConfigFields(erpConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    private _ToggleErpConnectionActive;
    /**
     * Toggles the Active state of the connection
     * @param request - ErpConnectionId
     * @returns Contains the reason for why the toggle failed. Empty if operation was successful
     */
    ToggleErpConnectionActive(request: carriers.ErpSync_ToggleErpConnectionActiveRequest, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    /**
     * Toggles the Active state of the connection
     * @param erpConnectionId - Primary key of the erp connection
     * @returns Contains the reason for why the toggle failed. Empty if operation was successful
     */
    ToggleErpConnectionActive(erpConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    private _TestConnectionById;
    /**
     * Tests to see if we can establish a connection with the given config fields
     * @param request - ErpConnectionId
     * @returns Returns true if success
     */
    TestConnectionById(request: carriers.ErpSync_TestConnectionByIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Tests to see if we can establish a connection with the given config fields
     * @param erpConnectionId - The id of the connection
     * @returns Returns true if success
     */
    TestConnectionById(erpConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _TestConnectionByConfig;
    /**
     * Tests to see if the given connection has a valid connection to its connector
     * @param request - ErpConnectionId, ConfigFields
     * @returns Returns true if success
     */
    TestConnectionByConfig(request: carriers.ErpSync_TestConnectionByConfigRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Tests to see if the given connection has a valid connection to its connector
     * @param erpConnectionId - The id of the connector we try to connect to
     * @param configFields - The config fields used to test connection
     * @returns Returns true if success
     */
    TestConnectionByConfig(erpConnectionId: number, configFields: carriers.StringDictionary, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _SaveErpConnectionSyncPriorities;
    /**
     * Takes an array of the ErpConnection ids and saves these as ordered sync priorities
     * @param request - ErpConnectionIds
     * @returns Returns true if new sync priorities is saved
     */
    SaveErpConnectionSyncPriorities(request: carriers.ErpSync_SaveErpConnectionSyncPrioritiesRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Takes an array of the ErpConnection ids and saves these as ordered sync priorities
     * @param erpConnectionIds - The id put in array in the same order as the priorities
     * @returns Returns true if new sync priorities is saved
     */
    SaveErpConnectionSyncPriorities(erpConnectionIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _MoveErpFieldItem;
    /**
     * Moves the rank of the erp field up or down
     * @param request - ErpFieldId, Direction, ErpConnectionId, ErpActorType
     * @returns
     */
    MoveErpFieldItem(request: carriers.ErpSync_MoveErpFieldItemRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Moves the rank of the erp field up or down
     * @param erpFieldId - The id of the erp field to move
     * @param direction - Positive value to increase rank, negative to decrease.
     * @param erpConnectionId - The id of the connection
     * @param erpActorType - The actor type for which we want to rank fields
     * @returns
     */
    MoveErpFieldItem(erpFieldId: number, direction: number, erpConnectionId: number, erpActorType: enums.ErpActorType, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SupportsAdvancedSearch;
    /**
     * Indicates if the connection supports advanced search for the given erp actor
     * @param request - ErpConnectionId, ErpActorType
     * @returns True if advanced search is supported
     */
    SupportsAdvancedSearch(request: carriers.ErpSync_SupportsAdvancedSearchRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Indicates if the connection supports advanced search for the given erp actor
     * @param erpConnectionId - Ths id of the connection
     * @param erpActorType - The erp actor type to check for
     * @returns True if advanced search is supported
     */
    SupportsAdvancedSearch(erpConnectionId: number, erpActorType: enums.ErpActorType, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _GetAllConnectors;
    /**
     * Returns all ERP Sync connectors. Uses the `ErpConnector` archive.
     * @returns The connector id, name, url
     */
    GetAllConnectors(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ListItem[]>;
    private _GetAllConnections;
    /**
     * Returns all ERP Sync connections without config field data. Uses the `ErpConnection` archive.
     * @param request - IncludeDeleted
     * @returns The connection id, name, description
     */
    GetAllConnections(request: carriers.ErpSync_GetAllConnectionsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpConnection[]>;
    /**
     * Returns all ERP Sync connections without config field data. Uses the `ErpConnection` archive.
     * @param includeDeleted - Include deleted connections in the result?
     * @returns The connection id, name, description
     */
    GetAllConnections(includeDeleted: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpConnection[]>;
    private _GetConnectionsAndDisplayFields;
    /**
     * Get all connection statuses and fields for a given entity
     * @param request - CrmActorType, EntityId
     * @returns An array of ErpConnectionData carriers
     */
    GetConnectionsAndDisplayFields(request: carriers.ErpSync_GetConnectionsAndDisplayFieldsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpConnectionData[]>;
    /**
     * Get all connection statuses and fields for a given entity
     * @param crmActorType - The type of the CRM entity
     * @param entityId - The id of the entity
     * @returns An array of ErpConnectionData carriers
     */
    GetConnectionsAndDisplayFields(crmActorType: enums.CrmActorType, entityId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpConnectionData[]>;
    private _GetErpFieldValues;
    /**
     * Get the values for the specified fields from the ERP connection
     * @param request - ErpConnectionId, CrmActorType, EntityId, FieldKeys
     * @returns An array containing the values for the specified fields, in the same order
     */
    GetErpFieldValues(request: carriers.ErpSync_GetErpFieldValuesRequest, webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    /**
     * Get the values for the specified fields from the ERP connection
     * @param erpConnectionId - The id of the connection
     * @param crmActorType - The type of the CRM entity
     * @param entityId - The id of the entity
     * @param fieldKeys - The fields for which you want to get the values
     * @returns An array containing the values for the specified fields, in the same order
     */
    GetErpFieldValues(erpConnectionId: number, crmActorType: enums.CrmActorType, entityId: number, fieldKeys: string[], webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    private _GetFieldsForNewErpActor;
    /**
     * Get the fields that must be filled out when creating a new ERP actor
     * @param request - ErpConnectionId, ErpActorType
     * @returns The fields that are required for the new ERP actor
     */
    GetFieldsForNewErpActor(request: carriers.ErpSync_GetFieldsForNewErpActorRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FieldMetadata[]>;
    /**
     * Get the fields that must be filled out when creating a new ERP actor
     * @param erpConnectionId - The id of the connection
     * @param erpActorType - The type of the ERP actor to create
     * @returns The fields that are required for the new ERP actor
     */
    GetFieldsForNewErpActor(erpConnectionId: number, erpActorType: enums.ErpActorType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.FieldMetadata[]>;
    private _GetConnectionListMappings;
    /**
     * Returns the listmappings for the specified connection.
     * @param request - ErpConnectionId
     * @returns The listmappings
     */
    GetConnectionListMappings(request: carriers.ErpSync_GetConnectionListMappingsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpConnectionListMappingContainer>;
    /**
     * Returns the listmappings for the specified connection.
     * @param erpConnectionId - Primary key of the connection
     * @returns The listmappings
     */
    GetConnectionListMappings(erpConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpConnectionListMappingContainer>;
    private _SaveConnectionListMappings;
    /**
     * Saves a connection to the database.
     * @param request - ListMapping
     * @returns The saved list mappings.
     */
    SaveConnectionListMappings(request: carriers.ErpSync_SaveConnectionListMappingsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpConnectionListMappingContainer>;
    /**
     * Saves a connection to the database.
     * @param listMapping - The list item mappings to save.
     * @returns The saved list mappings.
     */
    SaveConnectionListMappings(listMapping: carriers.ErpConnectionListMappingContainer, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpConnectionListMappingContainer>;
    private _ConnectActor;
    /**
     * Create a link between Erp and Crm and set default values
     * @param request - ErpConnectionId, CrmRecordId, CrmActorType, ErpKey, ErpActorType, FieldValues
     * @returns
     */
    ConnectActor(request: carriers.ErpSync_ConnectActorRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Create a link between Erp and Crm and set default values
     * @param erpConnectionId - ErpConnectionId
     * @param crmRecordId - CrmRecordId
     * @param crmActorType - The Crm Actor type
     * @param erpKey -
     * @param erpActorType - The Erp Actor type
     * @param fieldValues - The Crm Fields
     * @returns
     */
    ConnectActor(erpConnectionId: number, crmRecordId: number, crmActorType: enums.CrmActorType, erpKey: string, erpActorType: enums.ErpActorType, fieldValues: carriers.ErpSyncFieldValue[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _TryConnectActor;
    /**
     * Create a link between Erp and Crm and set default values
     * @param request - ErpConnectionId, CrmRecordId, CrmActorType, ErpKey, ErpActorType, FieldValues
     * @returns
     */
    TryConnectActor(request: carriers.ErpSync_TryConnectActorRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Create a link between Erp and Crm and set default values
     * @param erpConnectionId - ErpConnectionId
     * @param crmRecordId - CrmRecordId
     * @param crmActorType - The Crm Actor type
     * @param erpKey -
     * @param erpActorType - The Erp Actor type
     * @param fieldValues - The Crm Fields
     * @returns
     */
    TryConnectActor(erpConnectionId: number, crmRecordId: number, crmActorType: enums.CrmActorType, erpKey: string, erpActorType: enums.ErpActorType, fieldValues: carriers.ErpSyncFieldValue[], webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _GetFieldValuesFromCrm;
    /**
     * Get Crm Field values
     * @param request - RecordId, ActorTypeCrm
     * @returns The Crm Fields
     */
    GetFieldValuesFromCrm(request: carriers.ErpSync_GetFieldValuesFromCrmRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncFieldValue[]>;
    /**
     * Get Crm Field values
     * @param recordId - The id of the CRM entity
     * @param actorTypeCrm - CRM Actor type
     * @returns The Crm Fields
     */
    GetFieldValuesFromCrm(recordId: number, actorTypeCrm: enums.CrmActorType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncFieldValue[]>;
    private _GetFieldValuesFromErp;
    /**
     * Get Erp Field values
     * @param request - ErpConnectionId, ActorTypeErp, ErpKey
     * @returns The Erp Fields
     */
    GetFieldValuesFromErp(request: carriers.ErpSync_GetFieldValuesFromErpRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncFieldValue[]>;
    /**
     * Get Erp Field values
     * @param erpConnectionId - Erp connection id
     * @param actorTypeErp - ERP Actor type
     * @param erpKey - Primary key for the erp actor
     * @returns The Erp Fields
     */
    GetFieldValuesFromErp(erpConnectionId: number, actorTypeErp: enums.ErpActorType, erpKey: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncFieldValue[]>;
    private _GetActorTypeMapping;
    /**
     * Get the current mappings for one connection/actor; connection+actor type = unique key
     * @param request - ErpConnectionId, ActorType
     * @returns The current mapping from the database
     */
    GetActorTypeMapping(request: carriers.ErpSync_GetActorTypeMappingRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncActorTypeMapping>;
    /**
     * Get the current mappings for one connection/actor; connection+actor type = unique key
     * @param erpConnectionId - The ERP connection ID
     * @param actorType - The actor type
     * @returns The current mapping from the database
     */
    GetActorTypeMapping(erpConnectionId: number, actorType: enums.ErpActorType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncActorTypeMapping>;
    private _CreateActorLink;
    /**
     * Link a crm entity to an erp entity
     * @param request - ErpConnectionId, CrmRecordId, CrmActorType, ErpKey, ErpActorType
     * @returns True if success
     */
    CreateActorLink(request: carriers.ErpSync_CreateActorLinkRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Link a crm entity to an erp entity
     * @param erpConnectionId - The ERP connection ID
     * @param crmRecordId - The ID of the CRM entity to connect to
     * @param crmActorType - Identifies the CRM actor type corresponding to this CRM entity
     * @param erpKey - The ERP entity identifier
     * @param erpActorType - The ERP actor type
     * @returns True if success
     */
    CreateActorLink(erpConnectionId: number, crmRecordId: number, crmActorType: enums.CrmActorType, erpKey: string, erpActorType: enums.ErpActorType, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _BreakActorLink;
    /**
     * Remove the link between a CRM entity and an ERP entity
     * @param request - ErpConnectionId, CrmRecordId, CrmActorType
     * @returns True if success
     */
    BreakActorLink(request: carriers.ErpSync_BreakActorLinkRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Remove the link between a CRM entity and an ERP entity
     * @param erpConnectionId - The ERP connection ID
     * @param crmRecordId - The ID of the CRM entity to connect to
     * @param crmActorType - Identifies the CRM actor type corresponding to this CRM entity
     * @returns True if success
     */
    BreakActorLink(erpConnectionId: number, crmRecordId: number, crmActorType: enums.CrmActorType, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _CreateErpActorFromCrm;
    /**
     * Create ErpActor from crm entity
     * @param request - ConnectionId, CrmEntityId, ErpActorType, CrmActorType, ErpFieldKeyValues
     * @returns Created ERP actor with success
     */
    CreateErpActorFromCrm(request: carriers.ErpSync_CreateErpActorFromCrmRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Create ErpActor from crm entity
     * @param connectionId - The connection ID
     * @param crmEntityId - The ID of the CRM entity to create an ERP actor from
     * @param erpActorType - The ERP actor type
     * @param crmActorType - The CRM actor type
     * @param erpFieldKeyValues - A map of matching erp field keys and values to set for the new erp entity
     * @returns Created ERP actor with success
     */
    CreateErpActorFromCrm(connectionId: number, crmEntityId: number, erpActorType: enums.ErpActorType, crmActorType: enums.CrmActorType, erpFieldKeyValues: carriers.StringDictionary, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _SaveActorTypeMapping;
    /**
     * Save mappings for a connection/actor
     * @param request - Mapping
     * @returns The current mapping from the database
     */
    SaveActorTypeMapping(request: carriers.ErpSync_SaveActorTypeMappingRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncActorTypeMapping>;
    /**
     * Save mappings for a connection/actor
     * @param mapping - The mapping to be saved; new mapping rows will be created in the database if needed
     * @returns The current mapping from the database
     */
    SaveActorTypeMapping(mapping: carriers.ErpSyncActorTypeMapping, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncActorTypeMapping>;
    private _ValidateArchiveColumnConfig;
    /**
     * Clear field info from table SUPERLISTCOLUMNSIZE if field mapping changed on given connection
     * @param request - ListOwner, ErpConnectionId
     * @returns Validated ArchiveColumnConfig
     */
    ValidateArchiveColumnConfig(request: carriers.ErpSync_ValidateArchiveColumnConfigRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Clear field info from table SUPERLISTCOLUMNSIZE if field mapping changed on given connection
     * @param listOwner - GUI name used in archive control config
     * @param erpConnectionId - The ERP connection ID
     * @returns Validated ArchiveColumnConfig
     */
    ValidateArchiveColumnConfig(listOwner: string, erpConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _UpdateConnectionFields;
    /**
     * Gets all supported actor types, and all fields for each actor type, and save this state to the CRM database
     * @param request - ErpConnectionId
     * @returns Success or fail
     */
    UpdateConnectionFields(request: carriers.ErpSync_UpdateConnectionFieldsRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Gets all supported actor types, and all fields for each actor type, and save this state to the CRM database
     * @param erpConnectionId - The ERP connection ID
     * @returns Success or fail
     */
    UpdateConnectionFields(erpConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _GetCrmActorType;
    /**
     * Retrieves the CrmActorType that are mapped to a specific ErpActorType for this connection
     * @param request - ErpConnectionId, ErpActorType
     * @returns The CrmActorType
     */
    GetCrmActorType(request: carriers.ErpSync_GetCrmActorTypeRequest, webapi_options?: base.WebApiRequestOptions): Promise<enums.CrmActorType>;
    /**
     * Retrieves the CrmActorType that are mapped to a specific ErpActorType for this connection
     * @param erpConnectionId - The ERP connection ID
     * @param erpActorType - The ERP actor type
     * @returns The CrmActorType
     */
    GetCrmActorType(erpConnectionId: number, erpActorType: enums.ErpActorType, webapi_options?: base.WebApiRequestOptions): Promise<enums.CrmActorType>;
    private _GetErpSyncConnectionSummary;
    /**
     * Get a summary of the current ErpSync configuration/setup
     * @param request - ErpSyncConnectionId
     * @returns Summary of connection information, and one summary element per configured actor type
     */
    GetErpSyncConnectionSummary(request: carriers.ErpSync_GetErpSyncConnectionSummaryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncConnectionSummary>;
    /**
     * Get a summary of the current ErpSync configuration/setup
     * @param erpSyncConnectionId - The ID of the ErpSync connection for which information is sought
     * @returns Summary of connection information, and one summary element per configured actor type
     */
    GetErpSyncConnectionSummary(erpSyncConnectionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncConnectionSummary>;
    GetErpSyncConnectorEntity(erpSyncConnectorEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncConnectorEntity>;
    private _CanDeleteErpSyncConnectorEntity;
    /**
     * Can we delete the connector?
     * @param request - ErpSyncConnectorId
     * @returns Enum response says ok or what is wrong
     */
    CanDeleteErpSyncConnectorEntity(request: carriers.ErpSync_CanDeleteErpSyncConnectorEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<enums.ErpSyncResponseCode>;
    /**
     * Can we delete the connector?
     * @param erpSyncConnectorId - The ID of the ErpSync connector to check if can be deleted
     * @returns Enum response says ok or what is wrong
     */
    CanDeleteErpSyncConnectorEntity(erpSyncConnectorId: number, webapi_options?: base.WebApiRequestOptions): Promise<enums.ErpSyncResponseCode>;
    private _TestConnectorUrl;
    /**
     * Test if connector urls anwers
     * @param request - Url
     * @returns Enum response says ok or what is wrong
     */
    TestConnectorUrl(request: carriers.ErpSync_TestConnectorUrlRequest, webapi_options?: base.WebApiRequestOptions): Promise<enums.ErpSyncResponseCode>;
    /**
     * Test if connector urls anwers
     * @param url - The url to test connection on
     * @returns Enum response says ok or what is wrong
     */
    TestConnectorUrl(url: string, webapi_options?: base.WebApiRequestOptions): Promise<enums.ErpSyncResponseCode>;
    private _SaveDefaultValueInfo;
    /**
     * Save information about a default value for an ERP field
     * @param request - ErpSyncDefaultValue
     * @returns The newly saved ErpSyncDefaultValue
     */
    SaveDefaultValueInfo(request: carriers.ErpSync_SaveDefaultValueInfoRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncDefaultValue>;
    /**
     * Save information about a default value for an ERP field
     * @param erpSyncDefaultValue - The id of the ERPfield to save
     * @returns The newly saved ErpSyncDefaultValue
     */
    SaveDefaultValueInfo(erpSyncDefaultValue: carriers.ErpSyncDefaultValue, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncDefaultValue>;
    private _GetDefaultValueInfo;
    /**
     * Get information about default value for an ERP field
     * @param request - ErpFieldId
     * @returns Object with information about default values
     */
    GetDefaultValueInfo(request: carriers.ErpSync_GetDefaultValueInfoRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncDefaultValue>;
    /**
     * Get information about default value for an ERP field
     * @param erpFieldId - The id of the ERP field
     * @returns Object with information about default values
     */
    GetDefaultValueInfo(erpFieldId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncDefaultValue>;
    private _SyncAll;
    /**
     * Sync all active connections
     * @returns The response
     */
    SyncAll(webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    private _ForceSyncAll;
    /**
     * Sync all active connections even when automatic sync is off
     * @returns The response
     */
    ForceSyncAll(webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    private _ForceResync;
    /**
     * Force resync from CRM or given Erp connection to all other connections
     * @param request - ErpConnectionId, InternalKeyIds
     * @returns The response
     */
    ForceResync(request: carriers.ErpSync_ForceResyncRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    /**
     * Force resync from CRM or given Erp connection to all other connections
     * @param erpConnectionId - If positive, resync from the given erp connection
     * @param internalKeyIds - The internal keys of the entities to resync, or empty to resync all
     * @returns The response
     */
    ForceResync(erpConnectionId: number, internalKeyIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    private _ForceResyncNoBlankValues;
    /**
     * Force resync from CRM or given Erp connection to all other connections and tell the sync that you don&apos;t want blank values to overwrite non-blank values. Useful on import.
     * @param request - ErpConnectionId, InternalKeyIds
     * @returns The response
     */
    ForceResyncNoBlankValues(request: carriers.ErpSync_ForceResyncNoBlankValuesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    /**
     * Force resync from CRM or given Erp connection to all other connections and tell the sync that you don&apos;t want blank values to overwrite non-blank values. Useful on import.
     * @param erpConnectionId - If positive, resync from the given erp connection
     * @param internalKeyIds - The internal keys of the entities to resync, or empty to resync all
     * @returns The response
     */
    ForceResyncNoBlankValues(erpConnectionId: number, internalKeyIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    private _ForceResyncBatchTask;
    /**
     * Start batch task to force resync from CRM or given Erp connection to all other connections
     * @param request - ErpConnectionId, InternalKeyIds
     * @returns
     */
    ForceResyncBatchTask(request: carriers.ErpSync_ForceResyncBatchTaskRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Start batch task to force resync from CRM or given Erp connection to all other connections
     * @param erpConnectionId - If positive, resync from the given erp connection
     * @param internalKeyIds - The internal keys of the entities to resync, or empty to resync all
     * @returns
     */
    ForceResyncBatchTask(erpConnectionId: number, internalKeyIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _ForceResyncExternal;
    /**
     * Force resync from CRM or given Erp connection to all other connections, using external keys
     * @param request - ErpConnectionId, ErpActorType, ExternalKeys
     * @returns The response
     */
    ForceResyncExternal(request: carriers.ErpSync_ForceResyncExternalRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    /**
     * Force resync from CRM or given Erp connection to all other connections, using external keys
     * @param erpConnectionId - Resync from the given erp connection
     * @param erpActorType - Which actor type the external keys are associated with
     * @param externalKeys - The internal keys of the entities to resync, or empty to resync all
     * @returns The response
     */
    ForceResyncExternal(erpConnectionId: number, erpActorType: enums.ErpActorType, externalKeys: string[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    private _ForceResyncExternalNoBlankValues;
    /**
     * Force resync from CRM or given Erp connection to all other connections, using external keys, and tell the sync that you don&apos;t want blank values to overwrite non-blank values. Useful on import.
     * @param request - ErpConnectionId, ErpActorType, ExternalKeys
     * @returns The response
     */
    ForceResyncExternalNoBlankValues(request: carriers.ErpSync_ForceResyncExternalNoBlankValuesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    /**
     * Force resync from CRM or given Erp connection to all other connections, using external keys, and tell the sync that you don&apos;t want blank values to overwrite non-blank values. Useful on import.
     * @param erpConnectionId - Resync from the given erp connection
     * @param erpActorType - Which actor type the external keys are associated with
     * @param externalKeys - The internal keys of the entities to resync, or empty to resync all
     * @returns The response
     */
    ForceResyncExternalNoBlankValues(erpConnectionId: number, erpActorType: enums.ErpActorType, externalKeys: string[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.PluginResponse>;
    private _GetEngineStatus;
    /**
     * Get the current status of the Sync engine
     * @returns The current status of the engine
     */
    GetEngineStatus(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncEngineStatus>;
    private _ChangeEngineStatus;
    /**
     * Change the current running/stopped status of the Sync engine
     * @param request - Run
     * @returns The current status of the engine
     */
    ChangeEngineStatus(request: carriers.ErpSync_ChangeEngineStatusRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncEngineStatus>;
    /**
     * Change the current running/stopped status of the Sync engine
     * @param run - If true, then start the engine; otherwise stop it (requests to the Batch system, may not be immediately reflected)
     * @returns The current status of the engine
     */
    ChangeEngineStatus(run: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ErpSyncEngineStatus>;
    private _ChangeEngineInterval;
    /**
     * Change the interval for each run of the Sync Engine
     * @param request - Interval
     * @returns
     */
    ChangeEngineInterval(request: carriers.ErpSync_ChangeEngineIntervalRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Change the interval for each run of the Sync Engine
     * @param interval - The run interval for the engine
     * @returns
     */
    ChangeEngineInterval(interval: moment.Duration, webapi_options?: base.WebApiRequestOptions): Promise<void>;
}
//# sourceMappingURL=ErpSyncAgent.d.ts.map