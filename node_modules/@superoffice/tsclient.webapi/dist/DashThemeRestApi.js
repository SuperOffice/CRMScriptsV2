"use strict";
/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
//
// File:          DashThemeRestApi.ts
//
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------
Object.defineProperty(exports, "__esModule", { value: true });
exports.DashThemeRestApi = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
/**
 * Dashboard theme configuration
 * Agent that lets you configure dashboard tiles and retrieve dashboard data
 *
 * `api/v1/DashTheme`
 */
class DashThemeRestApi extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/DashTheme/";
        super(options);
    }
    /**
     * `GET /api/v1/DashTheme/default`
     * Set default values into a new DashTheme.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    async GetDefault(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.get("default", config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_DashTheme_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * `POST /api/v1/DashTheme/`
     * Creates a new DashTheme
     * @param newDashTheme - The DashTheme to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New DashTheme
     */
    async Post(newDashTheme, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("", newDashTheme, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_DashTheme_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * `PUT /api/v1/DashTheme/123`
     * Updates the existing DashTheme
     * @param dashTheme - The DashTheme to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns The updated DashTheme
     */
    async PutById(id, dashTheme, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.put(id.toString(), dashTheme, config);
                base.WebApiBase.SetCompleted(options);
                let res = null;
                if (response.status != 304)
                    res = converters.Create_DashTheme_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * `PATCH /api/v1/DashTheme/123`
     * Updates an existing DashTheme
     * @param dashTheme - The partial DashTheme containing updated values, or an array of RFC6902 PATCH operations.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns The updated DashTheme
     */
    async PatchById(id, dashTheme, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.patch(id.toString(), dashTheme, config);
                base.WebApiBase.SetCompleted(options);
                let res = null;
                if (response.status != 304)
                    res = converters.Create_DashTheme_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * `DELETE /api/v1/DashTheme/123`
     * Deletes the DashTheme
     * @param dashThemeId - The id of the DashTheme to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    async DeleteById(dashThemeId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.delete(dashThemeId.toString(), config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * `GET /api/v1/DashTheme/123`
     * Get an existing DashTheme
     * @param dashThemeId - The DashTheme to be get.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns The DashTheme
     */
    async GetById(dashThemeId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.get(dashThemeId.toString(), config);
                base.WebApiBase.SetCompleted(options);
                let res = null;
                if (response.status != 304)
                    res = converters.Create_DashTheme_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
} // class DashThemeRestApi 
exports.DashThemeRestApi = DashThemeRestApi;
//# sourceMappingURL=DashThemeRestApi.js.map