import { AxiosRequestConfig } from 'axios';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * User interface configuration - XMLs and other elements such as inter-client URLs
 */
export interface IConfigurationAgent {
    CreateDefaultConfigurableScreenDelta(): Promise<carriers.ConfigurableScreenDelta>;
    SaveConfigurableScreenDelta(entity: carriers.ConfigurableScreenDelta): Promise<carriers.ConfigurableScreenDelta>;
    DeleteConfigurableScreenDelta(ConfigurableScreenDeltaId: number): Promise<void>;
    CreateDefaultDiaryViewEntity(): Promise<carriers.DiaryViewEntity>;
    SaveDiaryViewEntity(entity: carriers.DiaryViewEntity): Promise<carriers.DiaryViewEntity>;
    DeleteDiaryViewEntity(DiaryViewEntityId: number): Promise<void>;
    CreateDefaultSystemEventEntity(): Promise<carriers.SystemEventEntity>;
    SaveSystemEventEntity(entity: carriers.SystemEventEntity): Promise<carriers.SystemEventEntity>;
    DeleteSystemEventEntity(SystemEventEntityId: number): Promise<void>;
    GetConfigurableScreenDelta(configurableScreenDeltaId: number): Promise<carriers.ConfigurableScreenDelta>;
    GetScreenConfigurationDeltas(webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetScreenConfigurationDelta(request: carriers.Configuration_GetScreenConfigurationDeltaRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetScreenConfigurationDelta(deltaType: enums.DeltaType, deltaState: enums.DeltaState, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetConfigurableScreenDeltasByDelta(request: carriers.Configuration_GetConfigurableScreenDeltasByDeltaRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ConfigurableScreenDelta[]>;
    GetConfigurableScreenDeltasByDelta(configurableScreenDelta: carriers.ConfigurableScreenDelta, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ConfigurableScreenDelta[]>;
    GetConfigurableScreenDeltasByQuery(request: carriers.Configuration_GetConfigurableScreenDeltasByQueryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ConfigurableScreenDelta[]>;
    GetConfigurableScreenDeltasByQuery(deltaQuery: carriers.DeltaQuery, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ConfigurableScreenDelta[]>;
    RebuildUdefDeltas(webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RebuildWebpanelDeltas(webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SaveAndPublish(request: carriers.Configuration_SaveAndPublishRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ConfigurableScreenDelta>;
    SaveAndPublish(configurableScreenDelta: carriers.ConfigurableScreenDelta, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ConfigurableScreenDelta>;
    SetAppliesToKey(request: carriers.Configuration_SetAppliesToKeyRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetAppliesToKey(recipeId: string, appliesToKey: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetRecipeAppliesToMappings(webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    GetApplicationConfiguration(request: carriers.Configuration_GetApplicationConfigurationRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetApplicationConfiguration(application: string, instance: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetPageConfiguration(request: carriers.Configuration_GetPageConfigurationRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetPageConfiguration(application: string, instance: string, page: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetObjectMapping(request: carriers.Configuration_GetObjectMappingRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetObjectMapping(application: string, instance: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetFilterList(request: carriers.Configuration_GetFilterListRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetFilterList(application: string, instance: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    ClearConfigurationCache(request: carriers.Configuration_ClearConfigurationCacheRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    ClearConfigurationCache(application: string, instance: string, forAllAssociates: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetAnyConfiguration(request: carriers.Configuration_GetAnyConfigurationRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetAnyConfiguration(application: string, instance: string, item: string, type: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetEMarketingUrl(request: carriers.Configuration_GetEMarketingUrlRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetEMarketingUrl(language: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetCsProgramUrl(request: carriers.Configuration_GetCsProgramUrlRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetCsProgramUrl(language: string, programName: string, action: string, extraParameters: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetCSAuthUrl(request: carriers.Configuration_GetCSAuthUrlRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetCSAuthUrl(language: string, programName: string, action: string, extraParameters: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetCSRegistryValue(request: carriers.Configuration_GetCSRegistryValueRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetCSRegistryValue(entry: number, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetCSWwwFolder(webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetRefreshedPageConfiguration(request: carriers.Configuration_GetRefreshedPageConfigurationRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetRefreshedPageConfiguration(application: string, instance: string, page: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetWwwUrl(request: carriers.Configuration_GetWwwUrlRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetWwwUrl(client: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetHelpDispatcherUrl(webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetWwwUrlForSMWeb(webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetCsCgiUrlInternal(webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetCRMUrl(request: carriers.Configuration_GetCRMUrlRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetCRMUrl(soProtocol: string, currents: string, frameless: boolean, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetEmailNumberOfDays(webapi_options?: base.WebApiRequestOptions): Promise<number>;
    GetCustomerUrl(webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetSpfDomain(webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetDiaryViewEntity(diaryViewEntityId: number): Promise<carriers.DiaryViewEntity>;
    GetSystemEventEntity(systemEventEntityId: number): Promise<carriers.SystemEventEntity>;
    ExistsSystemEvent(request: carriers.Configuration_ExistsSystemEventRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    ExistsSystemEvent(key: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    GetWindowPosSize(windowPosSizeId: number): Promise<carriers.WindowPosSize>;
    SaveWindowPosSize(request: carriers.Configuration_SaveWindowPosSizeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WindowPosSize>;
    SaveWindowPosSize(windowPosSize: carriers.WindowPosSize, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WindowPosSize>;
    DeleteWindowPosSize(request: carriers.Configuration_DeleteWindowPosSizeRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteWindowPosSize(windowPosSizeId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetWindowPosSizeList(windowPosSizeIds: number[]): Promise<carriers.WindowPosSize[]>;
    GetMyWindowPosSizes(webapi_options?: base.WebApiRequestOptions): Promise<carriers.WindowPosSize[]>;
    GetWindowPosSizesOnPersonId(request: carriers.Configuration_GetWindowPosSizesOnPersonIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WindowPosSize[]>;
    GetWindowPosSizesOnPersonId(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WindowPosSize[]>;
    GetWindowPosSizesOnAssociateId(request: carriers.Configuration_GetWindowPosSizesOnAssociateIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WindowPosSize[]>;
    GetWindowPosSizesOnAssociateId(associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WindowPosSize[]>;
    SaveWindowPosSizes(request: carriers.Configuration_SaveWindowPosSizesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WindowPosSize[]>;
    SaveWindowPosSizes(windowPosSizes: carriers.WindowPosSize[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.WindowPosSize[]>;
}
/**
 * User interface configuration - XMLs and other elements such as inter-client URLs
 */
export declare class ConfigurationAgent extends base.WebApiBase implements IConfigurationAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * Set default values into a new ConfigurableScreenDelta.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultConfigurableScreenDelta(options?: base.WebApiRequestOptions): Promise<carriers.ConfigurableScreenDelta>;
    SaveConfigurableScreenDelta(entity: carriers.ConfigurableScreenDelta, options?: base.WebApiRequestOptions): Promise<carriers.ConfigurableScreenDelta>;
    DeleteConfigurableScreenDelta(ConfigurableScreenDeltaId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new DiaryViewEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultDiaryViewEntity(options?: base.WebApiRequestOptions): Promise<carriers.DiaryViewEntity>;
    SaveDiaryViewEntity(entity: carriers.DiaryViewEntity, options?: base.WebApiRequestOptions): Promise<carriers.DiaryViewEntity>;
    DeleteDiaryViewEntity(DiaryViewEntityId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new SystemEventEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultSystemEventEntity(options?: base.WebApiRequestOptions): Promise<carriers.SystemEventEntity>;
    SaveSystemEventEntity(entity: carriers.SystemEventEntity, options?: base.WebApiRequestOptions): Promise<carriers.SystemEventEntity>;
    DeleteSystemEventEntity(SystemEventEntityId: number, options?: base.WebApiRequestOptions): Promise<void>;
    GetConfigurableScreenDelta(configurableScreenDeltaId: number, options?: base.WebApiRequestOptions): Promise<carriers.ConfigurableScreenDelta>;
    private _GetScreenConfigurationDeltas;
    /**
     * This method will return a json with all deltas for screen
     * @returns A string with all recipe deltas in json for logged in associate
     */
    GetScreenConfigurationDeltas(webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetScreenConfigurationDelta;
    /**
     * This method will return a json with all deltas for screen
     * @param request - DeltaType, DeltaState
     * @returns A string with recipe delta in json for logged in associate of given deltatype
     */
    GetScreenConfigurationDelta(request: carriers.Configuration_GetScreenConfigurationDeltaRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * This method will return a json with all deltas for screen
     * @param deltaType - The recipe in json for this DeltaType: System, WebPanel, CustomFields, Custom...
     * @param deltaState - Draft or published or None
     * @returns A string with recipe delta in json for logged in associate of given deltatype
     */
    GetScreenConfigurationDelta(deltaType: enums.DeltaType, deltaState: enums.DeltaState, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetConfigurableScreenDeltasByDelta;
    /**
     * This method will return a configurablescreen delta matching the properties received from the incomming delta
     * @param request - ConfigurableScreenDelta
     * @returns An array of deltas matching the values of the incomming parameter-delta
     */
    GetConfigurableScreenDeltasByDelta(request: carriers.Configuration_GetConfigurableScreenDeltasByDeltaRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ConfigurableScreenDelta[]>;
    /**
     * This method will return a configurablescreen delta matching the properties received from the incomming delta
     * @param configurableScreenDelta - A delta populated with wanted properties
     * @returns An array of deltas matching the values of the incomming parameter-delta
     */
    GetConfigurableScreenDeltasByDelta(configurableScreenDelta: carriers.ConfigurableScreenDelta, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ConfigurableScreenDelta[]>;
    private _GetConfigurableScreenDeltasByQuery;
    /**
     * This method will return a configurablescreen delta matching the properties received from the incomming query
     * @param request - DeltaQuery
     * @returns An array of deltas matching the values of the incomming query
     */
    GetConfigurableScreenDeltasByQuery(request: carriers.Configuration_GetConfigurableScreenDeltasByQueryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ConfigurableScreenDelta[]>;
    /**
     * This method will return a configurablescreen delta matching the properties received from the incomming query
     * @param deltaQuery - An object populated with wanted properties for the deltas to return
     * @returns An array of deltas matching the values of the incomming query
     */
    GetConfigurableScreenDeltasByQuery(deltaQuery: carriers.DeltaQuery, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ConfigurableScreenDelta[]>;
    private _RebuildUdefDeltas;
    /**
     * Flush and rebuild userdefined field deltas. Mostly used after publishing udefs or adding/editing Customer Service extrafields
     * @returns No return value
     */
    RebuildUdefDeltas(webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _RebuildWebpanelDeltas;
    /**
     * Flush and rebuild webpanel deltas. Mostly used after adding/editing webpanels or change group visibility of them
     * @returns No return value
     */
    RebuildWebpanelDeltas(webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SaveAndPublish;
    /**
     * Save the incomming draft and publish
     * @param request - ConfigurableScreenDelta
     * @returns The newly published version of the ConfigurbleScreenDelta
     */
    SaveAndPublish(request: carriers.Configuration_SaveAndPublishRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ConfigurableScreenDelta>;
    /**
     * Save the incomming draft and publish
     * @param configurableScreenDelta - The ConfigurableScreenDelta draft that is going to be published
     * @returns The newly published version of the ConfigurbleScreenDelta
     */
    SaveAndPublish(configurableScreenDelta: carriers.ConfigurableScreenDelta, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ConfigurableScreenDelta>;
    private _SetAppliesToKey;
    /**
     * Set the type of assignTo the deltas of the given recipe should have
     * @param request - RecipeId, AppliesToKey
     * @returns Returns nothing
     */
    SetAppliesToKey(request: carriers.Configuration_SetAppliesToKeyRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set the type of assignTo the deltas of the given recipe should have
     * @param recipeId - The recipeId that will use this apply to type
     * @param appliesToKey - The type we should use for differencing between delta layout. Like usergroup or project type. Saved in table ConfigurableScreenAppliesTo
     * @returns Returns nothing
     */
    SetAppliesToKey(recipeId: string, appliesToKey: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetRecipeAppliesToMappings;
    /**
     * Return the a  dictionary with recipeId as key, and chosen appliesTo for that recipe, Like projecttype for projectcardrecipe
     * @returns Mapping of recipeId and selected appliesToKey
     */
    GetRecipeAppliesToMappings(webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    private _GetApplicationConfiguration;
    /**
     * Return the application configuration. This is a list of pages, with information about the name, main panel and preference mappings of each page.
     * @param request - Application, Instance
     * @returns XML structure containing the application configuration
     */
    GetApplicationConfiguration(request: carriers.Configuration_GetApplicationConfigurationRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Return the application configuration. This is a list of pages, with information about the name, main panel and preference mappings of each page.
     * @param application - The application name, for instance 'SixWeb'
     * @param instance - The instance name for the application, like 'MainInstance'
     * @returns XML structure containing the application configuration
     */
    GetApplicationConfiguration(application: string, instance: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetPageConfiguration;
    /**
     * Get the configuration for one whole web page, including all its panels etc.  totally asynchronous items like menus are not included, but all references are resolved and all special processing is applied.
     * @param request - Application, Instance, Page
     * @returns XML containing the configuration for the given page, from the page down to the control level.
     */
    GetPageConfiguration(request: carriers.Configuration_GetPageConfigurationRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Get the configuration for one whole web page, including all its panels etc.  totally asynchronous items like menus are not included, but all references are resolved and all special processing is applied.
     * @param application - The application name, for instance 'SixWeb
     * @param instance - The instance name for the application, like 'MainInstance'
     * @param page - Page name, must correspond to one of the pages in the Application Configuration
     * @returns XML containing the configuration for the given page, from the page down to the control level.
     */
    GetPageConfiguration(application: string, instance: string, page: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetObjectMapping;
    /**
     * Get the object mappings, i.e., the what code objects should be instantiated to handle the entities of the client configuration.
     * @param request - Application, Instance
     * @returns XML containing the object mappings, including assembly and class names
     */
    GetObjectMapping(request: carriers.Configuration_GetObjectMappingRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Get the object mappings, i.e., the what code objects should be instantiated to handle the entities of the client configuration.
     * @param application - The application name, for instance 'SixWeb'
     * @param instance - The instance name for the application, like 'MainInstance'
     * @returns XML containing the object mappings, including assembly and class names
     */
    GetObjectMapping(application: string, instance: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetFilterList;
    /**
     * Get the list of filters to be used for processing the configuration data for this application.
     * @param request - Application, Instance
     * @returns XML representing the list of filters and any configuration data they may need.
     */
    GetFilterList(request: carriers.Configuration_GetFilterListRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Get the list of filters to be used for processing the configuration data for this application.
     * @param application - The application name, for instance 'SixWeb'
     * @param instance - The instance name for the application, like 'MainInstance'
     * @returns XML representing the list of filters and any configuration data they may need.
     */
    GetFilterList(application: string, instance: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _ClearConfigurationCache;
    /**
     * Configuration XML&apos;s may be expensive to build and parse, and are therefore cached to the database. &lt;para/&gt;Cahcing is per application/instance/associate, and can be turned off through the config file. &lt;para/&gt;If caching is on, and the configuration is changed, it is necessary to clear the cached configurations from the database, through this call.&lt;para/&gt;Note that changes to the externalapplication table require cache invalidation. SoAdmin will do so automatically.
     * @param request - Application, Instance, ForAllAssociates
     * @returns There is no return value.
     */
    ClearConfigurationCache(request: carriers.Configuration_ClearConfigurationCacheRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Configuration XML&apos;s may be expensive to build and parse, and are therefore cached to the database. &lt;para/&gt;Cahcing is per application/instance/associate, and can be turned off through the config file. &lt;para/&gt;If caching is on, and the configuration is changed, it is necessary to clear the cached configurations from the database, through this call.&lt;para/&gt;Note that changes to the externalapplication table require cache invalidation. SoAdmin will do so automatically.
     * @param application - The application name, for instance 'SixWeb'
     * @param instance - The instance name for the application, like 'MainInstance'
     * @param forAllAssociates - If false, only the current associate's configuration is cleared. If true, configurations are cleared for all associates.
     * @returns There is no return value.
     */
    ClearConfigurationCache(application: string, instance: string, forAllAssociates: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetAnyConfiguration;
    /**
     * Get one defined configuration fragment, with full reference resolution and parsing applied. This is essentially the same service as the GetPageConfiguration, except that this service is not locked to objects of type Page.
     * @param request - Application, Instance, Item, Type
     * @returns Fully resolved and parsed configuration XML, as string.
     */
    GetAnyConfiguration(request: carriers.Configuration_GetAnyConfigurationRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Get one defined configuration fragment, with full reference resolution and parsing applied. This is essentially the same service as the GetPageConfiguration, except that this service is not locked to objects of type Page.
     * @param application - The application name, for instance Six.Web
     * @param instance - The instance name, for instance Main
     * @param item - The configuration item name (first component of file name)
     * @param type - The configuration item type (second component of file name)
     * @returns Fully resolved and parsed configuration XML, as string.
     */
    GetAnyConfiguration(application: string, instance: string, item: string, type: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetEMarketingUrl;
    /**
     *
     * @param request - Language
     * @returns
     */
    GetEMarketingUrl(request: carriers.Configuration_GetEMarketingUrlRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     *
     * @param language -
     * @returns
     */
    GetEMarketingUrl(language: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetCsProgramUrl;
    /**
     * This method will convert a module name into a CS URL.
     * @param request - Language, ProgramName, Action, ExtraParameters
     * @returns Returns a valid CS URL composed of the give parameters.
     */
    GetCsProgramUrl(request: carriers.Configuration_GetCsProgramUrlRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * This method will convert a module name into a CS URL.
     * @param language - By setting this parameter, you can change the CS language for the current user.
     * @param programName - In this parameter you must specify which CS program you want to create an URL for. Valid examples are "ticket", "rms", "spm" etc.
     * @param action - Here you can optionally specify the action for the current program. This will enable you to go to a specific screen.
     * @param extraParameters - If an action is specified, you can specify extra parameters here. This can be used to set specific behaviour for the chosen screen/action. If an empty action is supplied, this parameter will be ignored.
     * @returns Returns a valid CS URL composed of the give parameters.
     */
    GetCsProgramUrl(language: string, programName: string, action: string, extraParameters: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetCSAuthUrl;
    /**
     * Will generate an url to the emarketing module
     * @param request - Language, ProgramName, Action, ExtraParameters
     * @returns Returns a valid CS URL composed of the give parameters.
     */
    GetCSAuthUrl(request: carriers.Configuration_GetCSAuthUrlRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Will generate an url to the emarketing module
     * @param language - By setting this parameter, you can change the CS language for the current user.
     * @param programName - In this parameter you must specify which CS program you want to create an URL for. Valid examples are "ticket", "rms", "spm" etc.
     * @param action - Here you can optionally specify the action for the current program. This will enable you to go to a specific screen.
     * @param extraParameters - If an action is specified, you can specify extra parameters here. This can be used to set specific behaviour for the chosen screen/action. If an empty action is supplied, this parameter will be ignored.
     * @returns Returns a valid CS URL composed of the give parameters.
     */
    GetCSAuthUrl(language: string, programName: string, action: string, extraParameters: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetCSRegistryValue;
    /**
     * This method will get a value from the CS Registry table.
     * @param request - Entry
     * @returns The value of the specified Registry entry
     */
    GetCSRegistryValue(request: carriers.Configuration_GetCSRegistryValueRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * This method will get a value from the CS Registry table.
     * @param entry - The Registry entry to get
     * @returns The value of the specified Registry entry
     */
    GetCSRegistryValue(entry: number, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetCSWwwFolder;
    /**
     * This method will get the www folder for CS
     * @returns The www folder for CS
     */
    GetCSWwwFolder(webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetRefreshedPageConfiguration;
    /**
     * Get the configuration for one whole web page, including all its panels etc.  totally asynchronous items like menus are not included, but all references are resolved and all special processing is applied. Does not use cache for fetching, but updates the cache with refreshed configuration.
     * @param request - Application, Instance, Page
     * @returns XML containing the configuration for the given page, from the page down to the control level.
     */
    GetRefreshedPageConfiguration(request: carriers.Configuration_GetRefreshedPageConfigurationRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Get the configuration for one whole web page, including all its panels etc.  totally asynchronous items like menus are not included, but all references are resolved and all special processing is applied. Does not use cache for fetching, but updates the cache with refreshed configuration.
     * @param application - The application name, for instance 'SixWeb
     * @param instance - The instance name for the application, like 'MainInstance'
     * @param page - Page name, must correspond to one of the pages in the Application Configuration
     * @returns XML containing the configuration for the given page, from the page down to the control level.
     */
    GetRefreshedPageConfiguration(application: string, instance: string, page: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetWwwUrl;
    /**
     * Will get the default URL used for the logo, from the [NetServices] PageUrl preferencec, with tags substituted.
     * @param request - Client
     * @returns URL to be used when clicking the logo
     */
    GetWwwUrl(request: carriers.Configuration_GetWwwUrlRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Will get the default URL used for the logo, from the [NetServices] PageUrl preferencec, with tags substituted.
     * @param client - The name for the client application, like 'CS' or 'SM.web', used for the <clie> variable
     * @returns URL to be used when clicking the logo
     */
    GetWwwUrl(client: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetHelpDispatcherUrl;
    /**
     * Will get the GetHelpDispatcherUrl used by the help system
     * @returns URL to be used by the help system
     */
    GetHelpDispatcherUrl(webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetWwwUrlForSMWeb;
    /**
     * Returns the URL used for the logo by the SM.web client. Uses urldispatch.aspx
     * @returns Link to urldispatch.aspx tagged with [SOSITEURL]
     */
    GetWwwUrlForSMWeb(webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetCsCgiUrlInternal;
    /**
     * This method will get the host name for CS
     * @returns Will get the host name for where CS is installed
     */
    GetCsCgiUrlInternal(webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetCRMUrl;
    /**
     * Returns a valid url based in the soprotocol provided
     * @param request - SoProtocol, Currents, Frameless
     * @returns Url with soprotocol
     */
    GetCRMUrl(request: carriers.Configuration_GetCRMUrlRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Returns a valid url based in the soprotocol provided
     * @param soProtocol - SoProtocol to display. Eg. contact.activityarchive.minipreview
     * @param currents - currents to set. Eg. contact_id=100&person_id=299
     * @param frameless - If true frame is not rendered( Navigationbar, buttonbar and menu )
     * @returns Url with soprotocol
     */
    GetCRMUrl(soProtocol: string, currents: string, frameless: boolean, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetEmailNumberOfDays;
    /**
     *
     * @returns Number of days in the past for which we are fetching email
     */
    GetEmailNumberOfDays(webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _GetCustomerUrl;
    /**
     * This method will get the URL for the external access to the customer center
     * @returns The URL to the customer center, without any actions
     */
    GetCustomerUrl(webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetSpfDomain;
    /**
     * Get the SPF domain defined for the mail cluster for this tenant (Online only)
     * @returns The configured SPF domain. Will return empty for Onsite installations or tenants in Online using custom SMTP
     */
    GetSpfDomain(webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetDiaryViewEntity(diaryViewEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.DiaryViewEntity>;
    GetSystemEventEntity(systemEventEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.SystemEventEntity>;
    private _ExistsSystemEvent;
    /**
     * Is there a system event with the given key?
     * @param request - Key
     * @returns The system event
     */
    ExistsSystemEvent(request: carriers.Configuration_ExistsSystemEventRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Is there a system event with the given key?
     * @param key - The key to match on
     * @returns The system event
     */
    ExistsSystemEvent(key: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    GetWindowPosSize(windowPosSizeId: number, options?: base.WebApiRequestOptions): Promise<carriers.WindowPosSize>;
    private _SaveWindowPosSize;
    /**
     * Saves a window and dialog position and size setting.
     * @param request - WindowPosSize
     * @returns The saved item
     */
    SaveWindowPosSize(request: carriers.Configuration_SaveWindowPosSizeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WindowPosSize>;
    /**
     * Saves a window and dialog position and size setting.
     * @param windowPosSize - The item that is saved
     * @returns The saved item
     */
    SaveWindowPosSize(windowPosSize: carriers.WindowPosSize, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WindowPosSize>;
    private _DeleteWindowPosSize;
    /**
     * Deletes a window and dialog position and size setting.
     * @param request - WindowPosSizeId
     * @returns
     */
    DeleteWindowPosSize(request: carriers.Configuration_DeleteWindowPosSizeRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Deletes a window and dialog position and size setting.
     * @param windowPosSizeId - Id of the window and dialog position and size settings item.
     * @returns
     */
    DeleteWindowPosSize(windowPosSizeId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetWindowPosSizeList(windowPosSizeIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.WindowPosSize[]>;
    private _GetMyWindowPosSizes;
    /**
     * Gets the window and dialog position and size settings belonging to the currently logged on user
     * @returns Array of window and dialog position and size settings
     */
    GetMyWindowPosSizes(webapi_options?: base.WebApiRequestOptions): Promise<carriers.WindowPosSize[]>;
    private _GetWindowPosSizesOnPersonId;
    /**
     * Gets the window and dialog position and size settings belonging to the specified person
     * @param request - PersonId
     * @returns Array of window and dialog position and size settings
     */
    GetWindowPosSizesOnPersonId(request: carriers.Configuration_GetWindowPosSizesOnPersonIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WindowPosSize[]>;
    /**
     * Gets the window and dialog position and size settings belonging to the specified person
     * @param personId - Person id of the associate owning these window settings
     * @returns Array of window and dialog position and size settings
     */
    GetWindowPosSizesOnPersonId(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WindowPosSize[]>;
    private _GetWindowPosSizesOnAssociateId;
    /**
     * Gets the window and dialog position and size settings belonging to the specified associate
     * @param request - AssociateId
     * @returns Array of window and dialog position and size settings
     */
    GetWindowPosSizesOnAssociateId(request: carriers.Configuration_GetWindowPosSizesOnAssociateIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WindowPosSize[]>;
    /**
     * Gets the window and dialog position and size settings belonging to the specified associate
     * @param associateId - Associate id of the Associate/Person owning these window settings
     * @returns Array of window and dialog position and size settings
     */
    GetWindowPosSizesOnAssociateId(associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WindowPosSize[]>;
    private _SaveWindowPosSizes;
    /**
     * Saves a set of window and dialog position and size settings.
     * @param request - WindowPosSizes
     * @returns The saved items
     */
    SaveWindowPosSizes(request: carriers.Configuration_SaveWindowPosSizesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WindowPosSize[]>;
    /**
     * Saves a set of window and dialog position and size settings.
     * @param windowPosSizes - The items that are saved
     * @returns The saved items
     */
    SaveWindowPosSizes(windowPosSizes: carriers.WindowPosSize[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.WindowPosSize[]>;
}
//# sourceMappingURL=ConfigurationAgent.d.ts.map