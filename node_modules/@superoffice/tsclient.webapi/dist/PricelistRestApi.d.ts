import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * A pricelist is basically a collection of products. It can be valid in a time period, and outright deactivated. All prices in the product list is in a specific currency. We have decieded not to separate prices and products, which means that we get a simpler data model, but some redundancy.
 * Services for the Quote Management feature, part of the Sale module
 *
 * `api/v1/Pricelist`
 */
export interface IPricelistRestApi {
    GetDefault(options?: base.WebApiGetRequestOptions): Promise<carriers.PriceList>;
    Post(entity: carriers.PriceList, options?: base.WebApiPutRequestOptions): Promise<carriers.PriceList>;
    PutById(id: number, entity: carriers.PriceList, options?: base.WebApiPutRequestOptions): Promise<carriers.PriceList>;
    PatchById(id: number, entity: base.WebApiPatchOperation[] | carriers.PriceList, options?: base.WebApiPutRequestOptions): Promise<carriers.PriceList>;
    DeleteById(PriceListId: number, options?: base.WebApiPutRequestOptions): Promise<void>;
    GetById(PriceListId: number, options?: base.WebApiGetRequestOptions): Promise<carriers.PriceList>;
}
/**
 * A pricelist is basically a collection of products. It can be valid in a time period, and outright deactivated. All prices in the product list is in a specific currency. We have decieded not to separate prices and products, which means that we get a simpler data model, but some redundancy.
 * Services for the Quote Management feature, part of the Sale module
 *
 * `api/v1/Pricelist`
 */
export declare class PricelistRestApi extends base.WebApiBase implements IPricelistRestApi {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * `GET /api/v1/Pricelist/default`
     * Set default values into a new PriceList.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    GetDefault(options?: base.WebApiGetRequestOptions): Promise<carriers.PriceList>;
    Post(newPricelist: carriers.PriceList, options?: base.WebApiPutRequestOptions): Promise<carriers.PriceList>;
    PutById(id: number, pricelist: carriers.PriceList, options?: base.WebApiPutRequestOptions): Promise<carriers.PriceList>;
    PatchById(id: number, pricelist: base.WebApiPatchOperation[] | carriers.PriceList, options?: base.WebApiPutRequestOptions): Promise<carriers.PriceList>;
    DeleteById(pricelistId: number, options?: base.WebApiPutRequestOptions): Promise<void>;
    GetById(pricelistId: number, options?: base.WebApiGetRequestOptions): Promise<carriers.PriceList>;
}
//# sourceMappingURL=PricelistRestApi.d.ts.map