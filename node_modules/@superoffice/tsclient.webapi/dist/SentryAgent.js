"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.SentryAgent = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
/**
 * Data and function right queries
 */
class SentryAgent extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Sentry/";
        super(options);
    }
    async _GetNewTableRight(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetNewTableRight", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_TableRight_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetNewTableRight(tableName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = tableName;
        if (typeof (first) === "object" && first && (typeof (first.TableName) != 'undefined')) {
            _request = tableName;
            _options = webapi_options;
        }
        else {
            _request = {
                TableName: tableName,
            };
            _options = webapi_options;
        }
        return this._GetNewTableRight(_request, _options);
    }
    async _GetTableRightByOwnership(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetTableRightByOwnership", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_TableRight_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetTableRightByOwnership(tableName, contactGroupId, contactAssociateId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = tableName;
        if (typeof (first) === "object" && first && (typeof (first.TableName) != 'undefined' || typeof (first.ContactGroupId) != 'undefined' || typeof (first.ContactAssociateId) != 'undefined')) {
            _request = tableName;
            _options = contactGroupId;
        }
        else {
            _request = {
                TableName: tableName,
                ContactGroupId: contactGroupId,
                ContactAssociateId: contactAssociateId,
            };
            _options = webapi_options;
        }
        return this._GetTableRightByOwnership(_request, _options);
    }
    async _GetFunctionRights(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetFunctionRights", undefined, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Get a string array of all functions rights for the role of the current associate.
     * @returns String array with the technical names of assigned function rights
     */
    async GetFunctionRights(webapi_options) {
        return this._GetFunctionRights(webapi_options);
    }
    async _HasFunctionRight(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("HasFunctionRight", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async HasFunctionRight(functionRight, webapi_options) {
        let _request = null;
        let _options = null;
        const first = functionRight;
        if (typeof (first) === "object" && first && (typeof (first.FunctionRight) != 'undefined')) {
            _request = functionRight;
            _options = webapi_options;
        }
        else {
            _request = {
                FunctionRight: functionRight,
            };
            _options = webapi_options;
        }
        return this._HasFunctionRight(_request, _options);
    }
    async _CanCreateAppointmentInAssociateDiaries(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("CanCreateAppointmentInAssociateDiaries", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async CanCreateAppointmentInAssociateDiaries(associateIds, webapi_options) {
        let _request = null;
        let _options = null;
        const first = associateIds;
        if (typeof (first) === "object" && first && (typeof (first.AssociateIds) != 'undefined')) {
            _request = associateIds;
            _options = webapi_options;
        }
        else {
            _request = {
                AssociateIds: associateIds,
            };
            _options = webapi_options;
        }
        return this._CanCreateAppointmentInAssociateDiaries(_request, _options);
    }
    async _CanCreateAppointmentInAllDiaries(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("CanCreateAppointmentInAllDiaries", undefined, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * CanCreateAppointmentInAllDiaries will check if the current associate can create appointments in diaries belonging all other associates. CanCreateAppointmentInAssociateDiaries will only check against associates that are diary owners.
     * @returns Returns true if the current associate can create appointments in the diary of all the other associates, otherwise false.
     */
    async CanCreateAppointmentInAllDiaries(webapi_options) {
        return this._CanCreateAppointmentInAllDiaries(webapi_options);
    }
    async _GetTableRightByContactOwnership(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetTableRightByContactOwnership", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_TableRight_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetTableRightByContactOwnership(tableName, contactId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = tableName;
        if (typeof (first) === "object" && first && (typeof (first.TableName) != 'undefined' || typeof (first.ContactId) != 'undefined')) {
            _request = tableName;
            _options = contactId;
        }
        else {
            _request = {
                TableName: tableName,
                ContactId: contactId,
            };
            _options = webapi_options;
        }
        return this._GetTableRightByContactOwnership(_request, _options);
    }
} // class v1SentryAgentController 
exports.SentryAgent = SentryAgent;
//# sourceMappingURL=SentryAgent.js.map