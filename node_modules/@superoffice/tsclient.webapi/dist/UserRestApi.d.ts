import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * SuperOffice User, with login credentials and an associated person.
 * User administration
 *
 * `api/v1/User`
 *
 * **Online Restricted:** This agent is not available in Online by default. User management is not allowed for partner apps.
 */
export interface IUserRestApi {
    GetDefault(options?: base.WebApiGetRequestOptions): Promise<carriers.User>;
    Post(entity: carriers.User, options?: base.WebApiPutRequestOptions): Promise<carriers.User>;
    PutById(id: number, entity: carriers.User, options?: base.WebApiPutRequestOptions): Promise<carriers.User>;
    PatchById(id: number, entity: base.WebApiPatchOperation[] | carriers.User, options?: base.WebApiPutRequestOptions): Promise<carriers.User>;
    DeleteById(UserId: number, options?: base.WebApiPutRequestOptions): Promise<void>;
    GetById(UserId: number, options?: base.WebApiGetRequestOptions): Promise<carriers.User>;
}
/**
 * SuperOffice User, with login credentials and an associated person.
 * User administration
 *
 * `api/v1/User`
 */
export declare class UserRestApi extends base.WebApiBase implements IUserRestApi {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * `GET /api/v1/User/default`
     * Set default values into a new User.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    GetDefault(options?: base.WebApiGetRequestOptions): Promise<carriers.User>;
    Post(newUser: carriers.User, options?: base.WebApiPutRequestOptions): Promise<carriers.User>;
    PutById(id: number, user: carriers.User, options?: base.WebApiPutRequestOptions): Promise<carriers.User>;
    PatchById(id: number, user: base.WebApiPatchOperation[] | carriers.User, options?: base.WebApiPutRequestOptions): Promise<carriers.User>;
    DeleteById(userId: number, options?: base.WebApiPutRequestOptions): Promise<void>;
    GetById(userId: number, options?: base.WebApiGetRequestOptions): Promise<carriers.User>;
}
//# sourceMappingURL=UserRestApi.d.ts.map