import { AxiosRequestConfig } from 'axios';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Agent used for CRUD operations on database tables. Read, add, update, delete rows in tables.
 */
export interface IDatabaseTableAgent {
    ReadRow(request: carriers.DatabaseTable_ReadRowRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TableRecord>;
    ReadRow(tableName: string, id: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TableRecord>;
    InsertRow(request: carriers.DatabaseTable_InsertRowRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    InsertRow(tableName: string, values: carriers.StringDictionary, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    UpdateRow(request: carriers.DatabaseTable_UpdateRowRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    UpdateRow(tableName: string, id: number, values: carriers.StringDictionary, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteRow(request: carriers.DatabaseTable_DeleteRowRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteRow(tableName: string, id: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    Insert(request: carriers.DatabaseTable_InsertRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MassOperationResult>;
    Insert(tableName: string, columns: string[], data: string[][], webapi_options?: base.WebApiRequestOptions): Promise<carriers.MassOperationResult>;
    Truncate(request: carriers.DatabaseTable_TruncateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MassOperationResult>;
    Truncate(tableName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MassOperationResult>;
    Upsert(request: carriers.DatabaseTable_UpsertRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MassOperationResult>;
    Upsert(tableName: string, columns: string[], keys: string[], data: string[][], nomatchAction: enums.UpsertNomatchAction, returnRowStatus: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MassOperationResult>;
    Delete(request: carriers.DatabaseTable_DeleteRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MassOperationResult>;
    Delete(tableName: string, iDs: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.MassOperationResult>;
}
/**
 * Agent used for CRUD operations on database tables. Read, add, update, delete rows in tables.
 */
export declare class DatabaseTableAgent extends base.WebApiBase implements IDatabaseTableAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    private _ReadRow;
    /**
     * Read a row from a table
     * @param request - TableName, Id
     * @returns The row from the table
     */
    ReadRow(request: carriers.DatabaseTable_ReadRowRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TableRecord>;
    /**
     * Read a row from a table
     * @param tableName - The name of the table to fetch; in the current release this must be an 'extratable'. Use the database name, on the form y_aTable
     * @param id - The id of the row to fetch
     * @returns The row from the table
     */
    ReadRow(tableName: string, id: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TableRecord>;
    private _InsertRow;
    /**
     * Insert a row into a table
     * @param request - TableName, Values
     * @returns The id of the newly inserted row
     */
    InsertRow(request: carriers.DatabaseTable_InsertRowRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Insert a row into a table
     * @param tableName - The name of the table to insert into; in the current release this must be an 'extratable'. Use the database name, on the form y_aTable
     * @param values - A StringDictionary with the values to insert. You do not need to specify all the values in the table. The omitted ones will get default values
     * @returns The id of the newly inserted row
     */
    InsertRow(tableName: string, values: carriers.StringDictionary, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _UpdateRow;
    /**
     * Update a row in a table
     * @param request - TableName, Id, Values
     * @returns
     */
    UpdateRow(request: carriers.DatabaseTable_UpdateRowRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Update a row in a table
     * @param tableName - The name of the table to update; in the current release this must be an 'extratable'. Use the database name, on the form y_aTable
     * @param id - The id of the row to update
     * @param values - A StringDictionary with the values to update. You do not need to specify all the values in the table. The omitted ones will remain unchanged
     * @returns
     */
    UpdateRow(tableName: string, id: number, values: carriers.StringDictionary, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _DeleteRow;
    /**
     * Delete a row from a table
     * @param request - TableName, Id
     * @returns
     */
    DeleteRow(request: carriers.DatabaseTable_DeleteRowRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Delete a row from a table
     * @param tableName - The name of the table to delete from; in the current release this must be an 'extratable'. Use the database name, on the form y_aTable
     * @param id - The id of the row to delete
     * @returns
     */
    DeleteRow(tableName: string, id: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _Insert;
    /**
     * Mass-insert rows, with or without primary keys specified. Works on physical tables with no special processing for udef etc.; traveltransactionlog and WebHooks are supported
     * @param request - TableName, Columns, Data
     * @returns Summary of results
     */
    Insert(request: carriers.DatabaseTable_InsertRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MassOperationResult>;
    /**
     * Mass-insert rows, with or without primary keys specified. Works on physical tables with no special processing for udef etc.; traveltransactionlog and WebHooks are supported
     * @param tableName - The name of the table where rows should be inserted
     * @param columns - List of column names, in the same order as in the Data parameter
     * @param data - Outer array = rows, inner = columns in specified order; use CultureDataFormatter to format values that aren't string or int
     * @returns Summary of results
     */
    Insert(tableName: string, columns: string[], data: string[][], webapi_options?: base.WebApiRequestOptions): Promise<carriers.MassOperationResult>;
    private _Truncate;
    /**
     * Drop all rows in a table. This clearance is not individually logged in TravelTransactionlog or Webhook/script calls
     * @param request - TableName
     * @returns Summary of results
     */
    Truncate(request: carriers.DatabaseTable_TruncateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MassOperationResult>;
    /**
     * Drop all rows in a table. This clearance is not individually logged in TravelTransactionlog or Webhook/script calls
     * @param tableName - Name of table to be truncated
     * @returns Summary of results
     */
    Truncate(tableName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MassOperationResult>;
    private _Upsert;
    /**
     * Insert or update rows, optionally deleting/zeroing &apos;leftover&apos; rows. Special support for UDEF, as well as optional extensive information return. Traveltransactionlog and WebHooks are supported
     * @param request - TableName, Columns, Keys, Data, NomatchAction, ReturnRowStatus
     * @returns Summary of results
     */
    Upsert(request: carriers.DatabaseTable_UpsertRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MassOperationResult>;
    /**
     * Insert or update rows, optionally deleting/zeroing &apos;leftover&apos; rows. Special support for UDEF, as well as optional extensive information return. Traveltransactionlog and WebHooks are supported
     * @param tableName - The name of the table where rows should be inserted or updated
     * @param columns - List of column names, in the same order as in the data
     * @param keys - List of columns that are to be used as keys, to match any existing rows
     * @param data - Outer array = row, inner = column in specified order; use CultureDataFormatter to format values
     * @param nomatchAction - Action to take on rows in the target table, that are not matched by any rows in the incoming data. Use the deletion options with care. NEVER use deletion if your Upsert is so large you need to divide it into multiple batches.
     * @param returnRowStatus - If true, then the 'RowStatus' member of the return carrier will be populated with a per-row status, for each incoming row
     * @returns Summary of results
     */
    Upsert(tableName: string, columns: string[], keys: string[], data: string[][], nomatchAction: enums.UpsertNomatchAction, returnRowStatus: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MassOperationResult>;
    private _Delete;
    /**
     * Delete rows, by primary key; traveltransactionlog and WebHooks are supported
     * @param request - TableName, IDs
     * @returns Summary of results
     */
    Delete(request: carriers.DatabaseTable_DeleteRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MassOperationResult>;
    /**
     * Delete rows, by primary key; traveltransactionlog and WebHooks are supported
     * @param tableName - The name of the table where rows should be deleted
     * @param iDs - Primary keys of the rows to be deleted
     * @returns Summary of results
     */
    Delete(tableName: string, iDs: number[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.MassOperationResult>;
}
//# sourceMappingURL=DatabaseTableAgent.d.ts.map