import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Information about a Product from the ERP system. This may be fetched from SuperOffice Product table through the SO Connector
 * Services for the Quote Management feature, part of the Sale module
 *
 * `api/v1/Product`
 */
export interface IProductRestApi {
    GetDefault(options?: base.WebApiGetRequestOptions): Promise<carriers.Product>;
    Post(entity: carriers.Product, options?: base.WebApiPutRequestOptions): Promise<carriers.Product>;
    PutById(id: number, entity: carriers.Product, options?: base.WebApiPutRequestOptions): Promise<carriers.Product>;
    DeleteById(ProductId: number, options?: base.WebApiPutRequestOptions): Promise<void>;
}
/**
 * Information about a Product from the ERP system. This may be fetched from SuperOffice Product table through the SO Connector
 * Services for the Quote Management feature, part of the Sale module
 *
 * `api/v1/Product`
 */
export declare class ProductRestApi extends base.WebApiBase implements IProductRestApi {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * `GET /api/v1/Product/default`
     * Set default values into a new Product.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    GetDefault(options?: base.WebApiGetRequestOptions): Promise<carriers.Product>;
    Post(newProduct: carriers.Product, options?: base.WebApiPutRequestOptions): Promise<carriers.Product>;
    PutById(id: number, product: carriers.Product, options?: base.WebApiPutRequestOptions): Promise<carriers.Product>;
    DeleteById(productId: number, options?: base.WebApiPutRequestOptions): Promise<void>;
}
//# sourceMappingURL=ProductRestApi.d.ts.map