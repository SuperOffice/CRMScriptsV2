import { AxiosRequestConfig } from 'axios';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * User administration
 *
 * **Online Restricted:** This agent is not available in Online by default. User management is not allowed for partner apps.
 */
export interface IUserAgent {
    CreateDefaultRoleEntity(): Promise<carriers.RoleEntity>;
    SaveRoleEntity(entity: carriers.RoleEntity): Promise<carriers.RoleEntity>;
    CreateDefaultServiceAuth(): Promise<carriers.ServiceAuth>;
    SaveServiceAuth(entity: carriers.ServiceAuth): Promise<carriers.ServiceAuth>;
    DeleteServiceAuth(ServiceAuthId: number): Promise<void>;
    CreateDefaultUntrustedCredentials(): Promise<carriers.UntrustedCredentials>;
    CreateDefaultUser(): Promise<carriers.User>;
    SaveUser(entity: carriers.User): Promise<carriers.User>;
    DeleteUser(UserId: number): Promise<void>;
    GetAccessGatewayInfo(webapi_options?: base.WebApiRequestOptions): Promise<carriers.AccessGatewayInfo>;
    GetOrRegisterAccessGatewayInfo(request: carriers.User_GetOrRegisterAccessGatewayInfoRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AccessGatewayInfo>;
    GetOrRegisterAccessGatewayInfo(redirectUri: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AccessGatewayInfo>;
    RegisterWithAccessGateway(request: carriers.User_RegisterWithAccessGatewayRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AccessGatewayInfo>;
    RegisterWithAccessGateway(redirectUri: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AccessGatewayInfo>;
    CheckAccessGatewayRegistration(webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    SaveCredential(request: carriers.User_SaveCredentialRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    SaveCredential(userId: number, credential: carriers.Credential, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    DeleteCredential(request: carriers.User_DeleteCredentialRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    DeleteCredential(userId: number, credentialType: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    FindCredentialsGroups(request: carriers.User_FindCredentialsGroupsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CredentialsGroup[]>;
    FindCredentialsGroups(type: string, searchString: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CredentialsGroup[]>;
    FindCredentialUsers(request: carriers.User_FindCredentialUsersRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CredentialsGroupUsers>;
    FindCredentialUsers(type: string, searchString: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CredentialsGroupUsers>;
    GetCredentialUsersInGroup(request: carriers.User_GetCredentialUsersInGroupRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CredentialsGroupUsers>;
    GetCredentialUsersInGroup(type: string, groupName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CredentialsGroupUsers>;
    GetRole(roleId: number): Promise<carriers.Role>;
    GetRoleEntity(roleEntityId: number): Promise<carriers.RoleEntity>;
    DeleteRole(request: carriers.User_DeleteRoleRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteRole(roleIdToDelete: number, replacingRoleId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetAllRoles(request: carriers.User_GetAllRolesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    GetAllRoles(roleType: enums.RoleType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    GetAllFunctionalRights(request: carriers.User_GetAllFunctionalRightsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    GetAllFunctionalRights(roleType: enums.RoleType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    GetFunctionalRights(request: carriers.User_GetFunctionalRightsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    GetFunctionalRights(roleId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    SetFunctionalRights(request: carriers.User_SetFunctionalRightsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetFunctionalRights(roleId: number, functionalRightIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetDataRight(request: carriers.User_SetDataRightRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetDataRight(roleId: number, tableName: string, relationToOwner: enums.RoleRelationToOwner, dataRightValue: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetDataRight(request: carriers.User_GetDataRightRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetDataRight(roleId: number, tableName: string, relationToOwner: enums.RoleRelationToOwner, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetDataRights(request: carriers.User_GetDataRightsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    GetDataRights(roleId: number, tableName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    CreateDefaultRoleEntityFromType(request: carriers.User_CreateDefaultRoleEntityFromTypeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RoleEntity>;
    CreateDefaultRoleEntityFromType(type: enums.RoleType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RoleEntity>;
    FindRolesWithFunctionalRight(request: carriers.User_FindRolesWithFunctionalRightRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    FindRolesWithFunctionalRight(functionalRightName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    FindRolesWithFunctionalRights(request: carriers.User_FindRolesWithFunctionalRightsRequest, webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    FindRolesWithFunctionalRights(functionalRightNames: string[], webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    FindRolesWithoutFunctionalRights(request: carriers.User_FindRolesWithoutFunctionalRightsRequest, webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    FindRolesWithoutFunctionalRights(functionalRightNames: string[], webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    GetServiceAuth(serviceAuthId: number): Promise<carriers.ServiceAuth>;
    SaveExternalTokens(request: carriers.User_SaveExternalTokensRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    SaveExternalTokens(tokenManagementInfo: carriers.TokenManagementInfo, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    DecryptAndSaveExternalTokens(request: carriers.User_DecryptAndSaveExternalTokensRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    DecryptAndSaveExternalTokens(tokenManagementInfo: carriers.TokenManagementInfo, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetExternalTokens(request: carriers.User_GetExternalTokensRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TokenManagementInfo>;
    GetExternalTokens(key: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TokenManagementInfo>;
    GetUser(userId: number): Promise<carriers.User>;
    GetUserFromName(request: carriers.User_GetUserFromNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User>;
    GetUserFromName(userName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User>;
    SaveUserFromName(request: carriers.User_SaveUserFromNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User>;
    SaveUserFromName(userName: string, user: carriers.User, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User>;
    DeleteUserFromName(request: carriers.User_DeleteUserFromNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteUserFromName(userName: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetCredentialTypes(webapi_options?: base.WebApiRequestOptions): Promise<carriers.CredentialType[]>;
    GetCredentialTypesForUserType(request: carriers.User_GetCredentialTypesForUserTypeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CredentialType[]>;
    GetCredentialTypesForUserType(userType: enums.UserType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CredentialType[]>;
    SaveUntrustedCredentials(request: carriers.User_SaveUntrustedCredentialsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SaveUntrustedCredentials(type: string, credentials: carriers.UntrustedCredentials, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetUntrustedCredentials(request: carriers.User_GetUntrustedCredentialsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UntrustedCredentials[]>;
    GetUntrustedCredentials(type: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UntrustedCredentials[]>;
    GetUntrustedCredentialsForAssociate(request: carriers.User_GetUntrustedCredentialsForAssociateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UntrustedCredentials[]>;
    GetUntrustedCredentialsForAssociate(associateId: number, type: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UntrustedCredentials[]>;
    SaveUntrustedCredentialsForAssociate(request: carriers.User_SaveUntrustedCredentialsForAssociateRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SaveUntrustedCredentialsForAssociate(associateId: number, type: string, credentials: carriers.UntrustedCredentials, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RemoveUntrustedCredentials(request: carriers.User_RemoveUntrustedCredentialsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RemoveUntrustedCredentials(type: string, publicValue: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RemoveUntrustedCredentialsForAssociate(request: carriers.User_RemoveUntrustedCredentialsForAssociateRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RemoveUntrustedCredentialsForAssociate(associateId: number, type: string, publicValue: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    CreateExternalUser(request: carriers.User_CreateExternalUserRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    CreateExternalUser(personId: number, userName: string, password: string, roleId: number, isActive: boolean, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    DeleteExternalUser(request: carriers.User_DeleteExternalUserRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteExternalUser(associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetExternalUserInfo(request: carriers.User_SetExternalUserInfoRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetExternalUserInfo(associateId: number, userName: string, password: string, isActive: boolean, roleId: number, externalUserInfoModification: enums.ExternalUserInfoModification, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GenerateNewPasswordForExternalUser(request: carriers.User_GenerateNewPasswordForExternalUserRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GenerateNewPasswordForExternalUser(associateName: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    CanChangePassword(request: carriers.User_CanChangePasswordRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    CanChangePassword(associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    GetSupportedChangePasswordTypes(request: carriers.User_GetSupportedChangePasswordTypesRequest, webapi_options?: base.WebApiRequestOptions): Promise<enums.ChangePasswordType[]>;
    GetSupportedChangePasswordTypes(associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<enums.ChangePasswordType[]>;
    ChangePassword(request: carriers.User_ChangePasswordRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    ChangePassword(associateId: number, oldPassword: string, newPassword: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    SendChangePasswordEMail(request: carriers.User_SendChangePasswordEMailRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.OperationResult>;
    SendChangePasswordEMail(associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.OperationResult>;
    GetUserFromPersonId(request: carriers.User_GetUserFromPersonIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User[]>;
    GetUserFromPersonId(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User[]>;
    CreateDefaultUserFromUserTypeAndPersonId(request: carriers.User_CreateDefaultUserFromUserTypeAndPersonIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User>;
    CreateDefaultUserFromUserTypeAndPersonId(userType: enums.UserType, personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User>;
    CreateDefaultUserFromUserType(request: carriers.User_CreateDefaultUserFromUserTypeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User>;
    CreateDefaultUserFromUserType(userType: enums.UserType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User>;
    GetUserFromEjUserId(request: carriers.User_GetUserFromEjUserIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User[]>;
    GetUserFromEjUserId(ejUserId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User[]>;
    SetPasswordFromName(request: carriers.User_SetPasswordFromNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    SetPasswordFromName(associateName: string, password: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    SetPassword(request: carriers.User_SetPasswordRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    SetPassword(associateId: number, password: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    ChangeOwnPassword(request: carriers.User_ChangeOwnPasswordRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    ChangeOwnPassword(oldPassword: string, newPassword: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    ChangePasswordFromName(request: carriers.User_ChangePasswordFromNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    ChangePasswordFromName(associateName: string, oldPassword: string, newPassword: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    IsUserNameValid(request: carriers.User_IsUserNameValidRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    IsUserNameValid(associateId: number, type: enums.UserType, personId: number, userName: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    IsPasswordValid(request: carriers.User_IsPasswordValidRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    IsPasswordValid(associateId: number, type: enums.UserType, personId: number, password: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    SetGeneratedPassword(request: carriers.User_SetGeneratedPasswordRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    SetGeneratedPassword(associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    SetGeneratedPasswordFromName(request: carriers.User_SetGeneratedPasswordFromNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    SetGeneratedPasswordFromName(associateName: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    IsPasswordValidWithReason(request: carriers.User_IsPasswordValidWithReasonRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserValidationResult>;
    IsPasswordValidWithReason(associateId: number, type: enums.UserType, personId: number, password: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserValidationResult>;
    IsUserNameValidWithReason(request: carriers.User_IsUserNameValidWithReasonRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserValidationResult>;
    IsUserNameValidWithReason(associateId: number, type: enums.UserType, personId: number, userName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserValidationResult>;
    ChangeUserType(request: carriers.User_ChangeUserTypeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User>;
    ChangeUserType(user: carriers.User, userType: enums.UserType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User>;
    CreateDefaultUserFromUserTypeAndCredential(request: carriers.User_CreateDefaultUserFromUserTypeAndCredentialRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User>;
    CreateDefaultUserFromUserTypeAndCredential(userType: enums.UserType, contactId: number, credentialType: string, credentialValue: string, credentialDisplayValue: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User>;
    GetValidUserName(request: carriers.User_GetValidUserNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetValidUserName(associateId: number, type: enums.UserType, personId: number, userName: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    RemoveLicenses(request: carriers.User_RemoveLicensesRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RemoveLicenses(associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    MakeRetired(request: carriers.User_MakeRetiredRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    MakeRetired(associateId: number, retired: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    AddOwnerContact(request: carriers.User_AddOwnerContactRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    AddOwnerContact(contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RemoveOwnerContact(request: carriers.User_RemoveOwnerContactRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RemoveOwnerContact(contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    ResolveUserFromInfo(request: carriers.User_ResolveUserFromInfoRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ResolvedUser>;
    ResolveUserFromInfo(contactId: number, personName: string, phoneNumbers: string[], emails: string[], userType: enums.UserType, credential: carriers.Credential, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ResolvedUser>;
    GetAccessToken(request: carriers.User_GetAccessTokenRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetAccessToken(appToken: string, includeCsSession: boolean, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetValidUserNameForNewUser(request: carriers.User_GetValidUserNameForNewUserRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetValidUserNameForNewUser(user: carriers.User, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetDefaultAssociateUserName(request: carriers.User_GetDefaultAssociateUserNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetDefaultAssociateUserName(user: carriers.User, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    IsNickNameUnique(request: carriers.User_IsNickNameUniqueRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    IsNickNameUnique(associateId: number, nickName: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    ValidateUser(request: carriers.User_ValidateUserRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    ValidateUser(user: carriers.User, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    GetUserPresenceStatus(request: carriers.User_GetUserPresenceStatusRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserPresenceStatus>;
    GetUserPresenceStatus(associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserPresenceStatus>;
    SetUserPresenceStatus(request: carriers.User_SetUserPresenceStatusRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserPresenceStatus>;
    SetUserPresenceStatus(associateId: number, userPresenceStatus: carriers.UserPresenceStatus, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserPresenceStatus>;
    GetUserGroup(userGroupId: number): Promise<carriers.UserGroup>;
    SaveUserGroup(request: carriers.User_SaveUserGroupRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserGroup>;
    SaveUserGroup(userGroup: carriers.UserGroup, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserGroup>;
    GetAllUserGroups(request: carriers.User_GetAllUserGroupsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserGroup[]>;
    GetAllUserGroups(includeDeleted: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserGroup[]>;
    CreateUserGroup(webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserGroup>;
    DeleteUserGroup(request: carriers.User_DeleteUserGroupRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteUserGroup(userGroupToDelete: number, userGroupToMoveTo: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetUserGroupList(userGroupIds: number[]): Promise<carriers.UserGroup[]>;
    GetUserInfo(userInfoId: number): Promise<carriers.UserInfo>;
    GetUserInfoList(userInfoIds: number[]): Promise<carriers.UserInfo[]>;
}
/**
 * User administration
 */
export declare class UserAgent extends base.WebApiBase implements IUserAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * Set default values into a new RoleEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultRoleEntity(options?: base.WebApiRequestOptions): Promise<carriers.RoleEntity>;
    SaveRoleEntity(entity: carriers.RoleEntity, options?: base.WebApiRequestOptions): Promise<carriers.RoleEntity>;
    /**
     * Set default values into a new ServiceAuth.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultServiceAuth(options?: base.WebApiRequestOptions): Promise<carriers.ServiceAuth>;
    SaveServiceAuth(entity: carriers.ServiceAuth, options?: base.WebApiRequestOptions): Promise<carriers.ServiceAuth>;
    DeleteServiceAuth(ServiceAuthId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new UntrustedCredentials.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultUntrustedCredentials(options?: base.WebApiRequestOptions): Promise<carriers.UntrustedCredentials>;
    /**
     * Set default values into a new User.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultUser(options?: base.WebApiRequestOptions): Promise<carriers.User>;
    SaveUser(entity: carriers.User, options?: base.WebApiRequestOptions): Promise<carriers.User>;
    GetUserCommands(request: carriers.GetUserCommandsRequest, options?: base.WebApiRequestOptions): Promise<carriers.CustomCommand[]>;
    ExecuteUserCommand(request: carriers.ExecuteUserCommandRequest, options?: base.WebApiRequestOptions): Promise<carriers.CommandResult>;
    DeleteUser(UserId: number, options?: base.WebApiRequestOptions): Promise<void>;
    private _GetAccessGatewayInfo;
    /**
     * Returns accessgateway registration info
     * @returns
     */
    GetAccessGatewayInfo(webapi_options?: base.WebApiRequestOptions): Promise<carriers.AccessGatewayInfo>;
    private _GetOrRegisterAccessGatewayInfo;
    /**
     * Returns accessgateway registration info and registers a new or adds the url if necessary
     * @param request - RedirectUri
     * @returns
     */
    GetOrRegisterAccessGatewayInfo(request: carriers.User_GetOrRegisterAccessGatewayInfoRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AccessGatewayInfo>;
    /**
     * Returns accessgateway registration info and registers a new or adds the url if necessary
     * @param redirectUri - This is the registered redirect_uri for AccessGateway OIDC.
     * @returns
     */
    GetOrRegisterAccessGatewayInfo(redirectUri: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AccessGatewayInfo>;
    private _RegisterWithAccessGateway;
    /**
     * Registers with access gateway if not already done, otherwise will attempt to update
     * @param request - RedirectUri
     * @returns
     */
    RegisterWithAccessGateway(request: carriers.User_RegisterWithAccessGatewayRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AccessGatewayInfo>;
    /**
     * Registers with access gateway if not already done, otherwise will attempt to update
     * @param redirectUri - This is the registered redirect_uri for AccessGateway OIDC.
     * @returns
     */
    RegisterWithAccessGateway(redirectUri: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.AccessGatewayInfo>;
    private _CheckAccessGatewayRegistration;
    /**
     * Checks if AccessGatewayRegistration is valid
     * @returns True if the registration is usable
     */
    CheckAccessGatewayRegistration(webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _SaveCredential;
    /**
     * Save (adds/replaces) current credential of the same type for the user.
     * @param request - UserId, Credential
     * @returns True if the credential was successfully saved.
     */
    SaveCredential(request: carriers.User_SaveCredentialRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Save (adds/replaces) current credential of the same type for the user.
     * @param userId - Primary key of the user (i.e. associate)
     * @param credential - Credentials supported for authentication
     * @returns True if the credential was successfully saved.
     */
    SaveCredential(userId: number, credential: carriers.Credential, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _DeleteCredential;
    /**
     * Remove credential of a specific type for a user
     * @param request - UserId, CredentialType
     * @returns True if credential was sucessfully removed.
     */
    DeleteCredential(request: carriers.User_DeleteCredentialRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Remove credential of a specific type for a user
     * @param userId - Primary key of the user (i.e. associate)
     * @param credentialType - Type of credentials, corresponding to name of plugin and type in the credentials table
     * @returns True if credential was sucessfully removed.
     */
    DeleteCredential(userId: number, credentialType: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _FindCredentialsGroups;
    /**
     * Get user groups holding users filtered by the searchString.  This method is only relevant if the CredentialType control is of type link.  There will allways be at least one groups even if the underlying provider does not support groups.
     * @param request - Type, SearchString
     * @returns
     */
    FindCredentialsGroups(request: carriers.User_FindCredentialsGroupsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CredentialsGroup[]>;
    /**
     * Get user groups holding users filtered by the searchString.  This method is only relevant if the CredentialType control is of type link.  There will allways be at least one groups even if the underlying provider does not support groups.
     * @param type - Type of credentials, corresponding to name of plugin and type in the credentials table.
     * @param searchString - Partly name of domain group.
     * @returns
     */
    FindCredentialsGroups(type: string, searchString: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CredentialsGroup[]>;
    private _FindCredentialUsers;
    /**
     * Find users matching the partial name.
     * @param request - Type, SearchString
     * @returns
     */
    FindCredentialUsers(request: carriers.User_FindCredentialUsersRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CredentialsGroupUsers>;
    /**
     * Find users matching the partial name.
     * @param type - Type of credentials, corresponding to name of plugin and type in the credentials table.
     * @param searchString - Partly name of the user group
     * @returns
     */
    FindCredentialUsers(type: string, searchString: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CredentialsGroupUsers>;
    private _GetCredentialUsersInGroup;
    /**
     * Get credential users within a user group
     * @param request - Type, GroupName
     * @returns
     */
    GetCredentialUsersInGroup(request: carriers.User_GetCredentialUsersInGroupRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CredentialsGroupUsers>;
    /**
     * Get credential users within a user group
     * @param type - Type of credentials, corresponding to name of plugin and type in the credentials table.
     * @param groupName - Name of user group needed to discover the users.
     * @returns
     */
    GetCredentialUsersInGroup(type: string, groupName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CredentialsGroupUsers>;
    GetRole(roleId: number, options?: base.WebApiRequestOptions): Promise<carriers.Role>;
    GetRoleEntity(roleEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.RoleEntity>;
    private _DeleteRole;
    /**
     * Delete the specified role and move all users associated with the role to the replacingRoleId
     * @param request - RoleIdToDelete, ReplacingRoleId
     * @returns
     */
    DeleteRole(request: carriers.User_DeleteRoleRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Delete the specified role and move all users associated with the role to the replacingRoleId
     * @param roleIdToDelete - The roleId to delete
     * @param replacingRoleId - The roleId which all associated users will be moved to.
     * @returns
     */
    DeleteRole(roleIdToDelete: number, replacingRoleId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetAllRoles;
    /**
     * Get a list of all roles for the given type of role. MDO List name = &apos;Roles&apos;, extra=&apos;0&apos; (roleType)
     * @param request - RoleType
     * @returns FunctionRight items with name and description. Code name for function right is in the extra-info property.
     */
    GetAllRoles(request: carriers.User_GetAllRolesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    /**
     * Get a list of all roles for the given type of role. MDO List name = &apos;Roles&apos;, extra=&apos;0&apos; (roleType)
     * @param roleType - Type of role (Employee/External/Anonymous/System)
     * @returns FunctionRight items with name and description. Code name for function right is in the extra-info property.
     */
    GetAllRoles(roleType: enums.RoleType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    private _GetAllFunctionalRights;
    /**
     * Get a list of all functional rights for the given type of role. MDO List name = &apos;FunctionRights&apos;, extra=&apos;roleType=0&apos;
     * @param request - RoleType
     * @returns FunctionRight items with name and description. Code name for function right is in the extra-info property.
     */
    GetAllFunctionalRights(request: carriers.User_GetAllFunctionalRightsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    /**
     * Get a list of all functional rights for the given type of role. MDO List name = &apos;FunctionRights&apos;, extra=&apos;roleType=0&apos;
     * @param roleType - Type of role (Employee/External/Anonymous/System)
     * @returns FunctionRight items with name and description. Code name for function right is in the extra-info property.
     */
    GetAllFunctionalRights(roleType: enums.RoleType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    private _GetFunctionalRights;
    /**
     * Get all functional rights for the given role. Functional rights not set on the role are not included. MDO List name = &apos;FunctionRights&apos;, extra=&apos;role=123&apos;
     * @param request - RoleId
     * @returns FunctionRight items with name and description. Code name for function right is in the extra-info property.
     */
    GetFunctionalRights(request: carriers.User_GetFunctionalRightsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    /**
     * Get all functional rights for the given role. Functional rights not set on the role are not included. MDO List name = &apos;FunctionRights&apos;, extra=&apos;role=123&apos;
     * @param roleId - The role id to get the functional rights for.
     * @returns FunctionRight items with name and description. Code name for function right is in the extra-info property.
     */
    GetFunctionalRights(roleId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    private _SetFunctionalRights;
    /**
     * Set all functional rights for the given role. Functional rights not specified here will be removed from the role.
     * @param request - RoleId, FunctionalRightIds
     * @returns
     */
    SetFunctionalRights(request: carriers.User_SetFunctionalRightsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set all functional rights for the given role. Functional rights not specified here will be removed from the role.
     * @param roleId - The role id to set the functional rights for
     * @param functionalRightIds - An array of functional rights ids to set for this role. Rights not included here are removed from the role.
     * @returns
     */
    SetFunctionalRights(roleId: number, functionalRightIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SetDataRight;
    /**
     * Set one specific data right at the given position. An exception will be thrown if non existing position is specified.
     * @param request - RoleId, TableName, RelationToOwner, DataRightValue
     * @returns
     */
    SetDataRight(request: carriers.User_SetDataRightRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set one specific data right at the given position. An exception will be thrown if non existing position is specified.
     * @param roleId - The role id to set the data right for
     * @param tableName - The name of the entity/table
     * @param relationToOwner - The id of the relation to owner
     * @param dataRightValue - The data right value to set at the specified position (CRUD)
     * @returns
     */
    SetDataRight(roleId: number, tableName: string, relationToOwner: enums.RoleRelationToOwner, dataRightValue: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetDataRight;
    /**
     * Read one specific data right at the given position. An exception will be thrown if non existing position is specified.
     * @param request - RoleId, TableName, RelationToOwner
     * @returns The data right value at the specified position (C, CR, CRU, or CRUD)
     */
    GetDataRight(request: carriers.User_GetDataRightRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Read one specific data right at the given position. An exception will be thrown if non existing position is specified.
     * @param roleId - The role id to set the data right for
     * @param tableName - The name of the entity/table
     * @param relationToOwner - The id of the relation to owner
     * @returns The data right value at the specified position (C, CR, CRU, or CRUD)
     */
    GetDataRight(roleId: number, tableName: string, relationToOwner: enums.RoleRelationToOwner, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetDataRights;
    /**
     * Read specific a set of data rights at the given row in the rights matrix. An exception will be thrown if non existing position is specified.
     * @param request - RoleId, TableName
     * @returns The data right values for all the defined relationships (C, CR, CRU, or CRUD)
     */
    GetDataRights(request: carriers.User_GetDataRightsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    /**
     * Read specific a set of data rights at the given row in the rights matrix. An exception will be thrown if non existing position is specified.
     * @param roleId - The role id to set the data right for
     * @param tableName - The name of the entity/table
     * @returns The data right values for all the defined relationships (C, CR, CRU, or CRUD)
     */
    GetDataRights(roleId: number, tableName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    private _CreateDefaultRoleEntityFromType;
    /**
     * Create a new role entity of the specified role type. The role type cannot be changed after the entity is created.
     * @param request - Type
     * @returns A blank role.
     */
    CreateDefaultRoleEntityFromType(request: carriers.User_CreateDefaultRoleEntityFromTypeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RoleEntity>;
    /**
     * Create a new role entity of the specified role type. The role type cannot be changed after the entity is created.
     * @param type - Type of role (Employee/External/Anonymous/System)
     * @returns A blank role.
     */
    CreateDefaultRoleEntityFromType(type: enums.RoleType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RoleEntity>;
    private _FindRolesWithFunctionalRight;
    /**
     * Find all roles with a given functional right. The roles matched must contain the specified functional right.
     * @param request - FunctionalRightName
     * @returns Roles that contains the given functional right
     */
    FindRolesWithFunctionalRight(request: carriers.User_FindRolesWithFunctionalRightRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    /**
     * Find all roles with a given functional right. The roles matched must contain the specified functional right.
     * @param functionalRightName - Functional right name to search for
     * @returns Roles that contains the given functional right
     */
    FindRolesWithFunctionalRight(functionalRightName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    private _FindRolesWithFunctionalRights;
    /**
     * Find all roles with a given set of functional rights. The roles matched must contain one or more of the specified functional rights.
     * @param request - FunctionalRightNames
     * @returns Role ids that contains your functional rights
     */
    FindRolesWithFunctionalRights(request: carriers.User_FindRolesWithFunctionalRightsRequest, webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    /**
     * Find all roles with a given set of functional rights. The roles matched must contain one or more of the specified functional rights.
     * @param functionalRightNames - An array of functional rights names to search for
     * @returns Role ids that contains your functional rights
     */
    FindRolesWithFunctionalRights(functionalRightNames: string[], webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    private _FindRolesWithoutFunctionalRights;
    /**
     * Find all roles without a given set of functional rights. The roles matched must not contain any of the specified functional rights.
     * @param request - FunctionalRightNames
     * @returns Role ids that without your functional rights
     */
    FindRolesWithoutFunctionalRights(request: carriers.User_FindRolesWithoutFunctionalRightsRequest, webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    /**
     * Find all roles without a given set of functional rights. The roles matched must not contain any of the specified functional rights.
     * @param functionalRightNames - An array of functional rights names to search for
     * @returns Role ids that without your functional rights
     */
    FindRolesWithoutFunctionalRights(functionalRightNames: string[], webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    GetServiceAuth(serviceAuthId: number, options?: base.WebApiRequestOptions): Promise<carriers.ServiceAuth>;
    private _SaveExternalTokens;
    /**
     * Saves the external tokens to the DB and returns a key that can be used to retrieve them
     * @param request - TokenManagementInfo
     * @returns Key that can be used to retrieve the tokens
     */
    SaveExternalTokens(request: carriers.User_SaveExternalTokensRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Saves the external tokens to the DB and returns a key that can be used to retrieve them
     * @param tokenManagementInfo - Token information.
     * @returns Key that can be used to retrieve the tokens
     */
    SaveExternalTokens(tokenManagementInfo: carriers.TokenManagementInfo, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _DecryptAndSaveExternalTokens;
    /**
     * First asks AccessGateway to decrypt the tokens, then saves the external tokens to the DB and returns a key that can be used to retrieve them
     * @param request - TokenManagementInfo
     * @returns Key that can be used to retrieve the tokens
     */
    DecryptAndSaveExternalTokens(request: carriers.User_DecryptAndSaveExternalTokensRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * First asks AccessGateway to decrypt the tokens, then saves the external tokens to the DB and returns a key that can be used to retrieve them
     * @param tokenManagementInfo - Token information.
     * @returns Key that can be used to retrieve the tokens
     */
    DecryptAndSaveExternalTokens(tokenManagementInfo: carriers.TokenManagementInfo, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetExternalTokens;
    /**
     * Retrieve the tokens from the DB based on the given key
     * @param request - Key
     * @returns Key to retrieve tokens
     */
    GetExternalTokens(request: carriers.User_GetExternalTokensRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TokenManagementInfo>;
    /**
     * Retrieve the tokens from the DB based on the given key
     * @param key - Token retrievel key
     * @returns Key to retrieve tokens
     */
    GetExternalTokens(key: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TokenManagementInfo>;
    GetUser(userId: number, options?: base.WebApiRequestOptions): Promise<carriers.User>;
    private _GetUserFromName;
    /**
     * Get a user, with lookup based on user name.
     * @param request - UserName
     * @returns User retrieved by name
     */
    GetUserFromName(request: carriers.User_GetUserFromNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User>;
    /**
     * Get a user, with lookup based on user name.
     * @param userName - User name of the user to get.
     * @returns User retrieved by name
     */
    GetUserFromName(userName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User>;
    private _SaveUserFromName;
    /**
     * Save a user, with lookup based on the user name.
     * @param request - UserName, User
     * @returns User retrieved by name
     */
    SaveUserFromName(request: carriers.User_SaveUserFromNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User>;
    /**
     * Save a user, with lookup based on the user name.
     * @param userName - User name of the user to get.
     * @param user - User object to save.
     * @returns User retrieved by name
     */
    SaveUserFromName(userName: string, user: carriers.User, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User>;
    private _DeleteUserFromName;
    /**
     * Delete a user, with lookup based on the user name.
     * @param request - UserName
     * @returns This method has no return value
     */
    DeleteUserFromName(request: carriers.User_DeleteUserFromNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Delete a user, with lookup based on the user name.
     * @param userName - User name of the user to delete.
     * @returns This method has no return value
     */
    DeleteUserFromName(userName: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetCredentialTypes;
    /**
     * Get available credential types that can be used for authentication
     * @returns Credential types that can be used for authentication
     */
    GetCredentialTypes(webapi_options?: base.WebApiRequestOptions): Promise<carriers.CredentialType[]>;
    private _GetCredentialTypesForUserType;
    /**
     * Get available credential types that can be used for the specified user type.
     * @param request - UserType
     * @returns Credential types that can be used for authentication
     */
    GetCredentialTypesForUserType(request: carriers.User_GetCredentialTypesForUserTypeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CredentialType[]>;
    /**
     * Get available credential types that can be used for the specified user type.
     * @param userType - The user type to retrieve credential types for
     * @returns Credential types that can be used for authentication
     */
    GetCredentialTypesForUserType(userType: enums.UserType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CredentialType[]>;
    private _SaveUntrustedCredentials;
    /**
     * Save credentials for authenticated user.
     * @param request - Type, Credentials
     * @returns
     */
    SaveUntrustedCredentials(request: carriers.User_SaveUntrustedCredentialsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Save credentials for authenticated user.
     * @param type - Type of credential(Ex: "imap", "smtp")
     * @param credentials - Credentials to save.
     * @returns
     */
    SaveUntrustedCredentials(type: string, credentials: carriers.UntrustedCredentials, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetUntrustedCredentials;
    /**
     * Get a set of credentials of a specified type for authenticated user.
     * @param request - Type
     * @returns Array of credentials of the specified type.
     */
    GetUntrustedCredentials(request: carriers.User_GetUntrustedCredentialsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UntrustedCredentials[]>;
    /**
     * Get a set of credentials of a specified type for authenticated user.
     * @param type - Type of credential(Ex: "imap", "smtp").
     * @returns Array of credentials of the specified type.
     */
    GetUntrustedCredentials(type: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UntrustedCredentials[]>;
    private _GetUntrustedCredentialsForAssociate;
    /**
     * Get a set of credentials of a specified type for a specified user. SecretValue is only populated for authenticated user, and system users.
     * @param request - AssociateId, Type
     * @returns Array of credentials of the specified type.
     */
    GetUntrustedCredentialsForAssociate(request: carriers.User_GetUntrustedCredentialsForAssociateRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UntrustedCredentials[]>;
    /**
     * Get a set of credentials of a specified type for a specified user. SecretValue is only populated for authenticated user, and system users.
     * @param associateId - Id of user to retrieve credentials for.
     * @param type - Type of credential(Ex: "imap", "smtp").
     * @returns Array of credentials of the specified type.
     */
    GetUntrustedCredentialsForAssociate(associateId: number, type: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UntrustedCredentials[]>;
    private _SaveUntrustedCredentialsForAssociate;
    /**
     * Save credentials for a specified user.
     * @param request - AssociateId, Type, Credentials
     * @returns
     */
    SaveUntrustedCredentialsForAssociate(request: carriers.User_SaveUntrustedCredentialsForAssociateRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Save credentials for a specified user.
     * @param associateId - Id of user to save credentials for.
     * @param type - Type of credential(Ex: "imap", "smtp")
     * @param credentials - Credentials to save.
     * @returns
     */
    SaveUntrustedCredentialsForAssociate(associateId: number, type: string, credentials: carriers.UntrustedCredentials, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _RemoveUntrustedCredentials;
    /**
     * Remove a credentials entry for authenticated user.
     * @param request - Type, PublicValue
     * @returns
     */
    RemoveUntrustedCredentials(request: carriers.User_RemoveUntrustedCredentialsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Remove a credentials entry for authenticated user.
     * @param type - Type of credential(Ex: "imap", "smtp")
     * @param publicValue - PublicValue field of credentials to remove.
     * @returns
     */
    RemoveUntrustedCredentials(type: string, publicValue: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _RemoveUntrustedCredentialsForAssociate;
    /**
     * Remove a credentials entry for a specified user.
     * @param request - AssociateId, Type, PublicValue
     * @returns
     */
    RemoveUntrustedCredentialsForAssociate(request: carriers.User_RemoveUntrustedCredentialsForAssociateRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Remove a credentials entry for a specified user.
     * @param associateId - Id of user to remove credentials for.
     * @param type - Type of credential(Ex: "imap", "smtp")
     * @param publicValue - PublicValue field of credentials to remove.
     * @returns
     */
    RemoveUntrustedCredentialsForAssociate(associateId: number, type: string, publicValue: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _CreateExternalUser;
    /**
     * Creates an associate of type external user.
     * @param request - PersonId, UserName, Password, RoleId, IsActive
     * @returns Returns the created associateId.
     */
    CreateExternalUser(request: carriers.User_CreateExternalUserRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Creates an associate of type external user.
     * @param personId - The personId to create an external user for.
     * @param userName - Login username.
     * @param password - Login password.
     * @param roleId - Id of role for the external user. The role must be a role of type external users.
     * @param isActive - Set isActive to true to enable the external user to log in.
     * @returns Returns the created associateId.
     */
    CreateExternalUser(personId: number, userName: string, password: string, roleId: number, isActive: boolean, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _DeleteExternalUser;
    /**
     * Deletes an associate of type external user.
     * @param request - AssociateId
     * @returns
     */
    DeleteExternalUser(request: carriers.User_DeleteExternalUserRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Deletes an associate of type external user.
     * @param associateId - The associateId to delete the associate entry for.
     * @returns
     */
    DeleteExternalUser(associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SetExternalUserInfo;
    /**
     * Modifies an external user. Changes external users information according to the flags set in  externalUserInfoModification.
     * @param request - AssociateId, UserName, Password, IsActive, RoleId, ExternalUserInfoModification
     * @returns
     */
    SetExternalUserInfo(request: carriers.User_SetExternalUserInfoRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Modifies an external user. Changes external users information according to the flags set in  externalUserInfoModification.
     * @param associateId - The associateId to alter.
     * @param userName - Login username.
     * @param password - Login password.
     * @param isActive - Set isActive to true to enable the external user to log in.
     * @param roleId - Id of role for the external user. The role must be a role of type external users.
     * @param externalUserInfoModification - externalUserInfoModification is a flag describing what to change. <see cref="SuperOffice.CRM.Services.Util.ExternalUserInfoModification"/>.
     * @returns
     */
    SetExternalUserInfo(associateId: number, userName: string, password: string, isActive: boolean, roleId: number, externalUserInfoModification: enums.ExternalUserInfoModification, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GenerateNewPasswordForExternalUser;
    /**
     * Generates a new password for an external user.
     * @param request - AssociateName
     * @returns Returns the generated password.
     */
    GenerateNewPasswordForExternalUser(request: carriers.User_GenerateNewPasswordForExternalUserRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Generates a new password for an external user.
     * @param associateName - The name of the associate to change the password for.
     * @returns Returns the generated password.
     */
    GenerateNewPasswordForExternalUser(associateName: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _CanChangePassword;
    /**
     * Check if the current assoicate can change the password for an associate
     * @param request - AssociateId
     * @returns True if the associate can change the password
     */
    CanChangePassword(request: carriers.User_CanChangePasswordRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Check if the current assoicate can change the password for an associate
     * @param associateId - AssociateId of the user to check if password can be changed
     * @returns True if the associate can change the password
     */
    CanChangePassword(associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _GetSupportedChangePasswordTypes;
    /**
     * Get the different methods the user can use to change password
     * @param request - AssociateId
     * @returns List of types - empty if the user cannot change password in any way
     */
    GetSupportedChangePasswordTypes(request: carriers.User_GetSupportedChangePasswordTypesRequest, webapi_options?: base.WebApiRequestOptions): Promise<enums.ChangePasswordType[]>;
    /**
     * Get the different methods the user can use to change password
     * @param associateId - AssociateId of the user to check if password can be changed
     * @returns List of types - empty if the user cannot change password in any way
     */
    GetSupportedChangePasswordTypes(associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<enums.ChangePasswordType[]>;
    private _ChangePassword;
    /**
     * Change password for a user.
     * @param request - AssociateId, OldPassword, NewPassword
     * @returns True if the password was successfully changed.
     */
    ChangePassword(request: carriers.User_ChangePasswordRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Change password for a user.
     * @param associateId - AssociateId of the user to change password for.
     * @param oldPassword - The current password of the user.  Administrators can leave this blank to force a new password upon a user.
     * @param newPassword - The new password for the user
     * @returns True if the password was successfully changed.
     */
    ChangePassword(associateId: number, oldPassword: string, newPassword: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _SendChangePasswordEMail;
    /**
     * Send a change password email to this users registered address.
     * @param request - AssociateId
     * @returns Result - with result flag and optional error reason.
     */
    SendChangePasswordEMail(request: carriers.User_SendChangePasswordEMailRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.OperationResult>;
    /**
     * Send a change password email to this users registered address.
     * @param associateId - AssociateId of the user to change password for.
     * @returns Result - with result flag and optional error reason.
     */
    SendChangePasswordEMail(associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.OperationResult>;
    private _GetUserFromPersonId;
    /**
     * Returns the user associated with the supplied person id
     * @param request - PersonId
     * @returns
     */
    GetUserFromPersonId(request: carriers.User_GetUserFromPersonIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User[]>;
    /**
     * Returns the user associated with the supplied person id
     * @param personId -
     * @returns
     */
    GetUserFromPersonId(personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User[]>;
    private _CreateDefaultUserFromUserTypeAndPersonId;
    /**
     * Create default User providing the associate type and person id.  System and Anonymous users can be created without an exsisting person and permits person id to be 0.
     * @param request - UserType, PersonId
     * @returns New user object with defalt values set.
     */
    CreateDefaultUserFromUserTypeAndPersonId(request: carriers.User_CreateDefaultUserFromUserTypeAndPersonIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User>;
    /**
     * Create default User providing the associate type and person id.  System and Anonymous users can be created without an exsisting person and permits person id to be 0.
     * @param userType - Type of associate for the user
     * @param personId - Primary key of the person to become a user.
     * @returns New user object with defalt values set.
     */
    CreateDefaultUserFromUserTypeAndPersonId(userType: enums.UserType, personId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User>;
    private _CreateDefaultUserFromUserType;
    /**
     * Create default User providing the user type.  Only System and Anonymous users can be created without an exsisting person.  Use CreateDefaultUserFromUserTypeAndPersonId to create internal (i.e. Employee) or external users.
     * @param request - UserType
     * @returns New user object with defalt values set.
     */
    CreateDefaultUserFromUserType(request: carriers.User_CreateDefaultUserFromUserTypeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User>;
    /**
     * Create default User providing the user type.  Only System and Anonymous users can be created without an exsisting person.  Use CreateDefaultUserFromUserTypeAndPersonId to create internal (i.e. Employee) or external users.
     * @param userType - Type of associate for the user.  This can only be System or Anonymous. Use CreateDefaultUserFromUserTypeAndPersonId to create internal (i.e. Employee) or external users.
     * @returns New user object with defalt values set.
     */
    CreateDefaultUserFromUserType(userType: enums.UserType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User>;
    private _GetUserFromEjUserId;
    /**
     * Get user from ejUserId - used for eJournal Legacy Support.
     * @param request - EjUserId
     * @returns
     */
    GetUserFromEjUserId(request: carriers.User_GetUserFromEjUserIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User[]>;
    /**
     * Get user from ejUserId - used for eJournal Legacy Support.
     * @param ejUserId - ejUserId -
     * @returns
     */
    GetUserFromEjUserId(ejUserId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User[]>;
    private _SetPasswordFromName;
    /**
     * Change password for a user.
     * @param request - AssociateName, Password
     * @returns Succeeded?
     */
    SetPasswordFromName(request: carriers.User_SetPasswordFromNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Change password for a user.
     * @param associateName - Username to set password for
     * @param password - New password
     * @returns Succeeded?
     */
    SetPasswordFromName(associateName: string, password: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _SetPassword;
    /**
     * Change password for a user.
     * @param request - AssociateId, Password
     * @returns Succeeded?
     */
    SetPassword(request: carriers.User_SetPasswordRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Change password for a user.
     * @param associateId - Id of User to set password for
     * @param password - New password
     * @returns Succeeded?
     */
    SetPassword(associateId: number, password: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _ChangeOwnPassword;
    /**
     * Change password for a user.
     * @param request - OldPassword, NewPassword
     * @returns True if the password was successfully changed.
     */
    ChangeOwnPassword(request: carriers.User_ChangeOwnPasswordRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Change password for a user.
     * @param oldPassword - The current password of the user.  Administrators can leave this blank to force a new password upon a user.
     * @param newPassword - The new password for the user
     * @returns True if the password was successfully changed.
     */
    ChangeOwnPassword(oldPassword: string, newPassword: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _ChangePasswordFromName;
    /**
     * Change password for a user.
     * @param request - AssociateName, OldPassword, NewPassword
     * @returns True if the password was successfully changed.
     */
    ChangePasswordFromName(request: carriers.User_ChangePasswordFromNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Change password for a user.
     * @param associateName - Username of the user to change password for.
     * @param oldPassword - The current password of the user.  Administrators can leave this blank to force a new password upon a user.
     * @param newPassword - The new password for the user
     * @returns True if the password was successfully changed.
     */
    ChangePasswordFromName(associateName: string, oldPassword: string, newPassword: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _IsUserNameValid;
    /**
     *
     * @param request - AssociateId, Type, PersonId, UserName
     * @returns
     */
    IsUserNameValid(request: carriers.User_IsUserNameValidRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     *
     * @param associateId -
     * @param type -
     * @param personId -
     * @param userName -
     * @returns
     */
    IsUserNameValid(associateId: number, type: enums.UserType, personId: number, userName: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _IsPasswordValid;
    /**
     *
     * @param request - AssociateId, Type, PersonId, Password
     * @returns
     */
    IsPasswordValid(request: carriers.User_IsPasswordValidRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     *
     * @param associateId -
     * @param type -
     * @param personId -
     * @param password -
     * @returns
     */
    IsPasswordValid(associateId: number, type: enums.UserType, personId: number, password: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _SetGeneratedPassword;
    /**
     *
     * @param request - AssociateId
     * @returns
     */
    SetGeneratedPassword(request: carriers.User_SetGeneratedPasswordRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     *
     * @param associateId -
     * @returns
     */
    SetGeneratedPassword(associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _SetGeneratedPasswordFromName;
    /**
     *
     * @param request - AssociateName
     * @returns
     */
    SetGeneratedPasswordFromName(request: carriers.User_SetGeneratedPasswordFromNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     *
     * @param associateName -
     * @returns
     */
    SetGeneratedPasswordFromName(associateName: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _IsPasswordValidWithReason;
    /**
     *
     * @param request - AssociateId, Type, PersonId, Password
     * @returns
     */
    IsPasswordValidWithReason(request: carriers.User_IsPasswordValidWithReasonRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserValidationResult>;
    /**
     *
     * @param associateId -
     * @param type -
     * @param personId -
     * @param password -
     * @returns
     */
    IsPasswordValidWithReason(associateId: number, type: enums.UserType, personId: number, password: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserValidationResult>;
    private _IsUserNameValidWithReason;
    /**
     *
     * @param request - AssociateId, Type, PersonId, UserName
     * @returns
     */
    IsUserNameValidWithReason(request: carriers.User_IsUserNameValidWithReasonRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserValidationResult>;
    /**
     *
     * @param associateId -
     * @param type -
     * @param personId -
     * @param userName -
     * @returns
     */
    IsUserNameValidWithReason(associateId: number, type: enums.UserType, personId: number, userName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserValidationResult>;
    private _ChangeUserType;
    /**
     * Get a user from the user name.
     * @param request - User, UserType
     * @returns User retrieved by name
     */
    ChangeUserType(request: carriers.User_ChangeUserTypeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User>;
    /**
     * Get a user from the user name.
     * @param user - User name of the user to get.
     * @param userType -
     * @returns User retrieved by name
     */
    ChangeUserType(user: carriers.User, userType: enums.UserType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User>;
    private _CreateDefaultUserFromUserTypeAndCredential;
    /**
     * Creates a PersonEntity with default values based on the contactId and credentials.
     * @param request - UserType, ContactId, CredentialType, CredentialValue, CredentialDisplayValue
     * @returns
     */
    CreateDefaultUserFromUserTypeAndCredential(request: carriers.User_CreateDefaultUserFromUserTypeAndCredentialRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User>;
    /**
     * Creates a PersonEntity with default values based on the contactId and credentials.
     * @param userType - Type of associate for the user
     * @param contactId - Contact id of the person
     * @param credentialType - Type of credentials, corresponding to name of plugin and type in the credentials table.
     * @param credentialValue - This is the actuall value of the credentials.  This will typically be the password or teh users SID in active directory
     * @param credentialDisplayValue - The value displayed to the user. this will typically be the users login name in active directory.
     * @returns
     */
    CreateDefaultUserFromUserTypeAndCredential(userType: enums.UserType, contactId: number, credentialType: string, credentialValue: string, credentialDisplayValue: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.User>;
    private _GetValidUserName;
    /**
     *
     * @param request - AssociateId, Type, PersonId, UserName
     * @returns
     */
    GetValidUserName(request: carriers.User_GetValidUserNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     *
     * @param associateId -
     * @param type -
     * @param personId -
     * @param userName -
     * @returns
     */
    GetValidUserName(associateId: number, type: enums.UserType, personId: number, userName: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _RemoveLicenses;
    /**
     * Remove all user licenses.
     * @param request - AssociateId
     * @returns
     */
    RemoveLicenses(request: carriers.User_RemoveLicensesRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Remove all user licenses.
     * @param associateId -
     * @returns
     */
    RemoveLicenses(associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _MakeRetired;
    /**
     * Retiring a user means to remove all licenses, setting person.retired=1 and associate.deleted=1. Unretiering a user means setting  person.retired=0 and associate.deleted=0
     * @param request - AssociateId, Retired
     * @returns
     */
    MakeRetired(request: carriers.User_MakeRetiredRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Retiring a user means to remove all licenses, setting person.retired=1 and associate.deleted=1. Unretiering a user means setting  person.retired=0 and associate.deleted=0
     * @param associateId -
     * @param retired -
     * @returns
     */
    MakeRetired(associateId: number, retired: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _AddOwnerContact;
    /**
     *
     * @param request - ContactId
     * @returns
     */
    AddOwnerContact(request: carriers.User_AddOwnerContactRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     *
     * @param contactId - Id of the contact to add as a owner contact
     * @returns
     */
    AddOwnerContact(contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _RemoveOwnerContact;
    /**
     * Remove a contact from the ownercontactlink table
     * @param request - ContactId
     * @returns
     */
    RemoveOwnerContact(request: carriers.User_RemoveOwnerContactRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Remove a contact from the ownercontactlink table
     * @param contactId - The id of the contact to remove
     * @returns
     */
    RemoveOwnerContact(contactId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _ResolveUserFromInfo;
    /**
     * Get a user from the provided information. If the user or associated person does not exist, it will be created on demand.
     * @param request - ContactId, PersonName, PhoneNumbers, Emails, UserType, Credential
     * @returns The results of the resolve-operation.
     */
    ResolveUserFromInfo(request: carriers.User_ResolveUserFromInfoRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ResolvedUser>;
    /**
     * Get a user from the provided information. If the user or associated person does not exist, it will be created on demand.
     * @param contactId - The contact Id of the contact which the person belongs to. Cannot be 0.
     * @param personName - The full name of the person to be resolved. Optional.
     * @param phoneNumbers - Phone numbers registered on the person. Optional.
     * @param emails - Email-addresses registered on the person. Optional.
     * @param userType - The type of user to look up or create.
     * @param credential - The credentials to be used for the user. Required.
     * @returns The results of the resolve-operation.
     */
    ResolveUserFromInfo(contactId: number, personName: string, phoneNumbers: string[], emails: string[], userType: enums.UserType, credential: carriers.Credential, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ResolvedUser>;
    private _GetAccessToken;
    /**
     * Get an access token based on the current user&apos;s session.
     * @param request - AppToken, IncludeCsSession
     * @returns An access token. "8A:xyz123=="
     */
    GetAccessToken(request: carriers.User_GetAccessTokenRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Get an access token based on the current user&apos;s session.
     * @param appToken - Application token to get access on behalf of. Optional.
     * @param includeCsSession - Initialize CS session for this access token?.
     * @returns An access token. "8A:xyz123=="
     */
    GetAccessToken(appToken: string, includeCsSession: boolean, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetValidUserNameForNewUser;
    /**
     * Generates a valid username for an unsaved user
     * @param request - User
     * @returns
     */
    GetValidUserNameForNewUser(request: carriers.User_GetValidUserNameForNewUserRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Generates a valid username for an unsaved user
     * @param user -
     * @returns
     */
    GetValidUserNameForNewUser(user: carriers.User, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetDefaultAssociateUserName;
    /**
     * Get the default username for a person
     * @param request - User
     * @returns
     */
    GetDefaultAssociateUserName(request: carriers.User_GetDefaultAssociateUserNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Get the default username for a person
     * @param user -
     * @returns
     */
    GetDefaultAssociateUserName(user: carriers.User, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _IsNickNameUnique;
    /**
     *
     * @param request - AssociateId, NickName
     * @returns
     */
    IsNickNameUnique(request: carriers.User_IsNickNameUniqueRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     *
     * @param associateId -
     * @param nickName -
     * @returns
     */
    IsNickNameUnique(associateId: number, nickName: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _ValidateUser;
    /**
     * Check that entity is ready for saving, return error messages by field.
     * @param request - User
     * @returns Error messages tagged by field.
     */
    ValidateUser(request: carriers.User_ValidateUserRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    /**
     * Check that entity is ready for saving, return error messages by field.
     * @param user - Entity to be checked for errors.
     * @returns Error messages tagged by field.
     */
    ValidateUser(user: carriers.User, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    private _GetUserPresenceStatus;
    /**
     * Get user presence status
     * @param request - AssociateId
     * @returns User presence status
     */
    GetUserPresenceStatus(request: carriers.User_GetUserPresenceStatusRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserPresenceStatus>;
    /**
     * Get user presence status
     * @param associateId - AssociateId of user to retrieve status for.
     * @returns User presence status
     */
    GetUserPresenceStatus(associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserPresenceStatus>;
    private _SetUserPresenceStatus;
    /**
     * Set user presence status
     * @param request - AssociateId, UserPresenceStatus
     * @returns User presence status
     */
    SetUserPresenceStatus(request: carriers.User_SetUserPresenceStatusRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserPresenceStatus>;
    /**
     * Set user presence status
     * @param associateId - AssociateId of user to set status for.
     * @param userPresenceStatus - User presence status to set
     * @returns User presence status
     */
    SetUserPresenceStatus(associateId: number, userPresenceStatus: carriers.UserPresenceStatus, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserPresenceStatus>;
    GetUserGroup(userGroupId: number, options?: base.WebApiRequestOptions): Promise<carriers.UserGroup>;
    private _SaveUserGroup;
    /**
     * Save a user group.  Set UserGroup.Deleted to mark a user group as deleted and invisible in the user interface.
     * @param request - UserGroup
     * @returns UserGroup as saved to the database
     */
    SaveUserGroup(request: carriers.User_SaveUserGroupRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserGroup>;
    /**
     * Save a user group.  Set UserGroup.Deleted to mark a user group as deleted and invisible in the user interface.
     * @param userGroup - UserGroup to save
     * @returns UserGroup as saved to the database
     */
    SaveUserGroup(userGroup: carriers.UserGroup, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserGroup>;
    private _GetAllUserGroups;
    /**
     * Get all user groups
     * @param request - IncludeDeleted
     * @returns All user groups
     */
    GetAllUserGroups(request: carriers.User_GetAllUserGroupsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserGroup[]>;
    /**
     * Get all user groups
     * @param includeDeleted - Include user groups with Deleted set to true
     * @returns All user groups
     */
    GetAllUserGroups(includeDeleted: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserGroup[]>;
    private _CreateUserGroup;
    /**
     * Create UserGroup (Rank is assigned to the highest rank)
     * @returns
     */
    CreateUserGroup(webapi_options?: base.WebApiRequestOptions): Promise<carriers.UserGroup>;
    private _DeleteUserGroup;
    /**
     * Delete a usergroup and move its members to another usergroup
     * @param request - UserGroupToDelete, UserGroupToMoveTo
     * @returns
     */
    DeleteUserGroup(request: carriers.User_DeleteUserGroupRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Delete a usergroup and move its members to another usergroup
     * @param userGroupToDelete - The id of the userGroup to delete
     * @param userGroupToMoveTo - The id of the userGroup to move the members to
     * @returns
     */
    DeleteUserGroup(userGroupToDelete: number, userGroupToMoveTo: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetUserGroupList(userGroupIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.UserGroup[]>;
    GetUserInfo(userInfoId: number, options?: base.WebApiRequestOptions): Promise<carriers.UserInfo>;
    GetUserInfoList(userInfoIds: number[], options?: base.WebApiRequestOptions): Promise<carriers.UserInfo[]>;
}
//# sourceMappingURL=UserAgent.d.ts.map