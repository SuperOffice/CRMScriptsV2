import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Administration and maintenance of SAINT counters and statuses
 */
export interface ISaintAgent {
    CreateDefaultSaintConfiguration(): Promise<carriers.SaintConfiguration>;
    SaveSaintConfiguration(entity: carriers.SaintConfiguration): Promise<carriers.SaintConfiguration>;
    CreateDefaultStatusMonitor(): Promise<carriers.StatusMonitor>;
    SaveStatusMonitor(entity: carriers.StatusMonitor): Promise<carriers.StatusMonitor>;
    CreateDefaultStatusMonitorPeriods(): Promise<carriers.StatusMonitorPeriods>;
    SaveStatusMonitorPeriods(entity: carriers.StatusMonitorPeriods): Promise<carriers.StatusMonitorPeriods>;
    GetSaintConfigurations(webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaintConfiguration[]>;
    GetStatusMonitors(request: carriers.Saint_GetStatusMonitorsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StatusMonitor[]>;
    GetStatusMonitors(id: number, type: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StatusMonitor[]>;
    GetStatusMonitor(request: carriers.Saint_GetStatusMonitorRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StatusMonitor>;
    GetStatusMonitor(id: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StatusMonitor>;
    RegenerateStatusMonitors(request: carriers.Saint_RegenerateStatusMonitorsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo>;
    RegenerateStatusMonitors(runAsBatch: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo>;
    SetRankOnStatusMonitors(request: carriers.Saint_SetRankOnStatusMonitorsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetRankOnStatusMonitors(type: string, itemsIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RegenerateStatusMonitor(request: carriers.Saint_RegenerateStatusMonitorRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RegenerateStatusMonitor(statusMonitorId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RegenerateCounters(request: carriers.Saint_RegenerateCountersRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo>;
    RegenerateCounters(runAsBatch: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo>;
    GetStatusMonitorPeriods(webapi_options?: base.WebApiRequestOptions): Promise<carriers.StatusMonitorPeriods>;
}
/**
 * Administration and maintenance of SAINT counters and statuses
 */
export declare class SaintAgent extends base.WebApiBase implements ISaintAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * Set default values into a new SaintConfiguration.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultSaintConfiguration(options?: base.WebApiRequestOptions): Promise<carriers.SaintConfiguration>;
    SaveSaintConfiguration(entity: carriers.SaintConfiguration, options?: base.WebApiRequestOptions): Promise<carriers.SaintConfiguration>;
    /**
     * Set default values into a new StatusMonitor.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultStatusMonitor(options?: base.WebApiRequestOptions): Promise<carriers.StatusMonitor>;
    SaveStatusMonitor(entity: carriers.StatusMonitor, options?: base.WebApiRequestOptions): Promise<carriers.StatusMonitor>;
    /**
     * Set default values into a new StatusMonitorPeriods.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultStatusMonitorPeriods(options?: base.WebApiRequestOptions): Promise<carriers.StatusMonitorPeriods>;
    SaveStatusMonitorPeriods(entity: carriers.StatusMonitorPeriods, options?: base.WebApiRequestOptions): Promise<carriers.StatusMonitorPeriods>;
    private _GetSaintConfigurations;
    /**
     * Returns the StatusMonitorPeriods entity.
     * @returns The SaintConfiguration for all entities
     */
    GetSaintConfigurations(webapi_options?: base.WebApiRequestOptions): Promise<carriers.SaintConfiguration[]>;
    private _GetStatusMonitors;
    /**
     * Get all active status monitors for a specified target
     * @param request - Id, Type
     * @returns Active status monitors
     */
    GetStatusMonitors(request: carriers.Saint_GetStatusMonitorsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StatusMonitor[]>;
    /**
     * Get all active status monitors for a specified target
     * @param id - Identity of target type(contact identity, project identity etc.)
     * @param type - Type to get status monitors for("contact", "project", etc.)
     * @returns Active status monitors
     */
    GetStatusMonitors(id: number, type: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StatusMonitor[]>;
    private _GetStatusMonitor;
    /**
     * Get a single status monitor based on its identity
     * @param request - Id
     * @returns The requested status monitor
     */
    GetStatusMonitor(request: carriers.Saint_GetStatusMonitorRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StatusMonitor>;
    /**
     * Get a single status monitor based on its identity
     * @param id - Identity of status monitor
     * @returns The requested status monitor
     */
    GetStatusMonitor(id: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StatusMonitor>;
    private _RegenerateStatusMonitors;
    /**
     * Regenerate status monitors
     * @param request - RunAsBatch
     * @returns Information about the batch task, if batch execution was requested. Otherwise null
     */
    RegenerateStatusMonitors(request: carriers.Saint_RegenerateStatusMonitorsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo>;
    /**
     * Regenerate status monitors
     * @param runAsBatch - If true, then execute the regeneration as a Batch Task; the service call will return immediately. Otherwise wait until the task completes, may cause a timeout if called as a Web Service
     * @returns Information about the batch task, if batch execution was requested. Otherwise null
     */
    RegenerateStatusMonitors(runAsBatch: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo>;
    private _SetRankOnStatusMonitors;
    /**
     * Set rank order on status monitors
     * @param request - Type, ItemsIds
     * @returns This method has no return value
     */
    SetRankOnStatusMonitors(request: carriers.Saint_SetRankOnStatusMonitorsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set rank order on status monitors
     * @param type - Type of status monitors to reorder ("contact", "project", etc.)
     * @param itemsIds - The ids of the items in the order you want
     * @returns This method has no return value
     */
    SetRankOnStatusMonitors(type: string, itemsIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _RegenerateStatusMonitor;
    /**
     * Regenerate the given status monitor
     * @param request - StatusMonitorId
     * @returns This method has no return value
     */
    RegenerateStatusMonitor(request: carriers.Saint_RegenerateStatusMonitorRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Regenerate the given status monitor
     * @param statusMonitorId - The id of the statusmonitor to regenerate
     * @returns This method has no return value
     */
    RegenerateStatusMonitor(statusMonitorId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _RegenerateCounters;
    /**
     * Regenerate the Saint counters - this can take several minutes
     * @param request - RunAsBatch
     * @returns Information about the batch task, if batch execution was requested. Otherwise null
     */
    RegenerateCounters(request: carriers.Saint_RegenerateCountersRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo>;
    /**
     * Regenerate the Saint counters - this can take several minutes
     * @param runAsBatch - If true, then execute the regeneration as a Batch Task; the service call will return immediately. Otherwise wait until the task completes, may cause a timeout if called as a Web Service
     * @returns Information about the batch task, if batch execution was requested. Otherwise null
     */
    RegenerateCounters(runAsBatch: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo>;
    private _GetStatusMonitorPeriods;
    /**
     * Returns the StatusMonitorPeriods entity.
     * @returns The StatusMonitorEntity
     */
    GetStatusMonitorPeriods(webapi_options?: base.WebApiRequestOptions): Promise<carriers.StatusMonitorPeriods>;
}
//# sourceMappingURL=SaintAgent.d.ts.map