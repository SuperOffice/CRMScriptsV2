import { AxiosRequestConfig } from 'axios';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Agent lets you configure workflow automation
 */
export interface IWorkflowAgent {
    CreateDefaultEmailFlow(): Promise<carriers.EmailFlow>;
    SaveEmailFlow(entity: carriers.EmailFlow): Promise<carriers.EmailFlow>;
    DeleteEmailFlow(EmailFlowId: number): Promise<void>;
    CreateDefaultWorkflowFilter(): Promise<carriers.WorkflowFilter>;
    CreateDefaultWorkflowGoal(): Promise<carriers.WorkflowGoal>;
    SaveWorkflowGoal(entity: carriers.WorkflowGoal): Promise<carriers.WorkflowGoal>;
    DeleteWorkflowGoal(WorkflowGoalId: number): Promise<void>;
    CreateDefaultWorkflowStepOption(): Promise<carriers.WorkflowStepOption>;
    SaveWorkflowStepOption(entity: carriers.WorkflowStepOption): Promise<carriers.WorkflowStepOption>;
    DeleteWorkflowStepOption(WorkflowStepOptionId: number): Promise<void>;
    CreateDefaultWorkflowTrigger(): Promise<carriers.WorkflowTrigger>;
    SaveWorkflowTrigger(entity: carriers.WorkflowTrigger): Promise<carriers.WorkflowTrigger>;
    DeleteWorkflowTrigger(WorkflowTriggerId: number): Promise<void>;
    GetEmailFlow(emailFlowId: number): Promise<carriers.EmailFlow>;
    TryAddPersonsToEmailFlow(request: carriers.Workflow_TryAddPersonsToEmailFlowRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean[]>;
    TryAddPersonsToEmailFlow(emailFlowId: number, personIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<boolean[]>;
    CreateEmailFlowContent(request: carriers.Workflow_CreateEmailFlowContentRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    CreateEmailFlowContent(contentName: string, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    ConnectEmailFlowContent(request: carriers.Workflow_ConnectEmailFlowContentRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    ConnectEmailFlowContent(emailFlowId: number, messageId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetWorkflowGoal(workflowGoalId: number): Promise<carriers.WorkflowGoal>;
    GetWorkflowStep(request: carriers.Workflow_GetWorkflowStepRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WorkflowStepBase>;
    GetWorkflowStep(workflowStepId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WorkflowStepBase>;
    AddAfterWorkflowStep(request: carriers.Workflow_AddAfterWorkflowStepRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WorkflowStepBase>;
    AddAfterWorkflowStep(workflowStepId: number, subStep: carriers.WorkflowStepBase, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WorkflowStepBase>;
    CreateDefaultWorkflowStepFromType(request: carriers.Workflow_CreateDefaultWorkflowStepFromTypeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WorkflowStepBase>;
    CreateDefaultWorkflowStepFromType(stepType: enums.WorkflowStepType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WorkflowStepBase>;
    GetWorkflowStepOption(workflowStepOptionId: number): Promise<carriers.WorkflowStepOption>;
    GetWorkflowTrigger(workflowTriggerId: number): Promise<carriers.WorkflowTrigger>;
}
/**
 * Agent lets you configure workflow automation
 */
export declare class WorkflowAgent extends base.WebApiBase implements IWorkflowAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * Set default values into a new EmailFlow.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultEmailFlow(options?: base.WebApiRequestOptions): Promise<carriers.EmailFlow>;
    SaveEmailFlow(entity: carriers.EmailFlow, options?: base.WebApiRequestOptions): Promise<carriers.EmailFlow>;
    DeleteEmailFlow(EmailFlowId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new WorkflowFilter.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultWorkflowFilter(options?: base.WebApiRequestOptions): Promise<carriers.WorkflowFilter>;
    /**
     * Set default values into a new WorkflowGoal.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultWorkflowGoal(options?: base.WebApiRequestOptions): Promise<carriers.WorkflowGoal>;
    SaveWorkflowGoal(entity: carriers.WorkflowGoal, options?: base.WebApiRequestOptions): Promise<carriers.WorkflowGoal>;
    DeleteWorkflowGoal(WorkflowGoalId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new WorkflowStepOption.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultWorkflowStepOption(options?: base.WebApiRequestOptions): Promise<carriers.WorkflowStepOption>;
    SaveWorkflowStepOption(entity: carriers.WorkflowStepOption, options?: base.WebApiRequestOptions): Promise<carriers.WorkflowStepOption>;
    DeleteWorkflowStepOption(WorkflowStepOptionId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new WorkflowTrigger.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultWorkflowTrigger(options?: base.WebApiRequestOptions): Promise<carriers.WorkflowTrigger>;
    SaveWorkflowTrigger(entity: carriers.WorkflowTrigger, options?: base.WebApiRequestOptions): Promise<carriers.WorkflowTrigger>;
    DeleteWorkflowTrigger(WorkflowTriggerId: number, options?: base.WebApiRequestOptions): Promise<void>;
    GetEmailFlow(emailFlowId: number, options?: base.WebApiRequestOptions): Promise<carriers.EmailFlow>;
    private _TryAddPersonsToEmailFlow;
    /**
     * Try to add a participant to the EmailFlow
     * @param request - EmailFlowId, PersonIds
     * @returns True if the corresponding participant was successfully added, false if it could not be added because of filter criteria or other reason
     */
    TryAddPersonsToEmailFlow(request: carriers.Workflow_TryAddPersonsToEmailFlowRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean[]>;
    /**
     * Try to add a participant to the EmailFlow
     * @param emailFlowId - Primary key of EmailFlow
     * @param personIds - Array of Person Ids
     * @returns True if the corresponding participant was successfully added, false if it could not be added because of filter criteria or other reason
     */
    TryAddPersonsToEmailFlow(emailFlowId: number, personIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<boolean[]>;
    private _CreateEmailFlowContent;
    /**
     * Create content to an email flow
     * @param request - ContentName
     * @returns Id of shipment created
     */
    CreateEmailFlowContent(request: carriers.Workflow_CreateEmailFlowContentRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Create content to an email flow
     * @param contentName - The name of the content created
     * @returns Id of shipment created
     */
    CreateEmailFlowContent(contentName: string, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _ConnectEmailFlowContent;
    /**
     * Link any SMessage to the email flow. The SMessage (and any related SShipment etc) should probably not be used/visible elsewhere.
     * @param request - EmailFlowId, MessageId
     * @returns
     */
    ConnectEmailFlowContent(request: carriers.Workflow_ConnectEmailFlowContentRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Link any SMessage to the email flow. The SMessage (and any related SShipment etc) should probably not be used/visible elsewhere.
     * @param emailFlowId - The EmailFlow to connect the message to.
     * @param messageId - The s_message to connect to the flow. A shipment, form or flow may be connected to that s_message.
     * @returns
     */
    ConnectEmailFlowContent(emailFlowId: number, messageId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetWorkflowGoal(workflowGoalId: number, options?: base.WebApiRequestOptions): Promise<carriers.WorkflowGoal>;
    private _GetWorkflowStep;
    /**
     * Get Workflowstep by ID
     * @param request - WorkflowStepId
     * @returns The Workflow step
     */
    GetWorkflowStep(request: carriers.Workflow_GetWorkflowStepRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WorkflowStepBase>;
    /**
     * Get Workflowstep by ID
     * @param workflowStepId - Primary key of WorkflowStep
     * @returns The Workflow step
     */
    GetWorkflowStep(workflowStepId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WorkflowStepBase>;
    private _AddAfterWorkflowStep;
    /**
     * Add another step (and any of its substeps) after the given step id (which must exist), and move any following steps in the workflow further down the line.
     * @param request - WorkflowStepId, SubStep
     * @returns The added step
     */
    AddAfterWorkflowStep(request: carriers.Workflow_AddAfterWorkflowStepRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WorkflowStepBase>;
    /**
     * Add another step (and any of its substeps) after the given step id (which must exist), and move any following steps in the workflow further down the line.
     * @param workflowStepId - Primary key of WorkflowStep
     * @param subStep - The step to be inserted after given step id.
     * @returns The added step
     */
    AddAfterWorkflowStep(workflowStepId: number, subStep: carriers.WorkflowStepBase, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WorkflowStepBase>;
    private _CreateDefaultWorkflowStepFromType;
    /**
     * Creates a new carrier from the step type given, with the right kind of properties, defaults set.
     * @param request - StepType
     * @returns
     */
    CreateDefaultWorkflowStepFromType(request: carriers.Workflow_CreateDefaultWorkflowStepFromTypeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WorkflowStepBase>;
    /**
     * Creates a new carrier from the step type given, with the right kind of properties, defaults set.
     * @param stepType - Step type to create
     * @returns
     */
    CreateDefaultWorkflowStepFromType(stepType: enums.WorkflowStepType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WorkflowStepBase>;
    GetWorkflowStepOption(workflowStepOptionId: number, options?: base.WebApiRequestOptions): Promise<carriers.WorkflowStepOption>;
    GetWorkflowTrigger(workflowTriggerId: number, options?: base.WebApiRequestOptions): Promise<carriers.WorkflowTrigger>;
}
//# sourceMappingURL=WorkflowAgent.d.ts.map