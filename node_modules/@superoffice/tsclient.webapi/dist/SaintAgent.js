"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.SaintAgent = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
/**
 * Administration and maintenance of SAINT counters and statuses
 */
class SaintAgent extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Saint/";
        super(options);
    }
    /**
     * Set default values into a new SaintConfiguration.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    async CreateDefaultSaintConfiguration(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultSaintConfiguration", null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_SaintConfiguration_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing SaintConfiguration or creates a new SaintConfiguration if the id parameter is empty
     * @param entity - The SaintConfiguration to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated SaintConfiguration
     */
    async SaveSaintConfiguration(entity, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveSaintConfiguration", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_SaintConfiguration_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Set default values into a new StatusMonitor.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    async CreateDefaultStatusMonitor(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultStatusMonitor", null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_StatusMonitor_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing StatusMonitor or creates a new StatusMonitor if the id parameter is empty
     * @param entity - The StatusMonitor to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated StatusMonitor
     */
    async SaveStatusMonitor(entity, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveStatusMonitor", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_StatusMonitor_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Set default values into a new StatusMonitorPeriods.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    async CreateDefaultStatusMonitorPeriods(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultStatusMonitorPeriods", null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_StatusMonitorPeriods_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing StatusMonitorPeriods or creates a new StatusMonitorPeriods if the id parameter is empty
     * @param entity - The StatusMonitorPeriods to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated StatusMonitorPeriods
     */
    async SaveStatusMonitorPeriods(entity, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveStatusMonitorPeriods", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_StatusMonitorPeriods_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async _GetSaintConfigurations(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetSaintConfigurations", undefined, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_SaintConfigurationArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Returns the StatusMonitorPeriods entity.
     * @returns The SaintConfiguration for all entities
     */
    async GetSaintConfigurations(webapi_options) {
        return this._GetSaintConfigurations(webapi_options);
    }
    async _GetStatusMonitors(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetStatusMonitors", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_StatusMonitorArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetStatusMonitors(id, type, webapi_options) {
        let _request = null;
        let _options = null;
        const first = id;
        if (typeof (first) === "object" && first && (typeof (first.Id) != 'undefined' || typeof (first.Type) != 'undefined')) {
            _request = id;
            _options = type;
        }
        else {
            _request = {
                Id: id,
                Type: type,
            };
            _options = webapi_options;
        }
        return this._GetStatusMonitors(_request, _options);
    }
    async _GetStatusMonitor(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetStatusMonitor", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_StatusMonitor_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetStatusMonitor(id, webapi_options) {
        let _request = null;
        let _options = null;
        const first = id;
        if (typeof (first) === "object" && first && (typeof (first.Id) != 'undefined')) {
            _request = id;
            _options = webapi_options;
        }
        else {
            _request = {
                Id: id,
            };
            _options = webapi_options;
        }
        return this._GetStatusMonitor(_request, _options);
    }
    async _RegenerateStatusMonitors(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("RegenerateStatusMonitors", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_BatchTaskInfo_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async RegenerateStatusMonitors(runAsBatch, webapi_options) {
        let _request = null;
        let _options = null;
        const first = runAsBatch;
        if (typeof (first) === "object" && first && (typeof (first.RunAsBatch) != 'undefined')) {
            _request = runAsBatch;
            _options = webapi_options;
        }
        else {
            _request = {
                RunAsBatch: runAsBatch,
            };
            _options = webapi_options;
        }
        return this._RegenerateStatusMonitors(_request, _options);
    }
    async _SetRankOnStatusMonitors(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetRankOnStatusMonitors", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SetRankOnStatusMonitors(type, itemsIds, webapi_options) {
        let _request = null;
        let _options = null;
        const first = type;
        if (typeof (first) === "object" && first && (typeof (first.Type) != 'undefined' || typeof (first.ItemsIds) != 'undefined')) {
            _request = type;
            _options = itemsIds;
        }
        else {
            _request = {
                Type: type,
                ItemsIds: itemsIds,
            };
            _options = webapi_options;
        }
        return this._SetRankOnStatusMonitors(_request, _options);
    }
    async _RegenerateStatusMonitor(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("RegenerateStatusMonitor", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async RegenerateStatusMonitor(statusMonitorId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = statusMonitorId;
        if (typeof (first) === "object" && first && (typeof (first.StatusMonitorId) != 'undefined')) {
            _request = statusMonitorId;
            _options = webapi_options;
        }
        else {
            _request = {
                StatusMonitorId: statusMonitorId,
            };
            _options = webapi_options;
        }
        return this._RegenerateStatusMonitor(_request, _options);
    }
    async _RegenerateCounters(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("RegenerateCounters", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_BatchTaskInfo_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async RegenerateCounters(runAsBatch, webapi_options) {
        let _request = null;
        let _options = null;
        const first = runAsBatch;
        if (typeof (first) === "object" && first && (typeof (first.RunAsBatch) != 'undefined')) {
            _request = runAsBatch;
            _options = webapi_options;
        }
        else {
            _request = {
                RunAsBatch: runAsBatch,
            };
            _options = webapi_options;
        }
        return this._RegenerateCounters(_request, _options);
    }
    async _GetStatusMonitorPeriods(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetStatusMonitorPeriods", undefined, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_StatusMonitorPeriods_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Returns the StatusMonitorPeriods entity.
     * @returns The StatusMonitorEntity
     */
    async GetStatusMonitorPeriods(webapi_options) {
        return this._GetStatusMonitorPeriods(webapi_options);
    }
} // class v1SaintAgentController 
exports.SaintAgent = SaintAgent;
//# sourceMappingURL=SaintAgent.js.map