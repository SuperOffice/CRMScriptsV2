import { AxiosRequestConfig } from 'axios';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Agent lets you configure targets, and retrieve targets
 */
export interface ITargetsAgent {
    CreateDefaultTargetAssignment(): Promise<carriers.TargetAssignment>;
    CreateDefaultTargetDimension(): Promise<carriers.TargetDimension>;
    SaveTargetDimension(entity: carriers.TargetDimension): Promise<carriers.TargetDimension>;
    DeleteTargetDimension(TargetDimensionId: number): Promise<void>;
    CreateDefaultTargetGroup(): Promise<carriers.TargetGroup>;
    SaveTargetGroup(entity: carriers.TargetGroup): Promise<carriers.TargetGroup>;
    DeleteTargetGroup(TargetGroupId: number): Promise<void>;
    CreateDefaultTargetRevision(): Promise<carriers.TargetRevision>;
    CreateDefaultTargetRevisionHistory(): Promise<carriers.TargetRevisionHistory>;
    CreateDefaultTargetAssignmentForCompany(webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetAssignment>;
    CreateDefaultTargetAssignmentForUserGroup(request: carriers.Targets_CreateDefaultTargetAssignmentForUserGroupRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetAssignment[]>;
    CreateDefaultTargetAssignmentForUserGroup(userGroupId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetAssignment[]>;
    GetTargetAssignmentForYear(request: carriers.Targets_GetTargetAssignmentForYearRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetAssignment>;
    GetTargetAssignmentForYear(targetYear: number, entityType: enums.TargetEntityType, targetLevel: enums.TargetLevel, id: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetAssignment>;
    CreateDefaultTargetAssignmentForCompanyWithDimension(request: carriers.Targets_CreateDefaultTargetAssignmentForCompanyWithDimensionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetAssignment[]>;
    CreateDefaultTargetAssignmentForCompanyWithDimension(targetDimensionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetAssignment[]>;
    CreateDefaultTargetAssignmentForUserGroupWithDimension(request: carriers.Targets_CreateDefaultTargetAssignmentForUserGroupWithDimensionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetAssignment[]>;
    CreateDefaultTargetAssignmentForUserGroupWithDimension(userGroupId: number, targetDimensionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetAssignment[]>;
    GetTargetAssignmentForYearAndDimension(request: carriers.Targets_GetTargetAssignmentForYearAndDimensionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetAssignment>;
    GetTargetAssignmentForYearAndDimension(targetYear: number, entityType: enums.TargetEntityType, targetLevel: enums.TargetLevel, id: number, dimensionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetAssignment>;
    CreateDefaultTargetAssignmentForCompanyWithYearAndDimension(request: carriers.Targets_CreateDefaultTargetAssignmentForCompanyWithYearAndDimensionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetAssignment[]>;
    CreateDefaultTargetAssignmentForCompanyWithYearAndDimension(year: number, targetDimensionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetAssignment[]>;
    CreateDefaultTargetAssignmentForUserGroupWithYearAndDimension(request: carriers.Targets_CreateDefaultTargetAssignmentForUserGroupWithYearAndDimensionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetAssignment[]>;
    CreateDefaultTargetAssignmentForUserGroupWithYearAndDimension(userGroupId: number, year: number, targetDimensionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetAssignment[]>;
    GetTargetDimension(targetDimensionId: number): Promise<carriers.TargetDimension>;
    GetTargetDimensionsForEntityType(request: carriers.Targets_GetTargetDimensionsForEntityTypeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetDimension[]>;
    GetTargetDimensionsForEntityType(entityType: enums.TargetEntityType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetDimension[]>;
    GetTargetGroupIds(request: carriers.Targets_GetTargetGroupIdsRequest, webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    GetTargetGroupIds(targetDimensionId: number, webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    GetTargetGroup(targetGroupId: number): Promise<carriers.TargetGroup>;
    GetTargetGroupForYear(request: carriers.Targets_GetTargetGroupForYearRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetGroup>;
    GetTargetGroupForYear(targetYear: number, entityType: enums.TargetEntityType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetGroup>;
    ExportTargetGroupToExcel(request: carriers.Targets_ExportTargetGroupToExcelRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ExportArchiveResult>;
    ExportTargetGroupToExcel(targetGroupId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ExportArchiveResult>;
    GetTargetGroupForYearAndDimension(request: carriers.Targets_GetTargetGroupForYearAndDimensionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetGroup>;
    GetTargetGroupForYearAndDimension(targetYear: number, dimensionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetGroup>;
    GetTargetRevisionHistory(request: carriers.Targets_GetTargetRevisionHistoryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetRevisionHistory>;
    GetTargetRevisionHistory(targetAssignmentInfoId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetRevisionHistory>;
}
/**
 * Agent lets you configure targets, and retrieve targets
 */
export declare class TargetsAgent extends base.WebApiBase implements ITargetsAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * Set default values into a new TargetAssignment.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultTargetAssignment(options?: base.WebApiRequestOptions): Promise<carriers.TargetAssignment>;
    /**
     * Set default values into a new TargetDimension.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultTargetDimension(options?: base.WebApiRequestOptions): Promise<carriers.TargetDimension>;
    SaveTargetDimension(entity: carriers.TargetDimension, options?: base.WebApiRequestOptions): Promise<carriers.TargetDimension>;
    DeleteTargetDimension(TargetDimensionId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new TargetGroup.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultTargetGroup(options?: base.WebApiRequestOptions): Promise<carriers.TargetGroup>;
    SaveTargetGroup(entity: carriers.TargetGroup, options?: base.WebApiRequestOptions): Promise<carriers.TargetGroup>;
    DeleteTargetGroup(TargetGroupId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new TargetRevision.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultTargetRevision(options?: base.WebApiRequestOptions): Promise<carriers.TargetRevision>;
    /**
     * Set default values into a new TargetRevisionHistory.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultTargetRevisionHistory(options?: base.WebApiRequestOptions): Promise<carriers.TargetRevisionHistory>;
    private _CreateDefaultTargetAssignmentForCompany;
    /**
     * Returns a default target assignment for the owner company.
     * @returns Default target assignment for the owner company.
     */
    CreateDefaultTargetAssignmentForCompany(webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetAssignment>;
    private _CreateDefaultTargetAssignmentForUserGroup;
    /**
     * Returns a default target assignment for the specified usergroup.
     * @param request - UserGroupId
     * @returns Default target assignment for the specified usergroup.
     */
    CreateDefaultTargetAssignmentForUserGroup(request: carriers.Targets_CreateDefaultTargetAssignmentForUserGroupRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetAssignment[]>;
    /**
     * Returns a default target assignment for the specified usergroup.
     * @param userGroupId - The id of the UserGroup
     * @returns Default target assignment for the specified usergroup.
     */
    CreateDefaultTargetAssignmentForUserGroup(userGroupId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetAssignment[]>;
    private _GetTargetAssignmentForYear;
    /**
     * Returns the target assignment for the specified year and entity type.
     * @param request - TargetYear, EntityType, TargetLevel, Id
     * @returns Target assignment for a specified entity for year and entity type. Null if not found.
     */
    GetTargetAssignmentForYear(request: carriers.Targets_GetTargetAssignmentForYearRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetAssignment>;
    /**
     * Returns the target assignment for the specified year and entity type.
     * @param targetYear - Targeted year
     * @param entityType - Targeted entity type
     * @param targetLevel - The level of target the id is referring to.
     * @param id - Contact, UserGroup or Associate id.
     * @returns Target assignment for a specified entity for year and entity type. Null if not found.
     */
    GetTargetAssignmentForYear(targetYear: number, entityType: enums.TargetEntityType, targetLevel: enums.TargetLevel, id: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetAssignment>;
    private _CreateDefaultTargetAssignmentForCompanyWithDimension;
    /**
     * Returns a default target assignment for the owner company, for the specified dimension.
     * @param request - TargetDimensionId
     * @returns Default target assignments for the owner company.
     */
    CreateDefaultTargetAssignmentForCompanyWithDimension(request: carriers.Targets_CreateDefaultTargetAssignmentForCompanyWithDimensionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetAssignment[]>;
    /**
     * Returns a default target assignment for the owner company, for the specified dimension.
     * @param targetDimensionId - The dimension id to use.
     * @returns Default target assignments for the owner company.
     */
    CreateDefaultTargetAssignmentForCompanyWithDimension(targetDimensionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetAssignment[]>;
    private _CreateDefaultTargetAssignmentForUserGroupWithDimension;
    /**
     * Returns a default target assignment for the specified usergroup, for the specified dimension.
     * @param request - UserGroupId, TargetDimensionId
     * @returns Default target assignment for the specified usergroup.
     */
    CreateDefaultTargetAssignmentForUserGroupWithDimension(request: carriers.Targets_CreateDefaultTargetAssignmentForUserGroupWithDimensionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetAssignment[]>;
    /**
     * Returns a default target assignment for the specified usergroup, for the specified dimension.
     * @param userGroupId - The id of the UserGroup
     * @param targetDimensionId - The dimension id to use.
     * @returns Default target assignment for the specified usergroup.
     */
    CreateDefaultTargetAssignmentForUserGroupWithDimension(userGroupId: number, targetDimensionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetAssignment[]>;
    private _GetTargetAssignmentForYearAndDimension;
    /**
     * Returns the target assignment for the specified year, entity type and dimension.
     * @param request - TargetYear, EntityType, TargetLevel, Id, DimensionId
     * @returns Target assignment for a specified entity for year and entity type. Null if not found.
     */
    GetTargetAssignmentForYearAndDimension(request: carriers.Targets_GetTargetAssignmentForYearAndDimensionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetAssignment>;
    /**
     * Returns the target assignment for the specified year, entity type and dimension.
     * @param targetYear - Targeted year
     * @param entityType - Targeted entity type
     * @param targetLevel - The level of target the id is referring to.
     * @param id - Contact, UserGroup or Associate id.
     * @param dimensionId - Id of dimension.
     * @returns Target assignment for a specified entity for year and entity type. Null if not found.
     */
    GetTargetAssignmentForYearAndDimension(targetYear: number, entityType: enums.TargetEntityType, targetLevel: enums.TargetLevel, id: number, dimensionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetAssignment>;
    private _CreateDefaultTargetAssignmentForCompanyWithYearAndDimension;
    /**
     * Returns a default target assignment for the owner company, for the specified year and dimension.
     * @param request - Year, TargetDimensionId
     * @returns Default target assignments for the owner company.
     */
    CreateDefaultTargetAssignmentForCompanyWithYearAndDimension(request: carriers.Targets_CreateDefaultTargetAssignmentForCompanyWithYearAndDimensionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetAssignment[]>;
    /**
     * Returns a default target assignment for the owner company, for the specified year and dimension.
     * @param year - The year from which to retrieve dimension data.
     * @param targetDimensionId - The dimension id to use.
     * @returns Default target assignments for the owner company.
     */
    CreateDefaultTargetAssignmentForCompanyWithYearAndDimension(year: number, targetDimensionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetAssignment[]>;
    private _CreateDefaultTargetAssignmentForUserGroupWithYearAndDimension;
    /**
     * Returns a default target assignment for the specified usergroup, for the specified year and dimension.
     * @param request - UserGroupId, Year, TargetDimensionId
     * @returns Default target assignment for the specified usergroup.
     */
    CreateDefaultTargetAssignmentForUserGroupWithYearAndDimension(request: carriers.Targets_CreateDefaultTargetAssignmentForUserGroupWithYearAndDimensionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetAssignment[]>;
    /**
     * Returns a default target assignment for the specified usergroup, for the specified year and dimension.
     * @param userGroupId - The id of the UserGroup
     * @param year - The year from which to retrieve dimension data.
     * @param targetDimensionId - The dimension id to use.
     * @returns Default target assignment for the specified usergroup.
     */
    CreateDefaultTargetAssignmentForUserGroupWithYearAndDimension(userGroupId: number, year: number, targetDimensionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetAssignment[]>;
    GetTargetDimension(targetDimensionId: number, options?: base.WebApiRequestOptions): Promise<carriers.TargetDimension>;
    private _GetTargetDimensionsForEntityType;
    /**
     * Returns the target dimensions for the given entity type.
     * @param request - EntityType
     * @returns Target dimensions for year and entity type.
     */
    GetTargetDimensionsForEntityType(request: carriers.Targets_GetTargetDimensionsForEntityTypeRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetDimension[]>;
    /**
     * Returns the target dimensions for the given entity type.
     * @param entityType - Targeted entity type
     * @returns Target dimensions for year and entity type.
     */
    GetTargetDimensionsForEntityType(entityType: enums.TargetEntityType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetDimension[]>;
    private _GetTargetGroupIds;
    /**
     * Returns ids of the target groups that use this dimension.
     * @param request - TargetDimensionId
     * @returns Target group ids.
     */
    GetTargetGroupIds(request: carriers.Targets_GetTargetGroupIdsRequest, webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    /**
     * Returns ids of the target groups that use this dimension.
     * @param targetDimensionId - The target dimension id
     * @returns Target group ids.
     */
    GetTargetGroupIds(targetDimensionId: number, webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    GetTargetGroup(targetGroupId: number, options?: base.WebApiRequestOptions): Promise<carriers.TargetGroup>;
    private _GetTargetGroupForYear;
    /**
     * Returns the target group for the specified year and entity type.
     * @param request - TargetYear, EntityType
     * @returns Target Group for year and entity type.
     */
    GetTargetGroupForYear(request: carriers.Targets_GetTargetGroupForYearRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetGroup>;
    /**
     * Returns the target group for the specified year and entity type.
     * @param targetYear - Targeted year
     * @param entityType - Targeted entity type
     * @returns Target Group for year and entity type.
     */
    GetTargetGroupForYear(targetYear: number, entityType: enums.TargetEntityType, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetGroup>;
    private _ExportTargetGroupToExcel;
    /**
     * Renders the given targetgroup to excel, and returns the path to the temporary file.
     * @param request - TargetGroupId
     * @returns
     */
    ExportTargetGroupToExcel(request: carriers.Targets_ExportTargetGroupToExcelRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ExportArchiveResult>;
    /**
     * Renders the given targetgroup to excel, and returns the path to the temporary file.
     * @param targetGroupId - The id of the targetgroup to be rendered to excel.
     * @returns
     */
    ExportTargetGroupToExcel(targetGroupId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ExportArchiveResult>;
    private _GetTargetGroupForYearAndDimension;
    /**
     * Returns the target group for the specified year and dimension.
     * @param request - TargetYear, DimensionId
     * @returns Target Group for year and dimension.
     */
    GetTargetGroupForYearAndDimension(request: carriers.Targets_GetTargetGroupForYearAndDimensionRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetGroup>;
    /**
     * Returns the target group for the specified year and dimension.
     * @param targetYear - Targeted year
     * @param dimensionId - Targeted dimension Id
     * @returns Target Group for year and dimension.
     */
    GetTargetGroupForYearAndDimension(targetYear: number, dimensionId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetGroup>;
    private _GetTargetRevisionHistory;
    /**
     * Returns the revision history for a given TargetAssignmentInfo in chronological order.
     * @param request - TargetAssignmentInfoId
     * @returns Target revision history for the given TargetAssignmentInfo
     */
    GetTargetRevisionHistory(request: carriers.Targets_GetTargetRevisionHistoryRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetRevisionHistory>;
    /**
     * Returns the revision history for a given TargetAssignmentInfo in chronological order.
     * @param targetAssignmentInfoId - Target assignment info id
     * @returns Target revision history for the given TargetAssignmentInfo
     */
    GetTargetRevisionHistory(targetAssignmentInfoId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TargetRevisionHistory>;
}
//# sourceMappingURL=TargetsAgent.d.ts.map