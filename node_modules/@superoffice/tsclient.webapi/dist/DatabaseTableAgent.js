"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseTableAgent = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
/**
 * Agent used for CRUD operations on database tables. Read, add, update, delete rows in tables.
 */
class DatabaseTableAgent extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/DatabaseTable/";
        super(options);
    }
    async _ReadRow(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ReadRow", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_TableRecord_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async ReadRow(tableName, id, webapi_options) {
        let _request = null;
        let _options = null;
        const first = tableName;
        if (typeof (first) === "object" && first && (typeof (first.TableName) != 'undefined' || typeof (first.Id) != 'undefined')) {
            _request = tableName;
            _options = id;
        }
        else {
            _request = {
                TableName: tableName,
                Id: id,
            };
            _options = webapi_options;
        }
        return this._ReadRow(_request, _options);
    }
    async _InsertRow(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("InsertRow", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async InsertRow(tableName, values, webapi_options) {
        let _request = null;
        let _options = null;
        const first = tableName;
        if (typeof (first) === "object" && first && (typeof (first.TableName) != 'undefined' || typeof (first.Values) != 'undefined')) {
            _request = tableName;
            _options = values;
        }
        else {
            _request = {
                TableName: tableName,
                Values: values,
            };
            _options = webapi_options;
        }
        return this._InsertRow(_request, _options);
    }
    async _UpdateRow(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("UpdateRow", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async UpdateRow(tableName, id, values, webapi_options) {
        let _request = null;
        let _options = null;
        const first = tableName;
        if (typeof (first) === "object" && first && (typeof (first.TableName) != 'undefined' || typeof (first.Id) != 'undefined' || typeof (first.Values) != 'undefined')) {
            _request = tableName;
            _options = id;
        }
        else {
            _request = {
                TableName: tableName,
                Id: id,
                Values: values,
            };
            _options = webapi_options;
        }
        return this._UpdateRow(_request, _options);
    }
    async _DeleteRow(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("DeleteRow", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async DeleteRow(tableName, id, webapi_options) {
        let _request = null;
        let _options = null;
        const first = tableName;
        if (typeof (first) === "object" && first && (typeof (first.TableName) != 'undefined' || typeof (first.Id) != 'undefined')) {
            _request = tableName;
            _options = id;
        }
        else {
            _request = {
                TableName: tableName,
                Id: id,
            };
            _options = webapi_options;
        }
        return this._DeleteRow(_request, _options);
    }
    async _Insert(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("Insert", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_MassOperationResult_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async Insert(tableName, columns, data, webapi_options) {
        let _request = null;
        let _options = null;
        const first = tableName;
        if (typeof (first) === "object" && first && (typeof (first.TableName) != 'undefined' || typeof (first.Columns) != 'undefined' || typeof (first.Data) != 'undefined')) {
            _request = tableName;
            _options = columns;
        }
        else {
            _request = {
                TableName: tableName,
                Columns: columns,
                Data: data,
            };
            _options = webapi_options;
        }
        return this._Insert(_request, _options);
    }
    async _Truncate(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("Truncate", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_MassOperationResult_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async Truncate(tableName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = tableName;
        if (typeof (first) === "object" && first && (typeof (first.TableName) != 'undefined')) {
            _request = tableName;
            _options = webapi_options;
        }
        else {
            _request = {
                TableName: tableName,
            };
            _options = webapi_options;
        }
        return this._Truncate(_request, _options);
    }
    async _Upsert(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("Upsert", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_MassOperationResult_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async Upsert(tableName, columns, keys, data, nomatchAction, returnRowStatus, webapi_options) {
        let _request = null;
        let _options = null;
        const first = tableName;
        if (typeof (first) === "object" && first && (typeof (first.TableName) != 'undefined' || typeof (first.Columns) != 'undefined' || typeof (first.Keys) != 'undefined' || typeof (first.Data) != 'undefined' || typeof (first.NomatchAction) != 'undefined' || typeof (first.ReturnRowStatus) != 'undefined')) {
            _request = tableName;
            _options = columns;
        }
        else {
            _request = {
                TableName: tableName,
                Columns: columns,
                Keys: keys,
                Data: data,
                NomatchAction: nomatchAction,
                ReturnRowStatus: returnRowStatus,
            };
            _options = webapi_options;
        }
        return this._Upsert(_request, _options);
    }
    async _Delete(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("Delete", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_MassOperationResult_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async Delete(tableName, iDs, webapi_options) {
        let _request = null;
        let _options = null;
        const first = tableName;
        if (typeof (first) === "object" && first && (typeof (first.TableName) != 'undefined' || typeof (first.IDs) != 'undefined')) {
            _request = tableName;
            _options = iDs;
        }
        else {
            _request = {
                TableName: tableName,
                IDs: iDs,
            };
            _options = webapi_options;
        }
        return this._Delete(_request, _options);
    }
} // class v1DatabaseTableAgentController 
exports.DatabaseTableAgent = DatabaseTableAgent;
//# sourceMappingURL=DatabaseTableAgent.js.map