"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.LicenseAgent = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
/**
 * License query, download, activation
 */
class LicenseAgent extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/License/";
        super(options);
    }
    async _GetLicenseForAllOwnersFromDB(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetLicenseForAllOwnersFromDB", undefined, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ExtendedLicenseInfoArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Get all licenses, with usage, from all module owners as they are stored in the database
     * @returns
     */
    async GetLicenseForAllOwnersFromDB(webapi_options) {
        return this._GetLicenseForAllOwnersFromDB(webapi_options);
    }
    async _GetLicenseFromLicenseServer(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetLicenseFromLicenseServer", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ExtendedLicenseInfo_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetLicenseFromLicenseServer(ownerName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = ownerName;
        if (typeof (first) === "object" && first && (typeof (first.OwnerName) != 'undefined')) {
            _request = ownerName;
            _options = webapi_options;
        }
        else {
            _request = {
                OwnerName: ownerName,
            };
            _options = webapi_options;
        }
        return this._GetLicenseFromLicenseServer(_request, _options);
    }
    async _GetModuleLicenseHistoryFromLicenseServer(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetModuleLicenseHistoryFromLicenseServer", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetModuleLicenseHistoryFromLicenseServer(licenseInfo, moduleLicense, webapi_options) {
        let _request = null;
        let _options = null;
        const first = licenseInfo;
        if (typeof (first) === "object" && first && (typeof (first.LicenseInfo) != 'undefined' || typeof (first.ModuleLicense) != 'undefined')) {
            _request = licenseInfo;
            _options = moduleLicense;
        }
        else {
            _request = {
                LicenseInfo: licenseInfo,
                ModuleLicense: moduleLicense,
            };
            _options = webapi_options;
        }
        return this._GetModuleLicenseHistoryFromLicenseServer(_request, _options);
    }
    async _ValidateLicenseInfo(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ValidateLicenseInfo", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_LicenseResult_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async ValidateLicenseInfo(licenseInfo, webapi_options) {
        let _request = null;
        let _options = null;
        const first = licenseInfo;
        if (typeof (first) === "object" && first && (typeof (first.LicenseInfo) != 'undefined')) {
            _request = licenseInfo;
            _options = webapi_options;
        }
        else {
            _request = {
                LicenseInfo: licenseInfo,
            };
            _options = webapi_options;
        }
        return this._ValidateLicenseInfo(_request, _options);
    }
    async _ActivateLicenseInfo(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ActivateLicenseInfo", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_LicenseResult_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async ActivateLicenseInfo(newLicense, webapi_options) {
        let _request = null;
        let _options = null;
        const first = newLicense;
        if (typeof (first) === "object" && first && (typeof (first.NewLicense) != 'undefined')) {
            _request = newLicense;
            _options = webapi_options;
        }
        else {
            _request = {
                NewLicense: newLicense,
            };
            _options = webapi_options;
        }
        return this._ActivateLicenseInfo(_request, _options);
    }
    async _GetLicenseStatusFromLicenseServer(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetLicenseStatusFromLicenseServer", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_CheckLicenseStatusResult_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetLicenseStatusFromLicenseServer(ownerName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = ownerName;
        if (typeof (first) === "object" && first && (typeof (first.OwnerName) != 'undefined')) {
            _request = ownerName;
            _options = webapi_options;
        }
        else {
            _request = {
                OwnerName: ownerName,
            };
            _options = webapi_options;
        }
        return this._GetLicenseStatusFromLicenseServer(_request, _options);
    }
    async _GetLicenseFromDB(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetLicenseFromDB", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ExtendedLicenseInfo_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetLicenseFromDB(ownerName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = ownerName;
        if (typeof (first) === "object" && first && (typeof (first.OwnerName) != 'undefined')) {
            _request = ownerName;
            _options = webapi_options;
        }
        else {
            _request = {
                OwnerName: ownerName,
            };
            _options = webapi_options;
        }
        return this._GetLicenseFromDB(_request, _options);
    }
    async _ChangeSerialNumber(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ChangeSerialNumber", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_LicenseResult_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async ChangeSerialNumber(newCompanyName, newSerialNumber, webapi_options) {
        let _request = null;
        let _options = null;
        const first = newCompanyName;
        if (typeof (first) === "object" && first && (typeof (first.NewCompanyName) != 'undefined' || typeof (first.NewSerialNumber) != 'undefined')) {
            _request = newCompanyName;
            _options = newSerialNumber;
        }
        else {
            _request = {
                NewCompanyName: newCompanyName,
                NewSerialNumber: newSerialNumber,
            };
            _options = webapi_options;
        }
        return this._ChangeSerialNumber(_request, _options);
    }
    async _GetUserLicenses(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetUserLicenses", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_LicenseOwnerArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetUserLicenses(associateId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = associateId;
        if (typeof (first) === "object" && first && (typeof (first.AssociateId) != 'undefined')) {
            _request = associateId;
            _options = webapi_options;
        }
        else {
            _request = {
                AssociateId: associateId,
            };
            _options = webapi_options;
        }
        return this._GetUserLicenses(_request, _options);
    }
    async _GetSatelliteLicenses(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetSatelliteLicenses", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_LicenseOwnerArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetSatelliteLicenses(satelliteId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = satelliteId;
        if (typeof (first) === "object" && first && (typeof (first.SatelliteId) != 'undefined')) {
            _request = satelliteId;
            _options = webapi_options;
        }
        else {
            _request = {
                SatelliteId: satelliteId,
            };
            _options = webapi_options;
        }
        return this._GetSatelliteLicenses(_request, _options);
    }
    async _RemoveLicenseFromDB(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("RemoveLicenseFromDB", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_LicenseResult_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async RemoveLicenseFromDB(moduleOwner, webapi_options) {
        let _request = null;
        let _options = null;
        const first = moduleOwner;
        if (typeof (first) === "object" && first && (typeof (first.ModuleOwner) != 'undefined')) {
            _request = moduleOwner;
            _options = webapi_options;
        }
        else {
            _request = {
                ModuleOwner: moduleOwner,
            };
            _options = webapi_options;
        }
        return this._RemoveLicenseFromDB(_request, _options);
    }
    async _GetLicenseFromFile(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetLicenseFromFile", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ExtendedLicenseInfo_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetLicenseFromFile(fileContent, webapi_options) {
        let _request = null;
        let _options = null;
        const first = fileContent;
        if (typeof (first) === "object" && first && (typeof (first.FileContent) != 'undefined')) {
            _request = fileContent;
            _options = webapi_options;
        }
        else {
            _request = {
                FileContent: fileContent,
            };
            _options = webapi_options;
        }
        return this._GetLicenseFromFile(_request, _options);
    }
    async _GetShopUrl(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetShopUrl", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetShopUrl(ownerName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = ownerName;
        if (typeof (first) === "object" && first && (typeof (first.OwnerName) != 'undefined')) {
            _request = ownerName;
            _options = webapi_options;
        }
        else {
            _request = {
                OwnerName: ownerName,
            };
            _options = webapi_options;
        }
        return this._GetShopUrl(_request, _options);
    }
    async _GetUserLicensesMDOList(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetUserLicensesMDOList", undefined, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_SelectableMDOListItemArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Get all licenses in a MDOListItem structure.
     * @returns Hierarchical structure of user licenses.
     */
    async GetUserLicensesMDOList(webapi_options) {
        return this._GetUserLicensesMDOList(webapi_options);
    }
    async _GetModuleLicenseFromDB(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetModuleLicenseFromDB", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ModuleLicense_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetModuleLicenseFromDB(ownerName, moduleName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = ownerName;
        if (typeof (first) === "object" && first && (typeof (first.OwnerName) != 'undefined' || typeof (first.ModuleName) != 'undefined')) {
            _request = ownerName;
            _options = moduleName;
        }
        else {
            _request = {
                OwnerName: ownerName,
                ModuleName: moduleName,
            };
            _options = webapi_options;
        }
        return this._GetModuleLicenseFromDB(_request, _options);
    }
    async _AddLicenseFromFile(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("AddLicenseFromFile", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ExtendedLicenseInfo_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async AddLicenseFromFile(fileContent, webapi_options) {
        let _request = null;
        let _options = null;
        const first = fileContent;
        if (typeof (first) === "object" && first && (typeof (first.FileContent) != 'undefined')) {
            _request = fileContent;
            _options = webapi_options;
        }
        else {
            _request = {
                FileContent: fileContent,
            };
            _options = webapi_options;
        }
        return this._AddLicenseFromFile(_request, _options);
    }
    async _GetThirdPartyLicenseAssignments(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetThirdPartyLicenseAssignments", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ModuleLicenseLinkArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetThirdPartyLicenseAssignments(associateId, moduleOwner, webapi_options) {
        let _request = null;
        let _options = null;
        const first = associateId;
        if (typeof (first) === "object" && first && (typeof (first.AssociateId) != 'undefined' || typeof (first.ModuleOwner) != 'undefined')) {
            _request = associateId;
            _options = moduleOwner;
        }
        else {
            _request = {
                AssociateId: associateId,
                ModuleOwner: moduleOwner,
            };
            _options = webapi_options;
        }
        return this._GetThirdPartyLicenseAssignments(_request, _options);
    }
    async _AssignThirdPartyLicenses(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("AssignThirdPartyLicenses", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ModuleLicenseLinkArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async AssignThirdPartyLicenses(associateId, moduleOwner, moduleLicenseNames, webapi_options) {
        let _request = null;
        let _options = null;
        const first = associateId;
        if (typeof (first) === "object" && first && (typeof (first.AssociateId) != 'undefined' || typeof (first.ModuleOwner) != 'undefined' || typeof (first.ModuleLicenseNames) != 'undefined')) {
            _request = associateId;
            _options = moduleOwner;
        }
        else {
            _request = {
                AssociateId: associateId,
                ModuleOwner: moduleOwner,
                ModuleLicenseNames: moduleLicenseNames,
            };
            _options = webapi_options;
        }
        return this._AssignThirdPartyLicenses(_request, _options);
    }
    async _UnassignThirdPartyLicenses(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("UnassignThirdPartyLicenses", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ModuleLicenseLinkArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async UnassignThirdPartyLicenses(associateId, moduleOwner, moduleLicenseNames, webapi_options) {
        let _request = null;
        let _options = null;
        const first = associateId;
        if (typeof (first) === "object" && first && (typeof (first.AssociateId) != 'undefined' || typeof (first.ModuleOwner) != 'undefined' || typeof (first.ModuleLicenseNames) != 'undefined')) {
            _request = associateId;
            _options = moduleOwner;
        }
        else {
            _request = {
                AssociateId: associateId,
                ModuleOwner: moduleOwner,
                ModuleLicenseNames: moduleLicenseNames,
            };
            _options = webapi_options;
        }
        return this._UnassignThirdPartyLicenses(_request, _options);
    }
} // class v1LicenseAgentController 
exports.LicenseAgent = LicenseAgent;
//# sourceMappingURL=LicenseAgent.js.map