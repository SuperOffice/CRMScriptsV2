"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArchiveAgent = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
/**
 * ArchiveList functions of all kinds
 */
class ArchiveAgent extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Archive/";
        super(options);
    }
    /**
     * Set default values into a new ArchiveListResult.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    async CreateDefaultArchiveListResult(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultArchiveListResult", null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ArchiveListResult_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async _GetActivityFilter(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetActivityFilter", undefined, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ActivityFilter_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Get activity filter for the specified list.
     * @returns The activity filter for the specified list
     */
    async GetActivityFilter(webapi_options) {
        return this._GetActivityFilter(webapi_options);
    }
    async _SetActivityFilter(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetActivityFilter", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SetActivityFilter(activityFilter, webapi_options) {
        let _request = null;
        let _options = null;
        const first = activityFilter;
        if (typeof (first) === "object" && first && (typeof (first.ActivityFilter) != 'undefined')) {
            _request = activityFilter;
            _options = webapi_options;
        }
        else {
            _request = {
                ActivityFilter: activityFilter,
            };
            _options = webapi_options;
        }
        return this._SetActivityFilter(_request, _options);
    }
    async _GetGroupAssociateIds(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetGroupAssociateIds", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetGroupAssociateIds(groupIds, webapi_options) {
        let _request = null;
        let _options = null;
        const first = groupIds;
        if (typeof (first) === "object" && first && (typeof (first.GroupIds) != 'undefined')) {
            _request = groupIds;
            _options = webapi_options;
        }
        else {
            _request = {
                GroupIds: groupIds,
            };
            _options = webapi_options;
        }
        return this._GetGroupAssociateIds(_request, _options);
    }
    async _GetArchiveConfiguration(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetArchiveConfiguration", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ArchiveConfiguration_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetArchiveConfiguration(guiName, providerName, webapi_options) {
        let _request = null;
        let _options = null;
        const first = guiName;
        if (typeof (first) === "object" && first && (typeof (first.GuiName) != 'undefined' || typeof (first.ProviderName) != 'undefined')) {
            _request = guiName;
            _options = providerName;
        }
        else {
            _request = {
                GuiName: guiName,
                ProviderName: providerName,
            };
            _options = webapi_options;
        }
        return this._GetArchiveConfiguration(_request, _options);
    }
    async _GetArchiveConfigurationWithContext(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetArchiveConfigurationWithContext", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ArchiveConfiguration_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetArchiveConfigurationWithContext(guiName, providerName, context, webapi_options) {
        let _request = null;
        let _options = null;
        const first = guiName;
        if (typeof (first) === "object" && first && (typeof (first.GuiName) != 'undefined' || typeof (first.ProviderName) != 'undefined' || typeof (first.Context) != 'undefined')) {
            _request = guiName;
            _options = providerName;
        }
        else {
            _request = {
                GuiName: guiName,
                ProviderName: providerName,
                Context: context,
            };
            _options = webapi_options;
        }
        return this._GetArchiveConfigurationWithContext(_request, _options);
    }
    async _SetColumnWidths(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetColumnWidths", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SetColumnWidths(guiName, columnWidths, webapi_options) {
        let _request = null;
        let _options = null;
        const first = guiName;
        if (typeof (first) === "object" && first && (typeof (first.GuiName) != 'undefined' || typeof (first.ColumnWidths) != 'undefined')) {
            _request = guiName;
            _options = columnWidths;
        }
        else {
            _request = {
                GuiName: guiName,
                ColumnWidths: columnWidths,
            };
            _options = webapi_options;
        }
        return this._SetColumnWidths(_request, _options);
    }
    async _SetChosenEntities(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetChosenEntities", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SetChosenEntities(guiName, providerName, entities, webapi_options) {
        let _request = null;
        let _options = null;
        const first = guiName;
        if (typeof (first) === "object" && first && (typeof (first.GuiName) != 'undefined' || typeof (first.ProviderName) != 'undefined' || typeof (first.Entities) != 'undefined')) {
            _request = guiName;
            _options = providerName;
        }
        else {
            _request = {
                GuiName: guiName,
                ProviderName: providerName,
                Entities: entities,
            };
            _options = webapi_options;
        }
        return this._SetChosenEntities(_request, _options);
    }
    async _SetChosenColumns(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetChosenColumns", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SetChosenColumns(guiName, providerName, chosenColumns, webapi_options) {
        let _request = null;
        let _options = null;
        const first = guiName;
        if (typeof (first) === "object" && first && (typeof (first.GuiName) != 'undefined' || typeof (first.ProviderName) != 'undefined' || typeof (first.ChosenColumns) != 'undefined')) {
            _request = guiName;
            _options = providerName;
        }
        else {
            _request = {
                GuiName: guiName,
                ProviderName: providerName,
                ChosenColumns: chosenColumns,
            };
            _options = webapi_options;
        }
        return this._SetChosenColumns(_request, _options);
    }
    async _GetArchiveConfigurationV2(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetArchiveConfigurationV2", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ArchiveConfiguration_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetArchiveConfigurationV2(guiName, providerName, context, ownerKeys, webapi_options) {
        let _request = null;
        let _options = null;
        const first = guiName;
        if (typeof (first) === "object" && first && (typeof (first.GuiName) != 'undefined' || typeof (first.ProviderName) != 'undefined' || typeof (first.Context) != 'undefined' || typeof (first.OwnerKeys) != 'undefined')) {
            _request = guiName;
            _options = providerName;
        }
        else {
            _request = {
                GuiName: guiName,
                ProviderName: providerName,
                Context: context,
                OwnerKeys: ownerKeys,
            };
            _options = webapi_options;
        }
        return this._GetArchiveConfigurationV2(_request, _options);
    }
    async _SetColumnWidthsV2(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetColumnWidthsV2", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SetColumnWidthsV2(guiName, providerName, context, ownerKeys, columnWidths, webapi_options) {
        let _request = null;
        let _options = null;
        const first = guiName;
        if (typeof (first) === "object" && first && (typeof (first.GuiName) != 'undefined' || typeof (first.ProviderName) != 'undefined' || typeof (first.Context) != 'undefined' || typeof (first.OwnerKeys) != 'undefined' || typeof (first.ColumnWidths) != 'undefined')) {
            _request = guiName;
            _options = providerName;
        }
        else {
            _request = {
                GuiName: guiName,
                ProviderName: providerName,
                Context: context,
                OwnerKeys: ownerKeys,
                ColumnWidths: columnWidths,
            };
            _options = webapi_options;
        }
        return this._SetColumnWidthsV2(_request, _options);
    }
    async _SetChosenEntitiesV2(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetChosenEntitiesV2", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SetChosenEntitiesV2(guiName, providerName, context, ownerKeys, entities, webapi_options) {
        let _request = null;
        let _options = null;
        const first = guiName;
        if (typeof (first) === "object" && first && (typeof (first.GuiName) != 'undefined' || typeof (first.ProviderName) != 'undefined' || typeof (first.Context) != 'undefined' || typeof (first.OwnerKeys) != 'undefined' || typeof (first.Entities) != 'undefined')) {
            _request = guiName;
            _options = providerName;
        }
        else {
            _request = {
                GuiName: guiName,
                ProviderName: providerName,
                Context: context,
                OwnerKeys: ownerKeys,
                Entities: entities,
            };
            _options = webapi_options;
        }
        return this._SetChosenEntitiesV2(_request, _options);
    }
    async _SetChosenColumnsV2(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetChosenColumnsV2", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async SetChosenColumnsV2(guiName, providerName, context, ownerKeys, chosenColumns, webapi_options) {
        let _request = null;
        let _options = null;
        const first = guiName;
        if (typeof (first) === "object" && first && (typeof (first.GuiName) != 'undefined' || typeof (first.ProviderName) != 'undefined' || typeof (first.Context) != 'undefined' || typeof (first.OwnerKeys) != 'undefined' || typeof (first.ChosenColumns) != 'undefined')) {
            _request = guiName;
            _options = providerName;
        }
        else {
            _request = {
                GuiName: guiName,
                ProviderName: providerName,
                Context: context,
                OwnerKeys: ownerKeys,
                ChosenColumns: chosenColumns,
            };
            _options = webapi_options;
        }
        return this._SetChosenColumnsV2(_request, _options);
    }
    async _GetArchiveListByColumns(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetArchiveListByColumns", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ArchiveListItemArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetArchiveListByColumns(providerName, columns, sortOrder, restriction, entities, page, pageSize, webapi_options) {
        let _request = null;
        let _options = null;
        const first = providerName;
        if (typeof (first) === "object" && first && (typeof (first.ProviderName) != 'undefined' || typeof (first.Columns) != 'undefined' || typeof (first.SortOrder) != 'undefined' || typeof (first.Restriction) != 'undefined' || typeof (first.Entities) != 'undefined' || typeof (first.Page) != 'undefined' || typeof (first.PageSize) != 'undefined')) {
            _request = providerName;
            _options = columns;
        }
        else {
            _request = {
                ProviderName: providerName,
                Columns: columns,
                SortOrder: sortOrder,
                Restriction: restriction,
                Entities: entities,
                Page: page,
                PageSize: pageSize,
            };
            _options = webapi_options;
        }
        return this._GetArchiveListByColumns(_request, _options);
    }
    async _GetArchiveListByColumnsWithContext(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetArchiveListByColumnsWithContext", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ArchiveListItemArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetArchiveListByColumnsWithContext(providerName, columns, sortOrder, restriction, entities, page, pageSize, context, webapi_options) {
        let _request = null;
        let _options = null;
        const first = providerName;
        if (typeof (first) === "object" && first && (typeof (first.ProviderName) != 'undefined' || typeof (first.Columns) != 'undefined' || typeof (first.SortOrder) != 'undefined' || typeof (first.Restriction) != 'undefined' || typeof (first.Entities) != 'undefined' || typeof (first.Page) != 'undefined' || typeof (first.PageSize) != 'undefined' || typeof (first.Context) != 'undefined')) {
            _request = providerName;
            _options = columns;
        }
        else {
            _request = {
                ProviderName: providerName,
                Columns: columns,
                SortOrder: sortOrder,
                Restriction: restriction,
                Entities: entities,
                Page: page,
                PageSize: pageSize,
                Context: context,
            };
            _options = webapi_options;
        }
        return this._GetArchiveListByColumnsWithContext(_request, _options);
    }
    async _GetArchiveList(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetArchiveList", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ArchiveListItemArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetArchiveList(guiName, providerName, sortOrder, restriction, entities, page, pageSize, webapi_options) {
        let _request = null;
        let _options = null;
        const first = guiName;
        if (typeof (first) === "object" && first && (typeof (first.GuiName) != 'undefined' || typeof (first.ProviderName) != 'undefined' || typeof (first.SortOrder) != 'undefined' || typeof (first.Restriction) != 'undefined' || typeof (first.Entities) != 'undefined' || typeof (first.Page) != 'undefined' || typeof (first.PageSize) != 'undefined')) {
            _request = guiName;
            _options = providerName;
        }
        else {
            _request = {
                GuiName: guiName,
                ProviderName: providerName,
                SortOrder: sortOrder,
                Restriction: restriction,
                Entities: entities,
                Page: page,
                PageSize: pageSize,
            };
            _options = webapi_options;
        }
        return this._GetArchiveList(_request, _options);
    }
    async _GetArchiveListWithContext(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetArchiveListWithContext", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ArchiveListItemArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetArchiveListWithContext(guiName, providerName, sortOrder, restriction, entities, page, pageSize, context, webapi_options) {
        let _request = null;
        let _options = null;
        const first = guiName;
        if (typeof (first) === "object" && first && (typeof (first.GuiName) != 'undefined' || typeof (first.ProviderName) != 'undefined' || typeof (first.SortOrder) != 'undefined' || typeof (first.Restriction) != 'undefined' || typeof (first.Entities) != 'undefined' || typeof (first.Page) != 'undefined' || typeof (first.PageSize) != 'undefined' || typeof (first.Context) != 'undefined')) {
            _request = guiName;
            _options = providerName;
        }
        else {
            _request = {
                GuiName: guiName,
                ProviderName: providerName,
                SortOrder: sortOrder,
                Restriction: restriction,
                Entities: entities,
                Page: page,
                PageSize: pageSize,
                Context: context,
            };
            _options = webapi_options;
        }
        return this._GetArchiveListWithContext(_request, _options);
    }
    async _GetArchiveListByColumnsWithHeader(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetArchiveListByColumnsWithHeader", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ArchiveListResult_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetArchiveListByColumnsWithHeader(providerName, columns, sortOrder, restriction, entities, page, pageSize, options, webapi_options) {
        let _request = null;
        let _options = null;
        const first = providerName;
        if (typeof (first) === "object" && first && (typeof (first.ProviderName) != 'undefined' || typeof (first.Columns) != 'undefined' || typeof (first.SortOrder) != 'undefined' || typeof (first.Restriction) != 'undefined' || typeof (first.Entities) != 'undefined' || typeof (first.Page) != 'undefined' || typeof (first.PageSize) != 'undefined' || typeof (first.Options) != 'undefined')) {
            _request = providerName;
            _options = columns;
        }
        else {
            _request = {
                ProviderName: providerName,
                Columns: columns,
                SortOrder: sortOrder,
                Restriction: restriction,
                Entities: entities,
                Page: page,
                PageSize: pageSize,
                Options: options,
            };
            _options = webapi_options;
        }
        return this._GetArchiveListByColumnsWithHeader(_request, _options);
    }
    async _GetProviderNames(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetProviderNames", undefined, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Return list of all archive provider names
     * @returns Array of all archive provider names.
     */
    async GetProviderNames(webapi_options) {
        return this._GetProviderNames(webapi_options);
    }
    async _GetArchiveListByColumnsWithHeaderWithContext(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetArchiveListByColumnsWithHeaderWithContext", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ArchiveListResult_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetArchiveListByColumnsWithHeaderWithContext(providerName, columns, sortOrder, restriction, entities, page, pageSize, options, context, webapi_options) {
        let _request = null;
        let _options = null;
        const first = providerName;
        if (typeof (first) === "object" && first && (typeof (first.ProviderName) != 'undefined' || typeof (first.Columns) != 'undefined' || typeof (first.SortOrder) != 'undefined' || typeof (first.Restriction) != 'undefined' || typeof (first.Entities) != 'undefined' || typeof (first.Page) != 'undefined' || typeof (first.PageSize) != 'undefined' || typeof (first.Options) != 'undefined' || typeof (first.Context) != 'undefined')) {
            _request = providerName;
            _options = columns;
        }
        else {
            _request = {
                ProviderName: providerName,
                Columns: columns,
                SortOrder: sortOrder,
                Restriction: restriction,
                Entities: entities,
                Page: page,
                PageSize: pageSize,
                Options: options,
                Context: context,
            };
            _options = webapi_options;
        }
        return this._GetArchiveListByColumnsWithHeaderWithContext(_request, _options);
    }
    async _GetAvailableColumns(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetAvailableColumns", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ArchiveColumnInfoArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetAvailableColumns(providerName, context, webapi_options) {
        let _request = null;
        let _options = null;
        const first = providerName;
        if (typeof (first) === "object" && first && (typeof (first.ProviderName) != 'undefined' || typeof (first.Context) != 'undefined')) {
            _request = providerName;
            _options = context;
        }
        else {
            _request = {
                ProviderName: providerName,
                Context: context,
            };
            _options = webapi_options;
        }
        return this._GetAvailableColumns(_request, _options);
    }
    async _GetAvailableEntities(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetAvailableEntities", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_MDOListItemArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetAvailableEntities(providerName, context, webapi_options) {
        let _request = null;
        let _options = null;
        const first = providerName;
        if (typeof (first) === "object" && first && (typeof (first.ProviderName) != 'undefined' || typeof (first.Context) != 'undefined')) {
            _request = providerName;
            _options = context;
        }
        else {
            _request = {
                ProviderName: providerName,
                Context: context,
            };
            _options = webapi_options;
        }
        return this._GetAvailableEntities(_request, _options);
    }
    async _GetArchiveListByColumns2(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetArchiveListByColumns2", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ArchiveListItemArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetArchiveListByColumns2(providerName, columns, sortOrder, restrictions, entities, page, pageSize, webapi_options) {
        let _request = null;
        let _options = null;
        const first = providerName;
        if (typeof (first) === "object" && first && (typeof (first.ProviderName) != 'undefined' || typeof (first.Columns) != 'undefined' || typeof (first.SortOrder) != 'undefined' || typeof (first.Restrictions) != 'undefined' || typeof (first.Entities) != 'undefined' || typeof (first.Page) != 'undefined' || typeof (first.PageSize) != 'undefined')) {
            _request = providerName;
            _options = columns;
        }
        else {
            _request = {
                ProviderName: providerName,
                Columns: columns,
                SortOrder: sortOrder,
                Restrictions: restrictions,
                Entities: entities,
                Page: page,
                PageSize: pageSize,
            };
            _options = webapi_options;
        }
        return this._GetArchiveListByColumns2(_request, _options);
    }
    async _GetArchiveListByColumnsWithContext2(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetArchiveListByColumnsWithContext2", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ArchiveListItemArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetArchiveListByColumnsWithContext2(providerName, columns, sortOrder, restriction, entities, page, pageSize, context, webapi_options) {
        let _request = null;
        let _options = null;
        const first = providerName;
        if (typeof (first) === "object" && first && (typeof (first.ProviderName) != 'undefined' || typeof (first.Columns) != 'undefined' || typeof (first.SortOrder) != 'undefined' || typeof (first.Restriction) != 'undefined' || typeof (first.Entities) != 'undefined' || typeof (first.Page) != 'undefined' || typeof (first.PageSize) != 'undefined' || typeof (first.Context) != 'undefined')) {
            _request = providerName;
            _options = columns;
        }
        else {
            _request = {
                ProviderName: providerName,
                Columns: columns,
                SortOrder: sortOrder,
                Restriction: restriction,
                Entities: entities,
                Page: page,
                PageSize: pageSize,
                Context: context,
            };
            _options = webapi_options;
        }
        return this._GetArchiveListByColumnsWithContext2(_request, _options);
    }
    async _GetArchiveList2(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetArchiveList2", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ArchiveListItemArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetArchiveList2(guiName, providerName, sortOrder, restriction, entities, page, pageSize, webapi_options) {
        let _request = null;
        let _options = null;
        const first = guiName;
        if (typeof (first) === "object" && first && (typeof (first.GuiName) != 'undefined' || typeof (first.ProviderName) != 'undefined' || typeof (first.SortOrder) != 'undefined' || typeof (first.Restriction) != 'undefined' || typeof (first.Entities) != 'undefined' || typeof (first.Page) != 'undefined' || typeof (first.PageSize) != 'undefined')) {
            _request = guiName;
            _options = providerName;
        }
        else {
            _request = {
                GuiName: guiName,
                ProviderName: providerName,
                SortOrder: sortOrder,
                Restriction: restriction,
                Entities: entities,
                Page: page,
                PageSize: pageSize,
            };
            _options = webapi_options;
        }
        return this._GetArchiveList2(_request, _options);
    }
    async _GetArchiveListWithContext2(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetArchiveListWithContext2", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ArchiveListItemArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetArchiveListWithContext2(guiName, providerName, sortOrder, restriction, entities, page, pageSize, context, webapi_options) {
        let _request = null;
        let _options = null;
        const first = guiName;
        if (typeof (first) === "object" && first && (typeof (first.GuiName) != 'undefined' || typeof (first.ProviderName) != 'undefined' || typeof (first.SortOrder) != 'undefined' || typeof (first.Restriction) != 'undefined' || typeof (first.Entities) != 'undefined' || typeof (first.Page) != 'undefined' || typeof (first.PageSize) != 'undefined' || typeof (first.Context) != 'undefined')) {
            _request = guiName;
            _options = providerName;
        }
        else {
            _request = {
                GuiName: guiName,
                ProviderName: providerName,
                SortOrder: sortOrder,
                Restriction: restriction,
                Entities: entities,
                Page: page,
                PageSize: pageSize,
                Context: context,
            };
            _options = webapi_options;
        }
        return this._GetArchiveListWithContext2(_request, _options);
    }
    async _GetArchiveListByColumnsWithHeader2(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetArchiveListByColumnsWithHeader2", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ArchiveListResult_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetArchiveListByColumnsWithHeader2(providerName, columns, sortOrder, restriction, entities, page, pageSize, options, webapi_options) {
        let _request = null;
        let _options = null;
        const first = providerName;
        if (typeof (first) === "object" && first && (typeof (first.ProviderName) != 'undefined' || typeof (first.Columns) != 'undefined' || typeof (first.SortOrder) != 'undefined' || typeof (first.Restriction) != 'undefined' || typeof (first.Entities) != 'undefined' || typeof (first.Page) != 'undefined' || typeof (first.PageSize) != 'undefined' || typeof (first.Options) != 'undefined')) {
            _request = providerName;
            _options = columns;
        }
        else {
            _request = {
                ProviderName: providerName,
                Columns: columns,
                SortOrder: sortOrder,
                Restriction: restriction,
                Entities: entities,
                Page: page,
                PageSize: pageSize,
                Options: options,
            };
            _options = webapi_options;
        }
        return this._GetArchiveListByColumnsWithHeader2(_request, _options);
    }
    async _GetArchiveListByColumnsWithHeaderWithContext2(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetArchiveListByColumnsWithHeaderWithContext2", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ArchiveListResult_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetArchiveListByColumnsWithHeaderWithContext2(providerName, columns, sortOrder, restriction, entities, page, pageSize, options, context, webapi_options) {
        let _request = null;
        let _options = null;
        const first = providerName;
        if (typeof (first) === "object" && first && (typeof (first.ProviderName) != 'undefined' || typeof (first.Columns) != 'undefined' || typeof (first.SortOrder) != 'undefined' || typeof (first.Restriction) != 'undefined' || typeof (first.Entities) != 'undefined' || typeof (first.Page) != 'undefined' || typeof (first.PageSize) != 'undefined' || typeof (first.Options) != 'undefined' || typeof (first.Context) != 'undefined')) {
            _request = providerName;
            _options = columns;
        }
        else {
            _request = {
                ProviderName: providerName,
                Columns: columns,
                SortOrder: sortOrder,
                Restriction: restriction,
                Entities: entities,
                Page: page,
                PageSize: pageSize,
                Options: options,
                Context: context,
            };
            _options = webapi_options;
        }
        return this._GetArchiveListByColumnsWithHeaderWithContext2(_request, _options);
    }
    async _ExportArchive(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ExportArchive", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ExportArchiveResult_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async ExportArchive(providerName, context, desiredEntities, columns, sortOrder, restrictions, exportType, selectedRowIds, estimatedRowCount, webapi_options) {
        let _request = null;
        let _options = null;
        const first = providerName;
        if (typeof (first) === "object" && first && (typeof (first.ProviderName) != 'undefined' || typeof (first.Context) != 'undefined' || typeof (first.DesiredEntities) != 'undefined' || typeof (first.Columns) != 'undefined' || typeof (first.SortOrder) != 'undefined' || typeof (first.Restrictions) != 'undefined' || typeof (first.ExportType) != 'undefined' || typeof (first.SelectedRowIds) != 'undefined' || typeof (first.EstimatedRowCount) != 'undefined')) {
            _request = providerName;
            _options = context;
        }
        else {
            _request = {
                ProviderName: providerName,
                Context: context,
                DesiredEntities: desiredEntities,
                Columns: columns,
                SortOrder: sortOrder,
                Restrictions: restrictions,
                ExportType: exportType,
                SelectedRowIds: selectedRowIds,
                EstimatedRowCount: estimatedRowCount,
            };
            _options = webapi_options;
        }
        return this._ExportArchive(_request, _options);
    }
    async _GetRelatedData(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetRelatedData", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_RelatedDataArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetRelatedData(table, recordId, fields, webapi_options) {
        let _request = null;
        let _options = null;
        const first = table;
        if (typeof (first) === "object" && first && (typeof (first.Table) != 'undefined' || typeof (first.RecordId) != 'undefined' || typeof (first.Fields) != 'undefined')) {
            _request = table;
            _options = recordId;
        }
        else {
            _request = {
                Table: table,
                RecordId: recordId,
                Fields: fields,
            };
            _options = webapi_options;
        }
        return this._GetRelatedData(_request, _options);
    }
    async _GetRelatedData2(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetRelatedData2", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_RelatedDataArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetRelatedData2(table, recordId, fields, webapi_options) {
        let _request = null;
        let _options = null;
        const first = table;
        if (typeof (first) === "object" && first && (typeof (first.Table) != 'undefined' || typeof (first.RecordId) != 'undefined' || typeof (first.Fields) != 'undefined')) {
            _request = table;
            _options = recordId;
        }
        else {
            _request = {
                Table: table,
                RecordId: recordId,
                Fields: fields,
            };
            _options = webapi_options;
        }
        return this._GetRelatedData2(_request, _options);
    }
} // class v1ArchiveAgentController 
exports.ArchiveAgent = ArchiveAgent;
//# sourceMappingURL=ArchiveAgent.js.map