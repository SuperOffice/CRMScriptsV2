import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * AI services, such as Translation, Statistics, Sentiment analysis, backed by calls to Public Cloud providers
 */
export interface IAIAgent {
    GetTrainingStatus(webapi_options?: base.WebApiRequestOptions): Promise<carriers.CategorizationStatusResponse>;
    GuessCategory(request: carriers.AI_GuessCategoryRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    GuessCategory(ticketId: number, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    TrainCategoryGuesser(request: carriers.AI_TrainCategoryGuesserRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    TrainCategoryGuesser(selectionId: number, maxItems: number, maxTextLength: number, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    DetectLanguage(request: carriers.AI_DetectLanguageRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    DetectLanguage(text: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    DetectSentiment(request: carriers.AI_DetectSentimentRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sentiment>;
    DetectSentiment(text: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sentiment>;
    Translate(request: carriers.AI_TranslateRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    Translate(text: string, targetLanguage: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    TranslateEntity(request: carriers.AI_TranslateEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    TranslateEntity(entityName: string, entityId: number, targetLanguage: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
}
/**
 * AI services, such as Translation, Statistics, Sentiment analysis, backed by calls to Public Cloud providers
 */
export declare class AIAgent extends base.WebApiBase implements IAIAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    private _GetTrainingStatus;
    /**
     * Calling the HugoAI endpoint to fetch the current training status.
     * @returns Carrier to describe the current status of HugoAI categorization
     */
    GetTrainingStatus(webapi_options?: base.WebApiRequestOptions): Promise<carriers.CategorizationStatusResponse>;
    private _GuessCategory;
    /**
     * Given a ticket&apos;s id, guess the ticket category it should be placed in. Currently this is based on the first message in the ticket
     * @param request - TicketId
     * @returns Suggested ticket category ID
     */
    GuessCategory(request: carriers.AI_GuessCategoryRequest, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    /**
     * Given a ticket&apos;s id, guess the ticket category it should be placed in. Currently this is based on the first message in the ticket
     * @param ticketId - Id of ticket to guess category for
     * @returns Suggested ticket category ID
     */
    GuessCategory(ticketId: number, webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _TrainCategoryGuesser;
    /**
     * The category guesser training API will be called with an array of CategorizationTrainingItem during the (background, Batch) execution of this call
     * @param request - SelectionId, MaxItems, MaxTextLength
     * @returns Placeholder for result...  should this be a BatchTaskId?  maybe not useful?
     */
    TrainCategoryGuesser(request: carriers.AI_TrainCategoryGuesserRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * The category guesser training API will be called with an array of CategorizationTrainingItem during the (background, Batch) execution of this call
     * @param selectionId - Id of selection of tickets, to retrieve training data from
     * @param maxItems - Maximum number of tickets to retrieve data from
     * @param maxTextLength - Maximum length of PlainTextBody or any other large text, truncated to nearest word boundary
     * @returns Placeholder for result...  should this be a BatchTaskId?  maybe not useful?
     */
    TrainCategoryGuesser(selectionId: number, maxItems: number, maxTextLength: number, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _DetectLanguage;
    /**
     * Given a (reasonably short) text, detect the language it is written in
     * @param request - Text
     * @returns ISO Language code, such as NO, US, ES, FR
     */
    DetectLanguage(request: carriers.AI_DetectLanguageRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Given a (reasonably short) text, detect the language it is written in
     * @param text - Text to be analyzed; there may be a cost-per-character so do not send a book here
     * @returns ISO Language code, such as NO, US, ES, FR
     */
    DetectLanguage(text: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _DetectSentiment;
    /**
     * Detect the sentiment of a (reasonably short) text. Sentiment analysis may cause a translation to be made, since sentiment analysis only supports a limited set of languages
     * @param request - Text
     * @returns The sentiment information: score (-100 to +100) and confidence
     */
    DetectSentiment(request: carriers.AI_DetectSentimentRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sentiment>;
    /**
     * Detect the sentiment of a (reasonably short) text. Sentiment analysis may cause a translation to be made, since sentiment analysis only supports a limited set of languages
     * @param text - Text to be analyzed
     * @returns The sentiment information: score (-100 to +100) and confidence
     */
    DetectSentiment(text: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Sentiment>;
    private _Translate;
    /**
     * Translate a text from one language to another. Language of the text is automatically detected.
     * @param request - Text, TargetLanguage
     * @returns Translated text
     */
    Translate(request: carriers.AI_TranslateRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Translate a text from one language to another. Language of the text is automatically detected.
     * @param text - Text to be translated. Language of the text is automatically detected.
     * @param targetLanguage - ISO Language code (such as FR) to translate the text into
     * @returns Translated text
     */
    Translate(text: string, targetLanguage: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _TranslateEntity;
    /**
     * Retrieve, format and translate text for an entity to a specified language
     * @param request - EntityName, EntityId, TargetLanguage
     * @returns Translated text
     */
    TranslateEntity(request: carriers.AI_TranslateEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Retrieve, format and translate text for an entity to a specified language
     * @param entityName - Name of entity to get the text to be translated; eg., 'ticketMessage'
     * @param entityId - Identifier for the entity to get text to be translated
     * @param targetLanguage - ISO Language code (such as FR) to translate the text into
     * @returns Translated text
     */
    TranslateEntity(entityName: string, entityId: number, targetLanguage: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
}
//# sourceMappingURL=AIAgent.d.ts.map