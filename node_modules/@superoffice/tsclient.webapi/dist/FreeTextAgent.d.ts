import { AxiosRequestConfig } from 'axios';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * This agent can be used to manage the free text system
 */
export interface IFreeTextAgent {
    GetStatus(webapi_options?: base.WebApiRequestOptions): Promise<carriers.FreeText>;
    SetEnabled(request: carriers.FreeText_SetEnabledRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetEnabled(enabled: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetAutoEnableTravelAreas(request: carriers.FreeText_SetAutoEnableTravelAreasRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetAutoEnableTravelAreas(autoEnable: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetSingleWordOperator(request: carriers.FreeText_SetSingleWordOperatorRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetSingleWordOperator(freeTextOperator: enums.FreeTextOperator, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetMultiWordOperator(request: carriers.FreeText_SetMultiWordOperatorRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetMultiWordOperator(freeTextOperator: enums.FreeTextOperator, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetStopWordList(webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    AddWords(request: carriers.FreeText_AddWordsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    AddWords(stopWords: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteStopWordsById(request: carriers.FreeText_DeleteStopWordsByIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteStopWordsById(stopWordIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetSuggestedStopWords(request: carriers.FreeText_GetSuggestedStopWordsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    GetSuggestedStopWords(countWords: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    RegenerateIndex(request: carriers.FreeText_RegenerateIndexRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo>;
    RegenerateIndex(runAsBatch: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo>;
    FreetextIndexRows(request: carriers.FreeText_FreetextIndexRowsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    FreetextIndexRows(tableName: string, iDs: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
}
/**
 * This agent can be used to manage the free text system
 */
export declare class FreeTextAgent extends base.WebApiBase implements IFreeTextAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    private _GetStatus;
    /**
     * Returns status for the freetext search words
     * @returns The freetext status
     */
    GetStatus(webapi_options?: base.WebApiRequestOptions): Promise<carriers.FreeText>;
    private _SetEnabled;
    /**
     * Sets freetext search to enabled (true) or disabled (false)
     * @param request - Enabled
     * @returns This method has no return value
     */
    SetEnabled(request: carriers.FreeText_SetEnabledRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Sets freetext search to enabled (true) or disabled (false)
     * @param enabled - If enabled true, else false
     * @returns This method has no return value
     */
    SetEnabled(enabled: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SetAutoEnableTravelAreas;
    /**
     * Automatically enable freetext search for new travel areas? true or false
     * @param request - AutoEnable
     * @returns This method has no return value
     */
    SetAutoEnableTravelAreas(request: carriers.FreeText_SetAutoEnableTravelAreasRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Automatically enable freetext search for new travel areas? true or false
     * @param autoEnable - If true, auto enable
     * @returns This method has no return value
     */
    SetAutoEnableTravelAreas(autoEnable: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SetSingleWordOperator;
    /**
     * Sets the operator used when matching single words
     * @param request - FreeTextOperator
     * @returns This method has no return value
     */
    SetSingleWordOperator(request: carriers.FreeText_SetSingleWordOperatorRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Sets the operator used when matching single words
     * @param freeTextOperator - The operator
     * @returns This method has no return value
     */
    SetSingleWordOperator(freeTextOperator: enums.FreeTextOperator, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SetMultiWordOperator;
    /**
     * Sets the operator used when matching multiple words
     * @param request - FreeTextOperator
     * @returns No return value
     */
    SetMultiWordOperator(request: carriers.FreeText_SetMultiWordOperatorRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Sets the operator used when matching multiple words
     * @param freeTextOperator - The operator
     * @returns No return value
     */
    SetMultiWordOperator(freeTextOperator: enums.FreeTextOperator, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetStopWordList;
    /**
     * Returns the list of stop words
     * @returns The list of stop words
     */
    GetStopWordList(webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    private _AddWords;
    /**
     * Adds the words in the string to the stop word list
     * @param request - StopWords
     * @returns This method has no return value
     */
    AddWords(request: carriers.FreeText_AddWordsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Adds the words in the string to the stop word list
     * @param stopWords - The stop words to add
     * @returns This method has no return value
     */
    AddWords(stopWords: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _DeleteStopWordsById;
    /**
     * Delete the stop words with these ids
     * @param request - StopWordIds
     * @returns This method has no return value
     */
    DeleteStopWordsById(request: carriers.FreeText_DeleteStopWordsByIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Delete the stop words with these ids
     * @param stopWordIds - The ids of the stopwords to delete
     * @returns This method has no return value
     */
    DeleteStopWordsById(stopWordIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetSuggestedStopWords;
    /**
     * Returns the top used words in the freetext index table, sorted as most used first
     * @param request - CountWords
     * @returns The most used words
     */
    GetSuggestedStopWords(request: carriers.FreeText_GetSuggestedStopWordsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    /**
     * Returns the top used words in the freetext index table, sorted as most used first
     * @param countWords - The count of words that will be returned
     * @returns The most used words
     */
    GetSuggestedStopWords(countWords: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    private _RegenerateIndex;
    /**
     * Wipe and regenerate the freetext index by scanning the database (freetext search will be unavailable while this operation runs
     * @param request - RunAsBatch
     * @returns Information about the batch task, if batch execution was requested. Otherwise null
     */
    RegenerateIndex(request: carriers.FreeText_RegenerateIndexRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo>;
    /**
     * Wipe and regenerate the freetext index by scanning the database (freetext search will be unavailable while this operation runs
     * @param runAsBatch - If true, then execute the regeneration as a Batch Task; the service call will return immediately. Otherwise wait until the task completes, may cause a timeout if called as a Web Service
     * @returns Information about the batch task, if batch execution was requested. Otherwise null
     */
    RegenerateIndex(runAsBatch: boolean, webapi_options?: base.WebApiRequestOptions): Promise<carriers.BatchTaskInfo>;
    private _FreetextIndexRows;
    /**
     * Update the freetext index for one or more rows from the same table
     * @param request - TableName, IDs
     * @returns This method has no return value
     */
    FreetextIndexRows(request: carriers.FreeText_FreetextIndexRowsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Update the freetext index for one or more rows from the same table
     * @param tableName - The name of the table the rows come from; this table should have at least one freetext-indexable field
     * @param iDs - One or more primary keys, identifying records to be (re)indexed. It doesn't matter if they have been indexed before or not
     * @returns This method has no return value
     */
    FreetextIndexRows(tableName: string, iDs: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
}
//# sourceMappingURL=FreeTextAgent.d.ts.map