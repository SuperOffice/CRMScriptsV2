import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Manage and execute CRMScript functions.
 *
 * **Online Restricted:** This agent is not available in Online by default. Access must be requested specifically when app is registered.
 */
export interface ICRMScriptAgent {
    CreateDefaultCRMScriptEntity(): Promise<carriers.CRMScriptEntity>;
    SaveCRMScriptEntity(entity: carriers.CRMScriptEntity): Promise<carriers.CRMScriptEntity>;
    DeleteCRMScriptEntity(CRMScriptEntityId: number): Promise<void>;
    CreateDefaultTriggerScriptEntity(): Promise<carriers.TriggerScriptEntity>;
    SaveTriggerScriptEntity(entity: carriers.TriggerScriptEntity): Promise<carriers.TriggerScriptEntity>;
    DeleteTriggerScriptEntity(TriggerScriptEntityId: number): Promise<void>;
    GetCRMScriptByUniqueIdentifier(request: carriers.CRMScript_GetCRMScriptByUniqueIdentifierRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Script>;
    GetCRMScriptByUniqueIdentifier(uniqueIdentifier: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Script>;
    SaveCRMScriptByUniqueIdentifier(request: carriers.CRMScript_SaveCRMScriptByUniqueIdentifierRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Script>;
    SaveCRMScriptByUniqueIdentifier(uniqueIdentifier: string, crmscript: carriers.Script, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Script>;
    DeleteCRMScriptByUniqueIdentifier(request: carriers.CRMScript_DeleteCRMScriptByUniqueIdentifierRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteCRMScriptByUniqueIdentifier(uniqueIdentifier: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetCRMScriptEntity(cRMScriptEntityId: number): Promise<carriers.CRMScriptEntity>;
    ExecuteScript(request: carriers.CRMScript_ExecuteScriptRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    ExecuteScript(cRMScriptId: number, parameters: carriers.StringDictionary, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    ExecuteScriptByIncludeId(request: carriers.CRMScript_ExecuteScriptByIncludeIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    ExecuteScriptByIncludeId(cRMScriptIncludeId: string, parameters: carriers.StringDictionary, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    ExecuteScriptByUniqueId(request: carriers.CRMScript_ExecuteScriptByUniqueIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    ExecuteScriptByUniqueId(cRMScriptUniqueId: string, parameters: carriers.StringDictionary, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    ExecuteScriptAsEvent(request: carriers.CRMScript_ExecuteScriptAsEventRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EventData>;
    ExecuteScriptAsEvent(cRMScriptId: number, eventData: carriers.EventData, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EventData>;
    ExecuteScriptAsEventByUniqueId(request: carriers.CRMScript_ExecuteScriptAsEventByUniqueIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EventData>;
    ExecuteScriptAsEventByUniqueId(cRMScriptUniqueId: string, eventData: carriers.EventData, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EventData>;
    ValidateScript(request: carriers.CRMScript_ValidateScriptRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CRMScriptResult>;
    ValidateScript(cRMScriptId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CRMScriptResult>;
    ValidateScriptByIncludeId(request: carriers.CRMScript_ValidateScriptByIncludeIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CRMScriptResult>;
    ValidateScriptByIncludeId(cRMScriptIncludeId: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CRMScriptResult>;
    ValidateScriptByUniqueId(request: carriers.CRMScript_ValidateScriptByUniqueIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CRMScriptResult>;
    ValidateScriptByUniqueId(cRMScriptUniqueId: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CRMScriptResult>;
    GetTriggerScriptEntity(triggerScriptEntityId: number): Promise<carriers.TriggerScriptEntity>;
    GetTriggerScriptByUniqueId(request: carriers.CRMScript_GetTriggerScriptByUniqueIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TriggerScriptEntity>;
    GetTriggerScriptByUniqueId(triggerScriptUniqueId: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TriggerScriptEntity>;
    SaveTriggerScriptByUniqueId(request: carriers.CRMScript_SaveTriggerScriptByUniqueIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TriggerScriptEntity>;
    SaveTriggerScriptByUniqueId(triggerScriptUniqueId: string, entity: carriers.TriggerScriptEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TriggerScriptEntity>;
    DeleteTriggerScriptByUniqueId(request: carriers.CRMScript_DeleteTriggerScriptByUniqueIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteTriggerScriptByUniqueId(triggerScriptUniqueId: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    ValidateTriggerScript(request: carriers.CRMScript_ValidateTriggerScriptRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CRMScriptResult>;
    ValidateTriggerScript(triggerScriptId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CRMScriptResult>;
    ValidateTriggerScriptByUniqueId(request: carriers.CRMScript_ValidateTriggerScriptByUniqueIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CRMScriptResult>;
    ValidateTriggerScriptByUniqueId(triggerScriptUniqueId: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CRMScriptResult>;
}
/**
 * Manage and execute CRMScript functions.
 */
export declare class CRMScriptAgent extends base.WebApiBase implements ICRMScriptAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * Set default values into a new CRMScriptEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultCRMScriptEntity(options?: base.WebApiRequestOptions): Promise<carriers.CRMScriptEntity>;
    SaveCRMScriptEntity(entity: carriers.CRMScriptEntity, options?: base.WebApiRequestOptions): Promise<carriers.CRMScriptEntity>;
    DeleteCRMScriptEntity(CRMScriptEntityId: number, options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set default values into a new TriggerScriptEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultTriggerScriptEntity(options?: base.WebApiRequestOptions): Promise<carriers.TriggerScriptEntity>;
    SaveTriggerScriptEntity(entity: carriers.TriggerScriptEntity, options?: base.WebApiRequestOptions): Promise<carriers.TriggerScriptEntity>;
    DeleteTriggerScriptEntity(TriggerScriptEntityId: number, options?: base.WebApiRequestOptions): Promise<void>;
    private _GetCRMScriptByUniqueIdentifier;
    /**
     * Get information about a script from a unique identifier
     * @param request - UniqueIdentifier
     * @returns Information about CRMScript
     */
    GetCRMScriptByUniqueIdentifier(request: carriers.CRMScript_GetCRMScriptByUniqueIdentifierRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Script>;
    /**
     * Get information about a script from a unique identifier
     * @param uniqueIdentifier - Global unique reference to script (independent of installation)
     * @returns Information about CRMScript
     */
    GetCRMScriptByUniqueIdentifier(uniqueIdentifier: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Script>;
    private _SaveCRMScriptByUniqueIdentifier;
    /**
     * Create or Update the CRMScript information
     * @param request - UniqueIdentifier, Crmscript
     * @returns Information about the CRMScript as saved in the database
     */
    SaveCRMScriptByUniqueIdentifier(request: carriers.CRMScript_SaveCRMScriptByUniqueIdentifierRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Script>;
    /**
     * Create or Update the CRMScript information
     * @param uniqueIdentifier - Global unique reference to script (independent of installation)
     * @param crmscript - Information about the CRMScript
     * @returns Information about the CRMScript as saved in the database
     */
    SaveCRMScriptByUniqueIdentifier(uniqueIdentifier: string, crmscript: carriers.Script, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Script>;
    private _DeleteCRMScriptByUniqueIdentifier;
    /**
     * Delete the CRMScript
     * @param request - UniqueIdentifier
     * @returns This method has no return value
     */
    DeleteCRMScriptByUniqueIdentifier(request: carriers.CRMScript_DeleteCRMScriptByUniqueIdentifierRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Delete the CRMScript
     * @param uniqueIdentifier - Global unique reference to script (independent of installation)
     * @returns This method has no return value
     */
    DeleteCRMScriptByUniqueIdentifier(uniqueIdentifier: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetCRMScriptEntity(cRMScriptEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.CRMScriptEntity>;
    private _ExecuteScript;
    /**
     * Execute a CRMScript with parameters, returning printed output value.
     * @param request - CRMScriptId, Parameters
     * @returns The output produced by the CRMScript
     */
    ExecuteScript(request: carriers.CRMScript_ExecuteScriptRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Execute a CRMScript with parameters, returning printed output value.
     * @param cRMScriptId - The id of the CRMScript to execute
     * @param parameters - Parameters passed as variables to the CRMScript
     * @returns The output produced by the CRMScript
     */
    ExecuteScript(cRMScriptId: number, parameters: carriers.StringDictionary, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _ExecuteScriptByIncludeId;
    /**
     * Execute a CRMScript with parameters, returning printed output value.
     * @param request - CRMScriptIncludeId, Parameters
     * @returns The output produced by the CRMScript
     */
    ExecuteScriptByIncludeId(request: carriers.CRMScript_ExecuteScriptByIncludeIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Execute a CRMScript with parameters, returning printed output value.
     * @param cRMScriptIncludeId - The include id of the CRMScript to validate
     * @param parameters - Parameters passed as variables to the CRMScript
     * @returns The output produced by the CRMScript
     */
    ExecuteScriptByIncludeId(cRMScriptIncludeId: string, parameters: carriers.StringDictionary, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _ExecuteScriptByUniqueId;
    /**
     * Execute a CRMScript with parameters, returning printed output value.
     * @param request - CRMScriptUniqueId, Parameters
     * @returns The output produced by the CRMScript
     */
    ExecuteScriptByUniqueId(request: carriers.CRMScript_ExecuteScriptByUniqueIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Execute a CRMScript with parameters, returning printed output value.
     * @param cRMScriptUniqueId - The unique id of the CRMScript to validate
     * @param parameters - Parameters passed as variables to the CRMScript
     * @returns The output produced by the CRMScript
     */
    ExecuteScriptByUniqueId(cRMScriptUniqueId: string, parameters: carriers.StringDictionary, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _ExecuteScriptAsEvent;
    /**
     * Execute a CRMScript with event data as input. Returns event data with output variable values.
     * @param request - CRMScriptId, EventData
     * @returns The EventData instance after script execution with output values
     */
    ExecuteScriptAsEvent(request: carriers.CRMScript_ExecuteScriptAsEventRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EventData>;
    /**
     * Execute a CRMScript with event data as input. Returns event data with output variable values.
     * @param cRMScriptId - The id of the CRMScript to execute
     * @param eventData - The EventData instance sent to the crmscript with input values
     * @returns The EventData instance after script execution with output values
     */
    ExecuteScriptAsEvent(cRMScriptId: number, eventData: carriers.EventData, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EventData>;
    private _ExecuteScriptAsEventByUniqueId;
    /**
     * Execute a CRMScript with event data as input. Returns event data with output variable values.
     * @param request - CRMScriptUniqueId, EventData
     * @returns The EventData instance after script execution with output values
     */
    ExecuteScriptAsEventByUniqueId(request: carriers.CRMScript_ExecuteScriptAsEventByUniqueIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EventData>;
    /**
     * Execute a CRMScript with event data as input. Returns event data with output variable values.
     * @param cRMScriptUniqueId - The unique id of the CRMScript to execute
     * @param eventData - The EventData instance sent to the crmscript with input values
     * @returns The EventData instance after script execution with output values
     */
    ExecuteScriptAsEventByUniqueId(cRMScriptUniqueId: string, eventData: carriers.EventData, webapi_options?: base.WebApiRequestOptions): Promise<carriers.EventData>;
    private _ValidateScript;
    /**
     * Validate a CRMScript. This will check that the syntax is correct
     * @param request - CRMScriptId
     * @returns True of the syntax is correct
     */
    ValidateScript(request: carriers.CRMScript_ValidateScriptRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CRMScriptResult>;
    /**
     * Validate a CRMScript. This will check that the syntax is correct
     * @param cRMScriptId - The id of the CRMScript to execute
     * @returns True of the syntax is correct
     */
    ValidateScript(cRMScriptId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CRMScriptResult>;
    private _ValidateScriptByIncludeId;
    /**
     * Validate a CRMScript. This will check that the syntax is correct
     * @param request - CRMScriptIncludeId
     * @returns True of the syntax is correct
     */
    ValidateScriptByIncludeId(request: carriers.CRMScript_ValidateScriptByIncludeIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CRMScriptResult>;
    /**
     * Validate a CRMScript. This will check that the syntax is correct
     * @param cRMScriptIncludeId - The include id of the CRMScript to validate
     * @returns True of the syntax is correct
     */
    ValidateScriptByIncludeId(cRMScriptIncludeId: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CRMScriptResult>;
    private _ValidateScriptByUniqueId;
    /**
     * Validate a CRMScript. This will check that the syntax is correct
     * @param request - CRMScriptUniqueId
     * @returns True of the syntax is correct
     */
    ValidateScriptByUniqueId(request: carriers.CRMScript_ValidateScriptByUniqueIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CRMScriptResult>;
    /**
     * Validate a CRMScript. This will check that the syntax is correct
     * @param cRMScriptUniqueId - The unique id of the CRMScript to validate
     * @returns True of the syntax is correct
     */
    ValidateScriptByUniqueId(cRMScriptUniqueId: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CRMScriptResult>;
    GetTriggerScriptEntity(triggerScriptEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.TriggerScriptEntity>;
    private _GetTriggerScriptByUniqueId;
    /**
     * Get a trigger CRMScript.
     * @param request - TriggerScriptUniqueId
     * @returns Trigger script details and source code.
     */
    GetTriggerScriptByUniqueId(request: carriers.CRMScript_GetTriggerScriptByUniqueIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TriggerScriptEntity>;
    /**
     * Get a trigger CRMScript.
     * @param triggerScriptUniqueId - The unique id of the CRMScript to validate
     * @returns Trigger script details and source code.
     */
    GetTriggerScriptByUniqueId(triggerScriptUniqueId: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TriggerScriptEntity>;
    private _SaveTriggerScriptByUniqueId;
    /**
     * Validate a CRMScript. This will check that the syntax is correct
     * @param request - TriggerScriptUniqueId, Entity
     * @returns Trigger script details and source code.
     */
    SaveTriggerScriptByUniqueId(request: carriers.CRMScript_SaveTriggerScriptByUniqueIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TriggerScriptEntity>;
    /**
     * Validate a CRMScript. This will check that the syntax is correct
     * @param triggerScriptUniqueId - The unique id of the CRMScript to validate
     * @param entity - Trigger script details and source code
     * @returns Trigger script details and source code.
     */
    SaveTriggerScriptByUniqueId(triggerScriptUniqueId: string, entity: carriers.TriggerScriptEntity, webapi_options?: base.WebApiRequestOptions): Promise<carriers.TriggerScriptEntity>;
    private _DeleteTriggerScriptByUniqueId;
    /**
     * Delete a trigger CRMScript.
     * @param request - TriggerScriptUniqueId
     * @returns This method has no return value
     */
    DeleteTriggerScriptByUniqueId(request: carriers.CRMScript_DeleteTriggerScriptByUniqueIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Delete a trigger CRMScript.
     * @param triggerScriptUniqueId - The unique id of the CRMScript to validate
     * @returns This method has no return value
     */
    DeleteTriggerScriptByUniqueId(triggerScriptUniqueId: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _ValidateTriggerScript;
    /**
     * Validate a Trigger CRMScript. This will check that the syntax is correct, but not execute the script.
     * @param request - TriggerScriptId
     * @returns True of the syntax is correct
     */
    ValidateTriggerScript(request: carriers.CRMScript_ValidateTriggerScriptRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CRMScriptResult>;
    /**
     * Validate a Trigger CRMScript. This will check that the syntax is correct, but not execute the script.
     * @param triggerScriptId - The id of the CRMScript Trigger to validate
     * @returns True of the syntax is correct
     */
    ValidateTriggerScript(triggerScriptId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CRMScriptResult>;
    private _ValidateTriggerScriptByUniqueId;
    /**
     * Validate a Trigger CRMScript. This will check that the syntax is correct, but not execute the script.
     * @param request - TriggerScriptUniqueId
     * @returns True of the syntax is correct
     */
    ValidateTriggerScriptByUniqueId(request: carriers.CRMScript_ValidateTriggerScriptByUniqueIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CRMScriptResult>;
    /**
     * Validate a Trigger CRMScript. This will check that the syntax is correct, but not execute the script.
     * @param triggerScriptUniqueId - The unique id of the CRMScript to validate
     * @returns True of the syntax is correct
     */
    ValidateTriggerScriptByUniqueId(triggerScriptUniqueId: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CRMScriptResult>;
}
//# sourceMappingURL=CRMScriptAgent.d.ts.map