import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * TimeZone maintenance
 */
export interface ITimeZoneAgent {
    GetDefaultTimeZoneInformation(webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreferredTimeZone>;
    InitializeTimeZoneData(webapi_options?: base.WebApiRequestOptions): Promise<carriers.TimeZoneData[]>;
    GetBaseTimeZoneId(webapi_options?: base.WebApiRequestOptions): Promise<number>;
    UpdateTimeZoneData(webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    CheckNewTimeZoneDataAvailable(webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    ToggleActiveTimeZoneRow(request: carriers.TimeZone_ToggleActiveTimeZoneRowRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    ToggleActiveTimeZoneRow(id: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetActiveTimeZonesByFilter(request: carriers.TimeZone_SetActiveTimeZonesByFilterRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetActiveTimeZonesByFilter(filter: string, active: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    TimeOfLastTimeZoneUpdate(webapi_options?: base.WebApiRequestOptions): Promise<Date>;
    SetBaseTimeZoneId(request: carriers.TimeZone_SetBaseTimeZoneIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    SetBaseTimeZoneId(timezoneId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    GetDefaultTimeZonePreference(webapi_options?: base.WebApiRequestOptions): Promise<number>;
    DeleteTimeZones(webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetActiveTimeZoneRow(request: carriers.TimeZone_SetActiveTimeZoneRowRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetActiveTimeZoneRow(id: number, active: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
}
/**
 * TimeZone maintenance
 */
export declare class TimeZoneAgent extends base.WebApiBase implements ITimeZoneAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    private _GetDefaultTimeZoneInformation;
    /**
     * Get information about the current, preferred timezone for the current user. If no such preference has been set, returns the correct fallback (and UserPreferenceId is 0)
     * @returns Get information about the current, preferred timezone for the current user.
     */
    GetDefaultTimeZoneInformation(webapi_options?: base.WebApiRequestOptions): Promise<carriers.PreferredTimeZone>;
    private _InitializeTimeZoneData;
    /**
     * Initalizes the TimeZoneData
     * @returns
     */
    InitializeTimeZoneData(webapi_options?: base.WebApiRequestOptions): Promise<carriers.TimeZoneData[]>;
    private _GetBaseTimeZoneId;
    /**
     * Get the base timezone id.
     * @returns Returns the base timezone id. Returns 0 if not set.
     */
    GetBaseTimeZoneId(webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _UpdateTimeZoneData;
    /**
     * Retrieve time zone data from the SuperOffice server and update TimeZone data in the database
     * @returns Returns true if the operation succeeded
     */
    UpdateTimeZoneData(webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _CheckNewTimeZoneDataAvailable;
    /**
     * Check to see if new timezone data is available
     * @returns Returns true if new timezone info is found available, false otherwise
     */
    CheckNewTimeZoneDataAvailable(webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _ToggleActiveTimeZoneRow;
    /**
     * Toggles active state of a single row in the TZLocation table
     * @param request - Id
     * @returns
     */
    ToggleActiveTimeZoneRow(request: carriers.TimeZone_ToggleActiveTimeZoneRowRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Toggles active state of a single row in the TZLocation table
     * @param id - Id of row to toggle active state on
     * @returns
     */
    ToggleActiveTimeZoneRow(id: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SetActiveTimeZonesByFilter;
    /**
     * Toggles active state of a single row in the TZLocation table
     * @param request - Filter, Active
     * @returns
     */
    SetActiveTimeZonesByFilter(request: carriers.TimeZone_SetActiveTimeZonesByFilterRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Toggles active state of a single row in the TZLocation table
     * @param filter - Filter timezones
     * @param active - Set active to true or false
     * @returns
     */
    SetActiveTimeZonesByFilter(filter: string, active: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _TimeOfLastTimeZoneUpdate;
    /**
     * Get the time time zone data was last updated
     * @returns Time of last update
     */
    TimeOfLastTimeZoneUpdate(webapi_options?: base.WebApiRequestOptions): Promise<Date>;
    private _SetBaseTimeZoneId;
    /**
     * Set the base timezone id.
     * @param request - TimezoneId
     * @returns Returns true if setting of base timezone was done
     */
    SetBaseTimeZoneId(request: carriers.TimeZone_SetBaseTimeZoneIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Set the base timezone id.
     * @param timezoneId - The timezone id to save
     * @returns Returns true if setting of base timezone was done
     */
    SetBaseTimeZoneId(timezoneId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _GetDefaultTimeZonePreference;
    /**
     * Returns the id of the default timezone preference with deflevel system wide
     * @returns The id of the system wide default timezone preference
     */
    GetDefaultTimeZonePreference(webapi_options?: base.WebApiRequestOptions): Promise<number>;
    private _DeleteTimeZones;
    /**
     * Deletes all time zone data (locations and rules) from the database
     * @returns
     */
    DeleteTimeZones(webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SetActiveTimeZoneRow;
    /**
     * Set active state of singe row in the TZLocation table
     * @param request - Id, Active
     * @returns
     */
    SetActiveTimeZoneRow(request: carriers.TimeZone_SetActiveTimeZoneRowRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set active state of singe row in the TZLocation table
     * @param id - Id of row to set active state on
     * @param active - Set active to true or false
     * @returns
     */
    SetActiveTimeZoneRow(id: number, active: boolean, webapi_options?: base.WebApiRequestOptions): Promise<void>;
}
//# sourceMappingURL=TimeZoneAgent.d.ts.map