import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Agent used for retrieveing and setting favourites
 */
export interface IFavouriteAgent {
    IsFavourite(request: carriers.Favourite_IsFavouriteRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    IsFavourite(tableName: string, recordId: number, associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    AddFavourite(request: carriers.Favourite_AddFavouriteRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    AddFavourite(tableName: string, recordId: number, associateId: number, extraInfo: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    AddFavourites(request: carriers.Favourite_AddFavouritesRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    AddFavourites(tableName: string, recordIds: number[], associateId: number, extraInfo: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    AddTicketsToFavouritesByProvider(request: carriers.Favourite_AddTicketsToFavouritesByProviderRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    AddTicketsToFavouritesByProvider(providerName: string, restrictions: carriers.ArchiveRestrictionInfo[], associateId: number, extraInfo: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RemoveFavourites(request: carriers.Favourite_RemoveFavouritesRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RemoveFavourites(tableName: string, recordIds: number[], associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RemoveTicketsFromFavouritesByProvider(request: carriers.Favourite_RemoveTicketsFromFavouritesByProviderRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RemoveTicketsFromFavouritesByProvider(providerName: string, restrictions: carriers.ArchiveRestrictionInfo[], associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetFavourites(request: carriers.Favourite_GetFavouritesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Favourite[]>;
    GetFavourites(tableName: string, associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Favourite[]>;
    RemoveFavourite(request: carriers.Favourite_RemoveFavouriteRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RemoveFavourite(tableName: string, recordId: number, associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RemoveAllFavourites(request: carriers.Favourite_RemoveAllFavouritesRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RemoveAllFavourites(tableName: string, associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    ToggleFavourite(request: carriers.Favourite_ToggleFavouriteRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    ToggleFavourite(tableName: string, recordId: number, associateId: number, extraInfo: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    RemoveFavouritesById(request: carriers.Favourite_RemoveFavouritesByIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    RemoveFavouritesById(favouriteIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
}
/**
 * Agent used for retrieveing and setting favourites
 */
export declare class FavouriteAgent extends base.WebApiBase implements IFavouriteAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    private _IsFavourite;
    /**
     * Checks if a record in a table is a favourite for an associate
     * @param request - TableName, RecordId, AssociateId
     * @returns Is Favourite?
     */
    IsFavourite(request: carriers.Favourite_IsFavouriteRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Checks if a record in a table is a favourite for an associate
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.
     * @param recordId - Id of a record in your specified table (tableName)
     * @param associateId - Id of a current user
     * @returns Is Favourite?
     */
    IsFavourite(tableName: string, recordId: number, associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _AddFavourite;
    /**
     * Add a record in a table as a favourite for an associate
     * @param request - TableName, RecordId, AssociateId, ExtraInfo
     * @returns This method has no return value
     */
    AddFavourite(request: carriers.Favourite_AddFavouriteRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Add a record in a table as a favourite for an associate
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.
     * @param recordId - Id of a record in your specified table (tableName)
     * @param associateId - Id of a current user
     * @param extraInfo - Any extra information
     * @returns This method has no return value
     */
    AddFavourite(tableName: string, recordId: number, associateId: number, extraInfo: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _AddFavourites;
    /**
     * Add a list of record ids as favourites for an associate
     * @param request - TableName, RecordIds, AssociateId, ExtraInfo
     * @returns This method has no return value
     */
    AddFavourites(request: carriers.Favourite_AddFavouritesRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Add a list of record ids as favourites for an associate
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.
     * @param recordIds - Ids of records in your specified table (tableName). Corresponding rows will be added as Favourites.
     * @param associateId - Id of a current user
     * @param extraInfo - Any extra information
     * @returns This method has no return value
     */
    AddFavourites(tableName: string, recordIds: number[], associateId: number, extraInfo: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _AddTicketsToFavouritesByProvider;
    /**
     * Add a list of tickets as favourites that are given by the ticket provider.
     * @param request - ProviderName, Restrictions, AssociateId, ExtraInfo
     * @returns This method has no return value
     */
    AddTicketsToFavouritesByProvider(request: carriers.Favourite_AddTicketsToFavouritesByProviderRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Add a list of tickets as favourites that are given by the ticket provider.
     * @param providerName - Name of a ticket provider
     * @param restrictions - Query restrictions to be added to provider. Fixed providers, such as LastTicketsProvider, FavouriteTicketsProvider etc. already have mandatory restrictions setup - in such case extra restrictions will be combined, however for general use case for fixed providers you can pass an empty array and provider will return default results. For selection providers generally you should pass selectionId as a restriction.
     * @param associateId - Id of a current user
     * @param extraInfo - Any extra information
     * @returns This method has no return value
     */
    AddTicketsToFavouritesByProvider(providerName: string, restrictions: carriers.ArchiveRestrictionInfo[], associateId: number, extraInfo: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _RemoveFavourites;
    /**
     * Remove a list of record ids from favourites for an associate
     * @param request - TableName, RecordIds, AssociateId
     * @returns This method has no return value
     */
    RemoveFavourites(request: carriers.Favourite_RemoveFavouritesRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Remove a list of record ids from favourites for an associate
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.
     * @param recordIds - Ids of records in your specified table (tableName). Corresponding rows will be removed from Favourites.
     * @param associateId - Id of a current user
     * @returns This method has no return value
     */
    RemoveFavourites(tableName: string, recordIds: number[], associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _RemoveTicketsFromFavouritesByProvider;
    /**
     * Remove a list of tickets from favourites that are given by the ticket provider.
     * @param request - ProviderName, Restrictions, AssociateId
     * @returns This method has no return value
     */
    RemoveTicketsFromFavouritesByProvider(request: carriers.Favourite_RemoveTicketsFromFavouritesByProviderRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Remove a list of tickets from favourites that are given by the ticket provider.
     * @param providerName - Name of a ticket provider
     * @param restrictions - Query restrictions to be added to provider. Fixed providers, such as LastTicketsProvider, FavouriteTicketsProvider etc. already have mandatory restrictions setup - in such case extra restrictions will be combined, however for general use case for fixed providers you can pass an empty array and provider will return default results. For selection providers generally you should pass selectionId as a restriction.
     * @param associateId - Id of a current user
     * @returns This method has no return value
     */
    RemoveTicketsFromFavouritesByProvider(providerName: string, restrictions: carriers.ArchiveRestrictionInfo[], associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetFavourites;
    /**
     * Get all favourites for a table and associate
     * @param request - TableName, AssociateId
     * @returns Requested favourites for a table and associate
     */
    GetFavourites(request: carriers.Favourite_GetFavouritesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Favourite[]>;
    /**
     * Get all favourites for a table and associate
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.
     * @param associateId - Id of a current user
     * @returns Requested favourites for a table and associate
     */
    GetFavourites(tableName: string, associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Favourite[]>;
    private _RemoveFavourite;
    /**
     * Remove favourite for a table, record id and associate
     * @param request - TableName, RecordId, AssociateId
     * @returns This method has no return value
     */
    RemoveFavourite(request: carriers.Favourite_RemoveFavouriteRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Remove favourite for a table, record id and associate
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.
     * @param recordId - Id of a record in your specified table (tableName)
     * @param associateId - Id of a current user
     * @returns This method has no return value
     */
    RemoveFavourite(tableName: string, recordId: number, associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _RemoveAllFavourites;
    /**
     * Remove all favourites for a table and associate
     * @param request - TableName, AssociateId
     * @returns This method has no return value
     */
    RemoveAllFavourites(request: carriers.Favourite_RemoveAllFavouritesRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Remove all favourites for a table and associate
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.
     * @param associateId - Id of a current user
     * @returns This method has no return value
     */
    RemoveAllFavourites(tableName: string, associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _ToggleFavourite;
    /**
     * Toggle a record in a table as a favourite for an associate
     * @param request - TableName, RecordId, AssociateId, ExtraInfo
     * @returns Return the new value, true if added, false if removed
     */
    ToggleFavourite(request: carriers.Favourite_ToggleFavouriteRequest, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    /**
     * Toggle a record in a table as a favourite for an associate
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.
     * @param recordId - Id of a record in your specified table (tableName)
     * @param associateId - Id of a current user
     * @param extraInfo - Any extra information
     * @returns Return the new value, true if added, false if removed
     */
    ToggleFavourite(tableName: string, recordId: number, associateId: number, extraInfo: string, webapi_options?: base.WebApiRequestOptions): Promise<boolean>;
    private _RemoveFavouritesById;
    /**
     * Remove favourite using favourite id
     * @param request - FavouriteIds
     * @returns This method has no return value
     */
    RemoveFavouritesById(request: carriers.Favourite_RemoveFavouritesByIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Remove favourite using favourite id
     * @param favouriteIds - Ids of favourite rows to delete
     * @returns This method has no return value
     */
    RemoveFavouritesById(favouriteIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
}
//# sourceMappingURL=FavouriteAgent.d.ts.map