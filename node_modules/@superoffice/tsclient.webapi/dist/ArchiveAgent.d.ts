import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * ArchiveList functions of all kinds
 */
export interface IArchiveAgent {
    CreateDefaultArchiveListResult(): Promise<carriers.ArchiveListResult>;
    GetActivityFilter(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ActivityFilter>;
    SetActivityFilter(request: carriers.Archive_SetActivityFilterRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetActivityFilter(activityFilter: carriers.ActivityFilter, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetGroupAssociateIds(request: carriers.Archive_GetGroupAssociateIdsRequest, webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    GetGroupAssociateIds(groupIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    GetArchiveConfiguration(request: carriers.Archive_GetArchiveConfigurationRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveConfiguration>;
    GetArchiveConfiguration(guiName: string, providerName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveConfiguration>;
    GetArchiveConfigurationWithContext(request: carriers.Archive_GetArchiveConfigurationWithContextRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveConfiguration>;
    GetArchiveConfigurationWithContext(guiName: string, providerName: string, context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveConfiguration>;
    SetColumnWidths(request: carriers.Archive_SetColumnWidthsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetColumnWidths(guiName: string, columnWidths: string[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetChosenEntities(request: carriers.Archive_SetChosenEntitiesRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetChosenEntities(guiName: string, providerName: string, entities: string[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetChosenColumns(request: carriers.Archive_SetChosenColumnsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetChosenColumns(guiName: string, providerName: string, chosenColumns: string[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetArchiveConfigurationV2(request: carriers.Archive_GetArchiveConfigurationV2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveConfiguration>;
    GetArchiveConfigurationV2(guiName: string, providerName: string, context: string, ownerKeys: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveConfiguration>;
    SetColumnWidthsV2(request: carriers.Archive_SetColumnWidthsV2Request, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetColumnWidthsV2(guiName: string, providerName: string, context: string, ownerKeys: string, columnWidths: string[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetChosenEntitiesV2(request: carriers.Archive_SetChosenEntitiesV2Request, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetChosenEntitiesV2(guiName: string, providerName: string, context: string, ownerKeys: string, entities: string[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetChosenColumnsV2(request: carriers.Archive_SetChosenColumnsV2Request, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SetChosenColumnsV2(guiName: string, providerName: string, context: string, ownerKeys: string, chosenColumns: string[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetArchiveListByColumns(request: carriers.Archive_GetArchiveListByColumnsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    GetArchiveListByColumns(providerName: string, columns: string[], sortOrder: carriers.ArchiveOrderByInfo[], restriction: carriers.ArchiveRestrictionInfo[], entities: string[], page: number, pageSize: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    GetArchiveListByColumnsWithContext(request: carriers.Archive_GetArchiveListByColumnsWithContextRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    GetArchiveListByColumnsWithContext(providerName: string, columns: string[], sortOrder: carriers.ArchiveOrderByInfo[], restriction: carriers.ArchiveRestrictionInfo[], entities: string[], page: number, pageSize: number, context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    GetArchiveList(request: carriers.Archive_GetArchiveListRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    GetArchiveList(guiName: string, providerName: string, sortOrder: carriers.ArchiveOrderByInfo[], restriction: carriers.ArchiveRestrictionInfo[], entities: string[], page: number, pageSize: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    GetArchiveListWithContext(request: carriers.Archive_GetArchiveListWithContextRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    GetArchiveListWithContext(guiName: string, providerName: string, sortOrder: carriers.ArchiveOrderByInfo[], restriction: carriers.ArchiveRestrictionInfo[], entities: string[], page: number, pageSize: number, context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    GetArchiveListByColumnsWithHeader(request: carriers.Archive_GetArchiveListByColumnsWithHeaderRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListResult>;
    GetArchiveListByColumnsWithHeader(providerName: string, columns: string[], sortOrder: carriers.ArchiveOrderByInfo[], restriction: carriers.ArchiveRestrictionInfo[], entities: string[], page: number, pageSize: number, options: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListResult>;
    GetProviderNames(webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    GetArchiveListByColumnsWithHeaderWithContext(request: carriers.Archive_GetArchiveListByColumnsWithHeaderWithContextRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListResult>;
    GetArchiveListByColumnsWithHeaderWithContext(providerName: string, columns: string[], sortOrder: carriers.ArchiveOrderByInfo[], restriction: carriers.ArchiveRestrictionInfo[], entities: string[], page: number, pageSize: number, options: string, context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListResult>;
    GetAvailableColumns(request: carriers.Archive_GetAvailableColumnsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveColumnInfo[]>;
    GetAvailableColumns(providerName: string, context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveColumnInfo[]>;
    GetAvailableEntities(request: carriers.Archive_GetAvailableEntitiesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    GetAvailableEntities(providerName: string, context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    GetArchiveListByColumns2(request: carriers.Archive_GetArchiveListByColumns2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    GetArchiveListByColumns2(providerName: string, columns: string, sortOrder: string, restrictions: string, entities: string, page: number, pageSize: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    GetArchiveListByColumnsWithContext2(request: carriers.Archive_GetArchiveListByColumnsWithContext2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    GetArchiveListByColumnsWithContext2(providerName: string, columns: string, sortOrder: string, restriction: string, entities: string, page: number, pageSize: number, context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    GetArchiveList2(request: carriers.Archive_GetArchiveList2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    GetArchiveList2(guiName: string, providerName: string, sortOrder: string, restriction: string, entities: string, page: number, pageSize: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    GetArchiveListWithContext2(request: carriers.Archive_GetArchiveListWithContext2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    GetArchiveListWithContext2(guiName: string, providerName: string, sortOrder: string, restriction: string, entities: string, page: number, pageSize: number, context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    GetArchiveListByColumnsWithHeader2(request: carriers.Archive_GetArchiveListByColumnsWithHeader2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListResult>;
    GetArchiveListByColumnsWithHeader2(providerName: string, columns: string, sortOrder: string, restriction: string, entities: string, page: number, pageSize: number, options: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListResult>;
    GetArchiveListByColumnsWithHeaderWithContext2(request: carriers.Archive_GetArchiveListByColumnsWithHeaderWithContext2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListResult>;
    GetArchiveListByColumnsWithHeaderWithContext2(providerName: string, columns: string, sortOrder: string, restriction: string, entities: string, page: number, pageSize: number, options: string, context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListResult>;
    ExportArchive(request: carriers.Archive_ExportArchiveRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ExportArchiveResult>;
    ExportArchive(providerName: string, context: string, desiredEntities: string[], columns: string[], sortOrder: carriers.ArchiveOrderByInfo[], restrictions: carriers.ArchiveRestrictionInfo[], exportType: string, selectedRowIds: string[], estimatedRowCount: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ExportArchiveResult>;
    GetRelatedData(request: carriers.Archive_GetRelatedDataRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RelatedData[]>;
    GetRelatedData(table: string, recordId: number, fields: string[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.RelatedData[]>;
    GetRelatedData2(request: carriers.Archive_GetRelatedData2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RelatedData[]>;
    GetRelatedData2(table: string, recordId: number, fields: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RelatedData[]>;
}
/**
 * ArchiveList functions of all kinds
 */
export declare class ArchiveAgent extends base.WebApiBase implements IArchiveAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * Set default values into a new ArchiveListResult.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultArchiveListResult(options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListResult>;
    private _GetActivityFilter;
    /**
     * Get activity filter for the specified list.
     * @returns The activity filter for the specified list
     */
    GetActivityFilter(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ActivityFilter>;
    private _SetActivityFilter;
    /**
     * Set activity filter for the specified list.
     * @param request - ActivityFilter
     * @returns
     */
    SetActivityFilter(request: carriers.Archive_SetActivityFilterRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set activity filter for the specified list.
     * @param activityFilter - New activity filter
     * @returns
     */
    SetActivityFilter(activityFilter: carriers.ActivityFilter, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetGroupAssociateIds;
    /**
     * Returns the  associate ids that belongs to the given groups
     * @param request - GroupIds
     * @returns Array of associate ids
     */
    GetGroupAssociateIds(request: carriers.Archive_GetGroupAssociateIdsRequest, webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    /**
     * Returns the  associate ids that belongs to the given groups
     * @param groupIds - Array of group ids
     * @returns Array of associate ids
     */
    GetGroupAssociateIds(groupIds: number[], webapi_options?: base.WebApiRequestOptions): Promise<number[]>;
    private _GetArchiveConfiguration;
    /**
     * Get the configuration for one archive. The configuration is keyed by a combination of archive provider name and gui name. The archive provider name must match an archive provider plugin; the gui name is an arbitrary string used to distinguish multiple occurrences of the same underlying provider in a gui.
     * @param request - GuiName, ProviderName
     * @returns Archive configuration consisting of column information, orderby information and entities
     */
    GetArchiveConfiguration(request: carriers.Archive_GetArchiveConfigurationRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveConfiguration>;
    /**
     * Get the configuration for one archive. The configuration is keyed by a combination of archive provider name and gui name. The archive provider name must match an archive provider plugin; the gui name is an arbitrary string used to distinguish multiple occurrences of the same underlying provider in a gui.
     * @param guiName - String that identifies the archive in the GUI, must be the same when fetching and storing configurations, but does not otherwise have to match anything.
     * @param providerName - Name of archive provider, must match one of the plugins known to the ArchiveProviderFactory.
     * @returns Archive configuration consisting of column information, orderby information and entities
     */
    GetArchiveConfiguration(guiName: string, providerName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveConfiguration>;
    private _GetArchiveConfigurationWithContext;
    /**
     * Get the configuration for one archive, with context parameter. The configuration is keyed by a combination of archive provider name and gui name. The archive provider name must match an archive provider plugin; the gui name is an arbitrary string used to distinguish multiple occurrences of the same underlying provider in a gui.
     * @param request - GuiName, ProviderName, Context
     * @returns Archive configuration consisting of column information, orderby information and entities
     */
    GetArchiveConfigurationWithContext(request: carriers.Archive_GetArchiveConfigurationWithContextRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveConfiguration>;
    /**
     * Get the configuration for one archive, with context parameter. The configuration is keyed by a combination of archive provider name and gui name. The archive provider name must match an archive provider plugin; the gui name is an arbitrary string used to distinguish multiple occurrences of the same underlying provider in a gui.
     * @param guiName - String that identifies the archive in the GUI, must be the same when fetching and storing configurations, but does not otherwise have to match anything.
     * @param providerName - Name of archive provider, must match one of the plugins known to the ArchiveProviderFactory.
     * @param context - Context parameter, url-encoded string context parameter for ArchiveProvider constructor
     * @returns Archive configuration consisting of column information, orderby information and entities
     */
    GetArchiveConfigurationWithContext(guiName: string, providerName: string, context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveConfiguration>;
    private _SetColumnWidths;
    /**
     * Set the column widths for the given set of columns and GUI name.
     * @param request - GuiName, ColumnWidths
     * @returns
     */
    SetColumnWidths(request: carriers.Archive_SetColumnWidthsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set the column widths for the given set of columns and GUI name.
     * @param guiName - String that identifies the archive in the GUI, must be the same when fetching and storing configurations, but does not otherwise have to match anything.
     * @param columnWidths - Array of column widths. A column width is specified either as a fixed number of character (10c) or as a percentage (10%). Percentages will be recalculated so that they add up to exactly 100 when the configuration is fetched again.
     * @returns
     */
    SetColumnWidths(guiName: string, columnWidths: string[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SetChosenEntities;
    /**
     * Set the currently chosen entities for the given gui name/provider name combination. This service corresponds to the SetSelected method of the SelectableMDOList service, for a list called archiveEntities: plus the archive provider name and gui name as its additionalInfo.
     * @param request - GuiName, ProviderName, Entities
     * @returns
     */
    SetChosenEntities(request: carriers.Archive_SetChosenEntitiesRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set the currently chosen entities for the given gui name/provider name combination. This service corresponds to the SetSelected method of the SelectableMDOList service, for a list called archiveEntities: plus the archive provider name and gui name as its additionalInfo.
     * @param guiName - String that identifies the archive in the GUI, must be the same when fetching and storing configurations, but does not otherwise have to match anything.
     * @param providerName - Name of archive provider, must match one of the plugins known to the ArchiveProviderFactory.
     * @param entities - Array of entity names
     * @returns
     */
    SetChosenEntities(guiName: string, providerName: string, entities: string[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SetChosenColumns;
    /**
     * Set the currently chosen columns for the given gui name/provider name combination. This service corresponds to the SetSelected method of the SelectableMDOList service, for a list called archiveColumns: plus the archive provider name and gui name as its additionalInfo.
     * @param request - GuiName, ProviderName, ChosenColumns
     * @returns
     */
    SetChosenColumns(request: carriers.Archive_SetChosenColumnsRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set the currently chosen columns for the given gui name/provider name combination. This service corresponds to the SetSelected method of the SelectableMDOList service, for a list called archiveColumns: plus the archive provider name and gui name as its additionalInfo.
     * @param guiName - String that identifies the archive in the GUI, must be the same when fetching and storing configurations, but does not otherwise have to match anything.
     * @param providerName - Name of archive provider, must match one of the plugins known to the ArchiveProviderFactory.
     * @param chosenColumns - Array of column names, where array order indicates left to right order in the archive.
     * @returns
     */
    SetChosenColumns(guiName: string, providerName: string, chosenColumns: string[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetArchiveConfigurationV2;
    /**
     * Get the configuration for one archive. The configuration is keyed by a combination of archive provider name (plus optional context), gui name, and optional table binding. The archive provider name must match an archive provider plugin; the gui name is an arbitrary string used to distinguish multiple occurrences of the same underlying provider in a gui.
     * @param request - GuiName, ProviderName, Context, OwnerKeys
     * @returns Archive configuration consisting of column information, orderby information and entities
     */
    GetArchiveConfigurationV2(request: carriers.Archive_GetArchiveConfigurationV2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveConfiguration>;
    /**
     * Get the configuration for one archive. The configuration is keyed by a combination of archive provider name (plus optional context), gui name, and optional table binding. The archive provider name must match an archive provider plugin; the gui name is an arbitrary string used to distinguish multiple occurrences of the same underlying provider in a gui.
     * @param guiName - String that identifies the archive in the GUI, must be the same when fetching and storing configurations, but does not otherwise have to match anything.
     * @param providerName - Name of archive provider, must match one of the plugins known to the ArchiveProviderFactory.
     * @param context - Context parameter, url-encoded string context parameter for ArchiveProvider constructor. Optional, but required for archives that depend on a context - for instance Quote archives that need to know their QuoteConnectionId to be meaningful
     * @param ownerKeys - Name/value string containing ownership binding information. The first should resolve to a table/primarykey, such as selection=123. Future functionality may allow multiple/extended keys
     * @returns Archive configuration consisting of column information, orderby information and entities
     */
    GetArchiveConfigurationV2(guiName: string, providerName: string, context: string, ownerKeys: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveConfiguration>;
    private _SetColumnWidthsV2;
    /**
     * Set the column widths for the given set of columns and GUI name.
     * @param request - GuiName, ProviderName, Context, OwnerKeys, ColumnWidths
     * @returns
     */
    SetColumnWidthsV2(request: carriers.Archive_SetColumnWidthsV2Request, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set the column widths for the given set of columns and GUI name.
     * @param guiName - String that identifies the archive in the GUI, must be the same when fetching and storing configurations, but does not otherwise have to match anything.
     * @param providerName - Name of archive provider, must match one of the plugins known to the ArchiveProviderFactory.
     * @param context - Context parameter, url-encoded string context parameter for ArchiveProvider constructor. Optional, but required for archives that depend on a context - for instance Quote archives that need to know their QuoteConnectionId to be meaningful
     * @param ownerKeys - Name/value string containing ownership binding information. The first should resolve to a table/primarykey, such as selection=123. Future functionality may allow multiple/extended keys
     * @param columnWidths - Array of column widths. A column width is specified either as a fixed number of character (10c) or as a percentage (10%). Percentages will be recalculated so that they add up to exactly 100 when the configuration is fetched again.
     * @returns
     */
    SetColumnWidthsV2(guiName: string, providerName: string, context: string, ownerKeys: string, columnWidths: string[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SetChosenEntitiesV2;
    /**
     * Set the currently chosen entities for the given gui name/provider name combination. This service corresponds to the SetSelected method of the SelectableMDOList service, for a list called archiveEntities: plus the archive provider name and gui name as its additionalInfo.
     * @param request - GuiName, ProviderName, Context, OwnerKeys, Entities
     * @returns
     */
    SetChosenEntitiesV2(request: carriers.Archive_SetChosenEntitiesV2Request, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set the currently chosen entities for the given gui name/provider name combination. This service corresponds to the SetSelected method of the SelectableMDOList service, for a list called archiveEntities: plus the archive provider name and gui name as its additionalInfo.
     * @param guiName - String that identifies the archive in the GUI, must be the same when fetching and storing configurations, but does not otherwise have to match anything.
     * @param providerName - Name of archive provider, must match one of the plugins known to the ArchiveProviderFactory.
     * @param context - Context parameter, url-encoded string context parameter for ArchiveProvider constructor. Optional, but required for archives that depend on a context - for instance Quote archives that need to know their QuoteConnectionId to be meaningful
     * @param ownerKeys - Name/value string containing ownership binding information. The first should resolve to a table/primarykey, such as selection=123. Future functionality may allow multiple/extended keys
     * @param entities - Array of entity names
     * @returns
     */
    SetChosenEntitiesV2(guiName: string, providerName: string, context: string, ownerKeys: string, entities: string[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _SetChosenColumnsV2;
    /**
     * Set the currently chosen columns for the given gui name/provider name combination. This service corresponds to the SetSelected method of the SelectableMDOList service, for a list called archiveColumns: plus the archive provider name and gui name as its additionalInfo.
     * @param request - GuiName, ProviderName, Context, OwnerKeys, ChosenColumns
     * @returns
     */
    SetChosenColumnsV2(request: carriers.Archive_SetChosenColumnsV2Request, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Set the currently chosen columns for the given gui name/provider name combination. This service corresponds to the SetSelected method of the SelectableMDOList service, for a list called archiveColumns: plus the archive provider name and gui name as its additionalInfo.
     * @param guiName - String that identifies the archive in the GUI, must be the same when fetching and storing configurations, but does not otherwise have to match anything.
     * @param providerName - Name of archive provider, must match one of the plugins known to the ArchiveProviderFactory.
     * @param context - Context parameter, url-encoded string context parameter for ArchiveProvider constructor. Optional, but required for archives that depend on a context - for instance Quote archives that need to know their QuoteConnectionId to be meaningful
     * @param ownerKeys - Name/value string containing ownership binding information. The first should resolve to a table/primarykey, such as selection=123. Future functionality may allow multiple/extended keys
     * @param chosenColumns - Array of column names, where array order indicates left to right order in the archive.
     * @returns
     */
    SetChosenColumnsV2(guiName: string, providerName: string, context: string, ownerKeys: string, chosenColumns: string[], webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetArchiveListByColumns;
    /**
     * Get a page of results for an archive list, explicitly specifying the restrictions, orderby and chosen columns.
     * @param request - ProviderName, Columns, SortOrder, Restriction, Entities, Page, PageSize
     * @returns Array of archive list items, where each item represents one row of data (row level data + the requested columns)
     */
    GetArchiveListByColumns(request: carriers.Archive_GetArchiveListByColumnsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    /**
     * Get a page of results for an archive list, explicitly specifying the restrictions, orderby and chosen columns.
     * @param providerName - The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin
     * @param columns - An array of the names of the columns wanted.
     * @param sortOrder - Sort order for the archive. Can be null, which indicates 'no particular order'
     * @param restriction - Archive restrictions. Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.
     * @param entities - Which entities to include. Can be null, which indicates 'include all entities'
     * @param page - Page number, page 0 is the first page. Negative page numbers are interpreted as number of rows to skip.
     * @param pageSize - Page size, which should be kept reasonable (say, no more than 1000 rows at a time)
     * @returns Array of archive list items, where each item represents one row of data (row level data + the requested columns)
     */
    GetArchiveListByColumns(providerName: string, columns: string[], sortOrder: carriers.ArchiveOrderByInfo[], restriction: carriers.ArchiveRestrictionInfo[], entities: string[], page: number, pageSize: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    private _GetArchiveListByColumnsWithContext;
    /**
     * Get a page of results for an archive list with context parameter, explicitly specifying the restrictions, orderby and chosen columns.
     * @param request - ProviderName, Columns, SortOrder, Restriction, Entities, Page, PageSize, Context
     * @returns Array of archive list items, where each item represents one row of data (row level data + the requested columns)
     */
    GetArchiveListByColumnsWithContext(request: carriers.Archive_GetArchiveListByColumnsWithContextRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    /**
     * Get a page of results for an archive list with context parameter, explicitly specifying the restrictions, orderby and chosen columns.
     * @param providerName - The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin
     * @param columns - An array of the names of the columns wanted.
     * @param sortOrder - Sort order for the archive. Can be null, which indicates 'no particular order'
     * @param restriction - Archive restrictions. Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.
     * @param entities - Which entities to include. Can be null, which indicates 'include all entities'
     * @param page - Page number, page 0 is the first page. Negative page numbers are interpreted as number of rows to skip.
     * @param pageSize - Page size, which should be kept reasonable (say, no more than 1000 rows at a time)
     * @param context - Context parameter, url-encoded string context parameter for ArchiveProvider constructor
     * @returns Array of archive list items, where each item represents one row of data (row level data + the requested columns)
     */
    GetArchiveListByColumnsWithContext(providerName: string, columns: string[], sortOrder: carriers.ArchiveOrderByInfo[], restriction: carriers.ArchiveRestrictionInfo[], entities: string[], page: number, pageSize: number, context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    private _GetArchiveList;
    /**
     * Get a page of data for an archive. The columns returned will be those set as chosen columns, using either the SetChosenColumns service or the corresponding SelectableMDOList.SetSelected.
     * @param request - GuiName, ProviderName, SortOrder, Restriction, Entities, Page, PageSize
     * @returns Array of archive list items, where each item represents one row of data (row level data + the requested columns)
     */
    GetArchiveList(request: carriers.Archive_GetArchiveListRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    /**
     * Get a page of data for an archive. The columns returned will be those set as chosen columns, using either the SetChosenColumns service or the corresponding SelectableMDOList.SetSelected.
     * @param guiName - The GUI name of the archive list, used to retrieve the currently configured set of columns (otherwise manipulated using the ArchiveConfiguration service)
     * @param providerName - The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin
     * @param sortOrder - Sort order for the archive. Can be null, which indicates 'no particular order'
     * @param restriction - Archive restrictions. Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.
     * @param entities - Which entities to include. Can be null, which indicates 'include all entities'
     * @param page - Page number, page 0 is the first page. Negative page numbers are interpreted as number of rows to skip.
     * @param pageSize - Page size, which should be kept reasonable (say, no more than 1000 rows at a time)
     * @returns Array of archive list items, where each item represents one row of data (row level data + the requested columns)
     */
    GetArchiveList(guiName: string, providerName: string, sortOrder: carriers.ArchiveOrderByInfo[], restriction: carriers.ArchiveRestrictionInfo[], entities: string[], page: number, pageSize: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    private _GetArchiveListWithContext;
    /**
     * Get a page of data for an archive, with context parameter. The columns returned will be those set as chosen columns, using either the SetChosenColumns service or the corresponding SelectableMDOList.SetSelected.
     * @param request - GuiName, ProviderName, SortOrder, Restriction, Entities, Page, PageSize, Context
     * @returns Array of archive list items, where each item represents one row of data (row level data + the requested columns)
     */
    GetArchiveListWithContext(request: carriers.Archive_GetArchiveListWithContextRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    /**
     * Get a page of data for an archive, with context parameter. The columns returned will be those set as chosen columns, using either the SetChosenColumns service or the corresponding SelectableMDOList.SetSelected.
     * @param guiName - The GUI name of the archive list, used to retrieve the currently configured set of columns (otherwise manipulated using the ArchiveConfiguration service)
     * @param providerName - The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin
     * @param sortOrder - Sort order for the archive. Can be null, which indicates 'no particular order'
     * @param restriction - Archive restrictions. Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.
     * @param entities - Which entities to include. Can be null, which indicates 'include all entities'
     * @param page - Page number, page 0 is the first page. Negative page numbers are interpreted as number of rows to skip.
     * @param pageSize - Page size, which should be kept reasonable (say, no more than 1000 rows at a time)
     * @param context - Context parameter, url-encoded string context parameter for ArchiveProvider constructor
     * @returns Array of archive list items, where each item represents one row of data (row level data + the requested columns)
     */
    GetArchiveListWithContext(guiName: string, providerName: string, sortOrder: carriers.ArchiveOrderByInfo[], restriction: carriers.ArchiveRestrictionInfo[], entities: string[], page: number, pageSize: number, context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    private _GetArchiveListByColumnsWithHeader;
    /**
     * Get a page of results for an archive list, explicitly specifying the restrictions, orderby and chosen columns; as well as a name/value string formatted set of options. The return value includes a header that has various extra information, in addition to the actual rows.
     * @param request - ProviderName, Columns, SortOrder, Restriction, Entities, Page, PageSize, Options
     * @returns Header with optional row count, plus array of archive list items, where each item represents one row of data (row level data + the requested columns)
     */
    GetArchiveListByColumnsWithHeader(request: carriers.Archive_GetArchiveListByColumnsWithHeaderRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListResult>;
    /**
     * Get a page of results for an archive list, explicitly specifying the restrictions, orderby and chosen columns; as well as a name/value string formatted set of options. The return value includes a header that has various extra information, in addition to the actual rows.
     * @param providerName - The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin
     * @param columns - An array of the names of the columns wanted.
     * @param sortOrder - Sort order for the archive. Can be null, which indicates 'no particular order'
     * @param restriction - Archive restrictions. Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.
     * @param entities - Which entities to include. Can be null, which indicates 'include all entities'
     * @param page - Page number, page 0 is the first page. Negative page numbers are interpreted as number of rows to skip.
     * @param pageSize - Page size, which should be kept reasonable (say, no more than 1000 rows at a time)
     * @param options - name=value&amp;... formatted set of options. "rowcount=true" will cause the rowcount to be calculated and populated.
     * @returns Header with optional row count, plus array of archive list items, where each item represents one row of data (row level data + the requested columns)
     */
    GetArchiveListByColumnsWithHeader(providerName: string, columns: string[], sortOrder: carriers.ArchiveOrderByInfo[], restriction: carriers.ArchiveRestrictionInfo[], entities: string[], page: number, pageSize: number, options: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListResult>;
    private _GetProviderNames;
    /**
     * Return list of all archive provider names
     * @returns Array of all archive provider names.
     */
    GetProviderNames(webapi_options?: base.WebApiRequestOptions): Promise<string[]>;
    private _GetArchiveListByColumnsWithHeaderWithContext;
    /**
     * Get a page of results for an archive list, with context parameter, explicitly specifying the restrictions, orderby and chosen columns; as well as a name/value string formatted set of options. The return value includes a header that has various extra information, in addition to the actual rows.
     * @param request - ProviderName, Columns, SortOrder, Restriction, Entities, Page, PageSize, Options, Context
     * @returns Header with optional row count, plus array of archive list items, where each item represents one row of data (row level data + the requested columns)
     */
    GetArchiveListByColumnsWithHeaderWithContext(request: carriers.Archive_GetArchiveListByColumnsWithHeaderWithContextRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListResult>;
    /**
     * Get a page of results for an archive list, with context parameter, explicitly specifying the restrictions, orderby and chosen columns; as well as a name/value string formatted set of options. The return value includes a header that has various extra information, in addition to the actual rows.
     * @param providerName - The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin
     * @param columns - An array of the names of the columns wanted.
     * @param sortOrder - Sort order for the archive. Can be null, which indicates 'no particular order'
     * @param restriction - Archive restrictions. Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.
     * @param entities - Which entities to include. Can be null, which indicates 'include all entities'
     * @param page - Page number, page 0 is the first page. Negative page numbers are interpreted as number of rows to skip.
     * @param pageSize - Page size, which should be kept reasonable (say, no more than 1000 rows at a time)
     * @param options - name=value&amp;... formatted set of options. "rowcount=true" will cause the rowcount to be calculated and populated.
     * @param context - Context parameter, url-encoded string context parameter for ArchiveProvider constructor
     * @returns Header with optional row count, plus array of archive list items, where each item represents one row of data (row level data + the requested columns)
     */
    GetArchiveListByColumnsWithHeaderWithContext(providerName: string, columns: string[], sortOrder: carriers.ArchiveOrderByInfo[], restriction: carriers.ArchiveRestrictionInfo[], entities: string[], page: number, pageSize: number, options: string, context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListResult>;
    private _GetAvailableColumns;
    /**
     * Return list of all columns supported by an archive provider. See also GetArchiveConfiguration.
     * @param request - ProviderName, Context
     * @returns Array of all columns supported by the archive provider.
     */
    GetAvailableColumns(request: carriers.Archive_GetAvailableColumnsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveColumnInfo[]>;
    /**
     * Return list of all columns supported by an archive provider. See also GetArchiveConfiguration.
     * @param providerName - The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin
     * @param context - Optional context parameter, url-encoded string context parameter for ArchiveProvider constructor
     * @returns Array of all columns supported by the archive provider.
     */
    GetAvailableColumns(providerName: string, context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveColumnInfo[]>;
    private _GetAvailableEntities;
    /**
     * Return list of all entities supported by an archive provider. See also GetArchiveConfiguration.
     * @param request - ProviderName, Context
     * @returns Array of all entity types supported by the archive provider. MDOListItem.Name = DisplayName, Tooltip = DisplayTooltip, Type = code name, StyleHint = optional/mandatory, IconHint=DefaultShow
     */
    GetAvailableEntities(request: carriers.Archive_GetAvailableEntitiesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    /**
     * Return list of all entities supported by an archive provider. See also GetArchiveConfiguration.
     * @param providerName - The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin
     * @param context - Optional context parameter, url-encoded string context parameter for ArchiveProvider constructor
     * @returns Array of all entity types supported by the archive provider. MDOListItem.Name = DisplayName, Tooltip = DisplayTooltip, Type = code name, StyleHint = optional/mandatory, IconHint=DefaultShow
     */
    GetAvailableEntities(providerName: string, context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.MDOListItem[]>;
    private _GetArchiveListByColumns2;
    /**
     * Get a page of results for an archive list, explicitly specifying the restrictions as a string, orderby and chosen columns.
     * @param request - ProviderName, Columns, SortOrder, Restrictions, Entities, Page, PageSize
     * @returns Array of archive list items, where each item represents one row of data (row level data + the requested columns)
     */
    GetArchiveListByColumns2(request: carriers.Archive_GetArchiveListByColumns2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    /**
     * Get a page of results for an archive list, explicitly specifying the restrictions as a string, orderby and chosen columns.
     * @param providerName - The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin
     * @param columns - An array of the names of the columns wanted.
     * @param sortOrder - Sort order for the archive as string ('name asc, dept desc'). Can be null, which indicates 'no particular order'
     * @param restrictions - Archive restrictions as string ('category = 1 and business oneOf (1,2,3)'). Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.
     * @param entities - Comma separated list of entities to include. Can be null, which indicates 'include all entities'
     * @param page - Page number, page 0 is the first page. Negative page numbers are interpreted as number of rows to skip.
     * @param pageSize - Page size, which should be kept reasonable (say, no more than 1000 rows at a time)
     * @returns Array of archive list items, where each item represents one row of data (row level data + the requested columns)
     */
    GetArchiveListByColumns2(providerName: string, columns: string, sortOrder: string, restrictions: string, entities: string, page: number, pageSize: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    private _GetArchiveListByColumnsWithContext2;
    /**
     * Get a page of results for an archive list with context parameter, explicitly specifying the restrictions as a string, orderby and chosen columns.
     * @param request - ProviderName, Columns, SortOrder, Restriction, Entities, Page, PageSize, Context
     * @returns Array of archive list items, where each item represents one row of data (row level data + the requested columns)
     */
    GetArchiveListByColumnsWithContext2(request: carriers.Archive_GetArchiveListByColumnsWithContext2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    /**
     * Get a page of results for an archive list with context parameter, explicitly specifying the restrictions as a string, orderby and chosen columns.
     * @param providerName - The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin
     * @param columns - Comma separated names of the columns wanted.
     * @param sortOrder - Comma separated list of columns to sort order for the archive. e.g.: "name asc, dept desc, registeredBy" Can be null, which indicates 'no particular order'
     * @param restriction - Archive restrictions as string. e.g. "name startsWith 'foo' and (dept = 'bar' or dept = 'baz')" Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.
     * @param entities - Comma separated list of entities to include. Can be null, which indicates 'include all entities'
     * @param page - Page number, page 0 is the first page. Negative page numbers are interpreted as number of rows to skip.
     * @param pageSize - Page size, which should be kept reasonable (say, no more than 1000 rows at a time)
     * @param context - Context parameter, url-encoded string context parameter for ArchiveProvider constructor
     * @returns Array of archive list items, where each item represents one row of data (row level data + the requested columns)
     */
    GetArchiveListByColumnsWithContext2(providerName: string, columns: string, sortOrder: string, restriction: string, entities: string, page: number, pageSize: number, context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    private _GetArchiveList2;
    /**
     * Get a page of data for an archive using a restriction string. The columns returned will be those set as chosen columns, using either the SetChosenColumns service or the corresponding SelectableMDOList.SetSelected.
     * @param request - GuiName, ProviderName, SortOrder, Restriction, Entities, Page, PageSize
     * @returns Array of archive list items, where each item represents one row of data (row level data + the requested columns)
     */
    GetArchiveList2(request: carriers.Archive_GetArchiveList2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    /**
     * Get a page of data for an archive using a restriction string. The columns returned will be those set as chosen columns, using either the SetChosenColumns service or the corresponding SelectableMDOList.SetSelected.
     * @param guiName - The GUI name of the archive list, used to retrieve the currently configured set of columns (otherwise manipulated using the ArchiveConfiguration service)
     * @param providerName - The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin
     * @param sortOrder - Sort order for the archive. Can be null, which indicates 'no particular order'
     * @param restriction - Archive restrictions as string. e.g. "name = 'baz' or category oneOf (1,2,3)". Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.
     * @param entities - Comma separated list of entities to include. Can be null, which indicates 'include all entities'
     * @param page - Page number, page 0 is the first page. Negative page numbers are interpreted as number of rows to skip.
     * @param pageSize - Page size, which should be kept reasonable (say, no more than 1000 rows at a time)
     * @returns Array of archive list items, where each item represents one row of data (row level data + the requested columns)
     */
    GetArchiveList2(guiName: string, providerName: string, sortOrder: string, restriction: string, entities: string, page: number, pageSize: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    private _GetArchiveListWithContext2;
    /**
     * Get a page of data for an archive using restrictions as strings, with context parameter. The columns returned will be those set as chosen columns, using either the SetChosenColumns service or the corresponding SelectableMDOList.SetSelected.
     * @param request - GuiName, ProviderName, SortOrder, Restriction, Entities, Page, PageSize, Context
     * @returns Array of archive list items, where each item represents one row of data (row level data + the requested columns)
     */
    GetArchiveListWithContext2(request: carriers.Archive_GetArchiveListWithContext2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    /**
     * Get a page of data for an archive using restrictions as strings, with context parameter. The columns returned will be those set as chosen columns, using either the SetChosenColumns service or the corresponding SelectableMDOList.SetSelected.
     * @param guiName - The GUI name of the archive list, used to retrieve the currently configured set of columns (otherwise manipulated using the ArchiveConfiguration service)
     * @param providerName - The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin
     * @param sortOrder - Sort order for the archive. e.g. "name asc, dept desc" Can be null, which indicates 'no particular order'
     * @param restriction - Archive restrictions as string. e.g. "name gt 'B' or dept = 'baz'" Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.
     * @param entities - Comma separated list of entities to include. Can be null, which indicates 'include all entities'
     * @param page - Page number, page 0 is the first page. Negative page numbers are interpreted as number of rows to skip.
     * @param pageSize - Page size, which should be kept reasonable (say, no more than 1000 rows at a time)
     * @param context - Context parameter, url-encoded string context parameter for ArchiveProvider constructor
     * @returns Array of archive list items, where each item represents one row of data (row level data + the requested columns)
     */
    GetArchiveListWithContext2(guiName: string, providerName: string, sortOrder: string, restriction: string, entities: string, page: number, pageSize: number, context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListItem[]>;
    private _GetArchiveListByColumnsWithHeader2;
    /**
     * Get a page of results for an archive list, explicitly specifying the restrictions as strings, orderby and chosen columns; as well as a name/value string formatted set of options. The return value includes a header that has various extra information, in addition to the actual rows.
     * @param request - ProviderName, Columns, SortOrder, Restriction, Entities, Page, PageSize, Options
     * @returns Header with optional row count, plus array of archive list items, where each item represents one row of data (row level data + the requested columns)
     */
    GetArchiveListByColumnsWithHeader2(request: carriers.Archive_GetArchiveListByColumnsWithHeader2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListResult>;
    /**
     * Get a page of results for an archive list, explicitly specifying the restrictions as strings, orderby and chosen columns; as well as a name/value string formatted set of options. The return value includes a header that has various extra information, in addition to the actual rows.
     * @param providerName - The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin
     * @param columns - Comma separated string of the names of the columns wanted.
     * @param sortOrder - Comma separated string of sort order for the archive. e.g. "name asc, dept desc" Can be null, which indicates 'no particular order'
     * @param restriction - Archive restrictions. e.g. "category = 2 or business oneOf (2,3,4)" Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.
     * @param entities - Comma separated list of entities to include. Can be null, which indicates 'include all entities'
     * @param page - Page number, page 0 is the first page. Negative page numbers are interpreted as number of rows to skip.
     * @param pageSize - Page size, which should be kept reasonable (say, no more than 1000 rows at a time)
     * @param options - name=value&amp;... formatted set of options. "rowcount=true" will cause the rowcount to be calculated and populated.
     * @returns Header with optional row count, plus array of archive list items, where each item represents one row of data (row level data + the requested columns)
     */
    GetArchiveListByColumnsWithHeader2(providerName: string, columns: string, sortOrder: string, restriction: string, entities: string, page: number, pageSize: number, options: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListResult>;
    private _GetArchiveListByColumnsWithHeaderWithContext2;
    /**
     * Get a page of results for an archive list, with context parameter, explicitly specifying the restrictions as strings, orderby and chosen columns; as well as a name/value string formatted set of options. The return value includes a header that has various extra information, in addition to the actual rows.
     * @param request - ProviderName, Columns, SortOrder, Restriction, Entities, Page, PageSize, Options, Context
     * @returns Header with optional row count, plus array of archive list items, where each item represents one row of data (row level data + the requested columns)
     */
    GetArchiveListByColumnsWithHeaderWithContext2(request: carriers.Archive_GetArchiveListByColumnsWithHeaderWithContext2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListResult>;
    /**
     * Get a page of results for an archive list, with context parameter, explicitly specifying the restrictions as strings, orderby and chosen columns; as well as a name/value string formatted set of options. The return value includes a header that has various extra information, in addition to the actual rows.
     * @param providerName - The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin
     * @param columns - Comma separated list of the names of the columns wanted.
     * @param sortOrder - Sort order for the archive. "name asc, dept desc" Can be null, which indicates 'no particular order'
     * @param restriction - Archive restrictions as string. "updated > '2009.1.1' and registeredBy = 2" Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.
     * @param entities - Comma separated list of entities to include. Can be null, which indicates 'include all entities'
     * @param page - Page number, page 0 is the first page. Negative page numbers are interpreted as number of rows to skip.
     * @param pageSize - Page size, which should be kept reasonable (say, no more than 1000 rows at a time)
     * @param options - name=value&amp;... formatted set of options. "rowcount=true" will cause the rowcount to be calculated and populated.
     * @param context - Context parameter, url-encoded string context parameter for ArchiveProvider constructor
     * @returns Header with optional row count, plus array of archive list items, where each item represents one row of data (row level data + the requested columns)
     */
    GetArchiveListByColumnsWithHeaderWithContext2(providerName: string, columns: string, sortOrder: string, restriction: string, entities: string, page: number, pageSize: number, options: string, context: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ArchiveListResult>;
    private _ExportArchive;
    /**
     * Exports the target archive to a downloadable format.
     * @param request - ProviderName, Context, DesiredEntities, Columns, SortOrder, Restrictions, ExportType, SelectedRowIds, EstimatedRowCount
     * @returns
     */
    ExportArchive(request: carriers.Archive_ExportArchiveRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ExportArchiveResult>;
    /**
     * Exports the target archive to a downloadable format.
     * @param providerName - The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin
     * @param context - Context parameter, url-encoded string context parameter for ArchiveProvider constructor
     * @param desiredEntities - Comma separated list of the names of the desired entities.
     * @param columns - Comma separated list of the names of the columns wanted; supports display names
     * @param sortOrder -
     * @param restrictions -
     * @param exportType - To what format the archive should be exported; Excel, etc.
     * @param selectedRowIds -
     * @param estimatedRowCount - The estimated amount of rows to be exported. Used to determine if the operation should be run as a batch task or immediately.
     * @returns
     */
    ExportArchive(providerName: string, context: string, desiredEntities: string[], columns: string[], sortOrder: carriers.ArchiveOrderByInfo[], restrictions: carriers.ArchiveRestrictionInfo[], exportType: string, selectedRowIds: string[], estimatedRowCount: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ExportArchiveResult>;
    private _GetRelatedData;
    /**
     * Get data for fields related to a table record. While this method /can/ be used to fetch plain fields, that is not the intended usage and it does not replace the Entity.Get methods available for that purpose. Nor does it replace the generic DotSyntax/Dynamic archive provider.
     * @param request - Table, RecordId, Fields
     * @returns Array of field => ArchiveColumnData objects
     */
    GetRelatedData(request: carriers.Archive_GetRelatedDataRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RelatedData[]>;
    /**
     * Get data for fields related to a table record. While this method /can/ be used to fetch plain fields, that is not the intended usage and it does not replace the Entity.Get methods available for that purpose. Nor does it replace the generic DotSyntax/Dynamic archive provider.
     * @param table - The root table to get related data for, such as 'ticket' or 'y_car'
     * @param recordId - The primary key of the root table to get related data for
     * @param fields - Names of fields - these need to be valid in the DotSyntax for this table, and can be arbitrarily deep. Examples: 'title', 'created_by.associate_id.person.fullName', 'x_comment'. Do not start with the root table name.
     * @returns Array of field => ArchiveColumnData objects
     */
    GetRelatedData(table: string, recordId: number, fields: string[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.RelatedData[]>;
    private _GetRelatedData2;
    /**
     * Get data for fields related to a table record. While this method /can/ be used to fetch plain fields, that is not the intended usage and it does not replace the Entity.Get methods available for that purpose. Nor does it replace the generic DotSyntax/Dynamic archive provider.
     * @param request - Table, RecordId, Fields
     * @returns Array of field => ArchiveColumnData objects
     */
    GetRelatedData2(request: carriers.Archive_GetRelatedData2Request, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RelatedData[]>;
    /**
     * Get data for fields related to a table record. While this method /can/ be used to fetch plain fields, that is not the intended usage and it does not replace the Entity.Get methods available for that purpose. Nor does it replace the generic DotSyntax/Dynamic archive provider.
     * @param table - The root table to get related data for, such as 'ticket' or 'y_car'
     * @param recordId - The primary key of the root table to get related data for
     * @param fields - Names of fields as a comma-separated list - these need to be valid in the DotSyntax for this table, and can be arbitrarily deep. Example: 'title,created_by.associate_id.person.fullName, x_comment'. Do not start with the root table name.
     * @returns Array of field => ArchiveColumnData objects
     */
    GetRelatedData2(table: string, recordId: number, fields: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.RelatedData[]>;
}
//# sourceMappingURL=ArchiveAgent.d.ts.map