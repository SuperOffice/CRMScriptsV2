"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsconverters.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.Create_ProvidedCredentialArray_From = exports.Create_ProvidedCredential_From = exports.Create_ProjectTypeStatusLinkArrayArray_From = exports.Create_ProjectTypeStatusLinkArray_From = exports.Create_ProjectTypeStatusLink_From = exports.Create_OperationResultArrayArray_From = exports.Create_OperationResultArray_From = exports.Create_OperationResult_From = exports.Create_MetricPairArrayArray_From = exports.Create_MetricPairArray_From = exports.Create_MetricPair_From = exports.Create_LocalizedFieldArrayArray_From = exports.Create_LocalizedFieldArray_From = exports.Create_LocalizedField_From = exports.Create_IntStringDictionary_From = exports.Create_GrantedModuleLicenseArrayArray_From = exports.Create_GrantedModuleLicenseArray_From = exports.Create_GrantedModuleLicense_From = exports.Create_FieldRightArrayArray_From = exports.Create_FieldRightArray_From = exports.Create_FieldRight_From = exports.Create_FieldPropertyDictionary_From = exports.Create_FieldPropertyArrayArray_From = exports.Create_FieldPropertyArray_From = exports.Create_FieldProperty_From = exports.Create_EntityElementArrayArray_From = exports.Create_EntityElementArray_From = exports.Create_EntityElement_From = exports.Create_DuplicateRuleArrayArray_From = exports.Create_DuplicateRuleArray_From = exports.Create_DuplicateRule_From = exports.Create_DuplicateEntryArrayArray_From = exports.Create_DuplicateEntryArray_From = exports.Create_DuplicateEntry_From = exports.Create_CustomCommandArrayArray_From = exports.Create_CustomCommandArray_From = exports.Create_CustomCommand_From = exports.Create_ContactPersonIdArrayArray_From = exports.Create_ContactPersonIdArray_From = exports.Create_ContactPersonId_From = exports.Create_CommandResultArrayArray_From = exports.Create_CommandResultArray_From = exports.Create_CommandResult_From = exports.Create_ColumnDataDictionary_From = exports.Create_CarrierArrayArray_From = exports.Create_CarrierArray_From = exports.Create_Carrier_From = exports.Create_AddressArrayArray_From = exports.Create_AddressArray_From = exports.Create_Address_From = void 0;
exports.Create_TableRightArrayArray_From = exports.Create_TableRightArray_From = exports.Create_TableRight_From = exports.Create_StructuredAddressArrayArray_From = exports.Create_StructuredAddressArray_From = exports.Create_StructuredAddress_From = exports.Create_StringObjectDictionary_From = exports.Create_StringDictionary_From = exports.Create_SoSystemInfoCarrierArrayArray_From = exports.Create_SoSystemInfoCarrierArray_From = exports.Create_SoSystemInfoCarrier_From = exports.Create_SoPrincipalCarrierArrayArray_From = exports.Create_SoPrincipalCarrierArray_From = exports.Create_SoPrincipalCarrier_From = exports.Create_SoExtraInfo_From = exports.Create_SoExceptionInfoParameters_From = exports.Create_SoExceptionInfoArrayArray_From = exports.Create_SoExceptionInfoArray_From = exports.Create_SoExceptionInfo_From = exports.Create_SelectionMemberEditValuesArrayArray_From = exports.Create_SelectionMemberEditValuesArray_From = exports.Create_SelectionMemberEditValues_From = exports.Create_SaleTypeStageLinkArrayArray_From = exports.Create_SaleTypeStageLinkArray_From = exports.Create_SaleTypeStageLink_From = exports.Create_RecurrenceYearPatternArrayArray_From = exports.Create_RecurrenceYearPatternArray_From = exports.Create_RecurrenceYearPattern_From = exports.Create_RecurrenceWeekPatternArrayArray_From = exports.Create_RecurrenceWeekPatternArray_From = exports.Create_RecurrenceWeekPattern_From = exports.Create_RecurrenceMonthPatternArrayArray_From = exports.Create_RecurrenceMonthPatternArray_From = exports.Create_RecurrenceMonthPattern_From = exports.Create_RecurrenceInfoArrayArray_From = exports.Create_RecurrenceInfoArray_From = exports.Create_RecurrenceInfo_From = exports.Create_RecurrenceDayPatternArrayArray_From = exports.Create_RecurrenceDayPatternArray_From = exports.Create_RecurrenceDayPattern_From = exports.Create_RecurrenceDateArrayArray_From = exports.Create_RecurrenceDateArray_From = exports.Create_RecurrenceDate_From = exports.Create_RecipientStatisticsArrayArray_From = exports.Create_RecipientStatisticsArray_From = exports.Create_RecipientStatistics_From = exports.Create_RecipientArrayArray_From = exports.Create_RecipientArray_From = exports.Create_Recipient_From = exports.Create_ProvidedCredentialArrayArray_From = void 0;
exports.Create_QuoteContext_From = exports.Create_QuoteConnectionArrayArray_From = exports.Create_QuoteConnectionArray_From = exports.Create_QuoteConnection_From = exports.Create_QuoteAlternativeRecalculatedArrayArray_From = exports.Create_QuoteAlternativeRecalculatedArray_From = exports.Create_QuoteAlternativeRecalculated_From = exports.Create_QuoteAlternativeArrayArray_From = exports.Create_QuoteAlternativeArray_From = exports.Create_QuoteAlternative_From = exports.Create_QuoteArrayArray_From = exports.Create_QuoteArray_From = exports.Create_Quote_From = exports.Create_ProductExtraDataFieldArrayArray_From = exports.Create_ProductExtraDataFieldArray_From = exports.Create_ProductExtraDataField_From = exports.Create_ProductArrayArray_From = exports.Create_ProductArray_From = exports.Create_Product_From = exports.Create_PriceListArrayArray_From = exports.Create_PriceListArray_From = exports.Create_PriceList_From = exports.Create_PluginUrlResponseArrayArray_From = exports.Create_PluginUrlResponseArray_From = exports.Create_PluginUrlResponse_From = exports.Create_PluginResponseArrayArray_From = exports.Create_PluginResponseArray_From = exports.Create_PluginResponse_From = exports.Create_FieldMetadataDictionary_From = exports.Create_FieldMetadataArrayArray_From = exports.Create_FieldMetadataArray_From = exports.Create_FieldMetadata_From = exports.Create_ChangedDataItemArrayArray_From = exports.Create_ChangedDataItemArray_From = exports.Create_ChangedDataItem_From = exports.Create_ChangedDataArrayArray_From = exports.Create_ChangedDataArray_From = exports.Create_ChangedData_From = exports.Create_ApproveRejectResponseArrayArray_From = exports.Create_ApproveRejectResponseArray_From = exports.Create_ApproveRejectResponse_From = exports.Create_UserCandidateArrayArray_From = exports.Create_UserCandidateArray_From = exports.Create_UserCandidate_From = exports.Create_TicketMessageHeaderArrayArray_From = exports.Create_TicketMessageHeaderArray_From = exports.Create_TicketMessageHeader_From = exports.Create_TicketFormSubmissionArrayArray_From = exports.Create_TicketFormSubmissionArray_From = exports.Create_TicketFormSubmission_From = void 0;
exports.Create_ErpCrmListItemMappingArrayArray_From = exports.Create_ErpCrmListItemMappingArray_From = exports.Create_ErpCrmListItemMapping_From = exports.Create_ErpConnectionListMappingContainerArrayArray_From = exports.Create_ErpConnectionListMappingContainerArray_From = exports.Create_ErpConnectionListMappingContainer_From = exports.Create_ErpConnectionListMappingArrayArray_From = exports.Create_ErpConnectionListMappingArray_From = exports.Create_ErpConnectionListMapping_From = exports.Create_ErpConnectionDataArrayArray_From = exports.Create_ErpConnectionDataArray_From = exports.Create_ErpConnectionData_From = exports.Create_ErpConnectionArrayArray_From = exports.Create_ErpConnectionArray_From = exports.Create_ErpConnection_From = exports.Create_QuoteVersionWorkflowStateArrayArray_From = exports.Create_QuoteVersionWorkflowStateArray_From = exports.Create_QuoteVersionWorkflowState_From = exports.Create_QuoteVersionValidatedArrayArray_From = exports.Create_QuoteVersionValidatedArray_From = exports.Create_QuoteVersionValidated_From = exports.Create_QuoteVersionStatusInformationArrayArray_From = exports.Create_QuoteVersionStatusInformationArray_From = exports.Create_QuoteVersionStatusInformation_From = exports.Create_QuoteVersionButtonStateArrayArray_From = exports.Create_QuoteVersionButtonStateArray_From = exports.Create_QuoteVersionButtonState_From = exports.Create_QuoteVersionAttachmentArrayArray_From = exports.Create_QuoteVersionAttachmentArray_From = exports.Create_QuoteVersionAttachment_From = exports.Create_QuoteVersionArrayArray_From = exports.Create_QuoteVersionArray_From = exports.Create_QuoteVersion_From = exports.Create_QuotePublishDocumentsArrayArray_From = exports.Create_QuotePublishDocumentsArray_From = exports.Create_QuotePublishDocuments_From = exports.Create_QuoteListItemArrayArray_From = exports.Create_QuoteListItemArray_From = exports.Create_QuoteListItem_From = exports.Create_QuoteLineConfigurationArrayArray_From = exports.Create_QuoteLineConfigurationArray_From = exports.Create_QuoteLineConfiguration_From = exports.Create_QuoteLineArrayArray_From = exports.Create_QuoteLineArray_From = exports.Create_QuoteLine_From = exports.Create_QuoteEntityArrayArray_From = exports.Create_QuoteEntityArray_From = exports.Create_QuoteEntity_From = exports.Create_QuoteContextArrayArray_From = exports.Create_QuoteContextArray_From = void 0;
exports.Create_ConsentPersonArray_From = exports.Create_ConsentPerson_From = exports.Create_ConsentInfoArrayArray_From = exports.Create_ConsentInfoArray_From = exports.Create_ConsentInfo_From = exports.Create_PreviewContactArrayArray_From = exports.Create_PreviewContactArray_From = exports.Create_PreviewContact_From = exports.Create_ContactSummaryArrayArray_From = exports.Create_ContactSummaryArray_From = exports.Create_ContactSummary_From = exports.Create_ContactEntityArrayArray_From = exports.Create_ContactEntityArray_From = exports.Create_ContactEntity_From = exports.Create_ContactActivityArrayArray_From = exports.Create_ContactActivityArray_From = exports.Create_ContactActivity_From = exports.Create_ContactArrayArray_From = exports.Create_ContactArray_From = exports.Create_Contact_From = exports.Create_ResourceOverrideArrayArray_From = exports.Create_ResourceOverrideArray_From = exports.Create_ResourceOverride_From = exports.Create_ErpSyncActorSummaryArrayArray_From = exports.Create_ErpSyncActorSummaryArray_From = exports.Create_ErpSyncActorSummary_From = exports.Create_ErpSyncFieldMappingArrayArray_From = exports.Create_ErpSyncFieldMappingArray_From = exports.Create_ErpSyncFieldMapping_From = exports.Create_ErpSyncEngineStatusArrayArray_From = exports.Create_ErpSyncEngineStatusArray_From = exports.Create_ErpSyncEngineStatus_From = exports.Create_ErpSyncEngineArrayArray_From = exports.Create_ErpSyncEngineArray_From = exports.Create_ErpSyncEngine_From = exports.Create_ErpSyncDefaultValueArrayArray_From = exports.Create_ErpSyncDefaultValueArray_From = exports.Create_ErpSyncDefaultValue_From = exports.Create_ErpSyncConnectorEntityArrayArray_From = exports.Create_ErpSyncConnectorEntityArray_From = exports.Create_ErpSyncConnectorEntity_From = exports.Create_ErpSyncConnectionSummaryArrayArray_From = exports.Create_ErpSyncConnectionSummaryArray_From = exports.Create_ErpSyncConnectionSummary_From = exports.Create_ErpSyncActorTypeMappingArrayArray_From = exports.Create_ErpSyncActorTypeMappingArray_From = exports.Create_ErpSyncActorTypeMapping_From = exports.Create_ErpSyncFieldValueArrayArray_From = exports.Create_ErpSyncFieldValueArray_From = exports.Create_ErpSyncFieldValue_From = void 0;
exports.Create_ProjectEventEntity_From = exports.Create_ProjectEventArrayArray_From = exports.Create_ProjectEventArray_From = exports.Create_ProjectEvent_From = exports.Create_ProjectEntityArrayArray_From = exports.Create_ProjectEntityArray_From = exports.Create_ProjectEntity_From = exports.Create_ProjectArrayArray_From = exports.Create_ProjectArray_From = exports.Create_Project_From = exports.Create_PhoneListPreferencesArrayArray_From = exports.Create_PhoneListPreferencesArray_From = exports.Create_PhoneListPreferences_From = exports.Create_PhoneListItemArrayArray_From = exports.Create_PhoneListItemArray_From = exports.Create_PhoneListItem_From = exports.Create_SaleSummaryItemArrayArray_From = exports.Create_SaleSummaryItemArray_From = exports.Create_SaleSummaryItem_From = exports.Create_SaleSummaryArrayArray_From = exports.Create_SaleSummaryArray_From = exports.Create_SaleSummary_From = exports.Create_SaleStakeholderArrayArray_From = exports.Create_SaleStakeholderArray_From = exports.Create_SaleStakeholder_From = exports.Create_SaleEntityArrayArray_From = exports.Create_SaleEntityArray_From = exports.Create_SaleEntity_From = exports.Create_SaleArrayArray_From = exports.Create_SaleArray_From = exports.Create_Sale_From = exports.Create_TemporaryKeyInfoArrayArray_From = exports.Create_TemporaryKeyInfoArray_From = exports.Create_TemporaryKeyInfo_From = exports.Create_ResolvedPersonArrayArray_From = exports.Create_ResolvedPersonArray_From = exports.Create_ResolvedPerson_From = exports.Create_PersonSummaryArrayArray_From = exports.Create_PersonSummaryArray_From = exports.Create_PersonSummary_From = exports.Create_PersonImageArrayArray_From = exports.Create_PersonImageArray_From = exports.Create_PersonImage_From = exports.Create_PersonEntityArrayArray_From = exports.Create_PersonEntityArray_From = exports.Create_PersonEntity_From = exports.Create_PersonArrayArray_From = exports.Create_PersonArray_From = exports.Create_Person_From = exports.Create_ConsentPersonArrayArray_From = void 0;
exports.Create_RedLetterSummaryArrayArray_From = exports.Create_RedLetterSummaryArray_From = exports.Create_RedLetterSummary_From = exports.Create_RedLetterInformationListItemArrayArray_From = exports.Create_RedLetterInformationListItemArray_From = exports.Create_RedLetterInformationListItem_From = exports.Create_RedLetterDetailsArrayArray_From = exports.Create_RedLetterDetailsArray_From = exports.Create_RedLetterDetails_From = exports.Create_ParticipantSyncDataArrayArray_From = exports.Create_ParticipantSyncDataArray_From = exports.Create_ParticipantSyncData_From = exports.Create_ParticipantInfoArrayArray_From = exports.Create_ParticipantInfoArray_From = exports.Create_ParticipantInfo_From = exports.Create_MultiAlarmDataArrayArray_From = exports.Create_MultiAlarmDataArray_From = exports.Create_MultiAlarmData_From = exports.Create_DayInformationListItemArrayArray_From = exports.Create_DayInformationListItemArray_From = exports.Create_DayInformationListItem_From = exports.Create_AppointmentSyncDataArrayArray_From = exports.Create_AppointmentSyncDataArray_From = exports.Create_AppointmentSyncData_From = exports.Create_AppointmentEntityArrayArray_From = exports.Create_AppointmentEntityArray_From = exports.Create_AppointmentEntity_From = exports.Create_AppointmentArrayArray_From = exports.Create_AppointmentArray_From = exports.Create_Appointment_From = exports.Create_AlarmDataArrayArray_From = exports.Create_AlarmDataArray_From = exports.Create_AlarmData_From = exports.Create_AddressSyncDataArrayArray_From = exports.Create_AddressSyncDataArray_From = exports.Create_AddressSyncData_From = exports.Create_ActivitySummaryItemArrayArray_From = exports.Create_ActivitySummaryItemArray_From = exports.Create_ActivitySummaryItem_From = exports.Create_ActivitySummaryArrayArray_From = exports.Create_ActivitySummaryArray_From = exports.Create_ActivitySummary_From = exports.Create_ActivityInformationListItemArrayArray_From = exports.Create_ActivityInformationListItemArray_From = exports.Create_ActivityInformationListItem_From = exports.Create_ProjectMemberArrayArray_From = exports.Create_ProjectMemberArray_From = exports.Create_ProjectMember_From = exports.Create_ProjectEventEntityArrayArray_From = exports.Create_ProjectEventEntityArray_From = void 0;
exports.Create_VersionInfoArray_From = exports.Create_VersionInfo_From = exports.Create_TemplateVariablesParametersArrayArray_From = exports.Create_TemplateVariablesParametersArray_From = exports.Create_TemplateVariablesParameters_From = exports.Create_TemplateInfoArrayArray_From = exports.Create_TemplateInfoArray_From = exports.Create_TemplateInfo_From = exports.Create_SuggestedDocumentEntityArrayArray_From = exports.Create_SuggestedDocumentEntityArray_From = exports.Create_SuggestedDocumentEntity_From = exports.Create_ReturnInfoArrayArray_From = exports.Create_ReturnInfoArray_From = exports.Create_ReturnInfo_From = exports.Create_DocumentPreviewArrayArray_From = exports.Create_DocumentPreviewArray_From = exports.Create_DocumentPreview_From = exports.Create_DocumentEntityArrayArray_From = exports.Create_DocumentEntityArray_From = exports.Create_DocumentEntity_From = exports.Create_DocumentArrayArray_From = exports.Create_DocumentArray_From = exports.Create_Document_From = exports.Create_CommandInfoArrayArray_From = exports.Create_CommandInfoArray_From = exports.Create_CommandInfo_From = exports.Create_CheckoutInfoArrayArray_From = exports.Create_CheckoutInfoArray_From = exports.Create_CheckoutInfo_From = exports.Create_ForeignKeyArrayArray_From = exports.Create_ForeignKeyArray_From = exports.Create_ForeignKey_From = exports.Create_ForeignDeviceArrayArray_From = exports.Create_ForeignDeviceArray_From = exports.Create_ForeignDevice_From = exports.Create_ForeignAppEntityArrayArray_From = exports.Create_ForeignAppEntityArray_From = exports.Create_ForeignAppEntity_From = exports.Create_TaskListItemArrayArray_From = exports.Create_TaskListItemArray_From = exports.Create_TaskListItem_From = exports.Create_SuggestedAppointmentEntityArrayArray_From = exports.Create_SuggestedAppointmentEntityArray_From = exports.Create_SuggestedAppointmentEntity_From = exports.Create_SuggestedAppointmentArrayArray_From = exports.Create_SuggestedAppointmentArray_From = exports.Create_SuggestedAppointment_From = exports.Create_SalesActivityArrayArray_From = exports.Create_SalesActivityArray_From = exports.Create_SalesActivity_From = void 0;
exports.Create_DocumentTemplateEntity_From = exports.Create_DocumentTemplateArrayArray_From = exports.Create_DocumentTemplateArray_From = exports.Create_DocumentTemplate_From = exports.Create_DepartmentArrayArray_From = exports.Create_DepartmentArray_From = exports.Create_Department_From = exports.Create_DeliveryTypeArrayArray_From = exports.Create_DeliveryTypeArray_From = exports.Create_DeliveryType_From = exports.Create_DeliveryTermArrayArray_From = exports.Create_DeliveryTermArray_From = exports.Create_DeliveryTerm_From = exports.Create_CustomerLanguageArrayArray_From = exports.Create_CustomerLanguageArray_From = exports.Create_CustomerLanguage_From = exports.Create_CurrencyEntityArrayArray_From = exports.Create_CurrencyEntityArray_From = exports.Create_CurrencyEntity_From = exports.Create_CurrencyArrayArray_From = exports.Create_CurrencyArray_From = exports.Create_Currency_From = exports.Create_CreditedArrayArray_From = exports.Create_CreditedArray_From = exports.Create_Credited_From = exports.Create_CountryArrayArray_From = exports.Create_CountryArray_From = exports.Create_Country_From = exports.Create_ConsentSourceArrayArray_From = exports.Create_ConsentSourceArray_From = exports.Create_ConsentSource_From = exports.Create_ConsentPurposeArrayArray_From = exports.Create_ConsentPurposeArray_From = exports.Create_ConsentPurpose_From = exports.Create_TaskMenuArrayArray_From = exports.Create_TaskMenuArray_From = exports.Create_TaskMenu_From = exports.Create_CompetitorArrayArray_From = exports.Create_CompetitorArray_From = exports.Create_Competitor_From = exports.Create_CategoryArrayArray_From = exports.Create_CategoryArray_From = exports.Create_Category_From = exports.Create_BusinessArrayArray_From = exports.Create_BusinessArray_From = exports.Create_Business_From = exports.Create_AmountClassEntityArrayArray_From = exports.Create_AmountClassEntityArray_From = exports.Create_AmountClassEntity_From = exports.Create_VersionInfoArrayArray_From = void 0;
exports.Create_ProductCategoryArrayArray_From = exports.Create_ProductCategoryArray_From = exports.Create_ProductCategory_From = exports.Create_PriorityArrayArray_From = exports.Create_PriorityArray_From = exports.Create_Priority_From = exports.Create_PositionArrayArray_From = exports.Create_PositionArray_From = exports.Create_Position_From = exports.Create_PaymentTypeArrayArray_From = exports.Create_PaymentTypeArray_From = exports.Create_PaymentType_From = exports.Create_PaymentTermArrayArray_From = exports.Create_PaymentTermArray_From = exports.Create_PaymentTerm_From = exports.Create_MrMrsArrayArray_From = exports.Create_MrMrsArray_From = exports.Create_MrMrs_From = exports.Create_LocalizedTextArrayArray_From = exports.Create_LocalizedTextArray_From = exports.Create_LocalizedText_From = exports.Create_ListItemEntityArrayArray_From = exports.Create_ListItemEntityArray_From = exports.Create_ListItemEntity_From = exports.Create_ListItemArrayArray_From = exports.Create_ListItemArray_From = exports.Create_ListItem_From = exports.Create_ListEntityArrayArray_From = exports.Create_ListEntityArray_From = exports.Create_ListEntity_From = exports.Create_LinkArrayArray_From = exports.Create_LinkArray_From = exports.Create_Link_From = exports.Create_LegalBaseArrayArray_From = exports.Create_LegalBaseArray_From = exports.Create_LegalBase_From = exports.Create_LanguageInfoArrayArray_From = exports.Create_LanguageInfoArray_From = exports.Create_LanguageInfo_From = exports.Create_HierarchyEntityArrayArray_From = exports.Create_HierarchyEntityArray_From = exports.Create_HierarchyEntity_From = exports.Create_HeadingEntityArrayArray_From = exports.Create_HeadingEntityArray_From = exports.Create_HeadingEntity_From = exports.Create_ExtAppEntityArrayArray_From = exports.Create_ExtAppEntityArray_From = exports.Create_ExtAppEntity_From = exports.Create_DocumentTemplateEntityArrayArray_From = exports.Create_DocumentTemplateEntityArray_From = void 0;
exports.Create_SaleTypeEntityArray_From = exports.Create_SaleTypeEntity_From = exports.Create_SaleTypeArrayArray_From = exports.Create_SaleTypeArray_From = exports.Create_SaleType_From = exports.Create_SaleStageEntityArrayArray_From = exports.Create_SaleStageEntityArray_From = exports.Create_SaleStageEntity_From = exports.Create_ResourceEntityArrayArray_From = exports.Create_ResourceEntityArray_From = exports.Create_ResourceEntity_From = exports.Create_RelationDefinitionEntityArrayArray_From = exports.Create_RelationDefinitionEntityArray_From = exports.Create_RelationDefinitionEntity_From = exports.Create_ReasonStalledArrayArray_From = exports.Create_ReasonStalledArray_From = exports.Create_ReasonStalled_From = exports.Create_ReasonSoldArrayArray_From = exports.Create_ReasonSoldArray_From = exports.Create_ReasonSold_From = exports.Create_QuoteDenyReasonArrayArray_From = exports.Create_QuoteDenyReasonArray_From = exports.Create_QuoteDenyReason_From = exports.Create_QuoteApproveReasonArrayArray_From = exports.Create_QuoteApproveReasonArray_From = exports.Create_QuoteApproveReason_From = exports.Create_ReasonArrayArray_From = exports.Create_ReasonArray_From = exports.Create_Reason_From = exports.Create_RatingArrayArray_From = exports.Create_RatingArray_From = exports.Create_Rating_From = exports.Create_QuickReplyArrayArray_From = exports.Create_QuickReplyArray_From = exports.Create_QuickReply_From = exports.Create_ProjectTypeEntityArrayArray_From = exports.Create_ProjectTypeEntityArray_From = exports.Create_ProjectTypeEntity_From = exports.Create_ProjectTypeArrayArray_From = exports.Create_ProjectTypeArray_From = exports.Create_ProjectType_From = exports.Create_ProjectStatusArrayArray_From = exports.Create_ProjectStatusArray_From = exports.Create_ProjectStatus_From = exports.Create_ProductTypeArrayArray_From = exports.Create_ProductTypeArray_From = exports.Create_ProductType_From = exports.Create_ProductFamilyArrayArray_From = exports.Create_ProductFamilyArray_From = exports.Create_ProductFamily_From = void 0;
exports.Create_ConfigurableScreenDelta_From = exports.Create_SelectableMDOListItemArrayArray_From = exports.Create_SelectableMDOListItemArray_From = exports.Create_SelectableMDOListItem_From = exports.Create_MDOListItemArrayArray_From = exports.Create_MDOListItemArray_From = exports.Create_MDOListItem_From = exports.Create_NavigatorCompanyArrayArray_From = exports.Create_NavigatorCompanyArray_From = exports.Create_NavigatorCompany_From = exports.Create_BlobEntityArrayArray_From = exports.Create_BlobEntityArray_From = exports.Create_BlobEntity_From = exports.Create_WebPanelEntityArrayArray_From = exports.Create_WebPanelEntityArray_From = exports.Create_WebPanelEntity_From = exports.Create_TicketStatusEntityArrayArray_From = exports.Create_TicketStatusEntityArray_From = exports.Create_TicketStatusEntity_From = exports.Create_TicketPriorityEscalationLevelEntityArrayArray_From = exports.Create_TicketPriorityEscalationLevelEntityArray_From = exports.Create_TicketPriorityEscalationLevelEntity_From = exports.Create_TicketPriorityEntityArrayArray_From = exports.Create_TicketPriorityEntityArray_From = exports.Create_TicketPriorityEntity_From = exports.Create_TicketPriorityArrayArray_From = exports.Create_TicketPriorityArray_From = exports.Create_TicketPriority_From = exports.Create_TicketCategoryMembershipEntityArrayArray_From = exports.Create_TicketCategoryMembershipEntityArray_From = exports.Create_TicketCategoryMembershipEntity_From = exports.Create_TicketCategoryEntityArrayArray_From = exports.Create_TicketCategoryEntityArray_From = exports.Create_TicketCategoryEntity_From = exports.Create_TicketCategoryArrayArray_From = exports.Create_TicketCategoryArray_From = exports.Create_TicketCategory_From = exports.Create_TaskArrayArray_From = exports.Create_TaskArray_From = exports.Create_Task_From = exports.Create_TagArrayArray_From = exports.Create_TagArray_From = exports.Create_Tag_From = exports.Create_SourceArrayArray_From = exports.Create_SourceArray_From = exports.Create_Source_From = exports.Create_SelectionCategoryArrayArray_From = exports.Create_SelectionCategoryArray_From = exports.Create_SelectionCategory_From = exports.Create_SaleTypeEntityArrayArray_From = void 0;
exports.Create_WebAppUsageArrayArray_From = exports.Create_WebAppUsageArray_From = exports.Create_WebAppUsage_From = exports.Create_InstallationArrayArray_From = exports.Create_InstallationArray_From = exports.Create_Installation_From = exports.Create_UsageStatsArrayArray_From = exports.Create_UsageStatsArray_From = exports.Create_UsageStats_From = exports.Create_LoggingArrayArray_From = exports.Create_LoggingArray_From = exports.Create_Logging_From = exports.Create_EntityCountsArrayArray_From = exports.Create_EntityCountsArray_From = exports.Create_EntityCounts_From = exports.Create_CacheArrayArray_From = exports.Create_CacheArray_From = exports.Create_Cache_From = exports.Create_AssociateArrayArray_From = exports.Create_AssociateArray_From = exports.Create_Associate_From = exports.Create_UiEventArrayArray_From = exports.Create_UiEventArray_From = exports.Create_UiEvent_From = exports.Create_HistoryRequestArrayArray_From = exports.Create_HistoryRequestArray_From = exports.Create_HistoryRequest_From = exports.Create_HistoryArrayArray_From = exports.Create_HistoryArray_From = exports.Create_History_From = exports.Create_LiveUiConfigArrayArray_From = exports.Create_LiveUiConfigArray_From = exports.Create_LiveUiConfig_From = exports.Create_WindowPosSizeArrayArray_From = exports.Create_WindowPosSizeArray_From = exports.Create_WindowPosSize_From = exports.Create_SystemEventEntityArrayArray_From = exports.Create_SystemEventEntityArray_From = exports.Create_SystemEventEntity_From = exports.Create_DiaryViewEntityArrayArray_From = exports.Create_DiaryViewEntityArray_From = exports.Create_DiaryViewEntity_From = exports.Create_DeltaQueryArrayArray_From = exports.Create_DeltaQueryArray_From = exports.Create_DeltaQuery_From = exports.Create_ConfigurationArrayArray_From = exports.Create_ConfigurationArray_From = exports.Create_Configuration_From = exports.Create_ConfigurableScreenDeltaArrayArray_From = exports.Create_ConfigurableScreenDeltaArray_From = void 0;
exports.Create_EMailCustomHeaderArray_From = exports.Create_EMailCustomHeader_From = exports.Create_EMailConnectionInfoExtendedArrayArray_From = exports.Create_EMailConnectionInfoExtendedArray_From = exports.Create_EMailConnectionInfoExtended_From = exports.Create_EMailConnectionInfoArrayArray_From = exports.Create_EMailConnectionInfoArray_From = exports.Create_EMailConnectionInfo_From = exports.Create_EMailAttachmentArrayArray_From = exports.Create_EMailAttachmentArray_From = exports.Create_EMailAttachment_From = exports.Create_EMailAppointmentArrayArray_From = exports.Create_EMailAppointmentArray_From = exports.Create_EMailAppointment_From = exports.Create_EMailAddressArrayArray_From = exports.Create_EMailAddressArray_From = exports.Create_EMailAddress_From = exports.Create_EMailAccountArrayArray_From = exports.Create_EMailAccountArray_From = exports.Create_EMailAccount_From = exports.Create_ContactOrPersonFromEmailArrayArray_From = exports.Create_ContactOrPersonFromEmailArray_From = exports.Create_ContactOrPersonFromEmail_From = exports.Create_TypicalSearchesArrayArray_From = exports.Create_TypicalSearchesArray_From = exports.Create_TypicalSearches_From = exports.Create_TypicalSearchArrayArray_From = exports.Create_TypicalSearchArray_From = exports.Create_TypicalSearch_From = exports.Create_SelectionSummaryItemArrayArray_From = exports.Create_SelectionSummaryItemArray_From = exports.Create_SelectionSummaryItem_From = exports.Create_SelectionForFindArrayArray_From = exports.Create_SelectionForFindArray_From = exports.Create_SelectionForFind_From = exports.Create_SelectionEntityArrayArray_From = exports.Create_SelectionEntityArray_From = exports.Create_SelectionEntity_From = exports.Create_MailMergeTaskArrayArray_From = exports.Create_MailMergeTaskArray_From = exports.Create_MailMergeTask_From = exports.Create_MailMergeSettingsArrayArray_From = exports.Create_MailMergeSettingsArray_From = exports.Create_MailMergeSettings_From = exports.Create_PreviewsArrayArray_From = exports.Create_PreviewsArray_From = exports.Create_Previews_From = exports.Create_TooltipsArrayArray_From = exports.Create_TooltipsArray_From = exports.Create_Tooltips_From = void 0;
exports.Create_FieldInfoDateTime_From = exports.Create_FieldInfoDateArrayArray_From = exports.Create_FieldInfoDateArray_From = exports.Create_FieldInfoDate_From = exports.Create_FieldInfoBoolArrayArray_From = exports.Create_FieldInfoBoolArray_From = exports.Create_FieldInfoBool_From = exports.Create_FieldInfoBlobArrayArray_From = exports.Create_FieldInfoBlobArray_From = exports.Create_FieldInfoBlob_From = exports.Create_FieldInfoAttachmentArrayArray_From = exports.Create_FieldInfoAttachmentArray_From = exports.Create_FieldInfoAttachment_From = exports.Create_FieldInfoBaseArrayArray_From = exports.Create_FieldInfoBaseArray_From = exports.Create_FieldInfoBase_From = exports.Create_VisibleForArrayArray_From = exports.Create_VisibleForArray_From = exports.Create_VisibleFor_From = exports.Create_SentryArrayArray_From = exports.Create_SentryArray_From = exports.Create_Sentry_From = exports.Create_WebhookResultArrayArray_From = exports.Create_WebhookResultArray_From = exports.Create_WebhookResult_From = exports.Create_WebhookArrayArray_From = exports.Create_WebhookArray_From = exports.Create_Webhook_From = exports.Create_FindResultsArrayArray_From = exports.Create_FindResultsArray_From = exports.Create_FindResults_From = exports.Create_CriteriaInformationArrayArray_From = exports.Create_CriteriaInformationArray_From = exports.Create_CriteriaInformation_From = exports.Create_SyncUserAccountArrayArray_From = exports.Create_SyncUserAccountArray_From = exports.Create_SyncUserAccount_From = exports.Create_EMailSOInfoArrayArray_From = exports.Create_EMailSOInfoArray_From = exports.Create_EMailSOInfo_From = exports.Create_EMailFolderArrayArray_From = exports.Create_EMailFolderArray_From = exports.Create_EMailFolder_From = exports.Create_EMailEnvelopeArrayArray_From = exports.Create_EMailEnvelopeArray_From = exports.Create_EMailEnvelope_From = exports.Create_EMailEntityArrayArray_From = exports.Create_EMailEntityArray_From = exports.Create_EMailEntity_From = exports.Create_EMailCustomHeaderArrayArray_From = void 0;
exports.Create_StatusMonitorPeriodsArrayArray_From = exports.Create_StatusMonitorPeriodsArray_From = exports.Create_StatusMonitorPeriods_From = exports.Create_StatusMonitorArrayArray_From = exports.Create_StatusMonitorArray_From = exports.Create_StatusMonitor_From = exports.Create_SaintConfigurationArrayArray_From = exports.Create_SaintConfigurationArray_From = exports.Create_SaintConfiguration_From = exports.Create_ReportLabelLayoutEntityArrayArray_From = exports.Create_ReportLabelLayoutEntityArray_From = exports.Create_ReportLabelLayoutEntity_From = exports.Create_ReportEntityArrayArray_From = exports.Create_ReportEntityArray_From = exports.Create_ReportEntity_From = exports.Create_UserDefinedFieldInfoArrayArray_From = exports.Create_UserDefinedFieldInfoArray_From = exports.Create_UserDefinedFieldInfo_From = exports.Create_FieldInfoTimeSpanArrayArray_From = exports.Create_FieldInfoTimeSpanArray_From = exports.Create_FieldInfoTimeSpan_From = exports.Create_FieldInfoTimeArrayArray_From = exports.Create_FieldInfoTimeArray_From = exports.Create_FieldInfoTime_From = exports.Create_FieldInfoShortTextArrayArray_From = exports.Create_FieldInfoShortTextArray_From = exports.Create_FieldInfoShortText_From = exports.Create_FieldInfoRelationArrayArray_From = exports.Create_FieldInfoRelationArray_From = exports.Create_FieldInfoRelation_From = exports.Create_FieldInfoLongTextArrayArray_From = exports.Create_FieldInfoLongTextArray_From = exports.Create_FieldInfoLongText_From = exports.Create_FieldInfoListTextArrayArray_From = exports.Create_FieldInfoListTextArray_From = exports.Create_FieldInfoListText_From = exports.Create_FieldInfoMdoListArrayArray_From = exports.Create_FieldInfoMdoListArray_From = exports.Create_FieldInfoMdoList_From = exports.Create_FieldInfoIntArrayArray_From = exports.Create_FieldInfoIntArray_From = exports.Create_FieldInfoInt_From = exports.Create_FieldInfoDynamicLinkArrayArray_From = exports.Create_FieldInfoDynamicLinkArray_From = exports.Create_FieldInfoDynamicLink_From = exports.Create_FieldInfoDecimalArrayArray_From = exports.Create_FieldInfoDecimalArray_From = exports.Create_FieldInfoDecimal_From = exports.Create_FieldInfoDateTimeArrayArray_From = exports.Create_FieldInfoDateTimeArray_From = void 0;
exports.Create_PreferenceArray_From = exports.Create_Preference_From = exports.Create_AudienceLayoutEntityArrayArray_From = exports.Create_AudienceLayoutEntityArray_From = exports.Create_AudienceLayoutEntity_From = exports.Create_AudienceConfigParameterArrayArray_From = exports.Create_AudienceConfigParameterArray_From = exports.Create_AudienceConfigParameter_From = exports.Create_RelatedDataArrayArray_From = exports.Create_RelatedDataArray_From = exports.Create_RelatedData_From = exports.Create_ExportArchiveResultArrayArray_From = exports.Create_ExportArchiveResultArray_From = exports.Create_ExportArchiveResult_From = exports.Create_ArchiveRestrictionInfoArrayArray_From = exports.Create_ArchiveRestrictionInfoArray_From = exports.Create_ArchiveRestrictionInfo_From = exports.Create_ArchiveRestrictionGroupArrayArray_From = exports.Create_ArchiveRestrictionGroupArray_From = exports.Create_ArchiveRestrictionGroup_From = exports.Create_ArchiveOrderByInfoArrayArray_From = exports.Create_ArchiveOrderByInfoArray_From = exports.Create_ArchiveOrderByInfo_From = exports.Create_ArchiveListResultArrayArray_From = exports.Create_ArchiveListResultArray_From = exports.Create_ArchiveListResult_From = exports.Create_ArchiveListItemArrayArray_From = exports.Create_ArchiveListItemArray_From = exports.Create_ArchiveListItem_From = exports.Create_ArchiveConfigurationArrayArray_From = exports.Create_ArchiveConfigurationArray_From = exports.Create_ArchiveConfiguration_From = exports.Create_ArchiveColumnInfoArrayArray_From = exports.Create_ArchiveColumnInfoArray_From = exports.Create_ArchiveColumnInfo_From = exports.Create_ArchiveColumnDataArrayArray_From = exports.Create_ArchiveColumnDataArray_From = exports.Create_ArchiveColumnData_From = exports.Create_ActivityFilterArrayArray_From = exports.Create_ActivityFilterArray_From = exports.Create_ActivityFilter_From = exports.Create_ContactRelationEntityArrayArray_From = exports.Create_ContactRelationEntityArray_From = exports.Create_ContactRelationEntity_From = exports.Create_BatchTaskInfoArrayArray_From = exports.Create_BatchTaskInfoArray_From = exports.Create_BatchTaskInfo_From = exports.Create_BatchArrayArray_From = exports.Create_BatchArray_From = exports.Create_Batch_From = void 0;
exports.Create_CredentialsGroup_From = exports.Create_CredentialArrayArray_From = exports.Create_CredentialArray_From = exports.Create_Credential_From = exports.Create_AccessGatewayInfoArrayArray_From = exports.Create_AccessGatewayInfoArray_From = exports.Create_AccessGatewayInfo_From = exports.Create_SignedPublicKeyArrayArray_From = exports.Create_SignedPublicKeyArray_From = exports.Create_SignedPublicKey_From = exports.Create_ModuleLicenseLinkArrayArray_From = exports.Create_ModuleLicenseLinkArray_From = exports.Create_ModuleLicenseLink_From = exports.Create_ModuleLicenseArrayArray_From = exports.Create_ModuleLicenseArray_From = exports.Create_ModuleLicense_From = exports.Create_LicenseResultArrayArray_From = exports.Create_LicenseResultArray_From = exports.Create_LicenseResult_From = exports.Create_LicenseOwnerArrayArray_From = exports.Create_LicenseOwnerArray_From = exports.Create_LicenseOwner_From = exports.Create_LicenseInfoArrayArray_From = exports.Create_LicenseInfoArray_From = exports.Create_LicenseInfo_From = exports.Create_LicenseArrayArray_From = exports.Create_LicenseArray_From = exports.Create_License_From = exports.Create_ExtendedModuleLicenseArrayArray_From = exports.Create_ExtendedModuleLicenseArray_From = exports.Create_ExtendedModuleLicense_From = exports.Create_ExtendedLicenseInfoArrayArray_From = exports.Create_ExtendedLicenseInfoArray_From = exports.Create_ExtendedLicenseInfo_From = exports.Create_CheckLicenseStatusResultArrayArray_From = exports.Create_CheckLicenseStatusResultArray_From = exports.Create_CheckLicenseStatusResult_From = exports.Create_TabOrderArrayArray_From = exports.Create_TabOrderArray_From = exports.Create_TabOrder_From = exports.Create_PreferenceSpecArrayArray_From = exports.Create_PreferenceSpecArray_From = exports.Create_PreferenceSpec_From = exports.Create_PreferenceDescriptionLineArrayArray_From = exports.Create_PreferenceDescriptionLineArray_From = exports.Create_PreferenceDescriptionLine_From = exports.Create_PreferenceDescriptionArrayArray_From = exports.Create_PreferenceDescriptionArray_From = exports.Create_PreferenceDescription_From = exports.Create_PreferenceArrayArray_From = void 0;
exports.Create_UserInfoArrayArray_From = exports.Create_UserInfoArray_From = exports.Create_UserInfo_From = exports.Create_UserGroupArrayArray_From = exports.Create_UserGroupArray_From = exports.Create_UserGroup_From = exports.Create_UserArrayArray_From = exports.Create_UserArray_From = exports.Create_User_From = exports.Create_UntrustedCredentialsArrayArray_From = exports.Create_UntrustedCredentialsArray_From = exports.Create_UntrustedCredentials_From = exports.Create_TokenManagementInfoArrayArray_From = exports.Create_TokenManagementInfoArray_From = exports.Create_TokenManagementInfo_From = exports.Create_ServiceAuthArrayArray_From = exports.Create_ServiceAuthArray_From = exports.Create_ServiceAuth_From = exports.Create_RoleEntityArrayArray_From = exports.Create_RoleEntityArray_From = exports.Create_RoleEntity_From = exports.Create_RoleArrayArray_From = exports.Create_RoleArray_From = exports.Create_Role_From = exports.Create_ResolvedUserArrayArray_From = exports.Create_ResolvedUserArray_From = exports.Create_ResolvedUser_From = exports.Create_RelationToOwnerArrayArray_From = exports.Create_RelationToOwnerArray_From = exports.Create_RelationToOwner_From = exports.Create_EntityNameArrayArray_From = exports.Create_EntityNameArray_From = exports.Create_EntityName_From = exports.Create_DataRightsArrayArray_From = exports.Create_DataRightsArray_From = exports.Create_DataRights_From = exports.Create_DataRightArrayArray_From = exports.Create_DataRightArray_From = exports.Create_DataRight_From = exports.Create_CredentialUserArrayArray_From = exports.Create_CredentialUserArray_From = exports.Create_CredentialUser_From = exports.Create_CredentialTypeArrayArray_From = exports.Create_CredentialTypeArray_From = exports.Create_CredentialType_From = exports.Create_CredentialsGroupUsersArrayArray_From = exports.Create_CredentialsGroupUsersArray_From = exports.Create_CredentialsGroupUsers_From = exports.Create_CredentialsGroupArrayArray_From = exports.Create_CredentialsGroupArray_From = void 0;
exports.Create_RefCountEntity_From = exports.Create_FreeTextArrayArray_From = exports.Create_FreeTextArray_From = exports.Create_FreeText_From = exports.Create_ImportErpDataArrayArray_From = exports.Create_ImportErpDataArray_From = exports.Create_ImportErpData_From = exports.Create_ImportColumnInfoArrayArray_From = exports.Create_ImportColumnInfoArray_From = exports.Create_ImportColumnInfo_From = exports.Create_ImportLineArrayArray_From = exports.Create_ImportLineArray_From = exports.Create_ImportLine_From = exports.Create_ProviderInfoArrayArray_From = exports.Create_ProviderInfoArray_From = exports.Create_ProviderInfo_From = exports.Create_OutgoingMessageArrayArray_From = exports.Create_OutgoingMessageArray_From = exports.Create_OutgoingMessage_From = exports.Create_MessageDeliveryStatusArrayArray_From = exports.Create_MessageDeliveryStatusArray_From = exports.Create_MessageDeliveryStatus_From = exports.Create_IncomingMessageArrayArray_From = exports.Create_IncomingMessageArray_From = exports.Create_IncomingMessage_From = exports.Create_TimeZoneRuleDictionary_From = exports.Create_TimeZoneRuleArrayArray_From = exports.Create_TimeZoneRuleArray_From = exports.Create_TimeZoneRule_From = exports.Create_TimeZoneDataArrayArray_From = exports.Create_TimeZoneDataArray_From = exports.Create_TimeZoneData_From = exports.Create_RemoteTimeZoneMethodsArrayArray_From = exports.Create_RemoteTimeZoneMethodsArray_From = exports.Create_RemoteTimeZoneMethods_From = exports.Create_PreferredTimeZoneArrayArray_From = exports.Create_PreferredTimeZoneArray_From = exports.Create_PreferredTimeZone_From = exports.Create_SatelliteArrayArray_From = exports.Create_SatelliteArray_From = exports.Create_Satellite_From = exports.Create_AreaArrayArray_From = exports.Create_AreaArray_From = exports.Create_Area_From = exports.Create_UserValidationResultArrayArray_From = exports.Create_UserValidationResultArray_From = exports.Create_UserValidationResult_From = exports.Create_UserPresenceStatusArrayArray_From = exports.Create_UserPresenceStatusArray_From = exports.Create_UserPresenceStatus_From = void 0;
exports.Create_SmsConfigArrayArray_From = exports.Create_SmsConfigArray_From = exports.Create_SmsConfig_From = exports.Create_ReplyTemplateParsedArrayArray_From = exports.Create_ReplyTemplateParsedArray_From = exports.Create_ReplyTemplateParsed_From = exports.Create_ReplyTemplateArrayArray_From = exports.Create_ReplyTemplateArray_From = exports.Create_ReplyTemplate_From = exports.Create_PreviewReplyTemplateArrayArray_From = exports.Create_PreviewReplyTemplateArray_From = exports.Create_PreviewReplyTemplate_From = exports.Create_PreviewQuickReplyArrayArray_From = exports.Create_PreviewQuickReplyArray_From = exports.Create_PreviewQuickReply_From = exports.Create_PreviewFaqEntryArrayArray_From = exports.Create_PreviewFaqEntryArray_From = exports.Create_PreviewFaqEntry_From = exports.Create_MailboxEntityArrayArray_From = exports.Create_MailboxEntityArray_From = exports.Create_MailboxEntity_From = exports.Create_MailboxArrayArray_From = exports.Create_MailboxArray_From = exports.Create_Mailbox_From = exports.Create_KbCategoryArrayArray_From = exports.Create_KbCategoryArray_From = exports.Create_KbCategory_From = exports.Create_EventDataArrayArray_From = exports.Create_EventDataArray_From = exports.Create_EventData_From = exports.Create_CustomerServiceStartupArrayArray_From = exports.Create_CustomerServiceStartupArray_From = exports.Create_CustomerServiceStartup_From = exports.Create_CustomerServiceConfigArrayArray_From = exports.Create_CustomerServiceConfigArray_From = exports.Create_CustomerServiceConfig_From = exports.Create_CustomerCenterConfigArrayArray_From = exports.Create_CustomerCenterConfigArray_From = exports.Create_CustomerCenterConfig_From = exports.Create_CsSessionKeyArrayArray_From = exports.Create_CsSessionKeyArray_From = exports.Create_CsSessionKey_From = exports.Create_CsFeatureToggleArrayArray_From = exports.Create_CsFeatureToggleArray_From = exports.Create_CsFeatureToggle_From = exports.Create_ChatSessionArrayArray_From = exports.Create_ChatSessionArray_From = exports.Create_ChatSession_From = exports.Create_RefCountEntityArrayArray_From = exports.Create_RefCountEntityArray_From = void 0;
exports.Create_DashCollectionArray_From = exports.Create_DashCollection_From = exports.Create_DashArrayArray_From = exports.Create_DashArray_From = exports.Create_Dash_From = exports.Create_TileDataArrayArray_From = exports.Create_TileDataArray_From = exports.Create_TileData_From = exports.Create_DashboardTileOptionArrayArray_From = exports.Create_DashboardTileOptionArray_From = exports.Create_DashboardTileOption_From = exports.Create_DashboardTileArrayArray_From = exports.Create_DashboardTileArray_From = exports.Create_DashboardTile_From = exports.Create_DashboardArrayArray_From = exports.Create_DashboardArray_From = exports.Create_Dashboard_From = exports.Create_PocketStartupDataArrayArray_From = exports.Create_PocketStartupDataArray_From = exports.Create_PocketStartupData_From = exports.Create_PocketDeviceInfoArrayArray_From = exports.Create_PocketDeviceInfoArray_From = exports.Create_PocketDeviceInfo_From = exports.Create_PocketNotificationMessageArrayArray_From = exports.Create_PocketNotificationMessageArray_From = exports.Create_PocketNotificationMessage_From = exports.Create_NotificationEventArrayArray_From = exports.Create_NotificationEventArray_From = exports.Create_NotificationEvent_From = exports.Create_CallerIDCollectionArrayArray_From = exports.Create_CallerIDCollectionArray_From = exports.Create_CallerIDCollection_From = exports.Create_CallerIDArrayArray_From = exports.Create_CallerIDArray_From = exports.Create_CallerID_From = exports.Create_TicketInfoArrayArray_From = exports.Create_TicketInfoArray_From = exports.Create_TicketInfo_From = exports.Create_SystemTemplateSettingsArrayArray_From = exports.Create_SystemTemplateSettingsArray_From = exports.Create_SystemTemplateSettings_From = exports.Create_StatisticsDataValueArrayArray_From = exports.Create_StatisticsDataValueArray_From = exports.Create_StatisticsDataValue_From = exports.Create_StatisticsDataSetArrayArray_From = exports.Create_StatisticsDataSetArray_From = exports.Create_StatisticsDataSet_From = exports.Create_SmtpTestResultArrayArray_From = exports.Create_SmtpTestResultArray_From = exports.Create_SmtpTestResult_From = void 0;
exports.Create_OperationInfo_From = exports.Create_FieldValueInfoArrayArray_From = exports.Create_FieldValueInfoArray_From = exports.Create_FieldValueInfo_From = exports.Create_ControlInfoArrayArray_From = exports.Create_ControlInfoArray_From = exports.Create_ControlInfo_From = exports.Create_DictionaryStepInformationArrayArray_From = exports.Create_DictionaryStepInformationArray_From = exports.Create_DictionaryStepInformation_From = exports.Create_FavouriteArrayArray_From = exports.Create_FavouriteArray_From = exports.Create_Favourite_From = exports.Create_TargetRevisionHistoryArrayArray_From = exports.Create_TargetRevisionHistoryArray_From = exports.Create_TargetRevisionHistory_From = exports.Create_TargetRevisionArrayArray_From = exports.Create_TargetRevisionArray_From = exports.Create_TargetRevision_From = exports.Create_TargetGroupArrayArray_From = exports.Create_TargetGroupArray_From = exports.Create_TargetGroup_From = exports.Create_TargetDimensionArrayArray_From = exports.Create_TargetDimensionArray_From = exports.Create_TargetDimension_From = exports.Create_TargetChangeArrayArray_From = exports.Create_TargetChangeArray_From = exports.Create_TargetChange_From = exports.Create_TargetAssignmentArrayArray_From = exports.Create_TargetAssignmentArray_From = exports.Create_TargetAssignment_From = exports.Create_PreviewDashTileArrayArray_From = exports.Create_PreviewDashTileArray_From = exports.Create_PreviewDashTile_From = exports.Create_PreviewDashArrayArray_From = exports.Create_PreviewDashArray_From = exports.Create_PreviewDash_From = exports.Create_DashTileHtmlArrayArray_From = exports.Create_DashTileHtmlArray_From = exports.Create_DashTileHtml_From = exports.Create_DashTileDefinitionArrayArray_From = exports.Create_DashTileDefinitionArray_From = exports.Create_DashTileDefinition_From = exports.Create_DashTileArrayArray_From = exports.Create_DashTileArray_From = exports.Create_DashTile_From = exports.Create_DashThemeArrayArray_From = exports.Create_DashThemeArray_From = exports.Create_DashTheme_From = exports.Create_DashCollectionArrayArray_From = void 0;
exports.Create_TicketEntityArrayArray_From = exports.Create_TicketEntityArray_From = exports.Create_TicketEntity_From = exports.Create_TicketBatchReplyDataArrayArray_From = exports.Create_TicketBatchReplyDataArray_From = exports.Create_TicketBatchReplyData_From = exports.Create_TicketArrayArray_From = exports.Create_TicketArray_From = exports.Create_Ticket_From = exports.Create_AttachmentValidationResultArrayArray_From = exports.Create_AttachmentValidationResultArray_From = exports.Create_AttachmentValidationResult_From = exports.Create_AttachmentEntityArrayArray_From = exports.Create_AttachmentEntityArray_From = exports.Create_AttachmentEntity_From = exports.Create_TriggerScriptEntityArrayArray_From = exports.Create_TriggerScriptEntityArray_From = exports.Create_TriggerScriptEntity_From = exports.Create_CRMScriptResultArrayArray_From = exports.Create_CRMScriptResultArray_From = exports.Create_CRMScriptResult_From = exports.Create_CRMScriptEntityArrayArray_From = exports.Create_CRMScriptEntityArray_From = exports.Create_CRMScriptEntity_From = exports.Create_ScriptArrayArray_From = exports.Create_ScriptArray_From = exports.Create_Script_From = exports.Create_ShipmentMessageEntityArrayArray_From = exports.Create_ShipmentMessageEntityArray_From = exports.Create_ShipmentMessageEntity_From = exports.Create_ShipmentMessageBlockEntityArrayArray_From = exports.Create_ShipmentMessageBlockEntityArray_From = exports.Create_ShipmentMessageBlockEntity_From = exports.Create_PreviewMailingHeaderArrayArray_From = exports.Create_PreviewMailingHeaderArray_From = exports.Create_PreviewMailingHeader_From = exports.Create_PreviewMailingArrayArray_From = exports.Create_PreviewMailingArray_From = exports.Create_PreviewMailing_From = exports.Create_MailingStatisticsArrayArray_From = exports.Create_MailingStatisticsArray_From = exports.Create_MailingStatistics_From = exports.Create_FormSubmissionEntityArrayArray_From = exports.Create_FormSubmissionEntityArray_From = exports.Create_FormSubmissionEntity_From = exports.Create_FormEntityArrayArray_From = exports.Create_FormEntityArray_From = exports.Create_FormEntity_From = exports.Create_OperationInfoArrayArray_From = exports.Create_OperationInfoArray_From = void 0;
exports.Create_CategorizationStatusResponseArray_From = exports.Create_CategorizationStatusResponse_From = exports.Create_CategorizationModelDetailsArrayArray_From = exports.Create_CategorizationModelDetailsArray_From = exports.Create_CategorizationModelDetails_From = exports.Create_ChatWidgetSettingsArrayArray_From = exports.Create_ChatWidgetSettingsArray_From = exports.Create_ChatWidgetSettings_From = exports.Create_ChatTopicEntityArrayArray_From = exports.Create_ChatTopicEntityArray_From = exports.Create_ChatTopicEntity_From = exports.Create_ChatTopicAgentArrayArray_From = exports.Create_ChatTopicAgentArray_From = exports.Create_ChatTopicAgent_From = exports.Create_ChatSummaryItemArrayArray_From = exports.Create_ChatSummaryItemArray_From = exports.Create_ChatSummaryItem_From = exports.Create_ChatSessionEntityArrayArray_From = exports.Create_ChatSessionEntityArray_From = exports.Create_ChatSessionEntity_From = exports.Create_ChatPresenceArrayArray_From = exports.Create_ChatPresenceArray_From = exports.Create_ChatPresence_From = exports.Create_ChatOpeningHoursArrayArray_From = exports.Create_ChatOpeningHoursArray_From = exports.Create_ChatOpeningHours_From = exports.Create_ChatMessageArrayArray_From = exports.Create_ChatMessageArray_From = exports.Create_ChatMessage_From = exports.Create_ChatBotSettingsArrayArray_From = exports.Create_ChatBotSettingsArray_From = exports.Create_ChatBotSettings_From = exports.Create_MassOperationResultArrayArray_From = exports.Create_MassOperationResultArray_From = exports.Create_MassOperationResult_From = exports.Create_UpsertRowStatusArrayArray_From = exports.Create_UpsertRowStatusArray_From = exports.Create_UpsertRowStatus_From = exports.Create_TableRecordArrayArray_From = exports.Create_TableRecordArray_From = exports.Create_TableRecord_From = exports.Create_TicketSummaryItemArrayArray_From = exports.Create_TicketSummaryItemArray_From = exports.Create_TicketSummaryItem_From = exports.Create_TicketMessageEntityArrayArray_From = exports.Create_TicketMessageEntityArray_From = exports.Create_TicketMessageEntity_From = exports.Create_TicketMessageArrayArray_From = exports.Create_TicketMessageArray_From = exports.Create_TicketMessage_From = void 0;
exports.Create_WorkflowStepOption_From = exports.Create_WorkflowStepNotifyBySMSArrayArray_From = exports.Create_WorkflowStepNotifyBySMSArray_From = exports.Create_WorkflowStepNotifyBySMS_From = exports.Create_WorkflowStepNotifyByEmailArrayArray_From = exports.Create_WorkflowStepNotifyByEmailArray_From = exports.Create_WorkflowStepNotifyByEmail_From = exports.Create_WorkflowStepCreateSaleArrayArray_From = exports.Create_WorkflowStepCreateSaleArray_From = exports.Create_WorkflowStepCreateSale_From = exports.Create_WorkflowStepCreateRequestArrayArray_From = exports.Create_WorkflowStepCreateRequestArray_From = exports.Create_WorkflowStepCreateRequest_From = exports.Create_WorkflowStepCreateFollowUpArrayArray_From = exports.Create_WorkflowStepCreateFollowUpArray_From = exports.Create_WorkflowStepCreateFollowUp_From = exports.Create_WorkflowStepAddToListArrayArray_From = exports.Create_WorkflowStepAddToListArray_From = exports.Create_WorkflowStepAddToList_From = exports.Create_WorkflowStepBaseArrayArray_From = exports.Create_WorkflowStepBaseArray_From = exports.Create_WorkflowStepBase_From = exports.Create_WorkflowGoalArrayArray_From = exports.Create_WorkflowGoalArray_From = exports.Create_WorkflowGoal_From = exports.Create_WorkflowFilterArrayArray_From = exports.Create_WorkflowFilterArray_From = exports.Create_WorkflowFilter_From = exports.Create_EmailFlowArrayArray_From = exports.Create_EmailFlowArray_From = exports.Create_EmailFlow_From = exports.Create_DocumentTemplateMigrationListArrayArray_From = exports.Create_DocumentTemplateMigrationListArray_From = exports.Create_DocumentTemplateMigrationList_From = exports.Create_DocumentMigrationItemListArrayArray_From = exports.Create_DocumentMigrationItemListArray_From = exports.Create_DocumentMigrationItemList_From = exports.Create_DocumentMigrationItemArrayArray_From = exports.Create_DocumentMigrationItemArray_From = exports.Create_DocumentMigrationItem_From = exports.Create_DocumentMigrationAssociateArrayArray_From = exports.Create_DocumentMigrationAssociateArray_From = exports.Create_DocumentMigrationAssociate_From = exports.Create_SentimentArrayArray_From = exports.Create_SentimentArray_From = exports.Create_Sentiment_From = exports.Create_CategoryGuessArrayArray_From = exports.Create_CategoryGuessArray_From = exports.Create_CategoryGuess_From = exports.Create_CategorizationStatusResponseArrayArray_From = void 0;
exports.Create_WorkflowTriggerArrayArray_From = exports.Create_WorkflowTriggerArray_From = exports.Create_WorkflowTrigger_From = exports.Create_WorkflowStepWaitForTimeArrayArray_From = exports.Create_WorkflowStepWaitForTimeArray_From = exports.Create_WorkflowStepWaitForTime_From = exports.Create_WorkflowStepWaitForActionArrayArray_From = exports.Create_WorkflowStepWaitForActionArray_From = exports.Create_WorkflowStepWaitForAction_From = exports.Create_WorkflowStepUpdateContactArrayArray_From = exports.Create_WorkflowStepUpdateContactArray_From = exports.Create_WorkflowStepUpdateContact_From = exports.Create_WorkflowStepSplitArrayArray_From = exports.Create_WorkflowStepSplitArray_From = exports.Create_WorkflowStepSplit_From = exports.Create_WorkflowStepSendSMSArrayArray_From = exports.Create_WorkflowStepSendSMSArray_From = exports.Create_WorkflowStepSendSMS_From = exports.Create_WorkflowStepSendEmailArrayArray_From = exports.Create_WorkflowStepSendEmailArray_From = exports.Create_WorkflowStepSendEmail_From = exports.Create_WorkflowStepRunScriptArrayArray_From = exports.Create_WorkflowStepRunScriptArray_From = exports.Create_WorkflowStepRunScript_From = exports.Create_WorkflowStepRemoveFromListArrayArray_From = exports.Create_WorkflowStepRemoveFromListArray_From = exports.Create_WorkflowStepRemoveFromList_From = exports.Create_WorkflowStepOptionArrayArray_From = exports.Create_WorkflowStepOptionArray_From = void 0;
const tslib_1 = require("tslib");
/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
// All Typescript Carriers - Converter functions
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------
const enums = tslib_1.__importStar(require("./Enums"));
const moment = tslib_1.__importStar(require("moment"));
function Create_Address_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Wgs84Latitude = src.Wgs84Latitude;
    res.Wgs84Longitude = src.Wgs84Longitude;
    res.LocalizedAddress = Create_LocalizedFieldArrayArray_From(src.LocalizedAddress);
    res.Street = Create_StructuredAddress_From(src.Street);
    res.Postal = Create_StructuredAddress_From(src.Postal);
    res.Formatted = src.Formatted;
    return res;
}
exports.Create_Address_From = Create_Address_From;
function Create_AddressArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Address_From(src[i]);
        }
    }
    return res;
}
exports.Create_AddressArray_From = Create_AddressArray_From;
function Create_AddressArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_AddressArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_AddressArrayArray_From = Create_AddressArrayArray_From;
function Create_Carrier_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.TableRight = Create_TableRight_From(src.TableRight);
    res.FieldProperties = Create_FieldPropertyDictionary_From(src.FieldProperties);
    return res;
}
exports.Create_Carrier_From = Create_Carrier_From;
function Create_CarrierArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Carrier_From(src[i]);
        }
    }
    return res;
}
exports.Create_CarrierArray_From = Create_CarrierArray_From;
function Create_CarrierArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CarrierArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CarrierArrayArray_From = Create_CarrierArrayArray_From;
// dictionary
function Create_ColumnDataDictionary_From(src) {
    let res = src;
    if (res) {
        for (let i in res) {
            res[i] = Create_ArchiveColumnData_From(src[i]);
        }
    }
    return res;
}
exports.Create_ColumnDataDictionary_From = Create_ColumnDataDictionary_From;
function Create_CommandResult_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Success = src.Success;
    res.Message = src.Message;
    res.Result = enums.CommandActionResult[src.Result];
    return res;
}
exports.Create_CommandResult_From = Create_CommandResult_From;
function Create_CommandResultArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CommandResult_From(src[i]);
        }
    }
    return res;
}
exports.Create_CommandResultArray_From = Create_CommandResultArray_From;
function Create_CommandResultArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CommandResultArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CommandResultArrayArray_From = Create_CommandResultArrayArray_From;
function Create_ContactPersonId_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.PersonId = src.PersonId;
    res.ContactId = src.ContactId;
    return res;
}
exports.Create_ContactPersonId_From = Create_ContactPersonId_From;
function Create_ContactPersonIdArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ContactPersonId_From(src[i]);
        }
    }
    return res;
}
exports.Create_ContactPersonIdArray_From = Create_ContactPersonIdArray_From;
function Create_ContactPersonIdArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ContactPersonIdArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ContactPersonIdArrayArray_From = Create_ContactPersonIdArrayArray_From;
function Create_CustomCommand_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Name = src.Name;
    res.DisplayName = src.DisplayName;
    res.Description = src.Description;
    res.ToolTip = src.ToolTip;
    res.Actions = enums.CommandAction[src.Actions];
    res.ActionData = src.ActionData;
    return res;
}
exports.Create_CustomCommand_From = Create_CustomCommand_From;
function Create_CustomCommandArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CustomCommand_From(src[i]);
        }
    }
    return res;
}
exports.Create_CustomCommandArray_From = Create_CustomCommandArray_From;
function Create_CustomCommandArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CustomCommandArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CustomCommandArrayArray_From = Create_CustomCommandArrayArray_From;
function Create_DuplicateEntry_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.RuleName = src.RuleName;
    res.SoPrimaryKey = src.SoPrimaryKey;
    res.EntryName = src.EntryName;
    res.EntryIdentifier = src.EntryIdentifier;
    res.RuleDisplayName = src.RuleDisplayName;
    return res;
}
exports.Create_DuplicateEntry_From = Create_DuplicateEntry_From;
function Create_DuplicateEntryArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DuplicateEntry_From(src[i]);
        }
    }
    return res;
}
exports.Create_DuplicateEntryArray_From = Create_DuplicateEntryArray_From;
function Create_DuplicateEntryArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DuplicateEntryArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_DuplicateEntryArrayArray_From = Create_DuplicateEntryArrayArray_From;
function Create_DuplicateRule_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Name = src.Name;
    res.DisplayName = src.DisplayName;
    res.DisplayTooltip = src.DisplayTooltip;
    res.IsActive = src.IsActive;
    return res;
}
exports.Create_DuplicateRule_From = Create_DuplicateRule_From;
function Create_DuplicateRuleArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DuplicateRule_From(src[i]);
        }
    }
    return res;
}
exports.Create_DuplicateRuleArray_From = Create_DuplicateRuleArray_From;
function Create_DuplicateRuleArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DuplicateRuleArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_DuplicateRuleArrayArray_From = Create_DuplicateRuleArrayArray_From;
function Create_EntityElement_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Value = src.Value;
    res.StrippedValue = src.StrippedValue;
    res.Description = src.Description;
    return res;
}
exports.Create_EntityElement_From = Create_EntityElement_From;
function Create_EntityElementArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EntityElement_From(src[i]);
        }
    }
    return res;
}
exports.Create_EntityElementArray_From = Create_EntityElementArray_From;
function Create_EntityElementArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EntityElementArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_EntityElementArrayArray_From = Create_EntityElementArrayArray_From;
function Create_FieldProperty_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.FieldRight = Create_FieldRight_From(src.FieldRight);
    res.FieldType = src.FieldType;
    res.FieldLength = src.FieldLength;
    return res;
}
exports.Create_FieldProperty_From = Create_FieldProperty_From;
function Create_FieldPropertyArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldProperty_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldPropertyArray_From = Create_FieldPropertyArray_From;
function Create_FieldPropertyArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldPropertyArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldPropertyArrayArray_From = Create_FieldPropertyArrayArray_From;
// dictionary
function Create_FieldPropertyDictionary_From(src) {
    let res = src;
    if (res) {
        for (let i in res) {
            res[i] = Create_FieldProperty_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldPropertyDictionary_From = Create_FieldPropertyDictionary_From;
function Create_FieldRight_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.Mask = Create_EFieldRight_From(src.Mask);
    res.Reason = src.Reason;
    return res;
}
exports.Create_FieldRight_From = Create_FieldRight_From;
function Create_FieldRightArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldRight_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldRightArray_From = Create_FieldRightArray_From;
function Create_FieldRightArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldRightArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldRightArrayArray_From = Create_FieldRightArrayArray_From;
function Create_GrantedModuleLicense_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.OwnerId = src.OwnerId;
    res.OwnerName = src.OwnerName;
    res.OwnerDescription = src.OwnerDescription;
    res.ModuleId = src.ModuleId;
    res.Name = src.Name;
    res.Description = src.Description;
    res.Version = src.Version;
    res.LicenseType = enums.LicenseType[src.LicenseType];
    res.ExtraFlags = src.ExtraFlags;
    res.SortOrder = src.SortOrder;
    res.LicenseNumber = src.LicenseNumber;
    res.IsHidden = src.IsHidden;
    res.IsUnrestricted = src.IsUnrestricted;
    res.ExpiryDate = Create_Date_From(src.ExpiryDate);
    return res;
}
exports.Create_GrantedModuleLicense_From = Create_GrantedModuleLicense_From;
function Create_GrantedModuleLicenseArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_GrantedModuleLicense_From(src[i]);
        }
    }
    return res;
}
exports.Create_GrantedModuleLicenseArray_From = Create_GrantedModuleLicenseArray_From;
function Create_GrantedModuleLicenseArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_GrantedModuleLicenseArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_GrantedModuleLicenseArrayArray_From = Create_GrantedModuleLicenseArrayArray_From;
// dictionary
function Create_IntStringDictionary_From(src) {
    let res = src;
    if (res) {
        for (let i in res) {
            res[i] = src[i];
        }
    }
    return res;
}
exports.Create_IntStringDictionary_From = Create_IntStringDictionary_From;
function Create_LocalizedField_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Name = src.Name;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    res.Label = src.Label;
    res.ValueLength = src.ValueLength;
    res.AddressType = src.AddressType;
    return res;
}
exports.Create_LocalizedField_From = Create_LocalizedField_From;
function Create_LocalizedFieldArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_LocalizedField_From(src[i]);
        }
    }
    return res;
}
exports.Create_LocalizedFieldArray_From = Create_LocalizedFieldArray_From;
function Create_LocalizedFieldArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_LocalizedFieldArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_LocalizedFieldArrayArray_From = Create_LocalizedFieldArrayArray_From;
function Create_MetricPair_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.Name = src.Name;
    res.Value = src.Value;
    return res;
}
exports.Create_MetricPair_From = Create_MetricPair_From;
function Create_MetricPairArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_MetricPair_From(src[i]);
        }
    }
    return res;
}
exports.Create_MetricPairArray_From = Create_MetricPairArray_From;
function Create_MetricPairArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_MetricPairArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_MetricPairArrayArray_From = Create_MetricPairArrayArray_From;
function Create_OperationResult_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.Success = src.Success;
    res.Message = src.Message;
    return res;
}
exports.Create_OperationResult_From = Create_OperationResult_From;
function Create_OperationResultArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_OperationResult_From(src[i]);
        }
    }
    return res;
}
exports.Create_OperationResultArray_From = Create_OperationResultArray_From;
function Create_OperationResultArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_OperationResultArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_OperationResultArrayArray_From = Create_OperationResultArrayArray_From;
function Create_ProjectTypeStatusLink_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ProjectTypeStatusLinkId = src.ProjectTypeStatusLinkId;
    res.ProjTypeId = src.ProjTypeId;
    res.ProjTypeName = src.ProjTypeName;
    res.ProjTypeTooltip = src.ProjTypeTooltip;
    res.ProjStatusId = src.ProjStatusId;
    res.ProjStatusName = src.ProjStatusName;
    res.ProjStatusTooltip = src.ProjStatusTooltip;
    return res;
}
exports.Create_ProjectTypeStatusLink_From = Create_ProjectTypeStatusLink_From;
function Create_ProjectTypeStatusLinkArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ProjectTypeStatusLink_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProjectTypeStatusLinkArray_From = Create_ProjectTypeStatusLinkArray_From;
function Create_ProjectTypeStatusLinkArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ProjectTypeStatusLinkArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProjectTypeStatusLinkArrayArray_From = Create_ProjectTypeStatusLinkArrayArray_From;
function Create_ProvidedCredential_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.Type = src.Type;
    res.SearchName = src.SearchName;
    res.DisplayName = src.DisplayName;
    res.CredentialId = src.CredentialId;
    return res;
}
exports.Create_ProvidedCredential_From = Create_ProvidedCredential_From;
function Create_ProvidedCredentialArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ProvidedCredential_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProvidedCredentialArray_From = Create_ProvidedCredentialArray_From;
function Create_ProvidedCredentialArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ProvidedCredentialArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProvidedCredentialArrayArray_From = Create_ProvidedCredentialArrayArray_From;
function Create_Recipient_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.Type = enums.RecipientType[src.Type];
    res.Value = src.Value;
    res.DisplayValue = src.DisplayValue;
    return res;
}
exports.Create_Recipient_From = Create_Recipient_From;
function Create_RecipientArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Recipient_From(src[i]);
        }
    }
    return res;
}
exports.Create_RecipientArray_From = Create_RecipientArray_From;
function Create_RecipientArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RecipientArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_RecipientArrayArray_From = Create_RecipientArrayArray_From;
function Create_RecipientStatistics_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Total = src.Total;
    res.ValidPostalAddresses = src.ValidPostalAddresses;
    res.ValidEmailAddresses = src.ValidEmailAddresses;
    res.ValidFaxNumbers = src.ValidFaxNumbers;
    res.NoAddresses = src.NoAddresses;
    res.NoFaxOrEmails = src.NoFaxOrEmails;
    return res;
}
exports.Create_RecipientStatistics_From = Create_RecipientStatistics_From;
function Create_RecipientStatisticsArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RecipientStatistics_From(src[i]);
        }
    }
    return res;
}
exports.Create_RecipientStatisticsArray_From = Create_RecipientStatisticsArray_From;
function Create_RecipientStatisticsArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RecipientStatisticsArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_RecipientStatisticsArrayArray_From = Create_RecipientStatisticsArrayArray_From;
function Create_RecurrenceDate_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.Date = Create_Date_From(src.Date);
    res.IsConflict = src.IsConflict;
    res.Description = src.Description;
    res.DescriptionStyleHint = src.DescriptionStyleHint;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_RecurrenceDate_From = Create_RecurrenceDate_From;
function Create_RecurrenceDateArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RecurrenceDate_From(src[i]);
        }
    }
    return res;
}
exports.Create_RecurrenceDateArray_From = Create_RecurrenceDateArray_From;
function Create_RecurrenceDateArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RecurrenceDateArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_RecurrenceDateArrayArray_From = Create_RecurrenceDateArrayArray_From;
function Create_RecurrenceDayPattern_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.Cycle = src.Cycle;
    res.Pattern = enums.RecurrenceDailyPattern[src.Pattern];
    return res;
}
exports.Create_RecurrenceDayPattern_From = Create_RecurrenceDayPattern_From;
function Create_RecurrenceDayPatternArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RecurrenceDayPattern_From(src[i]);
        }
    }
    return res;
}
exports.Create_RecurrenceDayPatternArray_From = Create_RecurrenceDayPatternArray_From;
function Create_RecurrenceDayPatternArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RecurrenceDayPatternArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_RecurrenceDayPatternArrayArray_From = Create_RecurrenceDayPatternArrayArray_From;
function Create_RecurrenceInfo_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.RecurrenceId = src.RecurrenceId;
    res.StartDate = Create_Date_From(src.StartDate);
    res.EndDate = Create_Date_From(src.EndDate);
    res.RecurrenceEndType = enums.RecurrenceEndType[src.RecurrenceEndType];
    res.Pattern = enums.RecurrencePattern[src.Pattern];
    res.DayPattern = Create_RecurrenceDayPattern_From(src.DayPattern);
    res.WeekPattern = Create_RecurrenceWeekPattern_From(src.WeekPattern);
    res.MonthPattern = Create_RecurrenceMonthPattern_From(src.MonthPattern);
    res.YearPattern = Create_RecurrenceYearPattern_From(src.YearPattern);
    res.Dates = Create_RecurrenceDateArray_From(src.Dates);
    res.RecurrenceCounter = src.RecurrenceCounter;
    res.IsRecurrence = src.IsRecurrence;
    return res;
}
exports.Create_RecurrenceInfo_From = Create_RecurrenceInfo_From;
function Create_RecurrenceInfoArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RecurrenceInfo_From(src[i]);
        }
    }
    return res;
}
exports.Create_RecurrenceInfoArray_From = Create_RecurrenceInfoArray_From;
function Create_RecurrenceInfoArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RecurrenceInfoArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_RecurrenceInfoArrayArray_From = Create_RecurrenceInfoArrayArray_From;
function Create_RecurrenceMonthPattern_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.Cycle = src.Cycle;
    res.Day = src.Day;
    res.Weekday = Create_Weekday_From(src.Weekday);
    res.WeekOfMonth = enums.WeekOfMonth[src.WeekOfMonth];
    res.Pattern = enums.RecurrenceMonthlyPattern[src.Pattern];
    return res;
}
exports.Create_RecurrenceMonthPattern_From = Create_RecurrenceMonthPattern_From;
function Create_RecurrenceMonthPatternArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RecurrenceMonthPattern_From(src[i]);
        }
    }
    return res;
}
exports.Create_RecurrenceMonthPatternArray_From = Create_RecurrenceMonthPatternArray_From;
function Create_RecurrenceMonthPatternArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RecurrenceMonthPatternArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_RecurrenceMonthPatternArrayArray_From = Create_RecurrenceMonthPatternArrayArray_From;
function Create_RecurrenceWeekPattern_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.Cycle = src.Cycle;
    res.Weekdays = Create_Weekday_From(src.Weekdays);
    return res;
}
exports.Create_RecurrenceWeekPattern_From = Create_RecurrenceWeekPattern_From;
function Create_RecurrenceWeekPatternArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RecurrenceWeekPattern_From(src[i]);
        }
    }
    return res;
}
exports.Create_RecurrenceWeekPatternArray_From = Create_RecurrenceWeekPatternArray_From;
function Create_RecurrenceWeekPatternArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RecurrenceWeekPatternArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_RecurrenceWeekPatternArrayArray_From = Create_RecurrenceWeekPatternArrayArray_From;
function Create_RecurrenceYearPattern_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.Cycle = src.Cycle;
    res.Day = src.Day;
    res.Weekday = Create_Weekday_From(src.Weekday);
    res.WeekOfMonth = enums.WeekOfMonth[src.WeekOfMonth];
    res.Pattern = enums.RecurrenceYearlyPattern[src.Pattern];
    return res;
}
exports.Create_RecurrenceYearPattern_From = Create_RecurrenceYearPattern_From;
function Create_RecurrenceYearPatternArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RecurrenceYearPattern_From(src[i]);
        }
    }
    return res;
}
exports.Create_RecurrenceYearPatternArray_From = Create_RecurrenceYearPatternArray_From;
function Create_RecurrenceYearPatternArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RecurrenceYearPatternArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_RecurrenceYearPatternArrayArray_From = Create_RecurrenceYearPatternArrayArray_From;
function Create_SaleTypeStageLink_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.SaleTypeStageLinkId = src.SaleTypeStageLinkId;
    res.SaleTypeId = src.SaleTypeId;
    res.SaleTypeName = src.SaleTypeName;
    res.SaleTypeTooltip = src.SaleTypeTooltip;
    res.ProbId = src.ProbId;
    res.ProbName = src.ProbName;
    res.ProbTooltip = src.ProbTooltip;
    res.Probability = src.Probability;
    return res;
}
exports.Create_SaleTypeStageLink_From = Create_SaleTypeStageLink_From;
function Create_SaleTypeStageLinkArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SaleTypeStageLink_From(src[i]);
        }
    }
    return res;
}
exports.Create_SaleTypeStageLinkArray_From = Create_SaleTypeStageLinkArray_From;
function Create_SaleTypeStageLinkArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SaleTypeStageLinkArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SaleTypeStageLinkArrayArray_From = Create_SaleTypeStageLinkArrayArray_From;
function Create_SelectionMemberEditValues_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.CompanyCategory = src.CompanyCategory;
    res.CompanyBusiness = src.CompanyBusiness;
    res.CompanyOurContact = src.CompanyOurContact;
    res.CompanyName = src.CompanyName;
    res.CompanyDepartment = src.CompanyDepartment;
    res.CompanyNumber = src.CompanyNumber;
    res.CompanyCode = src.CompanyCode;
    res.ContactPosition = src.ContactPosition;
    res.ChangeCompanyCategory = src.ChangeCompanyCategory;
    res.ChangeCompanyBusiness = src.ChangeCompanyBusiness;
    res.ChangeCompanyOurContact = src.ChangeCompanyOurContact;
    res.ChangeCompanyName = src.ChangeCompanyName;
    res.ChangeCompanyDepartment = src.ChangeCompanyDepartment;
    res.ChangeCompanyNumber = src.ChangeCompanyNumber;
    res.ChangeCompanyCode = src.ChangeCompanyCode;
    res.ChangeContactPosition = src.ChangeContactPosition;
    res.CompanyCountry = src.CompanyCountry;
    res.ChangeCompanyCountry = src.ChangeCompanyCountry;
    res.ContactJobTitle = src.ContactJobTitle;
    res.ChangeContactJobTitle = src.ChangeContactJobTitle;
    res.CompanyOrgNr = src.CompanyOrgNr;
    res.ChangeCompanyOrgNr = src.ChangeCompanyOrgNr;
    return res;
}
exports.Create_SelectionMemberEditValues_From = Create_SelectionMemberEditValues_From;
function Create_SelectionMemberEditValuesArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SelectionMemberEditValues_From(src[i]);
        }
    }
    return res;
}
exports.Create_SelectionMemberEditValuesArray_From = Create_SelectionMemberEditValuesArray_From;
function Create_SelectionMemberEditValuesArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SelectionMemberEditValuesArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SelectionMemberEditValuesArrayArray_From = Create_SelectionMemberEditValuesArrayArray_From;
function Create_SoExceptionInfo_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.Message = src.Message;
    res.StackTrace = src.StackTrace;
    res.FriendlyText = src.FriendlyText;
    res.ExceptionType = src.ExceptionType;
    res.Source = src.Source;
    res.InnerException = Create_SoExceptionInfo_From(src.InnerException);
    res.Parameters = Create_SoExceptionInfoParameters_From(src.Parameters);
    return res;
}
exports.Create_SoExceptionInfo_From = Create_SoExceptionInfo_From;
function Create_SoExceptionInfoArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SoExceptionInfo_From(src[i]);
        }
    }
    return res;
}
exports.Create_SoExceptionInfoArray_From = Create_SoExceptionInfoArray_From;
function Create_SoExceptionInfoArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SoExceptionInfoArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SoExceptionInfoArrayArray_From = Create_SoExceptionInfoArrayArray_From;
// dictionary
function Create_SoExceptionInfoParameters_From(src) {
    let res = src;
    if (res) {
        for (let i in res) {
            res[i] = src[i];
        }
    }
    return res;
}
exports.Create_SoExceptionInfoParameters_From = Create_SoExceptionInfoParameters_From;
// dictionary
function Create_SoExtraInfo_From(src) {
    let res = src;
    if (res) {
        for (let i in res) {
            res[i] = src[i];
        }
    }
    return res;
}
exports.Create_SoExtraInfo_From = Create_SoExtraInfo_From;
function Create_SoPrincipalCarrier_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.UserType = enums.UserType[src.UserType];
    res.Associate = src.Associate;
    res.AssociateId = src.AssociateId;
    res.IsPerson = src.IsPerson;
    res.PersonId = src.PersonId;
    res.CountryId = src.CountryId;
    res.HomeCountryId = src.HomeCountryId;
    res.ContactId = src.ContactId;
    res.GroupId = src.GroupId;
    res.BusinessId = src.BusinessId;
    res.CategoryId = src.CategoryId;
    res.ContactOwner = src.ContactOwner;
    res.RoleId = src.RoleId;
    res.RoleName = src.RoleName;
    res.RoleDescription = src.RoleDescription;
    res.RoleType = enums.RoleType[src.RoleType];
    res.Licenses = Create_GrantedModuleLicenseArray_From(src.Licenses);
    res.FullName = src.FullName;
    res.EMailAddress = src.EMailAddress;
    res.FunctionRights = src.FunctionRights;
    res.EjUserId = src.EjUserId;
    res.EjAccessLevel = src.EjAccessLevel;
    res.EjUserStatus = enums.EjUserStatus[src.EjUserStatus];
    res.ProvidedCredentials = Create_ProvidedCredentialArray_From(src.ProvidedCredentials);
    res.SecondaryGroups = src.SecondaryGroups;
    res.DatabaseContextIdentifier = src.DatabaseContextIdentifier;
    return res;
}
exports.Create_SoPrincipalCarrier_From = Create_SoPrincipalCarrier_From;
function Create_SoPrincipalCarrierArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SoPrincipalCarrier_From(src[i]);
        }
    }
    return res;
}
exports.Create_SoPrincipalCarrierArray_From = Create_SoPrincipalCarrierArray_From;
function Create_SoPrincipalCarrierArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SoPrincipalCarrierArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SoPrincipalCarrierArrayArray_From = Create_SoPrincipalCarrierArrayArray_From;
function Create_SoSystemInfoCarrier_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.License = Create_LicenseInfo_From(src.License);
    res.WarningEnglish = src.WarningEnglish;
    res.WarningResource = src.WarningResource;
    res.BranchName = src.BranchName;
    res.BuildLabel = src.BuildLabel;
    res.AssemblyVersion = src.AssemblyVersion;
    res.AccumulatedNextCheckDate = Create_Date_From(src.AccumulatedNextCheckDate);
    res.FileVersion = src.FileVersion;
    res.Description = src.Description;
    res.DaysUntilNetServerExpiry = src.DaysUntilNetServerExpiry;
    res.BuildType = enums.NetServerBuildType[src.BuildType];
    res.DatabaseVersion = src.DatabaseVersion;
    res.IsUnicode = src.IsUnicode;
    res.CompanyName = src.CompanyName;
    res.CompanyId = src.CompanyId;
    res.DatabaseType = src.DatabaseType;
    res.DatabaseMinor = src.DatabaseMinor;
    res.DatabaseName = src.DatabaseName;
    res.IsOnTravel = src.IsOnTravel;
    res.IsSatellite = src.IsSatellite;
    return res;
}
exports.Create_SoSystemInfoCarrier_From = Create_SoSystemInfoCarrier_From;
function Create_SoSystemInfoCarrierArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SoSystemInfoCarrier_From(src[i]);
        }
    }
    return res;
}
exports.Create_SoSystemInfoCarrierArray_From = Create_SoSystemInfoCarrierArray_From;
function Create_SoSystemInfoCarrierArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SoSystemInfoCarrierArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SoSystemInfoCarrierArrayArray_From = Create_SoSystemInfoCarrierArrayArray_From;
// dictionary
function Create_StringDictionary_From(src) {
    let res = src;
    if (res) {
        for (let i in res) {
            res[i] = src[i];
        }
    }
    return res;
}
exports.Create_StringDictionary_From = Create_StringDictionary_From;
// dictionary
function Create_StringObjectDictionary_From(src) {
    let res = src;
    if (res) {
        for (let i in res) {
            res[i] = Create_Object_From(src[i]);
        }
    }
    return res;
}
exports.Create_StringObjectDictionary_From = Create_StringObjectDictionary_From;
function Create_StructuredAddress_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.AtypeIdx = enums.AddressType[src.AtypeIdx];
    res.Address1 = src.Address1;
    res.Address2 = src.Address2;
    res.Address3 = src.Address3;
    res.City = src.City;
    res.County = src.County;
    res.State = src.State;
    res.Zipcode = src.Zipcode;
    res.Formatted = src.Formatted;
    return res;
}
exports.Create_StructuredAddress_From = Create_StructuredAddress_From;
function Create_StructuredAddressArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_StructuredAddress_From(src[i]);
        }
    }
    return res;
}
exports.Create_StructuredAddressArray_From = Create_StructuredAddressArray_From;
function Create_StructuredAddressArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_StructuredAddressArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_StructuredAddressArrayArray_From = Create_StructuredAddressArrayArray_From;
function Create_TableRight_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.Mask = Create_ETableRight_From(src.Mask);
    res.Reason = src.Reason;
    return res;
}
exports.Create_TableRight_From = Create_TableRight_From;
function Create_TableRightArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TableRight_From(src[i]);
        }
    }
    return res;
}
exports.Create_TableRightArray_From = Create_TableRightArray_From;
function Create_TableRightArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TableRightArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TableRightArrayArray_From = Create_TableRightArrayArray_From;
function Create_TicketFormSubmission_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.FormSubmissionId = src.FormSubmissionId;
    res.EmailAddress = src.EmailAddress;
    res.Status = enums.FormSubmissionStatus[src.Status];
    return res;
}
exports.Create_TicketFormSubmission_From = Create_TicketFormSubmission_From;
function Create_TicketFormSubmissionArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TicketFormSubmission_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketFormSubmissionArray_From = Create_TicketFormSubmissionArray_From;
function Create_TicketFormSubmissionArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TicketFormSubmissionArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketFormSubmissionArrayArray_From = Create_TicketFormSubmissionArrayArray_From;
function Create_TicketMessageHeader_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Name = src.Name;
    res.Value = src.Value;
    res.StdItem = enums.MessageHeaderStdItem[src.StdItem];
    res.StdItemCol = enums.MessageHeaderStdItemCol[src.StdItemCol];
    return res;
}
exports.Create_TicketMessageHeader_From = Create_TicketMessageHeader_From;
function Create_TicketMessageHeaderArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TicketMessageHeader_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketMessageHeaderArray_From = Create_TicketMessageHeaderArray_From;
function Create_TicketMessageHeaderArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TicketMessageHeaderArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketMessageHeaderArrayArray_From = Create_TicketMessageHeaderArrayArray_From;
function Create_UserCandidate_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.UserCandidateId = src.UserCandidateId;
    res.PersonId = src.PersonId;
    res.SecretKey = src.SecretKey;
    res.SecretValue = src.SecretValue;
    return res;
}
exports.Create_UserCandidate_From = Create_UserCandidate_From;
function Create_UserCandidateArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_UserCandidate_From(src[i]);
        }
    }
    return res;
}
exports.Create_UserCandidateArray_From = Create_UserCandidateArray_From;
function Create_UserCandidateArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_UserCandidateArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_UserCandidateArrayArray_From = Create_UserCandidateArrayArray_From;
function Create_ApproveRejectResponse_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.PluginResponse = Create_PluginResponse_From(src.PluginResponse);
    res.CreatedAppointmentId = src.CreatedAppointmentId;
    return res;
}
exports.Create_ApproveRejectResponse_From = Create_ApproveRejectResponse_From;
function Create_ApproveRejectResponseArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ApproveRejectResponse_From(src[i]);
        }
    }
    return res;
}
exports.Create_ApproveRejectResponseArray_From = Create_ApproveRejectResponseArray_From;
function Create_ApproveRejectResponseArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ApproveRejectResponseArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ApproveRejectResponseArrayArray_From = Create_ApproveRejectResponseArrayArray_From;
function Create_ChangedData_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.AddedRecords = Create_ChangedDataItemArray_From(src.AddedRecords);
    res.UpdatedRecords = Create_ChangedDataItemArray_From(src.UpdatedRecords);
    res.DeletedRecords = Create_ChangedDataItemArray_From(src.DeletedRecords);
    return res;
}
exports.Create_ChangedData_From = Create_ChangedData_From;
function Create_ChangedDataArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ChangedData_From(src[i]);
        }
    }
    return res;
}
exports.Create_ChangedDataArray_From = Create_ChangedDataArray_From;
function Create_ChangedDataArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ChangedDataArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ChangedDataArrayArray_From = Create_ChangedDataArrayArray_From;
function Create_ChangedDataItem_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Tablename = src.Tablename;
    res.RecordId = src.RecordId;
    return res;
}
exports.Create_ChangedDataItem_From = Create_ChangedDataItem_From;
function Create_ChangedDataItemArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ChangedDataItem_From(src[i]);
        }
    }
    return res;
}
exports.Create_ChangedDataItemArray_From = Create_ChangedDataItemArray_From;
function Create_ChangedDataItemArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ChangedDataItemArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ChangedDataItemArrayArray_From = Create_ChangedDataItemArrayArray_From;
function Create_FieldMetadata_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.FieldKey = src.FieldKey;
    res.Rank = src.Rank;
    res.DisplayName = src.DisplayName;
    res.DisplayDescription = src.DisplayDescription;
    res.FieldType = enums.FieldMetadataType[src.FieldType];
    res.ListName = src.ListName;
    res.DefaultValue = src.DefaultValue;
    res.MaxLength = src.MaxLength;
    res.Access = enums.FieldAccess[src.Access];
    res.ShowInSearch = src.ShowInSearch;
    return res;
}
exports.Create_FieldMetadata_From = Create_FieldMetadata_From;
function Create_FieldMetadataArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldMetadata_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldMetadataArray_From = Create_FieldMetadataArray_From;
function Create_FieldMetadataArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldMetadataArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldMetadataArrayArray_From = Create_FieldMetadataArrayArray_From;
// dictionary
function Create_FieldMetadataDictionary_From(src) {
    let res = src;
    if (res) {
        for (let i in res) {
            res[i] = Create_FieldMetadata_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldMetadataDictionary_From = Create_FieldMetadataDictionary_From;
function Create_PluginResponse_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.IsOk = src.IsOk;
    res.UserExplanation = src.UserExplanation;
    res.TechExplanation = src.TechExplanation;
    res.ErrorCode = src.ErrorCode;
    res.Changes = Create_ChangedData_From(src.Changes);
    res.Status = enums.QuoteStatus[src.Status];
    return res;
}
exports.Create_PluginResponse_From = Create_PluginResponse_From;
function Create_PluginResponseArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PluginResponse_From(src[i]);
        }
    }
    return res;
}
exports.Create_PluginResponseArray_From = Create_PluginResponseArray_From;
function Create_PluginResponseArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PluginResponseArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_PluginResponseArrayArray_From = Create_PluginResponseArrayArray_From;
function Create_PluginUrlResponse_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.IsOk = src.IsOk;
    res.UserExplanation = src.UserExplanation;
    res.TechExplanation = src.TechExplanation;
    res.ErrorCode = src.ErrorCode;
    res.Changes = Create_ChangedData_From(src.Changes);
    res.Url = src.Url;
    res.Status = enums.QuoteStatus[src.Status];
    return res;
}
exports.Create_PluginUrlResponse_From = Create_PluginUrlResponse_From;
function Create_PluginUrlResponseArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PluginUrlResponse_From(src[i]);
        }
    }
    return res;
}
exports.Create_PluginUrlResponseArray_From = Create_PluginUrlResponseArray_From;
function Create_PluginUrlResponseArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PluginUrlResponseArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_PluginUrlResponseArrayArray_From = Create_PluginUrlResponseArrayArray_From;
function Create_PriceList_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.PriceListId = src.PriceListId;
    res.ERPPriceListKey = src.ERPPriceListKey;
    res.QuoteConnectionId = src.QuoteConnectionId;
    res.Name = src.Name;
    res.Description = src.Description;
    res.Currency = src.Currency;
    res.CurrencyName = src.CurrencyName;
    res.ValidFrom = Create_Date_From(src.ValidFrom);
    res.ValidTo = Create_Date_From(src.ValidTo);
    res.IsActive = src.IsActive;
    return res;
}
exports.Create_PriceList_From = Create_PriceList_From;
function Create_PriceListArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PriceList_From(src[i]);
        }
    }
    return res;
}
exports.Create_PriceListArray_From = Create_PriceListArray_From;
function Create_PriceListArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PriceListArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_PriceListArrayArray_From = Create_PriceListArrayArray_From;
function Create_Product_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ProductId = src.ProductId;
    res.ERPProductKey = src.ERPProductKey;
    res.ERPPriceListKey = src.ERPPriceListKey;
    res.Name = src.Name;
    res.Description = src.Description;
    res.Code = src.Code;
    res.PriceUnit = src.PriceUnit;
    res.QuantityUnit = src.QuantityUnit;
    res.IsSubscription = src.IsSubscription;
    res.SubscriptionUnit = src.SubscriptionUnit;
    res.DefaultSubscriptionQuantity = src.DefaultSubscriptionQuantity;
    res.ItemNumber = src.ItemNumber;
    res.Url = src.Url;
    res.ProductCategoryKey = src.ProductCategoryKey;
    res.ProductFamilyKey = src.ProductFamilyKey;
    res.ProductTypeKey = src.ProductTypeKey;
    res.VAT = src.VAT;
    res.VATInfo = src.VATInfo;
    res.UnitCost = src.UnitCost;
    res.UnitMinimumPrice = src.UnitMinimumPrice;
    res.UnitListPrice = src.UnitListPrice;
    res.InAssortment = src.InAssortment;
    res.Supplier = src.Supplier;
    res.SupplierCode = src.SupplierCode;
    res.Rights = src.Rights;
    res.Rule = src.Rule;
    res.ExtraInfo = Create_ProductExtraDataFieldArray_From(src.ExtraInfo);
    res.RawExtraInfo = src.RawExtraInfo;
    res.ExtraField1 = src.ExtraField1;
    res.ExtraField2 = src.ExtraField2;
    res.ExtraField3 = src.ExtraField3;
    res.ExtraField4 = src.ExtraField4;
    res.ExtraField5 = src.ExtraField5;
    res.InStock = src.InStock;
    return res;
}
exports.Create_Product_From = Create_Product_From;
function Create_ProductArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Product_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProductArray_From = Create_ProductArray_From;
function Create_ProductArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ProductArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProductArrayArray_From = Create_ProductArrayArray_From;
function Create_ProductExtraDataField_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Name = src.Name;
    res.Value = src.Value;
    res.Type = enums.ExtraDataFieldType[src.Type];
    return res;
}
exports.Create_ProductExtraDataField_From = Create_ProductExtraDataField_From;
function Create_ProductExtraDataFieldArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ProductExtraDataField_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProductExtraDataFieldArray_From = Create_ProductExtraDataFieldArray_From;
function Create_ProductExtraDataFieldArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ProductExtraDataFieldArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProductExtraDataFieldArrayArray_From = Create_ProductExtraDataFieldArrayArray_From;
function Create_Quote_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.QuoteId = src.QuoteId;
    res.SaleId = src.SaleId;
    res.QuoteConnectionId = src.QuoteConnectionId;
    res.ERPQuoteKey = src.ERPQuoteKey;
    res.ERPOrderKey = src.ERPOrderKey;
    res.ActiveQuoteVersionId = src.ActiveQuoteVersionId;
    res.AcceptedQuoteAlternativeId = src.AcceptedQuoteAlternativeId;
    res.UseValuesFromQuote = src.UseValuesFromQuote;
    res.DocumentId = src.DocumentId;
    res.PoNumber = src.PoNumber;
    res.OrderComment = src.OrderComment;
    res.PreferredEmailCulture = src.PreferredEmailCulture;
    res.ActiveQuoteVersion = Create_QuoteVersion_From(src.ActiveQuoteVersion);
    res.FavoriteQuoteAlternative = Create_QuoteAlternative_From(src.FavoriteQuoteAlternative);
    return res;
}
exports.Create_Quote_From = Create_Quote_From;
function Create_QuoteArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Quote_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteArray_From = Create_QuoteArray_From;
function Create_QuoteArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteArrayArray_From = Create_QuoteArrayArray_From;
function Create_QuoteAlternative_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.QuoteAlternativeId = src.QuoteAlternativeId;
    res.ERPQuoteAlternativeKey = src.ERPQuoteAlternativeKey;
    res.QuoteVersionId = src.QuoteVersionId;
    res.Name = src.Name;
    res.Description = src.Description;
    res.Status = enums.QuoteStatus[src.Status];
    res.Reason = src.Reason;
    res.ERPDiscountPercent = src.ERPDiscountPercent;
    res.ERPDiscountAmount = src.ERPDiscountAmount;
    res.DiscountPercent = src.DiscountPercent;
    res.DiscountAmount = src.DiscountAmount;
    res.UserValueOverride = enums.ValueOverride[src.UserValueOverride];
    res.VATInfo = src.VATInfo;
    res.VAT = src.VAT;
    res.EarningPercent = src.EarningPercent;
    res.EarningAmount = src.EarningAmount;
    res.SubTotal = src.SubTotal;
    res.TotalPrice = src.TotalPrice;
    res.ExtraField1 = src.ExtraField1;
    res.ExtraField2 = src.ExtraField2;
    res.ExtraField3 = src.ExtraField3;
    res.ExtraField4 = src.ExtraField4;
    res.ExtraField5 = src.ExtraField5;
    return res;
}
exports.Create_QuoteAlternative_From = Create_QuoteAlternative_From;
function Create_QuoteAlternativeArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteAlternative_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteAlternativeArray_From = Create_QuoteAlternativeArray_From;
function Create_QuoteAlternativeArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteAlternativeArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteAlternativeArrayArray_From = Create_QuoteAlternativeArrayArray_From;
function Create_QuoteAlternativeRecalculated_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.QuoteLinesHasChanged = src.QuoteLinesHasChanged;
    res.ChangedQuoteAlternative = Create_QuoteAlternative_From(src.ChangedQuoteAlternative);
    res.Changes = Create_ChangedData_From(src.Changes);
    return res;
}
exports.Create_QuoteAlternativeRecalculated_From = Create_QuoteAlternativeRecalculated_From;
function Create_QuoteAlternativeRecalculatedArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteAlternativeRecalculated_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteAlternativeRecalculatedArray_From = Create_QuoteAlternativeRecalculatedArray_From;
function Create_QuoteAlternativeRecalculatedArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteAlternativeRecalculatedArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteAlternativeRecalculatedArrayArray_From = Create_QuoteAlternativeRecalculatedArrayArray_From;
function Create_QuoteConnection_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.QuoteConnectionId = src.QuoteConnectionId;
    res.ERPName = src.ERPName;
    res.DisplayName = src.DisplayName;
    res.DisplayDescription = src.DisplayDescription;
    res.Rank = src.Rank;
    res.ConnectorName = src.ConnectorName;
    res.ErpConnectionId = src.ErpConnectionId;
    res.ExtraData = src.ExtraData;
    res.IsAvailable = src.IsAvailable;
    res.InitializeResponse = Create_PluginResponse_From(src.InitializeResponse);
    res.PriceLists = Create_PriceListArray_From(src.PriceLists);
    res.AllAccess = src.AllAccess;
    res.Deleted = src.Deleted;
    res.UserGroupAccessIds = src.UserGroupAccessIds;
    res.AssociateAccessIds = src.AssociateAccessIds;
    return res;
}
exports.Create_QuoteConnection_From = Create_QuoteConnection_From;
function Create_QuoteConnectionArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteConnection_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteConnectionArray_From = Create_QuoteConnectionArray_From;
function Create_QuoteConnectionArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteConnectionArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteConnectionArrayArray_From = Create_QuoteConnectionArrayArray_From;
function Create_QuoteContext_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.CRMAssociate = Create_Associate_From(src.CRMAssociate);
    res.CRMSale = Create_Sale_From(src.CRMSale);
    res.CRMQuoteVersion = Create_QuoteVersion_From(src.CRMQuoteVersion);
    res.CRMQuoteAlternative = Create_QuoteAlternative_From(src.CRMQuoteAlternative);
    res.CRMQuoteLine = Create_QuoteLine_From(src.CRMQuoteLine);
    res.UserLanguageCode = src.UserLanguageCode;
    return res;
}
exports.Create_QuoteContext_From = Create_QuoteContext_From;
function Create_QuoteContextArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteContext_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteContextArray_From = Create_QuoteContextArray_From;
function Create_QuoteContextArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteContextArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteContextArrayArray_From = Create_QuoteContextArrayArray_From;
function Create_QuoteEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.QuoteId = src.QuoteId;
    res.SaleId = src.SaleId;
    res.QuoteConnectionId = src.QuoteConnectionId;
    res.ERPQuoteKey = src.ERPQuoteKey;
    res.ERPOrderKey = src.ERPOrderKey;
    res.ActiveQuoteVersionId = src.ActiveQuoteVersionId;
    res.AcceptedQuoteAlternativeId = src.AcceptedQuoteAlternativeId;
    res.UseValuesFromQuote = src.UseValuesFromQuote;
    res.DocumentId = src.DocumentId;
    res.PoNumber = src.PoNumber;
    res.OrderComment = src.OrderComment;
    res.PreferredEmailCulture = src.PreferredEmailCulture;
    res.QuoteVersions = Create_QuoteVersionArray_From(src.QuoteVersions);
    return res;
}
exports.Create_QuoteEntity_From = Create_QuoteEntity_From;
function Create_QuoteEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteEntityArray_From = Create_QuoteEntityArray_From;
function Create_QuoteEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteEntityArrayArray_From = Create_QuoteEntityArrayArray_From;
function Create_QuoteLine_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.QuoteLineId = src.QuoteLineId;
    res.ERPQuoteLineKey = src.ERPQuoteLineKey;
    res.QuoteAlternativeId = src.QuoteAlternativeId;
    res.ERPProductKey = src.ERPProductKey;
    res.Status = enums.QuoteStatus[src.Status];
    res.Reason = src.Reason;
    res.Quantity = src.Quantity;
    res.DeliveredQuantity = src.DeliveredQuantity;
    res.Rank = src.Rank;
    res.Name = src.Name;
    res.Description = src.Description;
    res.Code = src.Code;
    res.QuantityUnit = src.QuantityUnit;
    res.PriceUnit = src.PriceUnit;
    res.ItemNumber = src.ItemNumber;
    res.Url = src.Url;
    res.ProductCategoryKey = src.ProductCategoryKey;
    res.ProductFamilyKey = src.ProductFamilyKey;
    res.ProductTypeKey = src.ProductTypeKey;
    res.Supplier = src.Supplier;
    res.SupplierCode = src.SupplierCode;
    res.Thumbnail = src.Thumbnail;
    res.VATInfo = src.VATInfo;
    res.VAT = src.VAT;
    res.UnitCost = src.UnitCost;
    res.UnitMinimumPrice = src.UnitMinimumPrice;
    res.UnitListPrice = src.UnitListPrice;
    res.ExtraInfo = Create_ProductExtraDataFieldArray_From(src.ExtraInfo);
    res.RawExtraInfo = src.RawExtraInfo;
    res.IsSubscription = src.IsSubscription;
    res.SubscriptionUnit = src.SubscriptionUnit;
    res.SubscriptionQuantity = src.SubscriptionQuantity;
    res.SubscriptionStart = Create_Date_From(src.SubscriptionStart);
    res.ERPDiscountPercent = src.ERPDiscountPercent;
    res.ERPDiscountAmount = src.ERPDiscountAmount;
    res.DiscountPercent = src.DiscountPercent;
    res.DiscountAmount = src.DiscountAmount;
    res.UserValueOverride = enums.ValueOverride[src.UserValueOverride];
    res.EarningPercent = src.EarningPercent;
    res.EarningAmount = src.EarningAmount;
    res.SubTotal = src.SubTotal;
    res.TotalPrice = src.TotalPrice;
    res.Rights = src.Rights;
    res.Rule = src.Rule;
    res.ExtraField1 = src.ExtraField1;
    res.ExtraField2 = src.ExtraField2;
    res.ExtraField3 = src.ExtraField3;
    res.ExtraField4 = src.ExtraField4;
    res.ExtraField5 = src.ExtraField5;
    return res;
}
exports.Create_QuoteLine_From = Create_QuoteLine_From;
function Create_QuoteLineArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteLine_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteLineArray_From = Create_QuoteLineArray_From;
function Create_QuoteLineArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteLineArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteLineArrayArray_From = Create_QuoteLineArrayArray_From;
function Create_QuoteLineConfiguration_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.QuoteLineConfigurationId = src.QuoteLineConfigurationId;
    res.FieldName = src.FieldName;
    res.Label = src.Label;
    res.Tooltip = src.Tooltip;
    res.Editable = src.Editable;
    res.InUse = src.InUse;
    res.Mandatory = src.Mandatory;
    res.Rank = src.Rank;
    res.RestrictEdit = src.RestrictEdit;
    return res;
}
exports.Create_QuoteLineConfiguration_From = Create_QuoteLineConfiguration_From;
function Create_QuoteLineConfigurationArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteLineConfiguration_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteLineConfigurationArray_From = Create_QuoteLineConfigurationArray_From;
function Create_QuoteLineConfigurationArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteLineConfigurationArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteLineConfigurationArrayArray_From = Create_QuoteLineConfigurationArrayArray_From;
function Create_QuoteListItem_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ERPQuoteListItemKey = src.ERPQuoteListItemKey;
    res.DisplayValue = src.DisplayValue;
    res.DisplayDescription = src.DisplayDescription;
    return res;
}
exports.Create_QuoteListItem_From = Create_QuoteListItem_From;
function Create_QuoteListItemArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteListItem_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteListItemArray_From = Create_QuoteListItemArray_From;
function Create_QuoteListItemArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteListItemArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteListItemArrayArray_From = Create_QuoteListItemArrayArray_From;
function Create_QuotePublishDocuments_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.QuoteDocumentId = src.QuoteDocumentId;
    res.QuotedProductsId = src.QuotedProductsId;
    res.QuoteAttachmentIds = src.QuoteAttachmentIds;
    res.MailBody = src.MailBody;
    res.MailSubject = src.MailSubject;
    res.ToEmail = src.ToEmail;
    res.ToFullName = src.ToFullName;
    res.ErrorMessage = src.ErrorMessage;
    return res;
}
exports.Create_QuotePublishDocuments_From = Create_QuotePublishDocuments_From;
function Create_QuotePublishDocumentsArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuotePublishDocuments_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuotePublishDocumentsArray_From = Create_QuotePublishDocumentsArray_From;
function Create_QuotePublishDocumentsArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuotePublishDocumentsArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuotePublishDocumentsArrayArray_From = Create_QuotePublishDocumentsArrayArray_From;
function Create_QuoteVersion_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.QuoteVersionId = src.QuoteVersionId;
    res.ERPQuoteVersionKey = src.ERPQuoteVersionKey;
    res.QuoteId = src.QuoteId;
    res.Description = src.Description;
    res.Number = src.Number;
    res.State = enums.QuoteVersionState[src.State];
    res.ArchivedState = enums.QuoteVersionState[src.ArchivedState];
    res.Status = enums.QuoteStatus[src.Status];
    res.Reason = src.Reason;
    res.LikelyQuoteAlternativeId = src.LikelyQuoteAlternativeId;
    res.SentDate = Create_Date_From(src.SentDate);
    res.FollowupId = src.FollowupId;
    res.ExpirationDate = Create_Date_From(src.ExpirationDate);
    res.DeliveryCountryId = src.DeliveryCountryId;
    res.HasOwnDeliveryAddress = src.HasOwnDeliveryAddress;
    res.InvoiceCountryId = src.InvoiceCountryId;
    res.HasOwnInvoiceAddress = src.HasOwnInvoiceAddress;
    res.ERPPaymentTermsKey = src.ERPPaymentTermsKey;
    res.ERPPaymentTypeKey = src.ERPPaymentTypeKey;
    res.ERPDeliveryTermsKey = src.ERPDeliveryTermsKey;
    res.ERPDeliveryTypeKey = src.ERPDeliveryTypeKey;
    res.Rank = src.Rank;
    res.ApprovedBy = src.ApprovedBy;
    res.ApprovedText = src.ApprovedText;
    res.ApprovedRegisteredBy = src.ApprovedRegisteredBy;
    res.ApprovedRegisteredDate = Create_Date_From(src.ApprovedRegisteredDate);
    res.ExtraField1 = src.ExtraField1;
    res.ExtraField2 = src.ExtraField2;
    res.ExtraField3 = src.ExtraField3;
    res.ExtraField4 = src.ExtraField4;
    res.ExtraField5 = src.ExtraField5;
    res.LastRecalculated = Create_Date_From(src.LastRecalculated);
    res.Updated = Create_Date_From(src.Updated);
    res.UpdatedAssociateId = src.UpdatedAssociateId;
    res.Registered = Create_Date_From(src.Registered);
    res.RegisteredAssociateId = src.RegisteredAssociateId;
    res.RequestAssociateId = src.RequestAssociateId;
    res.RequestComment = src.RequestComment;
    res.QuoteAlternatives = Create_QuoteAlternativeArray_From(src.QuoteAlternatives);
    return res;
}
exports.Create_QuoteVersion_From = Create_QuoteVersion_From;
function Create_QuoteVersionArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteVersion_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteVersionArray_From = Create_QuoteVersionArray_From;
function Create_QuoteVersionArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteVersionArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteVersionArrayArray_From = Create_QuoteVersionArrayArray_From;
function Create_QuoteVersionAttachment_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.DocumentId = src.DocumentId;
    res.Included = src.Included;
    return res;
}
exports.Create_QuoteVersionAttachment_From = Create_QuoteVersionAttachment_From;
function Create_QuoteVersionAttachmentArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteVersionAttachment_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteVersionAttachmentArray_From = Create_QuoteVersionAttachmentArray_From;
function Create_QuoteVersionAttachmentArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteVersionAttachmentArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteVersionAttachmentArrayArray_From = Create_QuoteVersionAttachmentArrayArray_From;
function Create_QuoteVersionButtonState_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Action = enums.QuoteVersionButtonAction[src.Action];
    res.ImageHint = src.ImageHint;
    res.DisplayText = src.DisplayText;
    res.TooltipText = src.TooltipText;
    res.Enabled = src.Enabled;
    return res;
}
exports.Create_QuoteVersionButtonState_From = Create_QuoteVersionButtonState_From;
function Create_QuoteVersionButtonStateArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteVersionButtonState_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteVersionButtonStateArray_From = Create_QuoteVersionButtonStateArray_From;
function Create_QuoteVersionButtonStateArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteVersionButtonStateArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteVersionButtonStateArrayArray_From = Create_QuoteVersionButtonStateArrayArray_From;
function Create_QuoteVersionStatusInformation_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Status = enums.QuoteStatus[src.Status];
    res.IconHint = src.IconHint;
    res.DisplayMessage = src.DisplayMessage;
    res.DisplayTooltip = src.DisplayTooltip;
    return res;
}
exports.Create_QuoteVersionStatusInformation_From = Create_QuoteVersionStatusInformation_From;
function Create_QuoteVersionStatusInformationArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteVersionStatusInformation_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteVersionStatusInformationArray_From = Create_QuoteVersionStatusInformationArray_From;
function Create_QuoteVersionStatusInformationArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteVersionStatusInformationArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteVersionStatusInformationArrayArray_From = Create_QuoteVersionStatusInformationArrayArray_From;
function Create_QuoteVersionValidated_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.IsOk = src.IsOk;
    res.UserExplanation = src.UserExplanation;
    res.TechExplanation = src.TechExplanation;
    res.ErrorCode = src.ErrorCode;
    res.ChangedSale = Create_Sale_From(src.ChangedSale);
    res.ChangedQuote = Create_Quote_From(src.ChangedQuote);
    res.ChangedQuoteVersion = Create_QuoteVersion_From(src.ChangedQuoteVersion);
    res.ChangedQuoteAlternatives = Create_QuoteAlternativeRecalculatedArray_From(src.ChangedQuoteAlternatives);
    res.Status = enums.QuoteStatus[src.Status];
    return res;
}
exports.Create_QuoteVersionValidated_From = Create_QuoteVersionValidated_From;
function Create_QuoteVersionValidatedArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteVersionValidated_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteVersionValidatedArray_From = Create_QuoteVersionValidatedArray_From;
function Create_QuoteVersionValidatedArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteVersionValidatedArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteVersionValidatedArrayArray_From = Create_QuoteVersionValidatedArrayArray_From;
function Create_QuoteVersionWorkflowState_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ActionButtons = Create_QuoteVersionButtonStateArray_From(src.ActionButtons);
    res.StateImage = Create_QuoteVersionButtonState_From(src.StateImage);
    res.UpdatePricesButton = Create_QuoteVersionButtonState_From(src.UpdatePricesButton);
    res.Status = Create_QuoteVersionStatusInformation_From(src.Status);
    return res;
}
exports.Create_QuoteVersionWorkflowState_From = Create_QuoteVersionWorkflowState_From;
function Create_QuoteVersionWorkflowStateArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteVersionWorkflowState_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteVersionWorkflowStateArray_From = Create_QuoteVersionWorkflowStateArray_From;
function Create_QuoteVersionWorkflowStateArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteVersionWorkflowStateArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteVersionWorkflowStateArrayArray_From = Create_QuoteVersionWorkflowStateArrayArray_From;
function Create_ErpConnection_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ErpConnectionId = src.ErpConnectionId;
    res.ErpConnectorId = src.ErpConnectorId;
    res.DisplayName = src.DisplayName;
    res.DisplayDescription = src.DisplayDescription;
    res.Active = src.Active;
    res.ConnectionId = src.ConnectionId;
    res.MostRecentTimestamp = src.MostRecentTimestamp;
    res.ConfigFields = Create_StringDictionary_From(src.ConfigFields);
    res.Deleted = src.Deleted;
    res.AllAccess = src.AllAccess;
    res.UserGroupAccessIds = src.UserGroupAccessIds;
    res.AssociateAccessIds = src.AssociateAccessIds;
    return res;
}
exports.Create_ErpConnection_From = Create_ErpConnection_From;
function Create_ErpConnectionArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ErpConnection_From(src[i]);
        }
    }
    return res;
}
exports.Create_ErpConnectionArray_From = Create_ErpConnectionArray_From;
function Create_ErpConnectionArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ErpConnectionArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ErpConnectionArrayArray_From = Create_ErpConnectionArrayArray_From;
function Create_ErpConnectionData_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ErpConnectionId = src.ErpConnectionId;
    res.ConnectionName = src.ConnectionName;
    res.Connected = src.Connected;
    res.ErpFields = Create_FieldMetadataArray_From(src.ErpFields);
    res.CrmActorType = enums.CrmActorType[src.CrmActorType];
    res.ErpActorType = enums.ErpActorType[src.ErpActorType];
    res.ErpActorTypes = Create_ErpActorType_From(src.ErpActorTypes);
    return res;
}
exports.Create_ErpConnectionData_From = Create_ErpConnectionData_From;
function Create_ErpConnectionDataArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ErpConnectionData_From(src[i]);
        }
    }
    return res;
}
exports.Create_ErpConnectionDataArray_From = Create_ErpConnectionDataArray_From;
function Create_ErpConnectionDataArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ErpConnectionDataArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ErpConnectionDataArrayArray_From = Create_ErpConnectionDataArrayArray_From;
function Create_ErpConnectionListMapping_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.CrmList = Create_MDOListItem_From(src.CrmList);
    res.ErpListName = src.ErpListName;
    res.ErpCrmListItemMappings = Create_ErpCrmListItemMappingArray_From(src.ErpCrmListItemMappings);
    res.ErpActorTypeName = src.ErpActorTypeName;
    res.ErpFieldId = src.ErpFieldId;
    return res;
}
exports.Create_ErpConnectionListMapping_From = Create_ErpConnectionListMapping_From;
function Create_ErpConnectionListMappingArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ErpConnectionListMapping_From(src[i]);
        }
    }
    return res;
}
exports.Create_ErpConnectionListMappingArray_From = Create_ErpConnectionListMappingArray_From;
function Create_ErpConnectionListMappingArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ErpConnectionListMappingArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ErpConnectionListMappingArrayArray_From = Create_ErpConnectionListMappingArrayArray_From;
function Create_ErpConnectionListMappingContainer_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ErpListItemMappings = Create_ErpConnectionListMappingArray_From(src.ErpListItemMappings);
    res.ErpConnectionId = src.ErpConnectionId;
    res.ErpConnectionName = src.ErpConnectionName;
    return res;
}
exports.Create_ErpConnectionListMappingContainer_From = Create_ErpConnectionListMappingContainer_From;
function Create_ErpConnectionListMappingContainerArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ErpConnectionListMappingContainer_From(src[i]);
        }
    }
    return res;
}
exports.Create_ErpConnectionListMappingContainerArray_From = Create_ErpConnectionListMappingContainerArray_From;
function Create_ErpConnectionListMappingContainerArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ErpConnectionListMappingContainerArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ErpConnectionListMappingContainerArrayArray_From = Create_ErpConnectionListMappingContainerArrayArray_From;
function Create_ErpCrmListItemMapping_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ErpListItemId = src.ErpListItemId;
    res.ErpListItemName = src.ErpListItemName;
    res.CrmListItem = Create_MDOListItem_From(src.CrmListItem);
    return res;
}
exports.Create_ErpCrmListItemMapping_From = Create_ErpCrmListItemMapping_From;
function Create_ErpCrmListItemMappingArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ErpCrmListItemMapping_From(src[i]);
        }
    }
    return res;
}
exports.Create_ErpCrmListItemMappingArray_From = Create_ErpCrmListItemMappingArray_From;
function Create_ErpCrmListItemMappingArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ErpCrmListItemMappingArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ErpCrmListItemMappingArrayArray_From = Create_ErpCrmListItemMappingArrayArray_From;
function Create_ErpSyncFieldValue_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.DisplayName = src.DisplayName;
    res.CrmFieldKey = src.CrmFieldKey;
    res.Value = src.Value;
    res.DisplayValue = src.DisplayValue;
    res.SyncToCrm = src.SyncToCrm;
    res.SyncToErp = src.SyncToErp;
    return res;
}
exports.Create_ErpSyncFieldValue_From = Create_ErpSyncFieldValue_From;
function Create_ErpSyncFieldValueArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ErpSyncFieldValue_From(src[i]);
        }
    }
    return res;
}
exports.Create_ErpSyncFieldValueArray_From = Create_ErpSyncFieldValueArray_From;
function Create_ErpSyncFieldValueArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ErpSyncFieldValueArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ErpSyncFieldValueArrayArray_From = Create_ErpSyncFieldValueArrayArray_From;
function Create_ErpSyncActorTypeMapping_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ErpConnectionId = src.ErpConnectionId;
    res.IsActive = src.IsActive;
    res.FieldMappings = Create_ErpSyncFieldMappingArray_From(src.FieldMappings);
    res.ActorTypeErp = enums.ErpActorType[src.ActorTypeErp];
    res.ActorTypeCrm = enums.CrmActorType[src.ActorTypeCrm];
    return res;
}
exports.Create_ErpSyncActorTypeMapping_From = Create_ErpSyncActorTypeMapping_From;
function Create_ErpSyncActorTypeMappingArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ErpSyncActorTypeMapping_From(src[i]);
        }
    }
    return res;
}
exports.Create_ErpSyncActorTypeMappingArray_From = Create_ErpSyncActorTypeMappingArray_From;
function Create_ErpSyncActorTypeMappingArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ErpSyncActorTypeMappingArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ErpSyncActorTypeMappingArrayArray_From = Create_ErpSyncActorTypeMappingArrayArray_From;
function Create_ErpSyncConnectionSummary_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.DisplayName = src.DisplayName;
    res.DisplayDescription = src.DisplayDescription;
    res.Active = src.Active;
    res.Deleted = src.Deleted;
    res.LastSync = Create_Date_From(src.LastSync);
    res.Actors = Create_ErpSyncActorSummaryArray_From(src.Actors);
    return res;
}
exports.Create_ErpSyncConnectionSummary_From = Create_ErpSyncConnectionSummary_From;
function Create_ErpSyncConnectionSummaryArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ErpSyncConnectionSummary_From(src[i]);
        }
    }
    return res;
}
exports.Create_ErpSyncConnectionSummaryArray_From = Create_ErpSyncConnectionSummaryArray_From;
function Create_ErpSyncConnectionSummaryArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ErpSyncConnectionSummaryArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ErpSyncConnectionSummaryArrayArray_From = Create_ErpSyncConnectionSummaryArrayArray_From;
function Create_ErpSyncConnectorEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ErpConnectorId = src.ErpConnectorId;
    res.DisplayName = src.DisplayName;
    res.URL = src.URL;
    res.Deleted = src.Deleted;
    return res;
}
exports.Create_ErpSyncConnectorEntity_From = Create_ErpSyncConnectorEntity_From;
function Create_ErpSyncConnectorEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ErpSyncConnectorEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_ErpSyncConnectorEntityArray_From = Create_ErpSyncConnectorEntityArray_From;
function Create_ErpSyncConnectorEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ErpSyncConnectorEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ErpSyncConnectorEntityArrayArray_From = Create_ErpSyncConnectorEntityArrayArray_From;
function Create_ErpSyncDefaultValue_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ErpFieldId = src.ErpFieldId;
    res.DefaultValue = src.DefaultValue;
    res.HasFirstSyncDefaultValue = src.HasFirstSyncDefaultValue;
    res.FirstSyncDefaultValue = src.FirstSyncDefaultValue;
    res.PromptUser = src.PromptUser;
    res.Mandatory = src.Mandatory;
    res.ErpFieldKey = src.ErpFieldKey;
    res.FieldType = enums.FieldMetadataType[src.FieldType];
    res.ListName = src.ListName;
    res.Access = enums.FieldAccess[src.Access];
    return res;
}
exports.Create_ErpSyncDefaultValue_From = Create_ErpSyncDefaultValue_From;
function Create_ErpSyncDefaultValueArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ErpSyncDefaultValue_From(src[i]);
        }
    }
    return res;
}
exports.Create_ErpSyncDefaultValueArray_From = Create_ErpSyncDefaultValueArray_From;
function Create_ErpSyncDefaultValueArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ErpSyncDefaultValueArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ErpSyncDefaultValueArrayArray_From = Create_ErpSyncDefaultValueArrayArray_From;
function Create_ErpSyncEngine_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    return res;
}
exports.Create_ErpSyncEngine_From = Create_ErpSyncEngine_From;
function Create_ErpSyncEngineArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ErpSyncEngine_From(src[i]);
        }
    }
    return res;
}
exports.Create_ErpSyncEngineArray_From = Create_ErpSyncEngineArray_From;
function Create_ErpSyncEngineArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ErpSyncEngineArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ErpSyncEngineArrayArray_From = Create_ErpSyncEngineArrayArray_From;
function Create_ErpSyncEngineStatus_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.IsRunning = src.IsRunning;
    res.StatusMessage = src.StatusMessage;
    res.Interval = Create_Duration_From(src.Interval);
    return res;
}
exports.Create_ErpSyncEngineStatus_From = Create_ErpSyncEngineStatus_From;
function Create_ErpSyncEngineStatusArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ErpSyncEngineStatus_From(src[i]);
        }
    }
    return res;
}
exports.Create_ErpSyncEngineStatusArray_From = Create_ErpSyncEngineStatusArray_From;
function Create_ErpSyncEngineStatusArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ErpSyncEngineStatusArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ErpSyncEngineStatusArrayArray_From = Create_ErpSyncEngineStatusArrayArray_From;
function Create_ErpSyncFieldMapping_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ErpFieldId = src.ErpFieldId;
    res.CrmFieldKey = src.CrmFieldKey;
    res.CrmDisplayName = src.CrmDisplayName;
    res.CrmDisplayTooltip = src.CrmDisplayTooltip;
    res.ErpFieldKey = src.ErpFieldKey;
    res.FieldType = enums.FieldMetadataType[src.FieldType];
    res.ErpDisplayName = src.ErpDisplayName;
    res.ErpDisplayTooltip = src.ErpDisplayTooltip;
    res.SyncToCrm = src.SyncToCrm;
    res.SyncToErp = src.SyncToErp;
    res.ShowInGui = src.ShowInGui;
    res.ShowInSearch = src.ShowInSearch;
    res.AlreadyMapped = src.AlreadyMapped;
    res.MissingInERP = src.MissingInERP;
    res.MissingInCRM = src.MissingInCRM;
    res.Access = enums.FieldAccess[src.Access];
    res.ListReference = src.ListReference;
    return res;
}
exports.Create_ErpSyncFieldMapping_From = Create_ErpSyncFieldMapping_From;
function Create_ErpSyncFieldMappingArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ErpSyncFieldMapping_From(src[i]);
        }
    }
    return res;
}
exports.Create_ErpSyncFieldMappingArray_From = Create_ErpSyncFieldMappingArray_From;
function Create_ErpSyncFieldMappingArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ErpSyncFieldMappingArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ErpSyncFieldMappingArrayArray_From = Create_ErpSyncFieldMappingArrayArray_From;
function Create_ErpSyncActorSummary_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ActorType = enums.ErpActorType[src.ActorType];
    res.HasMappings = src.HasMappings;
    res.Defaults = src.Defaults;
    res.Mappings = src.Mappings;
    return res;
}
exports.Create_ErpSyncActorSummary_From = Create_ErpSyncActorSummary_From;
function Create_ErpSyncActorSummaryArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ErpSyncActorSummary_From(src[i]);
        }
    }
    return res;
}
exports.Create_ErpSyncActorSummaryArray_From = Create_ErpSyncActorSummaryArray_From;
function Create_ErpSyncActorSummaryArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ErpSyncActorSummaryArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ErpSyncActorSummaryArrayArray_From = Create_ErpSyncActorSummaryArrayArray_From;
function Create_ResourceOverride_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ResourceName = src.ResourceName;
    res.ResourceValue = src.ResourceValue;
    res.Culture = src.Culture;
    res.IsActive = src.IsActive;
    return res;
}
exports.Create_ResourceOverride_From = Create_ResourceOverride_From;
function Create_ResourceOverrideArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ResourceOverride_From(src[i]);
        }
    }
    return res;
}
exports.Create_ResourceOverrideArray_From = Create_ResourceOverrideArray_From;
function Create_ResourceOverrideArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ResourceOverrideArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ResourceOverrideArrayArray_From = Create_ResourceOverrideArrayArray_From;
function Create_Contact_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ContactId = src.ContactId;
    res.Name = src.Name;
    res.OrgNr = src.OrgNr;
    res.Department = src.Department;
    res.URL = src.URL;
    res.City = src.City;
    res.DirectPhone = src.DirectPhone;
    res.AssociateId = src.AssociateId;
    res.CountryId = src.CountryId;
    res.EmailAddress = src.EmailAddress;
    res.Kananame = src.Kananame;
    res.EmailAddressName = src.EmailAddressName;
    res.URLName = src.URLName;
    res.AssociateFullName = src.AssociateFullName;
    res.BusinessName = src.BusinessName;
    res.CategoryName = src.CategoryName;
    res.CountryName = src.CountryName;
    res.Address = Create_Address_From(src.Address);
    res.FormattedAddress = src.FormattedAddress;
    res.FullName = src.FullName;
    res.IsOwnerContact = src.IsOwnerContact;
    res.ActiveErpLinks = src.ActiveErpLinks;
    res.Number1 = src.Number1;
    res.Number2 = src.Number2;
    return res;
}
exports.Create_Contact_From = Create_Contact_From;
function Create_ContactArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Contact_From(src[i]);
        }
    }
    return res;
}
exports.Create_ContactArray_From = Create_ContactArray_From;
function Create_ContactArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ContactArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ContactArrayArray_From = Create_ContactArrayArray_From;
function Create_ContactActivity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ContactId = src.ContactId;
    res.Department = src.Department;
    res.OrgNr = src.OrgNr;
    res.Name = src.Name;
    res.URL = src.URL;
    res.AssociateFullName = src.AssociateFullName;
    res.Action = Create_ContactAction_From(src.Action);
    res.ActionTime = Create_Date_From(src.ActionTime);
    res.Category = src.Category;
    res.ActivityPersonName = src.ActivityPersonName;
    res.ActionId = src.ActionId;
    res.PersonId = src.PersonId;
    res.ActivityPersonId = src.ActivityPersonId;
    res.AssociateId = src.AssociateId;
    return res;
}
exports.Create_ContactActivity_From = Create_ContactActivity_From;
function Create_ContactActivityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ContactActivity_From(src[i]);
        }
    }
    return res;
}
exports.Create_ContactActivityArray_From = Create_ContactActivityArray_From;
function Create_ContactActivityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ContactActivityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ContactActivityArrayArray_From = Create_ContactActivityArrayArray_From;
function Create_ContactEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ContactId = src.ContactId;
    res.Name = src.Name;
    res.Department = src.Department;
    res.OrgNr = src.OrgNr;
    res.Number1 = src.Number1;
    res.Number2 = src.Number2;
    res.UpdatedDate = Create_Date_From(src.UpdatedDate);
    res.CreatedDate = Create_Date_From(src.CreatedDate);
    res.Emails = Create_EntityElementArray_From(src.Emails);
    res.Interests = Create_SelectableMDOListItemArray_From(src.Interests);
    res.Urls = Create_EntityElementArray_From(src.Urls);
    res.Phones = Create_EntityElementArray_From(src.Phones);
    res.Faxes = Create_EntityElementArray_From(src.Faxes);
    res.Description = src.Description;
    res.UpdatedBy = Create_Associate_From(src.UpdatedBy);
    res.CreatedBy = Create_Associate_From(src.CreatedBy);
    res.Associate = Create_Associate_From(src.Associate);
    res.Business = Create_Business_From(src.Business);
    res.Category = Create_Category_From(src.Category);
    res.Country = Create_Country_From(src.Country);
    res.Persons = Create_PersonArray_From(src.Persons);
    res.NoMailing = src.NoMailing;
    res.Kananame = src.Kananame;
    res.Xstop = src.Xstop;
    res.ActiveInterests = src.ActiveInterests;
    res.GroupId = src.GroupId;
    res.ActiveStatusMonitorId = src.ActiveStatusMonitorId;
    res.SupportAssociate = Create_Associate_From(src.SupportAssociate);
    res.TicketPriority = Create_TicketPriority_From(src.TicketPriority);
    res.CustomerLanguage = Create_CustomerLanguage_From(src.CustomerLanguage);
    res.Deleted = src.Deleted;
    res.DbiAgentId = src.DbiAgentId;
    res.DbiLastSyncronized = Create_Date_From(src.DbiLastSyncronized);
    res.DbiKey = src.DbiKey;
    res.DbiLastModified = Create_Date_From(src.DbiLastModified);
    res.SupportPerson = Create_Person_From(src.SupportPerson);
    res.Address = Create_Address_From(src.Address);
    res.Source = src.Source;
    res.ActiveErpLinks = src.ActiveErpLinks;
    res.BounceEmails = src.BounceEmails;
    res.Domains = src.Domains;
    res.UserDefinedFields = src.UserDefinedFields;
    res.ExtraFields = src.ExtraFields;
    res.CustomFields = src.CustomFields;
    return res;
}
exports.Create_ContactEntity_From = Create_ContactEntity_From;
function Create_ContactEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ContactEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_ContactEntityArray_From = Create_ContactEntityArray_From;
function Create_ContactEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ContactEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ContactEntityArrayArray_From = Create_ContactEntityArrayArray_From;
function Create_ContactSummary_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.Contact = Create_Contact_From(src.Contact);
    res.Tickets = Create_TicketSummaryItemArray_From(src.Tickets);
    res.Followups = Create_ActivitySummaryItemArray_From(src.Followups);
    res.Documents = Create_ActivitySummaryItemArray_From(src.Documents);
    res.Sales = Create_SaleSummaryItemArray_From(src.Sales);
    res.Chats = Create_ChatSummaryItemArray_From(src.Chats);
    return res;
}
exports.Create_ContactSummary_From = Create_ContactSummary_From;
function Create_ContactSummaryArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ContactSummary_From(src[i]);
        }
    }
    return res;
}
exports.Create_ContactSummaryArray_From = Create_ContactSummaryArray_From;
function Create_ContactSummaryArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ContactSummaryArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ContactSummaryArrayArray_From = Create_ContactSummaryArrayArray_From;
function Create_PreviewContact_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.ContactId = src.ContactId;
    res.Name = src.Name;
    res.Department = src.Department;
    res.CountryId = src.CountryId;
    res.Number2 = src.Number2;
    res.DirectPhone = src.DirectPhone;
    res.URL = src.URL;
    res.EmailAddress = src.EmailAddress;
    res.BusinessName = src.BusinessName;
    res.CategoryName = src.CategoryName;
    res.AssociateFullName = src.AssociateFullName;
    res.Address = Create_Address_From(src.Address);
    return res;
}
exports.Create_PreviewContact_From = Create_PreviewContact_From;
function Create_PreviewContactArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PreviewContact_From(src[i]);
        }
    }
    return res;
}
exports.Create_PreviewContactArray_From = Create_PreviewContactArray_From;
function Create_PreviewContactArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PreviewContactArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_PreviewContactArrayArray_From = Create_PreviewContactArrayArray_From;
function Create_ConsentInfo_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ConsentPersonId = src.ConsentPersonId;
    res.Comment = src.Comment;
    res.Registered = Create_Date_From(src.Registered);
    res.RegisteredAssociateId = src.RegisteredAssociateId;
    res.Updated = Create_Date_From(src.Updated);
    res.UpdatedAssociateId = src.UpdatedAssociateId;
    res.LegalBaseId = src.LegalBaseId;
    res.LegalBaseKey = src.LegalBaseKey;
    res.LegalBaseName = src.LegalBaseName;
    res.ConsentPurposeId = src.ConsentPurposeId;
    res.ConsentPurposeKey = src.ConsentPurposeKey;
    res.ConsentPurposeName = src.ConsentPurposeName;
    res.ConsentSourceId = src.ConsentSourceId;
    res.ConsentSourceKey = src.ConsentSourceKey;
    res.ConsentSourceName = src.ConsentSourceName;
    return res;
}
exports.Create_ConsentInfo_From = Create_ConsentInfo_From;
function Create_ConsentInfoArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ConsentInfo_From(src[i]);
        }
    }
    return res;
}
exports.Create_ConsentInfoArray_From = Create_ConsentInfoArray_From;
function Create_ConsentInfoArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ConsentInfoArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ConsentInfoArrayArray_From = Create_ConsentInfoArrayArray_From;
function Create_ConsentPerson_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ConsentPersonId = src.ConsentPersonId;
    res.ConsentSource = Create_ConsentSource_From(src.ConsentSource);
    res.LegalBase = Create_LegalBase_From(src.LegalBase);
    res.PersonId = src.PersonId;
    res.ConsentPurpose = Create_ConsentPurpose_From(src.ConsentPurpose);
    res.Comment = src.Comment;
    return res;
}
exports.Create_ConsentPerson_From = Create_ConsentPerson_From;
function Create_ConsentPersonArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ConsentPerson_From(src[i]);
        }
    }
    return res;
}
exports.Create_ConsentPersonArray_From = Create_ConsentPersonArray_From;
function Create_ConsentPersonArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ConsentPersonArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ConsentPersonArrayArray_From = Create_ConsentPersonArrayArray_From;
function Create_Person_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Position = src.Position;
    res.PersonId = src.PersonId;
    res.Mrmrs = src.Mrmrs;
    res.Firstname = src.Firstname;
    res.Lastname = src.Lastname;
    res.MiddleName = src.MiddleName;
    res.Title = src.Title;
    res.Description = src.Description;
    res.Email = src.Email;
    res.FullName = src.FullName;
    res.DirectPhone = src.DirectPhone;
    res.FormalName = src.FormalName;
    res.CountryId = src.CountryId;
    res.ContactId = src.ContactId;
    res.ContactName = src.ContactName;
    res.Retired = src.Retired;
    res.Rank = src.Rank;
    res.ActiveInterests = src.ActiveInterests;
    res.ContactDepartment = src.ContactDepartment;
    res.ContactCountryId = src.ContactCountryId;
    res.ContactOrgNr = src.ContactOrgNr;
    res.FaxPhone = src.FaxPhone;
    res.MobilePhone = src.MobilePhone;
    res.ContactPhone = src.ContactPhone;
    res.AssociateName = src.AssociateName;
    res.AssociateId = src.AssociateId;
    res.UsePersonAddress = src.UsePersonAddress;
    res.ContactFax = src.ContactFax;
    res.Kanafname = src.Kanafname;
    res.Kanalname = src.Kanalname;
    res.Post1 = src.Post1;
    res.Post2 = src.Post2;
    res.Post3 = src.Post3;
    res.EmailName = src.EmailName;
    res.ContactFullName = src.ContactFullName;
    res.ActiveErpLinks = src.ActiveErpLinks;
    res.TicketPriorityId = src.TicketPriorityId;
    res.SupportLanguageId = src.SupportLanguageId;
    res.SupportAssociateId = src.SupportAssociateId;
    res.CategoryName = src.CategoryName;
    return res;
}
exports.Create_Person_From = Create_Person_From;
function Create_PersonArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Person_From(src[i]);
        }
    }
    return res;
}
exports.Create_PersonArray_From = Create_PersonArray_From;
function Create_PersonArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PersonArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_PersonArrayArray_From = Create_PersonArrayArray_From;
function Create_PersonEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.PersonId = src.PersonId;
    res.Firstname = src.Firstname;
    res.MiddleName = src.MiddleName;
    res.Lastname = src.Lastname;
    res.Mrmrs = src.Mrmrs;
    res.Title = src.Title;
    res.UpdatedDate = Create_Date_From(src.UpdatedDate);
    res.CreatedDate = Create_Date_From(src.CreatedDate);
    res.BirthDate = Create_BirthDate_From(src.BirthDate);
    res.CreatedBy = Create_Associate_From(src.CreatedBy);
    res.Emails = Create_EntityElementArray_From(src.Emails);
    res.Description = src.Description;
    res.IsAssociate = src.IsAssociate;
    res.PrivatePhones = Create_EntityElementArray_From(src.PrivatePhones);
    res.Faxes = Create_EntityElementArray_From(src.Faxes);
    res.MobilePhones = Create_EntityElementArray_From(src.MobilePhones);
    res.OfficePhones = Create_EntityElementArray_From(src.OfficePhones);
    res.OtherPhones = Create_EntityElementArray_From(src.OtherPhones);
    res.Position = Create_Position_From(src.Position);
    res.UpdatedBy = Create_Associate_From(src.UpdatedBy);
    res.Contact = Create_Contact_From(src.Contact);
    res.Country = Create_Country_From(src.Country);
    res.Interests = Create_SelectableMDOListItemArray_From(src.Interests);
    res.PersonNumber = src.PersonNumber;
    res.FullName = src.FullName;
    res.NoMailing = src.NoMailing;
    res.UsePersonAddress = src.UsePersonAddress;
    res.Retired = src.Retired;
    res.Urls = Create_EntityElementArray_From(src.Urls);
    res.FormalName = src.FormalName;
    res.Address = Create_Address_From(src.Address);
    res.Post3 = src.Post3;
    res.Post2 = src.Post2;
    res.Post1 = src.Post1;
    res.Kanalname = src.Kanalname;
    res.Kanafname = src.Kanafname;
    res.CorrespondingAssociate = Create_Associate_From(src.CorrespondingAssociate);
    res.Category = Create_Category_From(src.Category);
    res.Business = Create_Business_From(src.Business);
    res.Associate = Create_Associate_From(src.Associate);
    res.Salutation = src.Salutation;
    res.ActiveInterests = src.ActiveInterests;
    res.SupportAssociate = Create_Associate_From(src.SupportAssociate);
    res.TicketPriority = Create_TicketPriority_From(src.TicketPriority);
    res.CustomerLanguage = Create_CustomerLanguage_From(src.CustomerLanguage);
    res.DbiAgentId = src.DbiAgentId;
    res.DbiKey = src.DbiKey;
    res.DbiLastModified = Create_Date_From(src.DbiLastModified);
    res.DbiLastSyncronized = Create_Date_From(src.DbiLastSyncronized);
    res.SentInfo = src.SentInfo;
    res.ShowContactTickets = src.ShowContactTickets;
    res.UserInfo = Create_UserInfo_From(src.UserInfo);
    res.ChatEmails = Create_EntityElementArray_From(src.ChatEmails);
    res.InternetPhones = Create_EntityElementArray_From(src.InternetPhones);
    res.Source = src.Source;
    res.ActiveErpLinks = src.ActiveErpLinks;
    res.ShipmentTypes = Create_SelectableMDOListItemArray_From(src.ShipmentTypes);
    res.Consents = Create_ConsentInfoArray_From(src.Consents);
    res.BounceEmails = src.BounceEmails;
    res.ActiveStatusMonitorId = src.ActiveStatusMonitorId;
    res.UserDefinedFields = src.UserDefinedFields;
    res.ExtraFields = src.ExtraFields;
    res.CustomFields = src.CustomFields;
    return res;
}
exports.Create_PersonEntity_From = Create_PersonEntity_From;
function Create_PersonEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PersonEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_PersonEntityArray_From = Create_PersonEntityArray_From;
function Create_PersonEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PersonEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_PersonEntityArrayArray_From = Create_PersonEntityArrayArray_From;
function Create_PersonImage_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.PersonId = src.PersonId;
    res.ImageData = Create_ArrayBuffer_From(src.ImageData);
    return res;
}
exports.Create_PersonImage_From = Create_PersonImage_From;
function Create_PersonImageArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PersonImage_From(src[i]);
        }
    }
    return res;
}
exports.Create_PersonImageArray_From = Create_PersonImageArray_From;
function Create_PersonImageArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PersonImageArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_PersonImageArrayArray_From = Create_PersonImageArrayArray_From;
function Create_PersonSummary_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.Person = Create_Person_From(src.Person);
    res.Tickets = Create_TicketSummaryItemArray_From(src.Tickets);
    res.Followups = Create_ActivitySummaryItemArray_From(src.Followups);
    res.Documents = Create_ActivitySummaryItemArray_From(src.Documents);
    res.Sales = Create_SaleSummaryItemArray_From(src.Sales);
    res.Chats = Create_ChatSummaryItemArray_From(src.Chats);
    return res;
}
exports.Create_PersonSummary_From = Create_PersonSummary_From;
function Create_PersonSummaryArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PersonSummary_From(src[i]);
        }
    }
    return res;
}
exports.Create_PersonSummaryArray_From = Create_PersonSummaryArray_From;
function Create_PersonSummaryArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PersonSummaryArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_PersonSummaryArrayArray_From = Create_PersonSummaryArrayArray_From;
function Create_ResolvedPerson_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Person = Create_PersonEntity_From(src.Person);
    res.PersonCreated = src.PersonCreated;
    return res;
}
exports.Create_ResolvedPerson_From = Create_ResolvedPerson_From;
function Create_ResolvedPersonArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ResolvedPerson_From(src[i]);
        }
    }
    return res;
}
exports.Create_ResolvedPersonArray_From = Create_ResolvedPersonArray_From;
function Create_ResolvedPersonArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ResolvedPersonArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ResolvedPersonArrayArray_From = Create_ResolvedPersonArrayArray_From;
function Create_TemporaryKeyInfo_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Domain = enums.TemporaryKeyDomain[src.Domain];
    res.TargetId = src.TargetId;
    res.PersonId = src.PersonId;
    res.IsExpired = src.IsExpired;
    return res;
}
exports.Create_TemporaryKeyInfo_From = Create_TemporaryKeyInfo_From;
function Create_TemporaryKeyInfoArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TemporaryKeyInfo_From(src[i]);
        }
    }
    return res;
}
exports.Create_TemporaryKeyInfoArray_From = Create_TemporaryKeyInfoArray_From;
function Create_TemporaryKeyInfoArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TemporaryKeyInfoArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TemporaryKeyInfoArrayArray_From = Create_TemporaryKeyInfoArrayArray_From;
function Create_Sale_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ContactName = src.ContactName;
    res.SaleDate = Create_Date_From(src.SaleDate);
    res.SaleId = src.SaleId;
    res.Probability = src.Probability;
    res.Title = src.Title;
    res.Amount = src.Amount;
    res.Currency = src.Currency;
    res.ProjectName = src.ProjectName;
    res.AssociateFullName = src.AssociateFullName;
    res.Description = src.Description;
    res.Status = enums.SaleStatus[src.Status];
    res.WeightedAmount = src.WeightedAmount;
    res.ProjectId = src.ProjectId;
    res.EarningPercent = src.EarningPercent;
    res.Earning = src.Earning;
    res.ContactId = src.ContactId;
    res.AssociateId = src.AssociateId;
    res.PersonId = src.PersonId;
    res.SaleTypeId = src.SaleTypeId;
    res.SaleTypeName = src.SaleTypeName;
    res.PersonFullName = src.PersonFullName;
    res.Completed = enums.ActivityStatus[src.Completed];
    res.ActiveErpLinks = src.ActiveErpLinks;
    res.NextDueDate = Create_Date_From(src.NextDueDate);
    res.Number = src.Number;
    return res;
}
exports.Create_Sale_From = Create_Sale_From;
function Create_SaleArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Sale_From(src[i]);
        }
    }
    return res;
}
exports.Create_SaleArray_From = Create_SaleArray_From;
function Create_SaleArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SaleArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SaleArrayArray_From = Create_SaleArrayArray_From;
function Create_SaleEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Appointment = Create_Appointment_From(src.Appointment);
    res.Associate = Create_Associate_From(src.Associate);
    res.UpdatedBy = Create_Associate_From(src.UpdatedBy);
    res.CreatedBy = Create_Associate_From(src.CreatedBy);
    res.Contact = Create_Contact_From(src.Contact);
    res.Project = Create_Project_From(src.Project);
    res.SaleText = src.SaleText;
    res.Person = Create_Person_From(src.Person);
    res.Currency = Create_Currency_From(src.Currency);
    res.Competitor = Create_Competitor_From(src.Competitor);
    res.Credited = Create_Credited_From(src.Credited);
    res.Rating = Create_Rating_From(src.Rating);
    res.Reason = Create_Reason_From(src.Reason);
    res.Source = Create_Source_From(src.Source);
    res.Status = enums.SaleStatus[src.Status];
    res.Saledate = Create_Date_From(src.Saledate);
    res.Amount = src.Amount;
    res.SaleId = src.SaleId;
    res.Earning = src.Earning;
    res.EarningPercent = src.EarningPercent;
    res.Heading = src.Heading;
    res.Number = src.Number;
    res.Probability = src.Probability;
    res.CreatedDate = Create_Date_From(src.CreatedDate);
    res.UpdatedDate = Create_Date_From(src.UpdatedDate);
    res.Completed = enums.ActivityStatus[src.Completed];
    res.ActiveLinks = src.ActiveLinks;
    res.Links = Create_LinkArray_From(src.Links);
    res.NextDueDate = Create_Date_From(src.NextDueDate);
    res.Postit = src.Postit;
    res.SaleType = Create_SaleType_From(src.SaleType);
    res.ReasonSold = Create_ReasonSold_From(src.ReasonSold);
    res.ReasonStalled = Create_ReasonStalled_From(src.ReasonStalled);
    res.ReopenDate = Create_Date_From(src.ReopenDate);
    res.SaleStakeholders = Create_SaleStakeholderArray_From(src.SaleStakeholders);
    res.ActiveErpLinks = src.ActiveErpLinks;
    res.UserDefinedFields = src.UserDefinedFields;
    res.ExtraFields = src.ExtraFields;
    res.CustomFields = src.CustomFields;
    res.PublishEventDate = Create_Date_From(src.PublishEventDate);
    res.PublishTo = Create_Date_From(src.PublishTo);
    res.PublishFrom = Create_Date_From(src.PublishFrom);
    res.IsPublished = src.IsPublished;
    res.VisibleFor = Create_VisibleForArray_From(src.VisibleFor);
    return res;
}
exports.Create_SaleEntity_From = Create_SaleEntity_From;
function Create_SaleEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SaleEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_SaleEntityArray_From = Create_SaleEntityArray_From;
function Create_SaleEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SaleEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SaleEntityArrayArray_From = Create_SaleEntityArrayArray_From;
function Create_SaleStakeholder_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.StakeholderRoleName = src.StakeholderRoleName;
    res.Comment = src.Comment;
    res.StakeholderRoleId = src.StakeholderRoleId;
    res.CountryId = src.CountryId;
    res.PersonId = src.PersonId;
    res.EmailDescription = src.EmailDescription;
    res.EmailId = src.EmailId;
    res.EmailAddress = src.EmailAddress;
    res.PhoneId = src.PhoneId;
    res.ContactName = src.ContactName;
    res.ContactId = src.ContactId;
    res.SaleId = src.SaleId;
    res.Mrmrs = src.Mrmrs;
    res.Firstname = src.Firstname;
    res.MiddleName = src.MiddleName;
    res.Lastname = src.Lastname;
    res.SaleStakeholderId = src.SaleStakeholderId;
    res.Rank = src.Rank;
    res.Phone = src.Phone;
    return res;
}
exports.Create_SaleStakeholder_From = Create_SaleStakeholder_From;
function Create_SaleStakeholderArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SaleStakeholder_From(src[i]);
        }
    }
    return res;
}
exports.Create_SaleStakeholderArray_From = Create_SaleStakeholderArray_From;
function Create_SaleStakeholderArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SaleStakeholderArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SaleStakeholderArrayArray_From = Create_SaleStakeholderArrayArray_From;
function Create_SaleSummary_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.BaseCurrency = src.BaseCurrency;
    res.OwnCurrency = src.OwnCurrency;
    res.SoldTotalBaseCurrency = src.SoldTotalBaseCurrency;
    res.Sold = src.Sold;
    res.SoldTotalOwnCurrency = src.SoldTotalOwnCurrency;
    res.Lost = src.Lost;
    res.LostTotalBaseCurrency = src.LostTotalBaseCurrency;
    res.LostTotalOwnCurrency = src.LostTotalOwnCurrency;
    res.Open = src.Open;
    res.OpenTotalBaseCurrency = src.OpenTotalBaseCurrency;
    res.OpenTotalOwnCurrency = src.OpenTotalOwnCurrency;
    res.OpenWeightedBaseCurrency = src.OpenWeightedBaseCurrency;
    res.OpenWeightedOwnCurrency = src.OpenWeightedOwnCurrency;
    res.PreviousOverdue = src.PreviousOverdue;
    res.PreviousOverdueTotalBaseCurrency = src.PreviousOverdueTotalBaseCurrency;
    res.PreviousOverdueTotalOwnCurrency = src.PreviousOverdueTotalOwnCurrency;
    res.PreviousOverdueWeightedBaseCurrency = src.PreviousOverdueWeightedBaseCurrency;
    res.PreviousOverdueWeightedOwnCurrency = src.PreviousOverdueWeightedOwnCurrency;
    res.CurrentOverdue = src.CurrentOverdue;
    res.CurrentOverdueTotalBaseCurrency = src.CurrentOverdueTotalBaseCurrency;
    res.CurrentOverdueTotalOwnCurrency = src.CurrentOverdueTotalOwnCurrency;
    res.CurrentOverdueWeightedBaseCurrency = src.CurrentOverdueWeightedBaseCurrency;
    res.CurrentOverdueWeightedOwnCurrency = src.CurrentOverdueWeightedOwnCurrency;
    res.FutureOpen = src.FutureOpen;
    res.FutureOpenTotalBaseCurrency = src.FutureOpenTotalBaseCurrency;
    res.FutureOpenTotalOwnCurrency = src.FutureOpenTotalOwnCurrency;
    res.FutureOpenWeightedBaseCurrency = src.FutureOpenWeightedBaseCurrency;
    res.FutureOpenWeightedOwnCurrency = src.FutureOpenWeightedOwnCurrency;
    return res;
}
exports.Create_SaleSummary_From = Create_SaleSummary_From;
function Create_SaleSummaryArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SaleSummary_From(src[i]);
        }
    }
    return res;
}
exports.Create_SaleSummaryArray_From = Create_SaleSummaryArray_From;
function Create_SaleSummaryArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SaleSummaryArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SaleSummaryArrayArray_From = Create_SaleSummaryArrayArray_From;
function Create_SaleSummaryItem_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.SaleId = src.SaleId;
    res.SaleDate = Create_Date_From(src.SaleDate);
    res.Probability = src.Probability;
    res.Heading = src.Heading;
    res.Amount = src.Amount;
    res.Currency = src.Currency;
    res.AmountInBaseCurrency = src.AmountInBaseCurrency;
    res.Status = enums.SaleStatus[src.Status];
    res.Completed = enums.ActivityStatus[src.Completed];
    res.Registered = Create_Date_From(src.Registered);
    return res;
}
exports.Create_SaleSummaryItem_From = Create_SaleSummaryItem_From;
function Create_SaleSummaryItemArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SaleSummaryItem_From(src[i]);
        }
    }
    return res;
}
exports.Create_SaleSummaryItemArray_From = Create_SaleSummaryItemArray_From;
function Create_SaleSummaryItemArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SaleSummaryItemArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SaleSummaryItemArrayArray_From = Create_SaleSummaryItemArrayArray_From;
function Create_PhoneListItem_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.PersonDirectPhone = src.PersonDirectPhone;
    res.PersonCellPhone = src.PersonCellPhone;
    res.PersonPrivatePhone = src.PersonPrivatePhone;
    res.PersonFaxNumber = src.PersonFaxNumber;
    res.PersonPagerNumber = src.PersonPagerNumber;
    res.PersonEmail = src.PersonEmail;
    res.Id = src.Id;
    res.Name = src.Name;
    res.Tooltip = src.Tooltip;
    res.UniqueId = src.UniqueId;
    return res;
}
exports.Create_PhoneListItem_From = Create_PhoneListItem_From;
function Create_PhoneListItemArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PhoneListItem_From(src[i]);
        }
    }
    return res;
}
exports.Create_PhoneListItemArray_From = Create_PhoneListItemArray_From;
function Create_PhoneListItemArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PhoneListItemArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_PhoneListItemArrayArray_From = Create_PhoneListItemArrayArray_From;
function Create_PhoneListPreferences_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.SearchCompany = src.SearchCompany;
    res.SearchFirstname = src.SearchFirstname;
    res.SearchLastname = src.SearchLastname;
    res.SearchDepartment = src.SearchDepartment;
    res.SearchModeCompany = enums.StringSearchType[src.SearchModeCompany];
    res.SearchModeDepartment = enums.StringSearchType[src.SearchModeDepartment];
    res.SearchModeFirstname = enums.StringSearchType[src.SearchModeFirstname];
    res.SearchModeLastname = enums.StringSearchType[src.SearchModeLastname];
    return res;
}
exports.Create_PhoneListPreferences_From = Create_PhoneListPreferences_From;
function Create_PhoneListPreferencesArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PhoneListPreferences_From(src[i]);
        }
    }
    return res;
}
exports.Create_PhoneListPreferencesArray_From = Create_PhoneListPreferencesArray_From;
function Create_PhoneListPreferencesArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PhoneListPreferencesArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_PhoneListPreferencesArrayArray_From = Create_PhoneListPreferencesArrayArray_From;
function Create_Project_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ProjectId = src.ProjectId;
    res.Name = src.Name;
    res.Description = src.Description;
    res.URL = src.URL;
    res.Type = src.Type;
    res.AssociateId = src.AssociateId;
    res.AssociateFullName = src.AssociateFullName;
    res.TypeId = src.TypeId;
    res.Updated = Create_Date_From(src.Updated);
    res.StatusId = src.StatusId;
    res.Status = src.Status;
    res.TextId = src.TextId;
    res.PublishTo = Create_Date_From(src.PublishTo);
    res.PublishFrom = Create_Date_From(src.PublishFrom);
    res.IsPublished = src.IsPublished;
    res.URLName = src.URLName;
    res.ProjectNumber = src.ProjectNumber;
    res.ActiveErpLinks = src.ActiveErpLinks;
    return res;
}
exports.Create_Project_From = Create_Project_From;
function Create_ProjectArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Project_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProjectArray_From = Create_ProjectArray_From;
function Create_ProjectArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ProjectArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProjectArrayArray_From = Create_ProjectArrayArray_From;
function Create_ProjectEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ProjectId = src.ProjectId;
    res.Name = src.Name;
    res.ProjectNumber = src.ProjectNumber;
    res.ProjectMembers = Create_ProjectMemberArray_From(src.ProjectMembers);
    res.Urls = Create_EntityElementArray_From(src.Urls);
    res.CreatedDate = Create_Date_From(src.CreatedDate);
    res.UpdatedDate = Create_Date_From(src.UpdatedDate);
    res.Description = src.Description;
    res.Postit = src.Postit;
    res.CreatedBy = Create_Associate_From(src.CreatedBy);
    res.UpdatedBy = Create_Associate_From(src.UpdatedBy);
    res.Associate = Create_Associate_From(src.Associate);
    res.ProjectStatus = Create_ProjectStatus_From(src.ProjectStatus);
    res.ProjectType = Create_ProjectType_From(src.ProjectType);
    res.HasImage = src.HasImage;
    res.ImageDescription = src.ImageDescription;
    res.ActiveStatusMonitorId = src.ActiveStatusMonitorId;
    res.Links = Create_LinkArray_From(src.Links);
    res.ActiveLinks = src.ActiveLinks;
    res.Completed = src.Completed;
    res.NextMilestoneDate = Create_Date_From(src.NextMilestoneDate);
    res.NmdAppointmentId = src.NmdAppointmentId;
    res.EndDate = Create_Date_From(src.EndDate);
    res.ActiveErpLinks = src.ActiveErpLinks;
    res.UserDefinedFields = src.UserDefinedFields;
    res.ExtraFields = src.ExtraFields;
    res.CustomFields = src.CustomFields;
    res.PublishEventDate = Create_Date_From(src.PublishEventDate);
    res.PublishTo = Create_Date_From(src.PublishTo);
    res.PublishFrom = Create_Date_From(src.PublishFrom);
    res.IsPublished = src.IsPublished;
    return res;
}
exports.Create_ProjectEntity_From = Create_ProjectEntity_From;
function Create_ProjectEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ProjectEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProjectEntityArray_From = Create_ProjectEntityArray_From;
function Create_ProjectEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ProjectEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProjectEntityArrayArray_From = Create_ProjectEntityArrayArray_From;
function Create_ProjectEvent_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.AssociateFullName = src.AssociateFullName;
    res.Description = src.Description;
    res.ProjectId = src.ProjectId;
    res.EventName = src.EventName;
    res.AssociateId = src.AssociateId;
    res.IsSignedOn = src.IsSignedOn;
    res.SignOffConfirmationText = src.SignOffConfirmationText;
    res.SignOffText = src.SignOffText;
    res.SignOnConfirmationText = src.SignOnConfirmationText;
    res.SignOnText = src.SignOnText;
    res.EventDate = Create_Date_From(src.EventDate);
    res.Enabled = src.Enabled;
    res.SignOff = src.SignOff;
    res.SignOffTaskEnable = src.SignOffTaskEnable;
    res.SignOnTaskEnable = src.SignOnTaskEnable;
    res.SignOn = src.SignOn;
    res.SignOffTaskId = src.SignOffTaskId;
    res.SignOnTaskId = src.SignOnTaskId;
    res.SignOffTriggersAssign = src.SignOffTriggersAssign;
    res.SignOnTriggersAssign = src.SignOnTriggersAssign;
    res.SignOnPersonId = src.SignOnPersonId;
    res.SignOffPersonId = src.SignOffPersonId;
    return res;
}
exports.Create_ProjectEvent_From = Create_ProjectEvent_From;
function Create_ProjectEventArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ProjectEvent_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProjectEventArray_From = Create_ProjectEventArray_From;
function Create_ProjectEventArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ProjectEventArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProjectEventArrayArray_From = Create_ProjectEventArrayArray_From;
function Create_ProjectEventEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.SignOffConfirmationText = src.SignOffConfirmationText;
    res.SignOffText = src.SignOffText;
    res.SignOnConfirmationText = src.SignOnConfirmationText;
    res.SignOnText = src.SignOnText;
    res.EventDate = Create_Date_From(src.EventDate);
    res.Enabled = src.Enabled;
    res.CreatedDate = Create_Date_From(src.CreatedDate);
    res.SignOff = src.SignOff;
    res.SignOffTaskEnable = src.SignOffTaskEnable;
    res.SignOffTaskId = src.SignOffTaskId;
    res.SignOffTriggersAssign = src.SignOffTriggersAssign;
    res.SignOn = src.SignOn;
    res.SignOnTaskEnable = src.SignOnTaskEnable;
    res.SignOnTaskId = src.SignOnTaskId;
    res.SignOnTriggersAssign = src.SignOnTriggersAssign;
    res.UpdatedDate = Create_Date_From(src.UpdatedDate);
    res.CreatedBy = Create_Associate_From(src.CreatedBy);
    res.UpdatedBy = Create_Associate_From(src.UpdatedBy);
    res.ProjectId = src.ProjectId;
    res.Id = src.Id;
    res.PublishFrom = Create_Date_From(src.PublishFrom);
    res.PublishType = enums.PublishType[src.PublishType];
    res.PublishTo = Create_Date_From(src.PublishTo);
    res.VisibleForCategories = Create_MDOListItemArray_From(src.VisibleForCategories);
    res.VisibleForPersonInterests = Create_MDOListItemArray_From(src.VisibleForPersonInterests);
    res.IsPublished = src.IsPublished;
    res.IsVisibleForMembers = src.IsVisibleForMembers;
    res.IsVisibleForCategories = src.IsVisibleForCategories;
    res.IsVisibleForPersonInterests = src.IsVisibleForPersonInterests;
    res.ProjectEventId = src.ProjectEventId;
    return res;
}
exports.Create_ProjectEventEntity_From = Create_ProjectEventEntity_From;
function Create_ProjectEventEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ProjectEventEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProjectEventEntityArray_From = Create_ProjectEventEntityArray_From;
function Create_ProjectEventEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ProjectEventEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProjectEventEntityArrayArray_From = Create_ProjectEventEntityArrayArray_From;
function Create_ProjectMember_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ProjectmemberId = src.ProjectmemberId;
    res.ContactId = src.ContactId;
    res.ProjectId = src.ProjectId;
    res.ContactName = src.ContactName;
    res.ContactDepartment = src.ContactDepartment;
    res.ProjectName = src.ProjectName;
    res.EmailId = src.EmailId;
    res.EmailAddress = src.EmailAddress;
    res.CountryId = src.CountryId;
    res.Firstname = src.Firstname;
    res.MiddleName = src.MiddleName;
    res.Lastname = src.Lastname;
    res.PersonId = src.PersonId;
    res.Mrmrs = src.Mrmrs;
    res.ProjectMemberTypeName = src.ProjectMemberTypeName;
    res.Phone = src.Phone;
    res.PhoneId = src.PhoneId;
    res.ProjectMemberTypeId = src.ProjectMemberTypeId;
    res.EmailAddressName = src.EmailAddressName;
    res.Comment = src.Comment;
    res.FullName = src.FullName;
    return res;
}
exports.Create_ProjectMember_From = Create_ProjectMember_From;
function Create_ProjectMemberArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ProjectMember_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProjectMemberArray_From = Create_ProjectMemberArray_From;
function Create_ProjectMemberArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ProjectMemberArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProjectMemberArrayArray_From = Create_ProjectMemberArrayArray_From;
function Create_ActivityInformationListItem_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Date = Create_Date_From(src.Date);
    res.ActivityInformation = Create_ActivitySummary_From(src.ActivityInformation);
    return res;
}
exports.Create_ActivityInformationListItem_From = Create_ActivityInformationListItem_From;
function Create_ActivityInformationListItemArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ActivityInformationListItem_From(src[i]);
        }
    }
    return res;
}
exports.Create_ActivityInformationListItemArray_From = Create_ActivityInformationListItemArray_From;
function Create_ActivityInformationListItemArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ActivityInformationListItemArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ActivityInformationListItemArrayArray_From = Create_ActivityInformationListItemArrayArray_From;
function Create_ActivitySummary_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.NumBusyActivities = src.NumBusyActivities;
    res.NumFreeActivities = src.NumFreeActivities;
    res.PercentageBusy = src.PercentageBusy;
    return res;
}
exports.Create_ActivitySummary_From = Create_ActivitySummary_From;
function Create_ActivitySummaryArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ActivitySummary_From(src[i]);
        }
    }
    return res;
}
exports.Create_ActivitySummaryArray_From = Create_ActivitySummaryArray_From;
function Create_ActivitySummaryArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ActivitySummaryArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ActivitySummaryArrayArray_From = Create_ActivitySummaryArrayArray_From;
function Create_ActivitySummaryItem_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.AppointmentId = src.AppointmentId;
    res.DocumentId = src.DocumentId;
    res.Date = Create_Date_From(src.Date);
    res.Description = src.Description;
    res.Completed = enums.ActivityStatus[src.Completed];
    res.Registered = Create_Date_From(src.Registered);
    return res;
}
exports.Create_ActivitySummaryItem_From = Create_ActivitySummaryItem_From;
function Create_ActivitySummaryItemArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ActivitySummaryItem_From(src[i]);
        }
    }
    return res;
}
exports.Create_ActivitySummaryItemArray_From = Create_ActivitySummaryItemArray_From;
function Create_ActivitySummaryItemArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ActivitySummaryItemArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ActivitySummaryItemArrayArray_From = Create_ActivitySummaryItemArrayArray_From;
function Create_AddressSyncData_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.AddressId = src.AddressId;
    res.AddressType = enums.AddressType[src.AddressType];
    res.Address1 = src.Address1;
    res.Address2 = src.Address2;
    res.Address3 = src.Address3;
    res.City = src.City;
    res.County = src.County;
    res.ZipCode = src.ZipCode;
    res.State = src.State;
    res.Latitude = src.Latitude;
    res.Longitude = src.Longitude;
    res.FormattedAddress = src.FormattedAddress;
    return res;
}
exports.Create_AddressSyncData_From = Create_AddressSyncData_From;
function Create_AddressSyncDataArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_AddressSyncData_From(src[i]);
        }
    }
    return res;
}
exports.Create_AddressSyncDataArray_From = Create_AddressSyncDataArray_From;
function Create_AddressSyncDataArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_AddressSyncDataArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_AddressSyncDataArrayArray_From = Create_AddressSyncDataArrayArray_From;
function Create_AlarmData_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.AppointmentId = src.AppointmentId;
    res.StartTime = Create_Date_From(src.StartTime);
    res.EndDate = Create_Date_From(src.EndDate);
    res.AlarmTime = Create_Date_From(src.AlarmTime);
    res.PersonId = src.PersonId;
    res.PersonFullName = src.PersonFullName;
    res.ContactName = src.ContactName;
    res.ProjectId = src.ProjectId;
    res.ProjectName = src.ProjectName;
    res.AppointmentText = src.AppointmentText;
    res.SaleId = src.SaleId;
    res.SaleName = src.SaleName;
    res.Location = src.Location;
    res.AppointmentType = enums.AppointmentType[src.AppointmentType];
    res.ContactId = src.ContactId;
    res.AssignmentStatus = enums.AssignmentStatus[src.AssignmentStatus];
    res.InvitationStatus = enums.InvitationStatus[src.InvitationStatus];
    res.BookingType = enums.BookingType[src.BookingType];
    res.FormalName = src.FormalName;
    res.TaskName = src.TaskName;
    res.ContactDepartment = src.ContactDepartment;
    res.ContactFullName = src.ContactFullName;
    res.JoinVideomeetUrl = src.JoinVideomeetUrl;
    return res;
}
exports.Create_AlarmData_From = Create_AlarmData_From;
function Create_AlarmDataArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_AlarmData_From(src[i]);
        }
    }
    return res;
}
exports.Create_AlarmDataArray_From = Create_AlarmDataArray_From;
function Create_AlarmDataArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_AlarmDataArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_AlarmDataArrayArray_From = Create_AlarmDataArrayArray_From;
function Create_Appointment_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.AppointmentId = src.AppointmentId;
    res.StartDate = Create_Date_From(src.StartDate);
    res.EndDate = Create_Date_From(src.EndDate);
    res.Type = enums.AppointmentType[src.Type];
    res.Task = src.Task;
    res.AssociateFullName = src.AssociateFullName;
    res.ContactName = src.ContactName;
    res.Description = src.Description;
    res.PersonFullName = src.PersonFullName;
    res.PersonId = src.PersonId;
    res.ContactId = src.ContactId;
    res.ProjectId = src.ProjectId;
    res.ProjectName = src.ProjectName;
    res.IsPublished = src.IsPublished;
    res.AssociateId = src.AssociateId;
    res.ColorIndex = src.ColorIndex;
    res.IsFree = src.IsFree;
    res.HasAlarm = src.HasAlarm;
    res.IsAlldayEvent = src.IsAlldayEvent;
    res.Private = enums.AppointmentPrivate[src.Private];
    res.PriorityId = src.PriorityId;
    res.PriorityName = src.PriorityName;
    res.TaskType = enums.TaskType[src.TaskType];
    res.IsBookingMain = src.IsBookingMain;
    res.IsRecurrence = src.IsRecurrence;
    res.IsBooking = src.IsBooking;
    res.ActiveDate = Create_Date_From(src.ActiveDate);
    res.AssignmentStatus = enums.AssignmentStatus[src.AssignmentStatus];
    res.InvitationStatus = enums.InvitationStatus[src.InvitationStatus];
    res.BookingType = enums.BookingType[src.BookingType];
    res.Completed = enums.ActivityStatus[src.Completed];
    res.RecurringPattern = enums.RecurrencePattern[src.RecurringPattern];
    res.RecurringStartDate = Create_Date_From(src.RecurringStartDate);
    res.RecurringEndDate = Create_Date_From(src.RecurringEndDate);
    res.MotherId = src.MotherId;
    res.AssignedBy = src.AssignedBy;
    res.AssignedByFullName = src.AssignedByFullName;
    res.RejectReason = src.RejectReason;
    res.Location = src.Location;
    res.AlarmLeadTime = Create_Duration_From(src.AlarmLeadTime);
    res.SaleId = src.SaleId;
    res.SaleName = src.SaleName;
    res.AssociateName = src.AssociateName;
    res.CreatedDate = Create_Date_From(src.CreatedDate);
    res.CreatedBy = src.CreatedBy;
    res.CreatedByFullName = src.CreatedByFullName;
    res.CreatedByAssociateId = src.CreatedByAssociateId;
    res.CautionWarning = enums.AppointmentCautionWarning[src.CautionWarning];
    res.JoinVideomeetUrl = src.JoinVideomeetUrl;
    res.Title = src.Title;
    res.Agenda = src.Agenda;
    res.InternalNotes = src.InternalNotes;
    return res;
}
exports.Create_Appointment_From = Create_Appointment_From;
function Create_AppointmentArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Appointment_From(src[i]);
        }
    }
    return res;
}
exports.Create_AppointmentArray_From = Create_AppointmentArray_From;
function Create_AppointmentArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_AppointmentArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_AppointmentArrayArray_From = Create_AppointmentArrayArray_From;
function Create_AppointmentEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Associate = Create_Associate_From(src.Associate);
    res.Contact = Create_Contact_From(src.Contact);
    res.CreatedBy = Create_Associate_From(src.CreatedBy);
    res.UpdatedBy = Create_Associate_From(src.UpdatedBy);
    res.CreatedDate = Create_Date_From(src.CreatedDate);
    res.AppointmentId = src.AppointmentId;
    res.Description = src.Description;
    res.StartDate = Create_Date_From(src.StartDate);
    res.EndDate = Create_Date_From(src.EndDate);
    res.InvitedPerson = Create_Person_From(src.InvitedPerson);
    res.Person = Create_Person_From(src.Person);
    res.MotherId = src.MotherId;
    res.Priority = Create_Priority_From(src.Priority);
    res.Private = enums.AppointmentPrivate[src.Private];
    res.Project = Create_Project_From(src.Project);
    res.Type = enums.AppointmentType[src.Type];
    res.UpdatedDate = Create_Date_From(src.UpdatedDate);
    res.Completed = enums.ActivityStatus[src.Completed];
    res.ActiveLinks = src.ActiveLinks;
    res.Links = Create_LinkArray_From(src.Links);
    res.AlarmLeadTime = Create_Duration_From(src.AlarmLeadTime);
    res.HasAlarm = src.HasAlarm;
    res.ColorIndex = src.ColorIndex;
    res.IsFree = src.IsFree;
    res.IsAlldayEvent = src.IsAlldayEvent;
    res.LagTime = Create_Duration_From(src.LagTime);
    res.LeadTime = Create_Duration_From(src.LeadTime);
    res.Location = src.Location;
    res.RejectCounter = src.RejectCounter;
    res.RejectReason = src.RejectReason;
    res.Recurrence = Create_RecurrenceInfo_From(src.Recurrence);
    res.Participants = Create_ParticipantInfoArray_From(src.Participants);
    res.AssignmentStatus = enums.AssignmentStatus[src.AssignmentStatus];
    res.InvitationStatus = enums.InvitationStatus[src.InvitationStatus];
    res.BookingType = enums.BookingType[src.BookingType];
    res.ActiveDate = Create_Date_From(src.ActiveDate);
    res.HasConflict = src.HasConflict;
    res.AssignedBy = Create_Associate_From(src.AssignedBy);
    res.MotherAssociate = Create_Associate_From(src.MotherAssociate);
    res.Task = Create_TaskListItem_From(src.Task);
    res.PreferredTZLocation = src.PreferredTZLocation;
    res.Sale = Create_Sale_From(src.Sale);
    res.SuggestedAppointmentId = src.SuggestedAppointmentId;
    res.IsMileStone = src.IsMileStone;
    res.CautionWarning = enums.AppointmentCautionWarning[src.CautionWarning];
    res.JoinVideomeetUrl = src.JoinVideomeetUrl;
    res.CentralserviceVideomeetId = src.CentralserviceVideomeetId;
    res.Title = src.Title;
    res.Agenda = src.Agenda;
    res.InternalNotes = src.InternalNotes;
    res.UserDefinedFields = src.UserDefinedFields;
    res.ExtraFields = src.ExtraFields;
    res.CustomFields = src.CustomFields;
    res.PublishEventDate = Create_Date_From(src.PublishEventDate);
    res.PublishTo = Create_Date_From(src.PublishTo);
    res.PublishFrom = Create_Date_From(src.PublishFrom);
    res.IsPublished = src.IsPublished;
    res.VisibleFor = Create_VisibleForArray_From(src.VisibleFor);
    return res;
}
exports.Create_AppointmentEntity_From = Create_AppointmentEntity_From;
function Create_AppointmentEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_AppointmentEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_AppointmentEntityArray_From = Create_AppointmentEntityArray_From;
function Create_AppointmentEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_AppointmentEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_AppointmentEntityArrayArray_From = Create_AppointmentEntityArrayArray_From;
function Create_AppointmentSyncData_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.AlarmTime = Create_Date_From(src.AlarmTime);
    res.AppointmentId = src.AppointmentId;
    res.AppointmentText = src.AppointmentText;
    res.ContactDepartment = src.ContactDepartment;
    res.ContactFullName = src.ContactFullName;
    res.ContactName = src.ContactName;
    res.ContactId = src.ContactId;
    res.EndDate = Create_Date_From(src.EndDate);
    res.HasAlarm = src.HasAlarm;
    res.IsAllDay = src.IsAllDay;
    res.IsAssignment = src.IsAssignment;
    res.IsBusy = src.IsBusy;
    res.IsCompleted = src.IsCompleted;
    res.IsInvitation = src.IsInvitation;
    res.IsTentative = src.IsTentative;
    res.Location = src.Location;
    res.Participants = Create_ParticipantSyncDataArray_From(src.Participants);
    res.PersonFormalName = src.PersonFormalName;
    res.PersonFullName = src.PersonFullName;
    res.PersonId = src.PersonId;
    res.ProjectId = src.ProjectId;
    res.ProjectName = src.ProjectName;
    res.SaleId = src.SaleId;
    res.SaleName = src.SaleName;
    res.StartDate = Create_Date_From(src.StartDate);
    res.TaskName = src.TaskName;
    return res;
}
exports.Create_AppointmentSyncData_From = Create_AppointmentSyncData_From;
function Create_AppointmentSyncDataArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_AppointmentSyncData_From(src[i]);
        }
    }
    return res;
}
exports.Create_AppointmentSyncDataArray_From = Create_AppointmentSyncDataArray_From;
function Create_AppointmentSyncDataArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_AppointmentSyncDataArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_AppointmentSyncDataArrayArray_From = Create_AppointmentSyncDataArrayArray_From;
function Create_DayInformationListItem_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ActivityInformation = Create_ActivitySummary_From(src.ActivityInformation);
    res.RedLetterInformation = Create_RedLetterSummary_From(src.RedLetterInformation);
    res.Date = Create_Date_From(src.Date);
    return res;
}
exports.Create_DayInformationListItem_From = Create_DayInformationListItem_From;
function Create_DayInformationListItemArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DayInformationListItem_From(src[i]);
        }
    }
    return res;
}
exports.Create_DayInformationListItemArray_From = Create_DayInformationListItemArray_From;
function Create_DayInformationListItemArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DayInformationListItemArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_DayInformationListItemArrayArray_From = Create_DayInformationListItemArrayArray_From;
function Create_MultiAlarmData_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Alarms = Create_AlarmDataArray_From(src.Alarms);
    res.PollingInterval = src.PollingInterval;
    res.SilentAfter = src.SilentAfter;
    return res;
}
exports.Create_MultiAlarmData_From = Create_MultiAlarmData_From;
function Create_MultiAlarmDataArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_MultiAlarmData_From(src[i]);
        }
    }
    return res;
}
exports.Create_MultiAlarmDataArray_From = Create_MultiAlarmDataArray_From;
function Create_MultiAlarmDataArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_MultiAlarmDataArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_MultiAlarmDataArrayArray_From = Create_MultiAlarmDataArrayArray_From;
function Create_ParticipantInfo_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.AssociateId = src.AssociateId;
    res.PersonId = src.PersonId;
    res.ContactId = src.ContactId;
    res.EmailId = src.EmailId;
    res.SendEmail = src.SendEmail;
    res.InvitationStatus = enums.InvitationStatus[src.InvitationStatus];
    return res;
}
exports.Create_ParticipantInfo_From = Create_ParticipantInfo_From;
function Create_ParticipantInfoArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ParticipantInfo_From(src[i]);
        }
    }
    return res;
}
exports.Create_ParticipantInfoArray_From = Create_ParticipantInfoArray_From;
function Create_ParticipantInfoArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ParticipantInfoArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ParticipantInfoArrayArray_From = Create_ParticipantInfoArrayArray_From;
function Create_ParticipantSyncData_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.PersonId = src.PersonId;
    res.PersonFirstName = src.PersonFirstName;
    res.PersonMiddleName = src.PersonMiddleName;
    res.PersonLastname = src.PersonLastname;
    res.PersonMrmrs = src.PersonMrmrs;
    res.PersonTitle = src.PersonTitle;
    res.PersonPosition = src.PersonPosition;
    res.PersonAcademicTitle = src.PersonAcademicTitle;
    res.PersonFormalName = src.PersonFormalName;
    res.PersonFullName = src.PersonFullName;
    res.ContactId = src.ContactId;
    res.ContactName = src.ContactName;
    res.ContactDepartment = src.ContactDepartment;
    res.ContactBusiness = src.ContactBusiness;
    res.ContactCountry = src.ContactCountry;
    res.ContactCategory = src.ContactCategory;
    res.ContactFullName = src.ContactFullName;
    res.EMail = src.EMail;
    res.PhonePrivate = src.PhonePrivate;
    res.PhoneFax = src.PhoneFax;
    res.PhoneMobile = src.PhoneMobile;
    res.PhoneDirect = src.PhoneDirect;
    res.PhoneContact = src.PhoneContact;
    res.Messenger = src.Messenger;
    res.Voip = src.Voip;
    res.ContactUrl = src.ContactUrl;
    res.Url = src.Url;
    res.StreetAddress = Create_AddressSyncData_From(src.StreetAddress);
    res.PostalAddress = Create_AddressSyncData_From(src.PostalAddress);
    res.Country = src.Country;
    res.PersonAddress = Create_AddressSyncData_From(src.PersonAddress);
    res.PersonCountry = src.PersonCountry;
    res.ParticipantStatus = enums.AppointmentStatus[src.ParticipantStatus];
    return res;
}
exports.Create_ParticipantSyncData_From = Create_ParticipantSyncData_From;
function Create_ParticipantSyncDataArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ParticipantSyncData_From(src[i]);
        }
    }
    return res;
}
exports.Create_ParticipantSyncDataArray_From = Create_ParticipantSyncDataArray_From;
function Create_ParticipantSyncDataArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ParticipantSyncDataArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ParticipantSyncDataArrayArray_From = Create_ParticipantSyncDataArrayArray_From;
function Create_RedLetterDetails_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.OwnCountryDayTexts = src.OwnCountryDayTexts;
    res.OtherCountryDayTexts = src.OtherCountryDayTexts;
    return res;
}
exports.Create_RedLetterDetails_From = Create_RedLetterDetails_From;
function Create_RedLetterDetailsArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RedLetterDetails_From(src[i]);
        }
    }
    return res;
}
exports.Create_RedLetterDetailsArray_From = Create_RedLetterDetailsArray_From;
function Create_RedLetterDetailsArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RedLetterDetailsArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_RedLetterDetailsArrayArray_From = Create_RedLetterDetailsArrayArray_From;
function Create_RedLetterInformationListItem_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Date = Create_Date_From(src.Date);
    res.RedLetterInformation = Create_RedLetterSummary_From(src.RedLetterInformation);
    res.RedLetterDetails = Create_RedLetterDetails_From(src.RedLetterDetails);
    return res;
}
exports.Create_RedLetterInformationListItem_From = Create_RedLetterInformationListItem_From;
function Create_RedLetterInformationListItemArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RedLetterInformationListItem_From(src[i]);
        }
    }
    return res;
}
exports.Create_RedLetterInformationListItemArray_From = Create_RedLetterInformationListItemArray_From;
function Create_RedLetterInformationListItemArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RedLetterInformationListItemArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_RedLetterInformationListItemArrayArray_From = Create_RedLetterInformationListItemArrayArray_From;
function Create_RedLetterSummary_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.IsOwnCountryHoliday = src.IsOwnCountryHoliday;
    res.IsOtherCountryHoliday = src.IsOtherCountryHoliday;
    return res;
}
exports.Create_RedLetterSummary_From = Create_RedLetterSummary_From;
function Create_RedLetterSummaryArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RedLetterSummary_From(src[i]);
        }
    }
    return res;
}
exports.Create_RedLetterSummaryArray_From = Create_RedLetterSummaryArray_From;
function Create_RedLetterSummaryArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RedLetterSummaryArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_RedLetterSummaryArrayArray_From = Create_RedLetterSummaryArrayArray_From;
function Create_SalesActivity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.RequestedContacts = Create_ContactArray_From(src.RequestedContacts);
    res.RequestedPerson = Create_Person_From(src.RequestedPerson);
    res.SalesRep = Create_Person_From(src.SalesRep);
    return res;
}
exports.Create_SalesActivity_From = Create_SalesActivity_From;
function Create_SalesActivityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SalesActivity_From(src[i]);
        }
    }
    return res;
}
exports.Create_SalesActivityArray_From = Create_SalesActivityArray_From;
function Create_SalesActivityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SalesActivityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SalesActivityArrayArray_From = Create_SalesActivityArrayArray_From;
function Create_SuggestedAppointment_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.AutoSuggest = src.AutoSuggest;
    res.Deleted = src.Deleted;
    res.DaysFuture = src.DaysFuture;
    res.Tooltip = src.Tooltip;
    res.Text = src.Text;
    res.TaskId = src.TaskId;
    res.SuggestedAppointmentId = src.SuggestedAppointmentId;
    res.SaleTypeStageLinkId = src.SaleTypeStageLinkId;
    res.RegisteredAssociateId = src.RegisteredAssociateId;
    res.Rank = src.Rank;
    res.ProjectTypeStatusLinkId = src.ProjectTypeStatusLinkId;
    res.Name = src.Name;
    res.Duration = src.Duration;
    res.Associate = Create_Associate_From(src.Associate);
    return res;
}
exports.Create_SuggestedAppointment_From = Create_SuggestedAppointment_From;
function Create_SuggestedAppointmentArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SuggestedAppointment_From(src[i]);
        }
    }
    return res;
}
exports.Create_SuggestedAppointmentArray_From = Create_SuggestedAppointmentArray_From;
function Create_SuggestedAppointmentArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SuggestedAppointmentArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SuggestedAppointmentArrayArray_From = Create_SuggestedAppointmentArrayArray_From;
function Create_SuggestedAppointmentEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.SuggestedAppointmentId = src.SuggestedAppointmentId;
    res.Name = src.Name;
    res.Tooltip = src.Tooltip;
    res.Rank = src.Rank;
    res.Deleted = src.Deleted;
    res.DaysFuture = src.DaysFuture;
    res.Duration = Create_Duration_From(src.Duration);
    res.AutoSuggest = src.AutoSuggest;
    res.IsMilestone = src.IsMilestone;
    res.AssignToMember = src.AssignToMember;
    res.Text = src.Text;
    res.ProjectTypeStatusLink = Create_ProjectTypeStatusLink_From(src.ProjectTypeStatusLink);
    res.SaleTypeStageLink = Create_SaleTypeStageLink_From(src.SaleTypeStageLink);
    res.Type = Create_Task_From(src.Type);
    return res;
}
exports.Create_SuggestedAppointmentEntity_From = Create_SuggestedAppointmentEntity_From;
function Create_SuggestedAppointmentEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SuggestedAppointmentEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_SuggestedAppointmentEntityArray_From = Create_SuggestedAppointmentEntityArray_From;
function Create_SuggestedAppointmentEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SuggestedAppointmentEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SuggestedAppointmentEntityArrayArray_From = Create_SuggestedAppointmentEntityArrayArray_From;
function Create_TaskListItem_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.TaskListItemId = src.TaskListItemId;
    res.Value = src.Value;
    res.Direction = enums.TaskDirection[src.Direction];
    res.Type = enums.TaskType[src.Type];
    res.Tooltip = src.Tooltip;
    res.Deleted = src.Deleted;
    res.IntentId = src.IntentId;
    res.Rank = src.Rank;
    res.IsDefaultAlldayEvent = src.IsDefaultAlldayEvent;
    res.IsDefaultFree = src.IsDefaultFree;
    res.IsDefaultPublished = src.IsDefaultPublished;
    res.ColorIndex = enums.ColorIndex[src.ColorIndex];
    res.DefaultVideomeetingStatus = enums.VideoMeetingStatus[src.DefaultVideomeetingStatus];
    return res;
}
exports.Create_TaskListItem_From = Create_TaskListItem_From;
function Create_TaskListItemArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TaskListItem_From(src[i]);
        }
    }
    return res;
}
exports.Create_TaskListItemArray_From = Create_TaskListItemArray_From;
function Create_TaskListItemArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TaskListItemArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TaskListItemArrayArray_From = Create_TaskListItemArrayArray_From;
function Create_ForeignAppEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ForeignAppId = src.ForeignAppId;
    res.Name = src.Name;
    res.CreatedDate = Create_Date_From(src.CreatedDate);
    res.UpdatedDate = Create_Date_From(src.UpdatedDate);
    res.CreatedBy = Create_Associate_From(src.CreatedBy);
    res.UpdatedBy = Create_Associate_From(src.UpdatedBy);
    res.Devices = Create_ForeignDeviceArray_From(src.Devices);
    return res;
}
exports.Create_ForeignAppEntity_From = Create_ForeignAppEntity_From;
function Create_ForeignAppEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ForeignAppEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_ForeignAppEntityArray_From = Create_ForeignAppEntityArray_From;
function Create_ForeignAppEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ForeignAppEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ForeignAppEntityArrayArray_From = Create_ForeignAppEntityArrayArray_From;
function Create_ForeignDevice_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ForeignDeviceId = src.ForeignDeviceId;
    res.Name = src.Name;
    res.CreatedDate = Create_Date_From(src.CreatedDate);
    res.UpdatedDate = Create_Date_From(src.UpdatedDate);
    res.AssociateFullName = src.AssociateFullName;
    res.CreatedBy = src.CreatedBy;
    res.UpdatedBy = src.UpdatedBy;
    res.DeviceIdentifier = src.DeviceIdentifier;
    res.ForeignAppId = src.ForeignAppId;
    return res;
}
exports.Create_ForeignDevice_From = Create_ForeignDevice_From;
function Create_ForeignDeviceArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ForeignDevice_From(src[i]);
        }
    }
    return res;
}
exports.Create_ForeignDeviceArray_From = Create_ForeignDeviceArray_From;
function Create_ForeignDeviceArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ForeignDeviceArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ForeignDeviceArrayArray_From = Create_ForeignDeviceArrayArray_From;
function Create_ForeignKey_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Key = src.Key;
    res.Value = src.Value;
    res.RecordId = src.RecordId;
    res.CreatedDate = Create_Date_From(src.CreatedDate);
    res.UpdatedDate = Create_Date_From(src.UpdatedDate);
    res.UpdatedBy = src.UpdatedBy;
    res.CreatedBy = src.CreatedBy;
    res.TableName = src.TableName;
    return res;
}
exports.Create_ForeignKey_From = Create_ForeignKey_From;
function Create_ForeignKeyArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ForeignKey_From(src[i]);
        }
    }
    return res;
}
exports.Create_ForeignKeyArray_From = Create_ForeignKeyArray_From;
function Create_ForeignKeyArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ForeignKeyArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ForeignKeyArrayArray_From = Create_ForeignKeyArrayArray_From;
function Create_CheckoutInfo_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.State = enums.CheckoutState[src.State];
    res.AssociateId = src.AssociateId;
    res.Name = src.Name;
    return res;
}
exports.Create_CheckoutInfo_From = Create_CheckoutInfo_From;
function Create_CheckoutInfoArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CheckoutInfo_From(src[i]);
        }
    }
    return res;
}
exports.Create_CheckoutInfoArray_From = Create_CheckoutInfoArray_From;
function Create_CheckoutInfoArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CheckoutInfoArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CheckoutInfoArrayArray_From = Create_CheckoutInfoArrayArray_From;
function Create_CommandInfo_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.Name = src.Name;
    res.DisplayName = src.DisplayName;
    res.DisplayTooltip = src.DisplayTooltip;
    res.IconHint = src.IconHint;
    res.ReturnType = enums.ReturnType[src.ReturnType];
    return res;
}
exports.Create_CommandInfo_From = Create_CommandInfo_From;
function Create_CommandInfoArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CommandInfo_From(src[i]);
        }
    }
    return res;
}
exports.Create_CommandInfoArray_From = Create_CommandInfoArray_From;
function Create_CommandInfoArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CommandInfoArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CommandInfoArrayArray_From = Create_CommandInfoArrayArray_From;
function Create_Document_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.DocumentId = src.DocumentId;
    res.Attention = src.Attention;
    res.Header = src.Header;
    res.Name = src.Name;
    res.OurRef = src.OurRef;
    res.YourRef = src.YourRef;
    res.Description = src.Description;
    res.DocumentTemplate = src.DocumentTemplate;
    res.IsPublished = src.IsPublished;
    res.PersonId = src.PersonId;
    res.PersonFullName = src.PersonFullName;
    res.AssociateFullName = src.AssociateFullName;
    res.ContactId = src.ContactId;
    res.ContactName = src.ContactName;
    res.ProjectId = src.ProjectId;
    res.ProjectName = src.ProjectName;
    res.AssociateId = src.AssociateId;
    res.Snum = src.Snum;
    res.SaleId = src.SaleId;
    res.SaleName = src.SaleName;
    return res;
}
exports.Create_Document_From = Create_Document_From;
function Create_DocumentArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Document_From(src[i]);
        }
    }
    return res;
}
exports.Create_DocumentArray_From = Create_DocumentArray_From;
function Create_DocumentArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DocumentArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_DocumentArrayArray_From = Create_DocumentArrayArray_From;
function Create_DocumentEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.DocumentId = src.DocumentId;
    res.UpdatedBy = Create_Associate_From(src.UpdatedBy);
    res.CreatedBy = Create_Associate_From(src.CreatedBy);
    res.Attention = src.Attention;
    res.Header = src.Header;
    res.Name = src.Name;
    res.OurRef = src.OurRef;
    res.YourRef = src.YourRef;
    res.CreatedDate = Create_Date_From(src.CreatedDate);
    res.UpdatedDate = Create_Date_From(src.UpdatedDate);
    res.Description = src.Description;
    res.DocumentTemplate = Create_DocumentTemplate_From(src.DocumentTemplate);
    res.Person = Create_Person_From(src.Person);
    res.Associate = Create_Associate_From(src.Associate);
    res.Contact = Create_Contact_From(src.Contact);
    res.Project = Create_Project_From(src.Project);
    res.Date = Create_Date_From(src.Date);
    res.ExternalRef = src.ExternalRef;
    res.Completed = enums.ActivityStatus[src.Completed];
    res.ActiveLinks = src.ActiveLinks;
    res.Type = enums.AppointmentType[src.Type];
    res.Links = Create_LinkArray_From(src.Links);
    res.LockSemantics = enums.DocumentLockSemantics[src.LockSemantics];
    res.Sale = Create_Sale_From(src.Sale);
    res.SuggestedDocumentId = src.SuggestedDocumentId;
    res.Snum = src.Snum;
    res.UserDefinedFields = src.UserDefinedFields;
    res.ExtraFields = src.ExtraFields;
    res.CustomFields = src.CustomFields;
    res.PublishEventDate = Create_Date_From(src.PublishEventDate);
    res.PublishTo = Create_Date_From(src.PublishTo);
    res.PublishFrom = Create_Date_From(src.PublishFrom);
    res.IsPublished = src.IsPublished;
    res.VisibleFor = Create_VisibleForArray_From(src.VisibleFor);
    return res;
}
exports.Create_DocumentEntity_From = Create_DocumentEntity_From;
function Create_DocumentEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DocumentEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_DocumentEntityArray_From = Create_DocumentEntityArray_From;
function Create_DocumentEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DocumentEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_DocumentEntityArrayArray_From = Create_DocumentEntityArrayArray_From;
function Create_DocumentPreview_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Name = src.Name;
    res.Type = src.Type;
    res.Size = src.Size;
    res.Stream = Create_ArrayBuffer_From(src.Stream);
    return res;
}
exports.Create_DocumentPreview_From = Create_DocumentPreview_From;
function Create_DocumentPreviewArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DocumentPreview_From(src[i]);
        }
    }
    return res;
}
exports.Create_DocumentPreviewArray_From = Create_DocumentPreviewArray_From;
function Create_DocumentPreviewArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DocumentPreviewArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_DocumentPreviewArrayArray_From = Create_DocumentPreviewArrayArray_From;
function Create_ReturnInfo_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.ExternalReference = src.ExternalReference;
    res.VersionId = src.VersionId;
    res.Success = src.Success;
    res.Type = enums.ReturnType[src.Type];
    res.Value = src.Value;
    res.AdditionalInfo = src.AdditionalInfo;
    return res;
}
exports.Create_ReturnInfo_From = Create_ReturnInfo_From;
function Create_ReturnInfoArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ReturnInfo_From(src[i]);
        }
    }
    return res;
}
exports.Create_ReturnInfoArray_From = Create_ReturnInfoArray_From;
function Create_ReturnInfoArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ReturnInfoArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ReturnInfoArrayArray_From = Create_ReturnInfoArrayArray_From;
function Create_SuggestedDocumentEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.SuggestedDocumentId = src.SuggestedDocumentId;
    res.Name = src.Name;
    res.Tooltip = src.Tooltip;
    res.Rank = src.Rank;
    res.DoctmplId = src.DoctmplId;
    res.Header = src.Header;
    res.OurRef = src.OurRef;
    res.Deleted = src.Deleted;
    res.DocTmpl = Create_DocumentTemplate_From(src.DocTmpl);
    res.ProjectTypeStatusLink = Create_ProjectTypeStatusLink_From(src.ProjectTypeStatusLink);
    res.SaleTypeStageLink = Create_SaleTypeStageLink_From(src.SaleTypeStageLink);
    return res;
}
exports.Create_SuggestedDocumentEntity_From = Create_SuggestedDocumentEntity_From;
function Create_SuggestedDocumentEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SuggestedDocumentEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_SuggestedDocumentEntityArray_From = Create_SuggestedDocumentEntityArray_From;
function Create_SuggestedDocumentEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SuggestedDocumentEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SuggestedDocumentEntityArrayArray_From = Create_SuggestedDocumentEntityArrayArray_From;
function Create_TemplateInfo_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.Name = src.Name;
    res.Description = src.Description;
    res.ExternalReference = src.ExternalReference;
    res.PluginId = src.PluginId;
    return res;
}
exports.Create_TemplateInfo_From = Create_TemplateInfo_From;
function Create_TemplateInfoArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TemplateInfo_From(src[i]);
        }
    }
    return res;
}
exports.Create_TemplateInfoArray_From = Create_TemplateInfoArray_From;
function Create_TemplateInfoArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TemplateInfoArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TemplateInfoArrayArray_From = Create_TemplateInfoArrayArray_From;
function Create_TemplateVariablesParameters_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.SourceInput = src.SourceInput;
    res.Encoding = enums.GeneratorEncoding[src.Encoding];
    res.CultureName = src.CultureName;
    res.ContactId = src.ContactId;
    res.PersonId = src.PersonId;
    res.ProjectId = src.ProjectId;
    res.SelectionId = src.SelectionId;
    res.AppointmentId = src.AppointmentId;
    res.DocumentId = src.DocumentId;
    res.SaleId = src.SaleId;
    res.QuoteLineId = src.QuoteLineId;
    res.QuoteAlternativeId = src.QuoteAlternativeId;
    res.ProductKey = src.ProductKey;
    res.CustomTags = src.CustomTags;
    res.TicketId = src.TicketId;
    res.DocumentEntity = Create_DocumentEntity_From(src.DocumentEntity);
    return res;
}
exports.Create_TemplateVariablesParameters_From = Create_TemplateVariablesParameters_From;
function Create_TemplateVariablesParametersArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TemplateVariablesParameters_From(src[i]);
        }
    }
    return res;
}
exports.Create_TemplateVariablesParametersArray_From = Create_TemplateVariablesParametersArray_From;
function Create_TemplateVariablesParametersArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TemplateVariablesParametersArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TemplateVariablesParametersArrayArray_From = Create_TemplateVariablesParametersArrayArray_From;
function Create_VersionInfo_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.ExternalReference = src.ExternalReference;
    res.DocumentId = src.DocumentId;
    res.VersionId = src.VersionId;
    res.CheckedInDate = Create_Date_From(src.CheckedInDate);
    res.CheckedInByName = src.CheckedInByName;
    res.CheckedInByAssociateId = src.CheckedInByAssociateId;
    res.Description = src.Description;
    res.DisplayText = src.DisplayText;
    res.ExtraFields = src.ExtraFields;
    return res;
}
exports.Create_VersionInfo_From = Create_VersionInfo_From;
function Create_VersionInfoArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_VersionInfo_From(src[i]);
        }
    }
    return res;
}
exports.Create_VersionInfoArray_From = Create_VersionInfoArray_From;
function Create_VersionInfoArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_VersionInfoArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_VersionInfoArrayArray_From = Create_VersionInfoArrayArray_From;
function Create_AmountClassEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.AmountClassId = src.AmountClassId;
    res.Name = src.Name;
    res.Tooltip = src.Tooltip;
    res.Rank = src.Rank;
    res.AmountFrom = src.AmountFrom;
    res.AmountTo = src.AmountTo;
    res.Deleted = src.Deleted;
    res.CurrencyId = src.CurrencyId;
    return res;
}
exports.Create_AmountClassEntity_From = Create_AmountClassEntity_From;
function Create_AmountClassEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_AmountClassEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_AmountClassEntityArray_From = Create_AmountClassEntityArray_From;
function Create_AmountClassEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_AmountClassEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_AmountClassEntityArrayArray_From = Create_AmountClassEntityArrayArray_From;
function Create_Business_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_Business_From = Create_Business_From;
function Create_BusinessArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Business_From(src[i]);
        }
    }
    return res;
}
exports.Create_BusinessArray_From = Create_BusinessArray_From;
function Create_BusinessArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_BusinessArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_BusinessArrayArray_From = Create_BusinessArrayArray_From;
function Create_Category_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_Category_From = Create_Category_From;
function Create_CategoryArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Category_From(src[i]);
        }
    }
    return res;
}
exports.Create_CategoryArray_From = Create_CategoryArray_From;
function Create_CategoryArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CategoryArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CategoryArrayArray_From = Create_CategoryArrayArray_From;
function Create_Competitor_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_Competitor_From = Create_Competitor_From;
function Create_CompetitorArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Competitor_From(src[i]);
        }
    }
    return res;
}
exports.Create_CompetitorArray_From = Create_CompetitorArray_From;
function Create_CompetitorArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CompetitorArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CompetitorArrayArray_From = Create_CompetitorArrayArray_From;
function Create_TaskMenu_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.TaskMenuId = src.TaskMenuId;
    res.Name = src.Name;
    res.Tooltip = src.Tooltip;
    res.TableName = src.TableName;
    res.Area = src.Area;
    res.UrlOrSoprotocol = src.UrlOrSoprotocol;
    res.TaskType = enums.TaskListItemType[src.TaskType];
    res.CrmScriptId = src.CrmScriptId;
    res.ShowInClient = Create_ShowTaskItemInClient_From(src.ShowInClient);
    res.ArchiveBehaviour = Create_ArchiveBehaviour_From(src.ArchiveBehaviour);
    res.Rank = src.Rank;
    res.Encoding = enums.UrlEncoding[src.Encoding];
    res.ProgId = src.ProgId;
    res.Deleted = src.Deleted;
    return res;
}
exports.Create_TaskMenu_From = Create_TaskMenu_From;
function Create_TaskMenuArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TaskMenu_From(src[i]);
        }
    }
    return res;
}
exports.Create_TaskMenuArray_From = Create_TaskMenuArray_From;
function Create_TaskMenuArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TaskMenuArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TaskMenuArrayArray_From = Create_TaskMenuArrayArray_From;
function Create_ConsentPurpose_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ConsentPurposeId = src.ConsentPurposeId;
    res.Name = src.Name;
    res.ConsentText = src.ConsentText;
    res.FormText = src.FormText;
    res.Key = src.Key;
    res.Tooltip = src.Tooltip;
    res.Active = src.Active;
    res.UpdatedDate = Create_Date_From(src.UpdatedDate);
    res.UpdatedBy = Create_Associate_From(src.UpdatedBy);
    res.Deleted = src.Deleted;
    res.Rank = src.Rank;
    res.PrivacyStatementDesc = src.PrivacyStatementDesc;
    res.PrivacyStatementUrl = src.PrivacyStatementUrl;
    return res;
}
exports.Create_ConsentPurpose_From = Create_ConsentPurpose_From;
function Create_ConsentPurposeArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ConsentPurpose_From(src[i]);
        }
    }
    return res;
}
exports.Create_ConsentPurposeArray_From = Create_ConsentPurposeArray_From;
function Create_ConsentPurposeArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ConsentPurposeArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ConsentPurposeArrayArray_From = Create_ConsentPurposeArrayArray_From;
function Create_ConsentSource_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ConsentSourceId = src.ConsentSourceId;
    res.Name = src.Name;
    res.Tooltip = src.Tooltip;
    res.Rank = src.Rank;
    res.Key = src.Key;
    res.MailTemplateId = src.MailTemplateId;
    res.Deleted = src.Deleted;
    return res;
}
exports.Create_ConsentSource_From = Create_ConsentSource_From;
function Create_ConsentSourceArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ConsentSource_From(src[i]);
        }
    }
    return res;
}
exports.Create_ConsentSourceArray_From = Create_ConsentSourceArray_From;
function Create_ConsentSourceArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ConsentSourceArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ConsentSourceArrayArray_From = Create_ConsentSourceArrayArray_From;
function Create_Country_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.CountryId = src.CountryId;
    res.Name = src.Name;
    res.CurrencyId = src.CurrencyId;
    res.EnglishName = src.EnglishName;
    res.TwoLetterISOCountry = src.TwoLetterISOCountry;
    res.ThreeLetterISOCountry = src.ThreeLetterISOCountry;
    res.ImageDescription = src.ImageDescription;
    res.OrgNrText = src.OrgNrText;
    res.InterAreaPrefix = src.InterAreaPrefix;
    res.DialInPrefix = src.DialInPrefix;
    res.ZipPrefix = src.ZipPrefix;
    res.DomainName = src.DomainName;
    res.AddressLayoutId = src.AddressLayoutId;
    res.DomesticAddressLayoutId = src.DomesticAddressLayoutId;
    res.ForeignAddressLayoutId = src.ForeignAddressLayoutId;
    res.Rank = src.Rank;
    res.Tooltip = src.Tooltip;
    res.Deleted = src.Deleted;
    return res;
}
exports.Create_Country_From = Create_Country_From;
function Create_CountryArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Country_From(src[i]);
        }
    }
    return res;
}
exports.Create_CountryArray_From = Create_CountryArray_From;
function Create_CountryArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CountryArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CountryArrayArray_From = Create_CountryArrayArray_From;
function Create_Credited_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_Credited_From = Create_Credited_From;
function Create_CreditedArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Credited_From(src[i]);
        }
    }
    return res;
}
exports.Create_CreditedArray_From = Create_CreditedArray_From;
function Create_CreditedArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CreditedArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CreditedArrayArray_From = Create_CreditedArrayArray_From;
function Create_Currency_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_Currency_From = Create_Currency_From;
function Create_CurrencyArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Currency_From(src[i]);
        }
    }
    return res;
}
exports.Create_CurrencyArray_From = Create_CurrencyArray_From;
function Create_CurrencyArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CurrencyArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CurrencyArrayArray_From = Create_CurrencyArrayArray_From;
function Create_CurrencyEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.CurrencyId = src.CurrencyId;
    res.Name = src.Name;
    res.Tooltip = src.Tooltip;
    res.Rank = src.Rank;
    res.Rate = src.Rate;
    res.Units = src.Units;
    res.Deleted = src.Deleted;
    return res;
}
exports.Create_CurrencyEntity_From = Create_CurrencyEntity_From;
function Create_CurrencyEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CurrencyEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_CurrencyEntityArray_From = Create_CurrencyEntityArray_From;
function Create_CurrencyEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CurrencyEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CurrencyEntityArrayArray_From = Create_CurrencyEntityArrayArray_From;
function Create_CustomerLanguage_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_CustomerLanguage_From = Create_CustomerLanguage_From;
function Create_CustomerLanguageArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CustomerLanguage_From(src[i]);
        }
    }
    return res;
}
exports.Create_CustomerLanguageArray_From = Create_CustomerLanguageArray_From;
function Create_CustomerLanguageArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CustomerLanguageArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CustomerLanguageArrayArray_From = Create_CustomerLanguageArrayArray_From;
function Create_DeliveryTerm_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_DeliveryTerm_From = Create_DeliveryTerm_From;
function Create_DeliveryTermArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DeliveryTerm_From(src[i]);
        }
    }
    return res;
}
exports.Create_DeliveryTermArray_From = Create_DeliveryTermArray_From;
function Create_DeliveryTermArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DeliveryTermArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_DeliveryTermArrayArray_From = Create_DeliveryTermArrayArray_From;
function Create_DeliveryType_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_DeliveryType_From = Create_DeliveryType_From;
function Create_DeliveryTypeArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DeliveryType_From(src[i]);
        }
    }
    return res;
}
exports.Create_DeliveryTypeArray_From = Create_DeliveryTypeArray_From;
function Create_DeliveryTypeArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DeliveryTypeArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_DeliveryTypeArrayArray_From = Create_DeliveryTypeArrayArray_From;
function Create_Department_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_Department_From = Create_Department_From;
function Create_DepartmentArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Department_From(src[i]);
        }
    }
    return res;
}
exports.Create_DepartmentArray_From = Create_DepartmentArray_From;
function Create_DepartmentArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DepartmentArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_DepartmentArrayArray_From = Create_DepartmentArrayArray_From;
function Create_DocumentTemplate_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.DocumentTemplateId = src.DocumentTemplateId;
    res.Name = src.Name;
    res.Tooltip = src.Tooltip;
    res.SaveInDb = src.SaveInDb;
    res.Filename = src.Filename;
    res.DefaultOref = src.DefaultOref;
    res.RecordType = enums.DocTmplType[src.RecordType];
    res.Deleted = src.Deleted;
    res.Direction = enums.DocTmplDirection[src.Direction];
    res.AutoeventId = src.AutoeventId;
    res.QuoteDocType = enums.DocTmplQuoteType[src.QuoteDocType];
    return res;
}
exports.Create_DocumentTemplate_From = Create_DocumentTemplate_From;
function Create_DocumentTemplateArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DocumentTemplate_From(src[i]);
        }
    }
    return res;
}
exports.Create_DocumentTemplateArray_From = Create_DocumentTemplateArray_From;
function Create_DocumentTemplateArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DocumentTemplateArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_DocumentTemplateArrayArray_From = Create_DocumentTemplateArrayArray_From;
function Create_DocumentTemplateEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.DocumentTemplateId = src.DocumentTemplateId;
    res.Name = src.Name;
    res.Tooltip = src.Tooltip;
    res.SaveInDb = src.SaveInDb;
    res.Filename = src.Filename;
    res.DefaultOref = src.DefaultOref;
    res.RecordType = enums.DocTmplType[src.RecordType];
    res.Deleted = src.Deleted;
    res.Direction = enums.DocTmplDirection[src.Direction];
    res.AutoeventId = src.AutoeventId;
    res.IntentId = src.IntentId;
    res.IsDefaultPublished = src.IsDefaultPublished;
    res.Rank = src.Rank;
    res.LoadTemplateFromPlugin = src.LoadTemplateFromPlugin;
    res.MimeType = src.MimeType;
    res.IsInUseInGuides = src.IsInUseInGuides;
    res.DocumentTypeKey = src.DocumentTypeKey;
    res.QuoteDocType = enums.DocTmplQuoteType[src.QuoteDocType];
    res.PrivacyDocType = enums.DocTmplPrivacyType[src.PrivacyDocType];
    res.EmailSubject = src.EmailSubject;
    res.IncludeSignature = src.IncludeSignature;
    res.ShowCurrents = src.ShowCurrents;
    res.SenderEmailMode = enums.SenderMailMode[src.SenderEmailMode];
    res.SenderEmailAddress = src.SenderEmailAddress;
    res.InvitationDocType = enums.DocTmplInvitationType[src.InvitationDocType];
    return res;
}
exports.Create_DocumentTemplateEntity_From = Create_DocumentTemplateEntity_From;
function Create_DocumentTemplateEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DocumentTemplateEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_DocumentTemplateEntityArray_From = Create_DocumentTemplateEntityArray_From;
function Create_DocumentTemplateEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DocumentTemplateEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_DocumentTemplateEntityArrayArray_From = Create_DocumentTemplateEntityArrayArray_From;
function Create_ExtAppEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ExtAppId = src.ExtAppId;
    res.Name = src.Name;
    res.Tooltip = src.Tooltip;
    res.Deleted = src.Deleted;
    res.Rank = src.Rank;
    res.Filename = src.Filename;
    res.Parameters = src.Parameters;
    res.Workdir = src.Workdir;
    res.ShowState = Create_ShowState_From(src.ShowState);
    res.VisibleIn = enums.Navigation[src.VisibleIn];
    res.OnCentral = src.OnCentral;
    res.OnSatellite = src.OnSatellite;
    res.OnTravel = src.OnTravel;
    res.OnSalesMarketingPocket = src.OnSalesMarketingPocket;
    res.ShowInMenuBar = src.ShowInMenuBar;
    res.ShowInToolBar = src.ShowInToolBar;
    res.ShowInAddressBar = src.ShowInAddressBar;
    res.ShowInStatusBar = src.ShowInStatusBar;
    res.Icon = src.Icon;
    res.WaitToFinish = src.WaitToFinish;
    res.ExecuteOnEvent = enums.ExecuteOnEvent[src.ExecuteOnEvent];
    res.Path = src.Path;
    return res;
}
exports.Create_ExtAppEntity_From = Create_ExtAppEntity_From;
function Create_ExtAppEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ExtAppEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_ExtAppEntityArray_From = Create_ExtAppEntityArray_From;
function Create_ExtAppEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ExtAppEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ExtAppEntityArrayArray_From = Create_ExtAppEntityArrayArray_From;
function Create_HeadingEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.HeadingId = src.HeadingId;
    res.Name = src.Name;
    res.Tooltip = src.Tooltip;
    res.Deleted = src.Deleted;
    res.Rank = src.Rank;
    res.UdListDefinitionId = src.UdListDefinitionId;
    return res;
}
exports.Create_HeadingEntity_From = Create_HeadingEntity_From;
function Create_HeadingEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_HeadingEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_HeadingEntityArray_From = Create_HeadingEntityArray_From;
function Create_HeadingEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_HeadingEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_HeadingEntityArrayArray_From = Create_HeadingEntityArrayArray_From;
function Create_HierarchyEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.HierarchyId = src.HierarchyId;
    res.Domain = enums.Domain[src.Domain];
    res.Name = src.Name;
    res.Fullname = src.Fullname;
    res.ParentId = src.ParentId;
    res.Children = Create_HierarchyEntityArray_From(src.Children);
    res.Registered = Create_Date_From(src.Registered);
    res.RegisteredAssociateId = src.RegisteredAssociateId;
    res.Updated = Create_Date_From(src.Updated);
    res.UpdatedAssociateId = src.UpdatedAssociateId;
    return res;
}
exports.Create_HierarchyEntity_From = Create_HierarchyEntity_From;
function Create_HierarchyEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_HierarchyEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_HierarchyEntityArray_From = Create_HierarchyEntityArray_From;
function Create_HierarchyEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_HierarchyEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_HierarchyEntityArrayArray_From = Create_HierarchyEntityArrayArray_From;
function Create_LanguageInfo_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.LanguageInfoId = src.LanguageInfoId;
    res.LCID = src.LCID;
    res.EnglishName = src.EnglishName;
    res.NativeName = src.NativeName;
    res.ThreeLetterISOLanguageName = src.ThreeLetterISOLanguageName;
    res.TwoLetterISOLanguageName = src.TwoLetterISOLanguageName;
    res.IsBuiltIn = src.IsBuiltIn;
    return res;
}
exports.Create_LanguageInfo_From = Create_LanguageInfo_From;
function Create_LanguageInfoArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_LanguageInfo_From(src[i]);
        }
    }
    return res;
}
exports.Create_LanguageInfoArray_From = Create_LanguageInfoArray_From;
function Create_LanguageInfoArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_LanguageInfoArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_LanguageInfoArrayArray_From = Create_LanguageInfoArrayArray_From;
function Create_LegalBase_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.LegalBaseId = src.LegalBaseId;
    res.Name = src.Name;
    res.Tooltip = src.Tooltip;
    res.Rank = src.Rank;
    res.Key = src.Key;
    res.Deleted = src.Deleted;
    return res;
}
exports.Create_LegalBase_From = Create_LegalBase_From;
function Create_LegalBaseArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_LegalBase_From(src[i]);
        }
    }
    return res;
}
exports.Create_LegalBaseArray_From = Create_LegalBaseArray_From;
function Create_LegalBaseArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_LegalBaseArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_LegalBaseArrayArray_From = Create_LegalBaseArrayArray_From;
function Create_Link_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.EntityName = src.EntityName;
    res.Id = src.Id;
    res.Description = src.Description;
    res.ExtraInfo = src.ExtraInfo;
    res.LinkId = src.LinkId;
    return res;
}
exports.Create_Link_From = Create_Link_From;
function Create_LinkArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Link_From(src[i]);
        }
    }
    return res;
}
exports.Create_LinkArray_From = Create_LinkArray_From;
function Create_LinkArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_LinkArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_LinkArrayArray_From = Create_LinkArrayArray_From;
function Create_ListEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Name = src.Name;
    res.Tooltip = src.Tooltip;
    res.Deleted = src.Deleted;
    res.Rank = src.Rank;
    res.IsCustomList = src.IsCustomList;
    res.IsMDOList = src.IsMDOList;
    res.UseGroupsAndHeadings = src.UseGroupsAndHeadings;
    res.ListType = src.ListType;
    res.InUseByUserDefinedFields = src.InUseByUserDefinedFields;
    return res;
}
exports.Create_ListEntity_From = Create_ListEntity_From;
function Create_ListEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ListEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_ListEntityArray_From = Create_ListEntityArray_From;
function Create_ListEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ListEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ListEntityArrayArray_From = Create_ListEntityArrayArray_From;
function Create_ListItem_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.Id = src.Id;
    res.Name = src.Name;
    res.ToolTip = src.ToolTip;
    return res;
}
exports.Create_ListItem_From = Create_ListItem_From;
function Create_ListItemArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ListItem_From(src[i]);
        }
    }
    return res;
}
exports.Create_ListItemArray_From = Create_ListItemArray_From;
function Create_ListItemArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ListItemArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ListItemArrayArray_From = Create_ListItemArrayArray_From;
function Create_ListItemEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Name = src.Name;
    res.Tooltip = src.Tooltip;
    res.Deleted = src.Deleted;
    res.UdListDefinitionId = src.UdListDefinitionId;
    res.Rank = src.Rank;
    return res;
}
exports.Create_ListItemEntity_From = Create_ListItemEntity_From;
function Create_ListItemEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ListItemEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_ListItemEntityArray_From = Create_ListItemEntityArray_From;
function Create_ListItemEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ListItemEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ListItemEntityArrayArray_From = Create_ListItemEntityArrayArray_From;
function Create_LocalizedText_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.LanguageId = src.LanguageId;
    res.ResourceId = src.ResourceId;
    res.Text = src.Text;
    res.Type = enums.LocalizedTextType[src.Type];
    res.LocalizedTextId = src.LocalizedTextId;
    res.IsBuiltIn = src.IsBuiltIn;
    return res;
}
exports.Create_LocalizedText_From = Create_LocalizedText_From;
function Create_LocalizedTextArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_LocalizedText_From(src[i]);
        }
    }
    return res;
}
exports.Create_LocalizedTextArray_From = Create_LocalizedTextArray_From;
function Create_LocalizedTextArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_LocalizedTextArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_LocalizedTextArrayArray_From = Create_LocalizedTextArrayArray_From;
function Create_MrMrs_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_MrMrs_From = Create_MrMrs_From;
function Create_MrMrsArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_MrMrs_From(src[i]);
        }
    }
    return res;
}
exports.Create_MrMrsArray_From = Create_MrMrsArray_From;
function Create_MrMrsArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_MrMrsArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_MrMrsArrayArray_From = Create_MrMrsArrayArray_From;
function Create_PaymentTerm_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_PaymentTerm_From = Create_PaymentTerm_From;
function Create_PaymentTermArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PaymentTerm_From(src[i]);
        }
    }
    return res;
}
exports.Create_PaymentTermArray_From = Create_PaymentTermArray_From;
function Create_PaymentTermArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PaymentTermArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_PaymentTermArrayArray_From = Create_PaymentTermArrayArray_From;
function Create_PaymentType_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_PaymentType_From = Create_PaymentType_From;
function Create_PaymentTypeArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PaymentType_From(src[i]);
        }
    }
    return res;
}
exports.Create_PaymentTypeArray_From = Create_PaymentTypeArray_From;
function Create_PaymentTypeArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PaymentTypeArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_PaymentTypeArrayArray_From = Create_PaymentTypeArrayArray_From;
function Create_Position_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_Position_From = Create_Position_From;
function Create_PositionArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Position_From(src[i]);
        }
    }
    return res;
}
exports.Create_PositionArray_From = Create_PositionArray_From;
function Create_PositionArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PositionArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_PositionArrayArray_From = Create_PositionArrayArray_From;
function Create_Priority_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_Priority_From = Create_Priority_From;
function Create_PriorityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Priority_From(src[i]);
        }
    }
    return res;
}
exports.Create_PriorityArray_From = Create_PriorityArray_From;
function Create_PriorityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PriorityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_PriorityArrayArray_From = Create_PriorityArrayArray_From;
function Create_ProductCategory_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_ProductCategory_From = Create_ProductCategory_From;
function Create_ProductCategoryArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ProductCategory_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProductCategoryArray_From = Create_ProductCategoryArray_From;
function Create_ProductCategoryArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ProductCategoryArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProductCategoryArrayArray_From = Create_ProductCategoryArrayArray_From;
function Create_ProductFamily_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_ProductFamily_From = Create_ProductFamily_From;
function Create_ProductFamilyArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ProductFamily_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProductFamilyArray_From = Create_ProductFamilyArray_From;
function Create_ProductFamilyArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ProductFamilyArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProductFamilyArrayArray_From = Create_ProductFamilyArrayArray_From;
function Create_ProductType_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_ProductType_From = Create_ProductType_From;
function Create_ProductTypeArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ProductType_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProductTypeArray_From = Create_ProductTypeArray_From;
function Create_ProductTypeArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ProductTypeArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProductTypeArrayArray_From = Create_ProductTypeArrayArray_From;
function Create_ProjectStatus_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_ProjectStatus_From = Create_ProjectStatus_From;
function Create_ProjectStatusArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ProjectStatus_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProjectStatusArray_From = Create_ProjectStatusArray_From;
function Create_ProjectStatusArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ProjectStatusArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProjectStatusArrayArray_From = Create_ProjectStatusArrayArray_From;
function Create_ProjectType_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_ProjectType_From = Create_ProjectType_From;
function Create_ProjectTypeArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ProjectType_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProjectTypeArray_From = Create_ProjectTypeArray_From;
function Create_ProjectTypeArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ProjectTypeArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProjectTypeArrayArray_From = Create_ProjectTypeArrayArray_From;
function Create_ProjectTypeEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ProjTypeId = src.ProjTypeId;
    res.Name = src.Name;
    res.Tooltip = src.Tooltip;
    res.Rank = src.Rank;
    res.DurationUnit = enums.DurationUnit[src.DurationUnit];
    res.ProjectDuration = src.ProjectDuration;
    res.Deleted = src.Deleted;
    res.HasGuide = src.HasGuide;
    res.IsAutoAdvance = src.IsAutoAdvance;
    res.Stages = Create_SelectableMDOListItemArray_From(src.Stages);
    return res;
}
exports.Create_ProjectTypeEntity_From = Create_ProjectTypeEntity_From;
function Create_ProjectTypeEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ProjectTypeEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProjectTypeEntityArray_From = Create_ProjectTypeEntityArray_From;
function Create_ProjectTypeEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ProjectTypeEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProjectTypeEntityArrayArray_From = Create_ProjectTypeEntityArrayArray_From;
function Create_QuickReply_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.QuickReplyId = src.QuickReplyId;
    res.Name = src.Name;
    res.HtmlBody = src.HtmlBody;
    return res;
}
exports.Create_QuickReply_From = Create_QuickReply_From;
function Create_QuickReplyArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuickReply_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuickReplyArray_From = Create_QuickReplyArray_From;
function Create_QuickReplyArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuickReplyArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuickReplyArrayArray_From = Create_QuickReplyArrayArray_From;
function Create_Rating_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_Rating_From = Create_Rating_From;
function Create_RatingArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Rating_From(src[i]);
        }
    }
    return res;
}
exports.Create_RatingArray_From = Create_RatingArray_From;
function Create_RatingArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RatingArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_RatingArrayArray_From = Create_RatingArrayArray_From;
function Create_Reason_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_Reason_From = Create_Reason_From;
function Create_ReasonArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Reason_From(src[i]);
        }
    }
    return res;
}
exports.Create_ReasonArray_From = Create_ReasonArray_From;
function Create_ReasonArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ReasonArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ReasonArrayArray_From = Create_ReasonArrayArray_From;
function Create_QuoteApproveReason_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_QuoteApproveReason_From = Create_QuoteApproveReason_From;
function Create_QuoteApproveReasonArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteApproveReason_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteApproveReasonArray_From = Create_QuoteApproveReasonArray_From;
function Create_QuoteApproveReasonArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteApproveReasonArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteApproveReasonArrayArray_From = Create_QuoteApproveReasonArrayArray_From;
function Create_QuoteDenyReason_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_QuoteDenyReason_From = Create_QuoteDenyReason_From;
function Create_QuoteDenyReasonArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteDenyReason_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteDenyReasonArray_From = Create_QuoteDenyReasonArray_From;
function Create_QuoteDenyReasonArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_QuoteDenyReasonArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_QuoteDenyReasonArrayArray_From = Create_QuoteDenyReasonArrayArray_From;
function Create_ReasonSold_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_ReasonSold_From = Create_ReasonSold_From;
function Create_ReasonSoldArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ReasonSold_From(src[i]);
        }
    }
    return res;
}
exports.Create_ReasonSoldArray_From = Create_ReasonSoldArray_From;
function Create_ReasonSoldArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ReasonSoldArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ReasonSoldArrayArray_From = Create_ReasonSoldArrayArray_From;
function Create_ReasonStalled_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_ReasonStalled_From = Create_ReasonStalled_From;
function Create_ReasonStalledArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ReasonStalled_From(src[i]);
        }
    }
    return res;
}
exports.Create_ReasonStalledArray_From = Create_ReasonStalledArray_From;
function Create_ReasonStalledArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ReasonStalledArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ReasonStalledArrayArray_From = Create_ReasonStalledArrayArray_From;
function Create_RelationDefinitionEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ReldefId = src.ReldefId;
    res.Name = src.Name;
    res.Tooltip = src.Tooltip;
    res.PassiveText = src.PassiveText;
    res.Deleted = src.Deleted;
    res.Rank = src.Rank;
    res.Source = enums.RelationTarget[src.Source];
    res.Destination = enums.RelationTarget[src.Destination];
    return res;
}
exports.Create_RelationDefinitionEntity_From = Create_RelationDefinitionEntity_From;
function Create_RelationDefinitionEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RelationDefinitionEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_RelationDefinitionEntityArray_From = Create_RelationDefinitionEntityArray_From;
function Create_RelationDefinitionEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RelationDefinitionEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_RelationDefinitionEntityArrayArray_From = Create_RelationDefinitionEntityArrayArray_From;
function Create_ResourceEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ResourceId = src.ResourceId;
    res.Name = src.Name;
    res.Rank = src.Rank;
    res.Tooltip = src.Tooltip;
    res.Deleted = src.Deleted;
    res.IsLocation = src.IsLocation;
    res.LocationAddress = src.LocationAddress;
    return res;
}
exports.Create_ResourceEntity_From = Create_ResourceEntity_From;
function Create_ResourceEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ResourceEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_ResourceEntityArray_From = Create_ResourceEntityArray_From;
function Create_ResourceEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ResourceEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ResourceEntityArrayArray_From = Create_ResourceEntityArrayArray_From;
function Create_SaleStageEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.SaleStageId = src.SaleStageId;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    res.Probability = src.Probability;
    res.Deleted = src.Deleted;
    res.Rank = src.Rank;
    return res;
}
exports.Create_SaleStageEntity_From = Create_SaleStageEntity_From;
function Create_SaleStageEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SaleStageEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_SaleStageEntityArray_From = Create_SaleStageEntityArray_From;
function Create_SaleStageEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SaleStageEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SaleStageEntityArrayArray_From = Create_SaleStageEntityArrayArray_From;
function Create_SaleType_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_SaleType_From = Create_SaleType_From;
function Create_SaleTypeArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SaleType_From(src[i]);
        }
    }
    return res;
}
exports.Create_SaleTypeArray_From = Create_SaleTypeArray_From;
function Create_SaleTypeArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SaleTypeArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SaleTypeArrayArray_From = Create_SaleTypeArrayArray_From;
function Create_SaleTypeEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.SaleTypeId = src.SaleTypeId;
    res.Name = src.Name;
    res.Tooltip = src.Tooltip;
    res.Rank = src.Rank;
    res.DurationUnit = enums.DurationUnit[src.DurationUnit];
    res.SaleDuration = src.SaleDuration;
    res.SaleTypeCatId = src.SaleTypeCatId;
    res.Deleted = src.Deleted;
    res.HasGuide = src.HasGuide;
    res.HasStakeholders = src.HasStakeholders;
    res.IsAutoAdvance = src.IsAutoAdvance;
    res.AllowQuoteAlternatives = src.AllowQuoteAlternatives;
    res.DefaultQuoteValidity = src.DefaultQuoteValidity;
    res.QuoteLinesTemplate = src.QuoteLinesTemplate;
    res.ConfirmationLinesTemplate = src.ConfirmationLinesTemplate;
    res.MaxDiscountPercentSet = src.MaxDiscountPercentSet;
    res.MinEarningPercentSet = src.MinEarningPercentSet;
    res.MaxDiscountPercent = src.MaxDiscountPercent;
    res.MinEarningPercent = src.MinEarningPercent;
    res.GroupQuoteLinesBy = src.GroupQuoteLinesBy;
    res.SortGroupLinesBy = src.SortGroupLinesBy;
    res.Stages = Create_SelectableMDOListItemArray_From(src.Stages);
    return res;
}
exports.Create_SaleTypeEntity_From = Create_SaleTypeEntity_From;
function Create_SaleTypeEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SaleTypeEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_SaleTypeEntityArray_From = Create_SaleTypeEntityArray_From;
function Create_SaleTypeEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SaleTypeEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SaleTypeEntityArrayArray_From = Create_SaleTypeEntityArrayArray_From;
function Create_SelectionCategory_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_SelectionCategory_From = Create_SelectionCategory_From;
function Create_SelectionCategoryArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SelectionCategory_From(src[i]);
        }
    }
    return res;
}
exports.Create_SelectionCategoryArray_From = Create_SelectionCategoryArray_From;
function Create_SelectionCategoryArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SelectionCategoryArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SelectionCategoryArrayArray_From = Create_SelectionCategoryArrayArray_From;
function Create_Source_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_Source_From = Create_Source_From;
function Create_SourceArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Source_From(src[i]);
        }
    }
    return res;
}
exports.Create_SourceArray_From = Create_SourceArray_From;
function Create_SourceArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SourceArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SourceArrayArray_From = Create_SourceArrayArray_From;
function Create_Tag_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Name = src.Name;
    res.ToolTip = src.ToolTip;
    return res;
}
exports.Create_Tag_From = Create_Tag_From;
function Create_TagArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Tag_From(src[i]);
        }
    }
    return res;
}
exports.Create_TagArray_From = Create_TagArray_From;
function Create_TagArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TagArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TagArrayArray_From = Create_TagArrayArray_From;
function Create_Task_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_Task_From = Create_Task_From;
function Create_TaskArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Task_From(src[i]);
        }
    }
    return res;
}
exports.Create_TaskArray_From = Create_TaskArray_From;
function Create_TaskArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TaskArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TaskArrayArray_From = Create_TaskArrayArray_From;
function Create_TicketCategory_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_TicketCategory_From = Create_TicketCategory_From;
function Create_TicketCategoryArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TicketCategory_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketCategoryArray_From = Create_TicketCategoryArray_From;
function Create_TicketCategoryArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TicketCategoryArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketCategoryArrayArray_From = Create_TicketCategoryArrayArray_From;
function Create_TicketCategoryEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.TicketCategoryId = src.TicketCategoryId;
    res.ParentId = src.ParentId;
    res.Name = src.Name;
    res.Fullname = src.Fullname;
    res.CategoryMaster = src.CategoryMaster;
    res.Flags = Create_TicketCategoryFlags_From(src.Flags);
    res.DelegateMethod = enums.TicketCategoryDelegateMethod[src.DelegateMethod];
    res.ExternalName = src.ExternalName;
    res.ClosingStatus = enums.TicketCategoryClosingStatus[src.ClosingStatus];
    res.MsgClosingStatus = enums.TicketCategoryClosingStatus[src.MsgClosingStatus];
    res.AssignmentLag = src.AssignmentLag;
    res.ReplyTemplate = src.ReplyTemplate;
    res.NotificationEmail = src.NotificationEmail;
    res.DefaultTicketStatus = Create_TicketStatusEntity_From(src.DefaultTicketStatus);
    res.DefaultMessageStatus = Create_TicketStatusEntity_From(src.DefaultMessageStatus);
    res.EffectiveReplyTemplateId = src.EffectiveReplyTemplateId;
    res.ExtraFields = src.ExtraFields;
    res.CustomFields = src.CustomFields;
    return res;
}
exports.Create_TicketCategoryEntity_From = Create_TicketCategoryEntity_From;
function Create_TicketCategoryEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TicketCategoryEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketCategoryEntityArray_From = Create_TicketCategoryEntityArray_From;
function Create_TicketCategoryEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TicketCategoryEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketCategoryEntityArrayArray_From = Create_TicketCategoryEntityArrayArray_From;
function Create_TicketCategoryMembershipEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.User = Create_Associate_From(src.User);
    res.Weight = src.Weight;
    return res;
}
exports.Create_TicketCategoryMembershipEntity_From = Create_TicketCategoryMembershipEntity_From;
function Create_TicketCategoryMembershipEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TicketCategoryMembershipEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketCategoryMembershipEntityArray_From = Create_TicketCategoryMembershipEntityArray_From;
function Create_TicketCategoryMembershipEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TicketCategoryMembershipEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketCategoryMembershipEntityArrayArray_From = Create_TicketCategoryMembershipEntityArrayArray_From;
function Create_TicketPriority_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_TicketPriority_From = Create_TicketPriority_From;
function Create_TicketPriorityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TicketPriority_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketPriorityArray_From = Create_TicketPriorityArray_From;
function Create_TicketPriorityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TicketPriorityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketPriorityArrayArray_From = Create_TicketPriorityArrayArray_From;
function Create_TicketPriorityEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.TicketPriorityId = src.TicketPriorityId;
    res.Name = src.Name;
    res.Status = enums.TicketPriorityStatus[src.Status];
    res.Flags = Create_TicketPriorityFlags_From(src.Flags);
    res.SortOrder = src.SortOrder;
    res.TicketRead = enums.TicketPriorityEscalateEvent[src.TicketRead];
    res.ChangedOwner = enums.TicketPriorityEscalateEvent[src.ChangedOwner];
    res.TicketNewinfo = enums.TicketPriorityEscalateEvent[src.TicketNewinfo];
    res.TicketClosed = enums.TicketPriorityEscalateEvent[src.TicketClosed];
    res.TicketChangedPriority = enums.TicketPriorityEscalateEvent[src.TicketChangedPriority];
    res.TicketNew = enums.TicketPriorityEscalateEvent[src.TicketNew];
    res.Deadline = src.Deadline;
    res.MonStart = Create_Date_From(src.MonStart);
    res.MonStop = Create_Date_From(src.MonStop);
    res.TueStart = Create_Date_From(src.TueStart);
    res.TueStop = Create_Date_From(src.TueStop);
    res.WedStart = Create_Date_From(src.WedStart);
    res.WedStop = Create_Date_From(src.WedStop);
    res.ThuStart = Create_Date_From(src.ThuStart);
    res.ThuStop = Create_Date_From(src.ThuStop);
    res.FriStart = Create_Date_From(src.FriStart);
    res.FriStop = Create_Date_From(src.FriStop);
    res.SatStart = Create_Date_From(src.SatStart);
    res.SatStop = Create_Date_From(src.SatStop);
    res.SunStart = Create_Date_From(src.SunStart);
    res.SunStop = Create_Date_From(src.SunStop);
    res.NonDates = Create_DateArray_From(src.NonDates);
    res.EscalationLevels = Create_TicketPriorityEscalationLevelEntityArray_From(src.EscalationLevels);
    return res;
}
exports.Create_TicketPriorityEntity_From = Create_TicketPriorityEntity_From;
function Create_TicketPriorityEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TicketPriorityEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketPriorityEntityArray_From = Create_TicketPriorityEntityArray_From;
function Create_TicketPriorityEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TicketPriorityEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketPriorityEntityArrayArray_From = Create_TicketPriorityEntityArrayArray_From;
function Create_TicketPriorityEscalationLevelEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.TicketAlertId = src.TicketAlertId;
    res.AlertLevel = src.AlertLevel;
    res.AlertTimeout = src.AlertTimeout;
    res.Action = src.Action;
    res.DelegateTo = src.DelegateTo;
    res.ScriptId = src.ScriptId;
    res.EmailTo = src.EmailTo;
    res.SmsTo = src.SmsTo;
    res.ReplyTemplateIdCustomer = src.ReplyTemplateIdCustomer;
    res.ReplyTemplateIdUser = src.ReplyTemplateIdUser;
    res.ReplyTemplateIdCatmast = src.ReplyTemplateIdCatmast;
    res.ReplyTemplateIdEmail = src.ReplyTemplateIdEmail;
    res.RtiCustomerSms = src.RtiCustomerSms;
    res.ReplyTemplateIdUserSms = src.ReplyTemplateIdUserSms;
    res.ReplyTemplateIdCatmastSms = src.ReplyTemplateIdCatmastSms;
    res.ReplyTemplateIdSms = src.ReplyTemplateIdSms;
    return res;
}
exports.Create_TicketPriorityEscalationLevelEntity_From = Create_TicketPriorityEscalationLevelEntity_From;
function Create_TicketPriorityEscalationLevelEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TicketPriorityEscalationLevelEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketPriorityEscalationLevelEntityArray_From = Create_TicketPriorityEscalationLevelEntityArray_From;
function Create_TicketPriorityEscalationLevelEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TicketPriorityEscalationLevelEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketPriorityEscalationLevelEntityArrayArray_From = Create_TicketPriorityEscalationLevelEntityArrayArray_From;
function Create_TicketStatusEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.TicketStatusId = src.TicketStatusId;
    res.Name = src.Name;
    res.Status = enums.TicketBaseStatus[src.Status];
    res.TimeCounter = enums.TicketStatusTimeCounter[src.TimeCounter];
    res.NoEmailReopen = src.NoEmailReopen;
    res.IsDefault = src.IsDefault;
    res.UsedInQueue = src.UsedInQueue;
    return res;
}
exports.Create_TicketStatusEntity_From = Create_TicketStatusEntity_From;
function Create_TicketStatusEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TicketStatusEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketStatusEntityArray_From = Create_TicketStatusEntityArray_From;
function Create_TicketStatusEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TicketStatusEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketStatusEntityArrayArray_From = Create_TicketStatusEntityArrayArray_From;
function Create_WebPanelEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.WebPanelId = src.WebPanelId;
    res.Name = src.Name;
    res.Tooltip = src.Tooltip;
    res.Deleted = src.Deleted;
    res.Rank = src.Rank;
    res.UrlEncoding = enums.UrlEncoding[src.UrlEncoding];
    res.VisibleIn = enums.Navigation[src.VisibleIn];
    res.OnCentral = src.OnCentral;
    res.OnSatellite = src.OnSatellite;
    res.OnTravel = src.OnTravel;
    res.OnSalesMarketingWeb = src.OnSalesMarketingWeb;
    res.OnSalesMarketingPocket = src.OnSalesMarketingPocket;
    res.ShowInMenuBar = src.ShowInMenuBar;
    res.ShowInToolBar = src.ShowInToolBar;
    res.ShowInAddressBar = src.ShowInAddressBar;
    res.ShowInStatusBar = src.ShowInStatusBar;
    res.WindowName = src.WindowName;
    res.Url = src.Url;
    res.ProgId = src.ProgId;
    res.Icon = src.Icon;
    res.AlwaysReloadOnShow = src.AlwaysReloadOnShow;
    return res;
}
exports.Create_WebPanelEntity_From = Create_WebPanelEntity_From;
function Create_WebPanelEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WebPanelEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_WebPanelEntityArray_From = Create_WebPanelEntityArray_From;
function Create_WebPanelEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WebPanelEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_WebPanelEntityArrayArray_From = Create_WebPanelEntityArrayArray_From;
function Create_BlobEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.BlobId = src.BlobId;
    res.BlobSize = src.BlobSize;
    res.Description = src.Description;
    res.ExtraInfo = src.ExtraInfo;
    res.IsEncrypted = src.IsEncrypted;
    res.IsZipped = src.IsZipped;
    res.MimeType = src.MimeType;
    res.OriginalSize = src.OriginalSize;
    res.CreatedDate = Create_Date_From(src.CreatedDate);
    res.UpdatedDate = Create_Date_From(src.UpdatedDate);
    res.CreatedBy = Create_Associate_From(src.CreatedBy);
    res.UpdatedBy = Create_Associate_From(src.UpdatedBy);
    res.ConceptualType = src.ConceptualType;
    return res;
}
exports.Create_BlobEntity_From = Create_BlobEntity_From;
function Create_BlobEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_BlobEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_BlobEntityArray_From = Create_BlobEntityArray_From;
function Create_BlobEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_BlobEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_BlobEntityArrayArray_From = Create_BlobEntityArrayArray_From;
function Create_NavigatorCompany_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_NavigatorCompany_From = Create_NavigatorCompany_From;
function Create_NavigatorCompanyArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_NavigatorCompany_From(src[i]);
        }
    }
    return res;
}
exports.Create_NavigatorCompanyArray_From = Create_NavigatorCompanyArray_From;
function Create_NavigatorCompanyArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_NavigatorCompanyArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_NavigatorCompanyArrayArray_From = Create_NavigatorCompanyArrayArray_From;
function Create_MDOListItem_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Name = src.Name;
    res.ToolTip = src.ToolTip;
    res.Deleted = src.Deleted;
    res.Rank = src.Rank;
    res.Type = src.Type;
    res.ChildItems = Create_MDOListItemArray_From(src.ChildItems);
    res.IconHint = src.IconHint;
    res.ColorBlock = src.ColorBlock;
    res.ExtraInfo = src.ExtraInfo;
    res.StyleHint = src.StyleHint;
    res.FullName = src.FullName;
    return res;
}
exports.Create_MDOListItem_From = Create_MDOListItem_From;
function Create_MDOListItemArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_MDOListItem_From(src[i]);
        }
    }
    return res;
}
exports.Create_MDOListItemArray_From = Create_MDOListItemArray_From;
function Create_MDOListItemArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_MDOListItemArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_MDOListItemArrayArray_From = Create_MDOListItemArrayArray_From;
function Create_SelectableMDOListItem_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Name = src.Name;
    res.ToolTip = src.ToolTip;
    res.Deleted = src.Deleted;
    res.Rank = src.Rank;
    res.Type = src.Type;
    res.ColorBlock = src.ColorBlock;
    res.IconHint = src.IconHint;
    res.Selected = src.Selected;
    res.LastChanged = Create_Date_From(src.LastChanged);
    res.ChildItems = Create_SelectableMDOListItemArray_From(src.ChildItems);
    res.ExtraInfo = src.ExtraInfo;
    res.StyleHint = src.StyleHint;
    res.Hidden = src.Hidden;
    res.FullName = src.FullName;
    return res;
}
exports.Create_SelectableMDOListItem_From = Create_SelectableMDOListItem_From;
function Create_SelectableMDOListItemArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SelectableMDOListItem_From(src[i]);
        }
    }
    return res;
}
exports.Create_SelectableMDOListItemArray_From = Create_SelectableMDOListItemArray_From;
function Create_SelectableMDOListItemArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SelectableMDOListItemArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SelectableMDOListItemArrayArray_From = Create_SelectableMDOListItemArrayArray_From;
function Create_ConfigurableScreenDelta_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ConfigurableScreenDeltaId = src.ConfigurableScreenDeltaId;
    res.Name = src.Name;
    res.Description = src.Description;
    res.DeltaJson = src.DeltaJson;
    res.DeltaType = enums.DeltaType[src.DeltaType];
    res.DeltaState = enums.DeltaState[src.DeltaState];
    res.RecipeId = src.RecipeId;
    res.UpdatedDate = Create_Date_From(src.UpdatedDate);
    res.CreatedDate = Create_Date_From(src.CreatedDate);
    res.UpdatedBy = Create_Associate_From(src.UpdatedBy);
    res.CreatedBy = Create_Associate_From(src.CreatedBy);
    res.AppliesToIds = src.AppliesToIds;
    res.AppliesToKey = src.AppliesToKey;
    return res;
}
exports.Create_ConfigurableScreenDelta_From = Create_ConfigurableScreenDelta_From;
function Create_ConfigurableScreenDeltaArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ConfigurableScreenDelta_From(src[i]);
        }
    }
    return res;
}
exports.Create_ConfigurableScreenDeltaArray_From = Create_ConfigurableScreenDeltaArray_From;
function Create_ConfigurableScreenDeltaArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ConfigurableScreenDeltaArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ConfigurableScreenDeltaArrayArray_From = Create_ConfigurableScreenDeltaArrayArray_From;
function Create_Configuration_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    return res;
}
exports.Create_Configuration_From = Create_Configuration_From;
function Create_ConfigurationArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Configuration_From(src[i]);
        }
    }
    return res;
}
exports.Create_ConfigurationArray_From = Create_ConfigurationArray_From;
function Create_ConfigurationArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ConfigurationArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ConfigurationArrayArray_From = Create_ConfigurationArrayArray_From;
function Create_DeltaQuery_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.RecipeId = src.RecipeId;
    res.DeltaStates = Create_DeltaState_From(src.DeltaStates);
    res.DeltaTypes = Create_DeltaType_From(src.DeltaTypes);
    res.AppliesToIds = src.AppliesToIds;
    return res;
}
exports.Create_DeltaQuery_From = Create_DeltaQuery_From;
function Create_DeltaQueryArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DeltaQuery_From(src[i]);
        }
    }
    return res;
}
exports.Create_DeltaQueryArray_From = Create_DeltaQueryArray_From;
function Create_DeltaQueryArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DeltaQueryArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_DeltaQueryArrayArray_From = Create_DeltaQueryArrayArray_From;
function Create_DiaryViewEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.DiaryViewId = src.DiaryViewId;
    res.Name = src.Name;
    res.Tooltip = src.Tooltip;
    res.VisibleColumns = src.VisibleColumns;
    res.Rank = src.Rank;
    res.AssocId = src.AssocId;
    res.AssociateList = Create_SelectableMDOListItemArray_From(src.AssociateList);
    res.TzLocationId = src.TzLocationId;
    return res;
}
exports.Create_DiaryViewEntity_From = Create_DiaryViewEntity_From;
function Create_DiaryViewEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DiaryViewEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_DiaryViewEntityArray_From = Create_DiaryViewEntityArray_From;
function Create_DiaryViewEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DiaryViewEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_DiaryViewEntityArrayArray_From = Create_DiaryViewEntityArrayArray_From;
function Create_SystemEventEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.SystemEventId = src.SystemEventId;
    res.Scope = enums.SystemEventScope[src.Scope];
    res.Eta = Create_Date_From(src.Eta);
    res.Eventkey = src.Eventkey;
    res.Eventmess = src.Eventmess;
    res.ExtraInfo = src.ExtraInfo;
    res.Owner = src.Owner;
    res.UpdatedCount = src.UpdatedCount;
    res.Registered = Create_Date_From(src.Registered);
    res.ActivatedBy = Create_Associate_From(src.ActivatedBy);
    return res;
}
exports.Create_SystemEventEntity_From = Create_SystemEventEntity_From;
function Create_SystemEventEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SystemEventEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_SystemEventEntityArray_From = Create_SystemEventEntityArray_From;
function Create_SystemEventEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SystemEventEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SystemEventEntityArrayArray_From = Create_SystemEventEntityArrayArray_From;
function Create_WindowPosSize_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.OwnerWindow = src.OwnerWindow;
    res.PersonId = src.PersonId;
    res.AssociateId = src.AssociateId;
    res.ExtraId = src.ExtraId;
    res.ExtraInfo = src.ExtraInfo;
    res.Height = src.Height;
    res.LeftX = src.LeftX;
    res.State = enums.ShowWindowState[src.State];
    res.UpperY = src.UpperY;
    res.Width = src.Width;
    res.WindowPosSizeId = src.WindowPosSizeId;
    return res;
}
exports.Create_WindowPosSize_From = Create_WindowPosSize_From;
function Create_WindowPosSizeArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WindowPosSize_From(src[i]);
        }
    }
    return res;
}
exports.Create_WindowPosSizeArray_From = Create_WindowPosSizeArray_From;
function Create_WindowPosSizeArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WindowPosSizeArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_WindowPosSizeArrayArray_From = Create_WindowPosSizeArrayArray_From;
function Create_LiveUiConfig_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.IsEnabled = src.IsEnabled;
    res.PollingInterval = src.PollingInterval;
    return res;
}
exports.Create_LiveUiConfig_From = Create_LiveUiConfig_From;
function Create_LiveUiConfigArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_LiveUiConfig_From(src[i]);
        }
    }
    return res;
}
exports.Create_LiveUiConfigArray_From = Create_LiveUiConfigArray_From;
function Create_LiveUiConfigArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_LiveUiConfigArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_LiveUiConfigArrayArray_From = Create_LiveUiConfigArrayArray_From;
function Create_History_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Rank = src.Rank;
    res.Id = src.Id;
    res.HistoryName = src.HistoryName;
    res.HistoryId = src.HistoryId;
    res.AssociateId = src.AssociateId;
    res.Name = src.Name;
    res.ItemInfo = src.ItemInfo;
    return res;
}
exports.Create_History_From = Create_History_From;
function Create_HistoryArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_History_From(src[i]);
        }
    }
    return res;
}
exports.Create_HistoryArray_From = Create_HistoryArray_From;
function Create_HistoryArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_HistoryArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_HistoryArrayArray_From = Create_HistoryArrayArray_From;
function Create_HistoryRequest_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.EntityName = src.EntityName;
    res.EntityOrParentId = src.EntityOrParentId;
    res.RequestForNewRecord = src.RequestForNewRecord;
    return res;
}
exports.Create_HistoryRequest_From = Create_HistoryRequest_From;
function Create_HistoryRequestArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_HistoryRequest_From(src[i]);
        }
    }
    return res;
}
exports.Create_HistoryRequestArray_From = Create_HistoryRequestArray_From;
function Create_HistoryRequestArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_HistoryRequestArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_HistoryRequestArrayArray_From = Create_HistoryRequestArrayArray_From;
function Create_UiEvent_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.EventId = src.EventId;
    res.EventName = src.EventName;
    res.EntityType = src.EntityType;
    res.EntityKey = src.EntityKey;
    res.AssociateId = src.AssociateId;
    res.AssociateName = src.AssociateName;
    res.EventDateTime = Create_Date_From(src.EventDateTime);
    return res;
}
exports.Create_UiEvent_From = Create_UiEvent_From;
function Create_UiEventArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_UiEvent_From(src[i]);
        }
    }
    return res;
}
exports.Create_UiEventArray_From = Create_UiEventArray_From;
function Create_UiEventArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_UiEventArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_UiEventArrayArray_From = Create_UiEventArrayArray_From;
function Create_Associate_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.AssociateId = src.AssociateId;
    res.Name = src.Name;
    res.PersonId = src.PersonId;
    res.Rank = src.Rank;
    res.Tooltip = src.Tooltip;
    res.Type = enums.UserType[src.Type];
    res.GroupIdx = src.GroupIdx;
    res.FullName = src.FullName;
    res.FormalName = src.FormalName;
    res.Deleted = src.Deleted;
    res.EjUserId = src.EjUserId;
    res.UserName = src.UserName;
    return res;
}
exports.Create_Associate_From = Create_Associate_From;
function Create_AssociateArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Associate_From(src[i]);
        }
    }
    return res;
}
exports.Create_AssociateArray_From = Create_AssociateArray_From;
function Create_AssociateArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_AssociateArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_AssociateArrayArray_From = Create_AssociateArrayArray_From;
function Create_Cache_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    return res;
}
exports.Create_Cache_From = Create_Cache_From;
function Create_CacheArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Cache_From(src[i]);
        }
    }
    return res;
}
exports.Create_CacheArray_From = Create_CacheArray_From;
function Create_CacheArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CacheArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CacheArrayArray_From = Create_CacheArrayArray_From;
function Create_EntityCounts_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.EntityName = src.EntityName;
    res.Records = src.Records;
    return res;
}
exports.Create_EntityCounts_From = Create_EntityCounts_From;
function Create_EntityCountsArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EntityCounts_From(src[i]);
        }
    }
    return res;
}
exports.Create_EntityCountsArray_From = Create_EntityCountsArray_From;
function Create_EntityCountsArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EntityCountsArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_EntityCountsArrayArray_From = Create_EntityCountsArrayArray_From;
function Create_Logging_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    return res;
}
exports.Create_Logging_From = Create_Logging_From;
function Create_LoggingArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Logging_From(src[i]);
        }
    }
    return res;
}
exports.Create_LoggingArray_From = Create_LoggingArray_From;
function Create_LoggingArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_LoggingArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_LoggingArrayArray_From = Create_LoggingArrayArray_From;
function Create_UsageStats_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    return res;
}
exports.Create_UsageStats_From = Create_UsageStats_From;
function Create_UsageStatsArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_UsageStats_From(src[i]);
        }
    }
    return res;
}
exports.Create_UsageStatsArray_From = Create_UsageStatsArray_From;
function Create_UsageStatsArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_UsageStatsArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_UsageStatsArrayArray_From = Create_UsageStatsArrayArray_From;
function Create_Installation_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    return res;
}
exports.Create_Installation_From = Create_Installation_From;
function Create_InstallationArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Installation_From(src[i]);
        }
    }
    return res;
}
exports.Create_InstallationArray_From = Create_InstallationArray_From;
function Create_InstallationArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_InstallationArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_InstallationArrayArray_From = Create_InstallationArrayArray_From;
function Create_WebAppUsage_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.WebAppUsageId = src.WebAppUsageId;
    res.AssocId = src.AssocId;
    res.Timestamp = Create_Date_From(src.Timestamp);
    res.ViewState = src.ViewState;
    res.AggregateCount = src.AggregateCount;
    res.AggregateBin = src.AggregateBin;
    res.Version = src.Version;
    return res;
}
exports.Create_WebAppUsage_From = Create_WebAppUsage_From;
function Create_WebAppUsageArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WebAppUsage_From(src[i]);
        }
    }
    return res;
}
exports.Create_WebAppUsageArray_From = Create_WebAppUsageArray_From;
function Create_WebAppUsageArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WebAppUsageArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_WebAppUsageArrayArray_From = Create_WebAppUsageArrayArray_From;
function Create_Tooltips_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    return res;
}
exports.Create_Tooltips_From = Create_Tooltips_From;
function Create_TooltipsArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Tooltips_From(src[i]);
        }
    }
    return res;
}
exports.Create_TooltipsArray_From = Create_TooltipsArray_From;
function Create_TooltipsArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TooltipsArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TooltipsArrayArray_From = Create_TooltipsArrayArray_From;
function Create_Previews_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    return res;
}
exports.Create_Previews_From = Create_Previews_From;
function Create_PreviewsArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Previews_From(src[i]);
        }
    }
    return res;
}
exports.Create_PreviewsArray_From = Create_PreviewsArray_From;
function Create_PreviewsArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PreviewsArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_PreviewsArrayArray_From = Create_PreviewsArrayArray_From;
function Create_MailMergeSettings_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.SelectionId = src.SelectionId;
    res.DocumentId = src.DocumentId;
    res.MailMergeDeliveryType = enums.EMailMergeTargetType[src.MailMergeDeliveryType];
    res.CustomAttention = src.CustomAttention;
    res.AlwaysUseCustomAttention = src.AlwaysUseCustomAttention;
    res.SaveDocument = src.SaveDocument;
    res.CustomMailBody = src.CustomMailBody;
    res.TaskEntity = Create_MailMergeTask_From(src.TaskEntity);
    res.AddCompanyInterest = src.AddCompanyInterest;
    res.AddPersonInterest = src.AddPersonInterest;
    res.RemoveCompanyInterest = src.RemoveCompanyInterest;
    res.RemovePersonInterest = src.RemovePersonInterest;
    res.IncludeNoMailingsRecipient = src.IncludeNoMailingsRecipient;
    res.TestOnly = src.TestOnly;
    res.ProjectId = src.ProjectId;
    res.IncludeRetiredRecipients = src.IncludeRetiredRecipients;
    res.IncludeStoppedRecipients = src.IncludeStoppedRecipients;
    res.CustomMailSubject = src.CustomMailSubject;
    res.ExtraInfo = src.ExtraInfo;
    res.Synchronous = src.Synchronous;
    res.IsTemporarySelection = src.IsTemporarySelection;
    return res;
}
exports.Create_MailMergeSettings_From = Create_MailMergeSettings_From;
function Create_MailMergeSettingsArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_MailMergeSettings_From(src[i]);
        }
    }
    return res;
}
exports.Create_MailMergeSettingsArray_From = Create_MailMergeSettingsArray_From;
function Create_MailMergeSettingsArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_MailMergeSettingsArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_MailMergeSettingsArrayArray_From = Create_MailMergeSettingsArrayArray_From;
function Create_MailMergeTask_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ProjectId = src.ProjectId;
    res.TypeId = src.TypeId;
    res.StartDate = Create_Date_From(src.StartDate);
    res.Duration = src.Duration;
    res.Description = src.Description;
    res.PriorityId = src.PriorityId;
    res.VisibleFor = Create_VisibleFor_From(src.VisibleFor);
    res.Completed = enums.ActivityStatus[src.Completed];
    res.OwnerAssociateId = src.OwnerAssociateId;
    res.SingleEntryOnEachCompany = src.SingleEntryOnEachCompany;
    res.SaleId = src.SaleId;
    return res;
}
exports.Create_MailMergeTask_From = Create_MailMergeTask_From;
function Create_MailMergeTaskArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_MailMergeTask_From(src[i]);
        }
    }
    return res;
}
exports.Create_MailMergeTaskArray_From = Create_MailMergeTaskArray_From;
function Create_MailMergeTaskArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_MailMergeTaskArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_MailMergeTaskArrayArray_From = Create_MailMergeTaskArrayArray_From;
function Create_SelectionEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Description = src.Description;
    res.Postit = src.Postit;
    res.Associate = Create_Associate_From(src.Associate);
    res.CreatedBy = Create_Associate_From(src.CreatedBy);
    res.UpdatedBy = Create_Associate_From(src.UpdatedBy);
    res.SelectionCategory = Create_SelectionCategory_From(src.SelectionCategory);
    res.GroupIdx = src.GroupIdx;
    res.IncludePerson = src.IncludePerson;
    res.MemberCount = src.MemberCount;
    res.Name = src.Name;
    res.PostitTextId = src.PostitTextId;
    res.CreatedDate = Create_Date_From(src.CreatedDate);
    res.SelectionId = src.SelectionId;
    res.SoundEx = src.SoundEx;
    res.Source = src.Source;
    res.TextId = src.TextId;
    res.UpdatedDate = Create_Date_From(src.UpdatedDate);
    res.UpdatedCount = src.UpdatedCount;
    res.Visibility = src.Visibility;
    res.SelectionType = enums.SelectionType[src.SelectionType];
    res.CompanyUnique = src.CompanyUnique;
    res.TargetTableNumber = src.TargetTableNumber;
    res.TargetTableName = src.TargetTableName;
    res.Completed = src.Completed;
    res.LeftSelectionId = src.LeftSelectionId;
    res.RightSelectionId = src.RightSelectionId;
    res.SelectionUnionType = enums.SelectionUnionType[src.SelectionUnionType];
    res.MainProviderName = src.MainProviderName;
    res.ShadowProviderName = src.ShadowProviderName;
    res.ChartKey = src.ChartKey;
    res.LastLoaded = Create_Date_From(src.LastLoaded);
    res.LastLoadedBy = src.LastLoadedBy;
    res.LastLoadedByAssociate = Create_Associate_From(src.LastLoadedByAssociate);
    res.LastMembershipChange = Create_Date_From(src.LastMembershipChange);
    res.LastMembershipChangeBy = src.LastMembershipChangeBy;
    res.LastMembershipChangeByAssociate = Create_Associate_From(src.LastMembershipChangeByAssociate);
    res.MainHeading = src.MainHeading;
    res.MemberTabHeading = src.MemberTabHeading;
    res.MailingsProviderName = src.MailingsProviderName;
    res.DashboardTileDefinitionId = src.DashboardTileDefinitionId;
    res.VisibleFor = Create_VisibleForArray_From(src.VisibleFor);
    return res;
}
exports.Create_SelectionEntity_From = Create_SelectionEntity_From;
function Create_SelectionEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SelectionEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_SelectionEntityArray_From = Create_SelectionEntityArray_From;
function Create_SelectionEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SelectionEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SelectionEntityArrayArray_From = Create_SelectionEntityArrayArray_From;
function Create_SelectionForFind_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ProviderName = src.ProviderName;
    res.SelectionId = src.SelectionId;
    res.CanSaveAsSelection = src.CanSaveAsSelection;
    res.MainHeading = src.MainHeading;
    res.FilterScreenHeading = src.FilterScreenHeading;
    res.SelectionEntityHeading = src.SelectionEntityHeading;
    return res;
}
exports.Create_SelectionForFind_From = Create_SelectionForFind_From;
function Create_SelectionForFindArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SelectionForFind_From(src[i]);
        }
    }
    return res;
}
exports.Create_SelectionForFindArray_From = Create_SelectionForFindArray_From;
function Create_SelectionForFindArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SelectionForFindArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SelectionForFindArrayArray_From = Create_SelectionForFindArrayArray_From;
function Create_SelectionSummaryItem_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.SelectionId = src.SelectionId;
    res.Name = src.Name;
    res.TargetTable = src.TargetTable;
    res.Registered = Create_Date_From(src.Registered);
    res.ProviderName = src.ProviderName;
    return res;
}
exports.Create_SelectionSummaryItem_From = Create_SelectionSummaryItem_From;
function Create_SelectionSummaryItemArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SelectionSummaryItem_From(src[i]);
        }
    }
    return res;
}
exports.Create_SelectionSummaryItemArray_From = Create_SelectionSummaryItemArray_From;
function Create_SelectionSummaryItemArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SelectionSummaryItemArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SelectionSummaryItemArrayArray_From = Create_SelectionSummaryItemArrayArray_From;
function Create_TypicalSearch_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.TypicalSearchId = src.TypicalSearchId;
    res.Title = src.Title;
    res.Tooltip = src.Tooltip;
    res.EntityName = src.EntityName;
    res.IsEntityDefault = src.IsEntityDefault;
    res.IncludePerson = src.IncludePerson;
    res.Source = src.Source;
    res.VersionNumber = src.VersionNumber;
    res.RestrictionGroups = Create_ArchiveRestrictionGroupArray_From(src.RestrictionGroups);
    return res;
}
exports.Create_TypicalSearch_From = Create_TypicalSearch_From;
function Create_TypicalSearchArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TypicalSearch_From(src[i]);
        }
    }
    return res;
}
exports.Create_TypicalSearchArray_From = Create_TypicalSearchArray_From;
function Create_TypicalSearchArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TypicalSearchArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TypicalSearchArrayArray_From = Create_TypicalSearchArrayArray_From;
function Create_TypicalSearches_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Source = src.Source;
    res.MasterVersion = src.MasterVersion;
    res.DeleteLeftovers = src.DeleteLeftovers;
    res.Searches = Create_TypicalSearchArray_From(src.Searches);
    return res;
}
exports.Create_TypicalSearches_From = Create_TypicalSearches_From;
function Create_TypicalSearchesArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TypicalSearches_From(src[i]);
        }
    }
    return res;
}
exports.Create_TypicalSearchesArray_From = Create_TypicalSearchesArray_From;
function Create_TypicalSearchesArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TypicalSearchesArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TypicalSearchesArrayArray_From = Create_TypicalSearchesArrayArray_From;
function Create_ContactOrPersonFromEmail_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.PersonId = src.PersonId;
    res.FullName = src.FullName;
    res.EmailAddress = src.EmailAddress;
    res.ContactId = src.ContactId;
    res.ContactName = src.ContactName;
    res.ContactDepartment = src.ContactDepartment;
    res.ContactCategory = src.ContactCategory;
    res.SortName = src.SortName;
    return res;
}
exports.Create_ContactOrPersonFromEmail_From = Create_ContactOrPersonFromEmail_From;
function Create_ContactOrPersonFromEmailArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ContactOrPersonFromEmail_From(src[i]);
        }
    }
    return res;
}
exports.Create_ContactOrPersonFromEmailArray_From = Create_ContactOrPersonFromEmailArray_From;
function Create_ContactOrPersonFromEmailArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ContactOrPersonFromEmailArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ContactOrPersonFromEmailArrayArray_From = Create_ContactOrPersonFromEmailArrayArray_From;
function Create_EMailAccount_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.EMailAccountId = src.EMailAccountId;
    res.EMailAddress = src.EMailAddress;
    res.AssociateId = src.AssociateId;
    res.IncomingCredentials = Create_ServiceAuth_From(src.IncomingCredentials);
    res.OutgoingCredentials = Create_ServiceAuth_From(src.OutgoingCredentials);
    res.AccountStatus = src.AccountStatus;
    res.ErrorCount = src.ErrorCount;
    res.ErrorReason = src.ErrorReason;
    res.InboxFolder = src.InboxFolder;
    res.SentFolder = src.SentFolder;
    return res;
}
exports.Create_EMailAccount_From = Create_EMailAccount_From;
function Create_EMailAccountArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EMailAccount_From(src[i]);
        }
    }
    return res;
}
exports.Create_EMailAccountArray_From = Create_EMailAccountArray_From;
function Create_EMailAccountArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EMailAccountArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_EMailAccountArrayArray_From = Create_EMailAccountArrayArray_From;
function Create_EMailAddress_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ContactId = src.ContactId;
    res.ContactName = src.ContactName;
    res.PersonId = src.PersonId;
    res.PersonName = src.PersonName;
    res.AssociateId = src.AssociateId;
    res.Address = src.Address;
    res.EmailId = src.EmailId;
    res.DuplicatePersonIds = src.DuplicatePersonIds;
    res.Name = src.Name;
    return res;
}
exports.Create_EMailAddress_From = Create_EMailAddress_From;
function Create_EMailAddressArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EMailAddress_From(src[i]);
        }
    }
    return res;
}
exports.Create_EMailAddressArray_From = Create_EMailAddressArray_From;
function Create_EMailAddressArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EMailAddressArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_EMailAddressArrayArray_From = Create_EMailAddressArrayArray_From;
function Create_EMailAppointment_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Appointment = Create_Appointment_From(src.Appointment);
    res.CalMethod = enums.CalMethod[src.CalMethod];
    res.Participants = src.Participants;
    res.Comment = src.Comment;
    res.Sequence = src.Sequence;
    res.DtStart = Create_Date_From(src.DtStart);
    res.DtEnd = Create_Date_From(src.DtEnd);
    res.Superseded = src.Superseded;
    return res;
}
exports.Create_EMailAppointment_From = Create_EMailAppointment_From;
function Create_EMailAppointmentArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EMailAppointment_From(src[i]);
        }
    }
    return res;
}
exports.Create_EMailAppointmentArray_From = Create_EMailAppointmentArray_From;
function Create_EMailAppointmentArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EMailAppointmentArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_EMailAppointmentArrayArray_From = Create_EMailAppointmentArrayArray_From;
function Create_EMailAttachment_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Description = src.Description;
    res.Filename = src.Filename;
    res.Size = src.Size;
    res.Type = src.Type;
    res.Encoding = src.Encoding;
    res.Id = src.Id;
    res.Disposition = src.Disposition;
    res.Stream = Create_ArrayBuffer_From(src.Stream);
    return res;
}
exports.Create_EMailAttachment_From = Create_EMailAttachment_From;
function Create_EMailAttachmentArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EMailAttachment_From(src[i]);
        }
    }
    return res;
}
exports.Create_EMailAttachmentArray_From = Create_EMailAttachmentArray_From;
function Create_EMailAttachmentArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EMailAttachmentArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_EMailAttachmentArrayArray_From = Create_EMailAttachmentArrayArray_From;
function Create_EMailConnectionInfo_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ServerName = src.ServerName;
    res.UserName = src.UserName;
    res.Password = src.Password;
    res.Folder = src.Folder;
    res.UseSSL = src.UseSSL;
    return res;
}
exports.Create_EMailConnectionInfo_From = Create_EMailConnectionInfo_From;
function Create_EMailConnectionInfoArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EMailConnectionInfo_From(src[i]);
        }
    }
    return res;
}
exports.Create_EMailConnectionInfoArray_From = Create_EMailConnectionInfoArray_From;
function Create_EMailConnectionInfoArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EMailConnectionInfoArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_EMailConnectionInfoArrayArray_From = Create_EMailConnectionInfoArrayArray_From;
function Create_EMailConnectionInfoExtended_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Port = src.Port;
    res.ServerName = src.ServerName;
    res.Protocol = src.Protocol;
    res.UserName = src.UserName;
    res.Password = src.Password;
    res.UseSSL = src.UseSSL;
    res.Folder = src.Folder;
    return res;
}
exports.Create_EMailConnectionInfoExtended_From = Create_EMailConnectionInfoExtended_From;
function Create_EMailConnectionInfoExtendedArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EMailConnectionInfoExtended_From(src[i]);
        }
    }
    return res;
}
exports.Create_EMailConnectionInfoExtendedArray_From = Create_EMailConnectionInfoExtendedArray_From;
function Create_EMailConnectionInfoExtendedArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EMailConnectionInfoExtendedArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_EMailConnectionInfoExtendedArrayArray_From = Create_EMailConnectionInfoExtendedArrayArray_From;
function Create_EMailCustomHeader_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Name = src.Name;
    res.Values = src.Values;
    return res;
}
exports.Create_EMailCustomHeader_From = Create_EMailCustomHeader_From;
function Create_EMailCustomHeaderArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EMailCustomHeader_From(src[i]);
        }
    }
    return res;
}
exports.Create_EMailCustomHeaderArray_From = Create_EMailCustomHeaderArray_From;
function Create_EMailCustomHeaderArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EMailCustomHeaderArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_EMailCustomHeaderArrayArray_From = Create_EMailCustomHeaderArrayArray_From;
function Create_EMailEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.To = Create_EMailAddressArray_From(src.To);
    res.Cc = Create_EMailAddressArray_From(src.Cc);
    res.Bcc = Create_EMailAddressArray_From(src.Bcc);
    res.Subject = src.Subject;
    res.HTMLBody = src.HTMLBody;
    res.From = Create_EMailAddress_From(src.From);
    res.Sent = Create_Date_From(src.Sent);
    res.Size = src.Size;
    res.Priority = enums.EMailPriority[src.Priority];
    res.Flags = Create_EMailFlags_From(src.Flags);
    res.MessageID = src.MessageID;
    res.PlainBody = src.PlainBody;
    res.IsSent = src.IsSent;
    res.EMailSOInfo = Create_EMailSOInfo_From(src.EMailSOInfo);
    res.ServerId = src.ServerId;
    res.Attachments = Create_EMailAttachmentArray_From(src.Attachments);
    res.CustomHeaderList = Create_EMailCustomHeaderArray_From(src.CustomHeaderList);
    res.FolderName = src.FolderName;
    res.EmailItemId = src.EmailItemId;
    res.AccountId = src.AccountId;
    res.ReceivedAt = Create_Date_From(src.ReceivedAt);
    res.InReplyTo = Create_EMailEnvelope_From(src.InReplyTo);
    res.RepliedAt = Create_Date_From(src.RepliedAt);
    res.HasCalendarData = src.HasCalendarData;
    res.CalMethod = enums.CalMethod[src.CalMethod];
    res.CalReplyStatus = enums.CalReplyStatus[src.CalReplyStatus];
    return res;
}
exports.Create_EMailEntity_From = Create_EMailEntity_From;
function Create_EMailEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EMailEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_EMailEntityArray_From = Create_EMailEntityArray_From;
function Create_EMailEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EMailEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_EMailEntityArrayArray_From = Create_EMailEntityArrayArray_From;
function Create_EMailEnvelope_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ServerId = src.ServerId;
    res.MessageId = src.MessageId;
    res.Subject = src.Subject;
    res.From = Create_EMailAddress_From(src.From);
    res.To = Create_EMailAddressArray_From(src.To);
    res.Sent = Create_Date_From(src.Sent);
    res.Priority = enums.EMailPriority[src.Priority];
    res.Flags = Create_EMailFlags_From(src.Flags);
    res.Size = src.Size;
    res.EMailSOInfo = Create_EMailSOInfo_From(src.EMailSOInfo);
    return res;
}
exports.Create_EMailEnvelope_From = Create_EMailEnvelope_From;
function Create_EMailEnvelopeArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EMailEnvelope_From(src[i]);
        }
    }
    return res;
}
exports.Create_EMailEnvelopeArray_From = Create_EMailEnvelopeArray_From;
function Create_EMailEnvelopeArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EMailEnvelopeArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_EMailEnvelopeArrayArray_From = Create_EMailEnvelopeArrayArray_From;
function Create_EMailFolder_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Name = src.Name;
    res.Delimiter = src.Delimiter;
    res.Flags = src.Flags;
    res.TotalItems = src.TotalItems;
    res.UnreadItems = src.UnreadItems;
    res.Subscribed = src.Subscribed;
    res.EmailFolderId = src.EmailFolderId;
    return res;
}
exports.Create_EMailFolder_From = Create_EMailFolder_From;
function Create_EMailFolderArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EMailFolder_From(src[i]);
        }
    }
    return res;
}
exports.Create_EMailFolderArray_From = Create_EMailFolderArray_From;
function Create_EMailFolderArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EMailFolderArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_EMailFolderArrayArray_From = Create_EMailFolderArrayArray_From;
function Create_EMailSOInfo_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.DocumentId = src.DocumentId;
    res.AppointmentId = src.AppointmentId;
    res.ProjectId = src.ProjectId;
    res.SaleId = src.SaleId;
    res.Archived = src.Archived;
    res.ArchivedAt = Create_Date_From(src.ArchivedAt);
    res.ArchivedBy = src.ArchivedBy;
    res.ArchivedDisplayName = src.ArchivedDisplayName;
    return res;
}
exports.Create_EMailSOInfo_From = Create_EMailSOInfo_From;
function Create_EMailSOInfoArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EMailSOInfo_From(src[i]);
        }
    }
    return res;
}
exports.Create_EMailSOInfoArray_From = Create_EMailSOInfoArray_From;
function Create_EMailSOInfoArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EMailSOInfoArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_EMailSOInfoArrayArray_From = Create_EMailSOInfoArrayArray_From;
function Create_SyncUserAccount_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.AccountId = src.AccountId;
    res.AssociateName = src.AssociateName;
    res.AssociateId = src.AssociateId;
    return res;
}
exports.Create_SyncUserAccount_From = Create_SyncUserAccount_From;
function Create_SyncUserAccountArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SyncUserAccount_From(src[i]);
        }
    }
    return res;
}
exports.Create_SyncUserAccountArray_From = Create_SyncUserAccountArray_From;
function Create_SyncUserAccountArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SyncUserAccountArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SyncUserAccountArrayArray_From = Create_SyncUserAccountArrayArray_From;
function Create_CriteriaInformation_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Restrictions = Create_ArchiveRestrictionInfoArray_From(src.Restrictions);
    res.CriteriaArchiveColumns = Create_ArchiveColumnInfoArray_From(src.CriteriaArchiveColumns);
    res.CriteriaArchiveRows = Create_ArchiveListItemArray_From(src.CriteriaArchiveRows);
    res.RestrictionGroups = Create_ArchiveRestrictionGroupArray_From(src.RestrictionGroups);
    return res;
}
exports.Create_CriteriaInformation_From = Create_CriteriaInformation_From;
function Create_CriteriaInformationArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CriteriaInformation_From(src[i]);
        }
    }
    return res;
}
exports.Create_CriteriaInformationArray_From = Create_CriteriaInformationArray_From;
function Create_CriteriaInformationArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CriteriaInformationArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CriteriaInformationArrayArray_From = Create_CriteriaInformationArrayArray_From;
function Create_FindResults_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ArchiveColumns = Create_ArchiveColumnInfoArray_From(src.ArchiveColumns);
    res.ArchiveRows = Create_ArchiveListItemArray_From(src.ArchiveRows);
    res.RowCount = src.RowCount;
    return res;
}
exports.Create_FindResults_From = Create_FindResults_From;
function Create_FindResultsArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FindResults_From(src[i]);
        }
    }
    return res;
}
exports.Create_FindResultsArray_From = Create_FindResultsArray_From;
function Create_FindResultsArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FindResultsArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_FindResultsArrayArray_From = Create_FindResultsArrayArray_From;
function Create_Webhook_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.WebhookId = src.WebhookId;
    res.Name = src.Name;
    res.Events = src.Events;
    res.TargetUrl = src.TargetUrl;
    res.Secret = src.Secret;
    res.State = enums.WebhookState[src.State];
    res.Type = src.Type;
    res.Headers = Create_StringDictionary_From(src.Headers);
    res.Properties = Create_StringObjectDictionary_From(src.Properties);
    res.Registered = Create_Date_From(src.Registered);
    res.RegisteredAssociate = Create_Associate_From(src.RegisteredAssociate);
    res.Updated = Create_Date_From(src.Updated);
    res.UpdatedAssociate = Create_Associate_From(src.UpdatedAssociate);
    return res;
}
exports.Create_Webhook_From = Create_Webhook_From;
function Create_WebhookArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Webhook_From(src[i]);
        }
    }
    return res;
}
exports.Create_WebhookArray_From = Create_WebhookArray_From;
function Create_WebhookArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WebhookArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_WebhookArrayArray_From = Create_WebhookArrayArray_From;
function Create_WebhookResult_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Success = src.Success;
    res.Message = src.Message;
    return res;
}
exports.Create_WebhookResult_From = Create_WebhookResult_From;
function Create_WebhookResultArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WebhookResult_From(src[i]);
        }
    }
    return res;
}
exports.Create_WebhookResultArray_From = Create_WebhookResultArray_From;
function Create_WebhookResultArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WebhookResultArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_WebhookResultArrayArray_From = Create_WebhookResultArrayArray_From;
function Create_Sentry_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    return res;
}
exports.Create_Sentry_From = Create_Sentry_From;
function Create_SentryArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Sentry_From(src[i]);
        }
    }
    return res;
}
exports.Create_SentryArray_From = Create_SentryArray_From;
function Create_SentryArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SentryArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SentryArrayArray_From = Create_SentryArrayArray_From;
function Create_VisibleFor_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.VisibleId = src.VisibleId;
    res.Visibility = enums.Visibility[src.Visibility];
    res.DisplayValue = src.DisplayValue;
    return res;
}
exports.Create_VisibleFor_From = Create_VisibleFor_From;
function Create_VisibleForArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_VisibleFor_From(src[i]);
        }
    }
    return res;
}
exports.Create_VisibleForArray_From = Create_VisibleForArray_From;
function Create_VisibleForArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_VisibleForArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_VisibleForArrayArray_From = Create_VisibleForArrayArray_From;
function Create_FieldInfoBase_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    if (src.FieldType == "Attachment")
        res = Create_FieldInfoAttachment_From(src);
    if (src.FieldType == "Blob")
        res = Create_FieldInfoBlob_From(src);
    if (src.FieldType == "Checkbox")
        res = Create_FieldInfoBool_From(src);
    if (src.FieldType == "Date")
        res = Create_FieldInfoDate_From(src);
    if (src.FieldType == "DateTime")
        res = Create_FieldInfoDateTime_From(src);
    if (src.FieldType == "Decimal")
        res = Create_FieldInfoDecimal_From(src);
    if (src.FieldType == "DynamicLink")
        res = Create_FieldInfoDynamicLink_From(src);
    if (src.FieldType == "Integer")
        res = Create_FieldInfoInt_From(src);
    if (src.FieldType == "MdoList")
        res = Create_FieldInfoMdoList_From(src);
    if (src.FieldType == "ListText")
        res = Create_FieldInfoListText_From(src);
    if (src.FieldType == "LongText")
        res = Create_FieldInfoLongText_From(src);
    if (src.FieldType == "RelationTo")
        res = Create_FieldInfoRelation_From(src);
    if (src.FieldType == "ShortText")
        res = Create_FieldInfoShortText_From(src);
    if (src.FieldType == "Time")
        res = Create_FieldInfoTime_From(src);
    if (src.FieldType == "TimeSpan")
        res = Create_FieldInfoTimeSpan_From(src);
    res.FieldType = enums.CustomFieldType[src.FieldType];
    res.FieldName = src.FieldName;
    res.DisplayName = src.DisplayName;
    res.Description = src.Description;
    res.ShortLabel = src.ShortLabel;
    res.HideLabel = src.HideLabel;
    res.HideField = src.HideField;
    res.IsIndexed = src.IsIndexed;
    res.IsMandatory = src.IsMandatory;
    res.IsReadOnly = src.IsReadOnly;
    res.IsExternal = src.IsExternal;
    res.Rank = src.Rank;
    res.TemplateVariableName = src.TemplateVariableName;
    return res;
}
exports.Create_FieldInfoBase_From = Create_FieldInfoBase_From;
function Create_FieldInfoBaseArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoBase_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoBaseArray_From = Create_FieldInfoBaseArray_From;
function Create_FieldInfoBaseArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoBaseArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoBaseArrayArray_From = Create_FieldInfoBaseArrayArray_From;
function Create_FieldInfoAttachment_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = src;
    res.DefaultValue = src.DefaultValue;
    return res;
}
exports.Create_FieldInfoAttachment_From = Create_FieldInfoAttachment_From;
function Create_FieldInfoAttachmentArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoAttachment_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoAttachmentArray_From = Create_FieldInfoAttachmentArray_From;
function Create_FieldInfoAttachmentArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoAttachmentArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoAttachmentArrayArray_From = Create_FieldInfoAttachmentArrayArray_From;
function Create_FieldInfoBlob_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = src;
    return res;
}
exports.Create_FieldInfoBlob_From = Create_FieldInfoBlob_From;
function Create_FieldInfoBlobArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoBlob_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoBlobArray_From = Create_FieldInfoBlobArray_From;
function Create_FieldInfoBlobArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoBlobArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoBlobArrayArray_From = Create_FieldInfoBlobArrayArray_From;
function Create_FieldInfoBool_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = src;
    res.DefaultValue = src.DefaultValue;
    return res;
}
exports.Create_FieldInfoBool_From = Create_FieldInfoBool_From;
function Create_FieldInfoBoolArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoBool_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoBoolArray_From = Create_FieldInfoBoolArray_From;
function Create_FieldInfoBoolArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoBoolArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoBoolArrayArray_From = Create_FieldInfoBoolArrayArray_From;
function Create_FieldInfoDate_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = src;
    res.DefaultValue = Create_Date_From(src.DefaultValue);
    res.IsDefaultNow = src.IsDefaultNow;
    return res;
}
exports.Create_FieldInfoDate_From = Create_FieldInfoDate_From;
function Create_FieldInfoDateArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoDate_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoDateArray_From = Create_FieldInfoDateArray_From;
function Create_FieldInfoDateArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoDateArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoDateArrayArray_From = Create_FieldInfoDateArrayArray_From;
function Create_FieldInfoDateTime_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = src;
    res.DefaultValue = Create_Date_From(src.DefaultValue);
    res.IsDefaultNow = src.IsDefaultNow;
    return res;
}
exports.Create_FieldInfoDateTime_From = Create_FieldInfoDateTime_From;
function Create_FieldInfoDateTimeArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoDateTime_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoDateTimeArray_From = Create_FieldInfoDateTimeArray_From;
function Create_FieldInfoDateTimeArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoDateTimeArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoDateTimeArrayArray_From = Create_FieldInfoDateTimeArrayArray_From;
function Create_FieldInfoDecimal_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = src;
    res.DefaultValue = src.DefaultValue;
    res.Precision = src.Precision;
    return res;
}
exports.Create_FieldInfoDecimal_From = Create_FieldInfoDecimal_From;
function Create_FieldInfoDecimalArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoDecimal_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoDecimalArray_From = Create_FieldInfoDecimalArray_From;
function Create_FieldInfoDecimalArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoDecimalArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoDecimalArrayArray_From = Create_FieldInfoDecimalArrayArray_From;
function Create_FieldInfoDynamicLink_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = src;
    res.LinkName = src.LinkName;
    res.LinkValue = src.LinkValue;
    return res;
}
exports.Create_FieldInfoDynamicLink_From = Create_FieldInfoDynamicLink_From;
function Create_FieldInfoDynamicLinkArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoDynamicLink_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoDynamicLinkArray_From = Create_FieldInfoDynamicLinkArray_From;
function Create_FieldInfoDynamicLinkArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoDynamicLinkArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoDynamicLinkArrayArray_From = Create_FieldInfoDynamicLinkArrayArray_From;
function Create_FieldInfoInt_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = src;
    res.DefaultValue = src.DefaultValue;
    return res;
}
exports.Create_FieldInfoInt_From = Create_FieldInfoInt_From;
function Create_FieldInfoIntArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoInt_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoIntArray_From = Create_FieldInfoIntArray_From;
function Create_FieldInfoIntArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoIntArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoIntArrayArray_From = Create_FieldInfoIntArrayArray_From;
function Create_FieldInfoMdoList_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = src;
    res.DefaultValue = src.DefaultValue;
    res.MdoListName = src.MdoListName;
    return res;
}
exports.Create_FieldInfoMdoList_From = Create_FieldInfoMdoList_From;
function Create_FieldInfoMdoListArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoMdoList_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoMdoListArray_From = Create_FieldInfoMdoListArray_From;
function Create_FieldInfoMdoListArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoMdoListArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoMdoListArrayArray_From = Create_FieldInfoMdoListArrayArray_From;
function Create_FieldInfoListText_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = src;
    res.DefaultValue = src.DefaultValue;
    res.TextLength = src.TextLength;
    res.Choices = src.Choices;
    return res;
}
exports.Create_FieldInfoListText_From = Create_FieldInfoListText_From;
function Create_FieldInfoListTextArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoListText_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoListTextArray_From = Create_FieldInfoListTextArray_From;
function Create_FieldInfoListTextArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoListTextArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoListTextArrayArray_From = Create_FieldInfoListTextArrayArray_From;
function Create_FieldInfoLongText_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = src;
    res.DefaultValue = src.DefaultValue;
    res.IsHtml = src.IsHtml;
    res.UseTextArea = src.UseTextArea;
    res.NumRows = src.NumRows;
    return res;
}
exports.Create_FieldInfoLongText_From = Create_FieldInfoLongText_From;
function Create_FieldInfoLongTextArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoLongText_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoLongTextArray_From = Create_FieldInfoLongTextArray_From;
function Create_FieldInfoLongTextArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoLongTextArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoLongTextArrayArray_From = Create_FieldInfoLongTextArrayArray_From;
function Create_FieldInfoRelation_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = src;
    res.DefaultValue = src.DefaultValue;
    res.TargetTable = src.TargetTable;
    res.TargetLabel = src.TargetLabel;
    res.UseDropDown = src.UseDropDown;
    res.MdoListName = src.MdoListName;
    return res;
}
exports.Create_FieldInfoRelation_From = Create_FieldInfoRelation_From;
function Create_FieldInfoRelationArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoRelation_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoRelationArray_From = Create_FieldInfoRelationArray_From;
function Create_FieldInfoRelationArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoRelationArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoRelationArrayArray_From = Create_FieldInfoRelationArrayArray_From;
function Create_FieldInfoShortText_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = src;
    res.DefaultValue = src.DefaultValue;
    res.TextLength = src.TextLength;
    res.FormatMask = src.FormatMask;
    res.IsHtml = src.IsHtml;
    return res;
}
exports.Create_FieldInfoShortText_From = Create_FieldInfoShortText_From;
function Create_FieldInfoShortTextArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoShortText_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoShortTextArray_From = Create_FieldInfoShortTextArray_From;
function Create_FieldInfoShortTextArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoShortTextArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoShortTextArrayArray_From = Create_FieldInfoShortTextArrayArray_From;
function Create_FieldInfoTime_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = src;
    res.DefaultValue = Create_Date_From(src.DefaultValue);
    res.IsDefaultNow = src.IsDefaultNow;
    return res;
}
exports.Create_FieldInfoTime_From = Create_FieldInfoTime_From;
function Create_FieldInfoTimeArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoTime_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoTimeArray_From = Create_FieldInfoTimeArray_From;
function Create_FieldInfoTimeArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoTimeArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoTimeArrayArray_From = Create_FieldInfoTimeArrayArray_From;
function Create_FieldInfoTimeSpan_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = src;
    res.DefaultValue = src.DefaultValue;
    res.UseDays = src.UseDays;
    res.UseHours = src.UseHours;
    res.UseMinutes = src.UseMinutes;
    res.MaxNum = src.MaxNum;
    return res;
}
exports.Create_FieldInfoTimeSpan_From = Create_FieldInfoTimeSpan_From;
function Create_FieldInfoTimeSpanArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoTimeSpan_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoTimeSpanArray_From = Create_FieldInfoTimeSpanArray_From;
function Create_FieldInfoTimeSpanArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldInfoTimeSpanArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldInfoTimeSpanArrayArray_From = Create_FieldInfoTimeSpanArrayArray_From;
function Create_UserDefinedFieldInfo_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.UDefFieldId = src.UDefFieldId;
    res.ColumnId = src.ColumnId;
    res.FieldDefault = src.FieldDefault;
    res.FieldHeight = src.FieldHeight;
    res.FieldLabel = src.FieldLabel;
    res.FieldLeft = src.FieldLeft;
    res.FieldTop = src.FieldTop;
    res.FieldType = enums.UDefFieldType[src.FieldType];
    res.FieldWidth = src.FieldWidth;
    res.FormatMask = src.FormatMask;
    res.HideLabel = src.HideLabel;
    res.IsIndexed = src.IsIndexed;
    res.LabelHeight = src.LabelHeight;
    res.LabelLeft = src.LabelLeft;
    res.LabelTop = src.LabelTop;
    res.LabelWidth = src.LabelWidth;
    res.LastVersionId = src.LastVersionId;
    res.ListTableId = src.ListTableId;
    res.IsMandatory = src.IsMandatory;
    res.Type = enums.UDefType[src.Type];
    res.Page1LineNo = src.Page1LineNo;
    res.ProgId = src.ProgId;
    res.IsReadOnly = src.IsReadOnly;
    res.ShortLabel = src.ShortLabel;
    res.TabOrder = src.TabOrder;
    res.TextLength = src.TextLength;
    res.Tooltip = src.Tooltip;
    res.UdefIdentity = src.UdefIdentity;
    res.UDListDefinitionId = src.UDListDefinitionId;
    res.Justification = enums.UdefJustification[src.Justification];
    res.Version = src.Version;
    res.TemplateVariableName = src.TemplateVariableName;
    res.HasBeenPublished = src.HasBeenPublished;
    res.MdoListName = src.MdoListName;
    return res;
}
exports.Create_UserDefinedFieldInfo_From = Create_UserDefinedFieldInfo_From;
function Create_UserDefinedFieldInfoArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_UserDefinedFieldInfo_From(src[i]);
        }
    }
    return res;
}
exports.Create_UserDefinedFieldInfoArray_From = Create_UserDefinedFieldInfoArray_From;
function Create_UserDefinedFieldInfoArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_UserDefinedFieldInfoArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_UserDefinedFieldInfoArrayArray_From = Create_UserDefinedFieldInfoArrayArray_From;
function Create_ReportEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ReportId = src.ReportId;
    res.ReportCategory = enums.ReportCategory[src.ReportCategory];
    res.Description = src.Description;
    res.ReportLayout = enums.ReportLayout[src.ReportLayout];
    res.Name = src.Name;
    res.AssociateId = src.AssociateId;
    res.TemplateId = src.TemplateId;
    res.Published = src.Published;
    return res;
}
exports.Create_ReportEntity_From = Create_ReportEntity_From;
function Create_ReportEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ReportEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_ReportEntityArray_From = Create_ReportEntityArray_From;
function Create_ReportEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ReportEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ReportEntityArrayArray_From = Create_ReportEntityArrayArray_From;
function Create_ReportLabelLayoutEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ReportLabelLayoutId = src.ReportLabelLayoutId;
    res.Name = src.Name;
    res.Description = src.Description;
    res.Orientation = enums.ReportPaperOrientation[src.Orientation];
    res.PaperWidth = src.PaperWidth;
    res.PaperHeight = src.PaperHeight;
    res.LeftMargin = src.LeftMargin;
    res.RightMargin = src.RightMargin;
    res.TopMargin = src.TopMargin;
    res.BottomMargin = src.BottomMargin;
    res.CountColumns = src.CountColumns;
    res.CountRows = src.CountRows;
    return res;
}
exports.Create_ReportLabelLayoutEntity_From = Create_ReportLabelLayoutEntity_From;
function Create_ReportLabelLayoutEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ReportLabelLayoutEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_ReportLabelLayoutEntityArray_From = Create_ReportLabelLayoutEntityArray_From;
function Create_ReportLabelLayoutEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ReportLabelLayoutEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ReportLabelLayoutEntityArrayArray_From = Create_ReportLabelLayoutEntityArrayArray_From;
function Create_SaintConfiguration_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.OwnerTable = src.OwnerTable;
    res.Enabled = src.Enabled;
    res.Period1 = src.Period1;
    res.Period2 = src.Period2;
    res.Period3 = src.Period3;
    res.GenerationStart = Create_Date_From(src.GenerationStart);
    res.GenerationEnd = Create_Date_From(src.GenerationEnd);
    res.RowsGenerated = src.RowsGenerated;
    return res;
}
exports.Create_SaintConfiguration_From = Create_SaintConfiguration_From;
function Create_SaintConfigurationArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SaintConfiguration_From(src[i]);
        }
    }
    return res;
}
exports.Create_SaintConfigurationArray_From = Create_SaintConfigurationArray_From;
function Create_SaintConfigurationArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SaintConfigurationArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SaintConfigurationArrayArray_From = Create_SaintConfigurationArrayArray_From;
function Create_StatusMonitor_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.OwnerTable = src.OwnerTable;
    res.Rank = src.Rank;
    res.DefaultTask = src.DefaultTask;
    res.DefaultTaskText = src.DefaultTaskText;
    res.IsVisual = src.IsVisual;
    res.LastGenerated = Create_Date_From(src.LastGenerated);
    res.Description = src.Description;
    res.Name = src.Name;
    res.StatusMonitorId = src.StatusMonitorId;
    res.PictureId = src.PictureId;
    res.NeedsUpdate = src.NeedsUpdate;
    res.Deleted = src.Deleted;
    res.NumMatches = src.NumMatches;
    res.NumNeedUpdate = src.NumNeedUpdate;
    res.GenerationStart = Create_Date_From(src.GenerationStart);
    return res;
}
exports.Create_StatusMonitor_From = Create_StatusMonitor_From;
function Create_StatusMonitorArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_StatusMonitor_From(src[i]);
        }
    }
    return res;
}
exports.Create_StatusMonitorArray_From = Create_StatusMonitorArray_From;
function Create_StatusMonitorArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_StatusMonitorArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_StatusMonitorArrayArray_From = Create_StatusMonitorArrayArray_From;
function Create_StatusMonitorPeriods_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Period1 = src.Period1;
    res.Period2 = src.Period2;
    res.Period3 = src.Period3;
    return res;
}
exports.Create_StatusMonitorPeriods_From = Create_StatusMonitorPeriods_From;
function Create_StatusMonitorPeriodsArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_StatusMonitorPeriods_From(src[i]);
        }
    }
    return res;
}
exports.Create_StatusMonitorPeriodsArray_From = Create_StatusMonitorPeriodsArray_From;
function Create_StatusMonitorPeriodsArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_StatusMonitorPeriodsArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_StatusMonitorPeriodsArrayArray_From = Create_StatusMonitorPeriodsArrayArray_From;
function Create_Batch_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    return res;
}
exports.Create_Batch_From = Create_Batch_From;
function Create_BatchArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Batch_From(src[i]);
        }
    }
    return res;
}
exports.Create_BatchArray_From = Create_BatchArray_From;
function Create_BatchArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_BatchArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_BatchArrayArray_From = Create_BatchArrayArray_From;
function Create_BatchTaskInfo_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Name = src.Name;
    res.AssociateId = src.AssociateId;
    res.DetailsTable = src.DetailsTable;
    res.DetailsRecord = src.DetailsRecord;
    res.IsSystemTask = src.IsSystemTask;
    res.IsInternalTask = src.IsInternalTask;
    res.ParameterObject = Create_StringDictionary_From(src.ParameterObject);
    res.LastStarted = Create_Date_From(src.LastStarted);
    res.Created = Create_Date_From(src.Created);
    res.StartCount = src.StartCount;
    res.DatabaseSerialNumber = src.DatabaseSerialNumber;
    res.Context = src.Context;
    res.Result = src.Result;
    res.State = enums.BatchTaskState[src.State];
    res.Description = src.Description;
    res.Response = src.Response;
    res.Request = src.Request;
    res.ProgressDescription = src.ProgressDescription;
    res.ProgressPercent = src.ProgressPercent;
    res.FileName = src.FileName;
    res.CancellationBehaviour = enums.BatchTaskCancellationBehaviour[src.CancellationBehaviour];
    return res;
}
exports.Create_BatchTaskInfo_From = Create_BatchTaskInfo_From;
function Create_BatchTaskInfoArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_BatchTaskInfo_From(src[i]);
        }
    }
    return res;
}
exports.Create_BatchTaskInfoArray_From = Create_BatchTaskInfoArray_From;
function Create_BatchTaskInfoArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_BatchTaskInfoArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_BatchTaskInfoArrayArray_From = Create_BatchTaskInfoArrayArray_From;
function Create_ContactRelationEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.SourceContactId = src.SourceContactId;
    res.SourcePersonId = src.SourcePersonId;
    res.DestinationContactId = src.DestinationContactId;
    res.DestinationPersonId = src.DestinationPersonId;
    res.RelationId = src.RelationId;
    res.Comment = src.Comment;
    res.RelationDefinitionId = src.RelationDefinitionId;
    res.Reversed = src.Reversed;
    res.UpdatedDate = Create_Date_From(src.UpdatedDate);
    res.CreatedDate = Create_Date_From(src.CreatedDate);
    res.CreatedBy = Create_Associate_From(src.CreatedBy);
    res.UpdatedBy = Create_Associate_From(src.UpdatedBy);
    res.SourceContactName = src.SourceContactName;
    res.SourcePersonName = src.SourcePersonName;
    res.DestinationContactName = src.DestinationContactName;
    res.DestinationPersonName = src.DestinationPersonName;
    res.ActiveText = src.ActiveText;
    res.PassiveText = src.PassiveText;
    return res;
}
exports.Create_ContactRelationEntity_From = Create_ContactRelationEntity_From;
function Create_ContactRelationEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ContactRelationEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_ContactRelationEntityArray_From = Create_ContactRelationEntityArray_From;
function Create_ContactRelationEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ContactRelationEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ContactRelationEntityArrayArray_From = Create_ContactRelationEntityArrayArray_From;
function Create_ActivityFilter_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.FromDate = Create_Date_From(src.FromDate);
    res.ToDate = Create_Date_From(src.ToDate);
    res.AssociateList = Create_SelectableMDOListItemArray_From(src.AssociateList);
    res.GroupList = Create_SelectableMDOListItemArray_From(src.GroupList);
    res.FutureDateList = Create_MDOListItemArray_From(src.FutureDateList);
    return res;
}
exports.Create_ActivityFilter_From = Create_ActivityFilter_From;
function Create_ActivityFilterArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ActivityFilter_From(src[i]);
        }
    }
    return res;
}
exports.Create_ActivityFilterArray_From = Create_ActivityFilterArray_From;
function Create_ActivityFilterArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ActivityFilterArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ActivityFilterArrayArray_From = Create_ActivityFilterArrayArray_From;
function Create_ArchiveColumnData_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.DisplayValue = src.DisplayValue;
    res.TooltipHint = src.TooltipHint;
    res.LinkHint = src.LinkHint;
    return res;
}
exports.Create_ArchiveColumnData_From = Create_ArchiveColumnData_From;
function Create_ArchiveColumnDataArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ArchiveColumnData_From(src[i]);
        }
    }
    return res;
}
exports.Create_ArchiveColumnDataArray_From = Create_ArchiveColumnDataArray_From;
function Create_ArchiveColumnDataArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ArchiveColumnDataArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ArchiveColumnDataArrayArray_From = Create_ArchiveColumnDataArrayArray_From;
function Create_ArchiveColumnInfo_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.DisplayName = src.DisplayName;
    res.DisplayTooltip = src.DisplayTooltip;
    res.DisplayType = src.DisplayType;
    res.CanOrderBy = src.CanOrderBy;
    res.Name = src.Name;
    res.CanRestrictBy = src.CanRestrictBy;
    res.RestrictionType = src.RestrictionType;
    res.RestrictionListName = src.RestrictionListName;
    res.IsVisible = src.IsVisible;
    res.Width = src.Width;
    res.IconHint = src.IconHint;
    res.HeadingIconHint = src.HeadingIconHint;
    res.ExtraInfo = src.ExtraInfo;
    return res;
}
exports.Create_ArchiveColumnInfo_From = Create_ArchiveColumnInfo_From;
function Create_ArchiveColumnInfoArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ArchiveColumnInfo_From(src[i]);
        }
    }
    return res;
}
exports.Create_ArchiveColumnInfoArray_From = Create_ArchiveColumnInfoArray_From;
function Create_ArchiveColumnInfoArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ArchiveColumnInfoArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ArchiveColumnInfoArrayArray_From = Create_ArchiveColumnInfoArrayArray_From;
function Create_ArchiveConfiguration_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ArchiveColumnInfo = Create_ArchiveColumnInfoArray_From(src.ArchiveColumnInfo);
    res.ArchiveEntityInfo = Create_SelectableMDOListItemArray_From(src.ArchiveEntityInfo);
    res.ArchiveOrderByInfo = Create_ArchiveOrderByInfoArray_From(src.ArchiveOrderByInfo);
    res.OwnerKeys = src.OwnerKeys;
    return res;
}
exports.Create_ArchiveConfiguration_From = Create_ArchiveConfiguration_From;
function Create_ArchiveConfigurationArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ArchiveConfiguration_From(src[i]);
        }
    }
    return res;
}
exports.Create_ArchiveConfigurationArray_From = Create_ArchiveConfigurationArray_From;
function Create_ArchiveConfigurationArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ArchiveConfigurationArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ArchiveConfigurationArrayArray_From = Create_ArchiveConfigurationArrayArray_From;
function Create_ArchiveListItem_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.EntityName = src.EntityName;
    res.PrimaryKey = src.PrimaryKey;
    res.ColumnData = Create_ColumnDataDictionary_From(src.ColumnData);
    res.LinkHint = src.LinkHint;
    res.StyleHint = src.StyleHint;
    return res;
}
exports.Create_ArchiveListItem_From = Create_ArchiveListItem_From;
function Create_ArchiveListItemArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ArchiveListItem_From(src[i]);
        }
    }
    return res;
}
exports.Create_ArchiveListItemArray_From = Create_ArchiveListItemArray_From;
function Create_ArchiveListItemArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ArchiveListItemArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ArchiveListItemArrayArray_From = Create_ArchiveListItemArrayArray_From;
function Create_ArchiveListResult_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.RowCount = src.RowCount;
    res.Rows = Create_ArchiveListItemArray_From(src.Rows);
    return res;
}
exports.Create_ArchiveListResult_From = Create_ArchiveListResult_From;
function Create_ArchiveListResultArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ArchiveListResult_From(src[i]);
        }
    }
    return res;
}
exports.Create_ArchiveListResultArray_From = Create_ArchiveListResultArray_From;
function Create_ArchiveListResultArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ArchiveListResultArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ArchiveListResultArrayArray_From = Create_ArchiveListResultArrayArray_From;
function Create_ArchiveOrderByInfo_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.Name = src.Name;
    res.Direction = enums.OrderBySortType[src.Direction];
    return res;
}
exports.Create_ArchiveOrderByInfo_From = Create_ArchiveOrderByInfo_From;
function Create_ArchiveOrderByInfoArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ArchiveOrderByInfo_From(src[i]);
        }
    }
    return res;
}
exports.Create_ArchiveOrderByInfoArray_From = Create_ArchiveOrderByInfoArray_From;
function Create_ArchiveOrderByInfoArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ArchiveOrderByInfoArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ArchiveOrderByInfoArrayArray_From = Create_ArchiveOrderByInfoArrayArray_From;
function Create_ArchiveRestrictionGroup_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.Name = src.Name;
    res.Description = src.Description;
    res.Rank = src.Rank;
    res.Restrictions = Create_ArchiveRestrictionInfoArray_From(src.Restrictions);
    return res;
}
exports.Create_ArchiveRestrictionGroup_From = Create_ArchiveRestrictionGroup_From;
function Create_ArchiveRestrictionGroupArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ArchiveRestrictionGroup_From(src[i]);
        }
    }
    return res;
}
exports.Create_ArchiveRestrictionGroupArray_From = Create_ArchiveRestrictionGroupArray_From;
function Create_ArchiveRestrictionGroupArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ArchiveRestrictionGroupArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ArchiveRestrictionGroupArrayArray_From = Create_ArchiveRestrictionGroupArrayArray_From;
function Create_ArchiveRestrictionInfo_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.Name = src.Name;
    res.Operator = src.Operator;
    res.Values = src.Values;
    res.DisplayValues = src.DisplayValues;
    res.ColumnInfo = Create_ArchiveColumnInfo_From(src.ColumnInfo);
    res.IsActive = src.IsActive;
    res.SubRestrictions = Create_ArchiveRestrictionInfoArray_From(src.SubRestrictions);
    res.InterParenthesis = src.InterParenthesis;
    res.InterOperator = enums.InterRestrictionOperator[src.InterOperator];
    res.UniqueHash = src.UniqueHash;
    return res;
}
exports.Create_ArchiveRestrictionInfo_From = Create_ArchiveRestrictionInfo_From;
function Create_ArchiveRestrictionInfoArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ArchiveRestrictionInfo_From(src[i]);
        }
    }
    return res;
}
exports.Create_ArchiveRestrictionInfoArray_From = Create_ArchiveRestrictionInfoArray_From;
function Create_ArchiveRestrictionInfoArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ArchiveRestrictionInfoArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ArchiveRestrictionInfoArrayArray_From = Create_ArchiveRestrictionInfoArrayArray_From;
function Create_ExportArchiveResult_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.BatchTaskId = src.BatchTaskId;
    res.FileName = src.FileName;
    res.Message = src.Message;
    return res;
}
exports.Create_ExportArchiveResult_From = Create_ExportArchiveResult_From;
function Create_ExportArchiveResultArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ExportArchiveResult_From(src[i]);
        }
    }
    return res;
}
exports.Create_ExportArchiveResultArray_From = Create_ExportArchiveResultArray_From;
function Create_ExportArchiveResultArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ExportArchiveResultArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ExportArchiveResultArrayArray_From = Create_ExportArchiveResultArrayArray_From;
function Create_RelatedData_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.Field = src.Field;
    res.FieldValue = Create_ArchiveColumnData_From(src.FieldValue);
    return res;
}
exports.Create_RelatedData_From = Create_RelatedData_From;
function Create_RelatedDataArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RelatedData_From(src[i]);
        }
    }
    return res;
}
exports.Create_RelatedDataArray_From = Create_RelatedDataArray_From;
function Create_RelatedDataArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RelatedDataArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_RelatedDataArrayArray_From = Create_RelatedDataArrayArray_From;
function Create_AudienceConfigParameter_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.AudienceLayoutId = src.AudienceLayoutId;
    res.Name = src.Name;
    res.Value = src.Value;
    res.CreatedDate = Create_Date_From(src.CreatedDate);
    res.UpdatedDate = Create_Date_From(src.UpdatedDate);
    res.CreatedBy = src.CreatedBy;
    res.UpdatedBy = src.UpdatedBy;
    return res;
}
exports.Create_AudienceConfigParameter_From = Create_AudienceConfigParameter_From;
function Create_AudienceConfigParameterArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_AudienceConfigParameter_From(src[i]);
        }
    }
    return res;
}
exports.Create_AudienceConfigParameterArray_From = Create_AudienceConfigParameterArray_From;
function Create_AudienceConfigParameterArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_AudienceConfigParameterArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_AudienceConfigParameterArrayArray_From = Create_AudienceConfigParameterArrayArray_From;
function Create_AudienceLayoutEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.AudienceLayoutId = src.AudienceLayoutId;
    res.InstanceLayout = src.InstanceLayout;
    res.InstanceName = src.InstanceName;
    res.CreatedDate = Create_Date_From(src.CreatedDate);
    res.UpdatedDate = Create_Date_From(src.UpdatedDate);
    res.CreatedBy = Create_Associate_From(src.CreatedBy);
    res.UpdatedBy = Create_Associate_From(src.UpdatedBy);
    return res;
}
exports.Create_AudienceLayoutEntity_From = Create_AudienceLayoutEntity_From;
function Create_AudienceLayoutEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_AudienceLayoutEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_AudienceLayoutEntityArray_From = Create_AudienceLayoutEntityArray_From;
function Create_AudienceLayoutEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_AudienceLayoutEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_AudienceLayoutEntityArrayArray_From = Create_AudienceLayoutEntityArrayArray_From;
function Create_Preference_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Level = enums.PreferenceLevel[src.Level];
    res.RawValue = src.RawValue;
    res.Specification = Create_PreferenceSpec_From(src.Specification);
    res.DisplayValue = src.DisplayValue;
    res.DisplayTooltip = src.DisplayTooltip;
    res.DisplayType = enums.PrefDescValueType[src.DisplayType];
    res.TabOrder = Create_TabOrder_From(src.TabOrder);
    res.TargetId = src.TargetId;
    res.PrefDescId = src.PrefDescId;
    res.TableName = src.TableName;
    res.UserPreferenceId = src.UserPreferenceId;
    return res;
}
exports.Create_Preference_From = Create_Preference_From;
function Create_PreferenceArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Preference_From(src[i]);
        }
    }
    return res;
}
exports.Create_PreferenceArray_From = Create_PreferenceArray_From;
function Create_PreferenceArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PreferenceArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_PreferenceArrayArray_From = Create_PreferenceArrayArray_From;
function Create_PreferenceDescription_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.PrefDescId = src.PrefDescId;
    res.Section = src.Section;
    res.Key = src.Key;
    res.Name = src.Name;
    res.ValueType = enums.PrefDescValueType[src.ValueType];
    res.MaxLevel = enums.PreferenceLevel[src.MaxLevel];
    res.SysMaxLevel = enums.PreferenceLevel[src.SysMaxLevel];
    res.AccessFlags = Create_PrefDescAccessFlags_From(src.AccessFlags);
    res.Description = src.Description;
    res.IsBuiltin = src.IsBuiltin;
    res.TableName = src.TableName;
    res.UserDefinedListId = src.UserDefinedListId;
    res.Rank = src.Rank;
    res.SubGroup = src.SubGroup;
    res.MinLevel = src.MinLevel;
    res.MaxValue = src.MaxValue;
    res.MinValue = src.MinValue;
    res.RequiredLicense = src.RequiredLicense;
    return res;
}
exports.Create_PreferenceDescription_From = Create_PreferenceDescription_From;
function Create_PreferenceDescriptionArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PreferenceDescription_From(src[i]);
        }
    }
    return res;
}
exports.Create_PreferenceDescriptionArray_From = Create_PreferenceDescriptionArray_From;
function Create_PreferenceDescriptionArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PreferenceDescriptionArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_PreferenceDescriptionArrayArray_From = Create_PreferenceDescriptionArrayArray_From;
function Create_PreferenceDescriptionLine_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.PrefDescLineId = src.PrefDescLineId;
    res.PrefDescId = src.PrefDescId;
    res.PrefValue = src.PrefValue;
    res.PrefShowValue = src.PrefShowValue;
    res.Description = src.Description;
    res.IsBuiltin = src.IsBuiltin;
    return res;
}
exports.Create_PreferenceDescriptionLine_From = Create_PreferenceDescriptionLine_From;
function Create_PreferenceDescriptionLineArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PreferenceDescriptionLine_From(src[i]);
        }
    }
    return res;
}
exports.Create_PreferenceDescriptionLineArray_From = Create_PreferenceDescriptionLineArray_From;
function Create_PreferenceDescriptionLineArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PreferenceDescriptionLineArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_PreferenceDescriptionLineArrayArray_From = Create_PreferenceDescriptionLineArrayArray_From;
function Create_PreferenceSpec_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Section = src.Section;
    res.Key = src.Key;
    return res;
}
exports.Create_PreferenceSpec_From = Create_PreferenceSpec_From;
function Create_PreferenceSpecArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PreferenceSpec_From(src[i]);
        }
    }
    return res;
}
exports.Create_PreferenceSpecArray_From = Create_PreferenceSpecArray_From;
function Create_PreferenceSpecArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PreferenceSpecArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_PreferenceSpecArrayArray_From = Create_PreferenceSpecArrayArray_From;
function Create_TabOrder_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.TabOrderId = src.TabOrderId;
    res.TabName = src.TabName;
    res.Order = src.Order;
    res.AssociateId = src.AssociateId;
    return res;
}
exports.Create_TabOrder_From = Create_TabOrder_From;
function Create_TabOrderArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TabOrder_From(src[i]);
        }
    }
    return res;
}
exports.Create_TabOrderArray_From = Create_TabOrderArray_From;
function Create_TabOrderArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TabOrderArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TabOrderArrayArray_From = Create_TabOrderArrayArray_From;
function Create_CheckLicenseStatusResult_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.LicenseStatus = enums.LicenseStatus[src.LicenseStatus];
    res.Message = src.Message;
    res.Url = src.Url;
    return res;
}
exports.Create_CheckLicenseStatusResult_From = Create_CheckLicenseStatusResult_From;
function Create_CheckLicenseStatusResultArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CheckLicenseStatusResult_From(src[i]);
        }
    }
    return res;
}
exports.Create_CheckLicenseStatusResultArray_From = Create_CheckLicenseStatusResultArray_From;
function Create_CheckLicenseStatusResultArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CheckLicenseStatusResultArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CheckLicenseStatusResultArrayArray_From = Create_CheckLicenseStatusResultArrayArray_From;
function Create_ExtendedLicenseInfo_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.Reason = src.Reason;
    res.CanBeActivated = src.CanBeActivated;
    res.New = Create_LicenseInfo_From(src.New);
    res.Current = Create_LicenseInfo_From(src.Current);
    res.ExtendedModuleLicenses = Create_ExtendedModuleLicenseArray_From(src.ExtendedModuleLicenses);
    res.AccumulatedNextCheckDate = Create_Date_From(src.AccumulatedNextCheckDate);
    return res;
}
exports.Create_ExtendedLicenseInfo_From = Create_ExtendedLicenseInfo_From;
function Create_ExtendedLicenseInfoArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ExtendedLicenseInfo_From(src[i]);
        }
    }
    return res;
}
exports.Create_ExtendedLicenseInfoArray_From = Create_ExtendedLicenseInfoArray_From;
function Create_ExtendedLicenseInfoArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ExtendedLicenseInfoArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ExtendedLicenseInfoArrayArray_From = Create_ExtendedLicenseInfoArrayArray_From;
function Create_ExtendedModuleLicense_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.New = Create_ModuleLicense_From(src.New);
    res.Current = Create_ModuleLicense_From(src.Current);
    res.NumberOfLicensesInUse = src.NumberOfLicensesInUse;
    res.NumberOfLicensesFree = src.NumberOfLicensesFree;
    res.NumberOfLicensesAdded = src.NumberOfLicensesAdded;
    res.NumberOfLicensesNewTotal = src.NumberOfLicensesNewTotal;
    res.NumberOfLicensesNewFree = src.NumberOfLicensesNewFree;
    res.NumberOfLicensesTotal = src.NumberOfLicensesTotal;
    return res;
}
exports.Create_ExtendedModuleLicense_From = Create_ExtendedModuleLicense_From;
function Create_ExtendedModuleLicenseArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ExtendedModuleLicense_From(src[i]);
        }
    }
    return res;
}
exports.Create_ExtendedModuleLicenseArray_From = Create_ExtendedModuleLicenseArray_From;
function Create_ExtendedModuleLicenseArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ExtendedModuleLicenseArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ExtendedModuleLicenseArrayArray_From = Create_ExtendedModuleLicenseArrayArray_From;
function Create_License_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    return res;
}
exports.Create_License_From = Create_License_From;
function Create_LicenseArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_License_From(src[i]);
        }
    }
    return res;
}
exports.Create_LicenseArray_From = Create_LicenseArray_From;
function Create_LicenseArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_LicenseArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_LicenseArrayArray_From = Create_LicenseArrayArray_From;
function Create_LicenseInfo_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.CompanyName = src.CompanyName;
    res.SerialNr = src.SerialNr;
    res.OwnerName = src.OwnerName;
    res.OwnerDescription = src.OwnerDescription;
    res.NextCheckDate = Create_Date_From(src.NextCheckDate);
    res.MaintenanceDate = Create_Date_From(src.MaintenanceDate);
    res.AdminWarningDate = Create_Date_From(src.AdminWarningDate);
    res.ExpiryDate = Create_Date_From(src.ExpiryDate);
    res.GraceDate = Create_Date_From(src.GraceDate);
    res.ExtraFlags = src.ExtraFlags;
    res.LicenseUrl = src.LicenseUrl;
    res.LicenseVersion = src.LicenseVersion;
    res.DeploymentType = src.DeploymentType;
    res.ProductType = src.ProductType;
    res.ProductDescription = src.ProductDescription;
    res.ModuleLicenses = Create_ModuleLicenseArray_From(src.ModuleLicenses);
    res.PublicKey = Create_SignedPublicKey_From(src.PublicKey);
    res.Signature = src.Signature;
    return res;
}
exports.Create_LicenseInfo_From = Create_LicenseInfo_From;
function Create_LicenseInfoArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_LicenseInfo_From(src[i]);
        }
    }
    return res;
}
exports.Create_LicenseInfoArray_From = Create_LicenseInfoArray_From;
function Create_LicenseInfoArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_LicenseInfoArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_LicenseInfoArrayArray_From = Create_LicenseInfoArrayArray_From;
function Create_LicenseOwner_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Name = src.Name;
    res.Description = src.Description;
    res.RestrictedModuleLicenses = Create_ModuleLicenseLinkArray_From(src.RestrictedModuleLicenses);
    res.UnrestrictedModuleLicenses = Create_ModuleLicenseLinkArray_From(src.UnrestrictedModuleLicenses);
    return res;
}
exports.Create_LicenseOwner_From = Create_LicenseOwner_From;
function Create_LicenseOwnerArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_LicenseOwner_From(src[i]);
        }
    }
    return res;
}
exports.Create_LicenseOwnerArray_From = Create_LicenseOwnerArray_From;
function Create_LicenseOwnerArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_LicenseOwnerArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_LicenseOwnerArrayArray_From = Create_LicenseOwnerArrayArray_From;
function Create_LicenseResult_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Succeeded = src.Succeeded;
    res.Reason = src.Reason;
    return res;
}
exports.Create_LicenseResult_From = Create_LicenseResult_From;
function Create_LicenseResultArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_LicenseResult_From(src[i]);
        }
    }
    return res;
}
exports.Create_LicenseResultArray_From = Create_LicenseResultArray_From;
function Create_LicenseResultArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_LicenseResultArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_LicenseResultArrayArray_From = Create_LicenseResultArrayArray_From;
function Create_ModuleLicense_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.OwnerName = src.OwnerName;
    res.ModuleName = src.ModuleName;
    res.ModuleDescription = src.ModuleDescription;
    res.ModuleTooltip = src.ModuleTooltip;
    res.ModuleVersion = src.ModuleVersion;
    res.LicenseType = enums.LicenseType[src.LicenseType];
    res.Unrestricted = src.Unrestricted;
    res.AllowedUserType = enums.UserType[src.AllowedUserType];
    res.NumberOfLicenses = src.NumberOfLicenses;
    res.ExtraFlags = src.ExtraFlags;
    res.ExtraInfo = src.ExtraInfo;
    res.SortOrder = src.SortOrder;
    res.IsHidden = src.IsHidden;
    res.PrerequisiteModuleName = src.PrerequisiteModuleName;
    res.Signature = src.Signature;
    return res;
}
exports.Create_ModuleLicense_From = Create_ModuleLicense_From;
function Create_ModuleLicenseArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ModuleLicense_From(src[i]);
        }
    }
    return res;
}
exports.Create_ModuleLicenseArray_From = Create_ModuleLicenseArray_From;
function Create_ModuleLicenseArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ModuleLicenseArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ModuleLicenseArrayArray_From = Create_ModuleLicenseArrayArray_From;
function Create_ModuleLicenseLink_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Unrestricted = src.Unrestricted;
    res.Total = src.Total;
    res.Tooltip = src.Tooltip;
    res.CanAssign = src.CanAssign;
    res.Free = src.Free;
    res.InUse = src.InUse;
    res.IsHidden = src.IsHidden;
    res.Assigned = src.Assigned;
    res.ModuleLicenseId = src.ModuleLicenseId;
    res.Name = src.Name;
    res.Description = src.Description;
    res.PrerequisiteModuleName = src.PrerequisiteModuleName;
    res.SortOrder = src.SortOrder;
    res.ExtraFlags = src.ExtraFlags;
    return res;
}
exports.Create_ModuleLicenseLink_From = Create_ModuleLicenseLink_From;
function Create_ModuleLicenseLinkArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ModuleLicenseLink_From(src[i]);
        }
    }
    return res;
}
exports.Create_ModuleLicenseLinkArray_From = Create_ModuleLicenseLinkArray_From;
function Create_ModuleLicenseLinkArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ModuleLicenseLinkArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ModuleLicenseLinkArrayArray_From = Create_ModuleLicenseLinkArrayArray_From;
function Create_SignedPublicKey_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.OwnerName = src.OwnerName;
    res.SignDate = Create_Date_From(src.SignDate);
    res.ExpiryDate = Create_Date_From(src.ExpiryDate);
    res.Key = Create_DSAParameters_From(src.Key);
    res.Signature = src.Signature;
    return res;
}
exports.Create_SignedPublicKey_From = Create_SignedPublicKey_From;
function Create_SignedPublicKeyArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SignedPublicKey_From(src[i]);
        }
    }
    return res;
}
exports.Create_SignedPublicKeyArray_From = Create_SignedPublicKeyArray_From;
function Create_SignedPublicKeyArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SignedPublicKeyArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SignedPublicKeyArrayArray_From = Create_SignedPublicKeyArrayArray_From;
function Create_AccessGatewayInfo_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ClientId = src.ClientId;
    res.RedirectUri = src.RedirectUri;
    return res;
}
exports.Create_AccessGatewayInfo_From = Create_AccessGatewayInfo_From;
function Create_AccessGatewayInfoArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_AccessGatewayInfo_From(src[i]);
        }
    }
    return res;
}
exports.Create_AccessGatewayInfoArray_From = Create_AccessGatewayInfoArray_From;
function Create_AccessGatewayInfoArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_AccessGatewayInfoArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_AccessGatewayInfoArrayArray_From = Create_AccessGatewayInfoArrayArray_From;
function Create_Credential_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Type = Create_CredentialType_From(src.Type);
    res.Value = src.Value;
    res.DisplayValue = src.DisplayValue;
    return res;
}
exports.Create_Credential_From = Create_Credential_From;
function Create_CredentialArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Credential_From(src[i]);
        }
    }
    return res;
}
exports.Create_CredentialArray_From = Create_CredentialArray_From;
function Create_CredentialArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CredentialArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CredentialArrayArray_From = Create_CredentialArrayArray_From;
function Create_CredentialsGroup_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Name = src.Name;
    res.DisplayName = src.DisplayName;
    return res;
}
exports.Create_CredentialsGroup_From = Create_CredentialsGroup_From;
function Create_CredentialsGroupArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CredentialsGroup_From(src[i]);
        }
    }
    return res;
}
exports.Create_CredentialsGroupArray_From = Create_CredentialsGroupArray_From;
function Create_CredentialsGroupArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CredentialsGroupArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CredentialsGroupArrayArray_From = Create_CredentialsGroupArrayArray_From;
function Create_CredentialsGroupUsers_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Headings = src.Headings;
    res.Users = Create_CredentialUserArray_From(src.Users);
    return res;
}
exports.Create_CredentialsGroupUsers_From = Create_CredentialsGroupUsers_From;
function Create_CredentialsGroupUsersArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CredentialsGroupUsers_From(src[i]);
        }
    }
    return res;
}
exports.Create_CredentialsGroupUsersArray_From = Create_CredentialsGroupUsersArray_From;
function Create_CredentialsGroupUsersArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CredentialsGroupUsersArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CredentialsGroupUsersArrayArray_From = Create_CredentialsGroupUsersArrayArray_From;
function Create_CredentialType_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.DisplayType = src.DisplayType;
    res.Type = src.Type;
    res.Description = src.Description;
    res.ValueControl = enums.CredentialControlType[src.ValueControl];
    res.CanCreatePerson = src.CanCreatePerson;
    res.IsUserNameSupported = src.IsUserNameSupported;
    return res;
}
exports.Create_CredentialType_From = Create_CredentialType_From;
function Create_CredentialTypeArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CredentialType_From(src[i]);
        }
    }
    return res;
}
exports.Create_CredentialTypeArray_From = Create_CredentialTypeArray_From;
function Create_CredentialTypeArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CredentialTypeArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CredentialTypeArrayArray_From = Create_CredentialTypeArrayArray_From;
function Create_CredentialUser_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Value = src.Value;
    res.DisplayValue = src.DisplayValue;
    res.Columns = src.Columns;
    res.CanCreatePerson = src.CanCreatePerson;
    return res;
}
exports.Create_CredentialUser_From = Create_CredentialUser_From;
function Create_CredentialUserArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CredentialUser_From(src[i]);
        }
    }
    return res;
}
exports.Create_CredentialUserArray_From = Create_CredentialUserArray_From;
function Create_CredentialUserArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CredentialUserArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CredentialUserArrayArray_From = Create_CredentialUserArrayArray_From;
function Create_DataRight_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Value = src.Value;
    res.Description = src.Description;
    return res;
}
exports.Create_DataRight_From = Create_DataRight_From;
function Create_DataRightArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DataRight_From(src[i]);
        }
    }
    return res;
}
exports.Create_DataRightArray_From = Create_DataRightArray_From;
function Create_DataRightArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DataRightArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_DataRightArrayArray_From = Create_DataRightArrayArray_From;
function Create_DataRights_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ColumnsInfo = Create_RelationToOwnerArray_From(src.ColumnsInfo);
    res.RowsInfo = Create_EntityNameArray_From(src.RowsInfo);
    res.Rights = Create_DataRightArrayArray_From(src.Rights);
    return res;
}
exports.Create_DataRights_From = Create_DataRights_From;
function Create_DataRightsArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DataRights_From(src[i]);
        }
    }
    return res;
}
exports.Create_DataRightsArray_From = Create_DataRightsArray_From;
function Create_DataRightsArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DataRightsArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_DataRightsArrayArray_From = Create_DataRightsArrayArray_From;
function Create_EntityName_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.TableName = src.TableName;
    res.TableDescription = src.TableDescription;
    return res;
}
exports.Create_EntityName_From = Create_EntityName_From;
function Create_EntityNameArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EntityName_From(src[i]);
        }
    }
    return res;
}
exports.Create_EntityNameArray_From = Create_EntityNameArray_From;
function Create_EntityNameArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EntityNameArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_EntityNameArrayArray_From = Create_EntityNameArrayArray_From;
function Create_RelationToOwner_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_RelationToOwner_From = Create_RelationToOwner_From;
function Create_RelationToOwnerArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RelationToOwner_From(src[i]);
        }
    }
    return res;
}
exports.Create_RelationToOwnerArray_From = Create_RelationToOwnerArray_From;
function Create_RelationToOwnerArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RelationToOwnerArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_RelationToOwnerArrayArray_From = Create_RelationToOwnerArrayArray_From;
function Create_ResolvedUser_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.User = Create_User_From(src.User);
    res.PersonCreated = src.PersonCreated;
    return res;
}
exports.Create_ResolvedUser_From = Create_ResolvedUser_From;
function Create_ResolvedUserArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ResolvedUser_From(src[i]);
        }
    }
    return res;
}
exports.Create_ResolvedUserArray_From = Create_ResolvedUserArray_From;
function Create_ResolvedUserArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ResolvedUserArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ResolvedUserArrayArray_From = Create_ResolvedUserArrayArray_From;
function Create_Role_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Id = src.Id;
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    return res;
}
exports.Create_Role_From = Create_Role_From;
function Create_RoleArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Role_From(src[i]);
        }
    }
    return res;
}
exports.Create_RoleArray_From = Create_RoleArray_From;
function Create_RoleArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RoleArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_RoleArrayArray_From = Create_RoleArrayArray_From;
function Create_RoleEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.RoleId = src.RoleId;
    res.Name = src.Name;
    res.Tooltip = src.Tooltip;
    res.RoleType = enums.RoleType[src.RoleType];
    res.Deleted = src.Deleted;
    res.Rank = src.Rank;
    res.Created = Create_Date_From(src.Created);
    res.UseCategories = src.UseCategories;
    res.CreatedBy = Create_Associate_From(src.CreatedBy);
    res.Updated = Create_Date_From(src.Updated);
    res.UpdatedBy = Create_Associate_From(src.UpdatedBy);
    res.DataRights = Create_DataRights_From(src.DataRights);
    return res;
}
exports.Create_RoleEntity_From = Create_RoleEntity_From;
function Create_RoleEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RoleEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_RoleEntityArray_From = Create_RoleEntityArray_From;
function Create_RoleEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RoleEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_RoleEntityArrayArray_From = Create_RoleEntityArrayArray_From;
function Create_ServiceAuth_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ServiceAuthId = src.ServiceAuthId;
    res.Server = src.Server;
    res.Port = src.Port;
    res.AuthType = src.AuthType;
    res.Username = src.Username;
    res.Password = src.Password;
    return res;
}
exports.Create_ServiceAuth_From = Create_ServiceAuth_From;
function Create_ServiceAuthArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ServiceAuth_From(src[i]);
        }
    }
    return res;
}
exports.Create_ServiceAuthArray_From = Create_ServiceAuthArray_From;
function Create_ServiceAuthArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ServiceAuthArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ServiceAuthArrayArray_From = Create_ServiceAuthArrayArray_From;
function Create_TokenManagementInfo_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Provider = src.Provider;
    res.AccessToken = src.AccessToken;
    res.RefreshToken = src.RefreshToken;
    return res;
}
exports.Create_TokenManagementInfo_From = Create_TokenManagementInfo_From;
function Create_TokenManagementInfoArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TokenManagementInfo_From(src[i]);
        }
    }
    return res;
}
exports.Create_TokenManagementInfoArray_From = Create_TokenManagementInfoArray_From;
function Create_TokenManagementInfoArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TokenManagementInfoArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TokenManagementInfoArrayArray_From = Create_TokenManagementInfoArrayArray_From;
function Create_UntrustedCredentials_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ValidFrom = Create_Date_From(src.ValidFrom);
    res.ValidTo = Create_Date_From(src.ValidTo);
    res.Comment = src.Comment;
    res.SecretValue = src.SecretValue;
    res.PublicValue = src.PublicValue;
    res.IsActive = src.IsActive;
    return res;
}
exports.Create_UntrustedCredentials_From = Create_UntrustedCredentials_From;
function Create_UntrustedCredentialsArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_UntrustedCredentials_From(src[i]);
        }
    }
    return res;
}
exports.Create_UntrustedCredentialsArray_From = Create_UntrustedCredentialsArray_From;
function Create_UntrustedCredentialsArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_UntrustedCredentialsArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_UntrustedCredentialsArrayArray_From = Create_UntrustedCredentialsArrayArray_From;
function Create_User_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.AssociateId = src.AssociateId;
    res.Name = src.Name;
    res.Rank = src.Rank;
    res.Tooltip = src.Tooltip;
    res.LicenseOwners = Create_LicenseOwnerArray_From(src.LicenseOwners);
    res.Role = Create_Role_From(src.Role);
    res.UserGroup = Create_UserGroup_From(src.UserGroup);
    res.OtherGroups = Create_UserGroupArray_From(src.OtherGroups);
    res.Person = Create_Person_From(src.Person);
    res.Deleted = src.Deleted;
    res.Lastlogin = Create_Date_From(src.Lastlogin);
    res.Lastlogout = Create_Date_From(src.Lastlogout);
    res.EjUserId = src.EjUserId;
    res.RequestSignature = src.RequestSignature;
    res.Type = enums.UserType[src.Type];
    res.IsPersonRetired = src.IsPersonRetired;
    res.IsOnTravel = src.IsOnTravel;
    res.Credentials = Create_CredentialArray_From(src.Credentials);
    res.UserName = src.UserName;
    res.TicketCategories = Create_MDOListItemArray_From(src.TicketCategories);
    res.NickName = src.NickName;
    res.WaitingForApproval = src.WaitingForApproval;
    res.ExtraFields = src.ExtraFields;
    res.CustomFields = src.CustomFields;
    res.PostSaveCommands = Create_CustomCommandArray_From(src.PostSaveCommands);
    return res;
}
exports.Create_User_From = Create_User_From;
function Create_UserArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_User_From(src[i]);
        }
    }
    return res;
}
exports.Create_UserArray_From = Create_UserArray_From;
function Create_UserArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_UserArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_UserArrayArray_From = Create_UserArrayArray_From;
function Create_UserGroup_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Value = src.Value;
    res.Tooltip = src.Tooltip;
    res.Id = src.Id;
    res.Rank = src.Rank;
    res.Deleted = src.Deleted;
    return res;
}
exports.Create_UserGroup_From = Create_UserGroup_From;
function Create_UserGroupArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_UserGroup_From(src[i]);
        }
    }
    return res;
}
exports.Create_UserGroupArray_From = Create_UserGroupArray_From;
function Create_UserGroupArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_UserGroupArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_UserGroupArrayArray_From = Create_UserGroupArrayArray_From;
function Create_UserInfo_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Deleted = src.Deleted;
    res.UserInfoId = src.UserInfoId;
    res.UserName = src.UserName;
    res.PersonId = src.PersonId;
    res.Rank = src.Rank;
    res.Tooltip = src.Tooltip;
    res.UserGroupId = src.UserGroupId;
    res.EjUserId = src.EjUserId;
    res.UserType = enums.UserType[src.UserType];
    res.GrantedLicenses = src.GrantedLicenses;
    res.CanLogon = src.CanLogon;
    res.RoleName = src.RoleName;
    res.RoleTooltip = src.RoleTooltip;
    res.UserGroupName = src.UserGroupName;
    res.UserGroupTooltip = src.UserGroupTooltip;
    return res;
}
exports.Create_UserInfo_From = Create_UserInfo_From;
function Create_UserInfoArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_UserInfo_From(src[i]);
        }
    }
    return res;
}
exports.Create_UserInfoArray_From = Create_UserInfoArray_From;
function Create_UserInfoArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_UserInfoArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_UserInfoArrayArray_From = Create_UserInfoArrayArray_From;
function Create_UserPresenceStatus_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.Status = enums.EjUserStatus[src.Status];
    res.Message = src.Message;
    return res;
}
exports.Create_UserPresenceStatus_From = Create_UserPresenceStatus_From;
function Create_UserPresenceStatusArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_UserPresenceStatus_From(src[i]);
        }
    }
    return res;
}
exports.Create_UserPresenceStatusArray_From = Create_UserPresenceStatusArray_From;
function Create_UserPresenceStatusArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_UserPresenceStatusArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_UserPresenceStatusArrayArray_From = Create_UserPresenceStatusArrayArray_From;
function Create_UserValidationResult_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Reason = src.Reason;
    res.Result = src.Result;
    return res;
}
exports.Create_UserValidationResult_From = Create_UserValidationResult_From;
function Create_UserValidationResultArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_UserValidationResult_From(src[i]);
        }
    }
    return res;
}
exports.Create_UserValidationResultArray_From = Create_UserValidationResultArray_From;
function Create_UserValidationResultArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_UserValidationResultArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_UserValidationResultArrayArray_From = Create_UserValidationResultArrayArray_From;
function Create_Area_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.AreaId = src.AreaId;
    res.Name = src.Name;
    res.MaxDataAge = src.MaxDataAge;
    res.NumberOfUsers = src.NumberOfUsers;
    res.NumberOfLogins = src.NumberOfLogins;
    res.FreetextEnabeled = src.FreetextEnabeled;
    return res;
}
exports.Create_Area_From = Create_Area_From;
function Create_AreaArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Area_From(src[i]);
        }
    }
    return res;
}
exports.Create_AreaArray_From = Create_AreaArray_From;
function Create_AreaArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_AreaArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_AreaArrayArray_From = Create_AreaArrayArray_From;
function Create_Satellite_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.SatelliteId = src.SatelliteId;
    res.Created = Create_Date_From(src.Created);
    res.CreatedBy = Create_Associate_From(src.CreatedBy);
    res.Updated = Create_Date_From(src.Updated);
    res.UpdatedBy = Create_Associate_From(src.UpdatedBy);
    res.Contact = Create_Contact_From(src.Contact);
    res.Area = Create_Area_From(src.Area);
    res.LicenseOwners = Create_LicenseOwnerArray_From(src.LicenseOwners);
    return res;
}
exports.Create_Satellite_From = Create_Satellite_From;
function Create_SatelliteArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Satellite_From(src[i]);
        }
    }
    return res;
}
exports.Create_SatelliteArray_From = Create_SatelliteArray_From;
function Create_SatelliteArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SatelliteArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SatelliteArrayArray_From = Create_SatelliteArrayArray_From;
function Create_PreferredTimeZone_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.PreferenceId = src.PreferenceId;
    res.TZLocationId = src.TZLocationId;
    res.LocationCode = src.LocationCode;
    res.Description = src.Description;
    res.Country = src.Country;
    res.Bias = src.Bias;
    return res;
}
exports.Create_PreferredTimeZone_From = Create_PreferredTimeZone_From;
function Create_PreferredTimeZoneArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PreferredTimeZone_From(src[i]);
        }
    }
    return res;
}
exports.Create_PreferredTimeZoneArray_From = Create_PreferredTimeZoneArray_From;
function Create_PreferredTimeZoneArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PreferredTimeZoneArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_PreferredTimeZoneArrayArray_From = Create_PreferredTimeZoneArrayArray_From;
function Create_RemoteTimeZoneMethods_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    return res;
}
exports.Create_RemoteTimeZoneMethods_From = Create_RemoteTimeZoneMethods_From;
function Create_RemoteTimeZoneMethodsArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RemoteTimeZoneMethods_From(src[i]);
        }
    }
    return res;
}
exports.Create_RemoteTimeZoneMethodsArray_From = Create_RemoteTimeZoneMethodsArray_From;
function Create_RemoteTimeZoneMethodsArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RemoteTimeZoneMethodsArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_RemoteTimeZoneMethodsArrayArray_From = Create_RemoteTimeZoneMethodsArrayArray_From;
function Create_TimeZoneData_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.TZLocationID = src.TZLocationID;
    res.Name = src.Name;
    res.TZLocationCode = src.TZLocationCode;
    res.TZLocationCities = src.TZLocationCities;
    res.IsoNumber = src.IsoNumber;
    res.TimeZoneSTDRules = Create_TimeZoneRuleDictionary_From(src.TimeZoneSTDRules);
    res.TimeZoneDSTRules = Create_TimeZoneRuleDictionary_From(src.TimeZoneDSTRules);
    return res;
}
exports.Create_TimeZoneData_From = Create_TimeZoneData_From;
function Create_TimeZoneDataArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TimeZoneData_From(src[i]);
        }
    }
    return res;
}
exports.Create_TimeZoneDataArray_From = Create_TimeZoneDataArray_From;
function Create_TimeZoneDataArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TimeZoneDataArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TimeZoneDataArrayArray_From = Create_TimeZoneDataArrayArray_From;
function Create_TimeZoneRule_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.TZOffset = src.TZOffset;
    res.StartRulePattern = src.StartRulePattern;
    res.EndRulePattern = src.EndRulePattern;
    res.StartDay = src.StartDay;
    res.StartMonth = src.StartMonth;
    res.EndDay = src.EndDay;
    res.EndMonth = src.EndMonth;
    return res;
}
exports.Create_TimeZoneRule_From = Create_TimeZoneRule_From;
function Create_TimeZoneRuleArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TimeZoneRule_From(src[i]);
        }
    }
    return res;
}
exports.Create_TimeZoneRuleArray_From = Create_TimeZoneRuleArray_From;
function Create_TimeZoneRuleArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TimeZoneRuleArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TimeZoneRuleArrayArray_From = Create_TimeZoneRuleArrayArray_From;
// dictionary
function Create_TimeZoneRuleDictionary_From(src) {
    let res = src;
    if (res) {
        for (let i in res) {
            res[i] = Create_TimeZoneRule_From(src[i]);
        }
    }
    return res;
}
exports.Create_TimeZoneRuleDictionary_From = Create_TimeZoneRuleDictionary_From;
function Create_IncomingMessage_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.To = src.To;
    res.From = src.From;
    res.Content = src.Content;
    res.Format = src.Format;
    res.SessionKey = src.SessionKey;
    res.Plugin = src.Plugin;
    return res;
}
exports.Create_IncomingMessage_From = Create_IncomingMessage_From;
function Create_IncomingMessageArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_IncomingMessage_From(src[i]);
        }
    }
    return res;
}
exports.Create_IncomingMessageArray_From = Create_IncomingMessageArray_From;
function Create_IncomingMessageArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_IncomingMessageArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_IncomingMessageArrayArray_From = Create_IncomingMessageArrayArray_From;
function Create_MessageDeliveryStatus_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Status = src.Status;
    res.StatusDescription = src.StatusDescription;
    res.MessagingId = src.MessagingId;
    return res;
}
exports.Create_MessageDeliveryStatus_From = Create_MessageDeliveryStatus_From;
function Create_MessageDeliveryStatusArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_MessageDeliveryStatus_From(src[i]);
        }
    }
    return res;
}
exports.Create_MessageDeliveryStatusArray_From = Create_MessageDeliveryStatusArray_From;
function Create_MessageDeliveryStatusArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_MessageDeliveryStatusArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_MessageDeliveryStatusArrayArray_From = Create_MessageDeliveryStatusArrayArray_From;
function Create_OutgoingMessage_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.From = src.From;
    res.To = src.To;
    res.Content = src.Content;
    res.Format = src.Format;
    res.ParentMessagingId = src.ParentMessagingId;
    res.SuggestedSessionKey = src.SuggestedSessionKey;
    return res;
}
exports.Create_OutgoingMessage_From = Create_OutgoingMessage_From;
function Create_OutgoingMessageArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_OutgoingMessage_From(src[i]);
        }
    }
    return res;
}
exports.Create_OutgoingMessageArray_From = Create_OutgoingMessageArray_From;
function Create_OutgoingMessageArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_OutgoingMessageArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_OutgoingMessageArrayArray_From = Create_OutgoingMessageArrayArray_From;
function Create_ProviderInfo_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Name = src.Name;
    res.SupportedMessagingFormats = src.SupportedMessagingFormats;
    res.SupportsConfig = src.SupportsConfig;
    return res;
}
exports.Create_ProviderInfo_From = Create_ProviderInfo_From;
function Create_ProviderInfoArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ProviderInfo_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProviderInfoArray_From = Create_ProviderInfoArray_From;
function Create_ProviderInfoArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ProviderInfoArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ProviderInfoArrayArray_From = Create_ProviderInfoArrayArray_From;
function Create_ImportLine_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Values = src.Values;
    res.Selected = src.Selected;
    res.Operation = Create_ImportAction_From(src.Operation);
    res.Type = Create_ImportEntityType_From(src.Type);
    res.ExternalKey = src.ExternalKey;
    return res;
}
exports.Create_ImportLine_From = Create_ImportLine_From;
function Create_ImportLineArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ImportLine_From(src[i]);
        }
    }
    return res;
}
exports.Create_ImportLineArray_From = Create_ImportLineArray_From;
function Create_ImportLineArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ImportLineArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ImportLineArrayArray_From = Create_ImportLineArrayArray_From;
function Create_ImportColumnInfo_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Name = src.Name;
    res.DisplayName = src.DisplayName;
    res.Locked = src.Locked;
    return res;
}
exports.Create_ImportColumnInfo_From = Create_ImportColumnInfo_From;
function Create_ImportColumnInfoArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ImportColumnInfo_From(src[i]);
        }
    }
    return res;
}
exports.Create_ImportColumnInfoArray_From = Create_ImportColumnInfoArray_From;
function Create_ImportColumnInfoArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ImportColumnInfoArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ImportColumnInfoArrayArray_From = Create_ImportColumnInfoArrayArray_From;
function Create_ImportErpData_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ImportLines = Create_ImportLineArray_From(src.ImportLines);
    res.ColumnInfos = Create_ImportColumnInfoArray_From(src.ColumnInfos);
    return res;
}
exports.Create_ImportErpData_From = Create_ImportErpData_From;
function Create_ImportErpDataArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ImportErpData_From(src[i]);
        }
    }
    return res;
}
exports.Create_ImportErpDataArray_From = Create_ImportErpDataArray_From;
function Create_ImportErpDataArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ImportErpDataArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ImportErpDataArrayArray_From = Create_ImportErpDataArrayArray_From;
function Create_FreeText_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.FreeTextEnabled = src.FreeTextEnabled;
    res.SingleWordOperator = enums.FreeTextOperator[src.SingleWordOperator];
    res.MultiWordOperator = enums.FreeTextOperator[src.MultiWordOperator];
    res.CountWords = src.CountWords;
    res.Occurrences = src.Occurrences;
    res.LastGenerated = Create_Date_From(src.LastGenerated);
    res.AutoEnableTravelAreas = src.AutoEnableTravelAreas;
    return res;
}
exports.Create_FreeText_From = Create_FreeText_From;
function Create_FreeTextArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FreeText_From(src[i]);
        }
    }
    return res;
}
exports.Create_FreeTextArray_From = Create_FreeTextArray_From;
function Create_FreeTextArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FreeTextArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_FreeTextArrayArray_From = Create_FreeTextArrayArray_From;
function Create_RefCountEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.RefCountsId = src.RefCountsId;
    res.Field = src.Field;
    res.RecordId = src.RecordId;
    res.SuggestedRecords = Create_MDOListItemArray_From(src.SuggestedRecords);
    res.CurrentValue = src.CurrentValue;
    res.TravelPrefix = src.TravelPrefix;
    res.SatPrefix = src.SatPrefix;
    res.Allocate = src.Allocate;
    res.Unique = src.Unique;
    res.ReadOnly = src.ReadOnly;
    res.AllowBlank = src.AllowBlank;
    return res;
}
exports.Create_RefCountEntity_From = Create_RefCountEntity_From;
function Create_RefCountEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RefCountEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_RefCountEntityArray_From = Create_RefCountEntityArray_From;
function Create_RefCountEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_RefCountEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_RefCountEntityArrayArray_From = Create_RefCountEntityArrayArray_From;
function Create_ChatSession_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ChatSessionId = src.ChatSessionId;
    return res;
}
exports.Create_ChatSession_From = Create_ChatSession_From;
function Create_ChatSessionArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ChatSession_From(src[i]);
        }
    }
    return res;
}
exports.Create_ChatSessionArray_From = Create_ChatSessionArray_From;
function Create_ChatSessionArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ChatSessionArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ChatSessionArrayArray_From = Create_ChatSessionArrayArray_From;
function Create_CsFeatureToggle_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Name = src.Name;
    res.State = src.State;
    return res;
}
exports.Create_CsFeatureToggle_From = Create_CsFeatureToggle_From;
function Create_CsFeatureToggleArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CsFeatureToggle_From(src[i]);
        }
    }
    return res;
}
exports.Create_CsFeatureToggleArray_From = Create_CsFeatureToggleArray_From;
function Create_CsFeatureToggleArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CsFeatureToggleArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CsFeatureToggleArrayArray_From = Create_CsFeatureToggleArrayArray_From;
function Create_CsSessionKey_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Key = src.Key;
    res.LoginId = src.LoginId;
    res.UserId = src.UserId;
    return res;
}
exports.Create_CsSessionKey_From = Create_CsSessionKey_From;
function Create_CsSessionKeyArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CsSessionKey_From(src[i]);
        }
    }
    return res;
}
exports.Create_CsSessionKeyArray_From = Create_CsSessionKeyArray_From;
function Create_CsSessionKeyArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CsSessionKeyArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CsSessionKeyArrayArray_From = Create_CsSessionKeyArrayArray_From;
function Create_CustomerCenterConfig_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.CustConfigId = src.CustConfigId;
    res.Type = enums.ConfigType[src.Type];
    res.Config = src.Config;
    res.CustLangId = src.CustLangId;
    res.Registered = Create_Date_From(src.Registered);
    res.RegisteredAssociateId = src.RegisteredAssociateId;
    res.Updated = Create_Date_From(src.Updated);
    res.UpdatedAssociateId = src.UpdatedAssociateId;
    return res;
}
exports.Create_CustomerCenterConfig_From = Create_CustomerCenterConfig_From;
function Create_CustomerCenterConfigArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CustomerCenterConfig_From(src[i]);
        }
    }
    return res;
}
exports.Create_CustomerCenterConfigArray_From = Create_CustomerCenterConfigArray_From;
function Create_CustomerCenterConfigArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CustomerCenterConfigArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CustomerCenterConfigArrayArray_From = Create_CustomerCenterConfigArrayArray_From;
function Create_CustomerServiceConfig_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    return res;
}
exports.Create_CustomerServiceConfig_From = Create_CustomerServiceConfig_From;
function Create_CustomerServiceConfigArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CustomerServiceConfig_From(src[i]);
        }
    }
    return res;
}
exports.Create_CustomerServiceConfigArray_From = Create_CustomerServiceConfigArray_From;
function Create_CustomerServiceConfigArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CustomerServiceConfigArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CustomerServiceConfigArrayArray_From = Create_CustomerServiceConfigArrayArray_From;
function Create_CustomerServiceStartup_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.TimezoneEnabled = src.TimezoneEnabled;
    res.TZOffset = src.TZOffset;
    res.RecaptchaSiteKey = src.RecaptchaSiteKey;
    return res;
}
exports.Create_CustomerServiceStartup_From = Create_CustomerServiceStartup_From;
function Create_CustomerServiceStartupArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CustomerServiceStartup_From(src[i]);
        }
    }
    return res;
}
exports.Create_CustomerServiceStartupArray_From = Create_CustomerServiceStartupArray_From;
function Create_CustomerServiceStartupArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CustomerServiceStartupArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CustomerServiceStartupArrayArray_From = Create_CustomerServiceStartupArrayArray_From;
function Create_EventData_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Type = enums.EventHandlerType[src.Type];
    res.InputValues = Create_StringDictionary_From(src.InputValues);
    res.BlockExecution = src.BlockExecution;
    res.NavigateTo = src.NavigateTo;
    res.Message = src.Message;
    res.ShowDialog = src.ShowDialog;
    res.OutputValues = Create_StringDictionary_From(src.OutputValues);
    res.StateValues = Create_StringDictionary_From(src.StateValues);
    res.Exception = src.Exception;
    return res;
}
exports.Create_EventData_From = Create_EventData_From;
function Create_EventDataArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EventData_From(src[i]);
        }
    }
    return res;
}
exports.Create_EventDataArray_From = Create_EventDataArray_From;
function Create_EventDataArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EventDataArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_EventDataArrayArray_From = Create_EventDataArrayArray_From;
function Create_KbCategory_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.KbCategoryId = src.KbCategoryId;
    res.Name = src.Name;
    res.Description = src.Description;
    res.Fullname = src.Fullname;
    res.ParentId = src.ParentId;
    res.SortOrder = src.SortOrder;
    return res;
}
exports.Create_KbCategory_From = Create_KbCategory_From;
function Create_KbCategoryArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_KbCategory_From(src[i]);
        }
    }
    return res;
}
exports.Create_KbCategoryArray_From = Create_KbCategoryArray_From;
function Create_KbCategoryArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_KbCategoryArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_KbCategoryArrayArray_From = Create_KbCategoryArrayArray_From;
function Create_Mailbox_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.MailInFilterId = src.MailInFilterId;
    res.Address = src.Address;
    res.CategoryName = src.CategoryName;
    res.PriorityName = src.PriorityName;
    return res;
}
exports.Create_Mailbox_From = Create_Mailbox_From;
function Create_MailboxArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Mailbox_From(src[i]);
        }
    }
    return res;
}
exports.Create_MailboxArray_From = Create_MailboxArray_From;
function Create_MailboxArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_MailboxArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_MailboxArrayArray_From = Create_MailboxArrayArray_From;
function Create_MailboxEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.MailInFilterId = src.MailInFilterId;
    res.ServerType = enums.MailboxType[src.ServerType];
    res.Address = src.Address;
    res.Username = src.Username;
    res.Password = src.Password;
    res.Server = src.Server;
    res.Port = src.Port;
    return res;
}
exports.Create_MailboxEntity_From = Create_MailboxEntity_From;
function Create_MailboxEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_MailboxEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_MailboxEntityArray_From = Create_MailboxEntityArray_From;
function Create_MailboxEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_MailboxEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_MailboxEntityArrayArray_From = Create_MailboxEntityArrayArray_From;
function Create_PreviewFaqEntry_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Title = src.Title;
    res.RegisteredByFullName = src.RegisteredByFullName;
    res.Updated = Create_Date_From(src.Updated);
    res.Question = src.Question;
    res.Answer = src.Answer;
    return res;
}
exports.Create_PreviewFaqEntry_From = Create_PreviewFaqEntry_From;
function Create_PreviewFaqEntryArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PreviewFaqEntry_From(src[i]);
        }
    }
    return res;
}
exports.Create_PreviewFaqEntryArray_From = Create_PreviewFaqEntryArray_From;
function Create_PreviewFaqEntryArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PreviewFaqEntryArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_PreviewFaqEntryArrayArray_From = Create_PreviewFaqEntryArrayArray_From;
function Create_PreviewQuickReply_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Name = src.Name;
    res.UpdatedByFullName = src.UpdatedByFullName;
    res.Updated = Create_Date_From(src.Updated);
    res.HtmlBody = src.HtmlBody;
    return res;
}
exports.Create_PreviewQuickReply_From = Create_PreviewQuickReply_From;
function Create_PreviewQuickReplyArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PreviewQuickReply_From(src[i]);
        }
    }
    return res;
}
exports.Create_PreviewQuickReplyArray_From = Create_PreviewQuickReplyArray_From;
function Create_PreviewQuickReplyArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PreviewQuickReplyArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_PreviewQuickReplyArrayArray_From = Create_PreviewQuickReplyArrayArray_From;
function Create_PreviewReplyTemplate_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Name = src.Name;
    res.Description = src.Description;
    res.OwnedByFullName = src.OwnedByFullName;
    res.Updated = Create_Date_From(src.Updated);
    res.Body = src.Body;
    res.IsHtml = src.IsHtml;
    return res;
}
exports.Create_PreviewReplyTemplate_From = Create_PreviewReplyTemplate_From;
function Create_PreviewReplyTemplateArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PreviewReplyTemplate_From(src[i]);
        }
    }
    return res;
}
exports.Create_PreviewReplyTemplateArray_From = Create_PreviewReplyTemplateArray_From;
function Create_PreviewReplyTemplateArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PreviewReplyTemplateArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_PreviewReplyTemplateArrayArray_From = Create_PreviewReplyTemplateArrayArray_From;
function Create_ReplyTemplate_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.ReplyTemplateId = src.ReplyTemplateId;
    res.Name = src.Name;
    res.Description = src.Description;
    res.FolderId = src.FolderId;
    return res;
}
exports.Create_ReplyTemplate_From = Create_ReplyTemplate_From;
function Create_ReplyTemplateArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ReplyTemplate_From(src[i]);
        }
    }
    return res;
}
exports.Create_ReplyTemplateArray_From = Create_ReplyTemplateArray_From;
function Create_ReplyTemplateArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ReplyTemplateArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ReplyTemplateArrayArray_From = Create_ReplyTemplateArrayArray_From;
function Create_ReplyTemplateParsed_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ReplyTemplateId = src.ReplyTemplateId;
    res.PlainParsed = src.PlainParsed;
    res.HtmlParsed = src.HtmlParsed;
    res.Attachments = Create_AttachmentEntityArray_From(src.Attachments);
    res.Subject = src.Subject;
    return res;
}
exports.Create_ReplyTemplateParsed_From = Create_ReplyTemplateParsed_From;
function Create_ReplyTemplateParsedArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ReplyTemplateParsed_From(src[i]);
        }
    }
    return res;
}
exports.Create_ReplyTemplateParsedArray_From = Create_ReplyTemplateParsedArray_From;
function Create_ReplyTemplateParsedArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ReplyTemplateParsedArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ReplyTemplateParsedArrayArray_From = Create_ReplyTemplateParsedArrayArray_From;
function Create_SmsConfig_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.DefaultSmsCountry = src.DefaultSmsCountry;
    res.NetServerSmsProvider = src.NetServerSmsProvider;
    res.NsPluginSender = src.NsPluginSender;
    res.NsPluginConfig = Create_StringDictionary_From(src.NsPluginConfig);
    return res;
}
exports.Create_SmsConfig_From = Create_SmsConfig_From;
function Create_SmsConfigArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SmsConfig_From(src[i]);
        }
    }
    return res;
}
exports.Create_SmsConfigArray_From = Create_SmsConfigArray_From;
function Create_SmsConfigArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SmsConfigArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SmsConfigArrayArray_From = Create_SmsConfigArrayArray_From;
function Create_SmtpTestResult_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Success = src.Success;
    res.ErrorMessage = src.ErrorMessage;
    return res;
}
exports.Create_SmtpTestResult_From = Create_SmtpTestResult_From;
function Create_SmtpTestResultArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SmtpTestResult_From(src[i]);
        }
    }
    return res;
}
exports.Create_SmtpTestResultArray_From = Create_SmtpTestResultArray_From;
function Create_SmtpTestResultArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SmtpTestResultArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SmtpTestResultArrayArray_From = Create_SmtpTestResultArrayArray_From;
function Create_StatisticsDataSet_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Label = src.Label;
    res.Values = Create_StatisticsDataValueArray_From(src.Values);
    res.Description = src.Description;
    return res;
}
exports.Create_StatisticsDataSet_From = Create_StatisticsDataSet_From;
function Create_StatisticsDataSetArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_StatisticsDataSet_From(src[i]);
        }
    }
    return res;
}
exports.Create_StatisticsDataSetArray_From = Create_StatisticsDataSetArray_From;
function Create_StatisticsDataSetArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_StatisticsDataSetArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_StatisticsDataSetArrayArray_From = Create_StatisticsDataSetArrayArray_From;
function Create_StatisticsDataValue_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Label = src.Label;
    res.Value = src.Value;
    res.Description = src.Description;
    return res;
}
exports.Create_StatisticsDataValue_From = Create_StatisticsDataValue_From;
function Create_StatisticsDataValueArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_StatisticsDataValue_From(src[i]);
        }
    }
    return res;
}
exports.Create_StatisticsDataValueArray_From = Create_StatisticsDataValueArray_From;
function Create_StatisticsDataValueArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_StatisticsDataValueArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_StatisticsDataValueArrayArray_From = Create_StatisticsDataValueArrayArray_From;
function Create_SystemTemplateSettings_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.CustomerNewCustomerTemplateId = src.CustomerNewCustomerTemplateId;
    res.CustomerCustomerReplyTemplateId = src.CustomerCustomerReplyTemplateId;
    res.CustomerPasswordTemplateId = src.CustomerPasswordTemplateId;
    res.CustomerConfirmEmailTemplateId = src.CustomerConfirmEmailTemplateId;
    res.CustomerChatLogTemplateId = src.CustomerChatLogTemplateId;
    res.NewLinkTemplateId = src.NewLinkTemplateId;
    res.HotlistNewMessageTemplateId = src.HotlistNewMessageTemplateId;
    res.HotlistTicketActivatedTemplateId = src.HotlistTicketActivatedTemplateId;
    res.UserTicketAlarmTemplateId = src.UserTicketAlarmTemplateId;
    res.HotlistTicketTakenOverTemplateId = src.HotlistTicketTakenOverTemplateId;
    res.UserActiveTicketsTemplateId = src.UserActiveTicketsTemplateId;
    res.UserNewMessageTemplateId = src.UserNewMessageTemplateId;
    res.UserTicketActivatedTemplateId = src.UserTicketActivatedTemplateId;
    res.UserNewTicketTemplateId = src.UserNewTicketTemplateId;
    res.PublishKbQuestionTemplateId = src.PublishKbQuestionTemplateId;
    res.PublishKbAnswerTemplateId = src.PublishKbAnswerTemplateId;
    res.UserTicketTakenOverTemplateId = src.UserTicketTakenOverTemplateId;
    res.PrintTicketTemplateId = src.PrintTicketTemplateId;
    res.WeekStatTemplateId = src.WeekStatTemplateId;
    res.TicketAlarmHotlistTemplateId = src.TicketAlarmHotlistTemplateId;
    res.EmailAddresses = src.EmailAddresses;
    return res;
}
exports.Create_SystemTemplateSettings_From = Create_SystemTemplateSettings_From;
function Create_SystemTemplateSettingsArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SystemTemplateSettings_From(src[i]);
        }
    }
    return res;
}
exports.Create_SystemTemplateSettingsArray_From = Create_SystemTemplateSettingsArray_From;
function Create_SystemTemplateSettingsArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SystemTemplateSettingsArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SystemTemplateSettingsArrayArray_From = Create_SystemTemplateSettingsArrayArray_From;
function Create_TicketInfo_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.TicketId = src.TicketId;
    res.Title = src.Title;
    res.OwnerName = src.OwnerName;
    res.CategoryName = src.CategoryName;
    res.PriorityName = src.PriorityName;
    res.TicketUrl = src.TicketUrl;
    res.PersonName = src.PersonName;
    res.ContactName = src.ContactName;
    return res;
}
exports.Create_TicketInfo_From = Create_TicketInfo_From;
function Create_TicketInfoArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TicketInfo_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketInfoArray_From = Create_TicketInfoArray_From;
function Create_TicketInfoArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TicketInfoArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketInfoArrayArray_From = Create_TicketInfoArrayArray_From;
function Create_CallerID_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.PhoneNumber = src.PhoneNumber;
    res.DialInPrefix = src.DialInPrefix;
    res.PersonId = src.PersonId;
    res.PersonName = src.PersonName;
    res.Mrmrs = src.Mrmrs;
    res.ContactId = src.ContactId;
    res.ContactName = src.ContactName;
    return res;
}
exports.Create_CallerID_From = Create_CallerID_From;
function Create_CallerIDArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CallerID_From(src[i]);
        }
    }
    return res;
}
exports.Create_CallerIDArray_From = Create_CallerIDArray_From;
function Create_CallerIDArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CallerIDArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CallerIDArrayArray_From = Create_CallerIDArrayArray_From;
function Create_CallerIDCollection_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.CallerIDHash = src.CallerIDHash;
    res.CallerIDs = Create_CallerIDArray_From(src.CallerIDs);
    return res;
}
exports.Create_CallerIDCollection_From = Create_CallerIDCollection_From;
function Create_CallerIDCollectionArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CallerIDCollection_From(src[i]);
        }
    }
    return res;
}
exports.Create_CallerIDCollectionArray_From = Create_CallerIDCollectionArray_From;
function Create_CallerIDCollectionArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CallerIDCollectionArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CallerIDCollectionArrayArray_From = Create_CallerIDCollectionArrayArray_From;
function Create_NotificationEvent_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.Type = enums.NotificationEventType[src.Type];
    res.Id = src.Id;
    return res;
}
exports.Create_NotificationEvent_From = Create_NotificationEvent_From;
function Create_NotificationEventArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_NotificationEvent_From(src[i]);
        }
    }
    return res;
}
exports.Create_NotificationEventArray_From = Create_NotificationEventArray_From;
function Create_NotificationEventArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_NotificationEventArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_NotificationEventArrayArray_From = Create_NotificationEventArrayArray_From;
function Create_PocketNotificationMessage_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.Title = src.Title;
    res.Message = src.Message;
    res.Url = src.Url;
    res.Silent = src.Silent;
    res.Type = enums.NotificationMessageType[src.Type];
    res.TimeToLive = src.TimeToLive;
    res.RecordId = src.RecordId;
    res.Date = Create_Date_From(src.Date);
    res.Duration = Create_Duration_From(src.Duration);
    res.ExtraValues = Create_StringDictionary_From(src.ExtraValues);
    return res;
}
exports.Create_PocketNotificationMessage_From = Create_PocketNotificationMessage_From;
function Create_PocketNotificationMessageArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PocketNotificationMessage_From(src[i]);
        }
    }
    return res;
}
exports.Create_PocketNotificationMessageArray_From = Create_PocketNotificationMessageArray_From;
function Create_PocketNotificationMessageArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PocketNotificationMessageArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_PocketNotificationMessageArrayArray_From = Create_PocketNotificationMessageArrayArray_From;
function Create_PocketDeviceInfo_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.DeviceName = src.DeviceName;
    res.DeviceIdentifier = src.DeviceIdentifier;
    res.PocketVersion = src.PocketVersion;
    res.Language = src.Language;
    res.PNSHandle = src.PNSHandle;
    res.Platform = enums.NotificationPlatform[src.Platform];
    res.OSVersion = src.OSVersion;
    res.TimeZoneId = src.TimeZoneId;
    return res;
}
exports.Create_PocketDeviceInfo_From = Create_PocketDeviceInfo_From;
function Create_PocketDeviceInfoArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PocketDeviceInfo_From(src[i]);
        }
    }
    return res;
}
exports.Create_PocketDeviceInfoArray_From = Create_PocketDeviceInfoArray_From;
function Create_PocketDeviceInfoArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PocketDeviceInfoArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_PocketDeviceInfoArrayArray_From = Create_PocketDeviceInfoArrayArray_From;
function Create_PocketStartupData_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.TableRights = Create_ETableRight_From(src.TableRights);
    res.PhoneLocaleTimeZoneData = Create_TimeZoneData_From(src.PhoneLocaleTimeZoneData);
    res.BaseLocaleTimeZoneData = Create_TimeZoneData_From(src.BaseLocaleTimeZoneData);
    res.OverdueSalesCount = src.OverdueSalesCount;
    res.NotificationsCount = src.NotificationsCount;
    res.SystemWebPanels = Create_WebPanelEntityArray_From(src.SystemWebPanels);
    res.PocketPreferences = Create_PreferenceArray_From(src.PocketPreferences);
    res.IsPushNotificationEnabled = src.IsPushNotificationEnabled;
    res.CustomData = src.CustomData;
    return res;
}
exports.Create_PocketStartupData_From = Create_PocketStartupData_From;
function Create_PocketStartupDataArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PocketStartupData_From(src[i]);
        }
    }
    return res;
}
exports.Create_PocketStartupDataArray_From = Create_PocketStartupDataArray_From;
function Create_PocketStartupDataArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PocketStartupDataArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_PocketStartupDataArrayArray_From = Create_PocketStartupDataArrayArray_From;
function Create_Dashboard_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.DashboardId = src.DashboardId;
    res.AssociateId = src.AssociateId;
    res.Caption = src.Caption;
    res.Layout = enums.DashboardLayout[src.Layout];
    res.Tiles = Create_DashboardTileArray_From(src.Tiles);
    return res;
}
exports.Create_Dashboard_From = Create_Dashboard_From;
function Create_DashboardArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Dashboard_From(src[i]);
        }
    }
    return res;
}
exports.Create_DashboardArray_From = Create_DashboardArray_From;
function Create_DashboardArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DashboardArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_DashboardArrayArray_From = Create_DashboardArrayArray_From;
function Create_DashboardTile_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.DashboardTileId = src.DashboardTileId;
    res.Caption = src.Caption;
    res.Description = src.Description;
    res.ChartName = src.ChartName;
    res.ChartId = src.ChartId;
    res.IsDefault = src.IsDefault;
    res.AssociateId = src.AssociateId;
    res.GroupId = src.GroupId;
    res.SelectionId = src.SelectionId;
    res.Config = src.Config;
    res.Type = enums.DashboardTileType[src.Type];
    res.EntityType = enums.DashboardTileEntityType[src.EntityType];
    res.Options = Create_DashboardTileOptionArray_From(src.Options);
    res.VisibleFor = Create_VisibleForArray_From(src.VisibleFor);
    return res;
}
exports.Create_DashboardTile_From = Create_DashboardTile_From;
function Create_DashboardTileArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DashboardTile_From(src[i]);
        }
    }
    return res;
}
exports.Create_DashboardTileArray_From = Create_DashboardTileArray_From;
function Create_DashboardTileArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DashboardTileArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_DashboardTileArrayArray_From = Create_DashboardTileArrayArray_From;
function Create_DashboardTileOption_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Name = src.Name;
    res.Description = src.Description;
    res.Type = enums.DashboardTileOptionType[src.Type];
    res.ListName = src.ListName;
    res.ListItems = Create_MDOListItemArray_From(src.ListItems);
    res.Value = src.Value;
    res.DefaultDataOption = src.DefaultDataOption;
    return res;
}
exports.Create_DashboardTileOption_From = Create_DashboardTileOption_From;
function Create_DashboardTileOptionArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DashboardTileOption_From(src[i]);
        }
    }
    return res;
}
exports.Create_DashboardTileOptionArray_From = Create_DashboardTileOptionArray_From;
function Create_DashboardTileOptionArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DashboardTileOptionArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_DashboardTileOptionArrayArray_From = Create_DashboardTileOptionArrayArray_From;
function Create_TileData_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.Columns = Create_ArchiveColumnInfoArray_From(src.Columns);
    res.Result = Create_ArchiveListResult_From(src.Result);
    return res;
}
exports.Create_TileData_From = Create_TileData_From;
function Create_TileDataArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TileData_From(src[i]);
        }
    }
    return res;
}
exports.Create_TileDataArray_From = Create_TileDataArray_From;
function Create_TileDataArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TileDataArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TileDataArrayArray_From = Create_TileDataArrayArray_From;
function Create_Dash_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.DashboardId = src.DashboardId;
    res.UniqueId = src.UniqueId;
    res.Name = src.Name;
    res.Description = src.Description;
    res.AssociateId = src.AssociateId;
    res.Columns = src.Columns;
    res.Theme = Create_DashTheme_From(src.Theme);
    res.VisibleForAll = src.VisibleForAll;
    res.VisibleForAssociates = src.VisibleForAssociates;
    res.VisibleForGroups = src.VisibleForGroups;
    res.PinForAll = src.PinForAll;
    res.PinForAssociates = src.PinForAssociates;
    res.PinForGroups = src.PinForGroups;
    return res;
}
exports.Create_Dash_From = Create_Dash_From;
function Create_DashArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Dash_From(src[i]);
        }
    }
    return res;
}
exports.Create_DashArray_From = Create_DashArray_From;
function Create_DashArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DashArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_DashArrayArray_From = Create_DashArrayArray_From;
function Create_DashCollection_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Pinned = Create_DashArray_From(src.Pinned);
    res.Favourites = Create_DashArray_From(src.Favourites);
    res.Other = Create_DashArray_From(src.Other);
    return res;
}
exports.Create_DashCollection_From = Create_DashCollection_From;
function Create_DashCollectionArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DashCollection_From(src[i]);
        }
    }
    return res;
}
exports.Create_DashCollectionArray_From = Create_DashCollectionArray_From;
function Create_DashCollectionArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DashCollectionArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_DashCollectionArrayArray_From = Create_DashCollectionArrayArray_From;
function Create_DashTheme_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.DashboardThemeId = src.DashboardThemeId;
    res.Name = src.Name;
    res.Config = src.Config;
    res.Rank = src.Rank;
    res.Client = src.Client;
    res.Style = src.Style;
    return res;
}
exports.Create_DashTheme_From = Create_DashTheme_From;
function Create_DashThemeArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DashTheme_From(src[i]);
        }
    }
    return res;
}
exports.Create_DashThemeArray_From = Create_DashThemeArray_From;
function Create_DashThemeArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DashThemeArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_DashThemeArrayArray_From = Create_DashThemeArrayArray_From;
function Create_DashTile_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.DashboardTileId = src.DashboardTileId;
    res.DashboardId = src.DashboardId;
    res.Height = src.Height;
    res.Width = src.Width;
    res.Rank = src.Rank;
    res.DashTileDefinition = Create_DashTileDefinition_From(src.DashTileDefinition);
    return res;
}
exports.Create_DashTile_From = Create_DashTile_From;
function Create_DashTileArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DashTile_From(src[i]);
        }
    }
    return res;
}
exports.Create_DashTileArray_From = Create_DashTileArray_From;
function Create_DashTileArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DashTileArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_DashTileArrayArray_From = Create_DashTileArrayArray_From;
function Create_DashTileDefinition_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.DashboardTileDefinitionId = src.DashboardTileDefinitionId;
    res.Name = src.Name;
    res.Description = src.Description;
    res.DefaultHeight = src.DefaultHeight;
    res.DefaultWidth = src.DefaultWidth;
    res.TileType = enums.DashTileType[src.TileType];
    res.EntityType = enums.DashTileEntityType[src.EntityType];
    res.EntityName = src.EntityName;
    res.SelectionId = src.SelectionId;
    res.CurrencyMode = enums.DashTileCurrencyMode[src.CurrencyMode];
    res.CurrencyCode = src.CurrencyCode;
    res.Measure = enums.DashTileMeasure[src.Measure];
    res.MeasureField = src.MeasureField;
    res.SortBy = src.SortBy;
    res.LayoutConfig = src.LayoutConfig;
    res.SecondarySelectionId = src.SecondarySelectionId;
    res.MeasureByField = src.MeasureByField;
    res.Usage = Create_DashTileUsage_From(src.Usage);
    res.ProviderName = src.ProviderName;
    return res;
}
exports.Create_DashTileDefinition_From = Create_DashTileDefinition_From;
function Create_DashTileDefinitionArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DashTileDefinition_From(src[i]);
        }
    }
    return res;
}
exports.Create_DashTileDefinitionArray_From = Create_DashTileDefinitionArray_From;
function Create_DashTileDefinitionArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DashTileDefinitionArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_DashTileDefinitionArrayArray_From = Create_DashTileDefinitionArrayArray_From;
function Create_DashTileHtml_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.LanguageCode = src.LanguageCode;
    res.Html = src.Html;
    return res;
}
exports.Create_DashTileHtml_From = Create_DashTileHtml_From;
function Create_DashTileHtmlArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DashTileHtml_From(src[i]);
        }
    }
    return res;
}
exports.Create_DashTileHtmlArray_From = Create_DashTileHtmlArray_From;
function Create_DashTileHtmlArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DashTileHtmlArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_DashTileHtmlArrayArray_From = Create_DashTileHtmlArrayArray_From;
function Create_PreviewDash_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Name = src.Name;
    res.Description = src.Description;
    res.OwnedByFullName = src.OwnedByFullName;
    res.Registered = Create_Date_From(src.Registered);
    res.Tiles = Create_PreviewDashTileArray_From(src.Tiles);
    return res;
}
exports.Create_PreviewDash_From = Create_PreviewDash_From;
function Create_PreviewDashArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PreviewDash_From(src[i]);
        }
    }
    return res;
}
exports.Create_PreviewDashArray_From = Create_PreviewDashArray_From;
function Create_PreviewDashArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PreviewDashArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_PreviewDashArrayArray_From = Create_PreviewDashArrayArray_From;
function Create_PreviewDashTile_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Name = src.Name;
    res.TileType = enums.DashTileType[src.TileType];
    return res;
}
exports.Create_PreviewDashTile_From = Create_PreviewDashTile_From;
function Create_PreviewDashTileArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PreviewDashTile_From(src[i]);
        }
    }
    return res;
}
exports.Create_PreviewDashTileArray_From = Create_PreviewDashTileArray_From;
function Create_PreviewDashTileArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PreviewDashTileArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_PreviewDashTileArrayArray_From = Create_PreviewDashTileArrayArray_From;
function Create_TargetAssignment_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.TargetAssignmentInfoId = src.TargetAssignmentInfoId;
    res.Values = src.Values;
    res.Locked = src.Locked;
    res.TargetAssociate = Create_Associate_From(src.TargetAssociate);
    res.TargetContact = Create_Contact_From(src.TargetContact);
    res.TargetUserGroup = Create_UserGroup_From(src.TargetUserGroup);
    res.Currency = Create_Currency_From(src.Currency);
    res.DimensionListItem = src.DimensionListItem;
    res.DimensionListItemDisplayName = src.DimensionListItemDisplayName;
    return res;
}
exports.Create_TargetAssignment_From = Create_TargetAssignment_From;
function Create_TargetAssignmentArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TargetAssignment_From(src[i]);
        }
    }
    return res;
}
exports.Create_TargetAssignmentArray_From = Create_TargetAssignmentArray_From;
function Create_TargetAssignmentArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TargetAssignmentArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TargetAssignmentArrayArray_From = Create_TargetAssignmentArrayArray_From;
function Create_TargetChange_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.FieldIdentifier = src.FieldIdentifier;
    res.ValueChangeFrom = src.ValueChangeFrom;
    res.ValueChangeTo = src.ValueChangeTo;
    return res;
}
exports.Create_TargetChange_From = Create_TargetChange_From;
function Create_TargetChangeArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TargetChange_From(src[i]);
        }
    }
    return res;
}
exports.Create_TargetChangeArray_From = Create_TargetChangeArray_From;
function Create_TargetChangeArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TargetChangeArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TargetChangeArrayArray_From = Create_TargetChangeArrayArray_From;
function Create_TargetDimension_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.TargetDimensionId = src.TargetDimensionId;
    res.AssignmentLevel = Create_TargetAssignementLevel_From(src.AssignmentLevel);
    res.EntityType = enums.TargetEntityType[src.EntityType];
    res.MeasurementUnit = enums.TargetMeasurementUnit[src.MeasurementUnit];
    res.DimensionListField = src.DimensionListField;
    res.DimensionListName = src.DimensionListName;
    res.DimensionListId = src.DimensionListId;
    res.DimensionListLabel = src.DimensionListLabel;
    res.SelectedDimensions = src.SelectedDimensions;
    return res;
}
exports.Create_TargetDimension_From = Create_TargetDimension_From;
function Create_TargetDimensionArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TargetDimension_From(src[i]);
        }
    }
    return res;
}
exports.Create_TargetDimensionArray_From = Create_TargetDimensionArray_From;
function Create_TargetDimensionArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TargetDimensionArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TargetDimensionArrayArray_From = Create_TargetDimensionArrayArray_From;
function Create_TargetGroup_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.TargetGroupId = src.TargetGroupId;
    res.Year = src.Year;
    res.EntityType = enums.TargetEntityType[src.EntityType];
    res.PeriodType = enums.TargetPeriodType[src.PeriodType];
    res.TargetAssignments = Create_TargetAssignmentArray_From(src.TargetAssignments);
    res.TargetDimension = Create_TargetDimension_From(src.TargetDimension);
    return res;
}
exports.Create_TargetGroup_From = Create_TargetGroup_From;
function Create_TargetGroupArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TargetGroup_From(src[i]);
        }
    }
    return res;
}
exports.Create_TargetGroupArray_From = Create_TargetGroupArray_From;
function Create_TargetGroupArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TargetGroupArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TargetGroupArrayArray_From = Create_TargetGroupArrayArray_From;
function Create_TargetRevision_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.LogEvent = enums.LogEvent[src.LogEvent];
    res.Who = Create_Associate_From(src.Who);
    res.When = Create_Date_From(src.When);
    res.Changes = Create_TargetChangeArray_From(src.Changes);
    return res;
}
exports.Create_TargetRevision_From = Create_TargetRevision_From;
function Create_TargetRevisionArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TargetRevision_From(src[i]);
        }
    }
    return res;
}
exports.Create_TargetRevisionArray_From = Create_TargetRevisionArray_From;
function Create_TargetRevisionArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TargetRevisionArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TargetRevisionArrayArray_From = Create_TargetRevisionArrayArray_From;
function Create_TargetRevisionHistory_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.TargetGroupId = src.TargetGroupId;
    res.Year = src.Year;
    res.Revisions = Create_TargetRevisionArray_From(src.Revisions);
    return res;
}
exports.Create_TargetRevisionHistory_From = Create_TargetRevisionHistory_From;
function Create_TargetRevisionHistoryArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TargetRevisionHistory_From(src[i]);
        }
    }
    return res;
}
exports.Create_TargetRevisionHistoryArray_From = Create_TargetRevisionHistoryArray_From;
function Create_TargetRevisionHistoryArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TargetRevisionHistoryArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TargetRevisionHistoryArrayArray_From = Create_TargetRevisionHistoryArrayArray_From;
function Create_Favourite_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.TableName = src.TableName;
    res.RecordId = src.RecordId;
    res.AssociateId = src.AssociateId;
    res.ExtraInfo = src.ExtraInfo;
    res.Rank = src.Rank;
    return res;
}
exports.Create_Favourite_From = Create_Favourite_From;
function Create_FavouriteArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Favourite_From(src[i]);
        }
    }
    return res;
}
exports.Create_FavouriteArray_From = Create_FavouriteArray_From;
function Create_FavouriteArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FavouriteArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_FavouriteArrayArray_From = Create_FavouriteArrayArray_From;
function Create_DictionaryStepInformation_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Name = src.Name;
    res.StepNumber = src.StepNumber;
    return res;
}
exports.Create_DictionaryStepInformation_From = Create_DictionaryStepInformation_From;
function Create_DictionaryStepInformationArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DictionaryStepInformation_From(src[i]);
        }
    }
    return res;
}
exports.Create_DictionaryStepInformationArray_From = Create_DictionaryStepInformationArray_From;
function Create_DictionaryStepInformationArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DictionaryStepInformationArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_DictionaryStepInformationArrayArray_From = Create_DictionaryStepInformationArrayArray_From;
function Create_ControlInfo_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Type = src.Type;
    res.Label = src.Label;
    res.Dimension = src.Dimension;
    res.ListProviderName = src.ListProviderName;
    res.ListProviderExtraInfo = src.ListProviderExtraInfo;
    res.ListProviderPrimaryKeyName = src.ListProviderPrimaryKeyName;
    res.ListLeadText = src.ListLeadText;
    return res;
}
exports.Create_ControlInfo_From = Create_ControlInfo_From;
function Create_ControlInfoArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ControlInfo_From(src[i]);
        }
    }
    return res;
}
exports.Create_ControlInfoArray_From = Create_ControlInfoArray_From;
function Create_ControlInfoArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ControlInfoArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ControlInfoArrayArray_From = Create_ControlInfoArrayArray_From;
function Create_FieldValueInfo_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.CanSupportMultiUse = src.CanSupportMultiUse;
    res.DefaultShowInGui = src.DefaultShowInGui;
    res.DefaultShowInSelector = src.DefaultShowInSelector;
    res.IsActive = src.IsActive;
    res.Key = src.Key;
    res.ValueType = src.ValueType;
    res.Mandatory = src.Mandatory;
    res.EncodedDisplayName = src.EncodedDisplayName;
    res.EncodedDisplayDescription = src.EncodedDisplayDescription;
    res.IconHint = src.IconHint;
    res.ControlInfos = Create_ControlInfoArray_From(src.ControlInfos);
    res.EncodedDataCaption = src.EncodedDataCaption;
    res.EncodedDataCaptionDescription = src.EncodedDataCaptionDescription;
    res.CurrentOperationType = src.CurrentOperationType;
    res.Values = src.Values;
    res.DisplayValues = src.DisplayValues;
    res.OperationInfos = Create_OperationInfoArray_From(src.OperationInfos);
    return res;
}
exports.Create_FieldValueInfo_From = Create_FieldValueInfo_From;
function Create_FieldValueInfoArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldValueInfo_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldValueInfoArray_From = Create_FieldValueInfoArray_From;
function Create_FieldValueInfoArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FieldValueInfoArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_FieldValueInfoArrayArray_From = Create_FieldValueInfoArrayArray_From;
function Create_OperationInfo_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Key = src.Key;
    res.EncodedDisplayName = src.EncodedDisplayName;
    res.EncodedLeadTexts = src.EncodedLeadTexts;
    return res;
}
exports.Create_OperationInfo_From = Create_OperationInfo_From;
function Create_OperationInfoArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_OperationInfo_From(src[i]);
        }
    }
    return res;
}
exports.Create_OperationInfoArray_From = Create_OperationInfoArray_From;
function Create_OperationInfoArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_OperationInfoArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_OperationInfoArrayArray_From = Create_OperationInfoArrayArray_From;
function Create_FormEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.FormId = src.FormId;
    res.FormKey = src.FormKey;
    res.Name = src.Name;
    res.Description = src.Description;
    res.Config = src.Config;
    res.FolderId = src.FolderId;
    res.ScriptId = src.ScriptId;
    res.ResponseShipmentId = src.ResponseShipmentId;
    res.Active = src.Active;
    res.Expires = Create_Date_From(src.Expires);
    res.MaxSubmits = src.MaxSubmits;
    res.Type = enums.FormType[src.Type];
    res.Recipe = src.Recipe;
    res.GroupId = src.GroupId;
    res.NewTicket = src.NewTicket;
    res.RecaptchaMode = enums.FormsRecaptchaMode[src.RecaptchaMode];
    res.Registered = Create_Date_From(src.Registered);
    res.RegisteredAssociateId = src.RegisteredAssociateId;
    res.Updated = Create_Date_From(src.Updated);
    res.UpdatedAssociateId = src.UpdatedAssociateId;
    res.UpdatedCount = src.UpdatedCount;
    res.FolderName = src.FolderName;
    return res;
}
exports.Create_FormEntity_From = Create_FormEntity_From;
function Create_FormEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FormEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_FormEntityArray_From = Create_FormEntityArray_From;
function Create_FormEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FormEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_FormEntityArrayArray_From = Create_FormEntityArrayArray_From;
function Create_FormSubmissionEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.FormSubmissionId = src.FormSubmissionId;
    res.FormId = src.FormId;
    res.WhenSubmitted = Create_Date_From(src.WhenSubmitted);
    res.ContactId = src.ContactId;
    res.PersonId = src.PersonId;
    res.EmailAddress = src.EmailAddress;
    res.ResponseShipmentAddrId = src.ResponseShipmentAddrId;
    res.Response = src.Response;
    res.Status = enums.FormSubmissionStatus[src.Status];
    res.ProcessingLog = src.ProcessingLog;
    return res;
}
exports.Create_FormSubmissionEntity_From = Create_FormSubmissionEntity_From;
function Create_FormSubmissionEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FormSubmissionEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_FormSubmissionEntityArray_From = Create_FormSubmissionEntityArray_From;
function Create_FormSubmissionEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_FormSubmissionEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_FormSubmissionEntityArrayArray_From = Create_FormSubmissionEntityArrayArray_From;
function Create_MailingStatistics_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    return res;
}
exports.Create_MailingStatistics_From = Create_MailingStatistics_From;
function Create_MailingStatisticsArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_MailingStatistics_From(src[i]);
        }
    }
    return res;
}
exports.Create_MailingStatisticsArray_From = Create_MailingStatisticsArray_From;
function Create_MailingStatisticsArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_MailingStatisticsArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_MailingStatisticsArrayArray_From = Create_MailingStatisticsArrayArray_From;
function Create_PreviewMailing_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.SendingTime = Create_Date_From(src.SendingTime);
    res.Status = enums.ShipmentAddrStatus[src.Status];
    res.ShipmentId = src.ShipmentId;
    res.ShipmentDescription = src.ShipmentDescription;
    res.FromAddress = src.FromAddress;
    res.ContactId = src.ContactId;
    res.ContactName = src.ContactName;
    res.PersonId = src.PersonId;
    res.PersonFullName = src.PersonFullName;
    res.ShipmentType = src.ShipmentType;
    res.MessageId = src.MessageId;
    res.MessageSubject = src.MessageSubject;
    res.DocumentMessageId = src.DocumentMessageId;
    res.Opened = Create_Date_From(src.Opened);
    res.LinkClicks = src.LinkClicks;
    return res;
}
exports.Create_PreviewMailing_From = Create_PreviewMailing_From;
function Create_PreviewMailingArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PreviewMailing_From(src[i]);
        }
    }
    return res;
}
exports.Create_PreviewMailingArray_From = Create_PreviewMailingArray_From;
function Create_PreviewMailingArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PreviewMailingArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_PreviewMailingArrayArray_From = Create_PreviewMailingArrayArray_From;
function Create_PreviewMailingHeader_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.StartDate = Create_Date_From(src.StartDate);
    res.Status = enums.ShipmentStatus[src.Status];
    res.ShipmentId = src.ShipmentId;
    res.ShipmentDescription = src.ShipmentDescription;
    res.FromAddress = src.FromAddress;
    res.PersonId = src.PersonId;
    res.PersonFullName = src.PersonFullName;
    res.ShipmentType = src.ShipmentType;
    res.MessageId = src.MessageId;
    res.MessageSubject = src.MessageSubject;
    res.DocumentMessageId = src.DocumentMessageId;
    res.NumSent = src.NumSent;
    res.NumOpened = src.NumOpened;
    res.NumBounced = src.NumBounced;
    res.NumClicks = src.NumClicks;
    return res;
}
exports.Create_PreviewMailingHeader_From = Create_PreviewMailingHeader_From;
function Create_PreviewMailingHeaderArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PreviewMailingHeader_From(src[i]);
        }
    }
    return res;
}
exports.Create_PreviewMailingHeaderArray_From = Create_PreviewMailingHeaderArray_From;
function Create_PreviewMailingHeaderArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_PreviewMailingHeaderArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_PreviewMailingHeaderArrayArray_From = Create_PreviewMailingHeaderArrayArray_From;
function Create_ShipmentMessageBlockEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ShipmentMessageBlockId = src.ShipmentMessageBlockId;
    res.AssociateId = src.AssociateId;
    res.Block = src.Block;
    res.Registered = Create_Date_From(src.Registered);
    res.RegisteredAssociateId = src.RegisteredAssociateId;
    res.Updated = Create_Date_From(src.Updated);
    res.UpdatedAssociateId = src.UpdatedAssociateId;
    res.UpdatedCount = src.UpdatedCount;
    return res;
}
exports.Create_ShipmentMessageBlockEntity_From = Create_ShipmentMessageBlockEntity_From;
function Create_ShipmentMessageBlockEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ShipmentMessageBlockEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_ShipmentMessageBlockEntityArray_From = Create_ShipmentMessageBlockEntityArray_From;
function Create_ShipmentMessageBlockEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ShipmentMessageBlockEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ShipmentMessageBlockEntityArrayArray_From = Create_ShipmentMessageBlockEntityArrayArray_From;
function Create_ShipmentMessageEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ShipmentMessageId = src.ShipmentMessageId;
    res.PlainMessage = src.PlainMessage;
    res.HtmlMessage = src.HtmlMessage;
    res.SmsMessage = src.SmsMessage;
    res.Description = src.Description;
    res.Subject = src.Subject;
    res.FolderId = src.FolderId;
    res.HeaderField = src.HeaderField;
    res.Design = src.Design;
    res.Designtype = enums.DesignType[src.Designtype];
    res.Flags = Create_ShipmentMessageType_From(src.Flags);
    res.RegisterViews = src.RegisterViews;
    res.InlineImages = src.InlineImages;
    res.LongDescription = src.LongDescription;
    res.AccessKey = src.AccessKey;
    res.DocumentMessage = src.DocumentMessage;
    res.Registered = Create_Date_From(src.Registered);
    res.RegisteredAssociateId = src.RegisteredAssociateId;
    res.Updated = Create_Date_From(src.Updated);
    res.UpdatedAssociateId = src.UpdatedAssociateId;
    res.UpdatedCount = src.UpdatedCount;
    return res;
}
exports.Create_ShipmentMessageEntity_From = Create_ShipmentMessageEntity_From;
function Create_ShipmentMessageEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ShipmentMessageEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_ShipmentMessageEntityArray_From = Create_ShipmentMessageEntityArray_From;
function Create_ShipmentMessageEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ShipmentMessageEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ShipmentMessageEntityArrayArray_From = Create_ShipmentMessageEntityArrayArray_From;
function Create_Script_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.UniqueIdentifier = src.UniqueIdentifier;
    res.Name = src.Name;
    res.Description = src.Description;
    res.IncludeId = src.IncludeId;
    res.Source = src.Source;
    res.Registered = Create_Date_From(src.Registered);
    res.RegisteredBy = src.RegisteredBy;
    res.Updated = Create_Date_From(src.Updated);
    res.UpdatedBy = src.UpdatedBy;
    res.Path = src.Path;
    return res;
}
exports.Create_Script_From = Create_Script_From;
function Create_ScriptArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Script_From(src[i]);
        }
    }
    return res;
}
exports.Create_ScriptArray_From = Create_ScriptArray_From;
function Create_ScriptArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ScriptArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ScriptArrayArray_From = Create_ScriptArrayArray_From;
function Create_CRMScriptEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.EjscriptId = src.EjscriptId;
    res.UniqueIdentifier = src.UniqueIdentifier;
    res.Name = src.Name;
    res.Description = src.Description;
    res.IncludeId = src.IncludeId;
    res.HierarchyId = src.HierarchyId;
    res.Source = src.Source;
    res.Registered = Create_Date_From(src.Registered);
    res.RegisteredAssociateId = src.RegisteredAssociateId;
    res.Updated = Create_Date_From(src.Updated);
    res.UpdatedAssociateId = src.UpdatedAssociateId;
    return res;
}
exports.Create_CRMScriptEntity_From = Create_CRMScriptEntity_From;
function Create_CRMScriptEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CRMScriptEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_CRMScriptEntityArray_From = Create_CRMScriptEntityArray_From;
function Create_CRMScriptEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CRMScriptEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CRMScriptEntityArrayArray_From = Create_CRMScriptEntityArrayArray_From;
function Create_CRMScriptResult_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Valid = src.Valid;
    res.ErrorMessage = src.ErrorMessage;
    return res;
}
exports.Create_CRMScriptResult_From = Create_CRMScriptResult_From;
function Create_CRMScriptResultArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CRMScriptResult_From(src[i]);
        }
    }
    return res;
}
exports.Create_CRMScriptResultArray_From = Create_CRMScriptResultArray_From;
function Create_CRMScriptResultArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CRMScriptResultArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CRMScriptResultArrayArray_From = Create_CRMScriptResultArrayArray_From;
function Create_TriggerScriptEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ScreenChooserId = src.ScreenChooserId;
    res.Name = src.Name;
    res.ScreenType = enums.EventHandlerType[src.ScreenType];
    res.Enabled = src.Enabled;
    res.UniqueIdentifier = src.UniqueIdentifier;
    res.Source = src.Source;
    res.Registered = Create_Date_From(src.Registered);
    res.RegisteredAssociateId = src.RegisteredAssociateId;
    res.Updated = Create_Date_From(src.Updated);
    res.UpdatedAssociateId = src.UpdatedAssociateId;
    return res;
}
exports.Create_TriggerScriptEntity_From = Create_TriggerScriptEntity_From;
function Create_TriggerScriptEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TriggerScriptEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_TriggerScriptEntityArray_From = Create_TriggerScriptEntityArray_From;
function Create_TriggerScriptEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TriggerScriptEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TriggerScriptEntityArrayArray_From = Create_TriggerScriptEntityArrayArray_From;
function Create_AttachmentEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.AttachmentId = src.AttachmentId;
    res.Name = src.Name;
    res.ContentType = src.ContentType;
    res.AttSize = src.AttSize;
    res.InlineImage = src.InlineImage;
    res.ContentId = src.ContentId;
    res.AuthKey = src.AuthKey;
    return res;
}
exports.Create_AttachmentEntity_From = Create_AttachmentEntity_From;
function Create_AttachmentEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_AttachmentEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_AttachmentEntityArray_From = Create_AttachmentEntityArray_From;
function Create_AttachmentEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_AttachmentEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_AttachmentEntityArrayArray_From = Create_AttachmentEntityArrayArray_From;
function Create_AttachmentValidationResult_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.AttachmentId = src.AttachmentId;
    res.IsValid = src.IsValid;
    res.ErrorMessage = src.ErrorMessage;
    return res;
}
exports.Create_AttachmentValidationResult_From = Create_AttachmentValidationResult_From;
function Create_AttachmentValidationResultArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_AttachmentValidationResult_From(src[i]);
        }
    }
    return res;
}
exports.Create_AttachmentValidationResultArray_From = Create_AttachmentValidationResultArray_From;
function Create_AttachmentValidationResultArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_AttachmentValidationResultArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_AttachmentValidationResultArrayArray_From = Create_AttachmentValidationResultArrayArray_From;
function Create_Ticket_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.TicketId = src.TicketId;
    res.Title = src.Title;
    res.CreatedAt = Create_Date_From(src.CreatedAt);
    res.LastChanged = Create_Date_From(src.LastChanged);
    res.ReadByOwner = Create_Date_From(src.ReadByOwner);
    res.ReadByCustomer = Create_Date_From(src.ReadByCustomer);
    res.FirstReadByUser = Create_Date_From(src.FirstReadByUser);
    res.Activate = Create_Date_From(src.Activate);
    res.ClosedAt = Create_Date_From(src.ClosedAt);
    res.RepliedAt = Create_Date_From(src.RepliedAt);
    res.AlertTimeout = Create_Date_From(src.AlertTimeout);
    res.Deadline = Create_Date_From(src.Deadline);
    res.CreatedBy = src.CreatedBy;
    res.CreatedByName = src.CreatedByName;
    res.Author = src.Author;
    res.OwnedBy = src.OwnedBy;
    res.OwnedByName = src.OwnedByName;
    res.Category = src.Category;
    res.CategoryName = src.CategoryName;
    res.CategoryFullname = src.CategoryFullname;
    res.Slevel = enums.TicketSecurityLevel[src.Slevel];
    res.Priority = src.Priority;
    res.PriorityName = src.PriorityName;
    res.BaseStatus = enums.TicketBaseStatus[src.BaseStatus];
    res.TicketStatus = src.TicketStatus;
    res.TicketStatusDisplayValue = src.TicketStatusDisplayValue;
    res.Origin = enums.TicketOrigin[src.Origin];
    res.CustId = src.CustId;
    res.PersonFirstname = src.PersonFirstname;
    res.PersonMiddleName = src.PersonMiddleName;
    res.PersonLastname = src.PersonLastname;
    res.PersonFullname = src.PersonFullname;
    res.AlertLevel = src.AlertLevel;
    res.ConnectId = src.ConnectId;
    res.ReadStatus = enums.TicketReadStatus[src.ReadStatus];
    res.TimeToReply = src.TimeToReply;
    res.RealTimeToReply = src.RealTimeToReply;
    res.TimeToClose = src.TimeToClose;
    res.RealTimeToClose = src.RealTimeToClose;
    res.TimeSpentInternally = src.TimeSpentInternally;
    res.TimeSpentExternally = src.TimeSpentExternally;
    res.TimeSpentQueue = src.TimeSpentQueue;
    res.RealTimeSpentInternally = src.RealTimeSpentInternally;
    res.RealTimeSpentExternally = src.RealTimeSpentExternally;
    res.RealTimeSpentQueue = src.RealTimeSpentQueue;
    res.HasAttachment = src.HasAttachment;
    res.NumReplies = src.NumReplies;
    res.NumMessages = src.NumMessages;
    res.FromAddress = src.FromAddress;
    res.ContactId = src.ContactId;
    res.ContactName = src.ContactName;
    res.OwnedByAssociateId = src.OwnedByAssociateId;
    res.Language = src.Language;
    res.Sentiment = src.Sentiment;
    res.SentimentConfidence = src.SentimentConfidence;
    res.SaleId = src.SaleId;
    res.ProjectId = src.ProjectId;
    res.SaleHeading = src.SaleHeading;
    res.ProjectName = src.ProjectName;
    res.FormSubmissionId = src.FormSubmissionId;
    return res;
}
exports.Create_Ticket_From = Create_Ticket_From;
function Create_TicketArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Ticket_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketArray_From = Create_TicketArray_From;
function Create_TicketArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TicketArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketArrayArray_From = Create_TicketArrayArray_From;
function Create_TicketBatchReplyData_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.TicketIds = src.TicketIds;
    res.CloseTickets = src.CloseTickets;
    res.AttachmentIds = src.AttachmentIds;
    res.HtmlBody = src.HtmlBody;
    res.Slevel = enums.TicketSecurityLevel[src.Slevel];
    res.TimeSpent = src.TimeSpent;
    res.SendCopyToCustomer = src.SendCopyToCustomer;
    return res;
}
exports.Create_TicketBatchReplyData_From = Create_TicketBatchReplyData_From;
function Create_TicketBatchReplyDataArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TicketBatchReplyData_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketBatchReplyDataArray_From = Create_TicketBatchReplyDataArray_From;
function Create_TicketBatchReplyDataArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TicketBatchReplyDataArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketBatchReplyDataArrayArray_From = Create_TicketBatchReplyDataArrayArray_From;
function Create_TicketEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.TicketId = src.TicketId;
    res.Title = src.Title;
    res.CreatedAt = Create_Date_From(src.CreatedAt);
    res.LastChanged = Create_Date_From(src.LastChanged);
    res.ReadByOwner = Create_Date_From(src.ReadByOwner);
    res.ReadByCustomer = Create_Date_From(src.ReadByCustomer);
    res.FirstReadByOwner = Create_Date_From(src.FirstReadByOwner);
    res.FirstReadByUser = Create_Date_From(src.FirstReadByUser);
    res.Activate = Create_Date_From(src.Activate);
    res.ClosedAt = Create_Date_From(src.ClosedAt);
    res.RepliedAt = Create_Date_From(src.RepliedAt);
    res.AlertTimeout = Create_Date_From(src.AlertTimeout);
    res.Deadline = Create_Date_From(src.Deadline);
    res.CreatedBy = Create_Associate_From(src.CreatedBy);
    res.Author = src.Author;
    res.OwnedBy = Create_Associate_From(src.OwnedBy);
    res.Category = Create_TicketCategoryEntity_From(src.Category);
    res.Slevel = enums.TicketSecurityLevel[src.Slevel];
    res.Priority = Create_TicketPriorityEntity_From(src.Priority);
    res.BaseStatus = enums.TicketBaseStatus[src.BaseStatus];
    res.Status = Create_TicketStatusEntity_From(src.Status);
    res.Origin = enums.TicketOrigin[src.Origin];
    res.Person = Create_Person_From(src.Person);
    res.SecondaryPersons = Create_PersonArray_From(src.SecondaryPersons);
    res.AlertLevel = src.AlertLevel;
    res.ConnectId = src.ConnectId;
    res.ReadStatus = enums.TicketReadStatus[src.ReadStatus];
    res.TimeToReply = src.TimeToReply;
    res.RealTimeToReply = src.RealTimeToReply;
    res.TimeToClose = src.TimeToClose;
    res.RealTimeToClose = src.RealTimeToClose;
    res.TimeSpentInternally = src.TimeSpentInternally;
    res.TimeSpentExternally = src.TimeSpentExternally;
    res.TimeSpentQueue = src.TimeSpentQueue;
    res.RealTimeSpentInternally = src.RealTimeSpentInternally;
    res.RealTimeSpentExternally = src.RealTimeSpentExternally;
    res.RealTimeSpentQueue = src.RealTimeSpentQueue;
    res.HasAttachment = src.HasAttachment;
    res.NumReplies = src.NumReplies;
    res.NumMessages = src.NumMessages;
    res.FromAddress = src.FromAddress;
    res.Messages = Create_TicketMessageArray_From(src.Messages);
    res.Tags = Create_TagArray_From(src.Tags);
    res.Language = src.Language;
    res.Sentiment = src.Sentiment;
    res.SentimentConfidence = src.SentimentConfidence;
    res.SuggestedCategoryId = src.SuggestedCategoryId;
    res.SuggestedCategoryName = src.SuggestedCategoryName;
    res.OrigHumanCategoryId = src.OrigHumanCategoryId;
    res.IconHint = src.IconHint;
    res.Sale = Create_Sale_From(src.Sale);
    res.Project = Create_Project_From(src.Project);
    res.FormSubmission = Create_TicketFormSubmission_From(src.FormSubmission);
    res.ExtraFields = src.ExtraFields;
    res.CustomFields = src.CustomFields;
    return res;
}
exports.Create_TicketEntity_From = Create_TicketEntity_From;
function Create_TicketEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TicketEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketEntityArray_From = Create_TicketEntityArray_From;
function Create_TicketEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TicketEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketEntityArrayArray_From = Create_TicketEntityArrayArray_From;
function Create_TicketMessage_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.TicketMessageId = src.TicketMessageId;
    res.CreatedAt = Create_Date_From(src.CreatedAt);
    res.Slevel = enums.TicketSecurityLevel[src.Slevel];
    res.Important = src.Important;
    res.Author = src.Author;
    res.PersonId = src.PersonId;
    res.PersonFullName = src.PersonFullName;
    res.ContactId = src.ContactId;
    res.ContactName = src.ContactName;
    res.ContactDepartment = src.ContactDepartment;
    res.NumAttachments = src.NumAttachments;
    res.EmailHeader = src.EmailHeader;
    res.MessageHeaders = Create_TicketMessageHeaderArray_From(src.MessageHeaders);
    res.Language = src.Language;
    res.Sentiment = src.Sentiment;
    res.SentimentConfidence = src.SentimentConfidence;
    res.CreatedBy = src.CreatedBy;
    res.ChangedAt = Create_Date_From(src.ChangedAt);
    res.Badge = enums.BadgeType[src.Badge];
    return res;
}
exports.Create_TicketMessage_From = Create_TicketMessage_From;
function Create_TicketMessageArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TicketMessage_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketMessageArray_From = Create_TicketMessageArray_From;
function Create_TicketMessageArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TicketMessageArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketMessageArrayArray_From = Create_TicketMessageArrayArray_From;
function Create_TicketMessageEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.EjMessageId = src.EjMessageId;
    res.Ticket = Create_Ticket_From(src.Ticket);
    res.CreatedAt = Create_Date_From(src.CreatedAt);
    res.CreatedBy = Create_Associate_From(src.CreatedBy);
    res.Author = src.Author;
    res.Slevel = enums.TicketSecurityLevel[src.Slevel];
    res.Type = enums.TicketMessageType[src.Type];
    res.MessageId = src.MessageId;
    res.TimeSpent = src.TimeSpent;
    res.Body = src.Body;
    res.HtmlBody = src.HtmlBody;
    res.EmailHeader = src.EmailHeader;
    res.DebugInfo = src.DebugInfo;
    res.MailSorter = src.MailSorter;
    res.MessageCategory = enums.TicketMessageCategory[src.MessageCategory];
    res.Person = Create_Person_From(src.Person);
    res.SearchTitle = src.SearchTitle;
    res.MessageHeaders = Create_TicketMessageHeaderArray_From(src.MessageHeaders);
    res.Important = src.Important;
    res.Language = src.Language;
    res.Sentiment = src.Sentiment;
    res.SentimentConfidence = src.SentimentConfidence;
    res.Badge = enums.BadgeType[src.Badge];
    res.AttachmentsInfo = Create_AttachmentEntityArray_From(src.AttachmentsInfo);
    res.ExtraFields = src.ExtraFields;
    res.CustomFields = src.CustomFields;
    return res;
}
exports.Create_TicketMessageEntity_From = Create_TicketMessageEntity_From;
function Create_TicketMessageEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TicketMessageEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketMessageEntityArray_From = Create_TicketMessageEntityArray_From;
function Create_TicketMessageEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TicketMessageEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketMessageEntityArrayArray_From = Create_TicketMessageEntityArrayArray_From;
function Create_TicketSummaryItem_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.TicketId = src.TicketId;
    res.TicketStatus = src.TicketStatus;
    res.Title = src.Title;
    res.Registered = Create_Date_From(src.Registered);
    res.IconHint = src.IconHint;
    return res;
}
exports.Create_TicketSummaryItem_From = Create_TicketSummaryItem_From;
function Create_TicketSummaryItemArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TicketSummaryItem_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketSummaryItemArray_From = Create_TicketSummaryItemArray_From;
function Create_TicketSummaryItemArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TicketSummaryItemArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TicketSummaryItemArrayArray_From = Create_TicketSummaryItemArrayArray_From;
function Create_TableRecord_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Values = Create_StringDictionary_From(src.Values);
    return res;
}
exports.Create_TableRecord_From = Create_TableRecord_From;
function Create_TableRecordArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TableRecord_From(src[i]);
        }
    }
    return res;
}
exports.Create_TableRecordArray_From = Create_TableRecordArray_From;
function Create_TableRecordArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_TableRecordArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_TableRecordArrayArray_From = Create_TableRecordArrayArray_From;
function Create_UpsertRowStatus_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.PrimaryKey = src.PrimaryKey;
    res.Action = enums.UpsertRowActionStatus[src.Action];
    res.RowKeys = src.RowKeys;
    return res;
}
exports.Create_UpsertRowStatus_From = Create_UpsertRowStatus_From;
function Create_UpsertRowStatusArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_UpsertRowStatus_From(src[i]);
        }
    }
    return res;
}
exports.Create_UpsertRowStatusArray_From = Create_UpsertRowStatusArray_From;
function Create_UpsertRowStatusArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_UpsertRowStatusArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_UpsertRowStatusArrayArray_From = Create_UpsertRowStatusArrayArray_From;
function Create_MassOperationResult_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Success = src.Success;
    res.Message = src.Message;
    res.Inserts = src.Inserts;
    res.Updates = src.Updates;
    res.Deletes = src.Deletes;
    res.RowStatus = Create_UpsertRowStatusArray_From(src.RowStatus);
    return res;
}
exports.Create_MassOperationResult_From = Create_MassOperationResult_From;
function Create_MassOperationResultArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_MassOperationResult_From(src[i]);
        }
    }
    return res;
}
exports.Create_MassOperationResultArray_From = Create_MassOperationResultArray_From;
function Create_MassOperationResultArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_MassOperationResultArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_MassOperationResultArrayArray_From = Create_MassOperationResultArrayArray_From;
function Create_ChatBotSettings_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.BotName = src.BotName;
    res.BotRegisterScriptId = src.BotRegisterScriptId;
    res.BotSessionCreatedScriptId = src.BotSessionCreatedScriptId;
    res.BotSessionChangedScriptId = src.BotSessionChangedScriptId;
    res.BotMessageReceivedScriptId = src.BotMessageReceivedScriptId;
    return res;
}
exports.Create_ChatBotSettings_From = Create_ChatBotSettings_From;
function Create_ChatBotSettingsArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ChatBotSettings_From(src[i]);
        }
    }
    return res;
}
exports.Create_ChatBotSettingsArray_From = Create_ChatBotSettingsArray_From;
function Create_ChatBotSettingsArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ChatBotSettingsArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ChatBotSettingsArrayArray_From = Create_ChatBotSettingsArrayArray_From;
function Create_ChatMessage_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.ChatMessageId = src.ChatMessageId;
    res.ChatSessionId = src.ChatSessionId;
    res.Type = enums.ChatMessageType[src.Type];
    res.Message = src.Message;
    res.Author = src.Author;
    res.ReadByCustomer = src.ReadByCustomer;
    res.SpecialType = enums.ChatMessageSpecialType[src.SpecialType];
    res.SpecialParam = src.SpecialParam;
    res.WhenPosted = Create_Date_From(src.WhenPosted);
    return res;
}
exports.Create_ChatMessage_From = Create_ChatMessage_From;
function Create_ChatMessageArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ChatMessage_From(src[i]);
        }
    }
    return res;
}
exports.Create_ChatMessageArray_From = Create_ChatMessageArray_From;
function Create_ChatMessageArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ChatMessageArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ChatMessageArrayArray_From = Create_ChatMessageArrayArray_From;
function Create_ChatOpeningHours_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.TzLocation = Create_TimeZoneData_From(src.TzLocation);
    res.MonEnabled = src.MonEnabled;
    res.MonStart = Create_Duration_From(src.MonStart);
    res.MonStop = Create_Duration_From(src.MonStop);
    res.TueEnabled = src.TueEnabled;
    res.TueStart = Create_Duration_From(src.TueStart);
    res.TueStop = Create_Duration_From(src.TueStop);
    res.WedEnabled = src.WedEnabled;
    res.WedStart = Create_Duration_From(src.WedStart);
    res.WedStop = Create_Duration_From(src.WedStop);
    res.ThuEnabled = src.ThuEnabled;
    res.ThuStart = Create_Duration_From(src.ThuStart);
    res.ThuStop = Create_Duration_From(src.ThuStop);
    res.FriEnabled = src.FriEnabled;
    res.FriStart = Create_Duration_From(src.FriStart);
    res.FriStop = Create_Duration_From(src.FriStop);
    res.SatEnabled = src.SatEnabled;
    res.SatStart = Create_Duration_From(src.SatStart);
    res.SatStop = Create_Duration_From(src.SatStop);
    res.SunEnabled = src.SunEnabled;
    res.SunStart = Create_Duration_From(src.SunStart);
    res.SunStop = Create_Duration_From(src.SunStop);
    res.UseLunchHours = src.UseLunchHours;
    res.LunchStart = Create_Duration_From(src.LunchStart);
    res.LunchStop = Create_Duration_From(src.LunchStop);
    return res;
}
exports.Create_ChatOpeningHours_From = Create_ChatOpeningHours_From;
function Create_ChatOpeningHoursArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ChatOpeningHours_From(src[i]);
        }
    }
    return res;
}
exports.Create_ChatOpeningHoursArray_From = Create_ChatOpeningHoursArray_From;
function Create_ChatOpeningHoursArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ChatOpeningHoursArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ChatOpeningHoursArrayArray_From = Create_ChatOpeningHoursArrayArray_From;
function Create_ChatPresence_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.UserId = src.UserId;
    res.DisplayName = src.DisplayName;
    res.OngoingChats = src.OngoingChats;
    res.Present = src.Present;
    res.ChatTopics = src.ChatTopics;
    return res;
}
exports.Create_ChatPresence_From = Create_ChatPresence_From;
function Create_ChatPresenceArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ChatPresence_From(src[i]);
        }
    }
    return res;
}
exports.Create_ChatPresenceArray_From = Create_ChatPresenceArray_From;
function Create_ChatPresenceArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ChatPresenceArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ChatPresenceArrayArray_From = Create_ChatPresenceArrayArray_From;
function Create_ChatSessionEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ChatSessionId = src.ChatSessionId;
    res.TopicId = src.TopicId;
    res.User = Create_Associate_From(src.User);
    res.Person = Create_Person_From(src.Person);
    res.CustomerAlias = src.CustomerAlias;
    res.CustomerHost = src.CustomerHost;
    res.CustomerName = src.CustomerName;
    res.CustomerEmail = src.CustomerEmail;
    res.CustomerPhone = src.CustomerPhone;
    res.CustomerConsented = src.CustomerConsented;
    res.CustomerCompanyName = src.CustomerCompanyName;
    res.Status = enums.ChatSessionStatus[src.Status];
    res.FirstMessage = src.FirstMessage;
    res.LastMessage = src.LastMessage;
    res.WhenRequested = Create_Date_From(src.WhenRequested);
    res.WhenStarted = Create_Date_From(src.WhenStarted);
    res.WhenEnded = Create_Date_From(src.WhenEnded);
    res.WhenIdle = Create_Date_From(src.WhenIdle);
    res.WhenFetched = Create_Date_From(src.WhenFetched);
    res.SessionKey = src.SessionKey;
    res.InitialQueuePos = src.InitialQueuePos;
    res.AlertLevel = src.AlertLevel;
    res.Rank = src.Rank;
    res.Flags = Create_ChatSessionFlags_From(src.Flags);
    res.Contact = Create_Contact_From(src.Contact);
    res.Project = Create_Project_From(src.Project);
    res.Sale = Create_Sale_From(src.Sale);
    res.Ticket = Create_Ticket_From(src.Ticket);
    res.TransferTo = Create_Associate_From(src.TransferTo);
    res.ChatbotIsActive = src.ChatbotIsActive;
    res.Rating = src.Rating;
    return res;
}
exports.Create_ChatSessionEntity_From = Create_ChatSessionEntity_From;
function Create_ChatSessionEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ChatSessionEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_ChatSessionEntityArray_From = Create_ChatSessionEntityArray_From;
function Create_ChatSessionEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ChatSessionEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ChatSessionEntityArrayArray_From = Create_ChatSessionEntityArrayArray_From;
function Create_ChatSummaryItem_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.ChatSessionId = src.ChatSessionId;
    res.Name = src.Name;
    res.CompanyName = src.CompanyName;
    res.FirstMessage = src.FirstMessage;
    res.LastMessage = src.LastMessage;
    res.WhenRequested = Create_Date_From(src.WhenRequested);
    res.WhenEnded = Create_Date_From(src.WhenEnded);
    return res;
}
exports.Create_ChatSummaryItem_From = Create_ChatSummaryItem_From;
function Create_ChatSummaryItemArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ChatSummaryItem_From(src[i]);
        }
    }
    return res;
}
exports.Create_ChatSummaryItemArray_From = Create_ChatSummaryItemArray_From;
function Create_ChatSummaryItemArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ChatSummaryItemArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ChatSummaryItemArrayArray_From = Create_ChatSummaryItemArrayArray_From;
function Create_ChatTopicAgent_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.TopicId = src.TopicId;
    res.User = Create_Associate_From(src.User);
    res.CanListen = src.CanListen;
    res.CanRespond = src.CanRespond;
    res.CanManage = src.CanManage;
    res.CanNotify = src.CanNotify;
    return res;
}
exports.Create_ChatTopicAgent_From = Create_ChatTopicAgent_From;
function Create_ChatTopicAgentArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ChatTopicAgent_From(src[i]);
        }
    }
    return res;
}
exports.Create_ChatTopicAgentArray_From = Create_ChatTopicAgentArray_From;
function Create_ChatTopicAgentArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ChatTopicAgentArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ChatTopicAgentArrayArray_From = Create_ChatTopicAgentArrayArray_From;
function Create_ChatTopicEntity_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ChatTopicId = src.ChatTopicId;
    res.Name = src.Name;
    res.Description = src.Description;
    res.WelcomeMessage = src.WelcomeMessage;
    res.Language = Create_CustomerLanguage_From(src.Language);
    res.LastAccept = Create_Date_From(src.LastAccept);
    res.SecondsPrAccept = src.SecondsPrAccept;
    res.AlertRecipient = src.AlertRecipient;
    res.AlertTemplate = Create_ReplyTemplate_From(src.AlertTemplate);
    res.CollectConsent = src.CollectConsent;
    res.BadgeHeader = src.BadgeHeader;
    res.CustomQueueTextEnabled = src.CustomQueueTextEnabled;
    res.CustomQueueText = src.CustomQueueText;
    res.WarnNewChatMinutes = src.WarnNewChatMinutes;
    res.WarnManagerNewChatMinutes = src.WarnManagerNewChatMinutes;
    res.TicketEnabled = src.TicketEnabled;
    res.TicketCategory = Create_TicketCategory_From(src.TicketCategory);
    res.TicketPriority = Create_TicketPriority_From(src.TicketPriority);
    res.OpeningHoursEnabled = src.OpeningHoursEnabled;
    res.OpeningHours = Create_ChatOpeningHours_From(src.OpeningHours);
    res.Widget = Create_ChatWidgetSettings_From(src.Widget);
    res.BotEnabled = src.BotEnabled;
    res.BotSettings = Create_ChatBotSettings_From(src.BotSettings);
    res.OfflineCollectConsent = src.OfflineCollectConsent;
    res.WarnChatMessageMinutes = src.WarnChatMessageMinutes;
    res.WarnManagerChatMessageMinutes = src.WarnManagerChatMessageMinutes;
    res.UseQueueOfflineForm = src.UseQueueOfflineForm;
    res.OfflineFormTimeLimit = src.OfflineFormTimeLimit;
    res.OfflineFormQueueLength = src.OfflineFormQueueLength;
    res.WidgetEnableRating = src.WidgetEnableRating;
    res.WidgetRatingText = src.WidgetRatingText;
    return res;
}
exports.Create_ChatTopicEntity_From = Create_ChatTopicEntity_From;
function Create_ChatTopicEntityArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ChatTopicEntity_From(src[i]);
        }
    }
    return res;
}
exports.Create_ChatTopicEntityArray_From = Create_ChatTopicEntityArray_From;
function Create_ChatTopicEntityArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ChatTopicEntityArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ChatTopicEntityArrayArray_From = Create_ChatTopicEntityArrayArray_From;
function Create_ChatWidgetSettings_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.AutoFaqEnabled = src.AutoFaqEnabled;
    res.AutoFaqCategory = Create_KbCategory_From(src.AutoFaqCategory);
    res.PreFormEnabled = src.PreFormEnabled;
    res.PreFormMessage = src.PreFormMessage;
    res.RequiredFields = Create_WidgetRequiredFields_From(src.RequiredFields);
    res.PostFormEnabled = src.PostFormEnabled;
    res.PostFormHeader = src.PostFormHeader;
    res.PostFormMessage = src.PostFormMessage;
    res.PostTranscriptEnabled = src.PostTranscriptEnabled;
    res.LanguageIsoCode = src.LanguageIsoCode;
    res.Size = enums.ChatWidgetSize[src.Size];
    res.Theme = enums.WidgetTheme[src.Theme];
    res.Color = src.Color;
    res.BadgeColor = src.BadgeColor;
    res.BadgeTextColor = src.BadgeTextColor;
    res.CustMsgColor = src.CustMsgColor;
    res.CustMsgTextColor = src.CustMsgTextColor;
    res.AgentMsgColor = src.AgentMsgColor;
    res.AgentMsgTextColor = src.AgentMsgTextColor;
    res.ButtonColor = src.ButtonColor;
    res.ButtonTextColor = src.ButtonTextColor;
    res.Font = src.Font;
    res.FontSize = src.FontSize;
    res.LogoEnabled = src.LogoEnabled;
    res.LogoBlobId = src.LogoBlobId;
    res.LogoName = src.LogoName;
    res.ShowAgentPhoto = src.ShowAgentPhoto;
    res.WelcomeTitle = src.WelcomeTitle;
    res.WelcomeMessage = src.WelcomeMessage;
    res.OfflineHeader = src.OfflineHeader;
    res.OfflineMessage = src.OfflineMessage;
    res.OfflineFields = Create_WidgetRequiredFields_From(src.OfflineFields);
    res.UseAgentFirstname = src.UseAgentFirstname;
    return res;
}
exports.Create_ChatWidgetSettings_From = Create_ChatWidgetSettings_From;
function Create_ChatWidgetSettingsArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ChatWidgetSettings_From(src[i]);
        }
    }
    return res;
}
exports.Create_ChatWidgetSettingsArray_From = Create_ChatWidgetSettingsArray_From;
function Create_ChatWidgetSettingsArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_ChatWidgetSettingsArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_ChatWidgetSettingsArrayArray_From = Create_ChatWidgetSettingsArrayArray_From;
function Create_CategorizationModelDetails_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ModelBuiltDateTime = Create_Date_From(src.ModelBuiltDateTime);
    res.Accuracy = src.Accuracy;
    res.TicketCountForTraining = src.TicketCountForTraining;
    return res;
}
exports.Create_CategorizationModelDetails_From = Create_CategorizationModelDetails_From;
function Create_CategorizationModelDetailsArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CategorizationModelDetails_From(src[i]);
        }
    }
    return res;
}
exports.Create_CategorizationModelDetailsArray_From = Create_CategorizationModelDetailsArray_From;
function Create_CategorizationModelDetailsArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CategorizationModelDetailsArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CategorizationModelDetailsArrayArray_From = Create_CategorizationModelDetailsArrayArray_From;
function Create_CategorizationStatusResponse_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.ContextIdentifier = src.ContextIdentifier;
    res.Status = src.Status;
    res.CurrentModel = Create_CategorizationModelDetails_From(src.CurrentModel);
    res.PreviousModel = Create_CategorizationModelDetails_From(src.PreviousModel);
    return res;
}
exports.Create_CategorizationStatusResponse_From = Create_CategorizationStatusResponse_From;
function Create_CategorizationStatusResponseArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CategorizationStatusResponse_From(src[i]);
        }
    }
    return res;
}
exports.Create_CategorizationStatusResponseArray_From = Create_CategorizationStatusResponseArray_From;
function Create_CategorizationStatusResponseArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CategorizationStatusResponseArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CategorizationStatusResponseArrayArray_From = Create_CategorizationStatusResponseArrayArray_From;
function Create_CategoryGuess_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Dummy = src.Dummy;
    return res;
}
exports.Create_CategoryGuess_From = Create_CategoryGuess_From;
function Create_CategoryGuessArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CategoryGuess_From(src[i]);
        }
    }
    return res;
}
exports.Create_CategoryGuessArray_From = Create_CategoryGuessArray_From;
function Create_CategoryGuessArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_CategoryGuessArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_CategoryGuessArrayArray_From = Create_CategoryGuessArrayArray_From;
function Create_Sentiment_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.Score = src.Score;
    res.Confidence = src.Confidence;
    return res;
}
exports.Create_Sentiment_From = Create_Sentiment_From;
function Create_SentimentArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Sentiment_From(src[i]);
        }
    }
    return res;
}
exports.Create_SentimentArray_From = Create_SentimentArray_From;
function Create_SentimentArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_SentimentArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_SentimentArrayArray_From = Create_SentimentArrayArray_From;
function Create_DocumentMigrationAssociate_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.AssociateId = src.AssociateId;
    res.EmailAddress = src.EmailAddress;
    return res;
}
exports.Create_DocumentMigrationAssociate_From = Create_DocumentMigrationAssociate_From;
function Create_DocumentMigrationAssociateArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DocumentMigrationAssociate_From(src[i]);
        }
    }
    return res;
}
exports.Create_DocumentMigrationAssociateArray_From = Create_DocumentMigrationAssociateArray_From;
function Create_DocumentMigrationAssociateArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DocumentMigrationAssociateArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_DocumentMigrationAssociateArrayArray_From = Create_DocumentMigrationAssociateArrayArray_From;
function Create_DocumentMigrationItem_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.DocumentId = src.DocumentId;
    res.ContactId = src.ContactId;
    res.PersonId = src.PersonId;
    res.SaleId = src.SaleId;
    res.ProjectId = src.ProjectId;
    res.DocTmplId = src.DocTmplId;
    res.AssociateId = src.AssociateId;
    res.UserGroupId = src.UserGroupId;
    res.VisibleForId = src.VisibleForId;
    return res;
}
exports.Create_DocumentMigrationItem_From = Create_DocumentMigrationItem_From;
function Create_DocumentMigrationItemArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DocumentMigrationItem_From(src[i]);
        }
    }
    return res;
}
exports.Create_DocumentMigrationItemArray_From = Create_DocumentMigrationItemArray_From;
function Create_DocumentMigrationItemArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DocumentMigrationItemArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_DocumentMigrationItemArrayArray_From = Create_DocumentMigrationItemArrayArray_From;
function Create_DocumentMigrationItemList_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.NumDocumentsOmitted = src.NumDocumentsOmitted;
    res.NumDocumentsAlreadyMigrated = src.NumDocumentsAlreadyMigrated;
    res.Documents = Create_DocumentMigrationItemArray_From(src.Documents);
    res.Associates = Create_DocumentMigrationAssociateArray_From(src.Associates);
    return res;
}
exports.Create_DocumentMigrationItemList_From = Create_DocumentMigrationItemList_From;
function Create_DocumentMigrationItemListArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DocumentMigrationItemList_From(src[i]);
        }
    }
    return res;
}
exports.Create_DocumentMigrationItemListArray_From = Create_DocumentMigrationItemListArray_From;
function Create_DocumentMigrationItemListArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DocumentMigrationItemListArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_DocumentMigrationItemListArrayArray_From = Create_DocumentMigrationItemListArrayArray_From;
function Create_DocumentTemplateMigrationList_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    res.NumTemplatesOmitted = src.NumTemplatesOmitted;
    res.NumTemplatesAlreadyMigrated = src.NumTemplatesAlreadyMigrated;
    res.TemplateIds = src.TemplateIds;
    return res;
}
exports.Create_DocumentTemplateMigrationList_From = Create_DocumentTemplateMigrationList_From;
function Create_DocumentTemplateMigrationListArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DocumentTemplateMigrationList_From(src[i]);
        }
    }
    return res;
}
exports.Create_DocumentTemplateMigrationListArray_From = Create_DocumentTemplateMigrationListArray_From;
function Create_DocumentTemplateMigrationListArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_DocumentTemplateMigrationListArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_DocumentTemplateMigrationListArrayArray_From = Create_DocumentTemplateMigrationListArrayArray_From;
function Create_EmailFlow_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.EmailFlowId = src.EmailFlowId;
    res.Name = src.Name;
    res.Description = src.Description;
    res.Status = enums.WorkflowDefinitionStatus[src.Status];
    res.JumpToFinish = src.JumpToFinish;
    res.StartOnlyOnce = src.StartOnlyOnce;
    res.OverrideConsentSubscription = src.OverrideConsentSubscription;
    res.FromType = enums.EmailFromType[src.FromType];
    res.FromName = src.FromName;
    res.FromAddr = src.FromAddr;
    res.ReplyToType = enums.EmailReplyToType[src.ReplyToType];
    res.ReplyToAddr = src.ReplyToAddr;
    res.ReplyToName = src.ReplyToName;
    res.SmsSender = src.SmsSender;
    res.UseGoogleAnalytics = src.UseGoogleAnalytics;
    res.GaSource = src.GaSource;
    res.GaCampaign = src.GaCampaign;
    res.UseTimeframe = src.UseTimeframe;
    res.SelectedDays = Create_Weekday_From(src.SelectedDays);
    res.TimeframeStart = Create_Date_From(src.TimeframeStart);
    res.TimeframeEnd = Create_Date_From(src.TimeframeEnd);
    res.UseWorkflowStart = src.UseWorkflowStart;
    res.WorkflowStart = Create_Date_From(src.WorkflowStart);
    res.UseEnrollmentEnd = src.UseEnrollmentEnd;
    res.EnrollmentEnd = Create_Date_From(src.EnrollmentEnd);
    res.RemoveFromFlows = src.RemoveFromFlows;
    res.TzLocation = Create_TimeZoneData_From(src.TzLocation);
    res.Folder = Create_HierarchyEntity_From(src.Folder);
    res.Associate = Create_Associate_From(src.Associate);
    res.ShipmentType = Create_MDOListItem_From(src.ShipmentType);
    res.Steps = Create_WorkflowStepBaseArray_From(src.Steps);
    res.Triggers = Create_WorkflowTriggerArray_From(src.Triggers);
    res.Goals = Create_WorkflowGoalArray_From(src.Goals);
    res.Filter = Create_WorkflowFilter_From(src.Filter);
    res.BlockLists = src.BlockLists;
    res.VisibleFor = Create_VisibleForArray_From(src.VisibleFor);
    return res;
}
exports.Create_EmailFlow_From = Create_EmailFlow_From;
function Create_EmailFlowArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EmailFlow_From(src[i]);
        }
    }
    return res;
}
exports.Create_EmailFlowArray_From = Create_EmailFlowArray_From;
function Create_EmailFlowArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_EmailFlowArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_EmailFlowArrayArray_From = Create_EmailFlowArrayArray_From;
function Create_WorkflowFilter_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.RestrictionGroups = Create_ArchiveRestrictionGroupArray_From(src.RestrictionGroups);
    return res;
}
exports.Create_WorkflowFilter_From = Create_WorkflowFilter_From;
function Create_WorkflowFilterArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowFilter_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowFilterArray_From = Create_WorkflowFilterArray_From;
function Create_WorkflowFilterArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowFilterArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowFilterArrayArray_From = Create_WorkflowFilterArrayArray_From;
function Create_WorkflowGoal_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.WorkflowGoalId = src.WorkflowGoalId;
    res.WorkflowId = src.WorkflowId;
    res.GoalType = enums.WorkflowGoalType[src.GoalType];
    res.RestrictionGroups = Create_ArchiveRestrictionGroupArray_From(src.RestrictionGroups);
    return res;
}
exports.Create_WorkflowGoal_From = Create_WorkflowGoal_From;
function Create_WorkflowGoalArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowGoal_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowGoalArray_From = Create_WorkflowGoalArray_From;
function Create_WorkflowGoalArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowGoalArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowGoalArrayArray_From = Create_WorkflowGoalArrayArray_From;
function Create_WorkflowStepBase_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = {};
    if (src.StepType == "AddToList")
        res = Create_WorkflowStepAddToList_From(src);
    if (src.StepType == "CreateFollowUp")
        res = Create_WorkflowStepCreateFollowUp_From(src);
    if (src.StepType == "CreateRequest")
        res = Create_WorkflowStepCreateRequest_From(src);
    if (src.StepType == "CreateSale")
        res = Create_WorkflowStepCreateSale_From(src);
    if (src.StepType == "NotifyByEmail")
        res = Create_WorkflowStepNotifyByEmail_From(src);
    if (src.StepType == "NotifyBySMS")
        res = Create_WorkflowStepNotifyBySMS_From(src);
    if (src.StepType == "RemoveFromList")
        res = Create_WorkflowStepRemoveFromList_From(src);
    if (src.StepType == "RunScript")
        res = Create_WorkflowStepRunScript_From(src);
    if (src.StepType == "SendEmail")
        res = Create_WorkflowStepSendEmail_From(src);
    if (src.StepType == "SendSMS")
        res = Create_WorkflowStepSendSMS_From(src);
    if (src.StepType == "Split")
        res = Create_WorkflowStepSplit_From(src);
    if (src.StepType == "UpdateContact")
        res = Create_WorkflowStepUpdateContact_From(src);
    if (src.StepType == "WaitForAction")
        res = Create_WorkflowStepWaitForAction_From(src);
    if (src.StepType == "WaitForTime")
        res = Create_WorkflowStepWaitForTime_From(src);
    res.WorkflowStepId = src.WorkflowStepId;
    res.WorkflowId = src.WorkflowId;
    res.StepType = enums.WorkflowStepType[src.StepType];
    res.Rank = src.Rank;
    return res;
}
exports.Create_WorkflowStepBase_From = Create_WorkflowStepBase_From;
function Create_WorkflowStepBaseArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepBase_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepBaseArray_From = Create_WorkflowStepBaseArray_From;
function Create_WorkflowStepBaseArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepBaseArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepBaseArrayArray_From = Create_WorkflowStepBaseArrayArray_From;
function Create_WorkflowStepAddToList_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = src;
    return res;
}
exports.Create_WorkflowStepAddToList_From = Create_WorkflowStepAddToList_From;
function Create_WorkflowStepAddToListArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepAddToList_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepAddToListArray_From = Create_WorkflowStepAddToListArray_From;
function Create_WorkflowStepAddToListArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepAddToListArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepAddToListArrayArray_From = Create_WorkflowStepAddToListArrayArray_From;
function Create_WorkflowStepCreateFollowUp_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = src;
    return res;
}
exports.Create_WorkflowStepCreateFollowUp_From = Create_WorkflowStepCreateFollowUp_From;
function Create_WorkflowStepCreateFollowUpArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepCreateFollowUp_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepCreateFollowUpArray_From = Create_WorkflowStepCreateFollowUpArray_From;
function Create_WorkflowStepCreateFollowUpArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepCreateFollowUpArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepCreateFollowUpArrayArray_From = Create_WorkflowStepCreateFollowUpArrayArray_From;
function Create_WorkflowStepCreateRequest_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = src;
    return res;
}
exports.Create_WorkflowStepCreateRequest_From = Create_WorkflowStepCreateRequest_From;
function Create_WorkflowStepCreateRequestArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepCreateRequest_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepCreateRequestArray_From = Create_WorkflowStepCreateRequestArray_From;
function Create_WorkflowStepCreateRequestArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepCreateRequestArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepCreateRequestArrayArray_From = Create_WorkflowStepCreateRequestArrayArray_From;
function Create_WorkflowStepCreateSale_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = src;
    return res;
}
exports.Create_WorkflowStepCreateSale_From = Create_WorkflowStepCreateSale_From;
function Create_WorkflowStepCreateSaleArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepCreateSale_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepCreateSaleArray_From = Create_WorkflowStepCreateSaleArray_From;
function Create_WorkflowStepCreateSaleArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepCreateSaleArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepCreateSaleArrayArray_From = Create_WorkflowStepCreateSaleArrayArray_From;
function Create_WorkflowStepNotifyByEmail_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = src;
    return res;
}
exports.Create_WorkflowStepNotifyByEmail_From = Create_WorkflowStepNotifyByEmail_From;
function Create_WorkflowStepNotifyByEmailArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepNotifyByEmail_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepNotifyByEmailArray_From = Create_WorkflowStepNotifyByEmailArray_From;
function Create_WorkflowStepNotifyByEmailArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepNotifyByEmailArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepNotifyByEmailArrayArray_From = Create_WorkflowStepNotifyByEmailArrayArray_From;
function Create_WorkflowStepNotifyBySMS_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = src;
    return res;
}
exports.Create_WorkflowStepNotifyBySMS_From = Create_WorkflowStepNotifyBySMS_From;
function Create_WorkflowStepNotifyBySMSArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepNotifyBySMS_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepNotifyBySMSArray_From = Create_WorkflowStepNotifyBySMSArray_From;
function Create_WorkflowStepNotifyBySMSArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepNotifyBySMSArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepNotifyBySMSArrayArray_From = Create_WorkflowStepNotifyBySMSArrayArray_From;
function Create_WorkflowStepOption_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.WorkflowStepOptionId = src.WorkflowStepOptionId;
    res.WorkflowStepId = src.WorkflowStepId;
    res.WorkflowId = src.WorkflowId;
    res.Key = src.Key;
    res.Name = src.Name;
    res.Rank = src.Rank;
    res.Steps = Create_WorkflowStepBaseArray_From(src.Steps);
    return res;
}
exports.Create_WorkflowStepOption_From = Create_WorkflowStepOption_From;
function Create_WorkflowStepOptionArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepOption_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepOptionArray_From = Create_WorkflowStepOptionArray_From;
function Create_WorkflowStepOptionArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepOptionArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepOptionArrayArray_From = Create_WorkflowStepOptionArrayArray_From;
function Create_WorkflowStepRemoveFromList_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = src;
    return res;
}
exports.Create_WorkflowStepRemoveFromList_From = Create_WorkflowStepRemoveFromList_From;
function Create_WorkflowStepRemoveFromListArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepRemoveFromList_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepRemoveFromListArray_From = Create_WorkflowStepRemoveFromListArray_From;
function Create_WorkflowStepRemoveFromListArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepRemoveFromListArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepRemoveFromListArrayArray_From = Create_WorkflowStepRemoveFromListArrayArray_From;
function Create_WorkflowStepRunScript_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = src;
    return res;
}
exports.Create_WorkflowStepRunScript_From = Create_WorkflowStepRunScript_From;
function Create_WorkflowStepRunScriptArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepRunScript_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepRunScriptArray_From = Create_WorkflowStepRunScriptArray_From;
function Create_WorkflowStepRunScriptArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepRunScriptArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepRunScriptArrayArray_From = Create_WorkflowStepRunScriptArrayArray_From;
function Create_WorkflowStepSendEmail_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = src;
    res.Subject = src.Subject;
    res.Attachments = src.Attachments;
    res.EmailMessageId = src.EmailMessageId;
    res.ShipmentId = src.ShipmentId;
    return res;
}
exports.Create_WorkflowStepSendEmail_From = Create_WorkflowStepSendEmail_From;
function Create_WorkflowStepSendEmailArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepSendEmail_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepSendEmailArray_From = Create_WorkflowStepSendEmailArray_From;
function Create_WorkflowStepSendEmailArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepSendEmailArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepSendEmailArrayArray_From = Create_WorkflowStepSendEmailArrayArray_From;
function Create_WorkflowStepSendSMS_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = src;
    return res;
}
exports.Create_WorkflowStepSendSMS_From = Create_WorkflowStepSendSMS_From;
function Create_WorkflowStepSendSMSArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepSendSMS_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepSendSMSArray_From = Create_WorkflowStepSendSMSArray_From;
function Create_WorkflowStepSendSMSArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepSendSMSArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepSendSMSArrayArray_From = Create_WorkflowStepSendSMSArrayArray_From;
function Create_WorkflowStepSplit_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = src;
    res.Options = Create_WorkflowStepOptionArray_From(src.Options);
    return res;
}
exports.Create_WorkflowStepSplit_From = Create_WorkflowStepSplit_From;
function Create_WorkflowStepSplitArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepSplit_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepSplitArray_From = Create_WorkflowStepSplitArray_From;
function Create_WorkflowStepSplitArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepSplitArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepSplitArrayArray_From = Create_WorkflowStepSplitArrayArray_From;
function Create_WorkflowStepUpdateContact_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = src;
    return res;
}
exports.Create_WorkflowStepUpdateContact_From = Create_WorkflowStepUpdateContact_From;
function Create_WorkflowStepUpdateContactArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepUpdateContact_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepUpdateContactArray_From = Create_WorkflowStepUpdateContactArray_From;
function Create_WorkflowStepUpdateContactArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepUpdateContactArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepUpdateContactArrayArray_From = Create_WorkflowStepUpdateContactArrayArray_From;
function Create_WorkflowStepWaitForAction_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = src;
    return res;
}
exports.Create_WorkflowStepWaitForAction_From = Create_WorkflowStepWaitForAction_From;
function Create_WorkflowStepWaitForActionArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepWaitForAction_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepWaitForActionArray_From = Create_WorkflowStepWaitForActionArray_From;
function Create_WorkflowStepWaitForActionArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepWaitForActionArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepWaitForActionArrayArray_From = Create_WorkflowStepWaitForActionArrayArray_From;
function Create_WorkflowStepWaitForTime_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = src;
    res.TimeWaitAlgorithm = enums.WorkflowTimeWaitAlgorithm[src.TimeWaitAlgorithm];
    res.NumIntervals = src.NumIntervals;
    res.IntervalType = enums.WorkflowTimeWaitIntervalType[src.IntervalType];
    res.Until = Create_Date_From(src.Until);
    return res;
}
exports.Create_WorkflowStepWaitForTime_From = Create_WorkflowStepWaitForTime_From;
function Create_WorkflowStepWaitForTimeArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepWaitForTime_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepWaitForTimeArray_From = Create_WorkflowStepWaitForTimeArray_From;
function Create_WorkflowStepWaitForTimeArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowStepWaitForTimeArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowStepWaitForTimeArrayArray_From = Create_WorkflowStepWaitForTimeArrayArray_From;
function Create_WorkflowTrigger_From(src) {
    if (src === null || src === undefined)
        return null;
    let res = Create_Carrier_From(src);
    res.WorkflowTriggerId = src.WorkflowTriggerId;
    res.WorkflowId = src.WorkflowId;
    res.TriggerType = enums.WorkflowTriggerType[src.TriggerType];
    res.RestrictionGroups = Create_ArchiveRestrictionGroupArray_From(src.RestrictionGroups);
    return res;
}
exports.Create_WorkflowTrigger_From = Create_WorkflowTrigger_From;
function Create_WorkflowTriggerArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowTrigger_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowTriggerArray_From = Create_WorkflowTriggerArray_From;
function Create_WorkflowTriggerArrayArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_WorkflowTriggerArray_From(src[i]);
        }
    }
    return res;
}
exports.Create_WorkflowTriggerArrayArray_From = Create_WorkflowTriggerArrayArray_From;
// Misc 
function Create_DSAParameters_From(src) {
    return src;
}
function Create_ArrayBuffer_From(src) {
    return src;
}
function Create_BirthDate_From(src) {
    if (src && src.indexOf && src.indexOf('-') > 1 && src.indexOf('T') > 1) {
        src = src.substr(0, src.indexOf('T'));
        return new Date(src);
    }
    return src;
}
function Create_Date_From(src) {
    if (src && src.indexOf && src.indexOf('-') > 1)
        return new Date(src);
    return null;
}
function Create_DateArray_From(src) {
    let res = [];
    if (Array.isArray(src)) {
        for (let i in src) {
            res[i] = Create_Date_From(src[i]);
        }
    }
    return res;
}
function Create_Duration_From(src) {
    if (src)
        return moment.duration(src);
    return null;
}
function Create_Object_From(src) {
    return src;
}
function Create_AddressType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.AddressType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.AddressType[src];
        return r;
    }
}
function Create_AppointmentPrivate_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.AppointmentPrivate[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.AppointmentPrivate[src];
        return r;
    }
}
function Create_AppointmentStatus_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.AppointmentStatus[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.AppointmentStatus[src];
        return r;
    }
}
function Create_AppointmentType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.AppointmentType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.AppointmentType[src];
        return r;
    }
}
function Create_FieldAccess_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.FieldAccess[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.FieldAccess[src];
        return r;
    }
}
function Create_FieldMetadataType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.FieldMetadataType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.FieldMetadataType[src];
        return r;
    }
}
function Create_DocTmplDirection_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.DocTmplDirection[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.DocTmplDirection[src];
        return r;
    }
}
function Create_DocTmplQuoteType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.DocTmplQuoteType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.DocTmplQuoteType[src];
        return r;
    }
}
function Create_DocTmplType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.DocTmplType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.DocTmplType[src];
        return r;
    }
}
function Create_ExecuteOnEvent_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.ExecuteOnEvent[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.ExecuteOnEvent[src];
        return r;
    }
}
function Create_ExtraDataFieldType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.ExtraDataFieldType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.ExtraDataFieldType[src];
        return r;
    }
}
function Create_Navigation_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.Navigation[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.Navigation[src];
        return r;
    }
}
function Create_PrefDescAccessFlags_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r;
            for (const s of src[i].split(/,\s*/)) {
                r |= enums.PrefDescAccessFlags[s];
            }
            result.push(r);
        }
        return result;
    }
    else {
        let r;
        for (const s of src.split(/,\s*/)) {
            r |= enums.PrefDescAccessFlags[s];
        }
        return r;
    }
}
function Create_PrefDescValueType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.PrefDescValueType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.PrefDescValueType[src];
        return r;
    }
}
function Create_SaleStatus_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.SaleStatus[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.SaleStatus[src];
        return r;
    }
}
function Create_ShowState_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r;
            for (const s of src[i].split(/,\s*/)) {
                r |= enums.ShowState[s];
            }
            result.push(r);
        }
        return result;
    }
    else {
        let r;
        for (const s of src.split(/,\s*/)) {
            r |= enums.ShowState[s];
        }
        return r;
    }
}
function Create_TaskDirection_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.TaskDirection[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.TaskDirection[src];
        return r;
    }
}
function Create_TaskType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.TaskType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.TaskType[src];
        return r;
    }
}
function Create_PreferenceLevel_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.PreferenceLevel[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.PreferenceLevel[src];
        return r;
    }
}
function Create_DurationUnit_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.DurationUnit[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.DurationUnit[src];
        return r;
    }
}
function Create_SelectionUnionType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.SelectionUnionType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.SelectionUnionType[src];
        return r;
    }
}
function Create_ShipmentStatus_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.ShipmentStatus[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.ShipmentStatus[src];
        return r;
    }
}
function Create_ShipmentAddrStatus_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.ShipmentAddrStatus[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.ShipmentAddrStatus[src];
        return r;
    }
}
function Create_TicketOrigin_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.TicketOrigin[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.TicketOrigin[src];
        return r;
    }
}
function Create_TicketStatusTimeCounter_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.TicketStatusTimeCounter[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.TicketStatusTimeCounter[src];
        return r;
    }
}
function Create_QuoteVersionState_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.QuoteVersionState[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.QuoteVersionState[src];
        return r;
    }
}
function Create_BlobLinkType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.BlobLinkType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.BlobLinkType[src];
        return r;
    }
}
function Create_QuoteStatus_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.QuoteStatus[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.QuoteStatus[src];
        return r;
    }
}
function Create_ValueOverride_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.ValueOverride[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.ValueOverride[src];
        return r;
    }
}
function Create_ErpActorType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.ErpActorType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.ErpActorType[src];
        return r;
    }
}
function Create_CrmActorType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.CrmActorType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.CrmActorType[src];
        return r;
    }
}
function Create_PublishType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.PublishType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.PublishType[src];
        return r;
    }
}
function Create_UdefJustification_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.UdefJustification[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.UdefJustification[src];
        return r;
    }
}
function Create_RoleType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.RoleType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.RoleType[src];
        return r;
    }
}
function Create_RecurrencePattern_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.RecurrencePattern[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.RecurrencePattern[src];
        return r;
    }
}
function Create_ShowWindowState_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.ShowWindowState[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.ShowWindowState[src];
        return r;
    }
}
function Create_LicenseType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.LicenseType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.LicenseType[src];
        return r;
    }
}
function Create_EMailMergeTargetType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.EMailMergeTargetType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.EMailMergeTargetType[src];
        return r;
    }
}
function Create_AssignmentStatus_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.AssignmentStatus[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.AssignmentStatus[src];
        return r;
    }
}
function Create_ColorIndex_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.ColorIndex[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.ColorIndex[src];
        return r;
    }
}
function Create_UrlEncoding_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.UrlEncoding[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.UrlEncoding[src];
        return r;
    }
}
function Create_RelationTarget_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.RelationTarget[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.RelationTarget[src];
        return r;
    }
}
function Create_UDefType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.UDefType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.UDefType[src];
        return r;
    }
}
function Create_UDefFieldType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.UDefFieldType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.UDefFieldType[src];
        return r;
    }
}
function Create_CustomFieldType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.CustomFieldType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.CustomFieldType[src];
        return r;
    }
}
function Create_SystemEventScope_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.SystemEventScope[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.SystemEventScope[src];
        return r;
    }
}
function Create_ImportEntityType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r;
            for (const s of src[i].split(/,\s*/)) {
                r |= enums.ImportEntityType[s];
            }
            result.push(r);
        }
        return result;
    }
    else {
        let r;
        for (const s of src.split(/,\s*/)) {
            r |= enums.ImportEntityType[s];
        }
        return r;
    }
}
function Create_ImportAction_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r;
            for (const s of src[i].split(/,\s*/)) {
                r |= enums.ImportAction[s];
            }
            result.push(r);
        }
        return result;
    }
    else {
        let r;
        for (const s of src.split(/,\s*/)) {
            r |= enums.ImportAction[s];
        }
        return r;
    }
}
function Create_FreeTextOperator_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.FreeTextOperator[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.FreeTextOperator[src];
        return r;
    }
}
function Create_ErpSyncResponseCode_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.ErpSyncResponseCode[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.ErpSyncResponseCode[src];
        return r;
    }
}
function Create_TicketBaseStatus_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.TicketBaseStatus[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.TicketBaseStatus[src];
        return r;
    }
}
function Create_ReportCategory_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.ReportCategory[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.ReportCategory[src];
        return r;
    }
}
function Create_EMailPriority_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.EMailPriority[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.EMailPriority[src];
        return r;
    }
}
function Create_EMailFlags_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r;
            for (const s of src[i].split(/,\s*/)) {
                r |= enums.EMailFlags[s];
            }
            result.push(r);
        }
        return result;
    }
    else {
        let r;
        for (const s of src.split(/,\s*/)) {
            r |= enums.EMailFlags[s];
        }
        return r;
    }
}
function Create_BatchTaskState_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.BatchTaskState[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.BatchTaskState[src];
        return r;
    }
}
function Create_BatchTaskCancellationBehaviour_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.BatchTaskCancellationBehaviour[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.BatchTaskCancellationBehaviour[src];
        return r;
    }
}
function Create_SelectionType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.SelectionType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.SelectionType[src];
        return r;
    }
}
function Create_ReportLayout_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.ReportLayout[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.ReportLayout[src];
        return r;
    }
}
function Create_ReportPaperOrientation_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.ReportPaperOrientation[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.ReportPaperOrientation[src];
        return r;
    }
}
function Create_DocumentLockSemantics_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.DocumentLockSemantics[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.DocumentLockSemantics[src];
        return r;
    }
}
function Create_GeneratorEncoding_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.GeneratorEncoding[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.GeneratorEncoding[src];
        return r;
    }
}
function Create_DashboardLayout_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.DashboardLayout[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.DashboardLayout[src];
        return r;
    }
}
function Create_DashboardTileType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.DashboardTileType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.DashboardTileType[src];
        return r;
    }
}
function Create_DashboardTileEntityType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.DashboardTileEntityType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.DashboardTileEntityType[src];
        return r;
    }
}
function Create_DashboardTileOptionType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.DashboardTileOptionType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.DashboardTileOptionType[src];
        return r;
    }
}
function Create_DashTileType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.DashTileType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.DashTileType[src];
        return r;
    }
}
function Create_DashTileCurrencyMode_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.DashTileCurrencyMode[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.DashTileCurrencyMode[src];
        return r;
    }
}
function Create_DashTileMeasure_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.DashTileMeasure[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.DashTileMeasure[src];
        return r;
    }
}
function Create_DashTileEntityType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.DashTileEntityType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.DashTileEntityType[src];
        return r;
    }
}
function Create_DashTileUsage_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r;
            for (const s of src[i].split(/,\s*/)) {
                r |= enums.DashTileUsage[s];
            }
            result.push(r);
        }
        return result;
    }
    else {
        let r;
        for (const s of src.split(/,\s*/)) {
            r |= enums.DashTileUsage[s];
        }
        return r;
    }
}
function Create_TargetAssignementLevel_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r;
            for (const s of src[i].split(/,\s*/)) {
                r |= enums.TargetAssignementLevel[s];
            }
            result.push(r);
        }
        return result;
    }
    else {
        let r;
        for (const s of src.split(/,\s*/)) {
            r |= enums.TargetAssignementLevel[s];
        }
        return r;
    }
}
function Create_TargetEntityType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.TargetEntityType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.TargetEntityType[src];
        return r;
    }
}
function Create_TargetMeasurementUnit_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.TargetMeasurementUnit[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.TargetMeasurementUnit[src];
        return r;
    }
}
function Create_TargetPeriodType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.TargetPeriodType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.TargetPeriodType[src];
        return r;
    }
}
function Create_TargetLevel_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.TargetLevel[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.TargetLevel[src];
        return r;
    }
}
function Create_LogEvent_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.LogEvent[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.LogEvent[src];
        return r;
    }
}
function Create_WorkflowDefinitionStatus_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.WorkflowDefinitionStatus[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.WorkflowDefinitionStatus[src];
        return r;
    }
}
function Create_EmailFromType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.EmailFromType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.EmailFromType[src];
        return r;
    }
}
function Create_EmailReplyToType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.EmailReplyToType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.EmailReplyToType[src];
        return r;
    }
}
function Create_WorkflowTimeWaitAlgorithm_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.WorkflowTimeWaitAlgorithm[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.WorkflowTimeWaitAlgorithm[src];
        return r;
    }
}
function Create_WorkflowTimeWaitIntervalType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.WorkflowTimeWaitIntervalType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.WorkflowTimeWaitIntervalType[src];
        return r;
    }
}
function Create_WorkflowGoalType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.WorkflowGoalType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.WorkflowGoalType[src];
        return r;
    }
}
function Create_WorkflowStepType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.WorkflowStepType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.WorkflowStepType[src];
        return r;
    }
}
function Create_WorkflowTriggerType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.WorkflowTriggerType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.WorkflowTriggerType[src];
        return r;
    }
}
function Create_ActivityStatus_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.ActivityStatus[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.ActivityStatus[src];
        return r;
    }
}
function Create_InvitationStatus_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.InvitationStatus[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.InvitationStatus[src];
        return r;
    }
}
function Create_BookingType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.BookingType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.BookingType[src];
        return r;
    }
}
function Create_LocalizedTextType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.LocalizedTextType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.LocalizedTextType[src];
        return r;
    }
}
function Create_ContactAction_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r;
            for (const s of src[i].split(/,\s*/)) {
                r |= enums.ContactAction[s];
            }
            result.push(r);
        }
        return result;
    }
    else {
        let r;
        for (const s of src.split(/,\s*/)) {
            r |= enums.ContactAction[s];
        }
        return r;
    }
}
function Create_CheckoutState_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.CheckoutState[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.CheckoutState[src];
        return r;
    }
}
function Create_StringSearchType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.StringSearchType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.StringSearchType[src];
        return r;
    }
}
function Create_ReturnType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.ReturnType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.ReturnType[src];
        return r;
    }
}
function Create_ETableRight_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r;
            for (const s of src[i].split(/,\s*/)) {
                r |= enums.ETableRight[s];
            }
            result.push(r);
        }
        return result;
    }
    else {
        let r;
        for (const s of src.split(/,\s*/)) {
            r |= enums.ETableRight[s];
        }
        return r;
    }
}
function Create_LicenseStatus_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.LicenseStatus[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.LicenseStatus[src];
        return r;
    }
}
function Create_RecurrenceUpdateMode_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.RecurrenceUpdateMode[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.RecurrenceUpdateMode[src];
        return r;
    }
}
function Create_UserType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.UserType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.UserType[src];
        return r;
    }
}
function Create_ContactSourceType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r;
            for (const s of src[i].split(/,\s*/)) {
                r |= enums.ContactSourceType[s];
            }
            result.push(r);
        }
        return result;
    }
    else {
        let r;
        for (const s of src.split(/,\s*/)) {
            r |= enums.ContactSourceType[s];
        }
        return r;
    }
}
function Create_Visibility_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.Visibility[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.Visibility[src];
        return r;
    }
}
function Create_CredentialControlType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.CredentialControlType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.CredentialControlType[src];
        return r;
    }
}
function Create_RecurrenceEndType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.RecurrenceEndType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.RecurrenceEndType[src];
        return r;
    }
}
function Create_AssociateSourceType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r;
            for (const s of src[i].split(/,\s*/)) {
                r |= enums.AssociateSourceType[s];
            }
            result.push(r);
        }
        return result;
    }
    else {
        let r;
        for (const s of src.split(/,\s*/)) {
            r |= enums.AssociateSourceType[s];
        }
        return r;
    }
}
function Create_RoleRelationToOwner_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.RoleRelationToOwner[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.RoleRelationToOwner[src];
        return r;
    }
}
function Create_ExternalUserInfoModification_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r;
            for (const s of src[i].split(/,\s*/)) {
                r |= enums.ExternalUserInfoModification[s];
            }
            result.push(r);
        }
        return result;
    }
    else {
        let r;
        for (const s of src.split(/,\s*/)) {
            r |= enums.ExternalUserInfoModification[s];
        }
        return r;
    }
}
function Create_EFieldRight_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r;
            for (const s of src[i].split(/,\s*/)) {
                r |= enums.EFieldRight[s];
            }
            result.push(r);
        }
        return result;
    }
    else {
        let r;
        for (const s of src.split(/,\s*/)) {
            r |= enums.EFieldRight[s];
        }
        return r;
    }
}
function Create_InterRestrictionOperator_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.InterRestrictionOperator[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.InterRestrictionOperator[src];
        return r;
    }
}
function Create_Weekday_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r;
            for (const s of src[i].split(/,\s*/)) {
                r |= enums.Weekday[s];
            }
            result.push(r);
        }
        return result;
    }
    else {
        let r;
        for (const s of src.split(/,\s*/)) {
            r |= enums.Weekday[s];
        }
        return r;
    }
}
function Create_RecurrenceYearlyPattern_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.RecurrenceYearlyPattern[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.RecurrenceYearlyPattern[src];
        return r;
    }
}
function Create_RecurrenceMonthlyPattern_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.RecurrenceMonthlyPattern[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.RecurrenceMonthlyPattern[src];
        return r;
    }
}
function Create_RecurrenceDailyPattern_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.RecurrenceDailyPattern[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.RecurrenceDailyPattern[src];
        return r;
    }
}
function Create_WeekOfMonth_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.WeekOfMonth[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.WeekOfMonth[src];
        return r;
    }
}
function Create_OrderBySortType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.OrderBySortType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.OrderBySortType[src];
        return r;
    }
}
function Create_EjUserStatus_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.EjUserStatus[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.EjUserStatus[src];
        return r;
    }
}
function Create_StatusScreenPanelType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.StatusScreenPanelType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.StatusScreenPanelType[src];
        return r;
    }
}
function Create_NetServerBuildType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.NetServerBuildType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.NetServerBuildType[src];
        return r;
    }
}
function Create_QuoteVersionButtonAction_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.QuoteVersionButtonAction[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.QuoteVersionButtonAction[src];
        return r;
    }
}
function Create_TemporaryKeyDomain_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.TemporaryKeyDomain[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.TemporaryKeyDomain[src];
        return r;
    }
}
function Create_DocTmplPrivacyType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.DocTmplPrivacyType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.DocTmplPrivacyType[src];
        return r;
    }
}
function Create_WebhookState_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.WebhookState[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.WebhookState[src];
        return r;
    }
}
function Create_CommandAction_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.CommandAction[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.CommandAction[src];
        return r;
    }
}
function Create_CommandActionResult_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.CommandActionResult[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.CommandActionResult[src];
        return r;
    }
}
function Create_NotificationPlatform_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.NotificationPlatform[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.NotificationPlatform[src];
        return r;
    }
}
function Create_NotificationMessageType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.NotificationMessageType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.NotificationMessageType[src];
        return r;
    }
}
function Create_CalMethod_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.CalMethod[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.CalMethod[src];
        return r;
    }
}
function Create_CalReplyStatus_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.CalReplyStatus[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.CalReplyStatus[src];
        return r;
    }
}
function Create_SenderMailMode_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.SenderMailMode[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.SenderMailMode[src];
        return r;
    }
}
function Create_FormsRecaptchaMode_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.FormsRecaptchaMode[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.FormsRecaptchaMode[src];
        return r;
    }
}
function Create_AppointmentCautionWarning_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.AppointmentCautionWarning[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.AppointmentCautionWarning[src];
        return r;
    }
}
function Create_DocTmplInvitationType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.DocTmplInvitationType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.DocTmplInvitationType[src];
        return r;
    }
}
function Create_VideoMeetingStatus_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.VideoMeetingStatus[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.VideoMeetingStatus[src];
        return r;
    }
}
function Create_UpsertNomatchAction_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.UpsertNomatchAction[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.UpsertNomatchAction[src];
        return r;
    }
}
function Create_UpsertRowActionStatus_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.UpsertRowActionStatus[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.UpsertRowActionStatus[src];
        return r;
    }
}
function Create_MailboxType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.MailboxType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.MailboxType[src];
        return r;
    }
}
function Create_DeltaType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.DeltaType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.DeltaType[src];
        return r;
    }
}
function Create_DeltaState_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.DeltaState[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.DeltaState[src];
        return r;
    }
}
function Create_NotificationEventType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.NotificationEventType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.NotificationEventType[src];
        return r;
    }
}
function Create_ChangePasswordType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.ChangePasswordType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.ChangePasswordType[src];
        return r;
    }
}
function Create_MessageHeaderStdItem_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.MessageHeaderStdItem[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.MessageHeaderStdItem[src];
        return r;
    }
}
function Create_MessageHeaderStdItemCol_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.MessageHeaderStdItemCol[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.MessageHeaderStdItemCol[src];
        return r;
    }
}
function Create_MessageActionType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.MessageActionType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.MessageActionType[src];
        return r;
    }
}
function Create_RecipientType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.RecipientType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.RecipientType[src];
        return r;
    }
}
function Create_ImageEmbedType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.ImageEmbedType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.ImageEmbedType[src];
        return r;
    }
}
function Create_TaskListItemType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.TaskListItemType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.TaskListItemType[src];
        return r;
    }
}
function Create_ShowTaskItemInClient_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r;
            for (const s of src[i].split(/,\s*/)) {
                r |= enums.ShowTaskItemInClient[s];
            }
            result.push(r);
        }
        return result;
    }
    else {
        let r;
        for (const s of src.split(/,\s*/)) {
            r |= enums.ShowTaskItemInClient[s];
        }
        return r;
    }
}
function Create_ArchiveBehaviour_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r;
            for (const s of src[i].split(/,\s*/)) {
                r |= enums.ArchiveBehaviour[s];
            }
            result.push(r);
        }
        return result;
    }
    else {
        let r;
        for (const s of src.split(/,\s*/)) {
            r |= enums.ArchiveBehaviour[s];
        }
        return r;
    }
}
function Create_EventHandlerType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.EventHandlerType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.EventHandlerType[src];
        return r;
    }
}
function Create_Domain_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.Domain[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.Domain[src];
        return r;
    }
}
function Create_FormSubmissionStatus_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.FormSubmissionStatus[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.FormSubmissionStatus[src];
        return r;
    }
}
function Create_TicketPriorityStatus_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.TicketPriorityStatus[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.TicketPriorityStatus[src];
        return r;
    }
}
function Create_TicketCategoryDelegateMethod_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.TicketCategoryDelegateMethod[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.TicketCategoryDelegateMethod[src];
        return r;
    }
}
function Create_TicketCategoryClosingStatus_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.TicketCategoryClosingStatus[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.TicketCategoryClosingStatus[src];
        return r;
    }
}
function Create_TicketCategoryFlags_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r;
            for (const s of src[i].split(/,\s*/)) {
                r |= enums.TicketCategoryFlags[s];
            }
            result.push(r);
        }
        return result;
    }
    else {
        let r;
        for (const s of src.split(/,\s*/)) {
            r |= enums.TicketCategoryFlags[s];
        }
        return r;
    }
}
function Create_TicketPriorityFlags_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r;
            for (const s of src[i].split(/,\s*/)) {
                r |= enums.TicketPriorityFlags[s];
            }
            result.push(r);
        }
        return result;
    }
    else {
        let r;
        for (const s of src.split(/,\s*/)) {
            r |= enums.TicketPriorityFlags[s];
        }
        return r;
    }
}
function Create_TicketPriorityEscalateEvent_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.TicketPriorityEscalateEvent[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.TicketPriorityEscalateEvent[src];
        return r;
    }
}
function Create_TicketSecurityLevel_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.TicketSecurityLevel[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.TicketSecurityLevel[src];
        return r;
    }
}
function Create_TicketReadStatus_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.TicketReadStatus[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.TicketReadStatus[src];
        return r;
    }
}
function Create_TicketMessageType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.TicketMessageType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.TicketMessageType[src];
        return r;
    }
}
function Create_TicketMessageCategory_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.TicketMessageCategory[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.TicketMessageCategory[src];
        return r;
    }
}
function Create_DesignType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.DesignType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.DesignType[src];
        return r;
    }
}
function Create_ShipmentMessageType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r;
            for (const s of src[i].split(/,\s*/)) {
                r |= enums.ShipmentMessageType[s];
            }
            result.push(r);
        }
        return result;
    }
    else {
        let r;
        for (const s of src.split(/,\s*/)) {
            r |= enums.ShipmentMessageType[s];
        }
        return r;
    }
}
function Create_TicketAlertAction_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r;
            for (const s of src[i].split(/,\s*/)) {
                r |= enums.TicketAlertAction[s];
            }
            result.push(r);
        }
        return result;
    }
    else {
        let r;
        for (const s of src.split(/,\s*/)) {
            r |= enums.TicketAlertAction[s];
        }
        return r;
    }
}
function Create_BadgeType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.BadgeType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.BadgeType[src];
        return r;
    }
}
function Create_WidgetTheme_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.WidgetTheme[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.WidgetTheme[src];
        return r;
    }
}
function Create_WidgetRequiredFields_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r;
            for (const s of src[i].split(/,\s*/)) {
                r |= enums.WidgetRequiredFields[s];
            }
            result.push(r);
        }
        return result;
    }
    else {
        let r;
        for (const s of src.split(/,\s*/)) {
            r |= enums.WidgetRequiredFields[s];
        }
        return r;
    }
}
function Create_ChatSessionFlags_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r;
            for (const s of src[i].split(/,\s*/)) {
                r |= enums.ChatSessionFlags[s];
            }
            result.push(r);
        }
        return result;
    }
    else {
        let r;
        for (const s of src.split(/,\s*/)) {
            r |= enums.ChatSessionFlags[s];
        }
        return r;
    }
}
function Create_ConfigType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.ConfigType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.ConfigType[src];
        return r;
    }
}
function Create_FormType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.FormType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.FormType[src];
        return r;
    }
}
function Create_ChatSessionStatus_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.ChatSessionStatus[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.ChatSessionStatus[src];
        return r;
    }
}
function Create_ChatMessageType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.ChatMessageType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.ChatMessageType[src];
        return r;
    }
}
function Create_ChatMessageSpecialType_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.ChatMessageSpecialType[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.ChatMessageSpecialType[src];
        return r;
    }
}
function Create_ChatWidgetSize_From(src) {
    if (!src)
        return null;
    if (Array.isArray(src)) {
        let result = Array();
        for (const i in src) {
            let r = enums.ChatWidgetSize[src[i]];
            result.push(r);
        }
        return result;
    }
    else {
        let r = enums.ChatWidgetSize[src];
        return r;
    }
}
//# sourceMappingURL=Converters.js.map