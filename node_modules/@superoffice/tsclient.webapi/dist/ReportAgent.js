"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportAgent = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
/**
 * Run reports, set favourites, labels
 */
class ReportAgent extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Report/";
        super(options);
    }
    /**
     * Set default values into a new ReportEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    async CreateDefaultReportEntity(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultReportEntity", null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ReportEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing ReportEntity or creates a new ReportEntity if the id parameter is empty
     * @param entity - The ReportEntity to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated ReportEntity
     */
    async SaveReportEntity(entity, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveReportEntity", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ReportEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Set default values into a new ReportLabelLayoutEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    async CreateDefaultReportLabelLayoutEntity(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultReportLabelLayoutEntity", null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ReportLabelLayoutEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing ReportLabelLayoutEntity or creates a new ReportLabelLayoutEntity if the id parameter is empty
     * @param entity - The ReportLabelLayoutEntity to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated ReportLabelLayoutEntity
     */
    async SaveReportLabelLayoutEntity(entity, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveReportLabelLayoutEntity", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ReportLabelLayoutEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Deletes the ReportLabelLayoutEntity
     * @param ReportLabelLayoutEntityId - The id of the ReportLabelLayoutEntity to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    async DeleteReportLabelLayoutEntity(ReportLabelLayoutEntityId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteReportLabelLayoutEntity?ReportLabelLayoutEntityId=" + ReportLabelLayoutEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Gets a ReportEntity object.
     * @param reportEntityId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single ReportEntity
     */
    async GetReportEntity(reportEntityId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetReportEntity?reportEntityId=" + reportEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ReportEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async _CreateFavorite(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("CreateFavorite", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ReportEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async CreateFavorite(sourceId, name, description, webapi_options) {
        let _request = null;
        let _options = null;
        const first = sourceId;
        if (typeof (first) === "object" && first && (typeof (first.SourceId) != 'undefined' || typeof (first.Name) != 'undefined' || typeof (first.Description) != 'undefined')) {
            _request = sourceId;
            _options = name;
        }
        else {
            _request = {
                SourceId: sourceId,
                Name: name,
                Description: description,
            };
            _options = webapi_options;
        }
        return this._CreateFavorite(_request, _options);
    }
    async _DeleteFavorite(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("DeleteFavorite", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async DeleteFavorite(reportEntityId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = reportEntityId;
        if (typeof (first) === "object" && first && (typeof (first.ReportEntityId) != 'undefined')) {
            _request = reportEntityId;
            _options = webapi_options;
        }
        else {
            _request = {
                ReportEntityId: reportEntityId,
            };
            _options = webapi_options;
        }
        return this._DeleteFavorite(_request, _options);
    }
    async _UpdateFavorite(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("UpdateFavorite", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ReportEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async UpdateFavorite(reportEntity, webapi_options) {
        let _request = null;
        let _options = null;
        const first = reportEntity;
        if (typeof (first) === "object" && first && (typeof (first.ReportEntity) != 'undefined')) {
            _request = reportEntity;
            _options = webapi_options;
        }
        else {
            _request = {
                ReportEntity: reportEntity,
            };
            _options = webapi_options;
        }
        return this._UpdateFavorite(_request, _options);
    }
    async _GenerateReport(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GenerateReport", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GenerateReport(reportId, labelLayoutId, filename, language, fileType, restrictions, webapi_options) {
        let _request = null;
        let _options = null;
        const first = reportId;
        if (typeof (first) === "object" && first && (typeof (first.ReportId) != 'undefined' || typeof (first.LabelLayoutId) != 'undefined' || typeof (first.Filename) != 'undefined' || typeof (first.Language) != 'undefined' || typeof (first.FileType) != 'undefined' || typeof (first.Restrictions) != 'undefined')) {
            _request = reportId;
            _options = labelLayoutId;
        }
        else {
            _request = {
                ReportId: reportId,
                LabelLayoutId: labelLayoutId,
                Filename: filename,
                Language: language,
                FileType: fileType,
                Restrictions: restrictions,
            };
            _options = webapi_options;
        }
        return this._GenerateReport(_request, _options);
    }
    async _ImportReport(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ImportReport", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async ImportReport(report, webapi_options) {
        let _request = null;
        let _options = null;
        const first = report;
        if (typeof (first) === "object" && first && (typeof (first.Report) != 'undefined')) {
            _request = report;
            _options = webapi_options;
        }
        else {
            _request = {
                Report: report,
            };
            _options = webapi_options;
        }
        return this._ImportReport(_request, _options);
    }
    async _DeleteReport(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("DeleteReport", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async DeleteReport(reportId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = reportId;
        if (typeof (first) === "object" && first && (typeof (first.ReportId) != 'undefined')) {
            _request = reportId;
            _options = webapi_options;
        }
        else {
            _request = {
                ReportId: reportId,
            };
            _options = webapi_options;
        }
        return this._DeleteReport(_request, _options);
    }
    /*
     * Gets a ReportLabelLayoutEntity object.
     * @param reportLabelLayoutEntityId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single ReportLabelLayoutEntity
     */
    async GetReportLabelLayoutEntity(reportLabelLayoutEntityId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetReportLabelLayoutEntity?reportLabelLayoutEntityId=" + reportLabelLayoutEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ReportLabelLayoutEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
} // class v1ReportAgentController 
exports.ReportAgent = ReportAgent;
//# sourceMappingURL=ReportAgent.js.map