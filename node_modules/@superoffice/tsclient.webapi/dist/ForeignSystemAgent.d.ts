import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Collection of all services that works with Foreign key data (Key/Value pairs)
 */
export interface IForeignSystemAgent {
    CreateDefaultForeignAppEntity(): Promise<carriers.ForeignAppEntity>;
    SaveForeignAppEntity(entity: carriers.ForeignAppEntity): Promise<carriers.ForeignAppEntity>;
    DeleteForeignAppEntity(ForeignAppEntityId: number): Promise<void>;
    GetForeignAppEntity(foreignAppEntityId: number): Promise<carriers.ForeignAppEntity>;
    GetAppByName(request: carriers.ForeignSystem_GetAppByNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignAppEntity>;
    GetAppByName(applicationName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignAppEntity>;
    GetApplicationDevices(request: carriers.ForeignSystem_GetApplicationDevicesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignDevice[]>;
    GetApplicationDevices(applicationName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignDevice[]>;
    GetDeviceByName(request: carriers.ForeignSystem_GetDeviceByNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignDevice>;
    GetDeviceByName(applicationName: string, deviceName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignDevice>;
    GetDeviceByIdentifier(request: carriers.ForeignSystem_GetDeviceByIdentifierRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignDevice>;
    GetDeviceByIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignDevice>;
    AddDeviceByIdentifier(request: carriers.ForeignSystem_AddDeviceByIdentifierRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignDevice>;
    AddDeviceByIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignDevice>;
    SaveDeviceByIdentifier(request: carriers.ForeignSystem_SaveDeviceByIdentifierRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignDevice>;
    SaveDeviceByIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, foreignDevice: carriers.ForeignDevice, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignDevice>;
    DeleteDeviceByIdentifier(request: carriers.ForeignSystem_DeleteDeviceByIdentifierRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteDeviceByIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetKey(request: carriers.ForeignSystem_GetKeyRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey>;
    GetKey(applicationName: string, deviceName: string, keyName: string, tableName: string, recordId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey>;
    GetKeyValue(request: carriers.ForeignSystem_GetKeyValueRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetKeyValue(applicationName: string, deviceName: string, keyName: string, tableName: string, recordId: number, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetKeyOnDeviceIdentifier(request: carriers.ForeignSystem_GetKeyOnDeviceIdentifierRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey>;
    GetKeyOnDeviceIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, keyName: string, tableName: string, recordId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey>;
    GetKeyValueOnDeviceIdentifier(request: carriers.ForeignSystem_GetKeyValueOnDeviceIdentifierRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetKeyValueOnDeviceIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, keyName: string, tableName: string, recordId: number, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    AddForeignKey(request: carriers.ForeignSystem_AddForeignKeyRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey>;
    AddForeignKey(foreignKey: carriers.ForeignKey, applicationName: string, deviceName: string, deviceIdentifier: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey>;
    SaveForeignKey(request: carriers.ForeignSystem_SaveForeignKeyRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey>;
    SaveForeignKey(foreignKey: carriers.ForeignKey, applicationName: string, deviceName: string, deviceIdentifier: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey>;
    DeleteForeignKeyOnName(request: carriers.ForeignSystem_DeleteForeignKeyOnNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteForeignKeyOnName(applicationName: string, deviceName: string, deviceIdentifier: string, keyName: string, tableName: string, recordId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetKeyByValue(request: carriers.ForeignSystem_GetKeyByValueRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey>;
    GetKeyByValue(applicationName: string, deviceName: string, keyName: string, keyValue: string, tableName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey>;
    GetKeyByValueAndIdentifier(request: carriers.ForeignSystem_GetKeyByValueAndIdentifierRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey>;
    GetKeyByValueAndIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, keyName: string, keyValue: string, tableName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey>;
    GetAllForeignKeysOnEntity(request: carriers.ForeignSystem_GetAllForeignKeysOnEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    GetAllForeignKeysOnEntity(entityType: string, entityId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    GetForeignDevice(foreignDeviceId: number): Promise<carriers.ForeignDevice>;
    SaveForeignDevice(request: carriers.ForeignSystem_SaveForeignDeviceRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignDevice>;
    SaveForeignDevice(foreignDevice: carriers.ForeignDevice, applicationName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignDevice>;
    DeleteForeignDevice(request: carriers.ForeignSystem_DeleteForeignDeviceRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteForeignDevice(foreignDevice: carriers.ForeignDevice, applicationName: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteForeignKey(request: carriers.ForeignSystem_DeleteForeignKeyRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    DeleteForeignKey(foreignKey: carriers.ForeignKey, applicationName: string, deviceName: string, deviceIdentifier: string, tableName: string, recordId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetDeviceKeys(request: carriers.ForeignSystem_GetDeviceKeysRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey[]>;
    GetDeviceKeys(applicationName: string, deviceName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey[]>;
    GetApplicationKeys(request: carriers.ForeignSystem_GetApplicationKeysRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey[]>;
    GetApplicationKeys(applicationName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey[]>;
    GetDeviceKeysOnDeviceIdentifier(request: carriers.ForeignSystem_GetDeviceKeysOnDeviceIdentifierRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey[]>;
    GetDeviceKeysOnDeviceIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey[]>;
    GetDeviceKeysOnDeviceIdentifierTable(request: carriers.ForeignSystem_GetDeviceKeysOnDeviceIdentifierTableRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey[]>;
    GetDeviceKeysOnDeviceIdentifierTable(applicationName: string, deviceName: string, deviceIdentifier: string, tableName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey[]>;
    GetDeviceKeysOnDeviceIdentifierTableRecordId(request: carriers.ForeignSystem_GetDeviceKeysOnDeviceIdentifierTableRecordIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey[]>;
    GetDeviceKeysOnDeviceIdentifierTableRecordId(applicationName: string, deviceName: string, deviceIdentifier: string, tableName: string, recordId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey[]>;
}
/**
 * Collection of all services that works with Foreign key data (Key/Value pairs)
 */
export declare class ForeignSystemAgent extends base.WebApiBase implements IForeignSystemAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * Set default values into a new ForeignAppEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultForeignAppEntity(options?: base.WebApiRequestOptions): Promise<carriers.ForeignAppEntity>;
    SaveForeignAppEntity(entity: carriers.ForeignAppEntity, options?: base.WebApiRequestOptions): Promise<carriers.ForeignAppEntity>;
    DeleteForeignAppEntity(ForeignAppEntityId: number, options?: base.WebApiRequestOptions): Promise<void>;
    GetForeignAppEntity(foreignAppEntityId: number, options?: base.WebApiRequestOptions): Promise<carriers.ForeignAppEntity>;
    private _GetAppByName;
    /**
     * Gets the ForeignApp with the given name.
     * @param request - ApplicationName
     * @returns The ForeignApp that matches the name.
     */
    GetAppByName(request: carriers.ForeignSystem_GetAppByNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignAppEntity>;
    /**
     * Gets the ForeignApp with the given name.
     * @param applicationName - The name of the foreign application.
     * @returns The ForeignApp that matches the name.
     */
    GetAppByName(applicationName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignAppEntity>;
    private _GetApplicationDevices;
    /**
     * Gets all devices that belong to a foreign application.
     * @param request - ApplicationName
     * @returns Array of ForeignDevices
     */
    GetApplicationDevices(request: carriers.ForeignSystem_GetApplicationDevicesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignDevice[]>;
    /**
     * Gets all devices that belong to a foreign application.
     * @param applicationName - The foreign application name
     * @returns Array of ForeignDevices
     */
    GetApplicationDevices(applicationName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignDevice[]>;
    private _GetDeviceByName;
    /**
     * Gets a ForeignDevice with deviceName that belongs to the application with applicationName.
     * @param request - ApplicationName, DeviceName
     * @returns The ForeignDevice.
     */
    GetDeviceByName(request: carriers.ForeignSystem_GetDeviceByNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignDevice>;
    /**
     * Gets a ForeignDevice with deviceName that belongs to the application with applicationName.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @returns The ForeignDevice.
     */
    GetDeviceByName(applicationName: string, deviceName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignDevice>;
    private _GetDeviceByIdentifier;
    /**
     * Gets a ForeignDevice with deviceName and deviceIdentifier that belongs to the application with applicationName.
     * @param request - ApplicationName, DeviceName, DeviceIdentifier
     * @returns The ForeignDevice.
     */
    GetDeviceByIdentifier(request: carriers.ForeignSystem_GetDeviceByIdentifierRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignDevice>;
    /**
     * Gets a ForeignDevice with deviceName and deviceIdentifier that belongs to the application with applicationName.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param deviceIdentifier - Optional unique id of device (Palm pilot device ID, version number, etc)
     * @returns The ForeignDevice.
     */
    GetDeviceByIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignDevice>;
    private _AddDeviceByIdentifier;
    /**
     * Adds a new ForeignDevice with deviceName that belongs to the application with applicationName, with an optional device-specific identifier.
     * @param request - ApplicationName, DeviceName, DeviceIdentifier
     * @returns The ForeignDevice.
     */
    AddDeviceByIdentifier(request: carriers.ForeignSystem_AddDeviceByIdentifierRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignDevice>;
    /**
     * Adds a new ForeignDevice with deviceName that belongs to the application with applicationName, with an optional device-specific identifier.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param deviceIdentifier - Unique id of device (Palm pilot device ID, version number, etc)
     * @returns The ForeignDevice.
     */
    AddDeviceByIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignDevice>;
    private _SaveDeviceByIdentifier;
    /**
     * Updates a ForeignDevice with deviceName that belongs to the application with applicationName.
     * @param request - ApplicationName, DeviceName, DeviceIdentifier, ForeignDevice
     * @returns The ForeignDevice.
     */
    SaveDeviceByIdentifier(request: carriers.ForeignSystem_SaveDeviceByIdentifierRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignDevice>;
    /**
     * Updates a ForeignDevice with deviceName that belongs to the application with applicationName.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param deviceIdentifier - Unique id of device (Palm pilot device ID, version number, etc)
     * @param foreignDevice - Foreign device to save. Can be null if adding new device.
     * @returns The ForeignDevice.
     */
    SaveDeviceByIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, foreignDevice: carriers.ForeignDevice, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignDevice>;
    private _DeleteDeviceByIdentifier;
    /**
     * Delete a ForeignDevice with deviceName and deviceIdentifier that belongs to the application with applicationName.
     * @param request - ApplicationName, DeviceName, DeviceIdentifier
     * @returns This method has no return value
     */
    DeleteDeviceByIdentifier(request: carriers.ForeignSystem_DeleteDeviceByIdentifierRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Delete a ForeignDevice with deviceName and deviceIdentifier that belongs to the application with applicationName.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param deviceIdentifier - Unique id of device (Palm pilot device ID, version number, etc)
     * @returns This method has no return value
     */
    DeleteDeviceByIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetKey;
    /**
     * Returning a foreign key by its key name, that belongs to the specified device and application. A table name and record ID can also be specified.
     * @param request - ApplicationName, DeviceName, KeyName, TableName, RecordId
     * @returns The ForeignKey.
     */
    GetKey(request: carriers.ForeignSystem_GetKeyRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey>;
    /**
     * Returning a foreign key by its key name, that belongs to the specified device and application. A table name and record ID can also be specified.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param keyName - The name of the foreign key.
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.<p/>Use an empty string to indicate that your key is not bound to any specific table.
     * @param recordId - Id of record that this key refers to. If the table name was blank, then this parameter must be 0. It can also be 0 to mean that the foreign key record was not bound to any particular record of the target table.
     * @returns The ForeignKey.
     */
    GetKey(applicationName: string, deviceName: string, keyName: string, tableName: string, recordId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey>;
    private _GetKeyValue;
    /**
     * Gets the string value of a ForeignKey, that belongs to the specified device and application. The table name and record ID must also be specified.
     * @param request - ApplicationName, DeviceName, KeyName, TableName, RecordId
     * @returns The ForeignKey value as string.
     */
    GetKeyValue(request: carriers.ForeignSystem_GetKeyValueRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Gets the string value of a ForeignKey, that belongs to the specified device and application. The table name and record ID must also be specified.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param keyName - The name of the foreign key.
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.<p/>Use an empty string to indicate that your key is not bound to any specific table.
     * @param recordId - Id of record that this key refers to. If the table name was blank, then this parameter must be 0. It can also be 0 to mean that the foreign key record was not bound to any particular record of the target table.
     * @returns The ForeignKey value as string.
     */
    GetKeyValue(applicationName: string, deviceName: string, keyName: string, tableName: string, recordId: number, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetKeyOnDeviceIdentifier;
    /**
     * Returning a foreign key by its key name and device identifier, that belongs to the specified device and application. A table name and record ID can also be specified.
     * @param request - ApplicationName, DeviceName, DeviceIdentifier, KeyName, TableName, RecordId
     * @returns The ForeignKey.
     */
    GetKeyOnDeviceIdentifier(request: carriers.ForeignSystem_GetKeyOnDeviceIdentifierRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey>;
    /**
     * Returning a foreign key by its key name and device identifier, that belongs to the specified device and application. A table name and record ID can also be specified.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param deviceIdentifier - The device identifier.
     * @param keyName - The name of the foreign key.
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.<p/>Use an empty string to indicate that your key is not bound to any specific table.
     * @param recordId - Id of record that this key refers to. If the table name was blank, then this parameter must be 0. It can also be 0 to mean that the foreign key record was not bound to any particular record of the target table.
     * @returns The ForeignKey.
     */
    GetKeyOnDeviceIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, keyName: string, tableName: string, recordId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey>;
    private _GetKeyValueOnDeviceIdentifier;
    /**
     * Returning a foreign key string value by its key name and device identifier, that belongs to the specified device and application. A table name and record ID can also be specified.
     * @param request - ApplicationName, DeviceName, DeviceIdentifier, KeyName, TableName, RecordId
     * @returns The ForeignKey's string value.
     */
    GetKeyValueOnDeviceIdentifier(request: carriers.ForeignSystem_GetKeyValueOnDeviceIdentifierRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Returning a foreign key string value by its key name and device identifier, that belongs to the specified device and application. A table name and record ID can also be specified.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param deviceIdentifier - The device identifier.
     * @param keyName - The name of the foreign key.
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.<p/>Use an empty string to indicate that your key is not bound to any specific table.
     * @param recordId - Id of record that this key refers to. If the table name was blank, then this parameter must be 0. It can also be 0 to mean that the foreign key record was not bound to any particular record of the target table.
     * @returns The ForeignKey's string value.
     */
    GetKeyValueOnDeviceIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, keyName: string, tableName: string, recordId: number, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _AddForeignKey;
    /**
     * Add a new key belonging to the ForeignApp and ForeignDevice specified.
     * @param request - ForeignKey, ApplicationName, DeviceName, DeviceIdentifier
     * @returns The new or updated ForeignKey
     */
    AddForeignKey(request: carriers.ForeignSystem_AddForeignKeyRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey>;
    /**
     * Add a new key belonging to the ForeignApp and ForeignDevice specified.
     * @param foreignKey - Foreign key to save
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param deviceIdentifier - The device identifier. Optional if device identifier is not used.
     * @returns The new or updated ForeignKey
     */
    AddForeignKey(foreignKey: carriers.ForeignKey, applicationName: string, deviceName: string, deviceIdentifier: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey>;
    private _SaveForeignKey;
    /**
     * Saves a key belonging to the ForeignApp and ForeignDevice specified.
     * @param request - ForeignKey, ApplicationName, DeviceName, DeviceIdentifier
     * @returns The new or updated ForeignKey
     */
    SaveForeignKey(request: carriers.ForeignSystem_SaveForeignKeyRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey>;
    /**
     * Saves a key belonging to the ForeignApp and ForeignDevice specified.
     * @param foreignKey - Foreign key to save
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param deviceIdentifier - The device identifier. Optional if device identifier is not used.
     * @returns The new or updated ForeignKey
     */
    SaveForeignKey(foreignKey: carriers.ForeignKey, applicationName: string, deviceName: string, deviceIdentifier: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey>;
    private _DeleteForeignKeyOnName;
    /**
     * Deletes all specified occurrences of a key, belonging to the ForeignApp and ForeignDevice, table and record specified. Specifying a blank table name will delete ALL keys of the given name; specifying a recordId of 0 will delete ALL keys of the given name for the given table.
     * @param request - ApplicationName, DeviceName, DeviceIdentifier, KeyName, TableName, RecordId
     * @returns This method has no return value
     */
    DeleteForeignKeyOnName(request: carriers.ForeignSystem_DeleteForeignKeyOnNameRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Deletes all specified occurrences of a key, belonging to the ForeignApp and ForeignDevice, table and record specified. Specifying a blank table name will delete ALL keys of the given name; specifying a recordId of 0 will delete ALL keys of the given name for the given table.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param deviceIdentifier - The device identifier. Optional if device identifier is not used.
     * @param keyName - The name of the foreign key to delete.
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.<p/>Use an empty string to delete ALL keys that otherwise match; this may be dangerous and can take a long time if there are many items to delete.
     * @param recordId - Id of record that this key refers to. If the table name was blank, then this parameter must be 0. It can also be 0 to mean that the foreign key record was not bound to any particular record of the target table.<p/>Specifying a zero recordId will remove the recordId restriction and delete all keys that otherwise match.
     * @returns This method has no return value
     */
    DeleteForeignKeyOnName(applicationName: string, deviceName: string, deviceIdentifier: string, keyName: string, tableName: string, recordId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetKeyByValue;
    /**
     * Get a foreignkey based on its name and value, that belongs to the specified device and application.
     * @param request - ApplicationName, DeviceName, KeyName, KeyValue, TableName
     * @returns The ForeignKey.
     */
    GetKeyByValue(request: carriers.ForeignSystem_GetKeyByValueRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey>;
    /**
     * Get a foreignkey based on its name and value, that belongs to the specified device and application.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param keyName - The name of the foreign key.
     * @param keyValue - Foreignkey value
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.<p/>Use an empty string to indicate that your key is not bound to any specific table.
     * @returns The ForeignKey.
     */
    GetKeyByValue(applicationName: string, deviceName: string, keyName: string, keyValue: string, tableName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey>;
    private _GetKeyByValueAndIdentifier;
    /**
     * Get a foreignkey based on its name and value, that belongs to the specified deviceId, device, and application.
     * @param request - ApplicationName, DeviceName, DeviceIdentifier, KeyName, KeyValue, TableName
     * @returns The ForeignKey.
     */
    GetKeyByValueAndIdentifier(request: carriers.ForeignSystem_GetKeyByValueAndIdentifierRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey>;
    /**
     * Get a foreignkey based on its name and value, that belongs to the specified deviceId, device, and application.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param deviceIdentifier - The device identifier. Optional if device identifier is not used.
     * @param keyName - The name of the foreign key.
     * @param keyValue - Foreignkey value
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.<p/>Use an empty string to indicate that your key is not bound to any specific table.
     * @returns The ForeignKey.
     */
    GetKeyByValueAndIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, keyName: string, keyValue: string, tableName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey>;
    private _GetAllForeignKeysOnEntity;
    /**
     * Get a list of foreignkeys (&apos;app.device.key&apos;) and their values (&apos;123&apos;) that belong to the specified entity.
     * @param request - EntityType, EntityId
     * @returns Dictionary of 'appname.deviceid.keyname' = '123' key values
     */
    GetAllForeignKeysOnEntity(request: carriers.ForeignSystem_GetAllForeignKeysOnEntityRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    /**
     * Get a list of foreignkeys (&apos;app.device.key&apos;) and their values (&apos;123&apos;) that belong to the specified entity.
     * @param entityType - Entity type (table name): 'contact', 'project' etc.
     * @param entityId - Primary key of Entity
     * @returns Dictionary of 'appname.deviceid.keyname' = '123' key values
     */
    GetAllForeignKeysOnEntity(entityType: string, entityId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.StringDictionary>;
    GetForeignDevice(foreignDeviceId: number, options?: base.WebApiRequestOptions): Promise<carriers.ForeignDevice>;
    private _SaveForeignDevice;
    /**
     * Saves a foreign device for an foreign application
     * @param request - ForeignDevice, ApplicationName
     * @returns Returns the saved foreign device
     */
    SaveForeignDevice(request: carriers.ForeignSystem_SaveForeignDeviceRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignDevice>;
    /**
     * Saves a foreign device for an foreign application
     * @param foreignDevice - Foreign device to save
     * @param applicationName - The name of the foreign application.
     * @returns Returns the saved foreign device
     */
    SaveForeignDevice(foreignDevice: carriers.ForeignDevice, applicationName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignDevice>;
    private _DeleteForeignDevice;
    /**
     * Deletes a foreign device from an application
     * @param request - ForeignDevice, ApplicationName
     * @returns
     */
    DeleteForeignDevice(request: carriers.ForeignSystem_DeleteForeignDeviceRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Deletes a foreign device from an application
     * @param foreignDevice - foreign device to delete
     * @param applicationName - Name of application to delete from
     * @returns
     */
    DeleteForeignDevice(foreignDevice: carriers.ForeignDevice, applicationName: string, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _DeleteForeignKey;
    /**
     * Deletes all specified occurrences of a key, belonging to the ForeignApp and ForeignDevice, table and record specified. Specifying a blank table name will delete ALL keys of the given name; specifying a recordId of 0 will delete ALL keys of the given name for the given table.
     * @param request - ForeignKey, ApplicationName, DeviceName, DeviceIdentifier, TableName, RecordId
     * @returns This method has no return value
     */
    DeleteForeignKey(request: carriers.ForeignSystem_DeleteForeignKeyRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Deletes all specified occurrences of a key, belonging to the ForeignApp and ForeignDevice, table and record specified. Specifying a blank table name will delete ALL keys of the given name; specifying a recordId of 0 will delete ALL keys of the given name for the given table.
     * @param foreignKey - Key name to delete.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param deviceIdentifier - The device identifier. Optional if device identifier is not used.
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.<p/>Use an empty string to delete ALL keys that otherwise match; this may be dangerous and can take a long time if there are many items to delete.
     * @param recordId - Id of record that this key refers to. If the table name was blank, then this parameter must be 0. It can also be 0 to mean that the foreign key record was not bound to any particular record of the target table.<p/>Specifying a zero recordId will remove the recordId restriction and delete all keys that otherwise match.
     * @returns This method has no return value
     */
    DeleteForeignKey(foreignKey: carriers.ForeignKey, applicationName: string, deviceName: string, deviceIdentifier: string, tableName: string, recordId: number, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetDeviceKeys;
    /**
     * Returns all ForeignKeys that belong to a device.
     * @param request - ApplicationName, DeviceName
     * @returns Array of all ForeignKeys in the ForeignDevice.
     */
    GetDeviceKeys(request: carriers.ForeignSystem_GetDeviceKeysRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey[]>;
    /**
     * Returns all ForeignKeys that belong to a device.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @returns Array of all ForeignKeys in the ForeignDevice.
     */
    GetDeviceKeys(applicationName: string, deviceName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey[]>;
    private _GetApplicationKeys;
    /**
     * Returns all ForeignKeys that belong to an application.
     * @param request - ApplicationName
     * @returns Array of all ForeignKeys in the ForeignApp.
     */
    GetApplicationKeys(request: carriers.ForeignSystem_GetApplicationKeysRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey[]>;
    /**
     * Returns all ForeignKeys that belong to an application.
     * @param applicationName - The name of the foreign application.
     * @returns Array of all ForeignKeys in the ForeignApp.
     */
    GetApplicationKeys(applicationName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey[]>;
    private _GetDeviceKeysOnDeviceIdentifier;
    /**
     * Returns all ForeignKeys that belong to a device with a given deviceIdentifier.
     * @param request - ApplicationName, DeviceName, DeviceIdentifier
     * @returns Array of all ForeignKeys in the ForeignDevice that belong to the DeviceIdentifier.
     */
    GetDeviceKeysOnDeviceIdentifier(request: carriers.ForeignSystem_GetDeviceKeysOnDeviceIdentifierRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey[]>;
    /**
     * Returns all ForeignKeys that belong to a device with a given deviceIdentifier.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param deviceIdentifier - Identifier for a unique grouping of keys within a device.
     * @returns Array of all ForeignKeys in the ForeignDevice that belong to the DeviceIdentifier.
     */
    GetDeviceKeysOnDeviceIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey[]>;
    private _GetDeviceKeysOnDeviceIdentifierTable;
    /**
     * Returns all ForeignKeys that belong to a device with a given deviceIdentifier and table name.
     * @param request - ApplicationName, DeviceName, DeviceIdentifier, TableName
     * @returns Array of all ForeignKeys in the ForeignDevice that belong to the DeviceIdentifier.
     */
    GetDeviceKeysOnDeviceIdentifierTable(request: carriers.ForeignSystem_GetDeviceKeysOnDeviceIdentifierTableRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey[]>;
    /**
     * Returns all ForeignKeys that belong to a device with a given deviceIdentifier and table name.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param deviceIdentifier - Identifier for a unique grouping of keys within a device.
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.<p/>Use an empty string to indicate that your key is not bound to any specific table.
     * @returns Array of all ForeignKeys in the ForeignDevice that belong to the DeviceIdentifier.
     */
    GetDeviceKeysOnDeviceIdentifierTable(applicationName: string, deviceName: string, deviceIdentifier: string, tableName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey[]>;
    private _GetDeviceKeysOnDeviceIdentifierTableRecordId;
    /**
     * Returns all ForeignKeys that belong to a device with a given deviceIdentifier and table name, as well as record id.
     * @param request - ApplicationName, DeviceName, DeviceIdentifier, TableName, RecordId
     * @returns Array of all ForeignKeys in the ForeignDevice that match the criteria
     */
    GetDeviceKeysOnDeviceIdentifierTableRecordId(request: carriers.ForeignSystem_GetDeviceKeysOnDeviceIdentifierTableRecordIdRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey[]>;
    /**
     * Returns all ForeignKeys that belong to a device with a given deviceIdentifier and table name, as well as record id.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param deviceIdentifier - Identifier for a unique grouping of keys within a device.
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.<p/>Use an empty string to indicate that your key is not bound to any specific table.
     * @param recordId - Id of record that this key refers to. If the table name was blank, then this parameter must be 0. It can also be 0 to mean that the foreign key record was not bound to any particular record of the target table.
     * @returns Array of all ForeignKeys in the ForeignDevice that match the criteria
     */
    GetDeviceKeysOnDeviceIdentifierTableRecordId(applicationName: string, deviceName: string, deviceIdentifier: string, tableName: string, recordId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ForeignKey[]>;
}
//# sourceMappingURL=ForeignSystemAgent.d.ts.map