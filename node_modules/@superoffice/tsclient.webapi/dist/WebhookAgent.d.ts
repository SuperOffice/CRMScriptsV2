import { AxiosRequestConfig } from 'axios';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * Webhook definitions - webhooks signal other systems about events inside NetServer
 *
 * **Online Restricted:** This agent is not available in Online by default. Access must be requested specifically when app is registered.
 */
export interface IWebhookAgent {
    CreateDefaultWebhook(): Promise<carriers.Webhook>;
    SaveWebhook(entity: carriers.Webhook): Promise<carriers.Webhook>;
    DeleteWebhook(WebhookId: number): Promise<void>;
    GetWebhook(webhookId: number): Promise<carriers.Webhook>;
    GetAllWebhooks(request: carriers.Webhook_GetAllWebhooksRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Webhook[]>;
    GetAllWebhooks(nameFilter: string, eventFilter: string, statusFilter: enums.WebhookState, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Webhook[]>;
    TestWebhook(request: carriers.Webhook_TestWebhookRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WebhookResult>;
    TestWebhook(webhook: carriers.Webhook, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WebhookResult>;
    SignalEvent(request: carriers.Webhook_SignalEventRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    SignalEvent(eventName: string, primaryKey: number, data: carriers.StringObjectDictionary, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    GetLastError(request: carriers.Webhook_GetLastErrorRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetLastError(webhookId: number, webapi_options?: base.WebApiRequestOptions): Promise<string>;
}
/**
 * Webhook definitions - webhooks signal other systems about events inside NetServer
 */
export declare class WebhookAgent extends base.WebApiBase implements IWebhookAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * Set default values into a new Webhook.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    CreateDefaultWebhook(options?: base.WebApiRequestOptions): Promise<carriers.Webhook>;
    SaveWebhook(entity: carriers.Webhook, options?: base.WebApiRequestOptions): Promise<carriers.Webhook>;
    DeleteWebhook(WebhookId: number, options?: base.WebApiRequestOptions): Promise<void>;
    GetWebhook(webhookId: number, options?: base.WebApiRequestOptions): Promise<carriers.Webhook>;
    private _GetAllWebhooks;
    /**
     * Returns all webhooks, according to filter criteria
     * @param request - NameFilter, EventFilter, StatusFilter
     * @returns Array of all webhooks, filtered according to given criteria.
     */
    GetAllWebhooks(request: carriers.Webhook_GetAllWebhooksRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Webhook[]>;
    /**
     * Returns all webhooks, according to filter criteria
     * @param nameFilter - Only return hooks with this name. Default NULL = no filter
     * @param eventFilter - Only return hooks responding to this event name. Default NULL = no filter
     * @param statusFilter - Only return hooks with this status. Default Unknown = no filter, returns all.
     * @returns Array of all webhooks, filtered according to given criteria.
     */
    GetAllWebhooks(nameFilter: string, eventFilter: string, statusFilter: enums.WebhookState, webapi_options?: base.WebApiRequestOptions): Promise<carriers.Webhook[]>;
    private _TestWebhook;
    /**
     * Pings a webhook with a &apos;test&apos; event, returns SUCCESS(true) or FAILURE(false) + the response from the webhook target.
     * @param request - Webhook
     * @returns Result of calling webhook. Sucess=true/false + Error message
     */
    TestWebhook(request: carriers.Webhook_TestWebhookRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WebhookResult>;
    /**
     * Pings a webhook with a &apos;test&apos; event, returns SUCCESS(true) or FAILURE(false) + the response from the webhook target.
     * @param webhook - Webhook definition to ping. Must contain a valid TargetUrl.
     * @returns Result of calling webhook. Sucess=true/false + Error message
     */
    TestWebhook(webhook: carriers.Webhook, webapi_options?: base.WebApiRequestOptions): Promise<carriers.WebhookResult>;
    private _SignalEvent;
    /**
     * Signal webhooks that an event has occurred. All webhooks listening for the event will be notified.
     * @param request - EventName, PrimaryKey, Data
     * @returns This method has no return value
     */
    SignalEvent(request: carriers.Webhook_SignalEventRequest, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    /**
     * Signal webhooks that an event has occurred. All webhooks listening for the event will be notified.
     * @param eventName - Name of event to fire. 'entity.verb' For example: 'window.closed', 'button.clicked'.
     * @param primaryKey - (Optional) Id of entity that is firing event. Can be 0 if not used.
     * @param data - Event data. Not all the data values may be posted to the webhook, depending in webhook type: { 'windowName': 'foo', 'widgets': 123 }
     * @returns This method has no return value
     */
    SignalEvent(eventName: string, primaryKey: number, data: carriers.StringObjectDictionary, webapi_options?: base.WebApiRequestOptions): Promise<void>;
    private _GetLastError;
    /**
     * Return the most recent error message received when calling this webhook.
     * @param request - WebhookId
     * @returns Error message, or empty string if no errors received
     */
    GetLastError(request: carriers.Webhook_GetLastErrorRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Return the most recent error message received when calling this webhook.
     * @param webhookId - Webhook to get error message for.
     * @returns Error message, or empty string if no errors received
     */
    GetLastError(webhookId: number, webapi_options?: base.WebApiRequestOptions): Promise<string>;
}
//# sourceMappingURL=WebhookAgent.d.ts.map