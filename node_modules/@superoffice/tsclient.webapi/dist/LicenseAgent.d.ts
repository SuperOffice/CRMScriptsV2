import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 * License query, download, activation
 */
export interface ILicenseAgent {
    GetLicenseForAllOwnersFromDB(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ExtendedLicenseInfo[]>;
    GetLicenseFromLicenseServer(request: carriers.License_GetLicenseFromLicenseServerRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ExtendedLicenseInfo>;
    GetLicenseFromLicenseServer(ownerName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ExtendedLicenseInfo>;
    GetModuleLicenseHistoryFromLicenseServer(request: carriers.License_GetModuleLicenseHistoryFromLicenseServerRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetModuleLicenseHistoryFromLicenseServer(licenseInfo: carriers.ExtendedLicenseInfo, moduleLicense: carriers.ExtendedModuleLicense, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    ValidateLicenseInfo(request: carriers.License_ValidateLicenseInfoRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LicenseResult>;
    ValidateLicenseInfo(licenseInfo: carriers.ExtendedLicenseInfo, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LicenseResult>;
    ActivateLicenseInfo(request: carriers.License_ActivateLicenseInfoRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LicenseResult>;
    ActivateLicenseInfo(newLicense: carriers.ExtendedLicenseInfo, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LicenseResult>;
    GetLicenseStatusFromLicenseServer(request: carriers.License_GetLicenseStatusFromLicenseServerRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CheckLicenseStatusResult>;
    GetLicenseStatusFromLicenseServer(ownerName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CheckLicenseStatusResult>;
    GetLicenseFromDB(request: carriers.License_GetLicenseFromDBRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ExtendedLicenseInfo>;
    GetLicenseFromDB(ownerName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ExtendedLicenseInfo>;
    ChangeSerialNumber(request: carriers.License_ChangeSerialNumberRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LicenseResult>;
    ChangeSerialNumber(newCompanyName: string, newSerialNumber: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LicenseResult>;
    GetUserLicenses(request: carriers.License_GetUserLicensesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LicenseOwner[]>;
    GetUserLicenses(associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LicenseOwner[]>;
    GetSatelliteLicenses(request: carriers.License_GetSatelliteLicensesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LicenseOwner[]>;
    GetSatelliteLicenses(satelliteId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LicenseOwner[]>;
    RemoveLicenseFromDB(request: carriers.License_RemoveLicenseFromDBRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LicenseResult>;
    RemoveLicenseFromDB(moduleOwner: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LicenseResult>;
    GetLicenseFromFile(request: carriers.License_GetLicenseFromFileRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ExtendedLicenseInfo>;
    GetLicenseFromFile(fileContent: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ExtendedLicenseInfo>;
    GetShopUrl(request: carriers.License_GetShopUrlRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetShopUrl(ownerName: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    GetUserLicensesMDOList(webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    GetModuleLicenseFromDB(request: carriers.License_GetModuleLicenseFromDBRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ModuleLicense>;
    GetModuleLicenseFromDB(ownerName: string, moduleName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ModuleLicense>;
    AddLicenseFromFile(request: carriers.License_AddLicenseFromFileRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ExtendedLicenseInfo>;
    AddLicenseFromFile(fileContent: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ExtendedLicenseInfo>;
    GetThirdPartyLicenseAssignments(request: carriers.License_GetThirdPartyLicenseAssignmentsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ModuleLicenseLink[]>;
    GetThirdPartyLicenseAssignments(associateId: number, moduleOwner: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ModuleLicenseLink[]>;
    AssignThirdPartyLicenses(request: carriers.License_AssignThirdPartyLicensesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ModuleLicenseLink[]>;
    AssignThirdPartyLicenses(associateId: number, moduleOwner: string, moduleLicenseNames: string[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.ModuleLicenseLink[]>;
    UnassignThirdPartyLicenses(request: carriers.License_UnassignThirdPartyLicensesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ModuleLicenseLink[]>;
    UnassignThirdPartyLicenses(associateId: number, moduleOwner: string, moduleLicenseNames: string[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.ModuleLicenseLink[]>;
}
/**
 * License query, download, activation
 */
export declare class LicenseAgent extends base.WebApiBase implements ILicenseAgent {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    private _GetLicenseForAllOwnersFromDB;
    /**
     * Get all licenses, with usage, from all module owners as they are stored in the database
     * @returns
     */
    GetLicenseForAllOwnersFromDB(webapi_options?: base.WebApiRequestOptions): Promise<carriers.ExtendedLicenseInfo[]>;
    private _GetLicenseFromLicenseServer;
    /**
     *
     * @param request - OwnerName
     * @returns
     */
    GetLicenseFromLicenseServer(request: carriers.License_GetLicenseFromLicenseServerRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ExtendedLicenseInfo>;
    /**
     *
     * @param ownerName -
     * @returns
     */
    GetLicenseFromLicenseServer(ownerName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ExtendedLicenseInfo>;
    private _GetModuleLicenseHistoryFromLicenseServer;
    /**
     * Get details about a license from the license server.
     * @param request - LicenseInfo, ModuleLicense
     * @returns Information about a particular license module.
     */
    GetModuleLicenseHistoryFromLicenseServer(request: carriers.License_GetModuleLicenseHistoryFromLicenseServerRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Get details about a license from the license server.
     * @param licenseInfo - Description of the license
     * @param moduleLicense - Information about a particular module to get information for.
     * @returns Information about a particular license module.
     */
    GetModuleLicenseHistoryFromLicenseServer(licenseInfo: carriers.ExtendedLicenseInfo, moduleLicense: carriers.ExtendedModuleLicense, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _ValidateLicenseInfo;
    /**
     * Validate that a license is consistant.
     * @param request - LicenseInfo
     * @returns
     */
    ValidateLicenseInfo(request: carriers.License_ValidateLicenseInfoRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LicenseResult>;
    /**
     * Validate that a license is consistant.
     * @param licenseInfo - License to validate consistancy for
     * @returns
     */
    ValidateLicenseInfo(licenseInfo: carriers.ExtendedLicenseInfo, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LicenseResult>;
    private _ActivateLicenseInfo;
    /**
     * Save a new license to the database.
     * @param request - NewLicense
     * @returns
     */
    ActivateLicenseInfo(request: carriers.License_ActivateLicenseInfoRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LicenseResult>;
    /**
     * Save a new license to the database.
     * @param newLicense - New license to save to the database.
     * @returns
     */
    ActivateLicenseInfo(newLicense: carriers.ExtendedLicenseInfo, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LicenseResult>;
    private _GetLicenseStatusFromLicenseServer;
    /**
     * Get License from the license server for a particular module owner.
     * @param request - OwnerName
     * @returns License from the database, from the license server and with usage.
     */
    GetLicenseStatusFromLicenseServer(request: carriers.License_GetLicenseStatusFromLicenseServerRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CheckLicenseStatusResult>;
    /**
     * Get License from the license server for a particular module owner.
     * @param ownerName - Name of the module owner to get license from.
     * @returns License from the database, from the license server and with usage.
     */
    GetLicenseStatusFromLicenseServer(ownerName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.CheckLicenseStatusResult>;
    private _GetLicenseFromDB;
    /**
     * Get license, with usage, as it is stored in the database for one particular module owner.
     * @param request - OwnerName
     * @returns License, with usage, as it is stored in the database.
     */
    GetLicenseFromDB(request: carriers.License_GetLicenseFromDBRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ExtendedLicenseInfo>;
    /**
     * Get license, with usage, as it is stored in the database for one particular module owner.
     * @param ownerName - Name of the module owner.
     * @returns License, with usage, as it is stored in the database.
     */
    GetLicenseFromDB(ownerName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ExtendedLicenseInfo>;
    private _ChangeSerialNumber;
    /**
     * Change the new serial number for the installation. Requests a new license from SuperLicense, checks if change is authorized.
     * @param request - NewCompanyName, NewSerialNumber
     * @returns License after serial number/name change
     */
    ChangeSerialNumber(request: carriers.License_ChangeSerialNumberRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LicenseResult>;
    /**
     * Change the new serial number for the installation. Requests a new license from SuperLicense, checks if change is authorized.
     * @param newCompanyName - The new company name
     * @param newSerialNumber - New serial number to change to.
     * @returns License after serial number/name change
     */
    ChangeSerialNumber(newCompanyName: string, newSerialNumber: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LicenseResult>;
    private _GetUserLicenses;
    /**
     * Obtain information about associate module licenses
     * @param request - AssociateId
     * @returns Associate module licenses grouped by owners.
     */
    GetUserLicenses(request: carriers.License_GetUserLicensesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LicenseOwner[]>;
    /**
     * Obtain information about associate module licenses
     * @param associateId - Associate id to check for associate module licenses
     * @returns Associate module licenses grouped by owners.
     */
    GetUserLicenses(associateId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LicenseOwner[]>;
    private _GetSatelliteLicenses;
    /**
     * Obtain information about satellite module licenses
     * @param request - SatelliteId
     * @returns Satellite module licenses grouped by owners.
     */
    GetSatelliteLicenses(request: carriers.License_GetSatelliteLicensesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LicenseOwner[]>;
    /**
     * Obtain information about satellite module licenses
     * @param satelliteId - Satellite id to check for satellite module licenses
     * @returns Satellite module licenses grouped by owners.
     */
    GetSatelliteLicenses(satelliteId: number, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LicenseOwner[]>;
    private _RemoveLicenseFromDB;
    /**
     * Remove the license from a particular module owner from the database.  It is not permitted to remove licenses from SuperOffice
     * @param request - ModuleOwner
     * @returns
     */
    RemoveLicenseFromDB(request: carriers.License_RemoveLicenseFromDBRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LicenseResult>;
    /**
     * Remove the license from a particular module owner from the database.  It is not permitted to remove licenses from SuperOffice
     * @param moduleOwner - Name of the module owner to remove license from.
     * @returns
     */
    RemoveLicenseFromDB(moduleOwner: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.LicenseResult>;
    private _GetLicenseFromFile;
    /**
     * Load a new license from file
     * @param request - FileContent
     * @returns
     */
    GetLicenseFromFile(request: carriers.License_GetLicenseFromFileRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ExtendedLicenseInfo>;
    /**
     * Load a new license from file
     * @param fileContent - Content of the license file as read.
     * @returns
     */
    GetLicenseFromFile(fileContent: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ExtendedLicenseInfo>;
    private _GetShopUrl;
    /**
     * Get the shop URL for the specified module owner. This can be used to redirect user to the web shop.
     * @param request - OwnerName
     * @returns The URL which contains the shop for the specified module owner.
     */
    GetShopUrl(request: carriers.License_GetShopUrlRequest, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    /**
     * Get the shop URL for the specified module owner. This can be used to redirect user to the web shop.
     * @param ownerName - Name of the module owner.
     * @returns The URL which contains the shop for the specified module owner.
     */
    GetShopUrl(ownerName: string, webapi_options?: base.WebApiRequestOptions): Promise<string>;
    private _GetUserLicensesMDOList;
    /**
     * Get all licenses in a MDOListItem structure.
     * @returns Hierarchical structure of user licenses.
     */
    GetUserLicensesMDOList(webapi_options?: base.WebApiRequestOptions): Promise<carriers.SelectableMDOListItem[]>;
    private _GetModuleLicenseFromDB;
    /**
     * Get license information for one particular license module.
     * @param request - OwnerName, ModuleName
     * @returns Module License details, as it is stored in the database. NULL if not found.
     */
    GetModuleLicenseFromDB(request: carriers.License_GetModuleLicenseFromDBRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ModuleLicense>;
    /**
     * Get license information for one particular license module.
     * @param ownerName - Name of the module owner.
     * @param moduleName - Name of the license module.
     * @returns Module License details, as it is stored in the database. NULL if not found.
     */
    GetModuleLicenseFromDB(ownerName: string, moduleName: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ModuleLicense>;
    private _AddLicenseFromFile;
    /**
     * Load and activate a new license from file/string if the new license is valid.
     * @param request - FileContent
     * @returns Activated license
     */
    AddLicenseFromFile(request: carriers.License_AddLicenseFromFileRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ExtendedLicenseInfo>;
    /**
     * Load and activate a new license from file/string if the new license is valid.
     * @param fileContent - Content of the license file as XML.
     * @returns Activated license
     */
    AddLicenseFromFile(fileContent: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ExtendedLicenseInfo>;
    private _GetThirdPartyLicenseAssignments;
    /**
     * Get license assignments for an associate for licenses belonging to an other module owner than SuperOffice
     * @param request - AssociateId, ModuleOwner
     * @returns Module license names
     */
    GetThirdPartyLicenseAssignments(request: carriers.License_GetThirdPartyLicenseAssignmentsRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ModuleLicenseLink[]>;
    /**
     * Get license assignments for an associate for licenses belonging to an other module owner than SuperOffice
     * @param associateId - User to get third party license assignments for
     * @param moduleOwner - Name of the module owner to get license assignments for
     * @returns Module license names
     */
    GetThirdPartyLicenseAssignments(associateId: number, moduleOwner: string, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ModuleLicenseLink[]>;
    private _AssignThirdPartyLicenses;
    /**
     * Assign third party licenses
     * @param request - AssociateId, ModuleOwner, ModuleLicenseNames
     * @returns All module license names assigned
     */
    AssignThirdPartyLicenses(request: carriers.License_AssignThirdPartyLicensesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ModuleLicenseLink[]>;
    /**
     * Assign third party licenses
     * @param associateId - User to assign third party licenses for
     * @param moduleOwner - Name of the module owner to assign license for
     * @param moduleLicenseNames - Name of module licenses to assign
     * @returns All module license names assigned
     */
    AssignThirdPartyLicenses(associateId: number, moduleOwner: string, moduleLicenseNames: string[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.ModuleLicenseLink[]>;
    private _UnassignThirdPartyLicenses;
    /**
     * Unassign (remove) third party licenses
     * @param request - AssociateId, ModuleOwner, ModuleLicenseNames
     * @returns All module license names assigned
     */
    UnassignThirdPartyLicenses(request: carriers.License_UnassignThirdPartyLicensesRequest, webapi_options?: base.WebApiRequestOptions): Promise<carriers.ModuleLicenseLink[]>;
    /**
     * Unassign (remove) third party licenses
     * @param associateId - User to unassign third party licenses for
     * @param moduleOwner - Name of the module owner to unassign license for
     * @param moduleLicenseNames - Name of module licenses to unassign (remove)
     * @returns All module license names assigned
     */
    UnassignThirdPartyLicenses(associateId: number, moduleOwner: string, moduleLicenseNames: string[], webapi_options?: base.WebApiRequestOptions): Promise<carriers.ModuleLicenseLink[]>;
}
//# sourceMappingURL=LicenseAgent.d.ts.map