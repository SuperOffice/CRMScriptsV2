import { AxiosRequestConfig } from 'axios';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
/**
 *
 * Selections, entities, members and tasks
 *
 * `api/v1/Selection`
 */
export interface ISelectionRestApi {
    GetDefault(options?: base.WebApiGetRequestOptions): Promise<carriers.SelectionEntity>;
    Post(entity: carriers.SelectionEntity, options?: base.WebApiPutRequestOptions): Promise<carriers.SelectionEntity>;
    PutById(id: number, entity: carriers.SelectionEntity, options?: base.WebApiPutRequestOptions): Promise<carriers.SelectionEntity>;
    PatchById(id: number, entity: base.WebApiPatchOperation[] | carriers.SelectionEntity, options?: base.WebApiPutRequestOptions): Promise<carriers.SelectionEntity>;
    DeleteById(SelectionEntityId: number, options?: base.WebApiPutRequestOptions): Promise<void>;
    GetById(SelectionEntityId: number, options?: base.WebApiGetRequestOptions): Promise<carriers.SelectionEntity>;
}
/**
 *
 * Selections, entities, members and tasks
 *
 * `api/v1/Selection`
 */
export declare class SelectionRestApi extends base.WebApiBase implements ISelectionRestApi {
    constructor(baseUrl?: string, languageCode?: string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceManager: any);
    constructor(baseUrl: string, config: AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config: AxiosRequestConfig, languageCode?: string, cultureCode?: string);
    constructor(options: base.WebApiOptions);
    /**
     * `GET /api/v1/Selection/default`
     * Set default values into a new SelectionEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    GetDefault(options?: base.WebApiGetRequestOptions): Promise<carriers.SelectionEntity>;
    Post(newSelection: carriers.SelectionEntity, options?: base.WebApiPutRequestOptions): Promise<carriers.SelectionEntity>;
    PutById(id: number, selection: carriers.SelectionEntity, options?: base.WebApiPutRequestOptions): Promise<carriers.SelectionEntity>;
    PatchById(id: number, selection: base.WebApiPatchOperation[] | carriers.SelectionEntity, options?: base.WebApiPutRequestOptions): Promise<carriers.SelectionEntity>;
    DeleteById(selectionId: number, options?: base.WebApiPutRequestOptions): Promise<void>;
    GetById(selectionId: number, options?: base.WebApiGetRequestOptions): Promise<carriers.SelectionEntity>;
}
//# sourceMappingURL=SelectionRestApi.d.ts.map