"use strict";
// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarketingAgent = void 0;
const tslib_1 = require("tslib");
const base = tslib_1.__importStar(require("./WebApiBase"));
const converters = tslib_1.__importStar(require("./Converters"));
/**
 * Agent used for Marketing functions, such as Forms
 */
class MarketingAgent extends base.WebApiBase {
    constructor(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Marketing/";
        super(options);
    }
    /**
     * Set default values into a new FormEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    async CreateDefaultFormEntity(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultFormEntity", null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_FormEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing FormEntity or creates a new FormEntity if the id parameter is empty
     * @param entity - The FormEntity to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated FormEntity
     */
    async SaveFormEntity(entity, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveFormEntity", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_FormEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Deletes the FormEntity
     * @param FormEntityId - The id of the FormEntity to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    async DeleteFormEntity(FormEntityId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteFormEntity?FormEntityId=" + FormEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Set default values into a new FormSubmissionEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    async CreateDefaultFormSubmissionEntity(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultFormSubmissionEntity", null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_FormSubmissionEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing FormSubmissionEntity or creates a new FormSubmissionEntity if the id parameter is empty
     * @param entity - The FormSubmissionEntity to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated FormSubmissionEntity
     */
    async SaveFormSubmissionEntity(entity, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveFormSubmissionEntity", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_FormSubmissionEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Deletes the FormSubmissionEntity
     * @param FormSubmissionEntityId - The id of the FormSubmissionEntity to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    async DeleteFormSubmissionEntity(FormSubmissionEntityId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteFormSubmissionEntity?FormSubmissionEntityId=" + FormSubmissionEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Set default values into a new ShipmentMessageBlockEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    async CreateDefaultShipmentMessageBlockEntity(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultShipmentMessageBlockEntity", null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ShipmentMessageBlockEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing ShipmentMessageBlockEntity or creates a new ShipmentMessageBlockEntity if the id parameter is empty
     * @param entity - The ShipmentMessageBlockEntity to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated ShipmentMessageBlockEntity
     */
    async SaveShipmentMessageBlockEntity(entity, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveShipmentMessageBlockEntity", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ShipmentMessageBlockEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Deletes the ShipmentMessageBlockEntity
     * @param ShipmentMessageBlockEntityId - The id of the ShipmentMessageBlockEntity to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    async DeleteShipmentMessageBlockEntity(ShipmentMessageBlockEntityId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteShipmentMessageBlockEntity?ShipmentMessageBlockEntityId=" + ShipmentMessageBlockEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /**
     * Set default values into a new ShipmentMessageEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    async CreateDefaultShipmentMessageEntity(options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultShipmentMessageEntity", null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ShipmentMessageEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing ShipmentMessageEntity or creates a new ShipmentMessageEntity if the id parameter is empty
     * @param entity - The ShipmentMessageEntity to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated ShipmentMessageEntity
     */
    async SaveShipmentMessageEntity(entity, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveShipmentMessageEntity", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ShipmentMessageEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Deletes the ShipmentMessageEntity
     * @param ShipmentMessageEntityId - The id of the ShipmentMessageEntity to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    async DeleteShipmentMessageEntity(ShipmentMessageEntityId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteShipmentMessageEntity?ShipmentMessageEntityId=" + ShipmentMessageEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Gets a FormEntity object.
     * @param formEntityId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single FormEntity
     */
    async GetFormEntity(formEntityId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetFormEntity?formEntityId=" + formEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_FormEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async _VerifyGoogleRecaptcha(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("VerifyGoogleRecaptcha", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async VerifyGoogleRecaptcha(token, optionalSecretKey, webapi_options) {
        let _request = null;
        let _options = null;
        const first = token;
        if (typeof (first) === "object" && first && (typeof (first.Token) != 'undefined' || typeof (first.OptionalSecretKey) != 'undefined')) {
            _request = token;
            _options = optionalSecretKey;
        }
        else {
            _request = {
                Token: token,
                OptionalSecretKey: optionalSecretKey,
            };
            _options = webapi_options;
        }
        return this._VerifyGoogleRecaptcha(_request, _options);
    }
    /*
     * Gets a FormSubmissionEntity object.
     * @param formSubmissionEntityId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single FormSubmissionEntity
     */
    async GetFormSubmissionEntity(formSubmissionEntityId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetFormSubmissionEntity?formSubmissionEntityId=" + formSubmissionEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_FormSubmissionEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async _CalculateMailingStatistics(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("CalculateMailingStatistics", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async CalculateMailingStatistics(shipmentId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = shipmentId;
        if (typeof (first) === "object" && first && (typeof (first.ShipmentId) != 'undefined')) {
            _request = shipmentId;
            _options = webapi_options;
        }
        else {
            _request = {
                ShipmentId: shipmentId,
            };
            _options = webapi_options;
        }
        return this._CalculateMailingStatistics(_request, _options);
    }
    async _GetFormSubmissionsCount(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetFormSubmissionsCount", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetFormSubmissionsCount(formId, status, webapi_options) {
        let _request = null;
        let _options = null;
        const first = formId;
        if (typeof (first) === "object" && first && (typeof (first.FormId) != 'undefined' || typeof (first.Status) != 'undefined')) {
            _request = formId;
            _options = status;
        }
        else {
            _request = {
                FormId: formId,
                Status: status,
            };
            _options = webapi_options;
        }
        return this._GetFormSubmissionsCount(_request, _options);
    }
    async _GetPreviewMailing(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetPreviewMailing", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_PreviewMailing_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetPreviewMailing(shipmentAddrId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = shipmentAddrId;
        if (typeof (first) === "object" && first && (typeof (first.ShipmentAddrId) != 'undefined')) {
            _request = shipmentAddrId;
            _options = webapi_options;
        }
        else {
            _request = {
                ShipmentAddrId: shipmentAddrId,
            };
            _options = webapi_options;
        }
        return this._GetPreviewMailing(_request, _options);
    }
    async _GetPreviewMailingHeader(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetPreviewMailingHeader", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_PreviewMailingHeader_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetPreviewMailingHeader(shipmentId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = shipmentId;
        if (typeof (first) === "object" && first && (typeof (first.ShipmentId) != 'undefined')) {
            _request = shipmentId;
            _options = webapi_options;
        }
        else {
            _request = {
                ShipmentId: shipmentId,
            };
            _options = webapi_options;
        }
        return this._GetPreviewMailingHeader(_request, _options);
    }
    /*
     * Gets a ShipmentMessageBlockEntity object.
     * @param shipmentMessageBlockEntityId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single ShipmentMessageBlockEntity
     */
    async GetShipmentMessageBlockEntity(shipmentMessageBlockEntityId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetShipmentMessageBlockEntity?shipmentMessageBlockEntityId=" + shipmentMessageBlockEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ShipmentMessageBlockEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async _GetUserBlocks(request, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetUserBlocks", request, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ShipmentMessageBlockEntityArray_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    async GetUserBlocks(associateId, webapi_options) {
        let _request = null;
        let _options = null;
        const first = associateId;
        if (typeof (first) === "object" && first && (typeof (first.AssociateId) != 'undefined')) {
            _request = associateId;
            _options = webapi_options;
        }
        else {
            _request = {
                AssociateId: associateId,
            };
            _options = webapi_options;
        }
        return this._GetUserBlocks(_request, _options);
    }
    /*
     * Gets a ShipmentMessageEntity object.
     * @param shipmentMessageEntityId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single ShipmentMessageEntity
     */
    async GetShipmentMessageEntity(shipmentMessageEntityId, options) {
        const config = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetShipmentMessageEntity?shipmentMessageEntityId=" + shipmentMessageEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ShipmentMessageEntity_From(response.data);
                resolve(res);
            }
            catch (err) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
} // class v1MarketingAgentController 
exports.MarketingAgent = MarketingAgent;
//# sourceMappingURL=MarketingAgent.js.map