// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>


/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
//
// File:          WebApi/AssociateAgent.ts
//
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------

import { AxiosRequestConfig } from 'axios';
import * as moment from 'moment';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
import * as converters from './Converters';
import { FromBase64ToString, ToBase64 } from './Base64';

/**
 * Associate utilities, notes, not user admininstration
 */
export interface IAssociateAgent {
    GetAssociate(associateId: number) :  Promise< carriers.Associate >;
    GetAssociateByPersonId(request: carriers.Associate_GetAssociateByPersonIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.Associate >;
    GetAssociateByPersonId(personId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.Associate >;
    GetNote(request: carriers.Associate_GetNoteRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string[] >;
    GetNote(associateId: number, webapi_options?:base.WebApiRequestOptions) : Promise< string[] >;
    SaveNote(request: carriers.Associate_SaveNoteRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    SaveNote(associateId: number, note: string[], webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    GetEncryptionKey(webapi_options?:base.WebApiRequestOptions) : Promise< string >;
    GetAssociateList(associateIds: number[]) :  Promise< carriers.Associate[] >;
    GetAssociatesByGroup(request: carriers.Associate_GetAssociatesByGroupRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.Associate[] >;
    GetAssociatesByGroup(groupId: number, type: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.Associate[] >;
    LogOffWindowsUsers(request: carriers.Associate_LogOffWindowsUsersRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    LogOffWindowsUsers(associateIds: number[], webapi_options?:base.WebApiRequestOptions) : Promise< void >;
} // interface IAssociateAgent




/**
 * Associate utilities, notes, not user admininstration
 */
export class AssociateAgent extends base.WebApiBase implements IAssociateAgent {
    constructor(baseUrl?: string, languageCode?:string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config:AxiosRequestConfig, languageCode?:string, cultureCode?: string);
    constructor(options: base.WebApiOptions);

    constructor(baseUrlOrOptions: string|base.WebApiOptions|undefined,
                langOrconfigOrRM?: string|base.ResourceParsing|AxiosRequestConfig|any, 
                langOrResourceOrRM?:string|base.ResourceParsing|any, 
                cultureCode?: string, 
                ) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Associate/";
        super(options);
    }


    /*
     * Gets a Associate object.
     * @param associateId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single Associate
     */
    public async GetAssociate(associateId: number, options?:base.WebApiRequestOptions) : Promise< carriers.Associate > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.Associate >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetAssociate?associateId=" + associateId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_Associate_From( response.data );               
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    private async _GetAssociateByPersonId(request: carriers.Associate_GetAssociateByPersonIdRequest, options?:base.WebApiRequestOptions) : Promise< carriers.Associate > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.Associate >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetAssociateByPersonId", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.Associate = converters.Create_Associate_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Returns the associate that belongs to this person if the person is an associate.
     * @param request - PersonId
     * @returns Associate if person is associate
     */
    public async GetAssociateByPersonId(request: carriers.Associate_GetAssociateByPersonIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.Associate >;

    /**
     * Returns the associate that belongs to this person if the person is an associate.
     * @param personId - The person id
     * @returns Associate if person is associate
     */
    public async GetAssociateByPersonId(personId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.Associate >;

    public async GetAssociateByPersonId(personId:number|carriers.Associate_GetAssociateByPersonIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.Associate > {
        let _request : carriers.Associate_GetAssociateByPersonIdRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = personId;
        if( typeof( first ) === "object" && first && ( typeof(first.PersonId)!='undefined' ) )
        {
            _request = personId as carriers.Associate_GetAssociateByPersonIdRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       PersonId: personId as number,
                       };   
            _options = webapi_options;
        }
        return this._GetAssociateByPersonId( _request, _options );
    }


    private async _GetNote(request: carriers.Associate_GetNoteRequest, options?:base.WebApiRequestOptions) : Promise< string[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< string[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetNote", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : string[] = response.data as string[];
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Returns an array of strings(notepad pages).
     * @param request - AssociateId
     * @returns Returns an array of strings(notepad pages).
     */
    public async GetNote(request: carriers.Associate_GetNoteRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string[] >;

    /**
     * Returns an array of strings(notepad pages).
     * @param associateId - The associate id
     * @returns Returns an array of strings(notepad pages).
     */
    public async GetNote(associateId: number, webapi_options?:base.WebApiRequestOptions) : Promise< string[] >;

    public async GetNote(associateId:number|carriers.Associate_GetNoteRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string[] > {
        let _request : carriers.Associate_GetNoteRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = associateId;
        if( typeof( first ) === "object" && first && ( typeof(first.AssociateId)!='undefined' ) )
        {
            _request = associateId as carriers.Associate_GetNoteRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       AssociateId: associateId as number,
                       };   
            _options = webapi_options;
        }
        return this._GetNote( _request, _options );
    }


    private async _SaveNote(request: carriers.Associate_SaveNoteRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SaveNote", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Saves an array of strings(notepad pages).
     * @param request - AssociateId, Note
     * @returns 
     */
    public async SaveNote(request: carriers.Associate_SaveNoteRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Saves an array of strings(notepad pages).
     * @param associateId - The associate id
     * @param note - The array of strings(notepad pages).
     * @returns 
     */
    public async SaveNote(associateId: number, note: string[], webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async SaveNote(associateId:number|carriers.Associate_SaveNoteRequest, note?:string[]|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.Associate_SaveNoteRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = associateId;
        if( typeof( first ) === "object" && first && ( typeof(first.AssociateId)!='undefined' || typeof(first.Note)!='undefined' ) )
        {
            _request = associateId as carriers.Associate_SaveNoteRequest;
            _options = note as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       AssociateId: associateId as number,
                       Note: note as string[],
                       };   
            _options = webapi_options;
        }
        return this._SaveNote( _request, _options );
    }


    private async _GetEncryptionKey( options?:base.WebApiRequestOptions) : Promise< string > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< string >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetEncryptionKey", undefined , config);
                base.WebApiBase.SetCompleted(options);
                const res : string = response.data as string;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    /**
     * Get unique key made from AssociateId and dbTag used for local storage encryption operations.
     * @returns encryptionKey
     */
    public async GetEncryptionKey(webapi_options?:base.WebApiRequestOptions) : Promise< string >
    {
        return this._GetEncryptionKey(webapi_options);
    }

    /*
     * Gets an array of Associate objects.
     * @param associateIds - The primary keys.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns An array of Associate
     */
    public async GetAssociateList(associateIds: number[], options?:base.WebApiRequestOptions) : Promise< carriers.Associate[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.Associate[] >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetAssociateList", associateIds, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_AssociateArray_From( response.data );               
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    private async _GetAssociatesByGroup(request: carriers.Associate_GetAssociatesByGroupRequest, options?:base.WebApiRequestOptions) : Promise< carriers.Associate[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.Associate[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetAssociatesByGroup", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.Associate[] = converters.Create_AssociateArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Method that returns a array of associate , based on DiaryGroupType and groupId. The differernt types are, Userdefined, Usergroup and ResourceHeadings
     * @param request - GroupId, Type
     * @returns Array of associate
     */
    public async GetAssociatesByGroup(request: carriers.Associate_GetAssociatesByGroupRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.Associate[] >;

    /**
     * Method that returns a array of associate , based on DiaryGroupType and groupId. The differernt types are, Userdefined, Usergroup and ResourceHeadings
     * @param groupId - Id of the group
     * @param type - The type of group. See DiaryGroupType
     * @returns Array of associate
     */
    public async GetAssociatesByGroup(groupId: number, type: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.Associate[] >;

    public async GetAssociatesByGroup(groupId:number|carriers.Associate_GetAssociatesByGroupRequest, type?:number|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.Associate[] > {
        let _request : carriers.Associate_GetAssociatesByGroupRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = groupId;
        if( typeof( first ) === "object" && first && ( typeof(first.GroupId)!='undefined' || typeof(first.Type)!='undefined' ) )
        {
            _request = groupId as carriers.Associate_GetAssociatesByGroupRequest;
            _options = type as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       GroupId: groupId as number,
                       Type: type as number,
                       };   
            _options = webapi_options;
        }
        return this._GetAssociatesByGroup( _request, _options );
    }


    private async _LogOffWindowsUsers(request: carriers.Associate_LogOffWindowsUsersRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("LogOffWindowsUsers", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Method that logs off associates that are logged on to the win client
     * @param request - AssociateIds
     * @returns A void return
     */
    public async LogOffWindowsUsers(request: carriers.Associate_LogOffWindowsUsersRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Method that logs off associates that are logged on to the win client
     * @param associateIds - The ids of the associates that shall be logged off
     * @returns A void return
     */
    public async LogOffWindowsUsers(associateIds: number[], webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async LogOffWindowsUsers(associateIds:number[]|carriers.Associate_LogOffWindowsUsersRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.Associate_LogOffWindowsUsersRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = associateIds;
        if( typeof( first ) === "object" && first && ( typeof(first.AssociateIds)!='undefined' ) )
        {
            _request = associateIds as carriers.Associate_LogOffWindowsUsersRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       AssociateIds: associateIds as number[],
                       };   
            _options = webapi_options;
        }
        return this._LogOffWindowsUsers( _request, _options );
    }

    } // class v1AssociateAgentController 


