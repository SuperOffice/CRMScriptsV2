// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>


/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
//
// File:          WebApi/TargetsAgent.ts
//
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------

import { AxiosRequestConfig } from 'axios';
import * as moment from 'moment';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
import * as converters from './Converters';
import { FromBase64ToString, ToBase64 } from './Base64';

/**
 * Agent lets you configure targets, and retrieve targets
 */
export interface ITargetsAgent {
    CreateDefaultTargetAssignment(): Promise< carriers.TargetAssignment >;
    CreateDefaultTargetDimension(): Promise< carriers.TargetDimension >;
    SaveTargetDimension(entity: carriers.TargetDimension) : Promise< carriers.TargetDimension >;
    DeleteTargetDimension(TargetDimensionId: number) : Promise<void>;
    CreateDefaultTargetGroup(): Promise< carriers.TargetGroup >;
    SaveTargetGroup(entity: carriers.TargetGroup) : Promise< carriers.TargetGroup >;
    DeleteTargetGroup(TargetGroupId: number) : Promise<void>;
    CreateDefaultTargetRevision(): Promise< carriers.TargetRevision >;
    CreateDefaultTargetRevisionHistory(): Promise< carriers.TargetRevisionHistory >;
    CreateDefaultTargetAssignmentForCompany(webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment >;
    CreateDefaultTargetAssignmentForUserGroup(request: carriers.Targets_CreateDefaultTargetAssignmentForUserGroupRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment[] >;
    CreateDefaultTargetAssignmentForUserGroup(userGroupId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment[] >;
    GetTargetAssignmentForYear(request: carriers.Targets_GetTargetAssignmentForYearRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment >;
    GetTargetAssignmentForYear(targetYear: number, entityType: enums.TargetEntityType, targetLevel: enums.TargetLevel, id: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment >;
    CreateDefaultTargetAssignmentForCompanyWithDimension(request: carriers.Targets_CreateDefaultTargetAssignmentForCompanyWithDimensionRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment[] >;
    CreateDefaultTargetAssignmentForCompanyWithDimension(targetDimensionId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment[] >;
    CreateDefaultTargetAssignmentForUserGroupWithDimension(request: carriers.Targets_CreateDefaultTargetAssignmentForUserGroupWithDimensionRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment[] >;
    CreateDefaultTargetAssignmentForUserGroupWithDimension(userGroupId: number, targetDimensionId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment[] >;
    GetTargetAssignmentForYearAndDimension(request: carriers.Targets_GetTargetAssignmentForYearAndDimensionRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment >;
    GetTargetAssignmentForYearAndDimension(targetYear: number, entityType: enums.TargetEntityType, targetLevel: enums.TargetLevel, id: number, dimensionId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment >;
    CreateDefaultTargetAssignmentForCompanyWithYearAndDimension(request: carriers.Targets_CreateDefaultTargetAssignmentForCompanyWithYearAndDimensionRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment[] >;
    CreateDefaultTargetAssignmentForCompanyWithYearAndDimension(year: number, targetDimensionId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment[] >;
    CreateDefaultTargetAssignmentForUserGroupWithYearAndDimension(request: carriers.Targets_CreateDefaultTargetAssignmentForUserGroupWithYearAndDimensionRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment[] >;
    CreateDefaultTargetAssignmentForUserGroupWithYearAndDimension(userGroupId: number, year: number, targetDimensionId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment[] >;
    GetTargetDimension(targetDimensionId: number) :  Promise< carriers.TargetDimension >;
    GetTargetDimensionsForEntityType(request: carriers.Targets_GetTargetDimensionsForEntityTypeRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetDimension[] >;
    GetTargetDimensionsForEntityType(entityType: enums.TargetEntityType, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetDimension[] >;
    GetTargetGroupIds(request: carriers.Targets_GetTargetGroupIdsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< number[] >;
    GetTargetGroupIds(targetDimensionId: number, webapi_options?:base.WebApiRequestOptions) : Promise< number[] >;
    GetTargetGroup(targetGroupId: number) :  Promise< carriers.TargetGroup >;
    GetTargetGroupForYear(request: carriers.Targets_GetTargetGroupForYearRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetGroup >;
    GetTargetGroupForYear(targetYear: number, entityType: enums.TargetEntityType, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetGroup >;
    ExportTargetGroupToExcel(request: carriers.Targets_ExportTargetGroupToExcelRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ExportArchiveResult >;
    ExportTargetGroupToExcel(targetGroupId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ExportArchiveResult >;
    GetTargetGroupForYearAndDimension(request: carriers.Targets_GetTargetGroupForYearAndDimensionRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetGroup >;
    GetTargetGroupForYearAndDimension(targetYear: number, dimensionId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetGroup >;
    GetTargetRevisionHistory(request: carriers.Targets_GetTargetRevisionHistoryRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetRevisionHistory >;
    GetTargetRevisionHistory(targetAssignmentInfoId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetRevisionHistory >;
} // interface ITargetsAgent




/**
 * Agent lets you configure targets, and retrieve targets
 */
export class TargetsAgent extends base.WebApiBase implements ITargetsAgent {
    constructor(baseUrl?: string, languageCode?:string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config:AxiosRequestConfig, languageCode?:string, cultureCode?: string);
    constructor(options: base.WebApiOptions);

    constructor(baseUrlOrOptions: string|base.WebApiOptions|undefined,
                langOrconfigOrRM?: string|base.ResourceParsing|AxiosRequestConfig|any, 
                langOrResourceOrRM?:string|base.ResourceParsing|any, 
                cultureCode?: string, 
                ) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Targets/";
        super(options);
    }



    /**
     * Set default values into a new TargetAssignment.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    public async CreateDefaultTargetAssignment(options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TargetAssignment >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultTargetAssignment", null, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.TargetAssignment = converters.Create_TargetAssignment_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /**
     * Set default values into a new TargetDimension.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    public async CreateDefaultTargetDimension(options?:base.WebApiRequestOptions) : Promise< carriers.TargetDimension > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TargetDimension >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultTargetDimension", null, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.TargetDimension = converters.Create_TargetDimension_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing TargetDimension or creates a new TargetDimension if the id parameter is empty
     * @param entity - The TargetDimension to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated TargetDimension
     */
    public async SaveTargetDimension(entity: carriers.TargetDimension, options?:base.WebApiRequestOptions) : Promise< carriers.TargetDimension > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TargetDimension >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveTargetDimension", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.TargetDimension = converters.Create_TargetDimension_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /*
     * Deletes the TargetDimension
     * @param TargetDimensionId - The id of the TargetDimension to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    public async DeleteTargetDimension(TargetDimensionId: number, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteTargetDimension?TargetDimensionId=" + TargetDimensionId, null, config );
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /**
     * Set default values into a new TargetGroup.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    public async CreateDefaultTargetGroup(options?:base.WebApiRequestOptions) : Promise< carriers.TargetGroup > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TargetGroup >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultTargetGroup", null, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.TargetGroup = converters.Create_TargetGroup_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing TargetGroup or creates a new TargetGroup if the id parameter is empty
     * @param entity - The TargetGroup to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated TargetGroup
     */
    public async SaveTargetGroup(entity: carriers.TargetGroup, options?:base.WebApiRequestOptions) : Promise< carriers.TargetGroup > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TargetGroup >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveTargetGroup", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.TargetGroup = converters.Create_TargetGroup_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /*
     * Deletes the TargetGroup
     * @param TargetGroupId - The id of the TargetGroup to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    public async DeleteTargetGroup(TargetGroupId: number, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteTargetGroup?TargetGroupId=" + TargetGroupId, null, config );
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /**
     * Set default values into a new TargetRevision.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    public async CreateDefaultTargetRevision(options?:base.WebApiRequestOptions) : Promise< carriers.TargetRevision > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TargetRevision >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultTargetRevision", null, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.TargetRevision = converters.Create_TargetRevision_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /**
     * Set default values into a new TargetRevisionHistory.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    public async CreateDefaultTargetRevisionHistory(options?:base.WebApiRequestOptions) : Promise< carriers.TargetRevisionHistory > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TargetRevisionHistory >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultTargetRevisionHistory", null, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.TargetRevisionHistory = converters.Create_TargetRevisionHistory_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    private async _CreateDefaultTargetAssignmentForCompany( options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TargetAssignment >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("CreateDefaultTargetAssignmentForCompany", undefined , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.TargetAssignment = converters.Create_TargetAssignment_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    /**
     * Returns a default target assignment for the owner company.
     * @returns Default target assignment for the owner company.
     */
    public async CreateDefaultTargetAssignmentForCompany(webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment >
    {
        return this._CreateDefaultTargetAssignmentForCompany(webapi_options);
    }


    private async _CreateDefaultTargetAssignmentForUserGroup(request: carriers.Targets_CreateDefaultTargetAssignmentForUserGroupRequest, options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TargetAssignment[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("CreateDefaultTargetAssignmentForUserGroup", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.TargetAssignment[] = converters.Create_TargetAssignmentArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Returns a default target assignment for the specified usergroup.
     * @param request - UserGroupId
     * @returns Default target assignment for the specified usergroup.
     */
    public async CreateDefaultTargetAssignmentForUserGroup(request: carriers.Targets_CreateDefaultTargetAssignmentForUserGroupRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment[] >;

    /**
     * Returns a default target assignment for the specified usergroup.
     * @param userGroupId - The id of the UserGroup
     * @returns Default target assignment for the specified usergroup.
     */
    public async CreateDefaultTargetAssignmentForUserGroup(userGroupId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment[] >;

    public async CreateDefaultTargetAssignmentForUserGroup(userGroupId:number|carriers.Targets_CreateDefaultTargetAssignmentForUserGroupRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment[] > {
        let _request : carriers.Targets_CreateDefaultTargetAssignmentForUserGroupRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = userGroupId;
        if( typeof( first ) === "object" && first && ( typeof(first.UserGroupId)!='undefined' ) )
        {
            _request = userGroupId as carriers.Targets_CreateDefaultTargetAssignmentForUserGroupRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       UserGroupId: userGroupId as number,
                       };   
            _options = webapi_options;
        }
        return this._CreateDefaultTargetAssignmentForUserGroup( _request, _options );
    }


    private async _GetTargetAssignmentForYear(request: carriers.Targets_GetTargetAssignmentForYearRequest, options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TargetAssignment >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetTargetAssignmentForYear", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.TargetAssignment = converters.Create_TargetAssignment_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Returns the target assignment for the specified year and entity type.
     * @param request - TargetYear, EntityType, TargetLevel, Id
     * @returns Target assignment for a specified entity for year and entity type. Null if not found.
     */
    public async GetTargetAssignmentForYear(request: carriers.Targets_GetTargetAssignmentForYearRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment >;

    /**
     * Returns the target assignment for the specified year and entity type.
     * @param targetYear - Targeted year
     * @param entityType - Targeted entity type
     * @param targetLevel - The level of target the id is referring to.
     * @param id - Contact, UserGroup or Associate id.
     * @returns Target assignment for a specified entity for year and entity type. Null if not found.
     */
    public async GetTargetAssignmentForYear(targetYear: number, entityType: enums.TargetEntityType, targetLevel: enums.TargetLevel, id: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment >;

    public async GetTargetAssignmentForYear(targetYear:number|carriers.Targets_GetTargetAssignmentForYearRequest, entityType?:enums.TargetEntityType|base.WebApiRequestOptions, targetLevel?:enums.TargetLevel, id?:number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment > {
        let _request : carriers.Targets_GetTargetAssignmentForYearRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = targetYear;
        if( typeof( first ) === "object" && first && ( typeof(first.TargetYear)!='undefined' || typeof(first.EntityType)!='undefined' || typeof(first.TargetLevel)!='undefined' || typeof(first.Id)!='undefined' ) )
        {
            _request = targetYear as carriers.Targets_GetTargetAssignmentForYearRequest;
            _options = entityType as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       TargetYear: targetYear as number,
                       EntityType: entityType as enums.TargetEntityType,
                       TargetLevel: targetLevel as enums.TargetLevel,
                       Id: id as number,
                       };   
            _options = webapi_options;
        }
        return this._GetTargetAssignmentForYear( _request, _options );
    }


    private async _CreateDefaultTargetAssignmentForCompanyWithDimension(request: carriers.Targets_CreateDefaultTargetAssignmentForCompanyWithDimensionRequest, options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TargetAssignment[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("CreateDefaultTargetAssignmentForCompanyWithDimension", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.TargetAssignment[] = converters.Create_TargetAssignmentArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Returns a default target assignment for the owner company, for the specified dimension.
     * @param request - TargetDimensionId
     * @returns Default target assignments for the owner company.
     */
    public async CreateDefaultTargetAssignmentForCompanyWithDimension(request: carriers.Targets_CreateDefaultTargetAssignmentForCompanyWithDimensionRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment[] >;

    /**
     * Returns a default target assignment for the owner company, for the specified dimension.
     * @param targetDimensionId - The dimension id to use.
     * @returns Default target assignments for the owner company.
     */
    public async CreateDefaultTargetAssignmentForCompanyWithDimension(targetDimensionId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment[] >;

    public async CreateDefaultTargetAssignmentForCompanyWithDimension(targetDimensionId:number|carriers.Targets_CreateDefaultTargetAssignmentForCompanyWithDimensionRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment[] > {
        let _request : carriers.Targets_CreateDefaultTargetAssignmentForCompanyWithDimensionRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = targetDimensionId;
        if( typeof( first ) === "object" && first && ( typeof(first.TargetDimensionId)!='undefined' ) )
        {
            _request = targetDimensionId as carriers.Targets_CreateDefaultTargetAssignmentForCompanyWithDimensionRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       TargetDimensionId: targetDimensionId as number,
                       };   
            _options = webapi_options;
        }
        return this._CreateDefaultTargetAssignmentForCompanyWithDimension( _request, _options );
    }


    private async _CreateDefaultTargetAssignmentForUserGroupWithDimension(request: carriers.Targets_CreateDefaultTargetAssignmentForUserGroupWithDimensionRequest, options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TargetAssignment[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("CreateDefaultTargetAssignmentForUserGroupWithDimension", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.TargetAssignment[] = converters.Create_TargetAssignmentArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Returns a default target assignment for the specified usergroup, for the specified dimension.
     * @param request - UserGroupId, TargetDimensionId
     * @returns Default target assignment for the specified usergroup.
     */
    public async CreateDefaultTargetAssignmentForUserGroupWithDimension(request: carriers.Targets_CreateDefaultTargetAssignmentForUserGroupWithDimensionRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment[] >;

    /**
     * Returns a default target assignment for the specified usergroup, for the specified dimension.
     * @param userGroupId - The id of the UserGroup
     * @param targetDimensionId - The dimension id to use.
     * @returns Default target assignment for the specified usergroup.
     */
    public async CreateDefaultTargetAssignmentForUserGroupWithDimension(userGroupId: number, targetDimensionId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment[] >;

    public async CreateDefaultTargetAssignmentForUserGroupWithDimension(userGroupId:number|carriers.Targets_CreateDefaultTargetAssignmentForUserGroupWithDimensionRequest, targetDimensionId?:number|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment[] > {
        let _request : carriers.Targets_CreateDefaultTargetAssignmentForUserGroupWithDimensionRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = userGroupId;
        if( typeof( first ) === "object" && first && ( typeof(first.UserGroupId)!='undefined' || typeof(first.TargetDimensionId)!='undefined' ) )
        {
            _request = userGroupId as carriers.Targets_CreateDefaultTargetAssignmentForUserGroupWithDimensionRequest;
            _options = targetDimensionId as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       UserGroupId: userGroupId as number,
                       TargetDimensionId: targetDimensionId as number,
                       };   
            _options = webapi_options;
        }
        return this._CreateDefaultTargetAssignmentForUserGroupWithDimension( _request, _options );
    }


    private async _GetTargetAssignmentForYearAndDimension(request: carriers.Targets_GetTargetAssignmentForYearAndDimensionRequest, options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TargetAssignment >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetTargetAssignmentForYearAndDimension", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.TargetAssignment = converters.Create_TargetAssignment_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Returns the target assignment for the specified year, entity type and dimension.
     * @param request - TargetYear, EntityType, TargetLevel, Id, DimensionId
     * @returns Target assignment for a specified entity for year and entity type. Null if not found.
     */
    public async GetTargetAssignmentForYearAndDimension(request: carriers.Targets_GetTargetAssignmentForYearAndDimensionRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment >;

    /**
     * Returns the target assignment for the specified year, entity type and dimension.
     * @param targetYear - Targeted year
     * @param entityType - Targeted entity type
     * @param targetLevel - The level of target the id is referring to.
     * @param id - Contact, UserGroup or Associate id.
     * @param dimensionId - Id of dimension.
     * @returns Target assignment for a specified entity for year and entity type. Null if not found.
     */
    public async GetTargetAssignmentForYearAndDimension(targetYear: number, entityType: enums.TargetEntityType, targetLevel: enums.TargetLevel, id: number, dimensionId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment >;

    public async GetTargetAssignmentForYearAndDimension(targetYear:number|carriers.Targets_GetTargetAssignmentForYearAndDimensionRequest, entityType?:enums.TargetEntityType|base.WebApiRequestOptions, targetLevel?:enums.TargetLevel, id?:number, dimensionId?:number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment > {
        let _request : carriers.Targets_GetTargetAssignmentForYearAndDimensionRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = targetYear;
        if( typeof( first ) === "object" && first && ( typeof(first.TargetYear)!='undefined' || typeof(first.EntityType)!='undefined' || typeof(first.TargetLevel)!='undefined' || typeof(first.Id)!='undefined' || typeof(first.DimensionId)!='undefined' ) )
        {
            _request = targetYear as carriers.Targets_GetTargetAssignmentForYearAndDimensionRequest;
            _options = entityType as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       TargetYear: targetYear as number,
                       EntityType: entityType as enums.TargetEntityType,
                       TargetLevel: targetLevel as enums.TargetLevel,
                       Id: id as number,
                       DimensionId: dimensionId as number,
                       };   
            _options = webapi_options;
        }
        return this._GetTargetAssignmentForYearAndDimension( _request, _options );
    }


    private async _CreateDefaultTargetAssignmentForCompanyWithYearAndDimension(request: carriers.Targets_CreateDefaultTargetAssignmentForCompanyWithYearAndDimensionRequest, options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TargetAssignment[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("CreateDefaultTargetAssignmentForCompanyWithYearAndDimension", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.TargetAssignment[] = converters.Create_TargetAssignmentArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Returns a default target assignment for the owner company, for the specified year and dimension.
     * @param request - Year, TargetDimensionId
     * @returns Default target assignments for the owner company.
     */
    public async CreateDefaultTargetAssignmentForCompanyWithYearAndDimension(request: carriers.Targets_CreateDefaultTargetAssignmentForCompanyWithYearAndDimensionRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment[] >;

    /**
     * Returns a default target assignment for the owner company, for the specified year and dimension.
     * @param year - The year from which to retrieve dimension data.
     * @param targetDimensionId - The dimension id to use.
     * @returns Default target assignments for the owner company.
     */
    public async CreateDefaultTargetAssignmentForCompanyWithYearAndDimension(year: number, targetDimensionId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment[] >;

    public async CreateDefaultTargetAssignmentForCompanyWithYearAndDimension(year:number|carriers.Targets_CreateDefaultTargetAssignmentForCompanyWithYearAndDimensionRequest, targetDimensionId?:number|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment[] > {
        let _request : carriers.Targets_CreateDefaultTargetAssignmentForCompanyWithYearAndDimensionRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = year;
        if( typeof( first ) === "object" && first && ( typeof(first.Year)!='undefined' || typeof(first.TargetDimensionId)!='undefined' ) )
        {
            _request = year as carriers.Targets_CreateDefaultTargetAssignmentForCompanyWithYearAndDimensionRequest;
            _options = targetDimensionId as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       Year: year as number,
                       TargetDimensionId: targetDimensionId as number,
                       };   
            _options = webapi_options;
        }
        return this._CreateDefaultTargetAssignmentForCompanyWithYearAndDimension( _request, _options );
    }


    private async _CreateDefaultTargetAssignmentForUserGroupWithYearAndDimension(request: carriers.Targets_CreateDefaultTargetAssignmentForUserGroupWithYearAndDimensionRequest, options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TargetAssignment[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("CreateDefaultTargetAssignmentForUserGroupWithYearAndDimension", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.TargetAssignment[] = converters.Create_TargetAssignmentArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Returns a default target assignment for the specified usergroup, for the specified year and dimension.
     * @param request - UserGroupId, Year, TargetDimensionId
     * @returns Default target assignment for the specified usergroup.
     */
    public async CreateDefaultTargetAssignmentForUserGroupWithYearAndDimension(request: carriers.Targets_CreateDefaultTargetAssignmentForUserGroupWithYearAndDimensionRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment[] >;

    /**
     * Returns a default target assignment for the specified usergroup, for the specified year and dimension.
     * @param userGroupId - The id of the UserGroup
     * @param year - The year from which to retrieve dimension data.
     * @param targetDimensionId - The dimension id to use.
     * @returns Default target assignment for the specified usergroup.
     */
    public async CreateDefaultTargetAssignmentForUserGroupWithYearAndDimension(userGroupId: number, year: number, targetDimensionId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment[] >;

    public async CreateDefaultTargetAssignmentForUserGroupWithYearAndDimension(userGroupId:number|carriers.Targets_CreateDefaultTargetAssignmentForUserGroupWithYearAndDimensionRequest, year?:number|base.WebApiRequestOptions, targetDimensionId?:number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetAssignment[] > {
        let _request : carriers.Targets_CreateDefaultTargetAssignmentForUserGroupWithYearAndDimensionRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = userGroupId;
        if( typeof( first ) === "object" && first && ( typeof(first.UserGroupId)!='undefined' || typeof(first.Year)!='undefined' || typeof(first.TargetDimensionId)!='undefined' ) )
        {
            _request = userGroupId as carriers.Targets_CreateDefaultTargetAssignmentForUserGroupWithYearAndDimensionRequest;
            _options = year as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       UserGroupId: userGroupId as number,
                       Year: year as number,
                       TargetDimensionId: targetDimensionId as number,
                       };   
            _options = webapi_options;
        }
        return this._CreateDefaultTargetAssignmentForUserGroupWithYearAndDimension( _request, _options );
    }

    /*
     * Gets a TargetDimension object.
     * @param targetDimensionId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single TargetDimension
     */
    public async GetTargetDimension(targetDimensionId: number, options?:base.WebApiRequestOptions) : Promise< carriers.TargetDimension > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TargetDimension >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetTargetDimension?targetDimensionId=" + targetDimensionId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_TargetDimension_From( response.data );               
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    private async _GetTargetDimensionsForEntityType(request: carriers.Targets_GetTargetDimensionsForEntityTypeRequest, options?:base.WebApiRequestOptions) : Promise< carriers.TargetDimension[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TargetDimension[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetTargetDimensionsForEntityType", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.TargetDimension[] = converters.Create_TargetDimensionArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Returns the target dimensions for the given entity type.
     * @param request - EntityType
     * @returns Target dimensions for year and entity type.
     */
    public async GetTargetDimensionsForEntityType(request: carriers.Targets_GetTargetDimensionsForEntityTypeRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetDimension[] >;

    /**
     * Returns the target dimensions for the given entity type.
     * @param entityType - Targeted entity type
     * @returns Target dimensions for year and entity type.
     */
    public async GetTargetDimensionsForEntityType(entityType: enums.TargetEntityType, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetDimension[] >;

    public async GetTargetDimensionsForEntityType(entityType:enums.TargetEntityType|carriers.Targets_GetTargetDimensionsForEntityTypeRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetDimension[] > {
        let _request : carriers.Targets_GetTargetDimensionsForEntityTypeRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = entityType;
        if( typeof( first ) === "object" && first && ( typeof(first.EntityType)!='undefined' ) )
        {
            _request = entityType as carriers.Targets_GetTargetDimensionsForEntityTypeRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       EntityType: entityType as enums.TargetEntityType,
                       };   
            _options = webapi_options;
        }
        return this._GetTargetDimensionsForEntityType( _request, _options );
    }


    private async _GetTargetGroupIds(request: carriers.Targets_GetTargetGroupIdsRequest, options?:base.WebApiRequestOptions) : Promise< number[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< number[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetTargetGroupIds", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : number[] = response.data as number[];
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Returns ids of the target groups that use this dimension.
     * @param request - TargetDimensionId
     * @returns Target group ids.
     */
    public async GetTargetGroupIds(request: carriers.Targets_GetTargetGroupIdsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< number[] >;

    /**
     * Returns ids of the target groups that use this dimension.
     * @param targetDimensionId - The target dimension id
     * @returns Target group ids.
     */
    public async GetTargetGroupIds(targetDimensionId: number, webapi_options?:base.WebApiRequestOptions) : Promise< number[] >;

    public async GetTargetGroupIds(targetDimensionId:number|carriers.Targets_GetTargetGroupIdsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< number[] > {
        let _request : carriers.Targets_GetTargetGroupIdsRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = targetDimensionId;
        if( typeof( first ) === "object" && first && ( typeof(first.TargetDimensionId)!='undefined' ) )
        {
            _request = targetDimensionId as carriers.Targets_GetTargetGroupIdsRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       TargetDimensionId: targetDimensionId as number,
                       };   
            _options = webapi_options;
        }
        return this._GetTargetGroupIds( _request, _options );
    }

    /*
     * Gets a TargetGroup object.
     * @param targetGroupId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single TargetGroup
     */
    public async GetTargetGroup(targetGroupId: number, options?:base.WebApiRequestOptions) : Promise< carriers.TargetGroup > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TargetGroup >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetTargetGroup?targetGroupId=" + targetGroupId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_TargetGroup_From( response.data );               
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    private async _GetTargetGroupForYear(request: carriers.Targets_GetTargetGroupForYearRequest, options?:base.WebApiRequestOptions) : Promise< carriers.TargetGroup > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TargetGroup >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetTargetGroupForYear", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.TargetGroup = converters.Create_TargetGroup_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Returns the target group for the specified year and entity type.
     * @param request - TargetYear, EntityType
     * @returns Target Group for year and entity type.
     */
    public async GetTargetGroupForYear(request: carriers.Targets_GetTargetGroupForYearRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetGroup >;

    /**
     * Returns the target group for the specified year and entity type.
     * @param targetYear - Targeted year
     * @param entityType - Targeted entity type
     * @returns Target Group for year and entity type.
     */
    public async GetTargetGroupForYear(targetYear: number, entityType: enums.TargetEntityType, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetGroup >;

    public async GetTargetGroupForYear(targetYear:number|carriers.Targets_GetTargetGroupForYearRequest, entityType?:enums.TargetEntityType|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetGroup > {
        let _request : carriers.Targets_GetTargetGroupForYearRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = targetYear;
        if( typeof( first ) === "object" && first && ( typeof(first.TargetYear)!='undefined' || typeof(first.EntityType)!='undefined' ) )
        {
            _request = targetYear as carriers.Targets_GetTargetGroupForYearRequest;
            _options = entityType as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       TargetYear: targetYear as number,
                       EntityType: entityType as enums.TargetEntityType,
                       };   
            _options = webapi_options;
        }
        return this._GetTargetGroupForYear( _request, _options );
    }


    private async _ExportTargetGroupToExcel(request: carriers.Targets_ExportTargetGroupToExcelRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ExportArchiveResult > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ExportArchiveResult >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ExportTargetGroupToExcel", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ExportArchiveResult = converters.Create_ExportArchiveResult_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Renders the given targetgroup to excel, and returns the path to the temporary file.
     * @param request - TargetGroupId
     * @returns 
     */
    public async ExportTargetGroupToExcel(request: carriers.Targets_ExportTargetGroupToExcelRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ExportArchiveResult >;

    /**
     * Renders the given targetgroup to excel, and returns the path to the temporary file.
     * @param targetGroupId - The id of the targetgroup to be rendered to excel.
     * @returns 
     */
    public async ExportTargetGroupToExcel(targetGroupId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ExportArchiveResult >;

    public async ExportTargetGroupToExcel(targetGroupId:number|carriers.Targets_ExportTargetGroupToExcelRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ExportArchiveResult > {
        let _request : carriers.Targets_ExportTargetGroupToExcelRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = targetGroupId;
        if( typeof( first ) === "object" && first && ( typeof(first.TargetGroupId)!='undefined' ) )
        {
            _request = targetGroupId as carriers.Targets_ExportTargetGroupToExcelRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       TargetGroupId: targetGroupId as number,
                       };   
            _options = webapi_options;
        }
        return this._ExportTargetGroupToExcel( _request, _options );
    }


    private async _GetTargetGroupForYearAndDimension(request: carriers.Targets_GetTargetGroupForYearAndDimensionRequest, options?:base.WebApiRequestOptions) : Promise< carriers.TargetGroup > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TargetGroup >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetTargetGroupForYearAndDimension", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.TargetGroup = converters.Create_TargetGroup_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Returns the target group for the specified year and dimension.
     * @param request - TargetYear, DimensionId
     * @returns Target Group for year and dimension.
     */
    public async GetTargetGroupForYearAndDimension(request: carriers.Targets_GetTargetGroupForYearAndDimensionRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetGroup >;

    /**
     * Returns the target group for the specified year and dimension.
     * @param targetYear - Targeted year
     * @param dimensionId - Targeted dimension Id
     * @returns Target Group for year and dimension.
     */
    public async GetTargetGroupForYearAndDimension(targetYear: number, dimensionId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetGroup >;

    public async GetTargetGroupForYearAndDimension(targetYear:number|carriers.Targets_GetTargetGroupForYearAndDimensionRequest, dimensionId?:number|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetGroup > {
        let _request : carriers.Targets_GetTargetGroupForYearAndDimensionRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = targetYear;
        if( typeof( first ) === "object" && first && ( typeof(first.TargetYear)!='undefined' || typeof(first.DimensionId)!='undefined' ) )
        {
            _request = targetYear as carriers.Targets_GetTargetGroupForYearAndDimensionRequest;
            _options = dimensionId as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       TargetYear: targetYear as number,
                       DimensionId: dimensionId as number,
                       };   
            _options = webapi_options;
        }
        return this._GetTargetGroupForYearAndDimension( _request, _options );
    }


    private async _GetTargetRevisionHistory(request: carriers.Targets_GetTargetRevisionHistoryRequest, options?:base.WebApiRequestOptions) : Promise< carriers.TargetRevisionHistory > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TargetRevisionHistory >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetTargetRevisionHistory", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.TargetRevisionHistory = converters.Create_TargetRevisionHistory_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Returns the revision history for a given TargetAssignmentInfo in chronological order.
     * @param request - TargetAssignmentInfoId
     * @returns Target revision history for the given TargetAssignmentInfo
     */
    public async GetTargetRevisionHistory(request: carriers.Targets_GetTargetRevisionHistoryRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetRevisionHistory >;

    /**
     * Returns the revision history for a given TargetAssignmentInfo in chronological order.
     * @param targetAssignmentInfoId - Target assignment info id
     * @returns Target revision history for the given TargetAssignmentInfo
     */
    public async GetTargetRevisionHistory(targetAssignmentInfoId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetRevisionHistory >;

    public async GetTargetRevisionHistory(targetAssignmentInfoId:number|carriers.Targets_GetTargetRevisionHistoryRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TargetRevisionHistory > {
        let _request : carriers.Targets_GetTargetRevisionHistoryRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = targetAssignmentInfoId;
        if( typeof( first ) === "object" && first && ( typeof(first.TargetAssignmentInfoId)!='undefined' ) )
        {
            _request = targetAssignmentInfoId as carriers.Targets_GetTargetRevisionHistoryRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       TargetAssignmentInfoId: targetAssignmentInfoId as number,
                       };   
            _options = webapi_options;
        }
        return this._GetTargetRevisionHistory( _request, _options );
    }

    } // class v1TargetsAgentController 


