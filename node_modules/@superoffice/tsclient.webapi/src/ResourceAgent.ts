// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>


/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
//
// File:          WebApi/ResourceAgent.ts
//
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------

import { AxiosRequestConfig } from 'axios';
import * as moment from 'moment';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
import * as converters from './Converters';
import { FromBase64ToString, ToBase64 } from './Base64';

/**
 * String resource substitution management.
 */
export interface IResourceAgent {
    SetResourceSubstitution(request: carriers.Resource_SetResourceSubstitutionRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    SetResourceSubstitution(resourceName: string, resourceValues: string, culture: string, isActive: boolean, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    DeleteResourceSubstitution(request: carriers.Resource_DeleteResourceSubstitutionRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    DeleteResourceSubstitution(resourceName: string, culture: string, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    ActivateResourceSubstitution(request: carriers.Resource_ActivateResourceSubstitutionRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    ActivateResourceSubstitution(resourceName: string, culture: string, isActive: boolean, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    GetResourceSubstitutions(request: carriers.Resource_GetResourceSubstitutionsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ResourceOverride[] >;
    GetResourceSubstitutions(resourceNames: string[], culture: string, activeOnly: boolean, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ResourceOverride[] >;
    IsResourceSubstitutionActive(request: carriers.Resource_IsResourceSubstitutionActiveRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ResourceOverride[] >;
    IsResourceSubstitutionActive(resourceNames: string[], culture: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ResourceOverride[] >;
} // interface IResourceAgent




/**
 * String resource substitution management.
 */
export class ResourceAgent extends base.WebApiBase implements IResourceAgent {
    constructor(baseUrl?: string, languageCode?:string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config:AxiosRequestConfig, languageCode?:string, cultureCode?: string);
    constructor(options: base.WebApiOptions);

    constructor(baseUrlOrOptions: string|base.WebApiOptions|undefined,
                langOrconfigOrRM?: string|base.ResourceParsing|AxiosRequestConfig|any, 
                langOrResourceOrRM?:string|base.ResourceParsing|any, 
                cultureCode?: string, 
                ) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Resource/";
        super(options);
    }



    private async _SetResourceSubstitution(request: carriers.Resource_SetResourceSubstitutionRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetResourceSubstitution", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Create or update a resource substitution
     * @param request - ResourceName, ResourceValues, Culture, IsActive
     * @returns This method has no return value
     */
    public async SetResourceSubstitution(request: carriers.Resource_SetResourceSubstitutionRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Create or update a resource substitution
     * @param resourceName - The name of the resource, without any brackets
     * @param resourceValues - The new value of the resource
     * @param culture - The .NET culture string
     * @param isActive - Is the subsitution now active
     * @returns This method has no return value
     */
    public async SetResourceSubstitution(resourceName: string, resourceValues: string, culture: string, isActive: boolean, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async SetResourceSubstitution(resourceName:string|carriers.Resource_SetResourceSubstitutionRequest, resourceValues?:string|base.WebApiRequestOptions, culture?:string, isActive?:boolean, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.Resource_SetResourceSubstitutionRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = resourceName;
        if( typeof( first ) === "object" && first && ( typeof(first.ResourceName)!='undefined' || typeof(first.ResourceValues)!='undefined' || typeof(first.Culture)!='undefined' || typeof(first.IsActive)!='undefined' ) )
        {
            _request = resourceName as carriers.Resource_SetResourceSubstitutionRequest;
            _options = resourceValues as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ResourceName: resourceName as string,
                       ResourceValues: resourceValues as string,
                       Culture: culture as string,
                       IsActive: isActive as boolean,
                       };   
            _options = webapi_options;
        }
        return this._SetResourceSubstitution( _request, _options );
    }


    private async _DeleteResourceSubstitution(request: carriers.Resource_DeleteResourceSubstitutionRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("DeleteResourceSubstitution", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Permanentely delete a resource substitution for one or more cultures
     * @param request - ResourceName, Culture
     * @returns This method has no return value
     */
    public async DeleteResourceSubstitution(request: carriers.Resource_DeleteResourceSubstitutionRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Permanentely delete a resource substitution for one or more cultures
     * @param resourceName - The name of the resource, without any brackets
     * @param culture - The .NET culture string; if blank, then ALL substitutions for this resource will be dropped
     * @returns This method has no return value
     */
    public async DeleteResourceSubstitution(resourceName: string, culture: string, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async DeleteResourceSubstitution(resourceName:string|carriers.Resource_DeleteResourceSubstitutionRequest, culture?:string|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.Resource_DeleteResourceSubstitutionRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = resourceName;
        if( typeof( first ) === "object" && first && ( typeof(first.ResourceName)!='undefined' || typeof(first.Culture)!='undefined' ) )
        {
            _request = resourceName as carriers.Resource_DeleteResourceSubstitutionRequest;
            _options = culture as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ResourceName: resourceName as string,
                       Culture: culture as string,
                       };   
            _options = webapi_options;
        }
        return this._DeleteResourceSubstitution( _request, _options );
    }


    private async _ActivateResourceSubstitution(request: carriers.Resource_ActivateResourceSubstitutionRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ActivateResourceSubstitution", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Activate or deactive a resource substitution for one or more cultures
     * @param request - ResourceName, Culture, IsActive
     * @returns This method has no return value
     */
    public async ActivateResourceSubstitution(request: carriers.Resource_ActivateResourceSubstitutionRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Activate or deactive a resource substitution for one or more cultures
     * @param resourceName - The name of the resource, without any brackets; if blank then this is the MASTER SWITCH for the override system
     * @param culture - The .NET culture string; if blank, then ALL substitutions for this resource will be affected
     * @param isActive - New status of override
     * @returns This method has no return value
     */
    public async ActivateResourceSubstitution(resourceName: string, culture: string, isActive: boolean, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async ActivateResourceSubstitution(resourceName:string|carriers.Resource_ActivateResourceSubstitutionRequest, culture?:string|base.WebApiRequestOptions, isActive?:boolean, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.Resource_ActivateResourceSubstitutionRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = resourceName;
        if( typeof( first ) === "object" && first && ( typeof(first.ResourceName)!='undefined' || typeof(first.Culture)!='undefined' || typeof(first.IsActive)!='undefined' ) )
        {
            _request = resourceName as carriers.Resource_ActivateResourceSubstitutionRequest;
            _options = culture as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ResourceName: resourceName as string,
                       Culture: culture as string,
                       IsActive: isActive as boolean,
                       };   
            _options = webapi_options;
        }
        return this._ActivateResourceSubstitution( _request, _options );
    }


    private async _GetResourceSubstitutions(request: carriers.Resource_GetResourceSubstitutionsRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ResourceOverride[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ResourceOverride[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetResourceSubstitutions", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ResourceOverride[] = converters.Create_ResourceOverrideArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Get substitutions for some or all resources for one culture
     * @param request - ResourceNames, Culture, ActiveOnly
     * @returns Array of override objects, empty if there are none
     */
    public async GetResourceSubstitutions(request: carriers.Resource_GetResourceSubstitutionsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ResourceOverride[] >;

    /**
     * Get substitutions for some or all resources for one culture
     * @param resourceNames - Array of names of resources for which overrides are sought; if empty, then get all
     * @param culture - .NET culture string; if empty, then get all
     * @param activeOnly - If true, then only resources with active substitutions will be returned; if false then ALL existing overrides will be returned
     * @returns Array of override objects, empty if there are none
     */
    public async GetResourceSubstitutions(resourceNames: string[], culture: string, activeOnly: boolean, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ResourceOverride[] >;

    public async GetResourceSubstitutions(resourceNames:string[]|carriers.Resource_GetResourceSubstitutionsRequest, culture?:string|base.WebApiRequestOptions, activeOnly?:boolean, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ResourceOverride[] > {
        let _request : carriers.Resource_GetResourceSubstitutionsRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = resourceNames;
        if( typeof( first ) === "object" && first && ( typeof(first.ResourceNames)!='undefined' || typeof(first.Culture)!='undefined' || typeof(first.ActiveOnly)!='undefined' ) )
        {
            _request = resourceNames as carriers.Resource_GetResourceSubstitutionsRequest;
            _options = culture as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ResourceNames: resourceNames as string[],
                       Culture: culture as string,
                       ActiveOnly: activeOnly as boolean,
                       };   
            _options = webapi_options;
        }
        return this._GetResourceSubstitutions( _request, _options );
    }


    private async _IsResourceSubstitutionActive(request: carriers.Resource_IsResourceSubstitutionActiveRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ResourceOverride[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ResourceOverride[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("IsResourceSubstitutionActive", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ResourceOverride[] = converters.Create_ResourceOverrideArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Determine if resource substitution/override is active, globally or for a subset of resources/cultures
     * @param request - ResourceNames, Culture
     * @returns Array of override objects, empty if there are none; the ResourceValue member is not set by this call
     */
    public async IsResourceSubstitutionActive(request: carriers.Resource_IsResourceSubstitutionActiveRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ResourceOverride[] >;

    /**
     * Determine if resource substitution/override is active, globally or for a subset of resources/cultures
     * @param resourceNames - Array of names of resources for which overrides are sought; if empty, then get the MASTER on/off
     * @param culture - .NET culture string; if empty, then get for all cultures (unless resourceName
     * @returns Array of override objects, empty if there are none; the ResourceValue member is not set by this call
     */
    public async IsResourceSubstitutionActive(resourceNames: string[], culture: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ResourceOverride[] >;

    public async IsResourceSubstitutionActive(resourceNames:string[]|carriers.Resource_IsResourceSubstitutionActiveRequest, culture?:string|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ResourceOverride[] > {
        let _request : carriers.Resource_IsResourceSubstitutionActiveRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = resourceNames;
        if( typeof( first ) === "object" && first && ( typeof(first.ResourceNames)!='undefined' || typeof(first.Culture)!='undefined' ) )
        {
            _request = resourceNames as carriers.Resource_IsResourceSubstitutionActiveRequest;
            _options = culture as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ResourceNames: resourceNames as string[],
                       Culture: culture as string,
                       };   
            _options = webapi_options;
        }
        return this._IsResourceSubstitutionActive( _request, _options );
    }

    } // class v1ResourceAgentController 


