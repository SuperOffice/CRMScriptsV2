// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>


/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
//
// File:          WebApi/CRMScriptAgent.ts
//
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------

import { AxiosRequestConfig } from 'axios';
import * as moment from 'moment';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
import * as converters from './Converters';
import { FromBase64ToString, ToBase64 } from './Base64';

/**
 * Manage and execute CRMScript functions.
 * 
 * **Online Restricted:** This agent is not available in Online by default. Access must be requested specifically when app is registered.
 */
export interface ICRMScriptAgent {
    CreateDefaultCRMScriptEntity(): Promise< carriers.CRMScriptEntity >;
    SaveCRMScriptEntity(entity: carriers.CRMScriptEntity) : Promise< carriers.CRMScriptEntity >;
    DeleteCRMScriptEntity(CRMScriptEntityId: number) : Promise<void>;
    CreateDefaultTriggerScriptEntity(): Promise< carriers.TriggerScriptEntity >;
    SaveTriggerScriptEntity(entity: carriers.TriggerScriptEntity) : Promise< carriers.TriggerScriptEntity >;
    DeleteTriggerScriptEntity(TriggerScriptEntityId: number) : Promise<void>;
    GetCRMScriptByUniqueIdentifier(request: carriers.CRMScript_GetCRMScriptByUniqueIdentifierRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.Script >;
    GetCRMScriptByUniqueIdentifier(uniqueIdentifier: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.Script >;
    SaveCRMScriptByUniqueIdentifier(request: carriers.CRMScript_SaveCRMScriptByUniqueIdentifierRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.Script >;
    SaveCRMScriptByUniqueIdentifier(uniqueIdentifier: string, crmscript: carriers.Script, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.Script >;
    DeleteCRMScriptByUniqueIdentifier(request: carriers.CRMScript_DeleteCRMScriptByUniqueIdentifierRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    DeleteCRMScriptByUniqueIdentifier(uniqueIdentifier: string, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    GetCRMScriptEntity(cRMScriptEntityId: number) :  Promise< carriers.CRMScriptEntity >;
    ExecuteScript(request: carriers.CRMScript_ExecuteScriptRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string >;
    ExecuteScript(cRMScriptId: number, parameters: carriers.StringDictionary, webapi_options?:base.WebApiRequestOptions) : Promise< string >;
    ExecuteScriptByIncludeId(request: carriers.CRMScript_ExecuteScriptByIncludeIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string >;
    ExecuteScriptByIncludeId(cRMScriptIncludeId: string, parameters: carriers.StringDictionary, webapi_options?:base.WebApiRequestOptions) : Promise< string >;
    ExecuteScriptByUniqueId(request: carriers.CRMScript_ExecuteScriptByUniqueIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string >;
    ExecuteScriptByUniqueId(cRMScriptUniqueId: string, parameters: carriers.StringDictionary, webapi_options?:base.WebApiRequestOptions) : Promise< string >;
    ExecuteScriptAsEvent(request: carriers.CRMScript_ExecuteScriptAsEventRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.EventData >;
    ExecuteScriptAsEvent(cRMScriptId: number, eventData: carriers.EventData, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.EventData >;
    ExecuteScriptAsEventByUniqueId(request: carriers.CRMScript_ExecuteScriptAsEventByUniqueIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.EventData >;
    ExecuteScriptAsEventByUniqueId(cRMScriptUniqueId: string, eventData: carriers.EventData, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.EventData >;
    ValidateScript(request: carriers.CRMScript_ValidateScriptRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptResult >;
    ValidateScript(cRMScriptId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptResult >;
    ValidateScriptByIncludeId(request: carriers.CRMScript_ValidateScriptByIncludeIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptResult >;
    ValidateScriptByIncludeId(cRMScriptIncludeId: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptResult >;
    ValidateScriptByUniqueId(request: carriers.CRMScript_ValidateScriptByUniqueIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptResult >;
    ValidateScriptByUniqueId(cRMScriptUniqueId: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptResult >;
    GetTriggerScriptEntity(triggerScriptEntityId: number) :  Promise< carriers.TriggerScriptEntity >;
    GetTriggerScriptByUniqueId(request: carriers.CRMScript_GetTriggerScriptByUniqueIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TriggerScriptEntity >;
    GetTriggerScriptByUniqueId(triggerScriptUniqueId: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TriggerScriptEntity >;
    SaveTriggerScriptByUniqueId(request: carriers.CRMScript_SaveTriggerScriptByUniqueIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TriggerScriptEntity >;
    SaveTriggerScriptByUniqueId(triggerScriptUniqueId: string, entity: carriers.TriggerScriptEntity, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TriggerScriptEntity >;
    DeleteTriggerScriptByUniqueId(request: carriers.CRMScript_DeleteTriggerScriptByUniqueIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    DeleteTriggerScriptByUniqueId(triggerScriptUniqueId: string, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    ValidateTriggerScript(request: carriers.CRMScript_ValidateTriggerScriptRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptResult >;
    ValidateTriggerScript(triggerScriptId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptResult >;
    ValidateTriggerScriptByUniqueId(request: carriers.CRMScript_ValidateTriggerScriptByUniqueIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptResult >;
    ValidateTriggerScriptByUniqueId(triggerScriptUniqueId: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptResult >;
} // interface ICRMScriptAgent




/**
 * Manage and execute CRMScript functions.
 */
export class CRMScriptAgent extends base.WebApiBase implements ICRMScriptAgent {
    constructor(baseUrl?: string, languageCode?:string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config:AxiosRequestConfig, languageCode?:string, cultureCode?: string);
    constructor(options: base.WebApiOptions);

    constructor(baseUrlOrOptions: string|base.WebApiOptions|undefined,
                langOrconfigOrRM?: string|base.ResourceParsing|AxiosRequestConfig|any, 
                langOrResourceOrRM?:string|base.ResourceParsing|any, 
                cultureCode?: string, 
                ) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/CRMScript/";
        super(options);
    }



    /**
     * Set default values into a new CRMScriptEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    public async CreateDefaultCRMScriptEntity(options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.CRMScriptEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultCRMScriptEntity", null, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.CRMScriptEntity = converters.Create_CRMScriptEntity_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing CRMScriptEntity or creates a new CRMScriptEntity if the id parameter is empty
     * @param entity - The CRMScriptEntity to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated CRMScriptEntity
     */
    public async SaveCRMScriptEntity(entity: carriers.CRMScriptEntity, options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.CRMScriptEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveCRMScriptEntity", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.CRMScriptEntity = converters.Create_CRMScriptEntity_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /*
     * Deletes the CRMScriptEntity
     * @param CRMScriptEntityId - The id of the CRMScriptEntity to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    public async DeleteCRMScriptEntity(CRMScriptEntityId: number, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteCRMScriptEntity?CRMScriptEntityId=" + CRMScriptEntityId, null, config );
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /**
     * Set default values into a new TriggerScriptEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    public async CreateDefaultTriggerScriptEntity(options?:base.WebApiRequestOptions) : Promise< carriers.TriggerScriptEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TriggerScriptEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultTriggerScriptEntity", null, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.TriggerScriptEntity = converters.Create_TriggerScriptEntity_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing TriggerScriptEntity or creates a new TriggerScriptEntity if the id parameter is empty
     * @param entity - The TriggerScriptEntity to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated TriggerScriptEntity
     */
    public async SaveTriggerScriptEntity(entity: carriers.TriggerScriptEntity, options?:base.WebApiRequestOptions) : Promise< carriers.TriggerScriptEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TriggerScriptEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveTriggerScriptEntity", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.TriggerScriptEntity = converters.Create_TriggerScriptEntity_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /*
     * Deletes the TriggerScriptEntity
     * @param TriggerScriptEntityId - The id of the TriggerScriptEntity to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    public async DeleteTriggerScriptEntity(TriggerScriptEntityId: number, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteTriggerScriptEntity?TriggerScriptEntityId=" + TriggerScriptEntityId, null, config );
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    private async _GetCRMScriptByUniqueIdentifier(request: carriers.CRMScript_GetCRMScriptByUniqueIdentifierRequest, options?:base.WebApiRequestOptions) : Promise< carriers.Script > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.Script >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetCRMScriptByUniqueIdentifier", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.Script = converters.Create_Script_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Get information about a script from a unique identifier
     * @param request - UniqueIdentifier
     * @returns Information about CRMScript
     */
    public async GetCRMScriptByUniqueIdentifier(request: carriers.CRMScript_GetCRMScriptByUniqueIdentifierRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.Script >;

    /**
     * Get information about a script from a unique identifier
     * @param uniqueIdentifier - Global unique reference to script (independent of installation)
     * @returns Information about CRMScript
     */
    public async GetCRMScriptByUniqueIdentifier(uniqueIdentifier: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.Script >;

    public async GetCRMScriptByUniqueIdentifier(uniqueIdentifier:string|carriers.CRMScript_GetCRMScriptByUniqueIdentifierRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.Script > {
        let _request : carriers.CRMScript_GetCRMScriptByUniqueIdentifierRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = uniqueIdentifier;
        if( typeof( first ) === "object" && first && ( typeof(first.UniqueIdentifier)!='undefined' ) )
        {
            _request = uniqueIdentifier as carriers.CRMScript_GetCRMScriptByUniqueIdentifierRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       UniqueIdentifier: uniqueIdentifier as string,
                       };   
            _options = webapi_options;
        }
        return this._GetCRMScriptByUniqueIdentifier( _request, _options );
    }


    private async _SaveCRMScriptByUniqueIdentifier(request: carriers.CRMScript_SaveCRMScriptByUniqueIdentifierRequest, options?:base.WebApiRequestOptions) : Promise< carriers.Script > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.Script >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SaveCRMScriptByUniqueIdentifier", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.Script = converters.Create_Script_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Create or Update the CRMScript information
     * @param request - UniqueIdentifier, Crmscript
     * @returns Information about the CRMScript as saved in the database
     */
    public async SaveCRMScriptByUniqueIdentifier(request: carriers.CRMScript_SaveCRMScriptByUniqueIdentifierRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.Script >;

    /**
     * Create or Update the CRMScript information
     * @param uniqueIdentifier - Global unique reference to script (independent of installation)
     * @param crmscript - Information about the CRMScript
     * @returns Information about the CRMScript as saved in the database
     */
    public async SaveCRMScriptByUniqueIdentifier(uniqueIdentifier: string, crmscript: carriers.Script, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.Script >;

    public async SaveCRMScriptByUniqueIdentifier(uniqueIdentifier:string|carriers.CRMScript_SaveCRMScriptByUniqueIdentifierRequest, crmscript?:carriers.Script|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.Script > {
        let _request : carriers.CRMScript_SaveCRMScriptByUniqueIdentifierRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = uniqueIdentifier;
        if( typeof( first ) === "object" && first && ( typeof(first.UniqueIdentifier)!='undefined' || typeof(first.Crmscript)!='undefined' ) )
        {
            _request = uniqueIdentifier as carriers.CRMScript_SaveCRMScriptByUniqueIdentifierRequest;
            _options = crmscript as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       UniqueIdentifier: uniqueIdentifier as string,
                       Crmscript: crmscript as carriers.Script,
                       };   
            _options = webapi_options;
        }
        return this._SaveCRMScriptByUniqueIdentifier( _request, _options );
    }


    private async _DeleteCRMScriptByUniqueIdentifier(request: carriers.CRMScript_DeleteCRMScriptByUniqueIdentifierRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("DeleteCRMScriptByUniqueIdentifier", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Delete the CRMScript
     * @param request - UniqueIdentifier
     * @returns This method has no return value
     */
    public async DeleteCRMScriptByUniqueIdentifier(request: carriers.CRMScript_DeleteCRMScriptByUniqueIdentifierRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Delete the CRMScript
     * @param uniqueIdentifier - Global unique reference to script (independent of installation)
     * @returns This method has no return value
     */
    public async DeleteCRMScriptByUniqueIdentifier(uniqueIdentifier: string, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async DeleteCRMScriptByUniqueIdentifier(uniqueIdentifier:string|carriers.CRMScript_DeleteCRMScriptByUniqueIdentifierRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.CRMScript_DeleteCRMScriptByUniqueIdentifierRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = uniqueIdentifier;
        if( typeof( first ) === "object" && first && ( typeof(first.UniqueIdentifier)!='undefined' ) )
        {
            _request = uniqueIdentifier as carriers.CRMScript_DeleteCRMScriptByUniqueIdentifierRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       UniqueIdentifier: uniqueIdentifier as string,
                       };   
            _options = webapi_options;
        }
        return this._DeleteCRMScriptByUniqueIdentifier( _request, _options );
    }

    /*
     * Gets a CRMScriptEntity object.
     * @param cRMScriptEntityId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single CRMScriptEntity
     */
    public async GetCRMScriptEntity(cRMScriptEntityId: number, options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.CRMScriptEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetCRMScriptEntity?cRMScriptEntityId=" + cRMScriptEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_CRMScriptEntity_From( response.data );               
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    private async _ExecuteScript(request: carriers.CRMScript_ExecuteScriptRequest, options?:base.WebApiRequestOptions) : Promise< string > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< string >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ExecuteScript", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : string = response.data as string;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Execute a CRMScript with parameters, returning printed output value.
     * @param request - CRMScriptId, Parameters
     * @returns The output produced by the CRMScript
     */
    public async ExecuteScript(request: carriers.CRMScript_ExecuteScriptRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string >;

    /**
     * Execute a CRMScript with parameters, returning printed output value.
     * @param cRMScriptId - The id of the CRMScript to execute
     * @param parameters - Parameters passed as variables to the CRMScript
     * @returns The output produced by the CRMScript
     */
    public async ExecuteScript(cRMScriptId: number, parameters: carriers.StringDictionary, webapi_options?:base.WebApiRequestOptions) : Promise< string >;

    public async ExecuteScript(cRMScriptId:number|carriers.CRMScript_ExecuteScriptRequest, parameters?:carriers.StringDictionary|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< string > {
        let _request : carriers.CRMScript_ExecuteScriptRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = cRMScriptId;
        if( typeof( first ) === "object" && first && ( typeof(first.CRMScriptId)!='undefined' || typeof(first.Parameters)!='undefined' ) )
        {
            _request = cRMScriptId as carriers.CRMScript_ExecuteScriptRequest;
            _options = parameters as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       CRMScriptId: cRMScriptId as number,
                       Parameters: parameters as carriers.StringDictionary,
                       };   
            _options = webapi_options;
        }
        return this._ExecuteScript( _request, _options );
    }


    private async _ExecuteScriptByIncludeId(request: carriers.CRMScript_ExecuteScriptByIncludeIdRequest, options?:base.WebApiRequestOptions) : Promise< string > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< string >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ExecuteScriptByIncludeId", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : string = response.data as string;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Execute a CRMScript with parameters, returning printed output value.
     * @param request - CRMScriptIncludeId, Parameters
     * @returns The output produced by the CRMScript
     */
    public async ExecuteScriptByIncludeId(request: carriers.CRMScript_ExecuteScriptByIncludeIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string >;

    /**
     * Execute a CRMScript with parameters, returning printed output value.
     * @param cRMScriptIncludeId - The include id of the CRMScript to validate
     * @param parameters - Parameters passed as variables to the CRMScript
     * @returns The output produced by the CRMScript
     */
    public async ExecuteScriptByIncludeId(cRMScriptIncludeId: string, parameters: carriers.StringDictionary, webapi_options?:base.WebApiRequestOptions) : Promise< string >;

    public async ExecuteScriptByIncludeId(cRMScriptIncludeId:string|carriers.CRMScript_ExecuteScriptByIncludeIdRequest, parameters?:carriers.StringDictionary|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< string > {
        let _request : carriers.CRMScript_ExecuteScriptByIncludeIdRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = cRMScriptIncludeId;
        if( typeof( first ) === "object" && first && ( typeof(first.CRMScriptIncludeId)!='undefined' || typeof(first.Parameters)!='undefined' ) )
        {
            _request = cRMScriptIncludeId as carriers.CRMScript_ExecuteScriptByIncludeIdRequest;
            _options = parameters as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       CRMScriptIncludeId: cRMScriptIncludeId as string,
                       Parameters: parameters as carriers.StringDictionary,
                       };   
            _options = webapi_options;
        }
        return this._ExecuteScriptByIncludeId( _request, _options );
    }


    private async _ExecuteScriptByUniqueId(request: carriers.CRMScript_ExecuteScriptByUniqueIdRequest, options?:base.WebApiRequestOptions) : Promise< string > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< string >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ExecuteScriptByUniqueId", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : string = response.data as string;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Execute a CRMScript with parameters, returning printed output value.
     * @param request - CRMScriptUniqueId, Parameters
     * @returns The output produced by the CRMScript
     */
    public async ExecuteScriptByUniqueId(request: carriers.CRMScript_ExecuteScriptByUniqueIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string >;

    /**
     * Execute a CRMScript with parameters, returning printed output value.
     * @param cRMScriptUniqueId - The unique id of the CRMScript to validate
     * @param parameters - Parameters passed as variables to the CRMScript
     * @returns The output produced by the CRMScript
     */
    public async ExecuteScriptByUniqueId(cRMScriptUniqueId: string, parameters: carriers.StringDictionary, webapi_options?:base.WebApiRequestOptions) : Promise< string >;

    public async ExecuteScriptByUniqueId(cRMScriptUniqueId:string|carriers.CRMScript_ExecuteScriptByUniqueIdRequest, parameters?:carriers.StringDictionary|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< string > {
        let _request : carriers.CRMScript_ExecuteScriptByUniqueIdRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = cRMScriptUniqueId;
        if( typeof( first ) === "object" && first && ( typeof(first.CRMScriptUniqueId)!='undefined' || typeof(first.Parameters)!='undefined' ) )
        {
            _request = cRMScriptUniqueId as carriers.CRMScript_ExecuteScriptByUniqueIdRequest;
            _options = parameters as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       CRMScriptUniqueId: cRMScriptUniqueId as string,
                       Parameters: parameters as carriers.StringDictionary,
                       };   
            _options = webapi_options;
        }
        return this._ExecuteScriptByUniqueId( _request, _options );
    }


    private async _ExecuteScriptAsEvent(request: carriers.CRMScript_ExecuteScriptAsEventRequest, options?:base.WebApiRequestOptions) : Promise< carriers.EventData > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.EventData >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ExecuteScriptAsEvent", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.EventData = converters.Create_EventData_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Execute a CRMScript with event data as input. Returns event data with output variable values.
     * @param request - CRMScriptId, EventData
     * @returns The EventData instance after script execution with output values
     */
    public async ExecuteScriptAsEvent(request: carriers.CRMScript_ExecuteScriptAsEventRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.EventData >;

    /**
     * Execute a CRMScript with event data as input. Returns event data with output variable values.
     * @param cRMScriptId - The id of the CRMScript to execute
     * @param eventData - The EventData instance sent to the crmscript with input values
     * @returns The EventData instance after script execution with output values
     */
    public async ExecuteScriptAsEvent(cRMScriptId: number, eventData: carriers.EventData, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.EventData >;

    public async ExecuteScriptAsEvent(cRMScriptId:number|carriers.CRMScript_ExecuteScriptAsEventRequest, eventData?:carriers.EventData|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.EventData > {
        let _request : carriers.CRMScript_ExecuteScriptAsEventRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = cRMScriptId;
        if( typeof( first ) === "object" && first && ( typeof(first.CRMScriptId)!='undefined' || typeof(first.EventData)!='undefined' ) )
        {
            _request = cRMScriptId as carriers.CRMScript_ExecuteScriptAsEventRequest;
            _options = eventData as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       CRMScriptId: cRMScriptId as number,
                       EventData: eventData as carriers.EventData,
                       };   
            _options = webapi_options;
        }
        return this._ExecuteScriptAsEvent( _request, _options );
    }


    private async _ExecuteScriptAsEventByUniqueId(request: carriers.CRMScript_ExecuteScriptAsEventByUniqueIdRequest, options?:base.WebApiRequestOptions) : Promise< carriers.EventData > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.EventData >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ExecuteScriptAsEventByUniqueId", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.EventData = converters.Create_EventData_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Execute a CRMScript with event data as input. Returns event data with output variable values.
     * @param request - CRMScriptUniqueId, EventData
     * @returns The EventData instance after script execution with output values
     */
    public async ExecuteScriptAsEventByUniqueId(request: carriers.CRMScript_ExecuteScriptAsEventByUniqueIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.EventData >;

    /**
     * Execute a CRMScript with event data as input. Returns event data with output variable values.
     * @param cRMScriptUniqueId - The unique id of the CRMScript to execute
     * @param eventData - The EventData instance sent to the crmscript with input values
     * @returns The EventData instance after script execution with output values
     */
    public async ExecuteScriptAsEventByUniqueId(cRMScriptUniqueId: string, eventData: carriers.EventData, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.EventData >;

    public async ExecuteScriptAsEventByUniqueId(cRMScriptUniqueId:string|carriers.CRMScript_ExecuteScriptAsEventByUniqueIdRequest, eventData?:carriers.EventData|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.EventData > {
        let _request : carriers.CRMScript_ExecuteScriptAsEventByUniqueIdRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = cRMScriptUniqueId;
        if( typeof( first ) === "object" && first && ( typeof(first.CRMScriptUniqueId)!='undefined' || typeof(first.EventData)!='undefined' ) )
        {
            _request = cRMScriptUniqueId as carriers.CRMScript_ExecuteScriptAsEventByUniqueIdRequest;
            _options = eventData as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       CRMScriptUniqueId: cRMScriptUniqueId as string,
                       EventData: eventData as carriers.EventData,
                       };   
            _options = webapi_options;
        }
        return this._ExecuteScriptAsEventByUniqueId( _request, _options );
    }


    private async _ValidateScript(request: carriers.CRMScript_ValidateScriptRequest, options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptResult > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.CRMScriptResult >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ValidateScript", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.CRMScriptResult = converters.Create_CRMScriptResult_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Validate a CRMScript. This will check that the syntax is correct
     * @param request - CRMScriptId
     * @returns True of the syntax is correct
     */
    public async ValidateScript(request: carriers.CRMScript_ValidateScriptRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptResult >;

    /**
     * Validate a CRMScript. This will check that the syntax is correct
     * @param cRMScriptId - The id of the CRMScript to execute
     * @returns True of the syntax is correct
     */
    public async ValidateScript(cRMScriptId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptResult >;

    public async ValidateScript(cRMScriptId:number|carriers.CRMScript_ValidateScriptRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptResult > {
        let _request : carriers.CRMScript_ValidateScriptRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = cRMScriptId;
        if( typeof( first ) === "object" && first && ( typeof(first.CRMScriptId)!='undefined' ) )
        {
            _request = cRMScriptId as carriers.CRMScript_ValidateScriptRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       CRMScriptId: cRMScriptId as number,
                       };   
            _options = webapi_options;
        }
        return this._ValidateScript( _request, _options );
    }


    private async _ValidateScriptByIncludeId(request: carriers.CRMScript_ValidateScriptByIncludeIdRequest, options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptResult > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.CRMScriptResult >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ValidateScriptByIncludeId", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.CRMScriptResult = converters.Create_CRMScriptResult_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Validate a CRMScript. This will check that the syntax is correct
     * @param request - CRMScriptIncludeId
     * @returns True of the syntax is correct
     */
    public async ValidateScriptByIncludeId(request: carriers.CRMScript_ValidateScriptByIncludeIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptResult >;

    /**
     * Validate a CRMScript. This will check that the syntax is correct
     * @param cRMScriptIncludeId - The include id of the CRMScript to validate
     * @returns True of the syntax is correct
     */
    public async ValidateScriptByIncludeId(cRMScriptIncludeId: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptResult >;

    public async ValidateScriptByIncludeId(cRMScriptIncludeId:string|carriers.CRMScript_ValidateScriptByIncludeIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptResult > {
        let _request : carriers.CRMScript_ValidateScriptByIncludeIdRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = cRMScriptIncludeId;
        if( typeof( first ) === "object" && first && ( typeof(first.CRMScriptIncludeId)!='undefined' ) )
        {
            _request = cRMScriptIncludeId as carriers.CRMScript_ValidateScriptByIncludeIdRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       CRMScriptIncludeId: cRMScriptIncludeId as string,
                       };   
            _options = webapi_options;
        }
        return this._ValidateScriptByIncludeId( _request, _options );
    }


    private async _ValidateScriptByUniqueId(request: carriers.CRMScript_ValidateScriptByUniqueIdRequest, options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptResult > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.CRMScriptResult >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ValidateScriptByUniqueId", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.CRMScriptResult = converters.Create_CRMScriptResult_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Validate a CRMScript. This will check that the syntax is correct
     * @param request - CRMScriptUniqueId
     * @returns True of the syntax is correct
     */
    public async ValidateScriptByUniqueId(request: carriers.CRMScript_ValidateScriptByUniqueIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptResult >;

    /**
     * Validate a CRMScript. This will check that the syntax is correct
     * @param cRMScriptUniqueId - The unique id of the CRMScript to validate
     * @returns True of the syntax is correct
     */
    public async ValidateScriptByUniqueId(cRMScriptUniqueId: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptResult >;

    public async ValidateScriptByUniqueId(cRMScriptUniqueId:string|carriers.CRMScript_ValidateScriptByUniqueIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptResult > {
        let _request : carriers.CRMScript_ValidateScriptByUniqueIdRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = cRMScriptUniqueId;
        if( typeof( first ) === "object" && first && ( typeof(first.CRMScriptUniqueId)!='undefined' ) )
        {
            _request = cRMScriptUniqueId as carriers.CRMScript_ValidateScriptByUniqueIdRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       CRMScriptUniqueId: cRMScriptUniqueId as string,
                       };   
            _options = webapi_options;
        }
        return this._ValidateScriptByUniqueId( _request, _options );
    }

    /*
     * Gets a TriggerScriptEntity object.
     * @param triggerScriptEntityId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single TriggerScriptEntity
     */
    public async GetTriggerScriptEntity(triggerScriptEntityId: number, options?:base.WebApiRequestOptions) : Promise< carriers.TriggerScriptEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TriggerScriptEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetTriggerScriptEntity?triggerScriptEntityId=" + triggerScriptEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_TriggerScriptEntity_From( response.data );               
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    private async _GetTriggerScriptByUniqueId(request: carriers.CRMScript_GetTriggerScriptByUniqueIdRequest, options?:base.WebApiRequestOptions) : Promise< carriers.TriggerScriptEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TriggerScriptEntity >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetTriggerScriptByUniqueId", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.TriggerScriptEntity = converters.Create_TriggerScriptEntity_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Get a trigger CRMScript.
     * @param request - TriggerScriptUniqueId
     * @returns Trigger script details and source code.
     */
    public async GetTriggerScriptByUniqueId(request: carriers.CRMScript_GetTriggerScriptByUniqueIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TriggerScriptEntity >;

    /**
     * Get a trigger CRMScript.
     * @param triggerScriptUniqueId - The unique id of the CRMScript to validate
     * @returns Trigger script details and source code.
     */
    public async GetTriggerScriptByUniqueId(triggerScriptUniqueId: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TriggerScriptEntity >;

    public async GetTriggerScriptByUniqueId(triggerScriptUniqueId:string|carriers.CRMScript_GetTriggerScriptByUniqueIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TriggerScriptEntity > {
        let _request : carriers.CRMScript_GetTriggerScriptByUniqueIdRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = triggerScriptUniqueId;
        if( typeof( first ) === "object" && first && ( typeof(first.TriggerScriptUniqueId)!='undefined' ) )
        {
            _request = triggerScriptUniqueId as carriers.CRMScript_GetTriggerScriptByUniqueIdRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       TriggerScriptUniqueId: triggerScriptUniqueId as string,
                       };   
            _options = webapi_options;
        }
        return this._GetTriggerScriptByUniqueId( _request, _options );
    }


    private async _SaveTriggerScriptByUniqueId(request: carriers.CRMScript_SaveTriggerScriptByUniqueIdRequest, options?:base.WebApiRequestOptions) : Promise< carriers.TriggerScriptEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TriggerScriptEntity >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SaveTriggerScriptByUniqueId", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.TriggerScriptEntity = converters.Create_TriggerScriptEntity_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Validate a CRMScript. This will check that the syntax is correct
     * @param request - TriggerScriptUniqueId, Entity
     * @returns Trigger script details and source code.
     */
    public async SaveTriggerScriptByUniqueId(request: carriers.CRMScript_SaveTriggerScriptByUniqueIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TriggerScriptEntity >;

    /**
     * Validate a CRMScript. This will check that the syntax is correct
     * @param triggerScriptUniqueId - The unique id of the CRMScript to validate
     * @param entity - Trigger script details and source code
     * @returns Trigger script details and source code.
     */
    public async SaveTriggerScriptByUniqueId(triggerScriptUniqueId: string, entity: carriers.TriggerScriptEntity, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TriggerScriptEntity >;

    public async SaveTriggerScriptByUniqueId(triggerScriptUniqueId:string|carriers.CRMScript_SaveTriggerScriptByUniqueIdRequest, entity?:carriers.TriggerScriptEntity|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TriggerScriptEntity > {
        let _request : carriers.CRMScript_SaveTriggerScriptByUniqueIdRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = triggerScriptUniqueId;
        if( typeof( first ) === "object" && first && ( typeof(first.TriggerScriptUniqueId)!='undefined' || typeof(first.Entity)!='undefined' ) )
        {
            _request = triggerScriptUniqueId as carriers.CRMScript_SaveTriggerScriptByUniqueIdRequest;
            _options = entity as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       TriggerScriptUniqueId: triggerScriptUniqueId as string,
                       Entity: entity as carriers.TriggerScriptEntity,
                       };   
            _options = webapi_options;
        }
        return this._SaveTriggerScriptByUniqueId( _request, _options );
    }


    private async _DeleteTriggerScriptByUniqueId(request: carriers.CRMScript_DeleteTriggerScriptByUniqueIdRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("DeleteTriggerScriptByUniqueId", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Delete a trigger CRMScript.
     * @param request - TriggerScriptUniqueId
     * @returns This method has no return value
     */
    public async DeleteTriggerScriptByUniqueId(request: carriers.CRMScript_DeleteTriggerScriptByUniqueIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Delete a trigger CRMScript.
     * @param triggerScriptUniqueId - The unique id of the CRMScript to validate
     * @returns This method has no return value
     */
    public async DeleteTriggerScriptByUniqueId(triggerScriptUniqueId: string, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async DeleteTriggerScriptByUniqueId(triggerScriptUniqueId:string|carriers.CRMScript_DeleteTriggerScriptByUniqueIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.CRMScript_DeleteTriggerScriptByUniqueIdRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = triggerScriptUniqueId;
        if( typeof( first ) === "object" && first && ( typeof(first.TriggerScriptUniqueId)!='undefined' ) )
        {
            _request = triggerScriptUniqueId as carriers.CRMScript_DeleteTriggerScriptByUniqueIdRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       TriggerScriptUniqueId: triggerScriptUniqueId as string,
                       };   
            _options = webapi_options;
        }
        return this._DeleteTriggerScriptByUniqueId( _request, _options );
    }


    private async _ValidateTriggerScript(request: carriers.CRMScript_ValidateTriggerScriptRequest, options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptResult > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.CRMScriptResult >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ValidateTriggerScript", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.CRMScriptResult = converters.Create_CRMScriptResult_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Validate a Trigger CRMScript. This will check that the syntax is correct, but not execute the script.
     * @param request - TriggerScriptId
     * @returns True of the syntax is correct
     */
    public async ValidateTriggerScript(request: carriers.CRMScript_ValidateTriggerScriptRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptResult >;

    /**
     * Validate a Trigger CRMScript. This will check that the syntax is correct, but not execute the script.
     * @param triggerScriptId - The id of the CRMScript Trigger to validate
     * @returns True of the syntax is correct
     */
    public async ValidateTriggerScript(triggerScriptId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptResult >;

    public async ValidateTriggerScript(triggerScriptId:number|carriers.CRMScript_ValidateTriggerScriptRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptResult > {
        let _request : carriers.CRMScript_ValidateTriggerScriptRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = triggerScriptId;
        if( typeof( first ) === "object" && first && ( typeof(first.TriggerScriptId)!='undefined' ) )
        {
            _request = triggerScriptId as carriers.CRMScript_ValidateTriggerScriptRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       TriggerScriptId: triggerScriptId as number,
                       };   
            _options = webapi_options;
        }
        return this._ValidateTriggerScript( _request, _options );
    }


    private async _ValidateTriggerScriptByUniqueId(request: carriers.CRMScript_ValidateTriggerScriptByUniqueIdRequest, options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptResult > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.CRMScriptResult >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ValidateTriggerScriptByUniqueId", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.CRMScriptResult = converters.Create_CRMScriptResult_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Validate a Trigger CRMScript. This will check that the syntax is correct, but not execute the script.
     * @param request - TriggerScriptUniqueId
     * @returns True of the syntax is correct
     */
    public async ValidateTriggerScriptByUniqueId(request: carriers.CRMScript_ValidateTriggerScriptByUniqueIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptResult >;

    /**
     * Validate a Trigger CRMScript. This will check that the syntax is correct, but not execute the script.
     * @param triggerScriptUniqueId - The unique id of the CRMScript to validate
     * @returns True of the syntax is correct
     */
    public async ValidateTriggerScriptByUniqueId(triggerScriptUniqueId: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptResult >;

    public async ValidateTriggerScriptByUniqueId(triggerScriptUniqueId:string|carriers.CRMScript_ValidateTriggerScriptByUniqueIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.CRMScriptResult > {
        let _request : carriers.CRMScript_ValidateTriggerScriptByUniqueIdRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = triggerScriptUniqueId;
        if( typeof( first ) === "object" && first && ( typeof(first.TriggerScriptUniqueId)!='undefined' ) )
        {
            _request = triggerScriptUniqueId as carriers.CRMScript_ValidateTriggerScriptByUniqueIdRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       TriggerScriptUniqueId: triggerScriptUniqueId as string,
                       };   
            _options = webapi_options;
        }
        return this._ValidateTriggerScriptByUniqueId( _request, _options );
    }

    } // class v1CRMScriptAgentController 


