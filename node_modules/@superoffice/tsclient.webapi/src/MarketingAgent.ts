// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>


/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
//
// File:          WebApi/MarketingAgent.ts
//
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------

import { AxiosRequestConfig } from 'axios';
import * as moment from 'moment';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
import * as converters from './Converters';
import { FromBase64ToString, ToBase64 } from './Base64';

/**
 * Agent used for Marketing functions, such as Forms
 */
export interface IMarketingAgent {
    CreateDefaultFormEntity(): Promise< carriers.FormEntity >;
    SaveFormEntity(entity: carriers.FormEntity) : Promise< carriers.FormEntity >;
    DeleteFormEntity(FormEntityId: number) : Promise<void>;
    CreateDefaultFormSubmissionEntity(): Promise< carriers.FormSubmissionEntity >;
    SaveFormSubmissionEntity(entity: carriers.FormSubmissionEntity) : Promise< carriers.FormSubmissionEntity >;
    DeleteFormSubmissionEntity(FormSubmissionEntityId: number) : Promise<void>;
    CreateDefaultShipmentMessageBlockEntity(): Promise< carriers.ShipmentMessageBlockEntity >;
    SaveShipmentMessageBlockEntity(entity: carriers.ShipmentMessageBlockEntity) : Promise< carriers.ShipmentMessageBlockEntity >;
    DeleteShipmentMessageBlockEntity(ShipmentMessageBlockEntityId: number) : Promise<void>;
    CreateDefaultShipmentMessageEntity(): Promise< carriers.ShipmentMessageEntity >;
    SaveShipmentMessageEntity(entity: carriers.ShipmentMessageEntity) : Promise< carriers.ShipmentMessageEntity >;
    DeleteShipmentMessageEntity(ShipmentMessageEntityId: number) : Promise<void>;
    GetFormEntity(formEntityId: number) :  Promise< carriers.FormEntity >;
    VerifyGoogleRecaptcha(request: carriers.Marketing_VerifyGoogleRecaptchaRequest, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;
    VerifyGoogleRecaptcha(token: string, optionalSecretKey: string, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;
    GetFormSubmissionEntity(formSubmissionEntityId: number) :  Promise< carriers.FormSubmissionEntity >;
    CalculateMailingStatistics(request: carriers.Marketing_CalculateMailingStatisticsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< number >;
    CalculateMailingStatistics(shipmentId: number, webapi_options?:base.WebApiRequestOptions) : Promise< number >;
    GetFormSubmissionsCount(request: carriers.Marketing_GetFormSubmissionsCountRequest, webapi_options?:base.WebApiRequestOptions) : Promise< number >;
    GetFormSubmissionsCount(formId: number, status: enums.FormSubmissionStatus, webapi_options?:base.WebApiRequestOptions) : Promise< number >;
    GetPreviewMailing(request: carriers.Marketing_GetPreviewMailingRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PreviewMailing >;
    GetPreviewMailing(shipmentAddrId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PreviewMailing >;
    GetPreviewMailingHeader(request: carriers.Marketing_GetPreviewMailingHeaderRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PreviewMailingHeader >;
    GetPreviewMailingHeader(shipmentId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PreviewMailingHeader >;
    GetShipmentMessageBlockEntity(shipmentMessageBlockEntityId: number) :  Promise< carriers.ShipmentMessageBlockEntity >;
    GetUserBlocks(request: carriers.Marketing_GetUserBlocksRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ShipmentMessageBlockEntity[] >;
    GetUserBlocks(associateId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ShipmentMessageBlockEntity[] >;
    GetShipmentMessageEntity(shipmentMessageEntityId: number) :  Promise< carriers.ShipmentMessageEntity >;
} // interface IMarketingAgent




/**
 * Agent used for Marketing functions, such as Forms
 */
export class MarketingAgent extends base.WebApiBase implements IMarketingAgent {
    constructor(baseUrl?: string, languageCode?:string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config:AxiosRequestConfig, languageCode?:string, cultureCode?: string);
    constructor(options: base.WebApiOptions);

    constructor(baseUrlOrOptions: string|base.WebApiOptions|undefined,
                langOrconfigOrRM?: string|base.ResourceParsing|AxiosRequestConfig|any, 
                langOrResourceOrRM?:string|base.ResourceParsing|any, 
                cultureCode?: string, 
                ) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Marketing/";
        super(options);
    }



    /**
     * Set default values into a new FormEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    public async CreateDefaultFormEntity(options?:base.WebApiRequestOptions) : Promise< carriers.FormEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.FormEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultFormEntity", null, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.FormEntity = converters.Create_FormEntity_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing FormEntity or creates a new FormEntity if the id parameter is empty
     * @param entity - The FormEntity to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated FormEntity
     */
    public async SaveFormEntity(entity: carriers.FormEntity, options?:base.WebApiRequestOptions) : Promise< carriers.FormEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.FormEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveFormEntity", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.FormEntity = converters.Create_FormEntity_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /*
     * Deletes the FormEntity
     * @param FormEntityId - The id of the FormEntity to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    public async DeleteFormEntity(FormEntityId: number, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteFormEntity?FormEntityId=" + FormEntityId, null, config );
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /**
     * Set default values into a new FormSubmissionEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    public async CreateDefaultFormSubmissionEntity(options?:base.WebApiRequestOptions) : Promise< carriers.FormSubmissionEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.FormSubmissionEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultFormSubmissionEntity", null, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.FormSubmissionEntity = converters.Create_FormSubmissionEntity_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing FormSubmissionEntity or creates a new FormSubmissionEntity if the id parameter is empty
     * @param entity - The FormSubmissionEntity to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated FormSubmissionEntity
     */
    public async SaveFormSubmissionEntity(entity: carriers.FormSubmissionEntity, options?:base.WebApiRequestOptions) : Promise< carriers.FormSubmissionEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.FormSubmissionEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveFormSubmissionEntity", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.FormSubmissionEntity = converters.Create_FormSubmissionEntity_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /*
     * Deletes the FormSubmissionEntity
     * @param FormSubmissionEntityId - The id of the FormSubmissionEntity to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    public async DeleteFormSubmissionEntity(FormSubmissionEntityId: number, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteFormSubmissionEntity?FormSubmissionEntityId=" + FormSubmissionEntityId, null, config );
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /**
     * Set default values into a new ShipmentMessageBlockEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    public async CreateDefaultShipmentMessageBlockEntity(options?:base.WebApiRequestOptions) : Promise< carriers.ShipmentMessageBlockEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ShipmentMessageBlockEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultShipmentMessageBlockEntity", null, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ShipmentMessageBlockEntity = converters.Create_ShipmentMessageBlockEntity_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing ShipmentMessageBlockEntity or creates a new ShipmentMessageBlockEntity if the id parameter is empty
     * @param entity - The ShipmentMessageBlockEntity to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated ShipmentMessageBlockEntity
     */
    public async SaveShipmentMessageBlockEntity(entity: carriers.ShipmentMessageBlockEntity, options?:base.WebApiRequestOptions) : Promise< carriers.ShipmentMessageBlockEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ShipmentMessageBlockEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveShipmentMessageBlockEntity", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ShipmentMessageBlockEntity = converters.Create_ShipmentMessageBlockEntity_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /*
     * Deletes the ShipmentMessageBlockEntity
     * @param ShipmentMessageBlockEntityId - The id of the ShipmentMessageBlockEntity to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    public async DeleteShipmentMessageBlockEntity(ShipmentMessageBlockEntityId: number, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteShipmentMessageBlockEntity?ShipmentMessageBlockEntityId=" + ShipmentMessageBlockEntityId, null, config );
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /**
     * Set default values into a new ShipmentMessageEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    public async CreateDefaultShipmentMessageEntity(options?:base.WebApiRequestOptions) : Promise< carriers.ShipmentMessageEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ShipmentMessageEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultShipmentMessageEntity", null, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ShipmentMessageEntity = converters.Create_ShipmentMessageEntity_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing ShipmentMessageEntity or creates a new ShipmentMessageEntity if the id parameter is empty
     * @param entity - The ShipmentMessageEntity to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated ShipmentMessageEntity
     */
    public async SaveShipmentMessageEntity(entity: carriers.ShipmentMessageEntity, options?:base.WebApiRequestOptions) : Promise< carriers.ShipmentMessageEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ShipmentMessageEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveShipmentMessageEntity", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ShipmentMessageEntity = converters.Create_ShipmentMessageEntity_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /*
     * Deletes the ShipmentMessageEntity
     * @param ShipmentMessageEntityId - The id of the ShipmentMessageEntity to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    public async DeleteShipmentMessageEntity(ShipmentMessageEntityId: number, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteShipmentMessageEntity?ShipmentMessageEntityId=" + ShipmentMessageEntityId, null, config );
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Gets a FormEntity object.
     * @param formEntityId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single FormEntity
     */
    public async GetFormEntity(formEntityId: number, options?:base.WebApiRequestOptions) : Promise< carriers.FormEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.FormEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetFormEntity?formEntityId=" + formEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_FormEntity_From( response.data );               
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    private async _VerifyGoogleRecaptcha(request: carriers.Marketing_VerifyGoogleRecaptchaRequest, options?:base.WebApiRequestOptions) : Promise< boolean > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< boolean >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("VerifyGoogleRecaptcha", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : boolean = response.data as boolean;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * This method will try to verify a Google recaptcha token. The token is gained from the recaptcha frontend component
     * @param request - Token, OptionalSecretKey
     * @returns Returns true if the recaptcha token verified successfully
     */
    public async VerifyGoogleRecaptcha(request: carriers.Marketing_VerifyGoogleRecaptchaRequest, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;

    /**
     * This method will try to verify a Google recaptcha token. The token is gained from the recaptcha frontend component
     * @param token - The token to be verified
     * @param optionalSecretKey - Use an optional secret key instead of the system wide
     * @returns Returns true if the recaptcha token verified successfully
     */
    public async VerifyGoogleRecaptcha(token: string, optionalSecretKey: string, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;

    public async VerifyGoogleRecaptcha(token:string|carriers.Marketing_VerifyGoogleRecaptchaRequest, optionalSecretKey?:string|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< boolean > {
        let _request : carriers.Marketing_VerifyGoogleRecaptchaRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = token;
        if( typeof( first ) === "object" && first && ( typeof(first.Token)!='undefined' || typeof(first.OptionalSecretKey)!='undefined' ) )
        {
            _request = token as carriers.Marketing_VerifyGoogleRecaptchaRequest;
            _options = optionalSecretKey as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       Token: token as string,
                       OptionalSecretKey: optionalSecretKey as string,
                       };   
            _options = webapi_options;
        }
        return this._VerifyGoogleRecaptcha( _request, _options );
    }

    /*
     * Gets a FormSubmissionEntity object.
     * @param formSubmissionEntityId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single FormSubmissionEntity
     */
    public async GetFormSubmissionEntity(formSubmissionEntityId: number, options?:base.WebApiRequestOptions) : Promise< carriers.FormSubmissionEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.FormSubmissionEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetFormSubmissionEntity?formSubmissionEntityId=" + formSubmissionEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_FormSubmissionEntity_From( response.data );               
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    private async _CalculateMailingStatistics(request: carriers.Marketing_CalculateMailingStatisticsRequest, options?:base.WebApiRequestOptions) : Promise< number > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< number >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("CalculateMailingStatistics", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : number = response.data as number;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Calculate open and click rates for one or more mailings
     * @param request - ShipmentId
     * @returns Number of shipments updated with calculated statistics
     */
    public async CalculateMailingStatistics(request: carriers.Marketing_CalculateMailingStatisticsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< number >;

    /**
     * Calculate open and click rates for one or more mailings
     * @param shipmentId - If 0, calculate rates for all dirty (are_statistics_dirty) shipments
     * @returns Number of shipments updated with calculated statistics
     */
    public async CalculateMailingStatistics(shipmentId: number, webapi_options?:base.WebApiRequestOptions) : Promise< number >;

    public async CalculateMailingStatistics(shipmentId:number|carriers.Marketing_CalculateMailingStatisticsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< number > {
        let _request : carriers.Marketing_CalculateMailingStatisticsRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = shipmentId;
        if( typeof( first ) === "object" && first && ( typeof(first.ShipmentId)!='undefined' ) )
        {
            _request = shipmentId as carriers.Marketing_CalculateMailingStatisticsRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ShipmentId: shipmentId as number,
                       };   
            _options = webapi_options;
        }
        return this._CalculateMailingStatistics( _request, _options );
    }


    private async _GetFormSubmissionsCount(request: carriers.Marketing_GetFormSubmissionsCountRequest, options?:base.WebApiRequestOptions) : Promise< number > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< number >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetFormSubmissionsCount", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : number = response.data as number;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Get counnt of submissions for given form and status. Count for all forms is returned if negative formId is given
     * @param request - FormId, Status
     * @returns Number of formsubmissions
     */
    public async GetFormSubmissionsCount(request: carriers.Marketing_GetFormSubmissionsCountRequest, webapi_options?:base.WebApiRequestOptions) : Promise< number >;

    /**
     * Get counnt of submissions for given form and status. Count for all forms is returned if negative formId is given
     * @param formId - If 0 or less, return count for all forms
     * @param status - Which status the submissions should have. If Unknown, return count of all statuses
     * @returns Number of formsubmissions
     */
    public async GetFormSubmissionsCount(formId: number, status: enums.FormSubmissionStatus, webapi_options?:base.WebApiRequestOptions) : Promise< number >;

    public async GetFormSubmissionsCount(formId:number|carriers.Marketing_GetFormSubmissionsCountRequest, status?:enums.FormSubmissionStatus|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< number > {
        let _request : carriers.Marketing_GetFormSubmissionsCountRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = formId;
        if( typeof( first ) === "object" && first && ( typeof(first.FormId)!='undefined' || typeof(first.Status)!='undefined' ) )
        {
            _request = formId as carriers.Marketing_GetFormSubmissionsCountRequest;
            _options = status as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       FormId: formId as number,
                       Status: status as enums.FormSubmissionStatus,
                       };   
            _options = webapi_options;
        }
        return this._GetFormSubmissionsCount( _request, _options );
    }


    private async _GetPreviewMailing(request: carriers.Marketing_GetPreviewMailingRequest, options?:base.WebApiRequestOptions) : Promise< carriers.PreviewMailing > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.PreviewMailing >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetPreviewMailing", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.PreviewMailing = converters.Create_PreviewMailing_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Get a shipment message from its shipment address id
     * @param request - ShipmentAddrId
     * @returns PreviewMailing
     */
    public async GetPreviewMailing(request: carriers.Marketing_GetPreviewMailingRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PreviewMailing >;

    /**
     * Get a shipment message from its shipment address id
     * @param shipmentAddrId - Shipment address id
     * @returns PreviewMailing
     */
    public async GetPreviewMailing(shipmentAddrId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PreviewMailing >;

    public async GetPreviewMailing(shipmentAddrId:number|carriers.Marketing_GetPreviewMailingRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PreviewMailing > {
        let _request : carriers.Marketing_GetPreviewMailingRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = shipmentAddrId;
        if( typeof( first ) === "object" && first && ( typeof(first.ShipmentAddrId)!='undefined' ) )
        {
            _request = shipmentAddrId as carriers.Marketing_GetPreviewMailingRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ShipmentAddrId: shipmentAddrId as number,
                       };   
            _options = webapi_options;
        }
        return this._GetPreviewMailing( _request, _options );
    }


    private async _GetPreviewMailingHeader(request: carriers.Marketing_GetPreviewMailingHeaderRequest, options?:base.WebApiRequestOptions) : Promise< carriers.PreviewMailingHeader > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.PreviewMailingHeader >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetPreviewMailingHeader", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.PreviewMailingHeader = converters.Create_PreviewMailingHeader_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Get a shipment from its shipment id
     * @param request - ShipmentId
     * @returns PreviewMailingHeader
     */
    public async GetPreviewMailingHeader(request: carriers.Marketing_GetPreviewMailingHeaderRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PreviewMailingHeader >;

    /**
     * Get a shipment from its shipment id
     * @param shipmentId - Shipment id
     * @returns PreviewMailingHeader
     */
    public async GetPreviewMailingHeader(shipmentId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PreviewMailingHeader >;

    public async GetPreviewMailingHeader(shipmentId:number|carriers.Marketing_GetPreviewMailingHeaderRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PreviewMailingHeader > {
        let _request : carriers.Marketing_GetPreviewMailingHeaderRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = shipmentId;
        if( typeof( first ) === "object" && first && ( typeof(first.ShipmentId)!='undefined' ) )
        {
            _request = shipmentId as carriers.Marketing_GetPreviewMailingHeaderRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ShipmentId: shipmentId as number,
                       };   
            _options = webapi_options;
        }
        return this._GetPreviewMailingHeader( _request, _options );
    }

    /*
     * Gets a ShipmentMessageBlockEntity object.
     * @param shipmentMessageBlockEntityId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single ShipmentMessageBlockEntity
     */
    public async GetShipmentMessageBlockEntity(shipmentMessageBlockEntityId: number, options?:base.WebApiRequestOptions) : Promise< carriers.ShipmentMessageBlockEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ShipmentMessageBlockEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetShipmentMessageBlockEntity?shipmentMessageBlockEntityId=" + shipmentMessageBlockEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ShipmentMessageBlockEntity_From( response.data );               
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    private async _GetUserBlocks(request: carriers.Marketing_GetUserBlocksRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ShipmentMessageBlockEntity[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ShipmentMessageBlockEntity[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetUserBlocks", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ShipmentMessageBlockEntity[] = converters.Create_ShipmentMessageBlockEntityArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Get the saved user blocks to be used in a shipment/mailing message
     * @param request - AssociateId
     * @returns An array of user blocks
     */
    public async GetUserBlocks(request: carriers.Marketing_GetUserBlocksRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ShipmentMessageBlockEntity[] >;

    /**
     * Get the saved user blocks to be used in a shipment/mailing message
     * @param associateId - The associate id to get the user blocks. 0 will get all saved blocks
     * @returns An array of user blocks
     */
    public async GetUserBlocks(associateId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ShipmentMessageBlockEntity[] >;

    public async GetUserBlocks(associateId:number|carriers.Marketing_GetUserBlocksRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ShipmentMessageBlockEntity[] > {
        let _request : carriers.Marketing_GetUserBlocksRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = associateId;
        if( typeof( first ) === "object" && first && ( typeof(first.AssociateId)!='undefined' ) )
        {
            _request = associateId as carriers.Marketing_GetUserBlocksRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       AssociateId: associateId as number,
                       };   
            _options = webapi_options;
        }
        return this._GetUserBlocks( _request, _options );
    }

    /*
     * Gets a ShipmentMessageEntity object.
     * @param shipmentMessageEntityId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single ShipmentMessageEntity
     */
    public async GetShipmentMessageEntity(shipmentMessageEntityId: number, options?:base.WebApiRequestOptions) : Promise< carriers.ShipmentMessageEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ShipmentMessageEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetShipmentMessageEntity?shipmentMessageEntityId=" + shipmentMessageEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ShipmentMessageEntity_From( response.data );               
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    } // class v1MarketingAgentController 


