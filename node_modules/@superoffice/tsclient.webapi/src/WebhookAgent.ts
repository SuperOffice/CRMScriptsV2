// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>


/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
//
// File:          WebApi/WebhookAgent.ts
//
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------

import { AxiosRequestConfig } from 'axios';
import * as moment from 'moment';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
import * as converters from './Converters';
import { FromBase64ToString, ToBase64 } from './Base64';

/**
 * Webhook definitions - webhooks signal other systems about events inside NetServer
 * 
 * **Online Restricted:** This agent is not available in Online by default. Access must be requested specifically when app is registered.
 */
export interface IWebhookAgent {
    CreateDefaultWebhook(): Promise< carriers.Webhook >;
    SaveWebhook(entity: carriers.Webhook) : Promise< carriers.Webhook >;
    DeleteWebhook(WebhookId: number) : Promise<void>;
    GetWebhook(webhookId: number) :  Promise< carriers.Webhook >;
    GetAllWebhooks(request: carriers.Webhook_GetAllWebhooksRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.Webhook[] >;
    GetAllWebhooks(nameFilter: string, eventFilter: string, statusFilter: enums.WebhookState, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.Webhook[] >;
    TestWebhook(request: carriers.Webhook_TestWebhookRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.WebhookResult >;
    TestWebhook(webhook: carriers.Webhook, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.WebhookResult >;
    SignalEvent(request: carriers.Webhook_SignalEventRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    SignalEvent(eventName: string, primaryKey: number, data: carriers.StringObjectDictionary, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    GetLastError(request: carriers.Webhook_GetLastErrorRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string >;
    GetLastError(webhookId: number, webapi_options?:base.WebApiRequestOptions) : Promise< string >;
} // interface IWebhookAgent




/**
 * Webhook definitions - webhooks signal other systems about events inside NetServer
 */
export class WebhookAgent extends base.WebApiBase implements IWebhookAgent {
    constructor(baseUrl?: string, languageCode?:string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config:AxiosRequestConfig, languageCode?:string, cultureCode?: string);
    constructor(options: base.WebApiOptions);

    constructor(baseUrlOrOptions: string|base.WebApiOptions|undefined,
                langOrconfigOrRM?: string|base.ResourceParsing|AxiosRequestConfig|any, 
                langOrResourceOrRM?:string|base.ResourceParsing|any, 
                cultureCode?: string, 
                ) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Webhook/";
        super(options);
    }



    /**
     * Set default values into a new Webhook.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    public async CreateDefaultWebhook(options?:base.WebApiRequestOptions) : Promise< carriers.Webhook > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.Webhook >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultWebhook", null, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.Webhook = converters.Create_Webhook_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing Webhook or creates a new Webhook if the id parameter is empty
     * @param entity - The Webhook to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated Webhook
     */
    public async SaveWebhook(entity: carriers.Webhook, options?:base.WebApiRequestOptions) : Promise< carriers.Webhook > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.Webhook >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveWebhook", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.Webhook = converters.Create_Webhook_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /*
     * Deletes the Webhook
     * @param WebhookId - The id of the Webhook to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    public async DeleteWebhook(WebhookId: number, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteWebhook?WebhookId=" + WebhookId, null, config );
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Gets a Webhook object.
     * @param webhookId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single Webhook
     */
    public async GetWebhook(webhookId: number, options?:base.WebApiRequestOptions) : Promise< carriers.Webhook > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.Webhook >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetWebhook?webhookId=" + webhookId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_Webhook_From( response.data );               
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    private async _GetAllWebhooks(request: carriers.Webhook_GetAllWebhooksRequest, options?:base.WebApiRequestOptions) : Promise< carriers.Webhook[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.Webhook[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetAllWebhooks", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.Webhook[] = converters.Create_WebhookArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Returns all webhooks, according to filter criteria
     * @param request - NameFilter, EventFilter, StatusFilter
     * @returns Array of all webhooks, filtered according to given criteria.
     */
    public async GetAllWebhooks(request: carriers.Webhook_GetAllWebhooksRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.Webhook[] >;

    /**
     * Returns all webhooks, according to filter criteria
     * @param nameFilter - Only return hooks with this name. Default NULL = no filter
     * @param eventFilter - Only return hooks responding to this event name. Default NULL = no filter
     * @param statusFilter - Only return hooks with this status. Default Unknown = no filter, returns all.
     * @returns Array of all webhooks, filtered according to given criteria.
     */
    public async GetAllWebhooks(nameFilter: string, eventFilter: string, statusFilter: enums.WebhookState, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.Webhook[] >;

    public async GetAllWebhooks(nameFilter:string|carriers.Webhook_GetAllWebhooksRequest, eventFilter?:string|base.WebApiRequestOptions, statusFilter?:enums.WebhookState, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.Webhook[] > {
        let _request : carriers.Webhook_GetAllWebhooksRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = nameFilter;
        if( typeof( first ) === "object" && first && ( typeof(first.NameFilter)!='undefined' || typeof(first.EventFilter)!='undefined' || typeof(first.StatusFilter)!='undefined' ) )
        {
            _request = nameFilter as carriers.Webhook_GetAllWebhooksRequest;
            _options = eventFilter as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       NameFilter: nameFilter as string,
                       EventFilter: eventFilter as string,
                       StatusFilter: statusFilter as enums.WebhookState,
                       };   
            _options = webapi_options;
        }
        return this._GetAllWebhooks( _request, _options );
    }


    private async _TestWebhook(request: carriers.Webhook_TestWebhookRequest, options?:base.WebApiRequestOptions) : Promise< carriers.WebhookResult > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.WebhookResult >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("TestWebhook", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.WebhookResult = converters.Create_WebhookResult_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Pings a webhook with a &apos;test&apos; event, returns SUCCESS(true) or FAILURE(false) + the response from the webhook target.
     * @param request - Webhook
     * @returns Result of calling webhook. Sucess=true/false + Error message
     */
    public async TestWebhook(request: carriers.Webhook_TestWebhookRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.WebhookResult >;

    /**
     * Pings a webhook with a &apos;test&apos; event, returns SUCCESS(true) or FAILURE(false) + the response from the webhook target.
     * @param webhook - Webhook definition to ping. Must contain a valid TargetUrl.
     * @returns Result of calling webhook. Sucess=true/false + Error message
     */
    public async TestWebhook(webhook: carriers.Webhook, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.WebhookResult >;

    public async TestWebhook(webhook:carriers.Webhook|carriers.Webhook_TestWebhookRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.WebhookResult > {
        let _request : carriers.Webhook_TestWebhookRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = webhook;
        if( typeof( first ) === "object" && first && ( typeof(first.Webhook)!='undefined' ) )
        {
            _request = webhook as carriers.Webhook_TestWebhookRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       Webhook: webhook as carriers.Webhook,
                       };   
            _options = webapi_options;
        }
        return this._TestWebhook( _request, _options );
    }


    private async _SignalEvent(request: carriers.Webhook_SignalEventRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SignalEvent", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Signal webhooks that an event has occurred. All webhooks listening for the event will be notified.
     * @param request - EventName, PrimaryKey, Data
     * @returns This method has no return value
     */
    public async SignalEvent(request: carriers.Webhook_SignalEventRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Signal webhooks that an event has occurred. All webhooks listening for the event will be notified.
     * @param eventName - Name of event to fire. 'entity.verb' For example: 'window.closed', 'button.clicked'.
     * @param primaryKey - (Optional) Id of entity that is firing event. Can be 0 if not used.
     * @param data - Event data. Not all the data values may be posted to the webhook, depending in webhook type: { 'windowName': 'foo', 'widgets': 123 }
     * @returns This method has no return value
     */
    public async SignalEvent(eventName: string, primaryKey: number, data: carriers.StringObjectDictionary, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async SignalEvent(eventName:string|carriers.Webhook_SignalEventRequest, primaryKey?:number|base.WebApiRequestOptions, data?:carriers.StringObjectDictionary, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.Webhook_SignalEventRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = eventName;
        if( typeof( first ) === "object" && first && ( typeof(first.EventName)!='undefined' || typeof(first.PrimaryKey)!='undefined' || typeof(first.Data)!='undefined' ) )
        {
            _request = eventName as carriers.Webhook_SignalEventRequest;
            _options = primaryKey as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       EventName: eventName as string,
                       PrimaryKey: primaryKey as number,
                       Data: data as carriers.StringObjectDictionary,
                       };   
            _options = webapi_options;
        }
        return this._SignalEvent( _request, _options );
    }


    private async _GetLastError(request: carriers.Webhook_GetLastErrorRequest, options?:base.WebApiRequestOptions) : Promise< string > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< string >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetLastError", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : string = response.data as string;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Return the most recent error message received when calling this webhook.
     * @param request - WebhookId
     * @returns Error message, or empty string if no errors received
     */
    public async GetLastError(request: carriers.Webhook_GetLastErrorRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string >;

    /**
     * Return the most recent error message received when calling this webhook.
     * @param webhookId - Webhook to get error message for.
     * @returns Error message, or empty string if no errors received
     */
    public async GetLastError(webhookId: number, webapi_options?:base.WebApiRequestOptions) : Promise< string >;

    public async GetLastError(webhookId:number|carriers.Webhook_GetLastErrorRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string > {
        let _request : carriers.Webhook_GetLastErrorRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = webhookId;
        if( typeof( first ) === "object" && first && ( typeof(first.WebhookId)!='undefined' ) )
        {
            _request = webhookId as carriers.Webhook_GetLastErrorRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       WebhookId: webhookId as number,
                       };   
            _options = webapi_options;
        }
        return this._GetLastError( _request, _options );
    }

    } // class v1WebhookAgentController 


