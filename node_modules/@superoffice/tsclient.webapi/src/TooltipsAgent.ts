// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>


/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
//
// File:          WebApi/TooltipsAgent.ts
//
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------

import { AxiosRequestConfig } from 'axios';
import * as moment from 'moment';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
import * as converters from './Converters';
import { FromBase64ToString, ToBase64 } from './Base64';

/**
 * Tooltip system, hint to text transformation
 */
export interface ITooltipsAgent {
    GetTooltip(request: carriers.Tooltips_GetTooltipRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string >;
    GetTooltip(tooltipHint: string, webapi_options?:base.WebApiRequestOptions) : Promise< string >;
} // interface ITooltipsAgent




/**
 * Tooltip system, hint to text transformation
 */
export class TooltipsAgent extends base.WebApiBase implements ITooltipsAgent {
    constructor(baseUrl?: string, languageCode?:string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config:AxiosRequestConfig, languageCode?:string, cultureCode?: string);
    constructor(options: base.WebApiOptions);

    constructor(baseUrlOrOptions: string|base.WebApiOptions|undefined,
                langOrconfigOrRM?: string|base.ResourceParsing|AxiosRequestConfig|any, 
                langOrResourceOrRM?:string|base.ResourceParsing|any, 
                cultureCode?: string, 
                ) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Tooltips/";
        super(options);
    }



    private async _GetTooltip(request: carriers.Tooltips_GetTooltipRequest, options?:base.WebApiRequestOptions) : Promise< string > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< string >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetTooltip", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : string = response.data as string;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Parse a tooltip hint and return a tooltip. The returned tooltip string may contain resource string identifiers (in square brackets), to be processed by the resource manager.&lt;para /&gt;The tooltip hint is either a literal text, representing itself, or a set of key/value pairs enclosed in curly braces. Each key is separated from its value by an equals sign, and each pair from the next by an ampersand, according to usual conventions.&lt;para /&gt;A typical tooltip hint could be {contact_id=123} or {appointment_id=222&amp;amp;mode=simple}
     * @param request - TooltipHint
     * @returns 
     */
    public async GetTooltip(request: carriers.Tooltips_GetTooltipRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string >;

    /**
     * Parse a tooltip hint and return a tooltip. The returned tooltip string may contain resource string identifiers (in square brackets), to be processed by the resource manager.&lt;para /&gt;The tooltip hint is either a literal text, representing itself, or a set of key/value pairs enclosed in curly braces. Each key is separated from its value by an equals sign, and each pair from the next by an ampersand, according to usual conventions.&lt;para /&gt;A typical tooltip hint could be {contact_id=123} or {appointment_id=222&amp;amp;mode=simple}
     * @param tooltipHint - 
     * @returns 
     */
    public async GetTooltip(tooltipHint: string, webapi_options?:base.WebApiRequestOptions) : Promise< string >;

    public async GetTooltip(tooltipHint:string|carriers.Tooltips_GetTooltipRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string > {
        let _request : carriers.Tooltips_GetTooltipRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = tooltipHint;
        if( typeof( first ) === "object" && first && ( typeof(first.TooltipHint)!='undefined' ) )
        {
            _request = tooltipHint as carriers.Tooltips_GetTooltipRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       TooltipHint: tooltipHint as string,
                       };   
            _options = webapi_options;
        }
        return this._GetTooltip( _request, _options );
    }

    } // class v1TooltipsAgentController 


