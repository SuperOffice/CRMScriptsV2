// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>


/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
//
// File:          WebApi/NavigatorAgent.ts
//
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------

import { AxiosRequestConfig } from 'axios';
import * as moment from 'moment';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
import * as converters from './Converters';
import { FromBase64ToString, ToBase64 } from './Base64';

/**
 * Navigator stuff.
 */
export interface INavigatorAgent {
    GetNavigatorCompany(navigatorCompanyId: number) :  Promise< carriers.NavigatorCompany >;
    GetNavigatorCompanyList(navigatorCompanyIds: number[]) :  Promise< carriers.NavigatorCompany[] >;
    GetNavigatorCompanies(request: carriers.Navigator_GetNavigatorCompaniesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.NavigatorCompany[] >;
    GetNavigatorCompanies(name: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.NavigatorCompany[] >;
} // interface INavigatorAgent




/**
 * Navigator stuff.
 */
export class NavigatorAgent extends base.WebApiBase implements INavigatorAgent {
    constructor(baseUrl?: string, languageCode?:string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config:AxiosRequestConfig, languageCode?:string, cultureCode?: string);
    constructor(options: base.WebApiOptions);

    constructor(baseUrlOrOptions: string|base.WebApiOptions|undefined,
                langOrconfigOrRM?: string|base.ResourceParsing|AxiosRequestConfig|any, 
                langOrResourceOrRM?:string|base.ResourceParsing|any, 
                cultureCode?: string, 
                ) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Navigator/";
        super(options);
    }


    /*
     * Gets a NavigatorCompany object.
     * @param navigatorCompanyId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single NavigatorCompany
     */
    public async GetNavigatorCompany(navigatorCompanyId: number, options?:base.WebApiRequestOptions) : Promise< carriers.NavigatorCompany > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.NavigatorCompany >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetNavigatorCompany?navigatorCompanyId=" + navigatorCompanyId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_NavigatorCompany_From( response.data );               
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /*
     * Gets an array of NavigatorCompany objects.
     * @param navigatorCompanyIds - The primary keys.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns An array of NavigatorCompany
     */
    public async GetNavigatorCompanyList(navigatorCompanyIds: number[], options?:base.WebApiRequestOptions) : Promise< carriers.NavigatorCompany[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.NavigatorCompany[] >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetNavigatorCompanyList", navigatorCompanyIds, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_NavigatorCompanyArray_From( response.data );               
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    private async _GetNavigatorCompanies(request: carriers.Navigator_GetNavigatorCompaniesRequest, options?:base.WebApiRequestOptions) : Promise< carriers.NavigatorCompany[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.NavigatorCompany[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetNavigatorCompanies", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.NavigatorCompany[] = converters.Create_NavigatorCompanyArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * 
     * @param request - Name
     * @returns 
     */
    public async GetNavigatorCompanies(request: carriers.Navigator_GetNavigatorCompaniesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.NavigatorCompany[] >;

    /**
     * 
     * @param name - 
     * @returns 
     */
    public async GetNavigatorCompanies(name: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.NavigatorCompany[] >;

    public async GetNavigatorCompanies(name:string|carriers.Navigator_GetNavigatorCompaniesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.NavigatorCompany[] > {
        let _request : carriers.Navigator_GetNavigatorCompaniesRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = name;
        if( typeof( first ) === "object" && first && ( typeof(first.Name)!='undefined' ) )
        {
            _request = name as carriers.Navigator_GetNavigatorCompaniesRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       Name: name as string,
                       };   
            _options = webapi_options;
        }
        return this._GetNavigatorCompanies( _request, _options );
    }

    } // class v1NavigatorAgentController 


