// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>


/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
//
// File:          WebApi/UserDefinedFieldInfoAgent.ts
//
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------

import { AxiosRequestConfig } from 'axios';
import * as moment from 'moment';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
import * as converters from './Converters';
import { FromBase64ToString, ToBase64 } from './Base64';

/**
 * Returns information about user-defined fields, like field type, field size, field label text, default value. Does not return the actual values in the user-defined fields. The values are returned on the entity objects.
 */
export interface IUserDefinedFieldInfoAgent {
    CreateDefaultUserDefinedFieldInfo(): Promise< carriers.UserDefinedFieldInfo >;
    SaveUserDefinedFieldInfo(entity: carriers.UserDefinedFieldInfo) : Promise< carriers.UserDefinedFieldInfo >;
    DeleteUserDefinedFieldInfo(UserDefinedFieldInfoId: number) : Promise<void>;
    GetCustomFieldInfoList(request: carriers.UserDefinedFieldInfo_GetCustomFieldInfoListRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.FieldInfoBase[] >;
    GetCustomFieldInfoList(tableName: string, includeStandard: boolean, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.FieldInfoBase[] >;
    GetCustomFieldInfo(request: carriers.UserDefinedFieldInfo_GetCustomFieldInfoRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.FieldInfoBase >;
    GetCustomFieldInfo(tableName: string, fieldName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.FieldInfoBase >;
    GetUserDefinedFieldInfo(userDefinedFieldInfoId: number) :  Promise< carriers.UserDefinedFieldInfo >;
    GetUserDefinedFieldList(request: carriers.UserDefinedFieldInfo_GetUserDefinedFieldListRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] >;
    GetUserDefinedFieldList(ownerType: enums.UDefType, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] >;
    GetPublishedUserDefinedFieldList(request: carriers.UserDefinedFieldInfo_GetPublishedUserDefinedFieldListRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] >;
    GetPublishedUserDefinedFieldList(ownerType: enums.UDefType, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] >;
    GetUserDefinedFieldFromFieldLabel(request: carriers.UserDefinedFieldInfo_GetUserDefinedFieldFromFieldLabelRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo >;
    GetUserDefinedFieldFromFieldLabel(fieldLabel: string, ownerType: enums.UDefType, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo >;
    GetPublishedUserDefinedFieldFromFieldLabel(request: carriers.UserDefinedFieldInfo_GetPublishedUserDefinedFieldFromFieldLabelRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo >;
    GetPublishedUserDefinedFieldFromFieldLabel(fieldLabel: string, ownerType: enums.UDefType, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo >;
    GetUserDefinedFieldFromProgId(request: carriers.UserDefinedFieldInfo_GetUserDefinedFieldFromProgIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo >;
    GetUserDefinedFieldFromProgId(progId: string, ownerType: enums.UDefType, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo >;
    GetPublishedUserDefinedFieldFromProgId(request: carriers.UserDefinedFieldInfo_GetPublishedUserDefinedFieldFromProgIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo >;
    GetPublishedUserDefinedFieldFromProgId(progId: string, ownerType: enums.UDefType, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo >;
    GetUserDefinedFieldFromIds(request: carriers.UserDefinedFieldInfo_GetUserDefinedFieldFromIdsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] >;
    GetUserDefinedFieldFromIds(ids: number[], webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] >;
    GetUserDefinedFieldFromProgIds(request: carriers.UserDefinedFieldInfo_GetUserDefinedFieldFromProgIdsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] >;
    GetUserDefinedFieldFromProgIds(progIds: string[], ownerType: enums.UDefType, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] >;
    CreateUserDefinedFieldInfo(request: carriers.UserDefinedFieldInfo_CreateUserDefinedFieldInfoRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo >;
    CreateUserDefinedFieldInfo(ownerType: enums.UDefType, fieldType: enums.UDefFieldType, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo >;
    ChangeFieldType(request: carriers.UserDefinedFieldInfo_ChangeFieldTypeRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo >;
    ChangeFieldType(info: carriers.UserDefinedFieldInfo, fieldType: enums.UDefFieldType, isIndexed: boolean, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo >;
    GetUserDefinedPageOneFields(request: carriers.UserDefinedFieldInfo_GetUserDefinedPageOneFieldsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] >;
    GetUserDefinedPageOneFields(ownerType: enums.UDefType, userGroupId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] >;
    GetPublishedUserDefinedPageOneFields(request: carriers.UserDefinedFieldInfo_GetPublishedUserDefinedPageOneFieldsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] >;
    GetPublishedUserDefinedPageOneFields(ownerType: enums.UDefType, userGroupId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] >;
    Publish(request: carriers.UserDefinedFieldInfo_PublishRequest, webapi_options?:base.WebApiRequestOptions) : Promise< number >;
    Publish(ownerType: enums.UDefType, webapi_options?:base.WebApiRequestOptions) : Promise< number >;
    Revert(request: carriers.UserDefinedFieldInfo_RevertRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    Revert(ownerType: enums.UDefType, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    SaveUserDefinedFieldInfos(request: carriers.UserDefinedFieldInfo_SaveUserDefinedFieldInfosRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    SaveUserDefinedFieldInfos(infos: carriers.UserDefinedFieldInfo[], webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    DetectUnpublishedChanges(request: carriers.UserDefinedFieldInfo_DetectUnpublishedChangesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;
    DetectUnpublishedChanges(ownerType: enums.UDefType, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;
    DetectColumnIdChanges(request: carriers.UserDefinedFieldInfo_DetectColumnIdChangesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;
    DetectColumnIdChanges(ownerType: enums.UDefType, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;
    SetUserDefinedPageOneField(request: carriers.UserDefinedFieldInfo_SetUserDefinedPageOneFieldRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    SetUserDefinedPageOneField(ownerType: enums.UDefType, udefFieldId: number, userGroupId: number, fieldLineNo: number, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    IsPublishEventActive(request: carriers.UserDefinedFieldInfo_IsPublishEventActiveRequest, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;
    IsPublishEventActive(type: enums.UDefType, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;
    IsAnyPublishEventActive(webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;
    GetChangedPageOneFields(request: carriers.UserDefinedFieldInfo_GetChangedPageOneFieldsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< boolean[] >;
    GetChangedPageOneFields(ownerType: enums.UDefType, userGroupId: number, webapi_options?:base.WebApiRequestOptions) : Promise< boolean[] >;
    SetPageOneFieldGrouping(request: carriers.UserDefinedFieldInfo_SetPageOneFieldGroupingRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    SetPageOneFieldGrouping(ownerType: enums.UDefType, active: boolean, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    SetListTableIdAndUDListDefinitionIdFromSelectedListId(request: carriers.UserDefinedFieldInfo_SetListTableIdAndUDListDefinitionIdFromSelectedListIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo >;
    SetListTableIdAndUDListDefinitionIdFromSelectedListId(info: carriers.UserDefinedFieldInfo, selectedListId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo >;
    FigureOutListIdFromListTableIdAndUDListDefinitionId(request: carriers.UserDefinedFieldInfo_FigureOutListIdFromListTableIdAndUDListDefinitionIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< number >;
    FigureOutListIdFromListTableIdAndUDListDefinitionId(info: carriers.UserDefinedFieldInfo, webapi_options?:base.WebApiRequestOptions) : Promise< number >;
    SetRankOnFields(request: carriers.UserDefinedFieldInfo_SetRankOnFieldsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    SetRankOnFields(ownerType: enums.UDefType, rankedFieldsIds: number[], webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    SetPublishStartSystemEvent(request: carriers.UserDefinedFieldInfo_SetPublishStartSystemEventRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    SetPublishStartSystemEvent(ownerType: enums.UDefType, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    ClearCaches(webapi_options?:base.WebApiRequestOptions) : Promise< void >;
} // interface IUserDefinedFieldInfoAgent




/**
 * Returns information about user-defined fields, like field type, field size, field label text, default value. Does not return the actual values in the user-defined fields. The values are returned on the entity objects.
 */
export class UserDefinedFieldInfoAgent extends base.WebApiBase implements IUserDefinedFieldInfoAgent {
    constructor(baseUrl?: string, languageCode?:string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config:AxiosRequestConfig, languageCode?:string, cultureCode?: string);
    constructor(options: base.WebApiOptions);

    constructor(baseUrlOrOptions: string|base.WebApiOptions|undefined,
                langOrconfigOrRM?: string|base.ResourceParsing|AxiosRequestConfig|any, 
                langOrResourceOrRM?:string|base.ResourceParsing|any, 
                cultureCode?: string, 
                ) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/UserDefinedFieldInfo/";
        super(options);
    }



    /**
     * Set default values into a new UserDefinedFieldInfo.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    public async CreateDefaultUserDefinedFieldInfo(options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.UserDefinedFieldInfo >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultUserDefinedFieldInfo", null, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.UserDefinedFieldInfo = converters.Create_UserDefinedFieldInfo_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing UserDefinedFieldInfo or creates a new UserDefinedFieldInfo if the id parameter is empty
     * @param entity - The UserDefinedFieldInfo to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated UserDefinedFieldInfo
     */
    public async SaveUserDefinedFieldInfo(entity: carriers.UserDefinedFieldInfo, options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.UserDefinedFieldInfo >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveUserDefinedFieldInfo", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.UserDefinedFieldInfo = converters.Create_UserDefinedFieldInfo_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /*
     * Deletes the UserDefinedFieldInfo
     * @param UserDefinedFieldInfoId - The id of the UserDefinedFieldInfo to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    public async DeleteUserDefinedFieldInfo(UserDefinedFieldInfoId: number, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteUserDefinedFieldInfo?UserDefinedFieldInfoId=" + UserDefinedFieldInfoId, null, config );
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    private async _GetCustomFieldInfoList(request: carriers.UserDefinedFieldInfo_GetCustomFieldInfoListRequest, options?:base.WebApiRequestOptions) : Promise< carriers.FieldInfoBase[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.FieldInfoBase[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetCustomFieldInfoList", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.FieldInfoBase[] = converters.Create_FieldInfoBaseArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Return information about all the custom fields (user-defined + extra) on a particular table
     * @param request - TableName, IncludeStandard
     * @returns Array of user-defined and extra field info in rank order. Describes default values, mandatory, visiblity, labels and choices.
     */
    public async GetCustomFieldInfoList(request: carriers.UserDefinedFieldInfo_GetCustomFieldInfoListRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.FieldInfoBase[] >;

    /**
     * Return information about all the custom fields (user-defined + extra) on a particular table
     * @param tableName - The name of table that owns the custom fields. e.g. 'contact', 'person', 'project' etc.
     * @param includeStandard - Include standard fields in result. Default false.
     * @returns Array of user-defined and extra field info in rank order. Describes default values, mandatory, visiblity, labels and choices.
     */
    public async GetCustomFieldInfoList(tableName: string, includeStandard: boolean, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.FieldInfoBase[] >;

    public async GetCustomFieldInfoList(tableName:string|carriers.UserDefinedFieldInfo_GetCustomFieldInfoListRequest, includeStandard?:boolean|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.FieldInfoBase[] > {
        let _request : carriers.UserDefinedFieldInfo_GetCustomFieldInfoListRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = tableName;
        if( typeof( first ) === "object" && first && ( typeof(first.TableName)!='undefined' || typeof(first.IncludeStandard)!='undefined' ) )
        {
            _request = tableName as carriers.UserDefinedFieldInfo_GetCustomFieldInfoListRequest;
            _options = includeStandard as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       TableName: tableName as string,
                       IncludeStandard: includeStandard as boolean,
                       };   
            _options = webapi_options;
        }
        return this._GetCustomFieldInfoList( _request, _options );
    }


    private async _GetCustomFieldInfo(request: carriers.UserDefinedFieldInfo_GetCustomFieldInfoRequest, options?:base.WebApiRequestOptions) : Promise< carriers.FieldInfoBase > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.FieldInfoBase >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetCustomFieldInfo", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.FieldInfoBase = converters.Create_FieldInfoBase_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Return information about a particular custom field (user-defined + extra) on a particular table
     * @param request - TableName, FieldName
     * @returns user-defined or extra field info. Describes default values, mandatory, visiblity, labels and choices.
     */
    public async GetCustomFieldInfo(request: carriers.UserDefinedFieldInfo_GetCustomFieldInfoRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.FieldInfoBase >;

    /**
     * Return information about a particular custom field (user-defined + extra) on a particular table
     * @param tableName - The name of table that owns the custom fields. e.g. 'contact', 'person', 'project' etc.
     * @param fieldName - The name of the field: prog:id or field name. e.g. 'SuperOffice:21' or 'x_foobar'
     * @returns user-defined or extra field info. Describes default values, mandatory, visiblity, labels and choices.
     */
    public async GetCustomFieldInfo(tableName: string, fieldName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.FieldInfoBase >;

    public async GetCustomFieldInfo(tableName:string|carriers.UserDefinedFieldInfo_GetCustomFieldInfoRequest, fieldName?:string|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.FieldInfoBase > {
        let _request : carriers.UserDefinedFieldInfo_GetCustomFieldInfoRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = tableName;
        if( typeof( first ) === "object" && first && ( typeof(first.TableName)!='undefined' || typeof(first.FieldName)!='undefined' ) )
        {
            _request = tableName as carriers.UserDefinedFieldInfo_GetCustomFieldInfoRequest;
            _options = fieldName as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       TableName: tableName as string,
                       FieldName: fieldName as string,
                       };   
            _options = webapi_options;
        }
        return this._GetCustomFieldInfo( _request, _options );
    }

    /*
     * Gets a UserDefinedFieldInfo object.
     * @param userDefinedFieldInfoId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single UserDefinedFieldInfo
     */
    public async GetUserDefinedFieldInfo(userDefinedFieldInfoId: number, options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.UserDefinedFieldInfo >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetUserDefinedFieldInfo?userDefinedFieldInfoId=" + userDefinedFieldInfoId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_UserDefinedFieldInfo_From( response.data );               
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    private async _GetUserDefinedFieldList(request: carriers.UserDefinedFieldInfo_GetUserDefinedFieldListRequest, options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.UserDefinedFieldInfo[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetUserDefinedFieldList", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.UserDefinedFieldInfo[] = converters.Create_UserDefinedFieldInfoArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Return information about all the user defined fields on a particular owner type (project, contact, person, etc). Note this may be different than the currently published fields.
     * @param request - OwnerType
     * @returns Returns an array of user-defined field info carriers. 
     */
    public async GetUserDefinedFieldList(request: carriers.UserDefinedFieldInfo_GetUserDefinedFieldListRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] >;

    /**
     * Return information about all the user defined fields on a particular owner type (project, contact, person, etc). Note this may be different than the currently published fields.
     * @param ownerType - The user-defined field owner-entity id.  
     * @returns Returns an array of user-defined field info carriers. 
     */
    public async GetUserDefinedFieldList(ownerType: enums.UDefType, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] >;

    public async GetUserDefinedFieldList(ownerType:enums.UDefType|carriers.UserDefinedFieldInfo_GetUserDefinedFieldListRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] > {
        let _request : carriers.UserDefinedFieldInfo_GetUserDefinedFieldListRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = ownerType;
        if( typeof( first ) === "object" && first && ( typeof(first.OwnerType)!='undefined' ) )
        {
            _request = ownerType as carriers.UserDefinedFieldInfo_GetUserDefinedFieldListRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       OwnerType: ownerType as enums.UDefType,
                       };   
            _options = webapi_options;
        }
        return this._GetUserDefinedFieldList( _request, _options );
    }


    private async _GetPublishedUserDefinedFieldList(request: carriers.UserDefinedFieldInfo_GetPublishedUserDefinedFieldListRequest, options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.UserDefinedFieldInfo[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetPublishedUserDefinedFieldList", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.UserDefinedFieldInfo[] = converters.Create_UserDefinedFieldInfoArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Return information about all the user defined fields on a particular owner type (project, contact, person, etc).
     * @param request - OwnerType
     * @returns Returns an array of user-defined field info carriers. 
     */
    public async GetPublishedUserDefinedFieldList(request: carriers.UserDefinedFieldInfo_GetPublishedUserDefinedFieldListRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] >;

    /**
     * Return information about all the user defined fields on a particular owner type (project, contact, person, etc).
     * @param ownerType - The user-defined field owner-entity id.  
     * @returns Returns an array of user-defined field info carriers. 
     */
    public async GetPublishedUserDefinedFieldList(ownerType: enums.UDefType, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] >;

    public async GetPublishedUserDefinedFieldList(ownerType:enums.UDefType|carriers.UserDefinedFieldInfo_GetPublishedUserDefinedFieldListRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] > {
        let _request : carriers.UserDefinedFieldInfo_GetPublishedUserDefinedFieldListRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = ownerType;
        if( typeof( first ) === "object" && first && ( typeof(first.OwnerType)!='undefined' ) )
        {
            _request = ownerType as carriers.UserDefinedFieldInfo_GetPublishedUserDefinedFieldListRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       OwnerType: ownerType as enums.UDefType,
                       };   
            _options = webapi_options;
        }
        return this._GetPublishedUserDefinedFieldList( _request, _options );
    }


    private async _GetUserDefinedFieldFromFieldLabel(request: carriers.UserDefinedFieldInfo_GetUserDefinedFieldFromFieldLabelRequest, options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.UserDefinedFieldInfo >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetUserDefinedFieldFromFieldLabel", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.UserDefinedFieldInfo = converters.Create_UserDefinedFieldInfo_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Return information about the given user defined field identified by the owner and the field label. Note that field labels are fuzzy. Leading and trailing spaces and punctuation are ignored. Note this may be different than the currently published fields.
     * @param request - FieldLabel, OwnerType
     * @returns Returns the user-defined field info carrier, or null if no matching field is found.
     */
    public async GetUserDefinedFieldFromFieldLabel(request: carriers.UserDefinedFieldInfo_GetUserDefinedFieldFromFieldLabelRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo >;

    /**
     * Return information about the given user defined field identified by the owner and the field label. Note that field labels are fuzzy. Leading and trailing spaces and punctuation are ignored. Note this may be different than the currently published fields.
     * @param fieldLabel - The field label - the text label shown in the user interface. Trailing spaces and punctuation (":" and ".") are ignored when searching.
     * @param ownerType - The user-defined field owner-entity id. 
     * @returns Returns the user-defined field info carrier, or null if no matching field is found.
     */
    public async GetUserDefinedFieldFromFieldLabel(fieldLabel: string, ownerType: enums.UDefType, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo >;

    public async GetUserDefinedFieldFromFieldLabel(fieldLabel:string|carriers.UserDefinedFieldInfo_GetUserDefinedFieldFromFieldLabelRequest, ownerType?:enums.UDefType|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo > {
        let _request : carriers.UserDefinedFieldInfo_GetUserDefinedFieldFromFieldLabelRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = fieldLabel;
        if( typeof( first ) === "object" && first && ( typeof(first.FieldLabel)!='undefined' || typeof(first.OwnerType)!='undefined' ) )
        {
            _request = fieldLabel as carriers.UserDefinedFieldInfo_GetUserDefinedFieldFromFieldLabelRequest;
            _options = ownerType as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       FieldLabel: fieldLabel as string,
                       OwnerType: ownerType as enums.UDefType,
                       };   
            _options = webapi_options;
        }
        return this._GetUserDefinedFieldFromFieldLabel( _request, _options );
    }


    private async _GetPublishedUserDefinedFieldFromFieldLabel(request: carriers.UserDefinedFieldInfo_GetPublishedUserDefinedFieldFromFieldLabelRequest, options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.UserDefinedFieldInfo >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetPublishedUserDefinedFieldFromFieldLabel", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.UserDefinedFieldInfo = converters.Create_UserDefinedFieldInfo_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Return information about the given user defined field identified by the owner and the field label. Note that field labels are fuzzy. Leading and trailing spaces and punctuation are ignored.
     * @param request - FieldLabel, OwnerType
     * @returns Returns the user-defined field info carrier, or null if no matching field is found.
     */
    public async GetPublishedUserDefinedFieldFromFieldLabel(request: carriers.UserDefinedFieldInfo_GetPublishedUserDefinedFieldFromFieldLabelRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo >;

    /**
     * Return information about the given user defined field identified by the owner and the field label. Note that field labels are fuzzy. Leading and trailing spaces and punctuation are ignored.
     * @param fieldLabel - The field label - the text label shown in the user interface. Trailing spaces and punctuation (":" and ".") are ignored when searching.
     * @param ownerType - The user-defined field owner-entity id. 
     * @returns Returns the user-defined field info carrier, or null if no matching field is found.
     */
    public async GetPublishedUserDefinedFieldFromFieldLabel(fieldLabel: string, ownerType: enums.UDefType, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo >;

    public async GetPublishedUserDefinedFieldFromFieldLabel(fieldLabel:string|carriers.UserDefinedFieldInfo_GetPublishedUserDefinedFieldFromFieldLabelRequest, ownerType?:enums.UDefType|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo > {
        let _request : carriers.UserDefinedFieldInfo_GetPublishedUserDefinedFieldFromFieldLabelRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = fieldLabel;
        if( typeof( first ) === "object" && first && ( typeof(first.FieldLabel)!='undefined' || typeof(first.OwnerType)!='undefined' ) )
        {
            _request = fieldLabel as carriers.UserDefinedFieldInfo_GetPublishedUserDefinedFieldFromFieldLabelRequest;
            _options = ownerType as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       FieldLabel: fieldLabel as string,
                       OwnerType: ownerType as enums.UDefType,
                       };   
            _options = webapi_options;
        }
        return this._GetPublishedUserDefinedFieldFromFieldLabel( _request, _options );
    }


    private async _GetUserDefinedFieldFromProgId(request: carriers.UserDefinedFieldInfo_GetUserDefinedFieldFromProgIdRequest, options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.UserDefinedFieldInfo >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetUserDefinedFieldFromProgId", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.UserDefinedFieldInfo = converters.Create_UserDefinedFieldInfo_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Return information about the given user defined field identified by the owner and the prog-id. The prog-id is used as the key in the entity carriers. Note this may be different than the currently published fields.
     * @param request - ProgId, OwnerType
     * @returns Returns the user-defined field info carrier, or null if no matching field is found.
     */
    public async GetUserDefinedFieldFromProgId(request: carriers.UserDefinedFieldInfo_GetUserDefinedFieldFromProgIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo >;

    /**
     * Return information about the given user defined field identified by the owner and the prog-id. The prog-id is used as the key in the entity carriers. Note this may be different than the currently published fields.
     * @param progId - The prog.id is a hidden name that uniquely identifies the field. 
     * @param ownerType - The user-defined field owner-entity id. 
     * @returns Returns the user-defined field info carrier, or null if no matching field is found.
     */
    public async GetUserDefinedFieldFromProgId(progId: string, ownerType: enums.UDefType, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo >;

    public async GetUserDefinedFieldFromProgId(progId:string|carriers.UserDefinedFieldInfo_GetUserDefinedFieldFromProgIdRequest, ownerType?:enums.UDefType|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo > {
        let _request : carriers.UserDefinedFieldInfo_GetUserDefinedFieldFromProgIdRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = progId;
        if( typeof( first ) === "object" && first && ( typeof(first.ProgId)!='undefined' || typeof(first.OwnerType)!='undefined' ) )
        {
            _request = progId as carriers.UserDefinedFieldInfo_GetUserDefinedFieldFromProgIdRequest;
            _options = ownerType as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ProgId: progId as string,
                       OwnerType: ownerType as enums.UDefType,
                       };   
            _options = webapi_options;
        }
        return this._GetUserDefinedFieldFromProgId( _request, _options );
    }


    private async _GetPublishedUserDefinedFieldFromProgId(request: carriers.UserDefinedFieldInfo_GetPublishedUserDefinedFieldFromProgIdRequest, options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.UserDefinedFieldInfo >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetPublishedUserDefinedFieldFromProgId", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.UserDefinedFieldInfo = converters.Create_UserDefinedFieldInfo_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Return information about the given user defined field identified by the owner and the prog-id. The prog-id is used as the key in the entity carriers.
     * @param request - ProgId, OwnerType
     * @returns Returns the user-defined field info carrier, or null if no matching field is found.
     */
    public async GetPublishedUserDefinedFieldFromProgId(request: carriers.UserDefinedFieldInfo_GetPublishedUserDefinedFieldFromProgIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo >;

    /**
     * Return information about the given user defined field identified by the owner and the prog-id. The prog-id is used as the key in the entity carriers.
     * @param progId - The prog.id is a hidden name that uniquely identifies the field. 
     * @param ownerType - The user-defined field owner-entity id. 
     * @returns Returns the user-defined field info carrier, or null if no matching field is found.
     */
    public async GetPublishedUserDefinedFieldFromProgId(progId: string, ownerType: enums.UDefType, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo >;

    public async GetPublishedUserDefinedFieldFromProgId(progId:string|carriers.UserDefinedFieldInfo_GetPublishedUserDefinedFieldFromProgIdRequest, ownerType?:enums.UDefType|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo > {
        let _request : carriers.UserDefinedFieldInfo_GetPublishedUserDefinedFieldFromProgIdRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = progId;
        if( typeof( first ) === "object" && first && ( typeof(first.ProgId)!='undefined' || typeof(first.OwnerType)!='undefined' ) )
        {
            _request = progId as carriers.UserDefinedFieldInfo_GetPublishedUserDefinedFieldFromProgIdRequest;
            _options = ownerType as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ProgId: progId as string,
                       OwnerType: ownerType as enums.UDefType,
                       };   
            _options = webapi_options;
        }
        return this._GetPublishedUserDefinedFieldFromProgId( _request, _options );
    }


    private async _GetUserDefinedFieldFromIds(request: carriers.UserDefinedFieldInfo_GetUserDefinedFieldFromIdsRequest, options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.UserDefinedFieldInfo[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetUserDefinedFieldFromIds", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.UserDefinedFieldInfo[] = converters.Create_UserDefinedFieldInfoArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Return an given array of user defined field identified by the ids.
     * @param request - Ids
     * @returns Returns an array of user-defined field info carriers
     */
    public async GetUserDefinedFieldFromIds(request: carriers.UserDefinedFieldInfo_GetUserDefinedFieldFromIdsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] >;

    /**
     * Return an given array of user defined field identified by the ids.
     * @param ids - Array of user defined field ids
     * @returns Returns an array of user-defined field info carriers
     */
    public async GetUserDefinedFieldFromIds(ids: number[], webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] >;

    public async GetUserDefinedFieldFromIds(ids:number[]|carriers.UserDefinedFieldInfo_GetUserDefinedFieldFromIdsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] > {
        let _request : carriers.UserDefinedFieldInfo_GetUserDefinedFieldFromIdsRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = ids;
        if( typeof( first ) === "object" && first && ( typeof(first.Ids)!='undefined' ) )
        {
            _request = ids as carriers.UserDefinedFieldInfo_GetUserDefinedFieldFromIdsRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       Ids: ids as number[],
                       };   
            _options = webapi_options;
        }
        return this._GetUserDefinedFieldFromIds( _request, _options );
    }


    private async _GetUserDefinedFieldFromProgIds(request: carriers.UserDefinedFieldInfo_GetUserDefinedFieldFromProgIdsRequest, options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.UserDefinedFieldInfo[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetUserDefinedFieldFromProgIds", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.UserDefinedFieldInfo[] = converters.Create_UserDefinedFieldInfoArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Return an given array user defined field identified by the owner and the prog-ids. The prog-id is used as the key in the entity carriers. Note this may be different than the currently published field layout.
     * @param request - ProgIds, OwnerType
     * @returns Returns an array of user-defined field info carriers
     */
    public async GetUserDefinedFieldFromProgIds(request: carriers.UserDefinedFieldInfo_GetUserDefinedFieldFromProgIdsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] >;

    /**
     * Return an given array user defined field identified by the owner and the prog-ids. The prog-id is used as the key in the entity carriers. Note this may be different than the currently published field layout.
     * @param progIds - The prog.id is a hidden name that uniquely identifies the field. 
     * @param ownerType - The user-defined field owner-entity id. 
     * @returns Returns an array of user-defined field info carriers
     */
    public async GetUserDefinedFieldFromProgIds(progIds: string[], ownerType: enums.UDefType, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] >;

    public async GetUserDefinedFieldFromProgIds(progIds:string[]|carriers.UserDefinedFieldInfo_GetUserDefinedFieldFromProgIdsRequest, ownerType?:enums.UDefType|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] > {
        let _request : carriers.UserDefinedFieldInfo_GetUserDefinedFieldFromProgIdsRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = progIds;
        if( typeof( first ) === "object" && first && ( typeof(first.ProgIds)!='undefined' || typeof(first.OwnerType)!='undefined' ) )
        {
            _request = progIds as carriers.UserDefinedFieldInfo_GetUserDefinedFieldFromProgIdsRequest;
            _options = ownerType as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ProgIds: progIds as string[],
                       OwnerType: ownerType as enums.UDefType,
                       };   
            _options = webapi_options;
        }
        return this._GetUserDefinedFieldFromProgIds( _request, _options );
    }


    private async _CreateUserDefinedFieldInfo(request: carriers.UserDefinedFieldInfo_CreateUserDefinedFieldInfoRequest, options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.UserDefinedFieldInfo >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("CreateUserDefinedFieldInfo", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.UserDefinedFieldInfo = converters.Create_UserDefinedFieldInfo_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Create a UserDefinedFieldInfo based on a owner-entity id
     * @param request - OwnerType, FieldType
     * @returns Returns the user-defined field info carrier
     */
    public async CreateUserDefinedFieldInfo(request: carriers.UserDefinedFieldInfo_CreateUserDefinedFieldInfoRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo >;

    /**
     * Create a UserDefinedFieldInfo based on a owner-entity id
     * @param ownerType - The user-defined field owner-entity id.  
     * @param fieldType - The field type of the new field
     * @returns Returns the user-defined field info carrier
     */
    public async CreateUserDefinedFieldInfo(ownerType: enums.UDefType, fieldType: enums.UDefFieldType, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo >;

    public async CreateUserDefinedFieldInfo(ownerType:enums.UDefType|carriers.UserDefinedFieldInfo_CreateUserDefinedFieldInfoRequest, fieldType?:enums.UDefFieldType|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo > {
        let _request : carriers.UserDefinedFieldInfo_CreateUserDefinedFieldInfoRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = ownerType;
        if( typeof( first ) === "object" && first && ( typeof(first.OwnerType)!='undefined' || typeof(first.FieldType)!='undefined' ) )
        {
            _request = ownerType as carriers.UserDefinedFieldInfo_CreateUserDefinedFieldInfoRequest;
            _options = fieldType as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       OwnerType: ownerType as enums.UDefType,
                       FieldType: fieldType as enums.UDefFieldType,
                       };   
            _options = webapi_options;
        }
        return this._CreateUserDefinedFieldInfo( _request, _options );
    }


    private async _ChangeFieldType(request: carriers.UserDefinedFieldInfo_ChangeFieldTypeRequest, options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.UserDefinedFieldInfo >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ChangeFieldType", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.UserDefinedFieldInfo = converters.Create_UserDefinedFieldInfo_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Create a UserDefinedFieldInfo based on a owner-entity id
     * @param request - Info, FieldType, IsIndexed
     * @returns Returns the user-defined field info carrier
     */
    public async ChangeFieldType(request: carriers.UserDefinedFieldInfo_ChangeFieldTypeRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo >;

    /**
     * Create a UserDefinedFieldInfo based on a owner-entity id
     * @param info - The user-defined field info carrier to want to modify
     * @param fieldType - The new field type you want
     * @param isIndexed - The new indexed status you want
     * @returns Returns the user-defined field info carrier
     */
    public async ChangeFieldType(info: carriers.UserDefinedFieldInfo, fieldType: enums.UDefFieldType, isIndexed: boolean, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo >;

    public async ChangeFieldType(info:carriers.UserDefinedFieldInfo|carriers.UserDefinedFieldInfo_ChangeFieldTypeRequest, fieldType?:enums.UDefFieldType|base.WebApiRequestOptions, isIndexed?:boolean, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo > {
        let _request : carriers.UserDefinedFieldInfo_ChangeFieldTypeRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = info;
        if( typeof( first ) === "object" && first && ( typeof(first.Info)!='undefined' || typeof(first.FieldType)!='undefined' || typeof(first.IsIndexed)!='undefined' ) )
        {
            _request = info as carriers.UserDefinedFieldInfo_ChangeFieldTypeRequest;
            _options = fieldType as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       Info: info as carriers.UserDefinedFieldInfo,
                       FieldType: fieldType as enums.UDefFieldType,
                       IsIndexed: isIndexed as boolean,
                       };   
            _options = webapi_options;
        }
        return this._ChangeFieldType( _request, _options );
    }


    private async _GetUserDefinedPageOneFields(request: carriers.UserDefinedFieldInfo_GetUserDefinedPageOneFieldsRequest, options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.UserDefinedFieldInfo[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetUserDefinedPageOneFields", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.UserDefinedFieldInfo[] = converters.Create_UserDefinedFieldInfoArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Get a list of page one fields for given Udef type and current user group
     * @param request - OwnerType, UserGroupId
     * @returns Returns an array of page one user-defined field info carriers. 
     */
    public async GetUserDefinedPageOneFields(request: carriers.UserDefinedFieldInfo_GetUserDefinedPageOneFieldsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] >;

    /**
     * Get a list of page one fields for given Udef type and current user group
     * @param ownerType - The user-defined field owner-entity.
     * @param userGroupId - Id of UserGroup
     * @returns Returns an array of page one user-defined field info carriers. 
     */
    public async GetUserDefinedPageOneFields(ownerType: enums.UDefType, userGroupId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] >;

    public async GetUserDefinedPageOneFields(ownerType:enums.UDefType|carriers.UserDefinedFieldInfo_GetUserDefinedPageOneFieldsRequest, userGroupId?:number|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] > {
        let _request : carriers.UserDefinedFieldInfo_GetUserDefinedPageOneFieldsRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = ownerType;
        if( typeof( first ) === "object" && first && ( typeof(first.OwnerType)!='undefined' || typeof(first.UserGroupId)!='undefined' ) )
        {
            _request = ownerType as carriers.UserDefinedFieldInfo_GetUserDefinedPageOneFieldsRequest;
            _options = userGroupId as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       OwnerType: ownerType as enums.UDefType,
                       UserGroupId: userGroupId as number,
                       };   
            _options = webapi_options;
        }
        return this._GetUserDefinedPageOneFields( _request, _options );
    }


    private async _GetPublishedUserDefinedPageOneFields(request: carriers.UserDefinedFieldInfo_GetPublishedUserDefinedPageOneFieldsRequest, options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.UserDefinedFieldInfo[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetPublishedUserDefinedPageOneFields", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.UserDefinedFieldInfo[] = converters.Create_UserDefinedFieldInfoArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Get a list of page one fields for given Udef type and current user group
     * @param request - OwnerType, UserGroupId
     * @returns Returns an array of page one user-defined field info carriers. 
     */
    public async GetPublishedUserDefinedPageOneFields(request: carriers.UserDefinedFieldInfo_GetPublishedUserDefinedPageOneFieldsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] >;

    /**
     * Get a list of page one fields for given Udef type and current user group
     * @param ownerType - The user-defined field owner-entity.
     * @param userGroupId - Id of UserGroup
     * @returns Returns an array of page one user-defined field info carriers. 
     */
    public async GetPublishedUserDefinedPageOneFields(ownerType: enums.UDefType, userGroupId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] >;

    public async GetPublishedUserDefinedPageOneFields(ownerType:enums.UDefType|carriers.UserDefinedFieldInfo_GetPublishedUserDefinedPageOneFieldsRequest, userGroupId?:number|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo[] > {
        let _request : carriers.UserDefinedFieldInfo_GetPublishedUserDefinedPageOneFieldsRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = ownerType;
        if( typeof( first ) === "object" && first && ( typeof(first.OwnerType)!='undefined' || typeof(first.UserGroupId)!='undefined' ) )
        {
            _request = ownerType as carriers.UserDefinedFieldInfo_GetPublishedUserDefinedPageOneFieldsRequest;
            _options = userGroupId as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       OwnerType: ownerType as enums.UDefType,
                       UserGroupId: userGroupId as number,
                       };   
            _options = webapi_options;
        }
        return this._GetPublishedUserDefinedPageOneFields( _request, _options );
    }


    private async _Publish(request: carriers.UserDefinedFieldInfo_PublishRequest, options?:base.WebApiRequestOptions) : Promise< number > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< number >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("Publish", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : number = response.data as number;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Publish changed Udef fields for the given owner type
     * @param request - OwnerType
     * @returns Batch task id or 0 that handles publishing.
     */
    public async Publish(request: carriers.UserDefinedFieldInfo_PublishRequest, webapi_options?:base.WebApiRequestOptions) : Promise< number >;

    /**
     * Publish changed Udef fields for the given owner type
     * @param ownerType - The owner type to publish for
     * @returns Batch task id or 0 that handles publishing.
     */
    public async Publish(ownerType: enums.UDefType, webapi_options?:base.WebApiRequestOptions) : Promise< number >;

    public async Publish(ownerType:enums.UDefType|carriers.UserDefinedFieldInfo_PublishRequest, webapi_options?:base.WebApiRequestOptions) : Promise< number > {
        let _request : carriers.UserDefinedFieldInfo_PublishRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = ownerType;
        if( typeof( first ) === "object" && first && ( typeof(first.OwnerType)!='undefined' ) )
        {
            _request = ownerType as carriers.UserDefinedFieldInfo_PublishRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       OwnerType: ownerType as enums.UDefType,
                       };   
            _options = webapi_options;
        }
        return this._Publish( _request, _options );
    }


    private async _Revert(request: carriers.UserDefinedFieldInfo_RevertRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("Revert", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Revert changed Udef fields for the given owner type - all unpublished changes will be lost
     * @param request - OwnerType
     * @returns 
     */
    public async Revert(request: carriers.UserDefinedFieldInfo_RevertRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Revert changed Udef fields for the given owner type - all unpublished changes will be lost
     * @param ownerType - The owner type to revert fields for
     * @returns 
     */
    public async Revert(ownerType: enums.UDefType, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async Revert(ownerType:enums.UDefType|carriers.UserDefinedFieldInfo_RevertRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.UserDefinedFieldInfo_RevertRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = ownerType;
        if( typeof( first ) === "object" && first && ( typeof(first.OwnerType)!='undefined' ) )
        {
            _request = ownerType as carriers.UserDefinedFieldInfo_RevertRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       OwnerType: ownerType as enums.UDefType,
                       };   
            _options = webapi_options;
        }
        return this._Revert( _request, _options );
    }


    private async _SaveUserDefinedFieldInfos(request: carriers.UserDefinedFieldInfo_SaveUserDefinedFieldInfosRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SaveUserDefinedFieldInfos", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Save an array of user defined fields. This will update the unpublished layout.
     * @param request - Infos
     * @returns 
     */
    public async SaveUserDefinedFieldInfos(request: carriers.UserDefinedFieldInfo_SaveUserDefinedFieldInfosRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Save an array of user defined fields. This will update the unpublished layout.
     * @param infos - An array of user defined fields
     * @returns 
     */
    public async SaveUserDefinedFieldInfos(infos: carriers.UserDefinedFieldInfo[], webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async SaveUserDefinedFieldInfos(infos:carriers.UserDefinedFieldInfo[]|carriers.UserDefinedFieldInfo_SaveUserDefinedFieldInfosRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.UserDefinedFieldInfo_SaveUserDefinedFieldInfosRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = infos;
        if( typeof( first ) === "object" && first && ( typeof(first.Infos)!='undefined' ) )
        {
            _request = infos as carriers.UserDefinedFieldInfo_SaveUserDefinedFieldInfosRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       Infos: infos as carriers.UserDefinedFieldInfo[],
                       };   
            _options = webapi_options;
        }
        return this._SaveUserDefinedFieldInfos( _request, _options );
    }


    private async _DetectUnpublishedChanges(request: carriers.UserDefinedFieldInfo_DetectUnpublishedChangesRequest, options?:base.WebApiRequestOptions) : Promise< boolean > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< boolean >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("DetectUnpublishedChanges", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : boolean = response.data as boolean;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Detect changes to the admin version (unpublished)
     * @param request - OwnerType
     * @returns Returns true if any changes were found. This includes cosmetic changes.
     */
    public async DetectUnpublishedChanges(request: carriers.UserDefinedFieldInfo_DetectUnpublishedChangesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;

    /**
     * Detect changes to the admin version (unpublished)
     * @param ownerType - The owner type
     * @returns Returns true if any changes were found. This includes cosmetic changes.
     */
    public async DetectUnpublishedChanges(ownerType: enums.UDefType, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;

    public async DetectUnpublishedChanges(ownerType:enums.UDefType|carriers.UserDefinedFieldInfo_DetectUnpublishedChangesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< boolean > {
        let _request : carriers.UserDefinedFieldInfo_DetectUnpublishedChangesRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = ownerType;
        if( typeof( first ) === "object" && first && ( typeof(first.OwnerType)!='undefined' ) )
        {
            _request = ownerType as carriers.UserDefinedFieldInfo_DetectUnpublishedChangesRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       OwnerType: ownerType as enums.UDefType,
                       };   
            _options = webapi_options;
        }
        return this._DetectUnpublishedChanges( _request, _options );
    }


    private async _DetectColumnIdChanges(request: carriers.UserDefinedFieldInfo_DetectColumnIdChangesRequest, options?:base.WebApiRequestOptions) : Promise< boolean > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< boolean >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("DetectColumnIdChanges", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : boolean = response.data as boolean;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Detect columnid changes to the admin version (for determining publish warning)
     * @param request - OwnerType
     * @returns Returns true if columnid changes where found. i.e. if data needs to be moved during publishing.
     */
    public async DetectColumnIdChanges(request: carriers.UserDefinedFieldInfo_DetectColumnIdChangesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;

    /**
     * Detect columnid changes to the admin version (for determining publish warning)
     * @param ownerType - The owner type
     * @returns Returns true if columnid changes where found. i.e. if data needs to be moved during publishing.
     */
    public async DetectColumnIdChanges(ownerType: enums.UDefType, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;

    public async DetectColumnIdChanges(ownerType:enums.UDefType|carriers.UserDefinedFieldInfo_DetectColumnIdChangesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< boolean > {
        let _request : carriers.UserDefinedFieldInfo_DetectColumnIdChangesRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = ownerType;
        if( typeof( first ) === "object" && first && ( typeof(first.OwnerType)!='undefined' ) )
        {
            _request = ownerType as carriers.UserDefinedFieldInfo_DetectColumnIdChangesRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       OwnerType: ownerType as enums.UDefType,
                       };   
            _options = webapi_options;
        }
        return this._DetectColumnIdChanges( _request, _options );
    }


    private async _SetUserDefinedPageOneField(request: carriers.UserDefinedFieldInfo_SetUserDefinedPageOneFieldRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetUserDefinedPageOneField", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Sets a user defined fields as page one field.
     * @param request - OwnerType, UdefFieldId, UserGroupId, FieldLineNo
     * @returns 
     */
    public async SetUserDefinedPageOneField(request: carriers.UserDefinedFieldInfo_SetUserDefinedPageOneFieldRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Sets a user defined fields as page one field.
     * @param ownerType - The user-defined field owner entity
     * @param udefFieldId - The id of the udeffield to set as page one field
     * @param userGroupId - The usergroup id to associate the page one field with.
     * @param fieldLineNo - Page one line number
     * @returns 
     */
    public async SetUserDefinedPageOneField(ownerType: enums.UDefType, udefFieldId: number, userGroupId: number, fieldLineNo: number, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async SetUserDefinedPageOneField(ownerType:enums.UDefType|carriers.UserDefinedFieldInfo_SetUserDefinedPageOneFieldRequest, udefFieldId?:number|base.WebApiRequestOptions, userGroupId?:number, fieldLineNo?:number, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.UserDefinedFieldInfo_SetUserDefinedPageOneFieldRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = ownerType;
        if( typeof( first ) === "object" && first && ( typeof(first.OwnerType)!='undefined' || typeof(first.UdefFieldId)!='undefined' || typeof(first.UserGroupId)!='undefined' || typeof(first.FieldLineNo)!='undefined' ) )
        {
            _request = ownerType as carriers.UserDefinedFieldInfo_SetUserDefinedPageOneFieldRequest;
            _options = udefFieldId as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       OwnerType: ownerType as enums.UDefType,
                       UdefFieldId: udefFieldId as number,
                       UserGroupId: userGroupId as number,
                       FieldLineNo: fieldLineNo as number,
                       };   
            _options = webapi_options;
        }
        return this._SetUserDefinedPageOneField( _request, _options );
    }


    private async _IsPublishEventActive(request: carriers.UserDefinedFieldInfo_IsPublishEventActiveRequest, options?:base.WebApiRequestOptions) : Promise< boolean > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< boolean >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("IsPublishEventActive", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : boolean = response.data as boolean;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Check if the publish event is active for the given type
     * @param request - Type
     * @returns 
     */
    public async IsPublishEventActive(request: carriers.UserDefinedFieldInfo_IsPublishEventActiveRequest, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;

    /**
     * Check if the publish event is active for the given type
     * @param type - 
     * @returns 
     */
    public async IsPublishEventActive(type: enums.UDefType, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;

    public async IsPublishEventActive(type:enums.UDefType|carriers.UserDefinedFieldInfo_IsPublishEventActiveRequest, webapi_options?:base.WebApiRequestOptions) : Promise< boolean > {
        let _request : carriers.UserDefinedFieldInfo_IsPublishEventActiveRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = type;
        if( typeof( first ) === "object" && first && ( typeof(first.Type)!='undefined' ) )
        {
            _request = type as carriers.UserDefinedFieldInfo_IsPublishEventActiveRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       Type: type as enums.UDefType,
                       };   
            _options = webapi_options;
        }
        return this._IsPublishEventActive( _request, _options );
    }


    private async _IsAnyPublishEventActive( options?:base.WebApiRequestOptions) : Promise< boolean > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< boolean >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("IsAnyPublishEventActive", undefined , config);
                base.WebApiBase.SetCompleted(options);
                const res : boolean = response.data as boolean;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    /**
     * Check if any publish events are active
     * @returns 
     */
    public async IsAnyPublishEventActive(webapi_options?:base.WebApiRequestOptions) : Promise< boolean >
    {
        return this._IsAnyPublishEventActive(webapi_options);
    }


    private async _GetChangedPageOneFields(request: carriers.UserDefinedFieldInfo_GetChangedPageOneFieldsRequest, options?:base.WebApiRequestOptions) : Promise< boolean[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< boolean[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetChangedPageOneFields", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : boolean[] = response.data as boolean[];
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Gets which page one fields have changed from the current version
     * @param request - OwnerType, UserGroupId
     * @returns 
     */
    public async GetChangedPageOneFields(request: carriers.UserDefinedFieldInfo_GetChangedPageOneFieldsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< boolean[] >;

    /**
     * Gets which page one fields have changed from the current version
     * @param ownerType - The user-defined field owner-entity.
     * @param userGroupId - Id of UserGroup
     * @returns 
     */
    public async GetChangedPageOneFields(ownerType: enums.UDefType, userGroupId: number, webapi_options?:base.WebApiRequestOptions) : Promise< boolean[] >;

    public async GetChangedPageOneFields(ownerType:enums.UDefType|carriers.UserDefinedFieldInfo_GetChangedPageOneFieldsRequest, userGroupId?:number|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< boolean[] > {
        let _request : carriers.UserDefinedFieldInfo_GetChangedPageOneFieldsRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = ownerType;
        if( typeof( first ) === "object" && first && ( typeof(first.OwnerType)!='undefined' || typeof(first.UserGroupId)!='undefined' ) )
        {
            _request = ownerType as carriers.UserDefinedFieldInfo_GetChangedPageOneFieldsRequest;
            _options = userGroupId as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       OwnerType: ownerType as enums.UDefType,
                       UserGroupId: userGroupId as number,
                       };   
            _options = webapi_options;
        }
        return this._GetChangedPageOneFields( _request, _options );
    }


    private async _SetPageOneFieldGrouping(request: carriers.UserDefinedFieldInfo_SetPageOneFieldGroupingRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetPageOneFieldGrouping", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Sets the Page One Field grouping for a specific entity
     * @param request - OwnerType, Active
     * @returns 
     */
    public async SetPageOneFieldGrouping(request: carriers.UserDefinedFieldInfo_SetPageOneFieldGroupingRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Sets the Page One Field grouping for a specific entity
     * @param ownerType - The user-defined field owner-entity.
     * @param active - If true, use grouping
     * @returns 
     */
    public async SetPageOneFieldGrouping(ownerType: enums.UDefType, active: boolean, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async SetPageOneFieldGrouping(ownerType:enums.UDefType|carriers.UserDefinedFieldInfo_SetPageOneFieldGroupingRequest, active?:boolean|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.UserDefinedFieldInfo_SetPageOneFieldGroupingRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = ownerType;
        if( typeof( first ) === "object" && first && ( typeof(first.OwnerType)!='undefined' || typeof(first.Active)!='undefined' ) )
        {
            _request = ownerType as carriers.UserDefinedFieldInfo_SetPageOneFieldGroupingRequest;
            _options = active as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       OwnerType: ownerType as enums.UDefType,
                       Active: active as boolean,
                       };   
            _options = webapi_options;
        }
        return this._SetPageOneFieldGrouping( _request, _options );
    }


    private async _SetListTableIdAndUDListDefinitionIdFromSelectedListId(request: carriers.UserDefinedFieldInfo_SetListTableIdAndUDListDefinitionIdFromSelectedListIdRequest, options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.UserDefinedFieldInfo >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetListTableIdAndUDListDefinitionIdFromSelectedListId", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.UserDefinedFieldInfo = converters.Create_UserDefinedFieldInfo_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Make stuff similar to what happens in the win client
     * @param request - Info, SelectedListId
     * @returns 
     */
    public async SetListTableIdAndUDListDefinitionIdFromSelectedListId(request: carriers.UserDefinedFieldInfo_SetListTableIdAndUDListDefinitionIdFromSelectedListIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo >;

    /**
     * Make stuff similar to what happens in the win client
     * @param info - 
     * @param selectedListId - 
     * @returns 
     */
    public async SetListTableIdAndUDListDefinitionIdFromSelectedListId(info: carriers.UserDefinedFieldInfo, selectedListId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo >;

    public async SetListTableIdAndUDListDefinitionIdFromSelectedListId(info:carriers.UserDefinedFieldInfo|carriers.UserDefinedFieldInfo_SetListTableIdAndUDListDefinitionIdFromSelectedListIdRequest, selectedListId?:number|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.UserDefinedFieldInfo > {
        let _request : carriers.UserDefinedFieldInfo_SetListTableIdAndUDListDefinitionIdFromSelectedListIdRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = info;
        if( typeof( first ) === "object" && first && ( typeof(first.Info)!='undefined' || typeof(first.SelectedListId)!='undefined' ) )
        {
            _request = info as carriers.UserDefinedFieldInfo_SetListTableIdAndUDListDefinitionIdFromSelectedListIdRequest;
            _options = selectedListId as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       Info: info as carriers.UserDefinedFieldInfo,
                       SelectedListId: selectedListId as number,
                       };   
            _options = webapi_options;
        }
        return this._SetListTableIdAndUDListDefinitionIdFromSelectedListId( _request, _options );
    }


    private async _FigureOutListIdFromListTableIdAndUDListDefinitionId(request: carriers.UserDefinedFieldInfo_FigureOutListIdFromListTableIdAndUDListDefinitionIdRequest, options?:base.WebApiRequestOptions) : Promise< number > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< number >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("FigureOutListIdFromListTableIdAndUDListDefinitionId", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : number = response.data as number;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Kind of the reverse of SetListTableIdAndUDListDefinitionIdFromSelectedListId
     * @param request - Info
     * @returns 
     */
    public async FigureOutListIdFromListTableIdAndUDListDefinitionId(request: carriers.UserDefinedFieldInfo_FigureOutListIdFromListTableIdAndUDListDefinitionIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< number >;

    /**
     * Kind of the reverse of SetListTableIdAndUDListDefinitionIdFromSelectedListId
     * @param info - 
     * @returns 
     */
    public async FigureOutListIdFromListTableIdAndUDListDefinitionId(info: carriers.UserDefinedFieldInfo, webapi_options?:base.WebApiRequestOptions) : Promise< number >;

    public async FigureOutListIdFromListTableIdAndUDListDefinitionId(info:carriers.UserDefinedFieldInfo|carriers.UserDefinedFieldInfo_FigureOutListIdFromListTableIdAndUDListDefinitionIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< number > {
        let _request : carriers.UserDefinedFieldInfo_FigureOutListIdFromListTableIdAndUDListDefinitionIdRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = info;
        if( typeof( first ) === "object" && first && ( typeof(first.Info)!='undefined' ) )
        {
            _request = info as carriers.UserDefinedFieldInfo_FigureOutListIdFromListTableIdAndUDListDefinitionIdRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       Info: info as carriers.UserDefinedFieldInfo,
                       };   
            _options = webapi_options;
        }
        return this._FigureOutListIdFromListTableIdAndUDListDefinitionId( _request, _options );
    }


    private async _SetRankOnFields(request: carriers.UserDefinedFieldInfo_SetRankOnFieldsRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetRankOnFields", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Change rank of user defined fields
     * @param request - OwnerType, RankedFieldsIds
     * @returns 
     */
    public async SetRankOnFields(request: carriers.UserDefinedFieldInfo_SetRankOnFieldsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Change rank of user defined fields
     * @param ownerType - The user-defined field owner-entity.
     * @param rankedFieldsIds - All IDs of this owner-entity in desired rank order
     * @returns 
     */
    public async SetRankOnFields(ownerType: enums.UDefType, rankedFieldsIds: number[], webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async SetRankOnFields(ownerType:enums.UDefType|carriers.UserDefinedFieldInfo_SetRankOnFieldsRequest, rankedFieldsIds?:number[]|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.UserDefinedFieldInfo_SetRankOnFieldsRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = ownerType;
        if( typeof( first ) === "object" && first && ( typeof(first.OwnerType)!='undefined' || typeof(first.RankedFieldsIds)!='undefined' ) )
        {
            _request = ownerType as carriers.UserDefinedFieldInfo_SetRankOnFieldsRequest;
            _options = rankedFieldsIds as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       OwnerType: ownerType as enums.UDefType,
                       RankedFieldsIds: rankedFieldsIds as number[],
                       };   
            _options = webapi_options;
        }
        return this._SetRankOnFields( _request, _options );
    }


    private async _SetPublishStartSystemEvent(request: carriers.UserDefinedFieldInfo_SetPublishStartSystemEventRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetPublishStartSystemEvent", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Set the start flag for udef publishing. Must be called before PUBLISH, or PUBLISH will fail. Start flag is removed when publish process completes.
     * @param request - OwnerType
     * @returns 
     */
    public async SetPublishStartSystemEvent(request: carriers.UserDefinedFieldInfo_SetPublishStartSystemEventRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Set the start flag for udef publishing. Must be called before PUBLISH, or PUBLISH will fail. Start flag is removed when publish process completes.
     * @param ownerType - The user-defined field owner-entity.
     * @returns 
     */
    public async SetPublishStartSystemEvent(ownerType: enums.UDefType, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async SetPublishStartSystemEvent(ownerType:enums.UDefType|carriers.UserDefinedFieldInfo_SetPublishStartSystemEventRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.UserDefinedFieldInfo_SetPublishStartSystemEventRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = ownerType;
        if( typeof( first ) === "object" && first && ( typeof(first.OwnerType)!='undefined' ) )
        {
            _request = ownerType as carriers.UserDefinedFieldInfo_SetPublishStartSystemEventRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       OwnerType: ownerType as enums.UDefType,
                       };   
            _options = webapi_options;
        }
        return this._SetPublishStartSystemEvent( _request, _options );
    }


    private async _ClearCaches( options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ClearCaches", undefined , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    /**
     * Clear all relevant caches. This is normally done automatically but can be useful in certain circumstances.
     * @returns 
     */
    public async ClearCaches(webapi_options?:base.WebApiRequestOptions) : Promise< void >
    {
        return this._ClearCaches(webapi_options);
    }

    } // class v1UserDefinedFieldInfoAgentController 


