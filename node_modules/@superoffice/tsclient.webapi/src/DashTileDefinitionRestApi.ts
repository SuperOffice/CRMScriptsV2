
/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
//
// File:          DashTileDefinitionRestApi.ts
//
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------

import { AxiosRequestConfig, AxiosError } from 'axios';
import * as moment from 'moment';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
import * as converters from './Converters';
import { FromBase64ToString, ToBase64 } from './Base64';

/**
 * Dashboard Tile definition
 * Agent that lets you configure dashboard tiles and retrieve dashboard data
 *
 * `api/v1/DashTileDefinition`
 */
export interface IDashTileDefinitionRestApi {

    GetDefault(options?:base.WebApiGetRequestOptions): Promise< carriers.DashTileDefinition >;
    Post(entity: carriers.DashTileDefinition, options?:base.WebApiPutRequestOptions) : Promise< carriers.DashTileDefinition >;
    PutById(id:number, entity: carriers.DashTileDefinition, options?:base.WebApiPutRequestOptions) : Promise< carriers.DashTileDefinition >;
    PatchById(id:number, entity: base.WebApiPatchOperation[] | carriers.DashTileDefinition, options?:base.WebApiPutRequestOptions) : Promise< carriers.DashTileDefinition >;
    DeleteById(DashTileDefinitionId: number, options?:base.WebApiPutRequestOptions) : Promise<void>;
    GetById(DashTileDefinitionId: number, options?:base.WebApiGetRequestOptions) :  Promise< carriers.DashTileDefinition >;
} // interface IDashTileDefinitionRestApi




/**
 * Dashboard Tile definition
 * Agent that lets you configure dashboard tiles and retrieve dashboard data
 *
 * `api/v1/DashTileDefinition`
 */
export class DashTileDefinitionRestApi extends base.WebApiBase implements IDashTileDefinitionRestApi {
    constructor(baseUrl?: string, languageCode?:string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config:AxiosRequestConfig, languageCode?:string, cultureCode?: string);
    constructor(options: base.WebApiOptions);

    constructor(baseUrlOrOptions: string|base.WebApiOptions|undefined,
                langOrconfigOrRM?: string|base.ResourceParsing|AxiosRequestConfig|any, 
                langOrResourceOrRM?:string|base.ResourceParsing|any, 
                cultureCode?: string, 
                ) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/DashTileDefinition/";
        super(options);
    }


    /**
     * `GET /api/v1/DashTileDefinition/default`
     * Set default values into a new DashTileDefinition.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    public async GetDefault(options?:base.WebApiGetRequestOptions): Promise< carriers.DashTileDefinition > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.DashTileDefinition >(async (resolve, reject) => {
            try {
                const response = await this._axios.get("default", config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.DashTileDefinition = converters.Create_DashTileDefinition_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    /*
     * `POST /api/v1/DashTileDefinition/`
     * Creates a new DashTileDefinition 
     * @param newDashTileDefinition - The DashTileDefinition to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New DashTileDefinition
     */
    public async Post(newDashTileDefinition: carriers.DashTileDefinition, options?:base.WebApiPutRequestOptions) : Promise< carriers.DashTileDefinition > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.DashTileDefinition >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("", newDashTileDefinition, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.DashTileDefinition = converters.Create_DashTileDefinition_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    /*
     * `PUT /api/v1/DashTileDefinition/123`
     * Updates the existing DashTileDefinition
     * @param dashTileDefinition - The DashTileDefinition to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns The updated DashTileDefinition
     */
    public async PutById(id:number, dashTileDefinition: carriers.DashTileDefinition, options?:base.WebApiPutRequestOptions) : Promise< carriers.DashTileDefinition > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.DashTileDefinition >(async (resolve, reject) => {
            try {
                const response = await this._axios.put(id.toString(), dashTileDefinition, config);
                base.WebApiBase.SetCompleted(options);
                let res : carriers.DashTileDefinition = null;
                if( response.status != 304 )
                    res = converters.Create_DashTileDefinition_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /*
     * `PATCH /api/v1/DashTileDefinition/123`
     * Updates an existing DashTileDefinition
     * @param dashTileDefinition - The partial DashTileDefinition containing updated values, or an array of RFC6902 PATCH operations.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns The updated DashTileDefinition
     */
    public async PatchById(id:number, dashTileDefinition: base.WebApiPatchOperation[] | carriers.DashTileDefinition, options?:base.WebApiPutRequestOptions) : Promise< carriers.DashTileDefinition > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.DashTileDefinition >(async (resolve, reject) => {
            try {
                const response = await this._axios.patch(id.toString(), dashTileDefinition, config);
                base.WebApiBase.SetCompleted(options);
                let res : carriers.DashTileDefinition = null;
                if( response.status != 304 )
                    res = converters.Create_DashTileDefinition_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * `DELETE /api/v1/DashTileDefinition/123`
     * Deletes the DashTileDefinition
     * @param dashTileDefinitionId - The id of the DashTileDefinition to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    public async DeleteById(dashTileDefinitionId: number, options?:base.WebApiPutRequestOptions) : Promise<void> {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                const response = await this._axios.delete( dashTileDefinitionId.toString(), config );
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * `GET /api/v1/DashTileDefinition/123`
     * Get an existing DashTileDefinition
     * @param dashTileDefinitionId - The DashTileDefinition to be get.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns The DashTileDefinition
     */
    public async GetById( dashTileDefinitionId: number, options?:base.WebApiGetRequestOptions) :  Promise< carriers.DashTileDefinition > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.DashTileDefinition >(async (resolve, reject) => {
            try {
                const response = await this._axios.get( dashTileDefinitionId.toString(), config);
                base.WebApiBase.SetCompleted(options);
                let res : carriers.DashTileDefinition = null;
                if( response.status != 304 )
                    res = converters.Create_DashTileDefinition_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


} // class DashTileDefinitionRestApi 

