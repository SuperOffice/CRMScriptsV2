// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>


/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
//
// File:          WebApi/BulkUpdateAgent.ts
//
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------

import { AxiosRequestConfig } from 'axios';
import * as moment from 'moment';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
import * as converters from './Converters';
import { FromBase64ToString, ToBase64 } from './Base64';

/**
 * Agent used for bulk update methods
 */
export interface IBulkUpdateAgent {
    GetAvailableFields(request: carriers.BulkUpdate_GetAvailableFieldsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.FieldValueInfo[] >;
    GetAvailableFields(tablename: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.FieldValueInfo[] >;
    GetStoredFields(request: carriers.BulkUpdate_GetStoredFieldsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.FieldValueInfo[] >;
    GetStoredFields(tablename: string, context: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.FieldValueInfo[] >;
    ExecuteBySelectionId(request: carriers.BulkUpdate_ExecuteBySelectionIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< number >;
    ExecuteBySelectionId(fieldValueInfos: carriers.FieldValueInfo[], tableName: string, context: string, selectionId: number, isShadow: boolean, webapi_options?:base.WebApiRequestOptions) : Promise< number >;
    ExecuteByEntityIds(request: carriers.BulkUpdate_ExecuteByEntityIdsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< number >;
    ExecuteByEntityIds(fieldValueInfos: carriers.FieldValueInfo[], tableName: string, context: string, ids: string, webapi_options?:base.WebApiRequestOptions) : Promise< number >;
    GetJobResultsFromStorageAsJson(webapi_options?:base.WebApiRequestOptions) : Promise< string[] >;
    RemoveStoredFields(request: carriers.BulkUpdate_RemoveStoredFieldsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;
    RemoveStoredFields(tableName: string, context: string, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;
    RemoveStoredFieldsAndGetDefaultFields(request: carriers.BulkUpdate_RemoveStoredFieldsAndGetDefaultFieldsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.FieldValueInfo[] >;
    RemoveStoredFieldsAndGetDefaultFields(tableName: string, context: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.FieldValueInfo[] >;
    GetJobResultAsJsonFromBinaryObjectId(request: carriers.BulkUpdate_GetJobResultAsJsonFromBinaryObjectIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string >;
    GetJobResultAsJsonFromBinaryObjectId(tableName: string, binaryObjectId: number, webapi_options?:base.WebApiRequestOptions) : Promise< string >;
} // interface IBulkUpdateAgent




/**
 * Agent used for bulk update methods
 */
export class BulkUpdateAgent extends base.WebApiBase implements IBulkUpdateAgent {
    constructor(baseUrl?: string, languageCode?:string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config:AxiosRequestConfig, languageCode?:string, cultureCode?: string);
    constructor(options: base.WebApiOptions);

    constructor(baseUrlOrOptions: string|base.WebApiOptions|undefined,
                langOrconfigOrRM?: string|base.ResourceParsing|AxiosRequestConfig|any, 
                langOrResourceOrRM?:string|base.ResourceParsing|any, 
                cultureCode?: string, 
                ) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/BulkUpdate/";
        super(options);
    }



    private async _GetAvailableFields(request: carriers.BulkUpdate_GetAvailableFieldsRequest, options?:base.WebApiRequestOptions) : Promise< carriers.FieldValueInfo[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.FieldValueInfo[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetAvailableFields", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.FieldValueInfo[] = converters.Create_FieldValueInfoArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Get all available fields for a given tablename/entity
     * @param request - Tablename
     * @returns Returns array of the available fields for the given entity
     */
    public async GetAvailableFields(request: carriers.BulkUpdate_GetAvailableFieldsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.FieldValueInfo[] >;

    /**
     * Get all available fields for a given tablename/entity
     * @param tablename - The name of the wanted tablename
     * @returns Returns array of the available fields for the given entity
     */
    public async GetAvailableFields(tablename: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.FieldValueInfo[] >;

    public async GetAvailableFields(tablename:string|carriers.BulkUpdate_GetAvailableFieldsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.FieldValueInfo[] > {
        let _request : carriers.BulkUpdate_GetAvailableFieldsRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = tablename;
        if( typeof( first ) === "object" && first && ( typeof(first.Tablename)!='undefined' ) )
        {
            _request = tablename as carriers.BulkUpdate_GetAvailableFieldsRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       Tablename: tablename as string,
                       };   
            _options = webapi_options;
        }
        return this._GetAvailableFields( _request, _options );
    }


    private async _GetStoredFields(request: carriers.BulkUpdate_GetStoredFieldsRequest, options?:base.WebApiRequestOptions) : Promise< carriers.FieldValueInfo[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.FieldValueInfo[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetStoredFields", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.FieldValueInfo[] = converters.Create_FieldValueInfoArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Get all stored fields for a given tablename/entity and context
     * @param request - Tablename, Context
     * @returns Returns array of the stored or default fields for the given entity
     */
    public async GetStoredFields(request: carriers.BulkUpdate_GetStoredFieldsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.FieldValueInfo[] >;

    /**
     * Get all stored fields for a given tablename/entity and context
     * @param tablename - The name of the wanted tablename
     * @param context - Where is the function called for
     * @returns Returns array of the stored or default fields for the given entity
     */
    public async GetStoredFields(tablename: string, context: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.FieldValueInfo[] >;

    public async GetStoredFields(tablename:string|carriers.BulkUpdate_GetStoredFieldsRequest, context?:string|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.FieldValueInfo[] > {
        let _request : carriers.BulkUpdate_GetStoredFieldsRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = tablename;
        if( typeof( first ) === "object" && first && ( typeof(first.Tablename)!='undefined' || typeof(first.Context)!='undefined' ) )
        {
            _request = tablename as carriers.BulkUpdate_GetStoredFieldsRequest;
            _options = context as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       Tablename: tablename as string,
                       Context: context as string,
                       };   
            _options = webapi_options;
        }
        return this._GetStoredFields( _request, _options );
    }


    private async _ExecuteBySelectionId(request: carriers.BulkUpdate_ExecuteBySelectionIdRequest, options?:base.WebApiRequestOptions) : Promise< number > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< number >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ExecuteBySelectionId", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : number = response.data as number;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Do the batchupdate on this selection
     * @param request - FieldValueInfos, TableName, Context, SelectionId, IsShadow
     * @returns Return batchtaskinfoid
     */
    public async ExecuteBySelectionId(request: carriers.BulkUpdate_ExecuteBySelectionIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< number >;

    /**
     * Do the batchupdate on this selection
     * @param fieldValueInfos - The name of the wanted tablename
     * @param tableName - The name of the table to bulk update
     * @param context - Where is the function called for
     * @param selectionId - The id of the selection
     * @param isShadow - Use the shadow selection
     * @returns Return batchtaskinfoid
     */
    public async ExecuteBySelectionId(fieldValueInfos: carriers.FieldValueInfo[], tableName: string, context: string, selectionId: number, isShadow: boolean, webapi_options?:base.WebApiRequestOptions) : Promise< number >;

    public async ExecuteBySelectionId(fieldValueInfos:carriers.FieldValueInfo[]|carriers.BulkUpdate_ExecuteBySelectionIdRequest, tableName?:string|base.WebApiRequestOptions, context?:string, selectionId?:number, isShadow?:boolean, webapi_options?:base.WebApiRequestOptions) : Promise< number > {
        let _request : carriers.BulkUpdate_ExecuteBySelectionIdRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = fieldValueInfos;
        if( typeof( first ) === "object" && first && ( typeof(first.FieldValueInfos)!='undefined' || typeof(first.TableName)!='undefined' || typeof(first.Context)!='undefined' || typeof(first.SelectionId)!='undefined' || typeof(first.IsShadow)!='undefined' ) )
        {
            _request = fieldValueInfos as carriers.BulkUpdate_ExecuteBySelectionIdRequest;
            _options = tableName as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       FieldValueInfos: fieldValueInfos as carriers.FieldValueInfo[],
                       TableName: tableName as string,
                       Context: context as string,
                       SelectionId: selectionId as number,
                       IsShadow: isShadow as boolean,
                       };   
            _options = webapi_options;
        }
        return this._ExecuteBySelectionId( _request, _options );
    }


    private async _ExecuteByEntityIds(request: carriers.BulkUpdate_ExecuteByEntityIdsRequest, options?:base.WebApiRequestOptions) : Promise< number > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< number >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ExecuteByEntityIds", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : number = response.data as number;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Do the batchupdate on selected
     * @param request - FieldValueInfos, TableName, Context, Ids
     * @returns Return batchtaskinfoid
     */
    public async ExecuteByEntityIds(request: carriers.BulkUpdate_ExecuteByEntityIdsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< number >;

    /**
     * Do the batchupdate on selected
     * @param fieldValueInfos - The name of the wanted tablename
     * @param tableName - The name of the table to bulk update
     * @param context - Where is the function called from
     * @param ids - Comma separated string of the ids of the entities to update
     * @returns Return batchtaskinfoid
     */
    public async ExecuteByEntityIds(fieldValueInfos: carriers.FieldValueInfo[], tableName: string, context: string, ids: string, webapi_options?:base.WebApiRequestOptions) : Promise< number >;

    public async ExecuteByEntityIds(fieldValueInfos:carriers.FieldValueInfo[]|carriers.BulkUpdate_ExecuteByEntityIdsRequest, tableName?:string|base.WebApiRequestOptions, context?:string, ids?:string, webapi_options?:base.WebApiRequestOptions) : Promise< number > {
        let _request : carriers.BulkUpdate_ExecuteByEntityIdsRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = fieldValueInfos;
        if( typeof( first ) === "object" && first && ( typeof(first.FieldValueInfos)!='undefined' || typeof(first.TableName)!='undefined' || typeof(first.Context)!='undefined' || typeof(first.Ids)!='undefined' ) )
        {
            _request = fieldValueInfos as carriers.BulkUpdate_ExecuteByEntityIdsRequest;
            _options = tableName as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       FieldValueInfos: fieldValueInfos as carriers.FieldValueInfo[],
                       TableName: tableName as string,
                       Context: context as string,
                       Ids: ids as string,
                       };   
            _options = webapi_options;
        }
        return this._ExecuteByEntityIds( _request, _options );
    }


    private async _GetJobResultsFromStorageAsJson( options?:base.WebApiRequestOptions) : Promise< string[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< string[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetJobResultsFromStorageAsJson", undefined , config);
                base.WebApiBase.SetCompleted(options);
                const res : string[] = response.data as string[];
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    /**
     * Get result of the batchupdate job
     * @returns Result of job as json
     */
    public async GetJobResultsFromStorageAsJson(webapi_options?:base.WebApiRequestOptions) : Promise< string[] >
    {
        return this._GetJobResultsFromStorageAsJson(webapi_options);
    }


    private async _RemoveStoredFields(request: carriers.BulkUpdate_RemoveStoredFieldsRequest, options?:base.WebApiRequestOptions) : Promise< boolean > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< boolean >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("RemoveStoredFields", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : boolean = response.data as boolean;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Remove the stored settings of the bulk update for this table from this context
     * @param request - TableName, Context
     * @returns 
     */
    public async RemoveStoredFields(request: carriers.BulkUpdate_RemoveStoredFieldsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;

    /**
     * Remove the stored settings of the bulk update for this table from this context
     * @param tableName - The name of the table to remove stored settings from
     * @param context - Where is the function called from that we will remove the settings from
     * @returns 
     */
    public async RemoveStoredFields(tableName: string, context: string, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;

    public async RemoveStoredFields(tableName:string|carriers.BulkUpdate_RemoveStoredFieldsRequest, context?:string|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< boolean > {
        let _request : carriers.BulkUpdate_RemoveStoredFieldsRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = tableName;
        if( typeof( first ) === "object" && first && ( typeof(first.TableName)!='undefined' || typeof(first.Context)!='undefined' ) )
        {
            _request = tableName as carriers.BulkUpdate_RemoveStoredFieldsRequest;
            _options = context as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       TableName: tableName as string,
                       Context: context as string,
                       };   
            _options = webapi_options;
        }
        return this._RemoveStoredFields( _request, _options );
    }


    private async _RemoveStoredFieldsAndGetDefaultFields(request: carriers.BulkUpdate_RemoveStoredFieldsAndGetDefaultFieldsRequest, options?:base.WebApiRequestOptions) : Promise< carriers.FieldValueInfo[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.FieldValueInfo[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("RemoveStoredFieldsAndGetDefaultFields", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.FieldValueInfo[] = converters.Create_FieldValueInfoArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Remove the stored settings of the bulk update for this table from this context, to get the default settings instead
     * @param request - TableName, Context
     * @returns Returns array of the available fields for the given tablename
     */
    public async RemoveStoredFieldsAndGetDefaultFields(request: carriers.BulkUpdate_RemoveStoredFieldsAndGetDefaultFieldsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.FieldValueInfo[] >;

    /**
     * Remove the stored settings of the bulk update for this table from this context, to get the default settings instead
     * @param tableName - The name of the table to remove stored settings from
     * @param context - Where is the function called from that we will remove the settings from
     * @returns Returns array of the available fields for the given tablename
     */
    public async RemoveStoredFieldsAndGetDefaultFields(tableName: string, context: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.FieldValueInfo[] >;

    public async RemoveStoredFieldsAndGetDefaultFields(tableName:string|carriers.BulkUpdate_RemoveStoredFieldsAndGetDefaultFieldsRequest, context?:string|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.FieldValueInfo[] > {
        let _request : carriers.BulkUpdate_RemoveStoredFieldsAndGetDefaultFieldsRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = tableName;
        if( typeof( first ) === "object" && first && ( typeof(first.TableName)!='undefined' || typeof(first.Context)!='undefined' ) )
        {
            _request = tableName as carriers.BulkUpdate_RemoveStoredFieldsAndGetDefaultFieldsRequest;
            _options = context as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       TableName: tableName as string,
                       Context: context as string,
                       };   
            _options = webapi_options;
        }
        return this._RemoveStoredFieldsAndGetDefaultFields( _request, _options );
    }


    private async _GetJobResultAsJsonFromBinaryObjectId(request: carriers.BulkUpdate_GetJobResultAsJsonFromBinaryObjectIdRequest, options?:base.WebApiRequestOptions) : Promise< string > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< string >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetJobResultAsJsonFromBinaryObjectId", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : string = response.data as string;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Get result of the batchupdate job
     * @param request - TableName, BinaryObjectId
     * @returns Result of job as json
     */
    public async GetJobResultAsJsonFromBinaryObjectId(request: carriers.BulkUpdate_GetJobResultAsJsonFromBinaryObjectIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string >;

    /**
     * Get result of the batchupdate job
     * @param tableName - The name of the table that was updated to show the log from
     * @param binaryObjectId - Which binaryobject id has stored the job result
     * @returns Result of job as json
     */
    public async GetJobResultAsJsonFromBinaryObjectId(tableName: string, binaryObjectId: number, webapi_options?:base.WebApiRequestOptions) : Promise< string >;

    public async GetJobResultAsJsonFromBinaryObjectId(tableName:string|carriers.BulkUpdate_GetJobResultAsJsonFromBinaryObjectIdRequest, binaryObjectId?:number|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< string > {
        let _request : carriers.BulkUpdate_GetJobResultAsJsonFromBinaryObjectIdRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = tableName;
        if( typeof( first ) === "object" && first && ( typeof(first.TableName)!='undefined' || typeof(first.BinaryObjectId)!='undefined' ) )
        {
            _request = tableName as carriers.BulkUpdate_GetJobResultAsJsonFromBinaryObjectIdRequest;
            _options = binaryObjectId as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       TableName: tableName as string,
                       BinaryObjectId: binaryObjectId as number,
                       };   
            _options = webapi_options;
        }
        return this._GetJobResultAsJsonFromBinaryObjectId( _request, _options );
    }

    } // class v1BulkUpdateAgentController 


