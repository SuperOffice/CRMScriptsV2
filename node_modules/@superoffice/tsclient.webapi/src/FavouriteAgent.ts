// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>


/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
//
// File:          WebApi/FavouriteAgent.ts
//
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------

import { AxiosRequestConfig } from 'axios';
import * as moment from 'moment';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
import * as converters from './Converters';
import { FromBase64ToString, ToBase64 } from './Base64';

/**
 * Agent used for retrieveing and setting favourites
 */
export interface IFavouriteAgent {
    IsFavourite(request: carriers.Favourite_IsFavouriteRequest, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;
    IsFavourite(tableName: string, recordId: number, associateId: number, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;
    AddFavourite(request: carriers.Favourite_AddFavouriteRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    AddFavourite(tableName: string, recordId: number, associateId: number, extraInfo: string, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    AddFavourites(request: carriers.Favourite_AddFavouritesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    AddFavourites(tableName: string, recordIds: number[], associateId: number, extraInfo: string, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    AddTicketsToFavouritesByProvider(request: carriers.Favourite_AddTicketsToFavouritesByProviderRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    AddTicketsToFavouritesByProvider(providerName: string, restrictions: carriers.ArchiveRestrictionInfo[], associateId: number, extraInfo: string, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    RemoveFavourites(request: carriers.Favourite_RemoveFavouritesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    RemoveFavourites(tableName: string, recordIds: number[], associateId: number, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    RemoveTicketsFromFavouritesByProvider(request: carriers.Favourite_RemoveTicketsFromFavouritesByProviderRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    RemoveTicketsFromFavouritesByProvider(providerName: string, restrictions: carriers.ArchiveRestrictionInfo[], associateId: number, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    GetFavourites(request: carriers.Favourite_GetFavouritesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.Favourite[] >;
    GetFavourites(tableName: string, associateId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.Favourite[] >;
    RemoveFavourite(request: carriers.Favourite_RemoveFavouriteRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    RemoveFavourite(tableName: string, recordId: number, associateId: number, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    RemoveAllFavourites(request: carriers.Favourite_RemoveAllFavouritesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    RemoveAllFavourites(tableName: string, associateId: number, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    ToggleFavourite(request: carriers.Favourite_ToggleFavouriteRequest, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;
    ToggleFavourite(tableName: string, recordId: number, associateId: number, extraInfo: string, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;
    RemoveFavouritesById(request: carriers.Favourite_RemoveFavouritesByIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    RemoveFavouritesById(favouriteIds: number[], webapi_options?:base.WebApiRequestOptions) : Promise< void >;
} // interface IFavouriteAgent




/**
 * Agent used for retrieveing and setting favourites
 */
export class FavouriteAgent extends base.WebApiBase implements IFavouriteAgent {
    constructor(baseUrl?: string, languageCode?:string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config:AxiosRequestConfig, languageCode?:string, cultureCode?: string);
    constructor(options: base.WebApiOptions);

    constructor(baseUrlOrOptions: string|base.WebApiOptions|undefined,
                langOrconfigOrRM?: string|base.ResourceParsing|AxiosRequestConfig|any, 
                langOrResourceOrRM?:string|base.ResourceParsing|any, 
                cultureCode?: string, 
                ) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Favourite/";
        super(options);
    }



    private async _IsFavourite(request: carriers.Favourite_IsFavouriteRequest, options?:base.WebApiRequestOptions) : Promise< boolean > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< boolean >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("IsFavourite", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : boolean = response.data as boolean;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Checks if a record in a table is a favourite for an associate
     * @param request - TableName, RecordId, AssociateId
     * @returns Is Favourite?
     */
    public async IsFavourite(request: carriers.Favourite_IsFavouriteRequest, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;

    /**
     * Checks if a record in a table is a favourite for an associate
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.
     * @param recordId - Id of a record in your specified table (tableName)
     * @param associateId - Id of a current user
     * @returns Is Favourite?
     */
    public async IsFavourite(tableName: string, recordId: number, associateId: number, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;

    public async IsFavourite(tableName:string|carriers.Favourite_IsFavouriteRequest, recordId?:number|base.WebApiRequestOptions, associateId?:number, webapi_options?:base.WebApiRequestOptions) : Promise< boolean > {
        let _request : carriers.Favourite_IsFavouriteRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = tableName;
        if( typeof( first ) === "object" && first && ( typeof(first.TableName)!='undefined' || typeof(first.RecordId)!='undefined' || typeof(first.AssociateId)!='undefined' ) )
        {
            _request = tableName as carriers.Favourite_IsFavouriteRequest;
            _options = recordId as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       TableName: tableName as string,
                       RecordId: recordId as number,
                       AssociateId: associateId as number,
                       };   
            _options = webapi_options;
        }
        return this._IsFavourite( _request, _options );
    }


    private async _AddFavourite(request: carriers.Favourite_AddFavouriteRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("AddFavourite", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Add a record in a table as a favourite for an associate
     * @param request - TableName, RecordId, AssociateId, ExtraInfo
     * @returns This method has no return value
     */
    public async AddFavourite(request: carriers.Favourite_AddFavouriteRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Add a record in a table as a favourite for an associate
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.
     * @param recordId - Id of a record in your specified table (tableName)
     * @param associateId - Id of a current user
     * @param extraInfo - Any extra information
     * @returns This method has no return value
     */
    public async AddFavourite(tableName: string, recordId: number, associateId: number, extraInfo: string, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async AddFavourite(tableName:string|carriers.Favourite_AddFavouriteRequest, recordId?:number|base.WebApiRequestOptions, associateId?:number, extraInfo?:string, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.Favourite_AddFavouriteRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = tableName;
        if( typeof( first ) === "object" && first && ( typeof(first.TableName)!='undefined' || typeof(first.RecordId)!='undefined' || typeof(first.AssociateId)!='undefined' || typeof(first.ExtraInfo)!='undefined' ) )
        {
            _request = tableName as carriers.Favourite_AddFavouriteRequest;
            _options = recordId as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       TableName: tableName as string,
                       RecordId: recordId as number,
                       AssociateId: associateId as number,
                       ExtraInfo: extraInfo as string,
                       };   
            _options = webapi_options;
        }
        return this._AddFavourite( _request, _options );
    }


    private async _AddFavourites(request: carriers.Favourite_AddFavouritesRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("AddFavourites", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Add a list of record ids as favourites for an associate
     * @param request - TableName, RecordIds, AssociateId, ExtraInfo
     * @returns This method has no return value
     */
    public async AddFavourites(request: carriers.Favourite_AddFavouritesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Add a list of record ids as favourites for an associate
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.
     * @param recordIds - Ids of records in your specified table (tableName). Corresponding rows will be added as Favourites.
     * @param associateId - Id of a current user
     * @param extraInfo - Any extra information
     * @returns This method has no return value
     */
    public async AddFavourites(tableName: string, recordIds: number[], associateId: number, extraInfo: string, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async AddFavourites(tableName:string|carriers.Favourite_AddFavouritesRequest, recordIds?:number[]|base.WebApiRequestOptions, associateId?:number, extraInfo?:string, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.Favourite_AddFavouritesRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = tableName;
        if( typeof( first ) === "object" && first && ( typeof(first.TableName)!='undefined' || typeof(first.RecordIds)!='undefined' || typeof(first.AssociateId)!='undefined' || typeof(first.ExtraInfo)!='undefined' ) )
        {
            _request = tableName as carriers.Favourite_AddFavouritesRequest;
            _options = recordIds as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       TableName: tableName as string,
                       RecordIds: recordIds as number[],
                       AssociateId: associateId as number,
                       ExtraInfo: extraInfo as string,
                       };   
            _options = webapi_options;
        }
        return this._AddFavourites( _request, _options );
    }


    private async _AddTicketsToFavouritesByProvider(request: carriers.Favourite_AddTicketsToFavouritesByProviderRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("AddTicketsToFavouritesByProvider", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Add a list of tickets as favourites that are given by the ticket provider.
     * @param request - ProviderName, Restrictions, AssociateId, ExtraInfo
     * @returns This method has no return value
     */
    public async AddTicketsToFavouritesByProvider(request: carriers.Favourite_AddTicketsToFavouritesByProviderRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Add a list of tickets as favourites that are given by the ticket provider.
     * @param providerName - Name of a ticket provider
     * @param restrictions - Query restrictions to be added to provider. Fixed providers, such as LastTicketsProvider, FavouriteTicketsProvider etc. already have mandatory restrictions setup - in such case extra restrictions will be combined, however for general use case for fixed providers you can pass an empty array and provider will return default results. For selection providers generally you should pass selectionId as a restriction.
     * @param associateId - Id of a current user
     * @param extraInfo - Any extra information
     * @returns This method has no return value
     */
    public async AddTicketsToFavouritesByProvider(providerName: string, restrictions: carriers.ArchiveRestrictionInfo[], associateId: number, extraInfo: string, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async AddTicketsToFavouritesByProvider(providerName:string|carriers.Favourite_AddTicketsToFavouritesByProviderRequest, restrictions?:carriers.ArchiveRestrictionInfo[]|base.WebApiRequestOptions, associateId?:number, extraInfo?:string, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.Favourite_AddTicketsToFavouritesByProviderRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = providerName;
        if( typeof( first ) === "object" && first && ( typeof(first.ProviderName)!='undefined' || typeof(first.Restrictions)!='undefined' || typeof(first.AssociateId)!='undefined' || typeof(first.ExtraInfo)!='undefined' ) )
        {
            _request = providerName as carriers.Favourite_AddTicketsToFavouritesByProviderRequest;
            _options = restrictions as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ProviderName: providerName as string,
                       Restrictions: restrictions as carriers.ArchiveRestrictionInfo[],
                       AssociateId: associateId as number,
                       ExtraInfo: extraInfo as string,
                       };   
            _options = webapi_options;
        }
        return this._AddTicketsToFavouritesByProvider( _request, _options );
    }


    private async _RemoveFavourites(request: carriers.Favourite_RemoveFavouritesRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("RemoveFavourites", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Remove a list of record ids from favourites for an associate
     * @param request - TableName, RecordIds, AssociateId
     * @returns This method has no return value
     */
    public async RemoveFavourites(request: carriers.Favourite_RemoveFavouritesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Remove a list of record ids from favourites for an associate
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.
     * @param recordIds - Ids of records in your specified table (tableName). Corresponding rows will be removed from Favourites.
     * @param associateId - Id of a current user
     * @returns This method has no return value
     */
    public async RemoveFavourites(tableName: string, recordIds: number[], associateId: number, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async RemoveFavourites(tableName:string|carriers.Favourite_RemoveFavouritesRequest, recordIds?:number[]|base.WebApiRequestOptions, associateId?:number, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.Favourite_RemoveFavouritesRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = tableName;
        if( typeof( first ) === "object" && first && ( typeof(first.TableName)!='undefined' || typeof(first.RecordIds)!='undefined' || typeof(first.AssociateId)!='undefined' ) )
        {
            _request = tableName as carriers.Favourite_RemoveFavouritesRequest;
            _options = recordIds as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       TableName: tableName as string,
                       RecordIds: recordIds as number[],
                       AssociateId: associateId as number,
                       };   
            _options = webapi_options;
        }
        return this._RemoveFavourites( _request, _options );
    }


    private async _RemoveTicketsFromFavouritesByProvider(request: carriers.Favourite_RemoveTicketsFromFavouritesByProviderRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("RemoveTicketsFromFavouritesByProvider", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Remove a list of tickets from favourites that are given by the ticket provider.
     * @param request - ProviderName, Restrictions, AssociateId
     * @returns This method has no return value
     */
    public async RemoveTicketsFromFavouritesByProvider(request: carriers.Favourite_RemoveTicketsFromFavouritesByProviderRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Remove a list of tickets from favourites that are given by the ticket provider.
     * @param providerName - Name of a ticket provider
     * @param restrictions - Query restrictions to be added to provider. Fixed providers, such as LastTicketsProvider, FavouriteTicketsProvider etc. already have mandatory restrictions setup - in such case extra restrictions will be combined, however for general use case for fixed providers you can pass an empty array and provider will return default results. For selection providers generally you should pass selectionId as a restriction.
     * @param associateId - Id of a current user
     * @returns This method has no return value
     */
    public async RemoveTicketsFromFavouritesByProvider(providerName: string, restrictions: carriers.ArchiveRestrictionInfo[], associateId: number, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async RemoveTicketsFromFavouritesByProvider(providerName:string|carriers.Favourite_RemoveTicketsFromFavouritesByProviderRequest, restrictions?:carriers.ArchiveRestrictionInfo[]|base.WebApiRequestOptions, associateId?:number, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.Favourite_RemoveTicketsFromFavouritesByProviderRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = providerName;
        if( typeof( first ) === "object" && first && ( typeof(first.ProviderName)!='undefined' || typeof(first.Restrictions)!='undefined' || typeof(first.AssociateId)!='undefined' ) )
        {
            _request = providerName as carriers.Favourite_RemoveTicketsFromFavouritesByProviderRequest;
            _options = restrictions as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ProviderName: providerName as string,
                       Restrictions: restrictions as carriers.ArchiveRestrictionInfo[],
                       AssociateId: associateId as number,
                       };   
            _options = webapi_options;
        }
        return this._RemoveTicketsFromFavouritesByProvider( _request, _options );
    }


    private async _GetFavourites(request: carriers.Favourite_GetFavouritesRequest, options?:base.WebApiRequestOptions) : Promise< carriers.Favourite[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.Favourite[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetFavourites", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.Favourite[] = converters.Create_FavouriteArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Get all favourites for a table and associate
     * @param request - TableName, AssociateId
     * @returns Requested favourites for a table and associate
     */
    public async GetFavourites(request: carriers.Favourite_GetFavouritesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.Favourite[] >;

    /**
     * Get all favourites for a table and associate
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.
     * @param associateId - Id of a current user
     * @returns Requested favourites for a table and associate
     */
    public async GetFavourites(tableName: string, associateId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.Favourite[] >;

    public async GetFavourites(tableName:string|carriers.Favourite_GetFavouritesRequest, associateId?:number|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.Favourite[] > {
        let _request : carriers.Favourite_GetFavouritesRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = tableName;
        if( typeof( first ) === "object" && first && ( typeof(first.TableName)!='undefined' || typeof(first.AssociateId)!='undefined' ) )
        {
            _request = tableName as carriers.Favourite_GetFavouritesRequest;
            _options = associateId as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       TableName: tableName as string,
                       AssociateId: associateId as number,
                       };   
            _options = webapi_options;
        }
        return this._GetFavourites( _request, _options );
    }


    private async _RemoveFavourite(request: carriers.Favourite_RemoveFavouriteRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("RemoveFavourite", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Remove favourite for a table, record id and associate
     * @param request - TableName, RecordId, AssociateId
     * @returns This method has no return value
     */
    public async RemoveFavourite(request: carriers.Favourite_RemoveFavouriteRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Remove favourite for a table, record id and associate
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.
     * @param recordId - Id of a record in your specified table (tableName)
     * @param associateId - Id of a current user
     * @returns This method has no return value
     */
    public async RemoveFavourite(tableName: string, recordId: number, associateId: number, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async RemoveFavourite(tableName:string|carriers.Favourite_RemoveFavouriteRequest, recordId?:number|base.WebApiRequestOptions, associateId?:number, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.Favourite_RemoveFavouriteRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = tableName;
        if( typeof( first ) === "object" && first && ( typeof(first.TableName)!='undefined' || typeof(first.RecordId)!='undefined' || typeof(first.AssociateId)!='undefined' ) )
        {
            _request = tableName as carriers.Favourite_RemoveFavouriteRequest;
            _options = recordId as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       TableName: tableName as string,
                       RecordId: recordId as number,
                       AssociateId: associateId as number,
                       };   
            _options = webapi_options;
        }
        return this._RemoveFavourite( _request, _options );
    }


    private async _RemoveAllFavourites(request: carriers.Favourite_RemoveAllFavouritesRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("RemoveAllFavourites", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Remove all favourites for a table and associate
     * @param request - TableName, AssociateId
     * @returns This method has no return value
     */
    public async RemoveAllFavourites(request: carriers.Favourite_RemoveAllFavouritesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Remove all favourites for a table and associate
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.
     * @param associateId - Id of a current user
     * @returns This method has no return value
     */
    public async RemoveAllFavourites(tableName: string, associateId: number, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async RemoveAllFavourites(tableName:string|carriers.Favourite_RemoveAllFavouritesRequest, associateId?:number|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.Favourite_RemoveAllFavouritesRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = tableName;
        if( typeof( first ) === "object" && first && ( typeof(first.TableName)!='undefined' || typeof(first.AssociateId)!='undefined' ) )
        {
            _request = tableName as carriers.Favourite_RemoveAllFavouritesRequest;
            _options = associateId as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       TableName: tableName as string,
                       AssociateId: associateId as number,
                       };   
            _options = webapi_options;
        }
        return this._RemoveAllFavourites( _request, _options );
    }


    private async _ToggleFavourite(request: carriers.Favourite_ToggleFavouriteRequest, options?:base.WebApiRequestOptions) : Promise< boolean > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< boolean >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ToggleFavourite", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : boolean = response.data as boolean;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Toggle a record in a table as a favourite for an associate
     * @param request - TableName, RecordId, AssociateId, ExtraInfo
     * @returns Return the new value, true if added, false if removed
     */
    public async ToggleFavourite(request: carriers.Favourite_ToggleFavouriteRequest, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;

    /**
     * Toggle a record in a table as a favourite for an associate
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.
     * @param recordId - Id of a record in your specified table (tableName)
     * @param associateId - Id of a current user
     * @param extraInfo - Any extra information
     * @returns Return the new value, true if added, false if removed
     */
    public async ToggleFavourite(tableName: string, recordId: number, associateId: number, extraInfo: string, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;

    public async ToggleFavourite(tableName:string|carriers.Favourite_ToggleFavouriteRequest, recordId?:number|base.WebApiRequestOptions, associateId?:number, extraInfo?:string, webapi_options?:base.WebApiRequestOptions) : Promise< boolean > {
        let _request : carriers.Favourite_ToggleFavouriteRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = tableName;
        if( typeof( first ) === "object" && first && ( typeof(first.TableName)!='undefined' || typeof(first.RecordId)!='undefined' || typeof(first.AssociateId)!='undefined' || typeof(first.ExtraInfo)!='undefined' ) )
        {
            _request = tableName as carriers.Favourite_ToggleFavouriteRequest;
            _options = recordId as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       TableName: tableName as string,
                       RecordId: recordId as number,
                       AssociateId: associateId as number,
                       ExtraInfo: extraInfo as string,
                       };   
            _options = webapi_options;
        }
        return this._ToggleFavourite( _request, _options );
    }


    private async _RemoveFavouritesById(request: carriers.Favourite_RemoveFavouritesByIdRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("RemoveFavouritesById", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Remove favourite using favourite id 
     * @param request - FavouriteIds
     * @returns This method has no return value
     */
    public async RemoveFavouritesById(request: carriers.Favourite_RemoveFavouritesByIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Remove favourite using favourite id 
     * @param favouriteIds - Ids of favourite rows to delete
     * @returns This method has no return value
     */
    public async RemoveFavouritesById(favouriteIds: number[], webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async RemoveFavouritesById(favouriteIds:number[]|carriers.Favourite_RemoveFavouritesByIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.Favourite_RemoveFavouritesByIdRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = favouriteIds;
        if( typeof( first ) === "object" && first && ( typeof(first.FavouriteIds)!='undefined' ) )
        {
            _request = favouriteIds as carriers.Favourite_RemoveFavouritesByIdRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       FavouriteIds: favouriteIds as number[],
                       };   
            _options = webapi_options;
        }
        return this._RemoveFavouritesById( _request, _options );
    }

    } // class v1FavouriteAgentController 


