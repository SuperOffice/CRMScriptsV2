// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>


/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
//
// File:          WebApi/ReplicationAgent.ts
//
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------

import { AxiosRequestConfig } from 'axios';
import * as moment from 'moment';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
import * as converters from './Converters';
import { FromBase64ToString, ToBase64 } from './Base64';

/**
 * Replication/Travel administration
 * 
 * **Online Restricted:** This agent is not available in Online by default. Not available in Online. Only used on-site.
 */
export interface IReplicationAgent {
    CreateDefaultSatellite(): Promise< carriers.Satellite >;
    SaveSatellite(entity: carriers.Satellite) : Promise< carriers.Satellite >;
    GetArea(areaId: number) :  Promise< carriers.Area >;
    SetFreetextSearchEnabledOnArea(request: carriers.Replication_SetFreetextSearchEnabledOnAreaRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    SetFreetextSearchEnabledOnArea(areaId: number, freetextEnabled: boolean, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    GetAreaList(areaIds: number[]) :  Promise< carriers.Area[] >;
    GetSatellite(satelliteId: number) :  Promise< carriers.Satellite >;
    GetCentralLicense(webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseOwner[] >;
    SaveCentralLicense(request: carriers.Replication_SaveCentralLicenseRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseOwner[] >;
    SaveCentralLicense(license: carriers.LicenseOwner[], webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseOwner[] >;
} // interface IReplicationAgent




/**
 * Replication/Travel administration
 */
export class ReplicationAgent extends base.WebApiBase implements IReplicationAgent {
    constructor(baseUrl?: string, languageCode?:string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config:AxiosRequestConfig, languageCode?:string, cultureCode?: string);
    constructor(options: base.WebApiOptions);

    constructor(baseUrlOrOptions: string|base.WebApiOptions|undefined,
                langOrconfigOrRM?: string|base.ResourceParsing|AxiosRequestConfig|any, 
                langOrResourceOrRM?:string|base.ResourceParsing|any, 
                cultureCode?: string, 
                ) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Replication/";
        super(options);
    }



    /**
     * Set default values into a new Satellite.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    public async CreateDefaultSatellite(options?:base.WebApiRequestOptions) : Promise< carriers.Satellite > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.Satellite >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultSatellite", null, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.Satellite = converters.Create_Satellite_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing Satellite or creates a new Satellite if the id parameter is empty
     * @param entity - The Satellite to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated Satellite
     */
    public async SaveSatellite(entity: carriers.Satellite, options?:base.WebApiRequestOptions) : Promise< carriers.Satellite > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.Satellite >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveSatellite", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.Satellite = converters.Create_Satellite_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Gets a Area object.
     * @param areaId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single Area
     */
    public async GetArea(areaId: number, options?:base.WebApiRequestOptions) : Promise< carriers.Area > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.Area >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetArea?areaId=" + areaId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_Area_From( response.data );               
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    private async _SetFreetextSearchEnabledOnArea(request: carriers.Replication_SetFreetextSearchEnabledOnAreaRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetFreetextSearchEnabledOnArea", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Enable freetext search on this area
     * @param request - AreaId, FreetextEnabled
     * @returns No return value
     */
    public async SetFreetextSearchEnabledOnArea(request: carriers.Replication_SetFreetextSearchEnabledOnAreaRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Enable freetext search on this area
     * @param areaId - The id of the area
     * @param freetextEnabled - True if freetextSearch on this area shall be enabled
     * @returns No return value
     */
    public async SetFreetextSearchEnabledOnArea(areaId: number, freetextEnabled: boolean, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async SetFreetextSearchEnabledOnArea(areaId:number|carriers.Replication_SetFreetextSearchEnabledOnAreaRequest, freetextEnabled?:boolean|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.Replication_SetFreetextSearchEnabledOnAreaRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = areaId;
        if( typeof( first ) === "object" && first && ( typeof(first.AreaId)!='undefined' || typeof(first.FreetextEnabled)!='undefined' ) )
        {
            _request = areaId as carriers.Replication_SetFreetextSearchEnabledOnAreaRequest;
            _options = freetextEnabled as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       AreaId: areaId as number,
                       FreetextEnabled: freetextEnabled as boolean,
                       };   
            _options = webapi_options;
        }
        return this._SetFreetextSearchEnabledOnArea( _request, _options );
    }

    /*
     * Gets an array of Area objects.
     * @param areaIds - The primary keys.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns An array of Area
     */
    public async GetAreaList(areaIds: number[], options?:base.WebApiRequestOptions) : Promise< carriers.Area[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.Area[] >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetAreaList", areaIds, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_AreaArray_From( response.data );               
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /*
     * Gets a Satellite object.
     * @param satelliteId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single Satellite
     */
    public async GetSatellite(satelliteId: number, options?:base.WebApiRequestOptions) : Promise< carriers.Satellite > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.Satellite >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetSatellite?satelliteId=" + satelliteId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_Satellite_From( response.data );               
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    private async _GetCentralLicense( options?:base.WebApiRequestOptions) : Promise< carriers.LicenseOwner[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.LicenseOwner[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetCentralLicense", undefined , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.LicenseOwner[] = converters.Create_LicenseOwnerArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    /**
     * 
     * @returns 
     */
    public async GetCentralLicense(webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseOwner[] >
    {
        return this._GetCentralLicense(webapi_options);
    }


    private async _SaveCentralLicense(request: carriers.Replication_SaveCentralLicenseRequest, options?:base.WebApiRequestOptions) : Promise< carriers.LicenseOwner[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.LicenseOwner[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SaveCentralLicense", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.LicenseOwner[] = converters.Create_LicenseOwnerArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * 
     * @param request - License
     * @returns 
     */
    public async SaveCentralLicense(request: carriers.Replication_SaveCentralLicenseRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseOwner[] >;

    /**
     * 
     * @param license - 
     * @returns 
     */
    public async SaveCentralLicense(license: carriers.LicenseOwner[], webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseOwner[] >;

    public async SaveCentralLicense(license:carriers.LicenseOwner[]|carriers.Replication_SaveCentralLicenseRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseOwner[] > {
        let _request : carriers.Replication_SaveCentralLicenseRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = license;
        if( typeof( first ) === "object" && first && ( typeof(first.License)!='undefined' ) )
        {
            _request = license as carriers.Replication_SaveCentralLicenseRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       License: license as carriers.LicenseOwner[],
                       };   
            _options = webapi_options;
        }
        return this._SaveCentralLicense( _request, _options );
    }

    } // class v1ReplicationAgentController 


