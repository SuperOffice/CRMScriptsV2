// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>


/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
//
// File:          WebApi/MessagingAgent.ts
//
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------

import { AxiosRequestConfig } from 'axios';
import * as moment from 'moment';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
import * as converters from './Converters';
import { FromBase64ToString, ToBase64 } from './Base64';

/**
 * SMS and other external messaging systems
 * 
 * **Online Restricted:** This agent is not available in Online by default. Access must be requested specifically when app is registered.
 */
export interface IMessagingAgent {
    CreateMessage(request: carriers.Messaging_CreateMessageRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    CreateMessage(incomingMessage: carriers.IncomingMessage, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    GetDeliveryStatus(request: carriers.Messaging_GetDeliveryStatusRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MessageDeliveryStatus[] >;
    GetDeliveryStatus(messagingIds: number[], webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MessageDeliveryStatus[] >;
    SetDeliveryStatus(request: carriers.Messaging_SetDeliveryStatusRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    SetDeliveryStatus(plugin: string, externalMessageId: string, status: number, statusDescription: string, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    SendMessages(request: carriers.Messaging_SendMessagesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MessageDeliveryStatus[] >;
    SendMessages(plugin: string, outgoingMessages: carriers.OutgoingMessage[], webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MessageDeliveryStatus[] >;
    SendMessagesWithConfig(request: carriers.Messaging_SendMessagesWithConfigRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MessageDeliveryStatus[] >;
    SendMessagesWithConfig(plugin: string, outgoingMessages: carriers.OutgoingMessage[], config: carriers.StringDictionary, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MessageDeliveryStatus[] >;
    GetPlugins(webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ProviderInfo[] >;
} // interface IMessagingAgent




/**
 * SMS and other external messaging systems
 */
export class MessagingAgent extends base.WebApiBase implements IMessagingAgent {
    constructor(baseUrl?: string, languageCode?:string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config:AxiosRequestConfig, languageCode?:string, cultureCode?: string);
    constructor(options: base.WebApiOptions);

    constructor(baseUrlOrOptions: string|base.WebApiOptions|undefined,
                langOrconfigOrRM?: string|base.ResourceParsing|AxiosRequestConfig|any, 
                langOrResourceOrRM?:string|base.ResourceParsing|any, 
                cultureCode?: string, 
                ) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Messaging/";
        super(options);
    }



    private async _CreateMessage(request: carriers.Messaging_CreateMessageRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("CreateMessage", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Create a new message and insert it in the message queue. (inbox)
     * @param request - IncomingMessage
     * @returns 
     */
    public async CreateMessage(request: carriers.Messaging_CreateMessageRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Create a new message and insert it in the message queue. (inbox)
     * @param incomingMessage - 
     * @returns 
     */
    public async CreateMessage(incomingMessage: carriers.IncomingMessage, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async CreateMessage(incomingMessage:carriers.IncomingMessage|carriers.Messaging_CreateMessageRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.Messaging_CreateMessageRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = incomingMessage;
        if( typeof( first ) === "object" && first && ( typeof(first.IncomingMessage)!='undefined' ) )
        {
            _request = incomingMessage as carriers.Messaging_CreateMessageRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       IncomingMessage: incomingMessage as carriers.IncomingMessage,
                       };   
            _options = webapi_options;
        }
        return this._CreateMessage( _request, _options );
    }


    private async _GetDeliveryStatus(request: carriers.Messaging_GetDeliveryStatusRequest, options?:base.WebApiRequestOptions) : Promise< carriers.MessageDeliveryStatus[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.MessageDeliveryStatus[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetDeliveryStatus", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.MessageDeliveryStatus[] = converters.Create_MessageDeliveryStatusArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Get delivery status
     * @param request - MessagingIds
     * @returns 
     */
    public async GetDeliveryStatus(request: carriers.Messaging_GetDeliveryStatusRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MessageDeliveryStatus[] >;

    /**
     * Get delivery status
     * @param messagingIds - Array of messaging ids.
     * @returns 
     */
    public async GetDeliveryStatus(messagingIds: number[], webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MessageDeliveryStatus[] >;

    public async GetDeliveryStatus(messagingIds:number[]|carriers.Messaging_GetDeliveryStatusRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MessageDeliveryStatus[] > {
        let _request : carriers.Messaging_GetDeliveryStatusRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = messagingIds;
        if( typeof( first ) === "object" && first && ( typeof(first.MessagingIds)!='undefined' ) )
        {
            _request = messagingIds as carriers.Messaging_GetDeliveryStatusRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       MessagingIds: messagingIds as number[],
                       };   
            _options = webapi_options;
        }
        return this._GetDeliveryStatus( _request, _options );
    }


    private async _SetDeliveryStatus(request: carriers.Messaging_SetDeliveryStatusRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetDeliveryStatus", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Set or change the delivery status on an outgoing messsage.
     * @param request - Plugin, ExternalMessageId, Status, StatusDescription
     * @returns 
     */
    public async SetDeliveryStatus(request: carriers.Messaging_SetDeliveryStatusRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Set or change the delivery status on an outgoing messsage.
     * @param plugin - Name of plugin
     * @param externalMessageId - External message id known to plugin.
     * @param status - Delivery status
     * @param statusDescription - String describing delivery status.
     * @returns 
     */
    public async SetDeliveryStatus(plugin: string, externalMessageId: string, status: number, statusDescription: string, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async SetDeliveryStatus(plugin:string|carriers.Messaging_SetDeliveryStatusRequest, externalMessageId?:string|base.WebApiRequestOptions, status?:number, statusDescription?:string, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.Messaging_SetDeliveryStatusRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = plugin;
        if( typeof( first ) === "object" && first && ( typeof(first.Plugin)!='undefined' || typeof(first.ExternalMessageId)!='undefined' || typeof(first.Status)!='undefined' || typeof(first.StatusDescription)!='undefined' ) )
        {
            _request = plugin as carriers.Messaging_SetDeliveryStatusRequest;
            _options = externalMessageId as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       Plugin: plugin as string,
                       ExternalMessageId: externalMessageId as string,
                       Status: status as number,
                       StatusDescription: statusDescription as string,
                       };   
            _options = webapi_options;
        }
        return this._SetDeliveryStatus( _request, _options );
    }


    private async _SendMessages(request: carriers.Messaging_SendMessagesRequest, options?:base.WebApiRequestOptions) : Promise< carriers.MessageDeliveryStatus[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.MessageDeliveryStatus[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SendMessages", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.MessageDeliveryStatus[] = converters.Create_MessageDeliveryStatusArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Send an array of messages
     * @param request - Plugin, OutgoingMessages
     * @returns Array of MessageDeliveryStatus. Length of the array is equal to the number of outgoing messages.
     */
    public async SendMessages(request: carriers.Messaging_SendMessagesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MessageDeliveryStatus[] >;

    /**
     * Send an array of messages
     * @param plugin - Name of plugin to use.
     * @param outgoingMessages - Array of outgoing messages you want to send.
     * @returns Array of MessageDeliveryStatus. Length of the array is equal to the number of outgoing messages.
     */
    public async SendMessages(plugin: string, outgoingMessages: carriers.OutgoingMessage[], webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MessageDeliveryStatus[] >;

    public async SendMessages(plugin:string|carriers.Messaging_SendMessagesRequest, outgoingMessages?:carriers.OutgoingMessage[]|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MessageDeliveryStatus[] > {
        let _request : carriers.Messaging_SendMessagesRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = plugin;
        if( typeof( first ) === "object" && first && ( typeof(first.Plugin)!='undefined' || typeof(first.OutgoingMessages)!='undefined' ) )
        {
            _request = plugin as carriers.Messaging_SendMessagesRequest;
            _options = outgoingMessages as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       Plugin: plugin as string,
                       OutgoingMessages: outgoingMessages as carriers.OutgoingMessage[],
                       };   
            _options = webapi_options;
        }
        return this._SendMessages( _request, _options );
    }


    private async _SendMessagesWithConfig(request: carriers.Messaging_SendMessagesWithConfigRequest, options?:base.WebApiRequestOptions) : Promise< carriers.MessageDeliveryStatus[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.MessageDeliveryStatus[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SendMessagesWithConfig", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.MessageDeliveryStatus[] = converters.Create_MessageDeliveryStatusArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Send an array of messages using given config
     * @param request - Plugin, OutgoingMessages, Config
     * @returns Array of MessageDeliveryStatus. Length of the array is equal to the number of outgoing messages.
     */
    public async SendMessagesWithConfig(request: carriers.Messaging_SendMessagesWithConfigRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MessageDeliveryStatus[] >;

    /**
     * Send an array of messages using given config
     * @param plugin - Name of plugin to use.
     * @param outgoingMessages - Array of outgoing messages you want to send.
     * @param config - Config values used by the plugin.
     * @returns Array of MessageDeliveryStatus. Length of the array is equal to the number of outgoing messages.
     */
    public async SendMessagesWithConfig(plugin: string, outgoingMessages: carriers.OutgoingMessage[], config: carriers.StringDictionary, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MessageDeliveryStatus[] >;

    public async SendMessagesWithConfig(plugin:string|carriers.Messaging_SendMessagesWithConfigRequest, outgoingMessages?:carriers.OutgoingMessage[]|base.WebApiRequestOptions, config?:carriers.StringDictionary, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MessageDeliveryStatus[] > {
        let _request : carriers.Messaging_SendMessagesWithConfigRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = plugin;
        if( typeof( first ) === "object" && first && ( typeof(first.Plugin)!='undefined' || typeof(first.OutgoingMessages)!='undefined' || typeof(first.Config)!='undefined' ) )
        {
            _request = plugin as carriers.Messaging_SendMessagesWithConfigRequest;
            _options = outgoingMessages as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       Plugin: plugin as string,
                       OutgoingMessages: outgoingMessages as carriers.OutgoingMessage[],
                       Config: config as carriers.StringDictionary,
                       };   
            _options = webapi_options;
        }
        return this._SendMessagesWithConfig( _request, _options );
    }


    private async _GetPlugins( options?:base.WebApiRequestOptions) : Promise< carriers.ProviderInfo[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ProviderInfo[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetPlugins", undefined , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ProviderInfo[] = converters.Create_ProviderInfoArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    /**
     * 
     * @returns 
     */
    public async GetPlugins(webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ProviderInfo[] >
    {
        return this._GetPlugins(webapi_options);
    }

    } // class v1MessagingAgentController 


