
/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
//
// File:          TriggerScriptRestApi.ts
//
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------

import { AxiosRequestConfig, AxiosError } from 'axios';
import * as moment from 'moment';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
import * as converters from './Converters';
import { FromBase64ToString, ToBase64 } from './Base64';

/**
 * CRM Trigger Script - The script runs when a given event fires.
 * Manage and execute CRMScript functions.
 *
 * `api/v1/TriggerScript`
 * 
 * **Online Restricted:** This agent is not available in Online by default. Access must be requested specifically when app is registered.
 */
export interface ITriggerScriptRestApi {

    GetDefault(options?:base.WebApiGetRequestOptions): Promise< carriers.TriggerScriptEntity >;
    Post(entity: carriers.TriggerScriptEntity, options?:base.WebApiPutRequestOptions) : Promise< carriers.TriggerScriptEntity >;
    PutById(id:number, entity: carriers.TriggerScriptEntity, options?:base.WebApiPutRequestOptions) : Promise< carriers.TriggerScriptEntity >;
    PatchById(id:number, entity: base.WebApiPatchOperation[] | carriers.TriggerScriptEntity, options?:base.WebApiPutRequestOptions) : Promise< carriers.TriggerScriptEntity >;
    DeleteById(TriggerScriptEntityId: number, options?:base.WebApiPutRequestOptions) : Promise<void>;
    GetById(TriggerScriptEntityId: number, options?:base.WebApiGetRequestOptions) :  Promise< carriers.TriggerScriptEntity >;
} // interface ITriggerScriptRestApi




/**
 * CRM Trigger Script - The script runs when a given event fires.
 * Manage and execute CRMScript functions.
 *
 * `api/v1/TriggerScript`
 */
export class TriggerScriptRestApi extends base.WebApiBase implements ITriggerScriptRestApi {
    constructor(baseUrl?: string, languageCode?:string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config:AxiosRequestConfig, languageCode?:string, cultureCode?: string);
    constructor(options: base.WebApiOptions);

    constructor(baseUrlOrOptions: string|base.WebApiOptions|undefined,
                langOrconfigOrRM?: string|base.ResourceParsing|AxiosRequestConfig|any, 
                langOrResourceOrRM?:string|base.ResourceParsing|any, 
                cultureCode?: string, 
                ) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/TriggerScript/";
        super(options);
    }


    /**
     * `GET /api/v1/TriggerScript/default`
     * Set default values into a new TriggerScriptEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    public async GetDefault(options?:base.WebApiGetRequestOptions): Promise< carriers.TriggerScriptEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TriggerScriptEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.get("default", config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.TriggerScriptEntity = converters.Create_TriggerScriptEntity_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    /*
     * `POST /api/v1/TriggerScript/`
     * Creates a new TriggerScriptEntity 
     * @param newTriggerScript - The TriggerScriptEntity to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New TriggerScriptEntity
     */
    public async Post(newTriggerScript: carriers.TriggerScriptEntity, options?:base.WebApiPutRequestOptions) : Promise< carriers.TriggerScriptEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TriggerScriptEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("", newTriggerScript, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.TriggerScriptEntity = converters.Create_TriggerScriptEntity_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    /*
     * `PUT /api/v1/TriggerScript/123`
     * Updates the existing TriggerScriptEntity
     * @param triggerScript - The TriggerScriptEntity to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns The updated TriggerScriptEntity
     */
    public async PutById(id:number, triggerScript: carriers.TriggerScriptEntity, options?:base.WebApiPutRequestOptions) : Promise< carriers.TriggerScriptEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TriggerScriptEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.put(id.toString(), triggerScript, config);
                base.WebApiBase.SetCompleted(options);
                let res : carriers.TriggerScriptEntity = null;
                if( response.status != 304 )
                    res = converters.Create_TriggerScriptEntity_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /*
     * `PATCH /api/v1/TriggerScript/123`
     * Updates an existing TriggerScriptEntity
     * @param triggerScript - The partial TriggerScriptEntity containing updated values, or an array of RFC6902 PATCH operations.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns The updated TriggerScriptEntity
     */
    public async PatchById(id:number, triggerScript: base.WebApiPatchOperation[] | carriers.TriggerScriptEntity, options?:base.WebApiPutRequestOptions) : Promise< carriers.TriggerScriptEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TriggerScriptEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.patch(id.toString(), triggerScript, config);
                base.WebApiBase.SetCompleted(options);
                let res : carriers.TriggerScriptEntity = null;
                if( response.status != 304 )
                    res = converters.Create_TriggerScriptEntity_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * `DELETE /api/v1/TriggerScript/123`
     * Deletes the TriggerScriptEntity
     * @param triggerScriptId - The id of the TriggerScriptEntity to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    public async DeleteById(triggerScriptId: number, options?:base.WebApiPutRequestOptions) : Promise<void> {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                const response = await this._axios.delete( triggerScriptId.toString(), config );
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * `GET /api/v1/TriggerScript/123`
     * Get an existing TriggerScriptEntity
     * @param triggerScriptId - The TriggerScriptEntity to be get.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns The TriggerScriptEntity
     */
    public async GetById( triggerScriptId: number, options?:base.WebApiGetRequestOptions) :  Promise< carriers.TriggerScriptEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TriggerScriptEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.get( triggerScriptId.toString(), config);
                base.WebApiBase.SetCompleted(options);
                let res : carriers.TriggerScriptEntity = null;
                if( response.status != 304 )
                    res = converters.Create_TriggerScriptEntity_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


} // class TriggerScriptRestApi 

