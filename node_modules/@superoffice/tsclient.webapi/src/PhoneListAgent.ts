// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>


/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
//
// File:          WebApi/PhoneListAgent.ts
//
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------

import { AxiosRequestConfig } from 'axios';
import * as moment from 'moment';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
import * as converters from './Converters';
import { FromBase64ToString, ToBase64 } from './Base64';

/**
 * Collection of all services for searching for person or contact (company) phone numbers.
 */
export interface IPhoneListAgent {
    Search(request: carriers.PhoneList_SearchRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PhoneListItem[] >;
    Search(searchString: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PhoneListItem[] >;
    SearchWithPreferences(request: carriers.PhoneList_SearchWithPreferencesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PhoneListItem[] >;
    SearchWithPreferences(searchString: string, preferences: carriers.PhoneListPreferences, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PhoneListItem[] >;
    GetDepartmentPhones(request: carriers.PhoneList_GetDepartmentPhonesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PhoneListItem[] >;
    GetDepartmentPhones(departmentId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PhoneListItem[] >;
    GetFavoritesPhones(webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PhoneListItem[] >;
    GetContactPhones(request: carriers.PhoneList_GetContactPhonesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PhoneListItem[] >;
    GetContactPhones(contactId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PhoneListItem[] >;
    AddToFavorites(request: carriers.PhoneList_AddToFavoritesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< number >;
    AddToFavorites(contactId: number, webapi_options?:base.WebApiRequestOptions) : Promise< number >;
    GetPreferences(webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PhoneListPreferences >;
    SetPreferences(request: carriers.PhoneList_SetPreferencesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    SetPreferences(preferences: carriers.PhoneListPreferences, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
} // interface IPhoneListAgent




/**
 * Collection of all services for searching for person or contact (company) phone numbers.
 */
export class PhoneListAgent extends base.WebApiBase implements IPhoneListAgent {
    constructor(baseUrl?: string, languageCode?:string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config:AxiosRequestConfig, languageCode?:string, cultureCode?: string);
    constructor(options: base.WebApiOptions);

    constructor(baseUrlOrOptions: string|base.WebApiOptions|undefined,
                langOrconfigOrRM?: string|base.ResourceParsing|AxiosRequestConfig|any, 
                langOrResourceOrRM?:string|base.ResourceParsing|any, 
                cultureCode?: string, 
                ) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/PhoneList/";
        super(options);
    }



    private async _Search(request: carriers.PhoneList_SearchRequest, options?:base.WebApiRequestOptions) : Promise< carriers.PhoneListItem[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.PhoneListItem[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("Search", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.PhoneListItem[] = converters.Create_PhoneListItemArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Searching the phone list. Using default search preferences or the preferences already set by the PhoneListPreferences Service
     * @param request - SearchString
     * @returns The resulting phone list
     */
    public async Search(request: carriers.PhoneList_SearchRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PhoneListItem[] >;

    /**
     * Searching the phone list. Using default search preferences or the preferences already set by the PhoneListPreferences Service
     * @param searchString - The search string
     * @returns The resulting phone list
     */
    public async Search(searchString: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PhoneListItem[] >;

    public async Search(searchString:string|carriers.PhoneList_SearchRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PhoneListItem[] > {
        let _request : carriers.PhoneList_SearchRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = searchString;
        if( typeof( first ) === "object" && first && ( typeof(first.SearchString)!='undefined' ) )
        {
            _request = searchString as carriers.PhoneList_SearchRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       SearchString: searchString as string,
                       };   
            _options = webapi_options;
        }
        return this._Search( _request, _options );
    }


    private async _SearchWithPreferences(request: carriers.PhoneList_SearchWithPreferencesRequest, options?:base.WebApiRequestOptions) : Promise< carriers.PhoneListItem[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.PhoneListItem[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SearchWithPreferences", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.PhoneListItem[] = converters.Create_PhoneListItemArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Searching the phone list. Search is based on the supplied preferences.
     * @param request - SearchString, Preferences
     * @returns The resulting phone list.
     */
    public async SearchWithPreferences(request: carriers.PhoneList_SearchWithPreferencesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PhoneListItem[] >;

    /**
     * Searching the phone list. Search is based on the supplied preferences.
     * @param searchString - The search string.
     * @param preferences - The search preferences
     * @returns The resulting phone list.
     */
    public async SearchWithPreferences(searchString: string, preferences: carriers.PhoneListPreferences, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PhoneListItem[] >;

    public async SearchWithPreferences(searchString:string|carriers.PhoneList_SearchWithPreferencesRequest, preferences?:carriers.PhoneListPreferences|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PhoneListItem[] > {
        let _request : carriers.PhoneList_SearchWithPreferencesRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = searchString;
        if( typeof( first ) === "object" && first && ( typeof(first.SearchString)!='undefined' || typeof(first.Preferences)!='undefined' ) )
        {
            _request = searchString as carriers.PhoneList_SearchWithPreferencesRequest;
            _options = preferences as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       SearchString: searchString as string,
                       Preferences: preferences as carriers.PhoneListPreferences,
                       };   
            _options = webapi_options;
        }
        return this._SearchWithPreferences( _request, _options );
    }


    private async _GetDepartmentPhones(request: carriers.PhoneList_GetDepartmentPhonesRequest, options?:base.WebApiRequestOptions) : Promise< carriers.PhoneListItem[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.PhoneListItem[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetDepartmentPhones", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.PhoneListItem[] = converters.Create_PhoneListItemArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Returns an array of phone list items with the in-parameter as restriction. The in-parameter must be a valid department id (UserGroupId).
     * @param request - DepartmentId
     * @returns The department phone list
     */
    public async GetDepartmentPhones(request: carriers.PhoneList_GetDepartmentPhonesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PhoneListItem[] >;

    /**
     * Returns an array of phone list items with the in-parameter as restriction. The in-parameter must be a valid department id (UserGroupId).
     * @param departmentId - The department to get the phone list for
     * @returns The department phone list
     */
    public async GetDepartmentPhones(departmentId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PhoneListItem[] >;

    public async GetDepartmentPhones(departmentId:number|carriers.PhoneList_GetDepartmentPhonesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PhoneListItem[] > {
        let _request : carriers.PhoneList_GetDepartmentPhonesRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = departmentId;
        if( typeof( first ) === "object" && first && ( typeof(first.DepartmentId)!='undefined' ) )
        {
            _request = departmentId as carriers.PhoneList_GetDepartmentPhonesRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       DepartmentId: departmentId as number,
                       };   
            _options = webapi_options;
        }
        return this._GetDepartmentPhones( _request, _options );
    }


    private async _GetFavoritesPhones( options?:base.WebApiRequestOptions) : Promise< carriers.PhoneListItem[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.PhoneListItem[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetFavoritesPhones", undefined , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.PhoneListItem[] = converters.Create_PhoneListItemArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    /**
     * Returns an array of phone list items with the Contacts in the users favorites dropdown list.
     * @returns The favorite contact phone list
     */
    public async GetFavoritesPhones(webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PhoneListItem[] >
    {
        return this._GetFavoritesPhones(webapi_options);
    }


    private async _GetContactPhones(request: carriers.PhoneList_GetContactPhonesRequest, options?:base.WebApiRequestOptions) : Promise< carriers.PhoneListItem[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.PhoneListItem[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetContactPhones", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.PhoneListItem[] = converters.Create_PhoneListItemArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Returns an array of phone list items for all the persons belonging to a contact (company). The in-parameter must be a valid contact-id.
     * @param request - ContactId
     * @returns The contacts phone list.
     */
    public async GetContactPhones(request: carriers.PhoneList_GetContactPhonesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PhoneListItem[] >;

    /**
     * Returns an array of phone list items for all the persons belonging to a contact (company). The in-parameter must be a valid contact-id.
     * @param contactId - The contact id
     * @returns The contacts phone list.
     */
    public async GetContactPhones(contactId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PhoneListItem[] >;

    public async GetContactPhones(contactId:number|carriers.PhoneList_GetContactPhonesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PhoneListItem[] > {
        let _request : carriers.PhoneList_GetContactPhonesRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = contactId;
        if( typeof( first ) === "object" && first && ( typeof(first.ContactId)!='undefined' ) )
        {
            _request = contactId as carriers.PhoneList_GetContactPhonesRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ContactId: contactId as number,
                       };   
            _options = webapi_options;
        }
        return this._GetContactPhones( _request, _options );
    }


    private async _AddToFavorites(request: carriers.PhoneList_AddToFavoritesRequest, options?:base.WebApiRequestOptions) : Promise< number > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< number >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("AddToFavorites", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : number = response.data as number;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Adds a new contact to the history/favorites. Returns the rank of the new history item. If the contact already existed in the history, it isn&apos;t added but the rank is updated.
     * @param request - ContactId
     * @returns The rank of the history item
     */
    public async AddToFavorites(request: carriers.PhoneList_AddToFavoritesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< number >;

    /**
     * Adds a new contact to the history/favorites. Returns the rank of the new history item. If the contact already existed in the history, it isn&apos;t added but the rank is updated.
     * @param contactId - The contact id
     * @returns The rank of the history item
     */
    public async AddToFavorites(contactId: number, webapi_options?:base.WebApiRequestOptions) : Promise< number >;

    public async AddToFavorites(contactId:number|carriers.PhoneList_AddToFavoritesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< number > {
        let _request : carriers.PhoneList_AddToFavoritesRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = contactId;
        if( typeof( first ) === "object" && first && ( typeof(first.ContactId)!='undefined' ) )
        {
            _request = contactId as carriers.PhoneList_AddToFavoritesRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ContactId: contactId as number,
                       };   
            _options = webapi_options;
        }
        return this._AddToFavorites( _request, _options );
    }


    private async _GetPreferences( options?:base.WebApiRequestOptions) : Promise< carriers.PhoneListPreferences > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.PhoneListPreferences >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetPreferences", undefined , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.PhoneListPreferences = converters.Create_PhoneListPreferences_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    /**
     * Getting Phone List Preferences from the CRM 5 user preferences
     * @returns The Phone List Preferences
     */
    public async GetPreferences(webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PhoneListPreferences >
    {
        return this._GetPreferences(webapi_options);
    }


    private async _SetPreferences(request: carriers.PhoneList_SetPreferencesRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetPreferences", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Setting Phone List Preferences to the CRM 5 user preferences
     * @param request - Preferences
     * @returns 
     */
    public async SetPreferences(request: carriers.PhoneList_SetPreferencesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Setting Phone List Preferences to the CRM 5 user preferences
     * @param preferences - The preference that is set as user preferences
     * @returns 
     */
    public async SetPreferences(preferences: carriers.PhoneListPreferences, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async SetPreferences(preferences:carriers.PhoneListPreferences|carriers.PhoneList_SetPreferencesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.PhoneList_SetPreferencesRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = preferences;
        if( typeof( first ) === "object" && first && ( typeof(first.Preferences)!='undefined' ) )
        {
            _request = preferences as carriers.PhoneList_SetPreferencesRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       Preferences: preferences as carriers.PhoneListPreferences,
                       };   
            _options = webapi_options;
        }
        return this._SetPreferences( _request, _options );
    }

    } // class v1PhoneListAgentController 


