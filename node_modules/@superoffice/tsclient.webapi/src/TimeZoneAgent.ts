// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>


/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
//
// File:          WebApi/TimeZoneAgent.ts
//
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------

import { AxiosRequestConfig } from 'axios';
import * as moment from 'moment';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
import * as converters from './Converters';
import { FromBase64ToString, ToBase64 } from './Base64';

/**
 * TimeZone maintenance
 */
export interface ITimeZoneAgent {
    GetDefaultTimeZoneInformation(webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PreferredTimeZone >;
    InitializeTimeZoneData(webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TimeZoneData[] >;
    GetBaseTimeZoneId(webapi_options?:base.WebApiRequestOptions) : Promise< number >;
    UpdateTimeZoneData(webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;
    CheckNewTimeZoneDataAvailable(webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;
    ToggleActiveTimeZoneRow(request: carriers.TimeZone_ToggleActiveTimeZoneRowRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    ToggleActiveTimeZoneRow(id: number, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    SetActiveTimeZonesByFilter(request: carriers.TimeZone_SetActiveTimeZonesByFilterRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    SetActiveTimeZonesByFilter(filter: string, active: boolean, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    TimeOfLastTimeZoneUpdate(webapi_options?:base.WebApiRequestOptions) : Promise< Date >;
    SetBaseTimeZoneId(request: carriers.TimeZone_SetBaseTimeZoneIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;
    SetBaseTimeZoneId(timezoneId: number, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;
    GetDefaultTimeZonePreference(webapi_options?:base.WebApiRequestOptions) : Promise< number >;
    DeleteTimeZones(webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    SetActiveTimeZoneRow(request: carriers.TimeZone_SetActiveTimeZoneRowRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    SetActiveTimeZoneRow(id: number, active: boolean, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
} // interface ITimeZoneAgent




/**
 * TimeZone maintenance
 */
export class TimeZoneAgent extends base.WebApiBase implements ITimeZoneAgent {
    constructor(baseUrl?: string, languageCode?:string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config:AxiosRequestConfig, languageCode?:string, cultureCode?: string);
    constructor(options: base.WebApiOptions);

    constructor(baseUrlOrOptions: string|base.WebApiOptions|undefined,
                langOrconfigOrRM?: string|base.ResourceParsing|AxiosRequestConfig|any, 
                langOrResourceOrRM?:string|base.ResourceParsing|any, 
                cultureCode?: string, 
                ) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/TimeZone/";
        super(options);
    }



    private async _GetDefaultTimeZoneInformation( options?:base.WebApiRequestOptions) : Promise< carriers.PreferredTimeZone > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.PreferredTimeZone >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetDefaultTimeZoneInformation", undefined , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.PreferredTimeZone = converters.Create_PreferredTimeZone_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    /**
     * Get information about the current, preferred timezone for the current user. If no such preference has been set, returns the correct fallback (and UserPreferenceId is 0)
     * @returns Get information about the current, preferred timezone for the current user.
     */
    public async GetDefaultTimeZoneInformation(webapi_options?:base.WebApiRequestOptions) : Promise< carriers.PreferredTimeZone >
    {
        return this._GetDefaultTimeZoneInformation(webapi_options);
    }


    private async _InitializeTimeZoneData( options?:base.WebApiRequestOptions) : Promise< carriers.TimeZoneData[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.TimeZoneData[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("InitializeTimeZoneData", undefined , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.TimeZoneData[] = converters.Create_TimeZoneDataArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    /**
     * Initalizes the TimeZoneData
     * @returns 
     */
    public async InitializeTimeZoneData(webapi_options?:base.WebApiRequestOptions) : Promise< carriers.TimeZoneData[] >
    {
        return this._InitializeTimeZoneData(webapi_options);
    }


    private async _GetBaseTimeZoneId( options?:base.WebApiRequestOptions) : Promise< number > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< number >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetBaseTimeZoneId", undefined , config);
                base.WebApiBase.SetCompleted(options);
                const res : number = response.data as number;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    /**
     * Get the base timezone id.
     * @returns Returns the base timezone id. Returns 0 if not set.
     */
    public async GetBaseTimeZoneId(webapi_options?:base.WebApiRequestOptions) : Promise< number >
    {
        return this._GetBaseTimeZoneId(webapi_options);
    }


    private async _UpdateTimeZoneData( options?:base.WebApiRequestOptions) : Promise< boolean > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< boolean >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("UpdateTimeZoneData", undefined , config);
                base.WebApiBase.SetCompleted(options);
                const res : boolean = response.data as boolean;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    /**
     * Retrieve time zone data from the SuperOffice server and update TimeZone data in the database
     * @returns Returns true if the operation succeeded
     */
    public async UpdateTimeZoneData(webapi_options?:base.WebApiRequestOptions) : Promise< boolean >
    {
        return this._UpdateTimeZoneData(webapi_options);
    }


    private async _CheckNewTimeZoneDataAvailable( options?:base.WebApiRequestOptions) : Promise< boolean > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< boolean >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("CheckNewTimeZoneDataAvailable", undefined , config);
                base.WebApiBase.SetCompleted(options);
                const res : boolean = response.data as boolean;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    /**
     * Check to see if new timezone data is available
     * @returns Returns true if new timezone info is found available, false otherwise
     */
    public async CheckNewTimeZoneDataAvailable(webapi_options?:base.WebApiRequestOptions) : Promise< boolean >
    {
        return this._CheckNewTimeZoneDataAvailable(webapi_options);
    }


    private async _ToggleActiveTimeZoneRow(request: carriers.TimeZone_ToggleActiveTimeZoneRowRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ToggleActiveTimeZoneRow", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Toggles active state of a single row in the TZLocation table
     * @param request - Id
     * @returns 
     */
    public async ToggleActiveTimeZoneRow(request: carriers.TimeZone_ToggleActiveTimeZoneRowRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Toggles active state of a single row in the TZLocation table
     * @param id - Id of row to toggle active state on
     * @returns 
     */
    public async ToggleActiveTimeZoneRow(id: number, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async ToggleActiveTimeZoneRow(id:number|carriers.TimeZone_ToggleActiveTimeZoneRowRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.TimeZone_ToggleActiveTimeZoneRowRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = id;
        if( typeof( first ) === "object" && first && ( typeof(first.Id)!='undefined' ) )
        {
            _request = id as carriers.TimeZone_ToggleActiveTimeZoneRowRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       Id: id as number,
                       };   
            _options = webapi_options;
        }
        return this._ToggleActiveTimeZoneRow( _request, _options );
    }


    private async _SetActiveTimeZonesByFilter(request: carriers.TimeZone_SetActiveTimeZonesByFilterRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetActiveTimeZonesByFilter", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Toggles active state of a single row in the TZLocation table
     * @param request - Filter, Active
     * @returns 
     */
    public async SetActiveTimeZonesByFilter(request: carriers.TimeZone_SetActiveTimeZonesByFilterRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Toggles active state of a single row in the TZLocation table
     * @param filter - Filter timezones
     * @param active - Set active to true or false
     * @returns 
     */
    public async SetActiveTimeZonesByFilter(filter: string, active: boolean, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async SetActiveTimeZonesByFilter(filter:string|carriers.TimeZone_SetActiveTimeZonesByFilterRequest, active?:boolean|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.TimeZone_SetActiveTimeZonesByFilterRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = filter;
        if( typeof( first ) === "object" && first && ( typeof(first.Filter)!='undefined' || typeof(first.Active)!='undefined' ) )
        {
            _request = filter as carriers.TimeZone_SetActiveTimeZonesByFilterRequest;
            _options = active as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       Filter: filter as string,
                       Active: active as boolean,
                       };   
            _options = webapi_options;
        }
        return this._SetActiveTimeZonesByFilter( _request, _options );
    }


    private async _TimeOfLastTimeZoneUpdate( options?:base.WebApiRequestOptions) : Promise< Date > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< Date >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("TimeOfLastTimeZoneUpdate", undefined , config);
                base.WebApiBase.SetCompleted(options);
                const res : Date = response.data as Date;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    /**
     * Get the time time zone data was last updated
     * @returns Time of last update
     */
    public async TimeOfLastTimeZoneUpdate(webapi_options?:base.WebApiRequestOptions) : Promise< Date >
    {
        return this._TimeOfLastTimeZoneUpdate(webapi_options);
    }


    private async _SetBaseTimeZoneId(request: carriers.TimeZone_SetBaseTimeZoneIdRequest, options?:base.WebApiRequestOptions) : Promise< boolean > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< boolean >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetBaseTimeZoneId", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : boolean = response.data as boolean;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Set the base timezone id.
     * @param request - TimezoneId
     * @returns Returns true if setting of base timezone was done
     */
    public async SetBaseTimeZoneId(request: carriers.TimeZone_SetBaseTimeZoneIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;

    /**
     * Set the base timezone id.
     * @param timezoneId - The timezone id to save
     * @returns Returns true if setting of base timezone was done
     */
    public async SetBaseTimeZoneId(timezoneId: number, webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;

    public async SetBaseTimeZoneId(timezoneId:number|carriers.TimeZone_SetBaseTimeZoneIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< boolean > {
        let _request : carriers.TimeZone_SetBaseTimeZoneIdRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = timezoneId;
        if( typeof( first ) === "object" && first && ( typeof(first.TimezoneId)!='undefined' ) )
        {
            _request = timezoneId as carriers.TimeZone_SetBaseTimeZoneIdRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       TimezoneId: timezoneId as number,
                       };   
            _options = webapi_options;
        }
        return this._SetBaseTimeZoneId( _request, _options );
    }


    private async _GetDefaultTimeZonePreference( options?:base.WebApiRequestOptions) : Promise< number > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< number >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetDefaultTimeZonePreference", undefined , config);
                base.WebApiBase.SetCompleted(options);
                const res : number = response.data as number;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    /**
     * Returns the id of the default timezone preference with deflevel system wide
     * @returns The id of the system wide default timezone preference
     */
    public async GetDefaultTimeZonePreference(webapi_options?:base.WebApiRequestOptions) : Promise< number >
    {
        return this._GetDefaultTimeZonePreference(webapi_options);
    }


    private async _DeleteTimeZones( options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("DeleteTimeZones", undefined , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    /**
     * Deletes all time zone data (locations and rules) from the database
     * @returns 
     */
    public async DeleteTimeZones(webapi_options?:base.WebApiRequestOptions) : Promise< void >
    {
        return this._DeleteTimeZones(webapi_options);
    }


    private async _SetActiveTimeZoneRow(request: carriers.TimeZone_SetActiveTimeZoneRowRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetActiveTimeZoneRow", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Set active state of singe row in the TZLocation table
     * @param request - Id, Active
     * @returns 
     */
    public async SetActiveTimeZoneRow(request: carriers.TimeZone_SetActiveTimeZoneRowRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Set active state of singe row in the TZLocation table
     * @param id - Id of row to set active state on
     * @param active - Set active to true or false
     * @returns 
     */
    public async SetActiveTimeZoneRow(id: number, active: boolean, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async SetActiveTimeZoneRow(id:number|carriers.TimeZone_SetActiveTimeZoneRowRequest, active?:boolean|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.TimeZone_SetActiveTimeZoneRowRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = id;
        if( typeof( first ) === "object" && first && ( typeof(first.Id)!='undefined' || typeof(first.Active)!='undefined' ) )
        {
            _request = id as carriers.TimeZone_SetActiveTimeZoneRowRequest;
            _options = active as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       Id: id as number,
                       Active: active as boolean,
                       };   
            _options = webapi_options;
        }
        return this._SetActiveTimeZoneRow( _request, _options );
    }

    } // class v1TimeZoneAgentController 


