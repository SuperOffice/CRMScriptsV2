// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>


/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
//
// File:          WebApi/ImportAgent.ts
//
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------

import { AxiosRequestConfig } from 'axios';
import * as moment from 'moment';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
import * as converters from './Converters';
import { FromBase64ToString, ToBase64 } from './Base64';

/**
 * This agent can be used to import data into the system
 */
export interface IImportAgent {
    PreviewImport(request: carriers.Import_PreviewImportRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ImportLine[] >;
    PreviewImport(importLines: carriers.ImportLine[], columnDefinition: string[], culture: string, context: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ImportLine[] >;
    SaveImport(request: carriers.Import_SaveImportRequest, webapi_options?:base.WebApiRequestOptions) : Promise< number[] >;
    SaveImport(importLines: carriers.ImportLine[], columnDefinition: string[], createSelection: boolean, culture: string, context: string, webapi_options?:base.WebApiRequestOptions) : Promise< number[] >;
    CreateDefaultImportLine(request: carriers.Import_CreateDefaultImportLineRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ImportLine >;
    CreateDefaultImportLine(countColumns: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ImportLine >;
    CreateErpImportData(request: carriers.Import_CreateErpImportDataRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ImportErpData >;
    CreateErpImportData(restriction: carriers.ArchiveRestrictionInfo[], columns: string[], connectionId: number, erpActorType: enums.ErpActorType, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ImportErpData >;
} // interface IImportAgent




/**
 * This agent can be used to import data into the system
 */
export class ImportAgent extends base.WebApiBase implements IImportAgent {
    constructor(baseUrl?: string, languageCode?:string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config:AxiosRequestConfig, languageCode?:string, cultureCode?: string);
    constructor(options: base.WebApiOptions);

    constructor(baseUrlOrOptions: string|base.WebApiOptions|undefined,
                langOrconfigOrRM?: string|base.ResourceParsing|AxiosRequestConfig|any, 
                langOrResourceOrRM?:string|base.ResourceParsing|any, 
                cultureCode?: string, 
                ) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Import/";
        super(options);
    }



    private async _PreviewImport(request: carriers.Import_PreviewImportRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ImportLine[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ImportLine[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("PreviewImport", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ImportLine[] = converters.Create_ImportLineArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Preview the import
     * @param request - ImportLines, ColumnDefinition, Culture, Context
     * @returns An array of the the rows that can be imported, manipulated according to Import rules given
     */
    public async PreviewImport(request: carriers.Import_PreviewImportRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ImportLine[] >;

    /**
     * Preview the import
     * @param importLines - The rows that will be manipulated and according to Import rules
     * @param columnDefinition - An array of the columndefinitions, like firstname, lastname, ...
     * @param culture - The current culture used in the import. Used to match language specific strings
     * @param context - Optional context for the import.
     * @returns An array of the the rows that can be imported, manipulated according to Import rules given
     */
    public async PreviewImport(importLines: carriers.ImportLine[], columnDefinition: string[], culture: string, context: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ImportLine[] >;

    public async PreviewImport(importLines:carriers.ImportLine[]|carriers.Import_PreviewImportRequest, columnDefinition?:string[]|base.WebApiRequestOptions, culture?:string, context?:string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ImportLine[] > {
        let _request : carriers.Import_PreviewImportRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = importLines;
        if( typeof( first ) === "object" && first && ( typeof(first.ImportLines)!='undefined' || typeof(first.ColumnDefinition)!='undefined' || typeof(first.Culture)!='undefined' || typeof(first.Context)!='undefined' ) )
        {
            _request = importLines as carriers.Import_PreviewImportRequest;
            _options = columnDefinition as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ImportLines: importLines as carriers.ImportLine[],
                       ColumnDefinition: columnDefinition as string[],
                       Culture: culture as string,
                       Context: context as string,
                       };   
            _options = webapi_options;
        }
        return this._PreviewImport( _request, _options );
    }


    private async _SaveImport(request: carriers.Import_SaveImportRequest, options?:base.WebApiRequestOptions) : Promise< number[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< number[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SaveImport", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : number[] = response.data as number[];
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Do the actual import
     * @param request - ImportLines, ColumnDefinition, CreateSelection, Culture, Context
     * @returns First part: the id of the selection created after the import, 0 if no selection is created. Second part: The number of rows actually imported
     */
    public async SaveImport(request: carriers.Import_SaveImportRequest, webapi_options?:base.WebApiRequestOptions) : Promise< number[] >;

    /**
     * Do the actual import
     * @param importLines - The rows that will be imported
     * @param columnDefinition - An array of the columndefinitions, like firstname, lastname, ...
     * @param createSelection - true if a selection of the imported entities shall be made
     * @param culture - The current culture used in the import. Used to match language specific strings
     * @param context - Optional context for the import.
     * @returns First part: the id of the selection created after the import, 0 if no selection is created. Second part: The number of rows actually imported
     */
    public async SaveImport(importLines: carriers.ImportLine[], columnDefinition: string[], createSelection: boolean, culture: string, context: string, webapi_options?:base.WebApiRequestOptions) : Promise< number[] >;

    public async SaveImport(importLines:carriers.ImportLine[]|carriers.Import_SaveImportRequest, columnDefinition?:string[]|base.WebApiRequestOptions, createSelection?:boolean, culture?:string, context?:string, webapi_options?:base.WebApiRequestOptions) : Promise< number[] > {
        let _request : carriers.Import_SaveImportRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = importLines;
        if( typeof( first ) === "object" && first && ( typeof(first.ImportLines)!='undefined' || typeof(first.ColumnDefinition)!='undefined' || typeof(first.CreateSelection)!='undefined' || typeof(first.Culture)!='undefined' || typeof(first.Context)!='undefined' ) )
        {
            _request = importLines as carriers.Import_SaveImportRequest;
            _options = columnDefinition as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ImportLines: importLines as carriers.ImportLine[],
                       ColumnDefinition: columnDefinition as string[],
                       CreateSelection: createSelection as boolean,
                       Culture: culture as string,
                       Context: context as string,
                       };   
            _options = webapi_options;
        }
        return this._SaveImport( _request, _options );
    }


    private async _CreateDefaultImportLine(request: carriers.Import_CreateDefaultImportLineRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ImportLine > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ImportLine >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("CreateDefaultImportLine", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ImportLine = converters.Create_ImportLine_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Create a new empty import row with x count of values
     * @param request - CountColumns
     * @returns A new ImportLine
     */
    public async CreateDefaultImportLine(request: carriers.Import_CreateDefaultImportLineRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ImportLine >;

    /**
     * Create a new empty import row with x count of values
     * @param countColumns - The count of values that will can be filled out
     * @returns A new ImportLine
     */
    public async CreateDefaultImportLine(countColumns: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ImportLine >;

    public async CreateDefaultImportLine(countColumns:number|carriers.Import_CreateDefaultImportLineRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ImportLine > {
        let _request : carriers.Import_CreateDefaultImportLineRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = countColumns;
        if( typeof( first ) === "object" && first && ( typeof(first.CountColumns)!='undefined' ) )
        {
            _request = countColumns as carriers.Import_CreateDefaultImportLineRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       CountColumns: countColumns as number,
                       };   
            _options = webapi_options;
        }
        return this._CreateDefaultImportLine( _request, _options );
    }


    private async _CreateErpImportData(request: carriers.Import_CreateErpImportDataRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ImportErpData > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ImportErpData >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("CreateErpImportData", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ImportErpData = converters.Create_ImportErpData_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Populates the ImportLines and columnDefs basedfrom erp system
     * @param request - Restriction, Columns, ConnectionId, ErpActorType
     * @returns The ImportLines and ColumnDefs
     */
    public async CreateErpImportData(request: carriers.Import_CreateErpImportDataRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ImportErpData >;

    /**
     * Populates the ImportLines and columnDefs basedfrom erp system
     * @param restriction - Archive restrictions.
     * @param columns - Columns.
     * @param connectionId - Connection id for Erp system
     * @param erpActorType - Erp Actor type
     * @returns The ImportLines and ColumnDefs
     */
    public async CreateErpImportData(restriction: carriers.ArchiveRestrictionInfo[], columns: string[], connectionId: number, erpActorType: enums.ErpActorType, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ImportErpData >;

    public async CreateErpImportData(restriction:carriers.ArchiveRestrictionInfo[]|carriers.Import_CreateErpImportDataRequest, columns?:string[]|base.WebApiRequestOptions, connectionId?:number, erpActorType?:enums.ErpActorType, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ImportErpData > {
        let _request : carriers.Import_CreateErpImportDataRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = restriction;
        if( typeof( first ) === "object" && first && ( typeof(first.Restriction)!='undefined' || typeof(first.Columns)!='undefined' || typeof(first.ConnectionId)!='undefined' || typeof(first.ErpActorType)!='undefined' ) )
        {
            _request = restriction as carriers.Import_CreateErpImportDataRequest;
            _options = columns as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       Restriction: restriction as carriers.ArchiveRestrictionInfo[],
                       Columns: columns as string[],
                       ConnectionId: connectionId as number,
                       ErpActorType: erpActorType as enums.ErpActorType,
                       };   
            _options = webapi_options;
        }
        return this._CreateErpImportData( _request, _options );
    }

    } // class v1ImportAgentController 


