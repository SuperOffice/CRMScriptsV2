// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>


/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
//
// File:          WebApi/ForeignSystemAgent.ts
//
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------

import { AxiosRequestConfig } from 'axios';
import * as moment from 'moment';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
import * as converters from './Converters';
import { FromBase64ToString, ToBase64 } from './Base64';

/**
 * Collection of all services that works with Foreign key data (Key/Value pairs)
 */
export interface IForeignSystemAgent {
    CreateDefaultForeignAppEntity(): Promise< carriers.ForeignAppEntity >;
    SaveForeignAppEntity(entity: carriers.ForeignAppEntity) : Promise< carriers.ForeignAppEntity >;
    DeleteForeignAppEntity(ForeignAppEntityId: number) : Promise<void>;
    GetForeignAppEntity(foreignAppEntityId: number) :  Promise< carriers.ForeignAppEntity >;
    GetAppByName(request: carriers.ForeignSystem_GetAppByNameRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignAppEntity >;
    GetAppByName(applicationName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignAppEntity >;
    GetApplicationDevices(request: carriers.ForeignSystem_GetApplicationDevicesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice[] >;
    GetApplicationDevices(applicationName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice[] >;
    GetDeviceByName(request: carriers.ForeignSystem_GetDeviceByNameRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice >;
    GetDeviceByName(applicationName: string, deviceName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice >;
    GetDeviceByIdentifier(request: carriers.ForeignSystem_GetDeviceByIdentifierRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice >;
    GetDeviceByIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice >;
    AddDeviceByIdentifier(request: carriers.ForeignSystem_AddDeviceByIdentifierRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice >;
    AddDeviceByIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice >;
    SaveDeviceByIdentifier(request: carriers.ForeignSystem_SaveDeviceByIdentifierRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice >;
    SaveDeviceByIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, foreignDevice: carriers.ForeignDevice, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice >;
    DeleteDeviceByIdentifier(request: carriers.ForeignSystem_DeleteDeviceByIdentifierRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    DeleteDeviceByIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    GetKey(request: carriers.ForeignSystem_GetKeyRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey >;
    GetKey(applicationName: string, deviceName: string, keyName: string, tableName: string, recordId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey >;
    GetKeyValue(request: carriers.ForeignSystem_GetKeyValueRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string >;
    GetKeyValue(applicationName: string, deviceName: string, keyName: string, tableName: string, recordId: number, webapi_options?:base.WebApiRequestOptions) : Promise< string >;
    GetKeyOnDeviceIdentifier(request: carriers.ForeignSystem_GetKeyOnDeviceIdentifierRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey >;
    GetKeyOnDeviceIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, keyName: string, tableName: string, recordId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey >;
    GetKeyValueOnDeviceIdentifier(request: carriers.ForeignSystem_GetKeyValueOnDeviceIdentifierRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string >;
    GetKeyValueOnDeviceIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, keyName: string, tableName: string, recordId: number, webapi_options?:base.WebApiRequestOptions) : Promise< string >;
    AddForeignKey(request: carriers.ForeignSystem_AddForeignKeyRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey >;
    AddForeignKey(foreignKey: carriers.ForeignKey, applicationName: string, deviceName: string, deviceIdentifier: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey >;
    SaveForeignKey(request: carriers.ForeignSystem_SaveForeignKeyRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey >;
    SaveForeignKey(foreignKey: carriers.ForeignKey, applicationName: string, deviceName: string, deviceIdentifier: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey >;
    DeleteForeignKeyOnName(request: carriers.ForeignSystem_DeleteForeignKeyOnNameRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    DeleteForeignKeyOnName(applicationName: string, deviceName: string, deviceIdentifier: string, keyName: string, tableName: string, recordId: number, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    GetKeyByValue(request: carriers.ForeignSystem_GetKeyByValueRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey >;
    GetKeyByValue(applicationName: string, deviceName: string, keyName: string, keyValue: string, tableName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey >;
    GetKeyByValueAndIdentifier(request: carriers.ForeignSystem_GetKeyByValueAndIdentifierRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey >;
    GetKeyByValueAndIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, keyName: string, keyValue: string, tableName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey >;
    GetAllForeignKeysOnEntity(request: carriers.ForeignSystem_GetAllForeignKeysOnEntityRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.StringDictionary >;
    GetAllForeignKeysOnEntity(entityType: string, entityId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.StringDictionary >;
    GetForeignDevice(foreignDeviceId: number) :  Promise< carriers.ForeignDevice >;
    SaveForeignDevice(request: carriers.ForeignSystem_SaveForeignDeviceRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice >;
    SaveForeignDevice(foreignDevice: carriers.ForeignDevice, applicationName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice >;
    DeleteForeignDevice(request: carriers.ForeignSystem_DeleteForeignDeviceRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    DeleteForeignDevice(foreignDevice: carriers.ForeignDevice, applicationName: string, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    DeleteForeignKey(request: carriers.ForeignSystem_DeleteForeignKeyRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    DeleteForeignKey(foreignKey: carriers.ForeignKey, applicationName: string, deviceName: string, deviceIdentifier: string, tableName: string, recordId: number, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    GetDeviceKeys(request: carriers.ForeignSystem_GetDeviceKeysRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey[] >;
    GetDeviceKeys(applicationName: string, deviceName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey[] >;
    GetApplicationKeys(request: carriers.ForeignSystem_GetApplicationKeysRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey[] >;
    GetApplicationKeys(applicationName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey[] >;
    GetDeviceKeysOnDeviceIdentifier(request: carriers.ForeignSystem_GetDeviceKeysOnDeviceIdentifierRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey[] >;
    GetDeviceKeysOnDeviceIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey[] >;
    GetDeviceKeysOnDeviceIdentifierTable(request: carriers.ForeignSystem_GetDeviceKeysOnDeviceIdentifierTableRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey[] >;
    GetDeviceKeysOnDeviceIdentifierTable(applicationName: string, deviceName: string, deviceIdentifier: string, tableName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey[] >;
    GetDeviceKeysOnDeviceIdentifierTableRecordId(request: carriers.ForeignSystem_GetDeviceKeysOnDeviceIdentifierTableRecordIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey[] >;
    GetDeviceKeysOnDeviceIdentifierTableRecordId(applicationName: string, deviceName: string, deviceIdentifier: string, tableName: string, recordId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey[] >;
} // interface IForeignSystemAgent




/**
 * Collection of all services that works with Foreign key data (Key/Value pairs)
 */
export class ForeignSystemAgent extends base.WebApiBase implements IForeignSystemAgent {
    constructor(baseUrl?: string, languageCode?:string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config:AxiosRequestConfig, languageCode?:string, cultureCode?: string);
    constructor(options: base.WebApiOptions);

    constructor(baseUrlOrOptions: string|base.WebApiOptions|undefined,
                langOrconfigOrRM?: string|base.ResourceParsing|AxiosRequestConfig|any, 
                langOrResourceOrRM?:string|base.ResourceParsing|any, 
                cultureCode?: string, 
                ) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/ForeignSystem/";
        super(options);
    }



    /**
     * Set default values into a new ForeignAppEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    public async CreateDefaultForeignAppEntity(options?:base.WebApiRequestOptions) : Promise< carriers.ForeignAppEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ForeignAppEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultForeignAppEntity", null, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ForeignAppEntity = converters.Create_ForeignAppEntity_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing ForeignAppEntity or creates a new ForeignAppEntity if the id parameter is empty
     * @param entity - The ForeignAppEntity to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated ForeignAppEntity
     */
    public async SaveForeignAppEntity(entity: carriers.ForeignAppEntity, options?:base.WebApiRequestOptions) : Promise< carriers.ForeignAppEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ForeignAppEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveForeignAppEntity", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ForeignAppEntity = converters.Create_ForeignAppEntity_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /*
     * Deletes the ForeignAppEntity
     * @param ForeignAppEntityId - The id of the ForeignAppEntity to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    public async DeleteForeignAppEntity(ForeignAppEntityId: number, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteForeignAppEntity?ForeignAppEntityId=" + ForeignAppEntityId, null, config );
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Gets a ForeignAppEntity object.
     * @param foreignAppEntityId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single ForeignAppEntity
     */
    public async GetForeignAppEntity(foreignAppEntityId: number, options?:base.WebApiRequestOptions) : Promise< carriers.ForeignAppEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ForeignAppEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetForeignAppEntity?foreignAppEntityId=" + foreignAppEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ForeignAppEntity_From( response.data );               
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    private async _GetAppByName(request: carriers.ForeignSystem_GetAppByNameRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ForeignAppEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ForeignAppEntity >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetAppByName", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ForeignAppEntity = converters.Create_ForeignAppEntity_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Gets the ForeignApp with the given name.
     * @param request - ApplicationName
     * @returns The ForeignApp that matches the name.
     */
    public async GetAppByName(request: carriers.ForeignSystem_GetAppByNameRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignAppEntity >;

    /**
     * Gets the ForeignApp with the given name.
     * @param applicationName - The name of the foreign application.
     * @returns The ForeignApp that matches the name.
     */
    public async GetAppByName(applicationName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignAppEntity >;

    public async GetAppByName(applicationName:string|carriers.ForeignSystem_GetAppByNameRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignAppEntity > {
        let _request : carriers.ForeignSystem_GetAppByNameRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = applicationName;
        if( typeof( first ) === "object" && first && ( typeof(first.ApplicationName)!='undefined' ) )
        {
            _request = applicationName as carriers.ForeignSystem_GetAppByNameRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ApplicationName: applicationName as string,
                       };   
            _options = webapi_options;
        }
        return this._GetAppByName( _request, _options );
    }


    private async _GetApplicationDevices(request: carriers.ForeignSystem_GetApplicationDevicesRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ForeignDevice[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetApplicationDevices", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ForeignDevice[] = converters.Create_ForeignDeviceArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Gets all devices that belong to a foreign application.
     * @param request - ApplicationName
     * @returns Array of ForeignDevices
     */
    public async GetApplicationDevices(request: carriers.ForeignSystem_GetApplicationDevicesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice[] >;

    /**
     * Gets all devices that belong to a foreign application.
     * @param applicationName - The foreign application name
     * @returns Array of ForeignDevices
     */
    public async GetApplicationDevices(applicationName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice[] >;

    public async GetApplicationDevices(applicationName:string|carriers.ForeignSystem_GetApplicationDevicesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice[] > {
        let _request : carriers.ForeignSystem_GetApplicationDevicesRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = applicationName;
        if( typeof( first ) === "object" && first && ( typeof(first.ApplicationName)!='undefined' ) )
        {
            _request = applicationName as carriers.ForeignSystem_GetApplicationDevicesRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ApplicationName: applicationName as string,
                       };   
            _options = webapi_options;
        }
        return this._GetApplicationDevices( _request, _options );
    }


    private async _GetDeviceByName(request: carriers.ForeignSystem_GetDeviceByNameRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ForeignDevice >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetDeviceByName", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ForeignDevice = converters.Create_ForeignDevice_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Gets a ForeignDevice with deviceName that belongs to the application with applicationName.
     * @param request - ApplicationName, DeviceName
     * @returns The ForeignDevice.
     */
    public async GetDeviceByName(request: carriers.ForeignSystem_GetDeviceByNameRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice >;

    /**
     * Gets a ForeignDevice with deviceName that belongs to the application with applicationName.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @returns The ForeignDevice.
     */
    public async GetDeviceByName(applicationName: string, deviceName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice >;

    public async GetDeviceByName(applicationName:string|carriers.ForeignSystem_GetDeviceByNameRequest, deviceName?:string|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice > {
        let _request : carriers.ForeignSystem_GetDeviceByNameRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = applicationName;
        if( typeof( first ) === "object" && first && ( typeof(first.ApplicationName)!='undefined' || typeof(first.DeviceName)!='undefined' ) )
        {
            _request = applicationName as carriers.ForeignSystem_GetDeviceByNameRequest;
            _options = deviceName as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ApplicationName: applicationName as string,
                       DeviceName: deviceName as string,
                       };   
            _options = webapi_options;
        }
        return this._GetDeviceByName( _request, _options );
    }


    private async _GetDeviceByIdentifier(request: carriers.ForeignSystem_GetDeviceByIdentifierRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ForeignDevice >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetDeviceByIdentifier", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ForeignDevice = converters.Create_ForeignDevice_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Gets a ForeignDevice with deviceName and deviceIdentifier that belongs to the application with applicationName.
     * @param request - ApplicationName, DeviceName, DeviceIdentifier
     * @returns The ForeignDevice.
     */
    public async GetDeviceByIdentifier(request: carriers.ForeignSystem_GetDeviceByIdentifierRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice >;

    /**
     * Gets a ForeignDevice with deviceName and deviceIdentifier that belongs to the application with applicationName.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param deviceIdentifier - Optional unique id of device (Palm pilot device ID, version number, etc)
     * @returns The ForeignDevice.
     */
    public async GetDeviceByIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice >;

    public async GetDeviceByIdentifier(applicationName:string|carriers.ForeignSystem_GetDeviceByIdentifierRequest, deviceName?:string|base.WebApiRequestOptions, deviceIdentifier?:string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice > {
        let _request : carriers.ForeignSystem_GetDeviceByIdentifierRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = applicationName;
        if( typeof( first ) === "object" && first && ( typeof(first.ApplicationName)!='undefined' || typeof(first.DeviceName)!='undefined' || typeof(first.DeviceIdentifier)!='undefined' ) )
        {
            _request = applicationName as carriers.ForeignSystem_GetDeviceByIdentifierRequest;
            _options = deviceName as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ApplicationName: applicationName as string,
                       DeviceName: deviceName as string,
                       DeviceIdentifier: deviceIdentifier as string,
                       };   
            _options = webapi_options;
        }
        return this._GetDeviceByIdentifier( _request, _options );
    }


    private async _AddDeviceByIdentifier(request: carriers.ForeignSystem_AddDeviceByIdentifierRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ForeignDevice >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("AddDeviceByIdentifier", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ForeignDevice = converters.Create_ForeignDevice_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Adds a new ForeignDevice with deviceName that belongs to the application with applicationName, with an optional device-specific identifier.
     * @param request - ApplicationName, DeviceName, DeviceIdentifier
     * @returns The ForeignDevice.
     */
    public async AddDeviceByIdentifier(request: carriers.ForeignSystem_AddDeviceByIdentifierRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice >;

    /**
     * Adds a new ForeignDevice with deviceName that belongs to the application with applicationName, with an optional device-specific identifier.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param deviceIdentifier - Unique id of device (Palm pilot device ID, version number, etc)
     * @returns The ForeignDevice.
     */
    public async AddDeviceByIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice >;

    public async AddDeviceByIdentifier(applicationName:string|carriers.ForeignSystem_AddDeviceByIdentifierRequest, deviceName?:string|base.WebApiRequestOptions, deviceIdentifier?:string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice > {
        let _request : carriers.ForeignSystem_AddDeviceByIdentifierRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = applicationName;
        if( typeof( first ) === "object" && first && ( typeof(first.ApplicationName)!='undefined' || typeof(first.DeviceName)!='undefined' || typeof(first.DeviceIdentifier)!='undefined' ) )
        {
            _request = applicationName as carriers.ForeignSystem_AddDeviceByIdentifierRequest;
            _options = deviceName as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ApplicationName: applicationName as string,
                       DeviceName: deviceName as string,
                       DeviceIdentifier: deviceIdentifier as string,
                       };   
            _options = webapi_options;
        }
        return this._AddDeviceByIdentifier( _request, _options );
    }


    private async _SaveDeviceByIdentifier(request: carriers.ForeignSystem_SaveDeviceByIdentifierRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ForeignDevice >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SaveDeviceByIdentifier", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ForeignDevice = converters.Create_ForeignDevice_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Updates a ForeignDevice with deviceName that belongs to the application with applicationName.
     * @param request - ApplicationName, DeviceName, DeviceIdentifier, ForeignDevice
     * @returns The ForeignDevice.
     */
    public async SaveDeviceByIdentifier(request: carriers.ForeignSystem_SaveDeviceByIdentifierRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice >;

    /**
     * Updates a ForeignDevice with deviceName that belongs to the application with applicationName.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param deviceIdentifier - Unique id of device (Palm pilot device ID, version number, etc)
     * @param foreignDevice - Foreign device to save. Can be null if adding new device.
     * @returns The ForeignDevice.
     */
    public async SaveDeviceByIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, foreignDevice: carriers.ForeignDevice, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice >;

    public async SaveDeviceByIdentifier(applicationName:string|carriers.ForeignSystem_SaveDeviceByIdentifierRequest, deviceName?:string|base.WebApiRequestOptions, deviceIdentifier?:string, foreignDevice?:carriers.ForeignDevice, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice > {
        let _request : carriers.ForeignSystem_SaveDeviceByIdentifierRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = applicationName;
        if( typeof( first ) === "object" && first && ( typeof(first.ApplicationName)!='undefined' || typeof(first.DeviceName)!='undefined' || typeof(first.DeviceIdentifier)!='undefined' || typeof(first.ForeignDevice)!='undefined' ) )
        {
            _request = applicationName as carriers.ForeignSystem_SaveDeviceByIdentifierRequest;
            _options = deviceName as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ApplicationName: applicationName as string,
                       DeviceName: deviceName as string,
                       DeviceIdentifier: deviceIdentifier as string,
                       ForeignDevice: foreignDevice as carriers.ForeignDevice,
                       };   
            _options = webapi_options;
        }
        return this._SaveDeviceByIdentifier( _request, _options );
    }


    private async _DeleteDeviceByIdentifier(request: carriers.ForeignSystem_DeleteDeviceByIdentifierRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("DeleteDeviceByIdentifier", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Delete a ForeignDevice with deviceName and deviceIdentifier that belongs to the application with applicationName.
     * @param request - ApplicationName, DeviceName, DeviceIdentifier
     * @returns This method has no return value
     */
    public async DeleteDeviceByIdentifier(request: carriers.ForeignSystem_DeleteDeviceByIdentifierRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Delete a ForeignDevice with deviceName and deviceIdentifier that belongs to the application with applicationName.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param deviceIdentifier - Unique id of device (Palm pilot device ID, version number, etc)
     * @returns This method has no return value
     */
    public async DeleteDeviceByIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async DeleteDeviceByIdentifier(applicationName:string|carriers.ForeignSystem_DeleteDeviceByIdentifierRequest, deviceName?:string|base.WebApiRequestOptions, deviceIdentifier?:string, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.ForeignSystem_DeleteDeviceByIdentifierRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = applicationName;
        if( typeof( first ) === "object" && first && ( typeof(first.ApplicationName)!='undefined' || typeof(first.DeviceName)!='undefined' || typeof(first.DeviceIdentifier)!='undefined' ) )
        {
            _request = applicationName as carriers.ForeignSystem_DeleteDeviceByIdentifierRequest;
            _options = deviceName as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ApplicationName: applicationName as string,
                       DeviceName: deviceName as string,
                       DeviceIdentifier: deviceIdentifier as string,
                       };   
            _options = webapi_options;
        }
        return this._DeleteDeviceByIdentifier( _request, _options );
    }


    private async _GetKey(request: carriers.ForeignSystem_GetKeyRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ForeignKey >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetKey", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ForeignKey = converters.Create_ForeignKey_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Returning a foreign key by its key name, that belongs to the specified device and application. A table name and record ID can also be specified.
     * @param request - ApplicationName, DeviceName, KeyName, TableName, RecordId
     * @returns The ForeignKey.
     */
    public async GetKey(request: carriers.ForeignSystem_GetKeyRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey >;

    /**
     * Returning a foreign key by its key name, that belongs to the specified device and application. A table name and record ID can also be specified.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param keyName - The name of the foreign key.
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.<p/>Use an empty string to indicate that your key is not bound to any specific table.
     * @param recordId - Id of record that this key refers to. If the table name was blank, then this parameter must be 0. It can also be 0 to mean that the foreign key record was not bound to any particular record of the target table.
     * @returns The ForeignKey.
     */
    public async GetKey(applicationName: string, deviceName: string, keyName: string, tableName: string, recordId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey >;

    public async GetKey(applicationName:string|carriers.ForeignSystem_GetKeyRequest, deviceName?:string|base.WebApiRequestOptions, keyName?:string, tableName?:string, recordId?:number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey > {
        let _request : carriers.ForeignSystem_GetKeyRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = applicationName;
        if( typeof( first ) === "object" && first && ( typeof(first.ApplicationName)!='undefined' || typeof(first.DeviceName)!='undefined' || typeof(first.KeyName)!='undefined' || typeof(first.TableName)!='undefined' || typeof(first.RecordId)!='undefined' ) )
        {
            _request = applicationName as carriers.ForeignSystem_GetKeyRequest;
            _options = deviceName as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ApplicationName: applicationName as string,
                       DeviceName: deviceName as string,
                       KeyName: keyName as string,
                       TableName: tableName as string,
                       RecordId: recordId as number,
                       };   
            _options = webapi_options;
        }
        return this._GetKey( _request, _options );
    }


    private async _GetKeyValue(request: carriers.ForeignSystem_GetKeyValueRequest, options?:base.WebApiRequestOptions) : Promise< string > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< string >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetKeyValue", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : string = response.data as string;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Gets the string value of a ForeignKey, that belongs to the specified device and application. The table name and record ID must also be specified.
     * @param request - ApplicationName, DeviceName, KeyName, TableName, RecordId
     * @returns The ForeignKey value as string.
     */
    public async GetKeyValue(request: carriers.ForeignSystem_GetKeyValueRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string >;

    /**
     * Gets the string value of a ForeignKey, that belongs to the specified device and application. The table name and record ID must also be specified.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param keyName - The name of the foreign key.
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.<p/>Use an empty string to indicate that your key is not bound to any specific table.
     * @param recordId - Id of record that this key refers to. If the table name was blank, then this parameter must be 0. It can also be 0 to mean that the foreign key record was not bound to any particular record of the target table.
     * @returns The ForeignKey value as string.
     */
    public async GetKeyValue(applicationName: string, deviceName: string, keyName: string, tableName: string, recordId: number, webapi_options?:base.WebApiRequestOptions) : Promise< string >;

    public async GetKeyValue(applicationName:string|carriers.ForeignSystem_GetKeyValueRequest, deviceName?:string|base.WebApiRequestOptions, keyName?:string, tableName?:string, recordId?:number, webapi_options?:base.WebApiRequestOptions) : Promise< string > {
        let _request : carriers.ForeignSystem_GetKeyValueRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = applicationName;
        if( typeof( first ) === "object" && first && ( typeof(first.ApplicationName)!='undefined' || typeof(first.DeviceName)!='undefined' || typeof(first.KeyName)!='undefined' || typeof(first.TableName)!='undefined' || typeof(first.RecordId)!='undefined' ) )
        {
            _request = applicationName as carriers.ForeignSystem_GetKeyValueRequest;
            _options = deviceName as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ApplicationName: applicationName as string,
                       DeviceName: deviceName as string,
                       KeyName: keyName as string,
                       TableName: tableName as string,
                       RecordId: recordId as number,
                       };   
            _options = webapi_options;
        }
        return this._GetKeyValue( _request, _options );
    }


    private async _GetKeyOnDeviceIdentifier(request: carriers.ForeignSystem_GetKeyOnDeviceIdentifierRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ForeignKey >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetKeyOnDeviceIdentifier", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ForeignKey = converters.Create_ForeignKey_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Returning a foreign key by its key name and device identifier, that belongs to the specified device and application. A table name and record ID can also be specified.
     * @param request - ApplicationName, DeviceName, DeviceIdentifier, KeyName, TableName, RecordId
     * @returns The ForeignKey.
     */
    public async GetKeyOnDeviceIdentifier(request: carriers.ForeignSystem_GetKeyOnDeviceIdentifierRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey >;

    /**
     * Returning a foreign key by its key name and device identifier, that belongs to the specified device and application. A table name and record ID can also be specified.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param deviceIdentifier - The device identifier.
     * @param keyName - The name of the foreign key.
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.<p/>Use an empty string to indicate that your key is not bound to any specific table.
     * @param recordId - Id of record that this key refers to. If the table name was blank, then this parameter must be 0. It can also be 0 to mean that the foreign key record was not bound to any particular record of the target table.
     * @returns The ForeignKey.
     */
    public async GetKeyOnDeviceIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, keyName: string, tableName: string, recordId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey >;

    public async GetKeyOnDeviceIdentifier(applicationName:string|carriers.ForeignSystem_GetKeyOnDeviceIdentifierRequest, deviceName?:string|base.WebApiRequestOptions, deviceIdentifier?:string, keyName?:string, tableName?:string, recordId?:number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey > {
        let _request : carriers.ForeignSystem_GetKeyOnDeviceIdentifierRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = applicationName;
        if( typeof( first ) === "object" && first && ( typeof(first.ApplicationName)!='undefined' || typeof(first.DeviceName)!='undefined' || typeof(first.DeviceIdentifier)!='undefined' || typeof(first.KeyName)!='undefined' || typeof(first.TableName)!='undefined' || typeof(first.RecordId)!='undefined' ) )
        {
            _request = applicationName as carriers.ForeignSystem_GetKeyOnDeviceIdentifierRequest;
            _options = deviceName as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ApplicationName: applicationName as string,
                       DeviceName: deviceName as string,
                       DeviceIdentifier: deviceIdentifier as string,
                       KeyName: keyName as string,
                       TableName: tableName as string,
                       RecordId: recordId as number,
                       };   
            _options = webapi_options;
        }
        return this._GetKeyOnDeviceIdentifier( _request, _options );
    }


    private async _GetKeyValueOnDeviceIdentifier(request: carriers.ForeignSystem_GetKeyValueOnDeviceIdentifierRequest, options?:base.WebApiRequestOptions) : Promise< string > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< string >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetKeyValueOnDeviceIdentifier", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : string = response.data as string;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Returning a foreign key string value by its key name and device identifier, that belongs to the specified device and application. A table name and record ID can also be specified.
     * @param request - ApplicationName, DeviceName, DeviceIdentifier, KeyName, TableName, RecordId
     * @returns The ForeignKey's string value.
     */
    public async GetKeyValueOnDeviceIdentifier(request: carriers.ForeignSystem_GetKeyValueOnDeviceIdentifierRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string >;

    /**
     * Returning a foreign key string value by its key name and device identifier, that belongs to the specified device and application. A table name and record ID can also be specified.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param deviceIdentifier - The device identifier.
     * @param keyName - The name of the foreign key.
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.<p/>Use an empty string to indicate that your key is not bound to any specific table.
     * @param recordId - Id of record that this key refers to. If the table name was blank, then this parameter must be 0. It can also be 0 to mean that the foreign key record was not bound to any particular record of the target table.
     * @returns The ForeignKey's string value.
     */
    public async GetKeyValueOnDeviceIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, keyName: string, tableName: string, recordId: number, webapi_options?:base.WebApiRequestOptions) : Promise< string >;

    public async GetKeyValueOnDeviceIdentifier(applicationName:string|carriers.ForeignSystem_GetKeyValueOnDeviceIdentifierRequest, deviceName?:string|base.WebApiRequestOptions, deviceIdentifier?:string, keyName?:string, tableName?:string, recordId?:number, webapi_options?:base.WebApiRequestOptions) : Promise< string > {
        let _request : carriers.ForeignSystem_GetKeyValueOnDeviceIdentifierRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = applicationName;
        if( typeof( first ) === "object" && first && ( typeof(first.ApplicationName)!='undefined' || typeof(first.DeviceName)!='undefined' || typeof(first.DeviceIdentifier)!='undefined' || typeof(first.KeyName)!='undefined' || typeof(first.TableName)!='undefined' || typeof(first.RecordId)!='undefined' ) )
        {
            _request = applicationName as carriers.ForeignSystem_GetKeyValueOnDeviceIdentifierRequest;
            _options = deviceName as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ApplicationName: applicationName as string,
                       DeviceName: deviceName as string,
                       DeviceIdentifier: deviceIdentifier as string,
                       KeyName: keyName as string,
                       TableName: tableName as string,
                       RecordId: recordId as number,
                       };   
            _options = webapi_options;
        }
        return this._GetKeyValueOnDeviceIdentifier( _request, _options );
    }


    private async _AddForeignKey(request: carriers.ForeignSystem_AddForeignKeyRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ForeignKey >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("AddForeignKey", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ForeignKey = converters.Create_ForeignKey_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Add a new key belonging to the ForeignApp and ForeignDevice specified.
     * @param request - ForeignKey, ApplicationName, DeviceName, DeviceIdentifier
     * @returns The new or updated ForeignKey
     */
    public async AddForeignKey(request: carriers.ForeignSystem_AddForeignKeyRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey >;

    /**
     * Add a new key belonging to the ForeignApp and ForeignDevice specified.
     * @param foreignKey - Foreign key to save
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param deviceIdentifier - The device identifier. Optional if device identifier is not used.
     * @returns The new or updated ForeignKey
     */
    public async AddForeignKey(foreignKey: carriers.ForeignKey, applicationName: string, deviceName: string, deviceIdentifier: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey >;

    public async AddForeignKey(foreignKey:carriers.ForeignKey|carriers.ForeignSystem_AddForeignKeyRequest, applicationName?:string|base.WebApiRequestOptions, deviceName?:string, deviceIdentifier?:string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey > {
        let _request : carriers.ForeignSystem_AddForeignKeyRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = foreignKey;
        if( typeof( first ) === "object" && first && ( typeof(first.ForeignKey)!='undefined' || typeof(first.ApplicationName)!='undefined' || typeof(first.DeviceName)!='undefined' || typeof(first.DeviceIdentifier)!='undefined' ) )
        {
            _request = foreignKey as carriers.ForeignSystem_AddForeignKeyRequest;
            _options = applicationName as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ForeignKey: foreignKey as carriers.ForeignKey,
                       ApplicationName: applicationName as string,
                       DeviceName: deviceName as string,
                       DeviceIdentifier: deviceIdentifier as string,
                       };   
            _options = webapi_options;
        }
        return this._AddForeignKey( _request, _options );
    }


    private async _SaveForeignKey(request: carriers.ForeignSystem_SaveForeignKeyRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ForeignKey >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SaveForeignKey", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ForeignKey = converters.Create_ForeignKey_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Saves a key belonging to the ForeignApp and ForeignDevice specified.
     * @param request - ForeignKey, ApplicationName, DeviceName, DeviceIdentifier
     * @returns The new or updated ForeignKey
     */
    public async SaveForeignKey(request: carriers.ForeignSystem_SaveForeignKeyRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey >;

    /**
     * Saves a key belonging to the ForeignApp and ForeignDevice specified.
     * @param foreignKey - Foreign key to save
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param deviceIdentifier - The device identifier. Optional if device identifier is not used.
     * @returns The new or updated ForeignKey
     */
    public async SaveForeignKey(foreignKey: carriers.ForeignKey, applicationName: string, deviceName: string, deviceIdentifier: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey >;

    public async SaveForeignKey(foreignKey:carriers.ForeignKey|carriers.ForeignSystem_SaveForeignKeyRequest, applicationName?:string|base.WebApiRequestOptions, deviceName?:string, deviceIdentifier?:string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey > {
        let _request : carriers.ForeignSystem_SaveForeignKeyRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = foreignKey;
        if( typeof( first ) === "object" && first && ( typeof(first.ForeignKey)!='undefined' || typeof(first.ApplicationName)!='undefined' || typeof(first.DeviceName)!='undefined' || typeof(first.DeviceIdentifier)!='undefined' ) )
        {
            _request = foreignKey as carriers.ForeignSystem_SaveForeignKeyRequest;
            _options = applicationName as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ForeignKey: foreignKey as carriers.ForeignKey,
                       ApplicationName: applicationName as string,
                       DeviceName: deviceName as string,
                       DeviceIdentifier: deviceIdentifier as string,
                       };   
            _options = webapi_options;
        }
        return this._SaveForeignKey( _request, _options );
    }


    private async _DeleteForeignKeyOnName(request: carriers.ForeignSystem_DeleteForeignKeyOnNameRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("DeleteForeignKeyOnName", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Deletes all specified occurrences of a key, belonging to the ForeignApp and ForeignDevice, table and record specified. Specifying a blank table name will delete ALL keys of the given name; specifying a recordId of 0 will delete ALL keys of the given name for the given table.
     * @param request - ApplicationName, DeviceName, DeviceIdentifier, KeyName, TableName, RecordId
     * @returns This method has no return value
     */
    public async DeleteForeignKeyOnName(request: carriers.ForeignSystem_DeleteForeignKeyOnNameRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Deletes all specified occurrences of a key, belonging to the ForeignApp and ForeignDevice, table and record specified. Specifying a blank table name will delete ALL keys of the given name; specifying a recordId of 0 will delete ALL keys of the given name for the given table.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param deviceIdentifier - The device identifier. Optional if device identifier is not used.
     * @param keyName - The name of the foreign key to delete.
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.<p/>Use an empty string to delete ALL keys that otherwise match; this may be dangerous and can take a long time if there are many items to delete.
     * @param recordId - Id of record that this key refers to. If the table name was blank, then this parameter must be 0. It can also be 0 to mean that the foreign key record was not bound to any particular record of the target table.<p/>Specifying a zero recordId will remove the recordId restriction and delete all keys that otherwise match.
     * @returns This method has no return value
     */
    public async DeleteForeignKeyOnName(applicationName: string, deviceName: string, deviceIdentifier: string, keyName: string, tableName: string, recordId: number, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async DeleteForeignKeyOnName(applicationName:string|carriers.ForeignSystem_DeleteForeignKeyOnNameRequest, deviceName?:string|base.WebApiRequestOptions, deviceIdentifier?:string, keyName?:string, tableName?:string, recordId?:number, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.ForeignSystem_DeleteForeignKeyOnNameRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = applicationName;
        if( typeof( first ) === "object" && first && ( typeof(first.ApplicationName)!='undefined' || typeof(first.DeviceName)!='undefined' || typeof(first.DeviceIdentifier)!='undefined' || typeof(first.KeyName)!='undefined' || typeof(first.TableName)!='undefined' || typeof(first.RecordId)!='undefined' ) )
        {
            _request = applicationName as carriers.ForeignSystem_DeleteForeignKeyOnNameRequest;
            _options = deviceName as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ApplicationName: applicationName as string,
                       DeviceName: deviceName as string,
                       DeviceIdentifier: deviceIdentifier as string,
                       KeyName: keyName as string,
                       TableName: tableName as string,
                       RecordId: recordId as number,
                       };   
            _options = webapi_options;
        }
        return this._DeleteForeignKeyOnName( _request, _options );
    }


    private async _GetKeyByValue(request: carriers.ForeignSystem_GetKeyByValueRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ForeignKey >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetKeyByValue", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ForeignKey = converters.Create_ForeignKey_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Get a foreignkey based on its name and value, that belongs to the specified device and application.
     * @param request - ApplicationName, DeviceName, KeyName, KeyValue, TableName
     * @returns The ForeignKey.
     */
    public async GetKeyByValue(request: carriers.ForeignSystem_GetKeyByValueRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey >;

    /**
     * Get a foreignkey based on its name and value, that belongs to the specified device and application.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param keyName - The name of the foreign key.
     * @param keyValue - Foreignkey value
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.<p/>Use an empty string to indicate that your key is not bound to any specific table.
     * @returns The ForeignKey.
     */
    public async GetKeyByValue(applicationName: string, deviceName: string, keyName: string, keyValue: string, tableName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey >;

    public async GetKeyByValue(applicationName:string|carriers.ForeignSystem_GetKeyByValueRequest, deviceName?:string|base.WebApiRequestOptions, keyName?:string, keyValue?:string, tableName?:string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey > {
        let _request : carriers.ForeignSystem_GetKeyByValueRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = applicationName;
        if( typeof( first ) === "object" && first && ( typeof(first.ApplicationName)!='undefined' || typeof(first.DeviceName)!='undefined' || typeof(first.KeyName)!='undefined' || typeof(first.KeyValue)!='undefined' || typeof(first.TableName)!='undefined' ) )
        {
            _request = applicationName as carriers.ForeignSystem_GetKeyByValueRequest;
            _options = deviceName as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ApplicationName: applicationName as string,
                       DeviceName: deviceName as string,
                       KeyName: keyName as string,
                       KeyValue: keyValue as string,
                       TableName: tableName as string,
                       };   
            _options = webapi_options;
        }
        return this._GetKeyByValue( _request, _options );
    }


    private async _GetKeyByValueAndIdentifier(request: carriers.ForeignSystem_GetKeyByValueAndIdentifierRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ForeignKey >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetKeyByValueAndIdentifier", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ForeignKey = converters.Create_ForeignKey_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Get a foreignkey based on its name and value, that belongs to the specified deviceId, device, and application.
     * @param request - ApplicationName, DeviceName, DeviceIdentifier, KeyName, KeyValue, TableName
     * @returns The ForeignKey.
     */
    public async GetKeyByValueAndIdentifier(request: carriers.ForeignSystem_GetKeyByValueAndIdentifierRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey >;

    /**
     * Get a foreignkey based on its name and value, that belongs to the specified deviceId, device, and application.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param deviceIdentifier - The device identifier. Optional if device identifier is not used.
     * @param keyName - The name of the foreign key.
     * @param keyValue - Foreignkey value
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.<p/>Use an empty string to indicate that your key is not bound to any specific table.
     * @returns The ForeignKey.
     */
    public async GetKeyByValueAndIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, keyName: string, keyValue: string, tableName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey >;

    public async GetKeyByValueAndIdentifier(applicationName:string|carriers.ForeignSystem_GetKeyByValueAndIdentifierRequest, deviceName?:string|base.WebApiRequestOptions, deviceIdentifier?:string, keyName?:string, keyValue?:string, tableName?:string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey > {
        let _request : carriers.ForeignSystem_GetKeyByValueAndIdentifierRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = applicationName;
        if( typeof( first ) === "object" && first && ( typeof(first.ApplicationName)!='undefined' || typeof(first.DeviceName)!='undefined' || typeof(first.DeviceIdentifier)!='undefined' || typeof(first.KeyName)!='undefined' || typeof(first.KeyValue)!='undefined' || typeof(first.TableName)!='undefined' ) )
        {
            _request = applicationName as carriers.ForeignSystem_GetKeyByValueAndIdentifierRequest;
            _options = deviceName as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ApplicationName: applicationName as string,
                       DeviceName: deviceName as string,
                       DeviceIdentifier: deviceIdentifier as string,
                       KeyName: keyName as string,
                       KeyValue: keyValue as string,
                       TableName: tableName as string,
                       };   
            _options = webapi_options;
        }
        return this._GetKeyByValueAndIdentifier( _request, _options );
    }


    private async _GetAllForeignKeysOnEntity(request: carriers.ForeignSystem_GetAllForeignKeysOnEntityRequest, options?:base.WebApiRequestOptions) : Promise< carriers.StringDictionary > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.StringDictionary >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetAllForeignKeysOnEntity", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.StringDictionary = converters.Create_StringDictionary_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Get a list of foreignkeys (&apos;app.device.key&apos;) and their values (&apos;123&apos;) that belong to the specified entity.
     * @param request - EntityType, EntityId
     * @returns Dictionary of 'appname.deviceid.keyname' = '123' key values
     */
    public async GetAllForeignKeysOnEntity(request: carriers.ForeignSystem_GetAllForeignKeysOnEntityRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.StringDictionary >;

    /**
     * Get a list of foreignkeys (&apos;app.device.key&apos;) and their values (&apos;123&apos;) that belong to the specified entity.
     * @param entityType - Entity type (table name): 'contact', 'project' etc.
     * @param entityId - Primary key of Entity
     * @returns Dictionary of 'appname.deviceid.keyname' = '123' key values
     */
    public async GetAllForeignKeysOnEntity(entityType: string, entityId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.StringDictionary >;

    public async GetAllForeignKeysOnEntity(entityType:string|carriers.ForeignSystem_GetAllForeignKeysOnEntityRequest, entityId?:number|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.StringDictionary > {
        let _request : carriers.ForeignSystem_GetAllForeignKeysOnEntityRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = entityType;
        if( typeof( first ) === "object" && first && ( typeof(first.EntityType)!='undefined' || typeof(first.EntityId)!='undefined' ) )
        {
            _request = entityType as carriers.ForeignSystem_GetAllForeignKeysOnEntityRequest;
            _options = entityId as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       EntityType: entityType as string,
                       EntityId: entityId as number,
                       };   
            _options = webapi_options;
        }
        return this._GetAllForeignKeysOnEntity( _request, _options );
    }

    /*
     * Gets a ForeignDevice object.
     * @param foreignDeviceId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single ForeignDevice
     */
    public async GetForeignDevice(foreignDeviceId: number, options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ForeignDevice >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetForeignDevice?foreignDeviceId=" + foreignDeviceId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ForeignDevice_From( response.data );               
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    private async _SaveForeignDevice(request: carriers.ForeignSystem_SaveForeignDeviceRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ForeignDevice >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SaveForeignDevice", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ForeignDevice = converters.Create_ForeignDevice_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Saves a foreign device for an foreign application
     * @param request - ForeignDevice, ApplicationName
     * @returns Returns the saved foreign device
     */
    public async SaveForeignDevice(request: carriers.ForeignSystem_SaveForeignDeviceRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice >;

    /**
     * Saves a foreign device for an foreign application
     * @param foreignDevice - Foreign device to save
     * @param applicationName - The name of the foreign application.
     * @returns Returns the saved foreign device
     */
    public async SaveForeignDevice(foreignDevice: carriers.ForeignDevice, applicationName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice >;

    public async SaveForeignDevice(foreignDevice:carriers.ForeignDevice|carriers.ForeignSystem_SaveForeignDeviceRequest, applicationName?:string|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignDevice > {
        let _request : carriers.ForeignSystem_SaveForeignDeviceRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = foreignDevice;
        if( typeof( first ) === "object" && first && ( typeof(first.ForeignDevice)!='undefined' || typeof(first.ApplicationName)!='undefined' ) )
        {
            _request = foreignDevice as carriers.ForeignSystem_SaveForeignDeviceRequest;
            _options = applicationName as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ForeignDevice: foreignDevice as carriers.ForeignDevice,
                       ApplicationName: applicationName as string,
                       };   
            _options = webapi_options;
        }
        return this._SaveForeignDevice( _request, _options );
    }


    private async _DeleteForeignDevice(request: carriers.ForeignSystem_DeleteForeignDeviceRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("DeleteForeignDevice", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Deletes a foreign device from an application
     * @param request - ForeignDevice, ApplicationName
     * @returns 
     */
    public async DeleteForeignDevice(request: carriers.ForeignSystem_DeleteForeignDeviceRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Deletes a foreign device from an application
     * @param foreignDevice - foreign device to delete
     * @param applicationName - Name of application to delete from
     * @returns 
     */
    public async DeleteForeignDevice(foreignDevice: carriers.ForeignDevice, applicationName: string, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async DeleteForeignDevice(foreignDevice:carriers.ForeignDevice|carriers.ForeignSystem_DeleteForeignDeviceRequest, applicationName?:string|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.ForeignSystem_DeleteForeignDeviceRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = foreignDevice;
        if( typeof( first ) === "object" && first && ( typeof(first.ForeignDevice)!='undefined' || typeof(first.ApplicationName)!='undefined' ) )
        {
            _request = foreignDevice as carriers.ForeignSystem_DeleteForeignDeviceRequest;
            _options = applicationName as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ForeignDevice: foreignDevice as carriers.ForeignDevice,
                       ApplicationName: applicationName as string,
                       };   
            _options = webapi_options;
        }
        return this._DeleteForeignDevice( _request, _options );
    }


    private async _DeleteForeignKey(request: carriers.ForeignSystem_DeleteForeignKeyRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("DeleteForeignKey", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Deletes all specified occurrences of a key, belonging to the ForeignApp and ForeignDevice, table and record specified. Specifying a blank table name will delete ALL keys of the given name; specifying a recordId of 0 will delete ALL keys of the given name for the given table.
     * @param request - ForeignKey, ApplicationName, DeviceName, DeviceIdentifier, TableName, RecordId
     * @returns This method has no return value
     */
    public async DeleteForeignKey(request: carriers.ForeignSystem_DeleteForeignKeyRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Deletes all specified occurrences of a key, belonging to the ForeignApp and ForeignDevice, table and record specified. Specifying a blank table name will delete ALL keys of the given name; specifying a recordId of 0 will delete ALL keys of the given name for the given table.
     * @param foreignKey - Key name to delete.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param deviceIdentifier - The device identifier. Optional if device identifier is not used.
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.<p/>Use an empty string to delete ALL keys that otherwise match; this may be dangerous and can take a long time if there are many items to delete.
     * @param recordId - Id of record that this key refers to. If the table name was blank, then this parameter must be 0. It can also be 0 to mean that the foreign key record was not bound to any particular record of the target table.<p/>Specifying a zero recordId will remove the recordId restriction and delete all keys that otherwise match.
     * @returns This method has no return value
     */
    public async DeleteForeignKey(foreignKey: carriers.ForeignKey, applicationName: string, deviceName: string, deviceIdentifier: string, tableName: string, recordId: number, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async DeleteForeignKey(foreignKey:carriers.ForeignKey|carriers.ForeignSystem_DeleteForeignKeyRequest, applicationName?:string|base.WebApiRequestOptions, deviceName?:string, deviceIdentifier?:string, tableName?:string, recordId?:number, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.ForeignSystem_DeleteForeignKeyRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = foreignKey;
        if( typeof( first ) === "object" && first && ( typeof(first.ForeignKey)!='undefined' || typeof(first.ApplicationName)!='undefined' || typeof(first.DeviceName)!='undefined' || typeof(first.DeviceIdentifier)!='undefined' || typeof(first.TableName)!='undefined' || typeof(first.RecordId)!='undefined' ) )
        {
            _request = foreignKey as carriers.ForeignSystem_DeleteForeignKeyRequest;
            _options = applicationName as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ForeignKey: foreignKey as carriers.ForeignKey,
                       ApplicationName: applicationName as string,
                       DeviceName: deviceName as string,
                       DeviceIdentifier: deviceIdentifier as string,
                       TableName: tableName as string,
                       RecordId: recordId as number,
                       };   
            _options = webapi_options;
        }
        return this._DeleteForeignKey( _request, _options );
    }


    private async _GetDeviceKeys(request: carriers.ForeignSystem_GetDeviceKeysRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ForeignKey[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetDeviceKeys", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ForeignKey[] = converters.Create_ForeignKeyArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Returns all ForeignKeys that belong to a device.
     * @param request - ApplicationName, DeviceName
     * @returns Array of all ForeignKeys in the ForeignDevice.
     */
    public async GetDeviceKeys(request: carriers.ForeignSystem_GetDeviceKeysRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey[] >;

    /**
     * Returns all ForeignKeys that belong to a device.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @returns Array of all ForeignKeys in the ForeignDevice.
     */
    public async GetDeviceKeys(applicationName: string, deviceName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey[] >;

    public async GetDeviceKeys(applicationName:string|carriers.ForeignSystem_GetDeviceKeysRequest, deviceName?:string|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey[] > {
        let _request : carriers.ForeignSystem_GetDeviceKeysRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = applicationName;
        if( typeof( first ) === "object" && first && ( typeof(first.ApplicationName)!='undefined' || typeof(first.DeviceName)!='undefined' ) )
        {
            _request = applicationName as carriers.ForeignSystem_GetDeviceKeysRequest;
            _options = deviceName as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ApplicationName: applicationName as string,
                       DeviceName: deviceName as string,
                       };   
            _options = webapi_options;
        }
        return this._GetDeviceKeys( _request, _options );
    }


    private async _GetApplicationKeys(request: carriers.ForeignSystem_GetApplicationKeysRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ForeignKey[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetApplicationKeys", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ForeignKey[] = converters.Create_ForeignKeyArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Returns all ForeignKeys that belong to an application.
     * @param request - ApplicationName
     * @returns Array of all ForeignKeys in the ForeignApp.
     */
    public async GetApplicationKeys(request: carriers.ForeignSystem_GetApplicationKeysRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey[] >;

    /**
     * Returns all ForeignKeys that belong to an application.
     * @param applicationName - The name of the foreign application.
     * @returns Array of all ForeignKeys in the ForeignApp.
     */
    public async GetApplicationKeys(applicationName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey[] >;

    public async GetApplicationKeys(applicationName:string|carriers.ForeignSystem_GetApplicationKeysRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey[] > {
        let _request : carriers.ForeignSystem_GetApplicationKeysRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = applicationName;
        if( typeof( first ) === "object" && first && ( typeof(first.ApplicationName)!='undefined' ) )
        {
            _request = applicationName as carriers.ForeignSystem_GetApplicationKeysRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ApplicationName: applicationName as string,
                       };   
            _options = webapi_options;
        }
        return this._GetApplicationKeys( _request, _options );
    }


    private async _GetDeviceKeysOnDeviceIdentifier(request: carriers.ForeignSystem_GetDeviceKeysOnDeviceIdentifierRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ForeignKey[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetDeviceKeysOnDeviceIdentifier", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ForeignKey[] = converters.Create_ForeignKeyArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Returns all ForeignKeys that belong to a device with a given deviceIdentifier.
     * @param request - ApplicationName, DeviceName, DeviceIdentifier
     * @returns Array of all ForeignKeys in the ForeignDevice that belong to the DeviceIdentifier.
     */
    public async GetDeviceKeysOnDeviceIdentifier(request: carriers.ForeignSystem_GetDeviceKeysOnDeviceIdentifierRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey[] >;

    /**
     * Returns all ForeignKeys that belong to a device with a given deviceIdentifier.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param deviceIdentifier - Identifier for a unique grouping of keys within a device.
     * @returns Array of all ForeignKeys in the ForeignDevice that belong to the DeviceIdentifier.
     */
    public async GetDeviceKeysOnDeviceIdentifier(applicationName: string, deviceName: string, deviceIdentifier: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey[] >;

    public async GetDeviceKeysOnDeviceIdentifier(applicationName:string|carriers.ForeignSystem_GetDeviceKeysOnDeviceIdentifierRequest, deviceName?:string|base.WebApiRequestOptions, deviceIdentifier?:string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey[] > {
        let _request : carriers.ForeignSystem_GetDeviceKeysOnDeviceIdentifierRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = applicationName;
        if( typeof( first ) === "object" && first && ( typeof(first.ApplicationName)!='undefined' || typeof(first.DeviceName)!='undefined' || typeof(first.DeviceIdentifier)!='undefined' ) )
        {
            _request = applicationName as carriers.ForeignSystem_GetDeviceKeysOnDeviceIdentifierRequest;
            _options = deviceName as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ApplicationName: applicationName as string,
                       DeviceName: deviceName as string,
                       DeviceIdentifier: deviceIdentifier as string,
                       };   
            _options = webapi_options;
        }
        return this._GetDeviceKeysOnDeviceIdentifier( _request, _options );
    }


    private async _GetDeviceKeysOnDeviceIdentifierTable(request: carriers.ForeignSystem_GetDeviceKeysOnDeviceIdentifierTableRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ForeignKey[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetDeviceKeysOnDeviceIdentifierTable", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ForeignKey[] = converters.Create_ForeignKeyArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Returns all ForeignKeys that belong to a device with a given deviceIdentifier and table name.
     * @param request - ApplicationName, DeviceName, DeviceIdentifier, TableName
     * @returns Array of all ForeignKeys in the ForeignDevice that belong to the DeviceIdentifier.
     */
    public async GetDeviceKeysOnDeviceIdentifierTable(request: carriers.ForeignSystem_GetDeviceKeysOnDeviceIdentifierTableRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey[] >;

    /**
     * Returns all ForeignKeys that belong to a device with a given deviceIdentifier and table name.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param deviceIdentifier - Identifier for a unique grouping of keys within a device.
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.<p/>Use an empty string to indicate that your key is not bound to any specific table.
     * @returns Array of all ForeignKeys in the ForeignDevice that belong to the DeviceIdentifier.
     */
    public async GetDeviceKeysOnDeviceIdentifierTable(applicationName: string, deviceName: string, deviceIdentifier: string, tableName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey[] >;

    public async GetDeviceKeysOnDeviceIdentifierTable(applicationName:string|carriers.ForeignSystem_GetDeviceKeysOnDeviceIdentifierTableRequest, deviceName?:string|base.WebApiRequestOptions, deviceIdentifier?:string, tableName?:string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey[] > {
        let _request : carriers.ForeignSystem_GetDeviceKeysOnDeviceIdentifierTableRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = applicationName;
        if( typeof( first ) === "object" && first && ( typeof(first.ApplicationName)!='undefined' || typeof(first.DeviceName)!='undefined' || typeof(first.DeviceIdentifier)!='undefined' || typeof(first.TableName)!='undefined' ) )
        {
            _request = applicationName as carriers.ForeignSystem_GetDeviceKeysOnDeviceIdentifierTableRequest;
            _options = deviceName as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ApplicationName: applicationName as string,
                       DeviceName: deviceName as string,
                       DeviceIdentifier: deviceIdentifier as string,
                       TableName: tableName as string,
                       };   
            _options = webapi_options;
        }
        return this._GetDeviceKeysOnDeviceIdentifierTable( _request, _options );
    }


    private async _GetDeviceKeysOnDeviceIdentifierTableRecordId(request: carriers.ForeignSystem_GetDeviceKeysOnDeviceIdentifierTableRecordIdRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ForeignKey[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetDeviceKeysOnDeviceIdentifierTableRecordId", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ForeignKey[] = converters.Create_ForeignKeyArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Returns all ForeignKeys that belong to a device with a given deviceIdentifier and table name, as well as record id.
     * @param request - ApplicationName, DeviceName, DeviceIdentifier, TableName, RecordId
     * @returns Array of all ForeignKeys in the ForeignDevice that match the criteria
     */
    public async GetDeviceKeysOnDeviceIdentifierTableRecordId(request: carriers.ForeignSystem_GetDeviceKeysOnDeviceIdentifierTableRecordIdRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey[] >;

    /**
     * Returns all ForeignKeys that belong to a device with a given deviceIdentifier and table name, as well as record id.
     * @param applicationName - The name of the foreign application.
     * @param deviceName - The name of the foreign device.
     * @param deviceIdentifier - Identifier for a unique grouping of keys within a device.
     * @param tableName - Table name, transformed to and from numeric table id by the service layer.<p/>Use an empty string to indicate that your key is not bound to any specific table.
     * @param recordId - Id of record that this key refers to. If the table name was blank, then this parameter must be 0. It can also be 0 to mean that the foreign key record was not bound to any particular record of the target table.
     * @returns Array of all ForeignKeys in the ForeignDevice that match the criteria
     */
    public async GetDeviceKeysOnDeviceIdentifierTableRecordId(applicationName: string, deviceName: string, deviceIdentifier: string, tableName: string, recordId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey[] >;

    public async GetDeviceKeysOnDeviceIdentifierTableRecordId(applicationName:string|carriers.ForeignSystem_GetDeviceKeysOnDeviceIdentifierTableRecordIdRequest, deviceName?:string|base.WebApiRequestOptions, deviceIdentifier?:string, tableName?:string, recordId?:number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ForeignKey[] > {
        let _request : carriers.ForeignSystem_GetDeviceKeysOnDeviceIdentifierTableRecordIdRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = applicationName;
        if( typeof( first ) === "object" && first && ( typeof(first.ApplicationName)!='undefined' || typeof(first.DeviceName)!='undefined' || typeof(first.DeviceIdentifier)!='undefined' || typeof(first.TableName)!='undefined' || typeof(first.RecordId)!='undefined' ) )
        {
            _request = applicationName as carriers.ForeignSystem_GetDeviceKeysOnDeviceIdentifierTableRecordIdRequest;
            _options = deviceName as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ApplicationName: applicationName as string,
                       DeviceName: deviceName as string,
                       DeviceIdentifier: deviceIdentifier as string,
                       TableName: tableName as string,
                       RecordId: recordId as number,
                       };   
            _options = webapi_options;
        }
        return this._GetDeviceKeysOnDeviceIdentifierTableRecordId( _request, _options );
    }

    } // class v1ForeignSystemAgentController 


