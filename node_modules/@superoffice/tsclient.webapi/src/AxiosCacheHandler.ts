/**
 * Cache handler for WebApi.
 */
export class AxiosCache {
	private static _cache = {};
	private static CACHE_INTERVAL = 0.2; // minutes

	/**
	 * duration in minutes
	 */
	public static store(key: string, value: any, duration: number = AxiosCache.CACHE_INTERVAL) {
		if (AxiosCache.isValid(key).isValid) {
			return;
		}
		const dateStamp = Date.now() + new Date(duration * 60 * 1000).getTime();
		const finalValue = { value: JSON.stringify(value), dateStamp: dateStamp }; //`${value}${AxiosCache.SEPARATOR}${dateStamp.toString()}`;

		const _axioCache = this.getCache();
		_axioCache[key] = finalValue;
		this.persistCache(_axioCache);
	}

	// Returns true if an object has been stored using the store method
	// and have yet not expired
	public static isValid(key: string): IsValidResponse {
		const _axioCache = this.getCache();

		if (!_axioCache[key]) {
			return {
				isValid: false
			};
		}
		const value = _axioCache[key];
		const timestamp = value.dateStamp; // Number(values[1]);
		if (Number.isNaN(timestamp)) {
			return {
				isValid: false
			};
		}
		const date = new Date(timestamp);
		if (date.toString() === "Invalid Date") {
			return {
				isValid: false
			};
		}
		if (date.getTime() > Date.now()) {
			return {
				isValid: true,
				value: JSON.parse(value.value)
			};
		}

		delete _axioCache[key];
		this.persistCache(_axioCache);
		return {
			isValid: false
		};
	}

	private static getCache() {
		return this._cache;
	}
	private static persistCache(_axiosCache: any) {
		this._cache = _axiosCache;
	}

	public static clear() {
		this._cache = {};
	}
}
export interface IsValidResponse {
	isValid: boolean;
	value?: string;
}
