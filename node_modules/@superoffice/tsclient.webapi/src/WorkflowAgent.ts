// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>


/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
//
// File:          WebApi/WorkflowAgent.ts
//
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------

import { AxiosRequestConfig } from 'axios';
import * as moment from 'moment';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
import * as converters from './Converters';
import { FromBase64ToString, ToBase64 } from './Base64';

/**
 * Agent lets you configure workflow automation
 */
export interface IWorkflowAgent {
    CreateDefaultEmailFlow(): Promise< carriers.EmailFlow >;
    SaveEmailFlow(entity: carriers.EmailFlow) : Promise< carriers.EmailFlow >;
    DeleteEmailFlow(EmailFlowId: number) : Promise<void>;
    CreateDefaultWorkflowFilter(): Promise< carriers.WorkflowFilter >;
    CreateDefaultWorkflowGoal(): Promise< carriers.WorkflowGoal >;
    SaveWorkflowGoal(entity: carriers.WorkflowGoal) : Promise< carriers.WorkflowGoal >;
    DeleteWorkflowGoal(WorkflowGoalId: number) : Promise<void>;
    CreateDefaultWorkflowStepOption(): Promise< carriers.WorkflowStepOption >;
    SaveWorkflowStepOption(entity: carriers.WorkflowStepOption) : Promise< carriers.WorkflowStepOption >;
    DeleteWorkflowStepOption(WorkflowStepOptionId: number) : Promise<void>;
    CreateDefaultWorkflowTrigger(): Promise< carriers.WorkflowTrigger >;
    SaveWorkflowTrigger(entity: carriers.WorkflowTrigger) : Promise< carriers.WorkflowTrigger >;
    DeleteWorkflowTrigger(WorkflowTriggerId: number) : Promise<void>;
    GetEmailFlow(emailFlowId: number) :  Promise< carriers.EmailFlow >;
    TryAddPersonsToEmailFlow(request: carriers.Workflow_TryAddPersonsToEmailFlowRequest, webapi_options?:base.WebApiRequestOptions) : Promise< boolean[] >;
    TryAddPersonsToEmailFlow(emailFlowId: number, personIds: number[], webapi_options?:base.WebApiRequestOptions) : Promise< boolean[] >;
    CreateEmailFlowContent(request: carriers.Workflow_CreateEmailFlowContentRequest, webapi_options?:base.WebApiRequestOptions) : Promise< number >;
    CreateEmailFlowContent(contentName: string, webapi_options?:base.WebApiRequestOptions) : Promise< number >;
    ConnectEmailFlowContent(request: carriers.Workflow_ConnectEmailFlowContentRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    ConnectEmailFlowContent(emailFlowId: number, messageId: number, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    GetWorkflowGoal(workflowGoalId: number) :  Promise< carriers.WorkflowGoal >;
    GetWorkflowStep(request: carriers.Workflow_GetWorkflowStepRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.WorkflowStepBase >;
    GetWorkflowStep(workflowStepId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.WorkflowStepBase >;
    AddAfterWorkflowStep(request: carriers.Workflow_AddAfterWorkflowStepRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.WorkflowStepBase >;
    AddAfterWorkflowStep(workflowStepId: number, subStep: carriers.WorkflowStepBase, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.WorkflowStepBase >;
    CreateDefaultWorkflowStepFromType(request: carriers.Workflow_CreateDefaultWorkflowStepFromTypeRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.WorkflowStepBase >;
    CreateDefaultWorkflowStepFromType(stepType: enums.WorkflowStepType, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.WorkflowStepBase >;
    GetWorkflowStepOption(workflowStepOptionId: number) :  Promise< carriers.WorkflowStepOption >;
    GetWorkflowTrigger(workflowTriggerId: number) :  Promise< carriers.WorkflowTrigger >;
} // interface IWorkflowAgent




/**
 * Agent lets you configure workflow automation
 */
export class WorkflowAgent extends base.WebApiBase implements IWorkflowAgent {
    constructor(baseUrl?: string, languageCode?:string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config:AxiosRequestConfig, languageCode?:string, cultureCode?: string);
    constructor(options: base.WebApiOptions);

    constructor(baseUrlOrOptions: string|base.WebApiOptions|undefined,
                langOrconfigOrRM?: string|base.ResourceParsing|AxiosRequestConfig|any, 
                langOrResourceOrRM?:string|base.ResourceParsing|any, 
                cultureCode?: string, 
                ) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Workflow/";
        super(options);
    }



    /**
     * Set default values into a new EmailFlow.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    public async CreateDefaultEmailFlow(options?:base.WebApiRequestOptions) : Promise< carriers.EmailFlow > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.EmailFlow >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultEmailFlow", null, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.EmailFlow = converters.Create_EmailFlow_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing EmailFlow or creates a new EmailFlow if the id parameter is empty
     * @param entity - The EmailFlow to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated EmailFlow
     */
    public async SaveEmailFlow(entity: carriers.EmailFlow, options?:base.WebApiRequestOptions) : Promise< carriers.EmailFlow > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.EmailFlow >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveEmailFlow", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.EmailFlow = converters.Create_EmailFlow_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /*
     * Deletes the EmailFlow
     * @param EmailFlowId - The id of the EmailFlow to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    public async DeleteEmailFlow(EmailFlowId: number, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteEmailFlow?EmailFlowId=" + EmailFlowId, null, config );
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /**
     * Set default values into a new WorkflowFilter.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    public async CreateDefaultWorkflowFilter(options?:base.WebApiRequestOptions) : Promise< carriers.WorkflowFilter > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.WorkflowFilter >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultWorkflowFilter", null, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.WorkflowFilter = converters.Create_WorkflowFilter_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /**
     * Set default values into a new WorkflowGoal.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    public async CreateDefaultWorkflowGoal(options?:base.WebApiRequestOptions) : Promise< carriers.WorkflowGoal > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.WorkflowGoal >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultWorkflowGoal", null, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.WorkflowGoal = converters.Create_WorkflowGoal_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing WorkflowGoal or creates a new WorkflowGoal if the id parameter is empty
     * @param entity - The WorkflowGoal to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated WorkflowGoal
     */
    public async SaveWorkflowGoal(entity: carriers.WorkflowGoal, options?:base.WebApiRequestOptions) : Promise< carriers.WorkflowGoal > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.WorkflowGoal >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveWorkflowGoal", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.WorkflowGoal = converters.Create_WorkflowGoal_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /*
     * Deletes the WorkflowGoal
     * @param WorkflowGoalId - The id of the WorkflowGoal to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    public async DeleteWorkflowGoal(WorkflowGoalId: number, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteWorkflowGoal?WorkflowGoalId=" + WorkflowGoalId, null, config );
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /**
     * Set default values into a new WorkflowStepOption.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    public async CreateDefaultWorkflowStepOption(options?:base.WebApiRequestOptions) : Promise< carriers.WorkflowStepOption > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.WorkflowStepOption >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultWorkflowStepOption", null, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.WorkflowStepOption = converters.Create_WorkflowStepOption_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing WorkflowStepOption or creates a new WorkflowStepOption if the id parameter is empty
     * @param entity - The WorkflowStepOption to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated WorkflowStepOption
     */
    public async SaveWorkflowStepOption(entity: carriers.WorkflowStepOption, options?:base.WebApiRequestOptions) : Promise< carriers.WorkflowStepOption > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.WorkflowStepOption >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveWorkflowStepOption", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.WorkflowStepOption = converters.Create_WorkflowStepOption_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /*
     * Deletes the WorkflowStepOption
     * @param WorkflowStepOptionId - The id of the WorkflowStepOption to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    public async DeleteWorkflowStepOption(WorkflowStepOptionId: number, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteWorkflowStepOption?WorkflowStepOptionId=" + WorkflowStepOptionId, null, config );
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /**
     * Set default values into a new WorkflowTrigger.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    public async CreateDefaultWorkflowTrigger(options?:base.WebApiRequestOptions) : Promise< carriers.WorkflowTrigger > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.WorkflowTrigger >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultWorkflowTrigger", null, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.WorkflowTrigger = converters.Create_WorkflowTrigger_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing WorkflowTrigger or creates a new WorkflowTrigger if the id parameter is empty
     * @param entity - The WorkflowTrigger to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated WorkflowTrigger
     */
    public async SaveWorkflowTrigger(entity: carriers.WorkflowTrigger, options?:base.WebApiRequestOptions) : Promise< carriers.WorkflowTrigger > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.WorkflowTrigger >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveWorkflowTrigger", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.WorkflowTrigger = converters.Create_WorkflowTrigger_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /*
     * Deletes the WorkflowTrigger
     * @param WorkflowTriggerId - The id of the WorkflowTrigger to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    public async DeleteWorkflowTrigger(WorkflowTriggerId: number, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteWorkflowTrigger?WorkflowTriggerId=" + WorkflowTriggerId, null, config );
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Gets a EmailFlow object.
     * @param emailFlowId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single EmailFlow
     */
    public async GetEmailFlow(emailFlowId: number, options?:base.WebApiRequestOptions) : Promise< carriers.EmailFlow > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.EmailFlow >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetEmailFlow?emailFlowId=" + emailFlowId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_EmailFlow_From( response.data );               
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    private async _TryAddPersonsToEmailFlow(request: carriers.Workflow_TryAddPersonsToEmailFlowRequest, options?:base.WebApiRequestOptions) : Promise< boolean[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< boolean[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("TryAddPersonsToEmailFlow", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : boolean[] = response.data as boolean[];
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Try to add a participant to the EmailFlow
     * @param request - EmailFlowId, PersonIds
     * @returns True if the corresponding participant was successfully added, false if it could not be added because of filter criteria or other reason
     */
    public async TryAddPersonsToEmailFlow(request: carriers.Workflow_TryAddPersonsToEmailFlowRequest, webapi_options?:base.WebApiRequestOptions) : Promise< boolean[] >;

    /**
     * Try to add a participant to the EmailFlow
     * @param emailFlowId - Primary key of EmailFlow
     * @param personIds - Array of Person Ids
     * @returns True if the corresponding participant was successfully added, false if it could not be added because of filter criteria or other reason
     */
    public async TryAddPersonsToEmailFlow(emailFlowId: number, personIds: number[], webapi_options?:base.WebApiRequestOptions) : Promise< boolean[] >;

    public async TryAddPersonsToEmailFlow(emailFlowId:number|carriers.Workflow_TryAddPersonsToEmailFlowRequest, personIds?:number[]|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< boolean[] > {
        let _request : carriers.Workflow_TryAddPersonsToEmailFlowRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = emailFlowId;
        if( typeof( first ) === "object" && first && ( typeof(first.EmailFlowId)!='undefined' || typeof(first.PersonIds)!='undefined' ) )
        {
            _request = emailFlowId as carriers.Workflow_TryAddPersonsToEmailFlowRequest;
            _options = personIds as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       EmailFlowId: emailFlowId as number,
                       PersonIds: personIds as number[],
                       };   
            _options = webapi_options;
        }
        return this._TryAddPersonsToEmailFlow( _request, _options );
    }


    private async _CreateEmailFlowContent(request: carriers.Workflow_CreateEmailFlowContentRequest, options?:base.WebApiRequestOptions) : Promise< number > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< number >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("CreateEmailFlowContent", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : number = response.data as number;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Create content to an email flow
     * @param request - ContentName
     * @returns Id of shipment created
     */
    public async CreateEmailFlowContent(request: carriers.Workflow_CreateEmailFlowContentRequest, webapi_options?:base.WebApiRequestOptions) : Promise< number >;

    /**
     * Create content to an email flow
     * @param contentName - The name of the content created
     * @returns Id of shipment created
     */
    public async CreateEmailFlowContent(contentName: string, webapi_options?:base.WebApiRequestOptions) : Promise< number >;

    public async CreateEmailFlowContent(contentName:string|carriers.Workflow_CreateEmailFlowContentRequest, webapi_options?:base.WebApiRequestOptions) : Promise< number > {
        let _request : carriers.Workflow_CreateEmailFlowContentRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = contentName;
        if( typeof( first ) === "object" && first && ( typeof(first.ContentName)!='undefined' ) )
        {
            _request = contentName as carriers.Workflow_CreateEmailFlowContentRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ContentName: contentName as string,
                       };   
            _options = webapi_options;
        }
        return this._CreateEmailFlowContent( _request, _options );
    }


    private async _ConnectEmailFlowContent(request: carriers.Workflow_ConnectEmailFlowContentRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ConnectEmailFlowContent", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Link any SMessage to the email flow. The SMessage (and any related SShipment etc) should probably not be used/visible elsewhere.
     * @param request - EmailFlowId, MessageId
     * @returns 
     */
    public async ConnectEmailFlowContent(request: carriers.Workflow_ConnectEmailFlowContentRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Link any SMessage to the email flow. The SMessage (and any related SShipment etc) should probably not be used/visible elsewhere.
     * @param emailFlowId - The EmailFlow to connect the message to.
     * @param messageId - The s_message to connect to the flow. A shipment, form or flow may be connected to that s_message.
     * @returns 
     */
    public async ConnectEmailFlowContent(emailFlowId: number, messageId: number, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async ConnectEmailFlowContent(emailFlowId:number|carriers.Workflow_ConnectEmailFlowContentRequest, messageId?:number|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.Workflow_ConnectEmailFlowContentRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = emailFlowId;
        if( typeof( first ) === "object" && first && ( typeof(first.EmailFlowId)!='undefined' || typeof(first.MessageId)!='undefined' ) )
        {
            _request = emailFlowId as carriers.Workflow_ConnectEmailFlowContentRequest;
            _options = messageId as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       EmailFlowId: emailFlowId as number,
                       MessageId: messageId as number,
                       };   
            _options = webapi_options;
        }
        return this._ConnectEmailFlowContent( _request, _options );
    }

    /*
     * Gets a WorkflowGoal object.
     * @param workflowGoalId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single WorkflowGoal
     */
    public async GetWorkflowGoal(workflowGoalId: number, options?:base.WebApiRequestOptions) : Promise< carriers.WorkflowGoal > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.WorkflowGoal >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetWorkflowGoal?workflowGoalId=" + workflowGoalId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_WorkflowGoal_From( response.data );               
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    private async _GetWorkflowStep(request: carriers.Workflow_GetWorkflowStepRequest, options?:base.WebApiRequestOptions) : Promise< carriers.WorkflowStepBase > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.WorkflowStepBase >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetWorkflowStep", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.WorkflowStepBase = converters.Create_WorkflowStepBase_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Get Workflowstep by ID
     * @param request - WorkflowStepId
     * @returns The Workflow step
     */
    public async GetWorkflowStep(request: carriers.Workflow_GetWorkflowStepRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.WorkflowStepBase >;

    /**
     * Get Workflowstep by ID
     * @param workflowStepId - Primary key of WorkflowStep
     * @returns The Workflow step
     */
    public async GetWorkflowStep(workflowStepId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.WorkflowStepBase >;

    public async GetWorkflowStep(workflowStepId:number|carriers.Workflow_GetWorkflowStepRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.WorkflowStepBase > {
        let _request : carriers.Workflow_GetWorkflowStepRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = workflowStepId;
        if( typeof( first ) === "object" && first && ( typeof(first.WorkflowStepId)!='undefined' ) )
        {
            _request = workflowStepId as carriers.Workflow_GetWorkflowStepRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       WorkflowStepId: workflowStepId as number,
                       };   
            _options = webapi_options;
        }
        return this._GetWorkflowStep( _request, _options );
    }


    private async _AddAfterWorkflowStep(request: carriers.Workflow_AddAfterWorkflowStepRequest, options?:base.WebApiRequestOptions) : Promise< carriers.WorkflowStepBase > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.WorkflowStepBase >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("AddAfterWorkflowStep", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.WorkflowStepBase = converters.Create_WorkflowStepBase_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Add another step (and any of its substeps) after the given step id (which must exist), and move any following steps in the workflow further down the line.
     * @param request - WorkflowStepId, SubStep
     * @returns The added step
     */
    public async AddAfterWorkflowStep(request: carriers.Workflow_AddAfterWorkflowStepRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.WorkflowStepBase >;

    /**
     * Add another step (and any of its substeps) after the given step id (which must exist), and move any following steps in the workflow further down the line.
     * @param workflowStepId - Primary key of WorkflowStep
     * @param subStep - The step to be inserted after given step id.
     * @returns The added step
     */
    public async AddAfterWorkflowStep(workflowStepId: number, subStep: carriers.WorkflowStepBase, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.WorkflowStepBase >;

    public async AddAfterWorkflowStep(workflowStepId:number|carriers.Workflow_AddAfterWorkflowStepRequest, subStep?:carriers.WorkflowStepBase|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.WorkflowStepBase > {
        let _request : carriers.Workflow_AddAfterWorkflowStepRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = workflowStepId;
        if( typeof( first ) === "object" && first && ( typeof(first.WorkflowStepId)!='undefined' || typeof(first.SubStep)!='undefined' ) )
        {
            _request = workflowStepId as carriers.Workflow_AddAfterWorkflowStepRequest;
            _options = subStep as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       WorkflowStepId: workflowStepId as number,
                       SubStep: subStep as carriers.WorkflowStepBase,
                       };   
            _options = webapi_options;
        }
        return this._AddAfterWorkflowStep( _request, _options );
    }


    private async _CreateDefaultWorkflowStepFromType(request: carriers.Workflow_CreateDefaultWorkflowStepFromTypeRequest, options?:base.WebApiRequestOptions) : Promise< carriers.WorkflowStepBase > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.WorkflowStepBase >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("CreateDefaultWorkflowStepFromType", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.WorkflowStepBase = converters.Create_WorkflowStepBase_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Creates a new carrier from the step type given, with the right kind of properties, defaults set.
     * @param request - StepType
     * @returns 
     */
    public async CreateDefaultWorkflowStepFromType(request: carriers.Workflow_CreateDefaultWorkflowStepFromTypeRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.WorkflowStepBase >;

    /**
     * Creates a new carrier from the step type given, with the right kind of properties, defaults set.
     * @param stepType - Step type to create
     * @returns 
     */
    public async CreateDefaultWorkflowStepFromType(stepType: enums.WorkflowStepType, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.WorkflowStepBase >;

    public async CreateDefaultWorkflowStepFromType(stepType:enums.WorkflowStepType|carriers.Workflow_CreateDefaultWorkflowStepFromTypeRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.WorkflowStepBase > {
        let _request : carriers.Workflow_CreateDefaultWorkflowStepFromTypeRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = stepType;
        if( typeof( first ) === "object" && first && ( typeof(first.StepType)!='undefined' ) )
        {
            _request = stepType as carriers.Workflow_CreateDefaultWorkflowStepFromTypeRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       StepType: stepType as enums.WorkflowStepType,
                       };   
            _options = webapi_options;
        }
        return this._CreateDefaultWorkflowStepFromType( _request, _options );
    }

    /*
     * Gets a WorkflowStepOption object.
     * @param workflowStepOptionId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single WorkflowStepOption
     */
    public async GetWorkflowStepOption(workflowStepOptionId: number, options?:base.WebApiRequestOptions) : Promise< carriers.WorkflowStepOption > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.WorkflowStepOption >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetWorkflowStepOption?workflowStepOptionId=" + workflowStepOptionId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_WorkflowStepOption_From( response.data );               
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /*
     * Gets a WorkflowTrigger object.
     * @param workflowTriggerId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single WorkflowTrigger
     */
    public async GetWorkflowTrigger(workflowTriggerId: number, options?:base.WebApiRequestOptions) : Promise< carriers.WorkflowTrigger > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.WorkflowTrigger >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetWorkflowTrigger?workflowTriggerId=" + workflowTriggerId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_WorkflowTrigger_From( response.data );               
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    } // class v1WorkflowAgentController 


