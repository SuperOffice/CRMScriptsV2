// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>


/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
//
// File:          WebApi/NumberAllocationAgent.ts
//
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------

import { AxiosRequestConfig } from 'axios';
import * as moment from 'moment';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
import * as converters from './Converters';
import { FromBase64ToString, ToBase64 } from './Base64';

/**
 * This agent can be used to manage number allocation
 */
export interface INumberAllocationAgent {
    CreateDefaultRefCountEntity(): Promise< carriers.RefCountEntity >;
    SaveRefCountEntity(entity: carriers.RefCountEntity) : Promise< carriers.RefCountEntity >;
    DeleteRefCountEntity(RefCountEntityId: number) : Promise<void>;
    GetRefCountEntity(refCountEntityId: number) :  Promise< carriers.RefCountEntity >;
    SaveDefaultNumbering(request: carriers.NumberAllocation_SaveDefaultNumberingRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    SaveDefaultNumbering(refCountEntity: carriers.RefCountEntity, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    GetNumberEachTemplate(webapi_options?:base.WebApiRequestOptions) : Promise< boolean >;
    SetNumberEachTemplate(request: carriers.NumberAllocation_SetNumberEachTemplateRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    SetNumberEachTemplate(setValue: boolean, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
} // interface INumberAllocationAgent




/**
 * This agent can be used to manage number allocation
 */
export class NumberAllocationAgent extends base.WebApiBase implements INumberAllocationAgent {
    constructor(baseUrl?: string, languageCode?:string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config:AxiosRequestConfig, languageCode?:string, cultureCode?: string);
    constructor(options: base.WebApiOptions);

    constructor(baseUrlOrOptions: string|base.WebApiOptions|undefined,
                langOrconfigOrRM?: string|base.ResourceParsing|AxiosRequestConfig|any, 
                langOrResourceOrRM?:string|base.ResourceParsing|any, 
                cultureCode?: string, 
                ) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/NumberAllocation/";
        super(options);
    }



    /**
     * Set default values into a new RefCountEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    public async CreateDefaultRefCountEntity(options?:base.WebApiRequestOptions) : Promise< carriers.RefCountEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.RefCountEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultRefCountEntity", null, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.RefCountEntity = converters.Create_RefCountEntity_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing RefCountEntity or creates a new RefCountEntity if the id parameter is empty
     * @param entity - The RefCountEntity to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated RefCountEntity
     */
    public async SaveRefCountEntity(entity: carriers.RefCountEntity, options?:base.WebApiRequestOptions) : Promise< carriers.RefCountEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.RefCountEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveRefCountEntity", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.RefCountEntity = converters.Create_RefCountEntity_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /*
     * Deletes the RefCountEntity
     * @param RefCountEntityId - The id of the RefCountEntity to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    public async DeleteRefCountEntity(RefCountEntityId: number, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteRefCountEntity?RefCountEntityId=" + RefCountEntityId, null, config );
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Gets a RefCountEntity object.
     * @param refCountEntityId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single RefCountEntity
     */
    public async GetRefCountEntity(refCountEntityId: number, options?:base.WebApiRequestOptions) : Promise< carriers.RefCountEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.RefCountEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetRefCountEntity?refCountEntityId=" + refCountEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_RefCountEntity_From( response.data );               
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    private async _SaveDefaultNumbering(request: carriers.NumberAllocation_SaveDefaultNumberingRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SaveDefaultNumbering", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Saves default numbering values in preferences
     * @param request - RefCountEntity
     * @returns void
     */
    public async SaveDefaultNumbering(request: carriers.NumberAllocation_SaveDefaultNumberingRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Saves default numbering values in preferences
     * @param refCountEntity - The refCountEntity that holds the values that will be saved
     * @returns void
     */
    public async SaveDefaultNumbering(refCountEntity: carriers.RefCountEntity, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async SaveDefaultNumbering(refCountEntity:carriers.RefCountEntity|carriers.NumberAllocation_SaveDefaultNumberingRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.NumberAllocation_SaveDefaultNumberingRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = refCountEntity;
        if( typeof( first ) === "object" && first && ( typeof(first.RefCountEntity)!='undefined' ) )
        {
            _request = refCountEntity as carriers.NumberAllocation_SaveDefaultNumberingRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       RefCountEntity: refCountEntity as carriers.RefCountEntity,
                       };   
            _options = webapi_options;
        }
        return this._SaveDefaultNumbering( _request, _options );
    }


    private async _GetNumberEachTemplate( options?:base.WebApiRequestOptions) : Promise< boolean > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< boolean >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetNumberEachTemplate", undefined , config);
                base.WebApiBase.SetCompleted(options);
                const res : boolean = response.data as boolean;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    /**
     * Returns true or false if Automatically create new counters for new document templates
     * @returns Is NumberEachTemplate?
     */
    public async GetNumberEachTemplate(webapi_options?:base.WebApiRequestOptions) : Promise< boolean >
    {
        return this._GetNumberEachTemplate(webapi_options);
    }


    private async _SetNumberEachTemplate(request: carriers.NumberAllocation_SetNumberEachTemplateRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetNumberEachTemplate", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Saves true or false if Automatically create new counters for new document templates
     * @param request - SetValue
     * @returns void
     */
    public async SetNumberEachTemplate(request: carriers.NumberAllocation_SetNumberEachTemplateRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Saves true or false if Automatically create new counters for new document templates
     * @param setValue - true or false if Automatically create new counters for new document templates
     * @returns void
     */
    public async SetNumberEachTemplate(setValue: boolean, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async SetNumberEachTemplate(setValue:boolean|carriers.NumberAllocation_SetNumberEachTemplateRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.NumberAllocation_SetNumberEachTemplateRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = setValue;
        if( typeof( first ) === "object" && first && ( typeof(first.SetValue)!='undefined' ) )
        {
            _request = setValue as carriers.NumberAllocation_SetNumberEachTemplateRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       SetValue: setValue as boolean,
                       };   
            _options = webapi_options;
        }
        return this._SetNumberEachTemplate( _request, _options );
    }

    } // class v1NumberAllocationAgentController 


