// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>


/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
//
// File:          WebApi/DatabaseAgent.ts
//
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------

import { AxiosRequestConfig } from 'axios';
import * as moment from 'moment';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
import * as converters from './Converters';
import { FromBase64ToString, ToBase64 } from './Base64';

/**
 * Database schema queries and changes
 */
export interface IDatabaseAgent {
    GetStepsInDatabase(webapi_options?:base.WebApiRequestOptions) : Promise< carriers.DictionaryStepInformation[] >;
    GetStepsFromNetServerCode(webapi_options?:base.WebApiRequestOptions) : Promise< carriers.DictionaryStepInformation[] >;
} // interface IDatabaseAgent




/**
 * Database schema queries and changes
 */
export class DatabaseAgent extends base.WebApiBase implements IDatabaseAgent {
    constructor(baseUrl?: string, languageCode?:string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config:AxiosRequestConfig, languageCode?:string, cultureCode?: string);
    constructor(options: base.WebApiOptions);

    constructor(baseUrlOrOptions: string|base.WebApiOptions|undefined,
                langOrconfigOrRM?: string|base.ResourceParsing|AxiosRequestConfig|any, 
                langOrResourceOrRM?:string|base.ResourceParsing|any, 
                cultureCode?: string, 
                ) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Database/";
        super(options);
    }



    private async _GetStepsInDatabase( options?:base.WebApiRequestOptions) : Promise< carriers.DictionaryStepInformation[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.DictionaryStepInformation[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetStepsInDatabase", undefined , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.DictionaryStepInformation[] = converters.Create_DictionaryStepInformationArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    /**
     * Get information about the dictionary steps that are in the currently-loggedon database
     * @returns Array of dictionary steps in the database, listing only the highest number for each step
     */
    public async GetStepsInDatabase(webapi_options?:base.WebApiRequestOptions) : Promise< carriers.DictionaryStepInformation[] >
    {
        return this._GetStepsInDatabase(webapi_options);
    }


    private async _GetStepsFromNetServerCode( options?:base.WebApiRequestOptions) : Promise< carriers.DictionaryStepInformation[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.DictionaryStepInformation[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetStepsFromNetServerCode", undefined , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.DictionaryStepInformation[] = converters.Create_DictionaryStepInformationArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    /**
     * Get information about the dictionary steps that NetServer was generated for
     * @returns Array of dictionary steps used when NetServer was generated, listing only the highest number for each step
     */
    public async GetStepsFromNetServerCode(webapi_options?:base.WebApiRequestOptions) : Promise< carriers.DictionaryStepInformation[] >
    {
        return this._GetStepsFromNetServerCode(webapi_options);
    }

    } // class v1DatabaseAgentController 


