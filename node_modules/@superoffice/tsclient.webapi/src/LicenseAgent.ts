// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>


/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
//
// File:          WebApi/LicenseAgent.ts
//
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------

import { AxiosRequestConfig } from 'axios';
import * as moment from 'moment';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
import * as converters from './Converters';
import { FromBase64ToString, ToBase64 } from './Base64';

/**
 * License query, download, activation
 */
export interface ILicenseAgent {
    GetLicenseForAllOwnersFromDB(webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ExtendedLicenseInfo[] >;
    GetLicenseFromLicenseServer(request: carriers.License_GetLicenseFromLicenseServerRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ExtendedLicenseInfo >;
    GetLicenseFromLicenseServer(ownerName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ExtendedLicenseInfo >;
    GetModuleLicenseHistoryFromLicenseServer(request: carriers.License_GetModuleLicenseHistoryFromLicenseServerRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string >;
    GetModuleLicenseHistoryFromLicenseServer(licenseInfo: carriers.ExtendedLicenseInfo, moduleLicense: carriers.ExtendedModuleLicense, webapi_options?:base.WebApiRequestOptions) : Promise< string >;
    ValidateLicenseInfo(request: carriers.License_ValidateLicenseInfoRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseResult >;
    ValidateLicenseInfo(licenseInfo: carriers.ExtendedLicenseInfo, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseResult >;
    ActivateLicenseInfo(request: carriers.License_ActivateLicenseInfoRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseResult >;
    ActivateLicenseInfo(newLicense: carriers.ExtendedLicenseInfo, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseResult >;
    GetLicenseStatusFromLicenseServer(request: carriers.License_GetLicenseStatusFromLicenseServerRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.CheckLicenseStatusResult >;
    GetLicenseStatusFromLicenseServer(ownerName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.CheckLicenseStatusResult >;
    GetLicenseFromDB(request: carriers.License_GetLicenseFromDBRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ExtendedLicenseInfo >;
    GetLicenseFromDB(ownerName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ExtendedLicenseInfo >;
    ChangeSerialNumber(request: carriers.License_ChangeSerialNumberRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseResult >;
    ChangeSerialNumber(newCompanyName: string, newSerialNumber: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseResult >;
    GetUserLicenses(request: carriers.License_GetUserLicensesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseOwner[] >;
    GetUserLicenses(associateId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseOwner[] >;
    GetSatelliteLicenses(request: carriers.License_GetSatelliteLicensesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseOwner[] >;
    GetSatelliteLicenses(satelliteId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseOwner[] >;
    RemoveLicenseFromDB(request: carriers.License_RemoveLicenseFromDBRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseResult >;
    RemoveLicenseFromDB(moduleOwner: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseResult >;
    GetLicenseFromFile(request: carriers.License_GetLicenseFromFileRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ExtendedLicenseInfo >;
    GetLicenseFromFile(fileContent: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ExtendedLicenseInfo >;
    GetShopUrl(request: carriers.License_GetShopUrlRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string >;
    GetShopUrl(ownerName: string, webapi_options?:base.WebApiRequestOptions) : Promise< string >;
    GetUserLicensesMDOList(webapi_options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] >;
    GetModuleLicenseFromDB(request: carriers.License_GetModuleLicenseFromDBRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ModuleLicense >;
    GetModuleLicenseFromDB(ownerName: string, moduleName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ModuleLicense >;
    AddLicenseFromFile(request: carriers.License_AddLicenseFromFileRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ExtendedLicenseInfo >;
    AddLicenseFromFile(fileContent: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ExtendedLicenseInfo >;
    GetThirdPartyLicenseAssignments(request: carriers.License_GetThirdPartyLicenseAssignmentsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ModuleLicenseLink[] >;
    GetThirdPartyLicenseAssignments(associateId: number, moduleOwner: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ModuleLicenseLink[] >;
    AssignThirdPartyLicenses(request: carriers.License_AssignThirdPartyLicensesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ModuleLicenseLink[] >;
    AssignThirdPartyLicenses(associateId: number, moduleOwner: string, moduleLicenseNames: string[], webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ModuleLicenseLink[] >;
    UnassignThirdPartyLicenses(request: carriers.License_UnassignThirdPartyLicensesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ModuleLicenseLink[] >;
    UnassignThirdPartyLicenses(associateId: number, moduleOwner: string, moduleLicenseNames: string[], webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ModuleLicenseLink[] >;
} // interface ILicenseAgent




/**
 * License query, download, activation
 */
export class LicenseAgent extends base.WebApiBase implements ILicenseAgent {
    constructor(baseUrl?: string, languageCode?:string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config:AxiosRequestConfig, languageCode?:string, cultureCode?: string);
    constructor(options: base.WebApiOptions);

    constructor(baseUrlOrOptions: string|base.WebApiOptions|undefined,
                langOrconfigOrRM?: string|base.ResourceParsing|AxiosRequestConfig|any, 
                langOrResourceOrRM?:string|base.ResourceParsing|any, 
                cultureCode?: string, 
                ) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/License/";
        super(options);
    }



    private async _GetLicenseForAllOwnersFromDB( options?:base.WebApiRequestOptions) : Promise< carriers.ExtendedLicenseInfo[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ExtendedLicenseInfo[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetLicenseForAllOwnersFromDB", undefined , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ExtendedLicenseInfo[] = converters.Create_ExtendedLicenseInfoArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    /**
     * Get all licenses, with usage, from all module owners as they are stored in the database
     * @returns 
     */
    public async GetLicenseForAllOwnersFromDB(webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ExtendedLicenseInfo[] >
    {
        return this._GetLicenseForAllOwnersFromDB(webapi_options);
    }


    private async _GetLicenseFromLicenseServer(request: carriers.License_GetLicenseFromLicenseServerRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ExtendedLicenseInfo > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ExtendedLicenseInfo >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetLicenseFromLicenseServer", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ExtendedLicenseInfo = converters.Create_ExtendedLicenseInfo_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * 
     * @param request - OwnerName
     * @returns 
     */
    public async GetLicenseFromLicenseServer(request: carriers.License_GetLicenseFromLicenseServerRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ExtendedLicenseInfo >;

    /**
     * 
     * @param ownerName - 
     * @returns 
     */
    public async GetLicenseFromLicenseServer(ownerName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ExtendedLicenseInfo >;

    public async GetLicenseFromLicenseServer(ownerName:string|carriers.License_GetLicenseFromLicenseServerRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ExtendedLicenseInfo > {
        let _request : carriers.License_GetLicenseFromLicenseServerRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = ownerName;
        if( typeof( first ) === "object" && first && ( typeof(first.OwnerName)!='undefined' ) )
        {
            _request = ownerName as carriers.License_GetLicenseFromLicenseServerRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       OwnerName: ownerName as string,
                       };   
            _options = webapi_options;
        }
        return this._GetLicenseFromLicenseServer( _request, _options );
    }


    private async _GetModuleLicenseHistoryFromLicenseServer(request: carriers.License_GetModuleLicenseHistoryFromLicenseServerRequest, options?:base.WebApiRequestOptions) : Promise< string > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< string >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetModuleLicenseHistoryFromLicenseServer", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : string = response.data as string;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Get details about a license from the license server.
     * @param request - LicenseInfo, ModuleLicense
     * @returns Information about a particular license module.
     */
    public async GetModuleLicenseHistoryFromLicenseServer(request: carriers.License_GetModuleLicenseHistoryFromLicenseServerRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string >;

    /**
     * Get details about a license from the license server.
     * @param licenseInfo - Description of the license
     * @param moduleLicense - Information about a particular module to get information for.
     * @returns Information about a particular license module.
     */
    public async GetModuleLicenseHistoryFromLicenseServer(licenseInfo: carriers.ExtendedLicenseInfo, moduleLicense: carriers.ExtendedModuleLicense, webapi_options?:base.WebApiRequestOptions) : Promise< string >;

    public async GetModuleLicenseHistoryFromLicenseServer(licenseInfo:carriers.ExtendedLicenseInfo|carriers.License_GetModuleLicenseHistoryFromLicenseServerRequest, moduleLicense?:carriers.ExtendedModuleLicense|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< string > {
        let _request : carriers.License_GetModuleLicenseHistoryFromLicenseServerRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = licenseInfo;
        if( typeof( first ) === "object" && first && ( typeof(first.LicenseInfo)!='undefined' || typeof(first.ModuleLicense)!='undefined' ) )
        {
            _request = licenseInfo as carriers.License_GetModuleLicenseHistoryFromLicenseServerRequest;
            _options = moduleLicense as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       LicenseInfo: licenseInfo as carriers.ExtendedLicenseInfo,
                       ModuleLicense: moduleLicense as carriers.ExtendedModuleLicense,
                       };   
            _options = webapi_options;
        }
        return this._GetModuleLicenseHistoryFromLicenseServer( _request, _options );
    }


    private async _ValidateLicenseInfo(request: carriers.License_ValidateLicenseInfoRequest, options?:base.WebApiRequestOptions) : Promise< carriers.LicenseResult > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.LicenseResult >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ValidateLicenseInfo", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.LicenseResult = converters.Create_LicenseResult_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Validate that a license is consistant.
     * @param request - LicenseInfo
     * @returns 
     */
    public async ValidateLicenseInfo(request: carriers.License_ValidateLicenseInfoRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseResult >;

    /**
     * Validate that a license is consistant.
     * @param licenseInfo - License to validate consistancy for
     * @returns 
     */
    public async ValidateLicenseInfo(licenseInfo: carriers.ExtendedLicenseInfo, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseResult >;

    public async ValidateLicenseInfo(licenseInfo:carriers.ExtendedLicenseInfo|carriers.License_ValidateLicenseInfoRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseResult > {
        let _request : carriers.License_ValidateLicenseInfoRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = licenseInfo;
        if( typeof( first ) === "object" && first && ( typeof(first.LicenseInfo)!='undefined' ) )
        {
            _request = licenseInfo as carriers.License_ValidateLicenseInfoRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       LicenseInfo: licenseInfo as carriers.ExtendedLicenseInfo,
                       };   
            _options = webapi_options;
        }
        return this._ValidateLicenseInfo( _request, _options );
    }


    private async _ActivateLicenseInfo(request: carriers.License_ActivateLicenseInfoRequest, options?:base.WebApiRequestOptions) : Promise< carriers.LicenseResult > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.LicenseResult >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ActivateLicenseInfo", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.LicenseResult = converters.Create_LicenseResult_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Save a new license to the database.
     * @param request - NewLicense
     * @returns 
     */
    public async ActivateLicenseInfo(request: carriers.License_ActivateLicenseInfoRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseResult >;

    /**
     * Save a new license to the database.
     * @param newLicense - New license to save to the database.
     * @returns 
     */
    public async ActivateLicenseInfo(newLicense: carriers.ExtendedLicenseInfo, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseResult >;

    public async ActivateLicenseInfo(newLicense:carriers.ExtendedLicenseInfo|carriers.License_ActivateLicenseInfoRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseResult > {
        let _request : carriers.License_ActivateLicenseInfoRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = newLicense;
        if( typeof( first ) === "object" && first && ( typeof(first.NewLicense)!='undefined' ) )
        {
            _request = newLicense as carriers.License_ActivateLicenseInfoRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       NewLicense: newLicense as carriers.ExtendedLicenseInfo,
                       };   
            _options = webapi_options;
        }
        return this._ActivateLicenseInfo( _request, _options );
    }


    private async _GetLicenseStatusFromLicenseServer(request: carriers.License_GetLicenseStatusFromLicenseServerRequest, options?:base.WebApiRequestOptions) : Promise< carriers.CheckLicenseStatusResult > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.CheckLicenseStatusResult >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetLicenseStatusFromLicenseServer", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.CheckLicenseStatusResult = converters.Create_CheckLicenseStatusResult_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Get License from the license server for a particular module owner.
     * @param request - OwnerName
     * @returns License from the database, from the license server and with usage.
     */
    public async GetLicenseStatusFromLicenseServer(request: carriers.License_GetLicenseStatusFromLicenseServerRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.CheckLicenseStatusResult >;

    /**
     * Get License from the license server for a particular module owner.
     * @param ownerName - Name of the module owner to get license from.
     * @returns License from the database, from the license server and with usage.
     */
    public async GetLicenseStatusFromLicenseServer(ownerName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.CheckLicenseStatusResult >;

    public async GetLicenseStatusFromLicenseServer(ownerName:string|carriers.License_GetLicenseStatusFromLicenseServerRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.CheckLicenseStatusResult > {
        let _request : carriers.License_GetLicenseStatusFromLicenseServerRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = ownerName;
        if( typeof( first ) === "object" && first && ( typeof(first.OwnerName)!='undefined' ) )
        {
            _request = ownerName as carriers.License_GetLicenseStatusFromLicenseServerRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       OwnerName: ownerName as string,
                       };   
            _options = webapi_options;
        }
        return this._GetLicenseStatusFromLicenseServer( _request, _options );
    }


    private async _GetLicenseFromDB(request: carriers.License_GetLicenseFromDBRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ExtendedLicenseInfo > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ExtendedLicenseInfo >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetLicenseFromDB", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ExtendedLicenseInfo = converters.Create_ExtendedLicenseInfo_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Get license, with usage, as it is stored in the database for one particular module owner.
     * @param request - OwnerName
     * @returns License, with usage, as it is stored in the database.
     */
    public async GetLicenseFromDB(request: carriers.License_GetLicenseFromDBRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ExtendedLicenseInfo >;

    /**
     * Get license, with usage, as it is stored in the database for one particular module owner.
     * @param ownerName - Name of the module owner.
     * @returns License, with usage, as it is stored in the database.
     */
    public async GetLicenseFromDB(ownerName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ExtendedLicenseInfo >;

    public async GetLicenseFromDB(ownerName:string|carriers.License_GetLicenseFromDBRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ExtendedLicenseInfo > {
        let _request : carriers.License_GetLicenseFromDBRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = ownerName;
        if( typeof( first ) === "object" && first && ( typeof(first.OwnerName)!='undefined' ) )
        {
            _request = ownerName as carriers.License_GetLicenseFromDBRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       OwnerName: ownerName as string,
                       };   
            _options = webapi_options;
        }
        return this._GetLicenseFromDB( _request, _options );
    }


    private async _ChangeSerialNumber(request: carriers.License_ChangeSerialNumberRequest, options?:base.WebApiRequestOptions) : Promise< carriers.LicenseResult > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.LicenseResult >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("ChangeSerialNumber", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.LicenseResult = converters.Create_LicenseResult_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Change the new serial number for the installation. Requests a new license from SuperLicense, checks if change is authorized.
     * @param request - NewCompanyName, NewSerialNumber
     * @returns License after serial number/name change
     */
    public async ChangeSerialNumber(request: carriers.License_ChangeSerialNumberRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseResult >;

    /**
     * Change the new serial number for the installation. Requests a new license from SuperLicense, checks if change is authorized.
     * @param newCompanyName - The new company name
     * @param newSerialNumber - New serial number to change to.
     * @returns License after serial number/name change
     */
    public async ChangeSerialNumber(newCompanyName: string, newSerialNumber: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseResult >;

    public async ChangeSerialNumber(newCompanyName:string|carriers.License_ChangeSerialNumberRequest, newSerialNumber?:string|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseResult > {
        let _request : carriers.License_ChangeSerialNumberRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = newCompanyName;
        if( typeof( first ) === "object" && first && ( typeof(first.NewCompanyName)!='undefined' || typeof(first.NewSerialNumber)!='undefined' ) )
        {
            _request = newCompanyName as carriers.License_ChangeSerialNumberRequest;
            _options = newSerialNumber as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       NewCompanyName: newCompanyName as string,
                       NewSerialNumber: newSerialNumber as string,
                       };   
            _options = webapi_options;
        }
        return this._ChangeSerialNumber( _request, _options );
    }


    private async _GetUserLicenses(request: carriers.License_GetUserLicensesRequest, options?:base.WebApiRequestOptions) : Promise< carriers.LicenseOwner[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.LicenseOwner[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetUserLicenses", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.LicenseOwner[] = converters.Create_LicenseOwnerArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Obtain information about associate module licenses
     * @param request - AssociateId
     * @returns Associate module licenses grouped by owners.
     */
    public async GetUserLicenses(request: carriers.License_GetUserLicensesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseOwner[] >;

    /**
     * Obtain information about associate module licenses
     * @param associateId - Associate id to check for associate module licenses
     * @returns Associate module licenses grouped by owners.
     */
    public async GetUserLicenses(associateId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseOwner[] >;

    public async GetUserLicenses(associateId:number|carriers.License_GetUserLicensesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseOwner[] > {
        let _request : carriers.License_GetUserLicensesRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = associateId;
        if( typeof( first ) === "object" && first && ( typeof(first.AssociateId)!='undefined' ) )
        {
            _request = associateId as carriers.License_GetUserLicensesRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       AssociateId: associateId as number,
                       };   
            _options = webapi_options;
        }
        return this._GetUserLicenses( _request, _options );
    }


    private async _GetSatelliteLicenses(request: carriers.License_GetSatelliteLicensesRequest, options?:base.WebApiRequestOptions) : Promise< carriers.LicenseOwner[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.LicenseOwner[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetSatelliteLicenses", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.LicenseOwner[] = converters.Create_LicenseOwnerArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Obtain information about satellite module licenses
     * @param request - SatelliteId
     * @returns Satellite module licenses grouped by owners.
     */
    public async GetSatelliteLicenses(request: carriers.License_GetSatelliteLicensesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseOwner[] >;

    /**
     * Obtain information about satellite module licenses
     * @param satelliteId - Satellite id to check for satellite module licenses
     * @returns Satellite module licenses grouped by owners.
     */
    public async GetSatelliteLicenses(satelliteId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseOwner[] >;

    public async GetSatelliteLicenses(satelliteId:number|carriers.License_GetSatelliteLicensesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseOwner[] > {
        let _request : carriers.License_GetSatelliteLicensesRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = satelliteId;
        if( typeof( first ) === "object" && first && ( typeof(first.SatelliteId)!='undefined' ) )
        {
            _request = satelliteId as carriers.License_GetSatelliteLicensesRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       SatelliteId: satelliteId as number,
                       };   
            _options = webapi_options;
        }
        return this._GetSatelliteLicenses( _request, _options );
    }


    private async _RemoveLicenseFromDB(request: carriers.License_RemoveLicenseFromDBRequest, options?:base.WebApiRequestOptions) : Promise< carriers.LicenseResult > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.LicenseResult >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("RemoveLicenseFromDB", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.LicenseResult = converters.Create_LicenseResult_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Remove the license from a particular module owner from the database.  It is not permitted to remove licenses from SuperOffice
     * @param request - ModuleOwner
     * @returns 
     */
    public async RemoveLicenseFromDB(request: carriers.License_RemoveLicenseFromDBRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseResult >;

    /**
     * Remove the license from a particular module owner from the database.  It is not permitted to remove licenses from SuperOffice
     * @param moduleOwner - Name of the module owner to remove license from.
     * @returns 
     */
    public async RemoveLicenseFromDB(moduleOwner: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseResult >;

    public async RemoveLicenseFromDB(moduleOwner:string|carriers.License_RemoveLicenseFromDBRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.LicenseResult > {
        let _request : carriers.License_RemoveLicenseFromDBRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = moduleOwner;
        if( typeof( first ) === "object" && first && ( typeof(first.ModuleOwner)!='undefined' ) )
        {
            _request = moduleOwner as carriers.License_RemoveLicenseFromDBRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ModuleOwner: moduleOwner as string,
                       };   
            _options = webapi_options;
        }
        return this._RemoveLicenseFromDB( _request, _options );
    }


    private async _GetLicenseFromFile(request: carriers.License_GetLicenseFromFileRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ExtendedLicenseInfo > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ExtendedLicenseInfo >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetLicenseFromFile", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ExtendedLicenseInfo = converters.Create_ExtendedLicenseInfo_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Load a new license from file
     * @param request - FileContent
     * @returns 
     */
    public async GetLicenseFromFile(request: carriers.License_GetLicenseFromFileRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ExtendedLicenseInfo >;

    /**
     * Load a new license from file
     * @param fileContent - Content of the license file as read.
     * @returns 
     */
    public async GetLicenseFromFile(fileContent: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ExtendedLicenseInfo >;

    public async GetLicenseFromFile(fileContent:string|carriers.License_GetLicenseFromFileRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ExtendedLicenseInfo > {
        let _request : carriers.License_GetLicenseFromFileRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = fileContent;
        if( typeof( first ) === "object" && first && ( typeof(first.FileContent)!='undefined' ) )
        {
            _request = fileContent as carriers.License_GetLicenseFromFileRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       FileContent: fileContent as string,
                       };   
            _options = webapi_options;
        }
        return this._GetLicenseFromFile( _request, _options );
    }


    private async _GetShopUrl(request: carriers.License_GetShopUrlRequest, options?:base.WebApiRequestOptions) : Promise< string > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< string >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetShopUrl", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : string = response.data as string;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Get the shop URL for the specified module owner. This can be used to redirect user to the web shop.
     * @param request - OwnerName
     * @returns The URL which contains the shop for the specified module owner.
     */
    public async GetShopUrl(request: carriers.License_GetShopUrlRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string >;

    /**
     * Get the shop URL for the specified module owner. This can be used to redirect user to the web shop.
     * @param ownerName - Name of the module owner.
     * @returns The URL which contains the shop for the specified module owner.
     */
    public async GetShopUrl(ownerName: string, webapi_options?:base.WebApiRequestOptions) : Promise< string >;

    public async GetShopUrl(ownerName:string|carriers.License_GetShopUrlRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string > {
        let _request : carriers.License_GetShopUrlRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = ownerName;
        if( typeof( first ) === "object" && first && ( typeof(first.OwnerName)!='undefined' ) )
        {
            _request = ownerName as carriers.License_GetShopUrlRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       OwnerName: ownerName as string,
                       };   
            _options = webapi_options;
        }
        return this._GetShopUrl( _request, _options );
    }


    private async _GetUserLicensesMDOList( options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.SelectableMDOListItem[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetUserLicensesMDOList", undefined , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.SelectableMDOListItem[] = converters.Create_SelectableMDOListItemArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    /**
     * Get all licenses in a MDOListItem structure.
     * @returns Hierarchical structure of user licenses.
     */
    public async GetUserLicensesMDOList(webapi_options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] >
    {
        return this._GetUserLicensesMDOList(webapi_options);
    }


    private async _GetModuleLicenseFromDB(request: carriers.License_GetModuleLicenseFromDBRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ModuleLicense > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ModuleLicense >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetModuleLicenseFromDB", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ModuleLicense = converters.Create_ModuleLicense_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Get license information for one particular license module.
     * @param request - OwnerName, ModuleName
     * @returns Module License details, as it is stored in the database. NULL if not found.
     */
    public async GetModuleLicenseFromDB(request: carriers.License_GetModuleLicenseFromDBRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ModuleLicense >;

    /**
     * Get license information for one particular license module.
     * @param ownerName - Name of the module owner.
     * @param moduleName - Name of the license module.
     * @returns Module License details, as it is stored in the database. NULL if not found.
     */
    public async GetModuleLicenseFromDB(ownerName: string, moduleName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ModuleLicense >;

    public async GetModuleLicenseFromDB(ownerName:string|carriers.License_GetModuleLicenseFromDBRequest, moduleName?:string|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ModuleLicense > {
        let _request : carriers.License_GetModuleLicenseFromDBRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = ownerName;
        if( typeof( first ) === "object" && first && ( typeof(first.OwnerName)!='undefined' || typeof(first.ModuleName)!='undefined' ) )
        {
            _request = ownerName as carriers.License_GetModuleLicenseFromDBRequest;
            _options = moduleName as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       OwnerName: ownerName as string,
                       ModuleName: moduleName as string,
                       };   
            _options = webapi_options;
        }
        return this._GetModuleLicenseFromDB( _request, _options );
    }


    private async _AddLicenseFromFile(request: carriers.License_AddLicenseFromFileRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ExtendedLicenseInfo > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ExtendedLicenseInfo >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("AddLicenseFromFile", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ExtendedLicenseInfo = converters.Create_ExtendedLicenseInfo_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Load and activate a new license from file/string if the new license is valid.
     * @param request - FileContent
     * @returns Activated license
     */
    public async AddLicenseFromFile(request: carriers.License_AddLicenseFromFileRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ExtendedLicenseInfo >;

    /**
     * Load and activate a new license from file/string if the new license is valid.
     * @param fileContent - Content of the license file as XML.
     * @returns Activated license
     */
    public async AddLicenseFromFile(fileContent: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ExtendedLicenseInfo >;

    public async AddLicenseFromFile(fileContent:string|carriers.License_AddLicenseFromFileRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ExtendedLicenseInfo > {
        let _request : carriers.License_AddLicenseFromFileRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = fileContent;
        if( typeof( first ) === "object" && first && ( typeof(first.FileContent)!='undefined' ) )
        {
            _request = fileContent as carriers.License_AddLicenseFromFileRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       FileContent: fileContent as string,
                       };   
            _options = webapi_options;
        }
        return this._AddLicenseFromFile( _request, _options );
    }


    private async _GetThirdPartyLicenseAssignments(request: carriers.License_GetThirdPartyLicenseAssignmentsRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ModuleLicenseLink[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ModuleLicenseLink[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetThirdPartyLicenseAssignments", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ModuleLicenseLink[] = converters.Create_ModuleLicenseLinkArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Get license assignments for an associate for licenses belonging to an other module owner than SuperOffice
     * @param request - AssociateId, ModuleOwner
     * @returns Module license names
     */
    public async GetThirdPartyLicenseAssignments(request: carriers.License_GetThirdPartyLicenseAssignmentsRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ModuleLicenseLink[] >;

    /**
     * Get license assignments for an associate for licenses belonging to an other module owner than SuperOffice
     * @param associateId - User to get third party license assignments for
     * @param moduleOwner - Name of the module owner to get license assignments for
     * @returns Module license names
     */
    public async GetThirdPartyLicenseAssignments(associateId: number, moduleOwner: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ModuleLicenseLink[] >;

    public async GetThirdPartyLicenseAssignments(associateId:number|carriers.License_GetThirdPartyLicenseAssignmentsRequest, moduleOwner?:string|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ModuleLicenseLink[] > {
        let _request : carriers.License_GetThirdPartyLicenseAssignmentsRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = associateId;
        if( typeof( first ) === "object" && first && ( typeof(first.AssociateId)!='undefined' || typeof(first.ModuleOwner)!='undefined' ) )
        {
            _request = associateId as carriers.License_GetThirdPartyLicenseAssignmentsRequest;
            _options = moduleOwner as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       AssociateId: associateId as number,
                       ModuleOwner: moduleOwner as string,
                       };   
            _options = webapi_options;
        }
        return this._GetThirdPartyLicenseAssignments( _request, _options );
    }


    private async _AssignThirdPartyLicenses(request: carriers.License_AssignThirdPartyLicensesRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ModuleLicenseLink[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ModuleLicenseLink[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("AssignThirdPartyLicenses", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ModuleLicenseLink[] = converters.Create_ModuleLicenseLinkArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Assign third party licenses
     * @param request - AssociateId, ModuleOwner, ModuleLicenseNames
     * @returns All module license names assigned
     */
    public async AssignThirdPartyLicenses(request: carriers.License_AssignThirdPartyLicensesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ModuleLicenseLink[] >;

    /**
     * Assign third party licenses
     * @param associateId - User to assign third party licenses for
     * @param moduleOwner - Name of the module owner to assign license for
     * @param moduleLicenseNames - Name of module licenses to assign
     * @returns All module license names assigned
     */
    public async AssignThirdPartyLicenses(associateId: number, moduleOwner: string, moduleLicenseNames: string[], webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ModuleLicenseLink[] >;

    public async AssignThirdPartyLicenses(associateId:number|carriers.License_AssignThirdPartyLicensesRequest, moduleOwner?:string|base.WebApiRequestOptions, moduleLicenseNames?:string[], webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ModuleLicenseLink[] > {
        let _request : carriers.License_AssignThirdPartyLicensesRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = associateId;
        if( typeof( first ) === "object" && first && ( typeof(first.AssociateId)!='undefined' || typeof(first.ModuleOwner)!='undefined' || typeof(first.ModuleLicenseNames)!='undefined' ) )
        {
            _request = associateId as carriers.License_AssignThirdPartyLicensesRequest;
            _options = moduleOwner as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       AssociateId: associateId as number,
                       ModuleOwner: moduleOwner as string,
                       ModuleLicenseNames: moduleLicenseNames as string[],
                       };   
            _options = webapi_options;
        }
        return this._AssignThirdPartyLicenses( _request, _options );
    }


    private async _UnassignThirdPartyLicenses(request: carriers.License_UnassignThirdPartyLicensesRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ModuleLicenseLink[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ModuleLicenseLink[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("UnassignThirdPartyLicenses", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ModuleLicenseLink[] = converters.Create_ModuleLicenseLinkArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Unassign (remove) third party licenses
     * @param request - AssociateId, ModuleOwner, ModuleLicenseNames
     * @returns All module license names assigned
     */
    public async UnassignThirdPartyLicenses(request: carriers.License_UnassignThirdPartyLicensesRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ModuleLicenseLink[] >;

    /**
     * Unassign (remove) third party licenses
     * @param associateId - User to unassign third party licenses for
     * @param moduleOwner - Name of the module owner to unassign license for
     * @param moduleLicenseNames - Name of module licenses to unassign (remove)
     * @returns All module license names assigned
     */
    public async UnassignThirdPartyLicenses(associateId: number, moduleOwner: string, moduleLicenseNames: string[], webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ModuleLicenseLink[] >;

    public async UnassignThirdPartyLicenses(associateId:number|carriers.License_UnassignThirdPartyLicensesRequest, moduleOwner?:string|base.WebApiRequestOptions, moduleLicenseNames?:string[], webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ModuleLicenseLink[] > {
        let _request : carriers.License_UnassignThirdPartyLicensesRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = associateId;
        if( typeof( first ) === "object" && first && ( typeof(first.AssociateId)!='undefined' || typeof(first.ModuleOwner)!='undefined' || typeof(first.ModuleLicenseNames)!='undefined' ) )
        {
            _request = associateId as carriers.License_UnassignThirdPartyLicensesRequest;
            _options = moduleOwner as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       AssociateId: associateId as number,
                       ModuleOwner: moduleOwner as string,
                       ModuleLicenseNames: moduleLicenseNames as string[],
                       };   
            _options = webapi_options;
        }
        return this._UnassignThirdPartyLicenses( _request, _options );
    }

    } // class v1LicenseAgentController 


