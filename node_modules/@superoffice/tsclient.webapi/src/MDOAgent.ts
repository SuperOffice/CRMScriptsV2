// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>


/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
//
// File:          WebApi/MDOAgent.ts
//
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------

import { AxiosRequestConfig } from 'axios';
import * as moment from 'moment';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
import * as converters from './Converters';
import { FromBase64ToString, ToBase64 } from './Base64';

/**
 * MDO Lists, reading, searching, and item lookup.
 */
export interface IMDOAgent {
    GetList(request: carriers.MDO_GetListRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MDOListItem[] >;
    GetList(name: string, forceFlatList: boolean, additionalInfo: string, onlyHistory: boolean, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MDOListItem[] >;
    GetListWithHistory(request: carriers.MDO_GetListWithHistoryRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MDOListItem[] >;
    GetListWithHistory(name: string, forceFlatList: boolean, additionalInfo: string, historyItems: number[], onlyHistory: boolean, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MDOListItem[] >;
    GetListWithRestriction(request: carriers.MDO_GetListWithRestrictionRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MDOListItem[] >;
    GetListWithRestriction(name: string, additionalInfo: string, searchValue: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MDOListItem[] >;
    GetSimpleList(request: carriers.MDO_GetSimpleListRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MDOListItem[] >;
    GetSimpleList(name: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MDOListItem[] >;
    GetListItem(request: carriers.MDO_GetListItemRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MDOListItem >;
    GetListItem(listName: string, id: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MDOListItem >;
    GetListNames(webapi_options?:base.WebApiRequestOptions) : Promise< string[] >;
    GetListIdByListName(request: carriers.MDO_GetListIdByListNameRequest, webapi_options?:base.WebApiRequestOptions) : Promise< number >;
    GetListIdByListName(name: string, webapi_options?:base.WebApiRequestOptions) : Promise< number >;
    GetSelectableSimpleList(request: carriers.MDO_GetSelectableSimpleListRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] >;
    GetSelectableSimpleList(name: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] >;
    GetSelectableListWithRestriction(request: carriers.MDO_GetSelectableListWithRestrictionRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] >;
    GetSelectableListWithRestriction(name: string, additionalInfo: string, searchValue: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] >;
    GetSelectableListWithHistory(request: carriers.MDO_GetSelectableListWithHistoryRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] >;
    GetSelectableListWithHistory(name: string, forceFlatList: boolean, additionalInfo: string, historyItems: number[], onlyHistory: boolean, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] >;
    GetSelectableList(request: carriers.MDO_GetSelectableListRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] >;
    GetSelectableList(name: string, forceFlatList: boolean, additionalInfo: string, onlyHistory: boolean, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] >;
    SetSelected(request: carriers.MDO_SetSelectedRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] >;
    SetSelected(name: string, additionalInfo: string, selectableMDOList: carriers.SelectableMDOListItem[], webapi_options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] >;
} // interface IMDOAgent




/**
 * MDO Lists, reading, searching, and item lookup.
 */
export class MDOAgent extends base.WebApiBase implements IMDOAgent {
    constructor(baseUrl?: string, languageCode?:string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config:AxiosRequestConfig, languageCode?:string, cultureCode?: string);
    constructor(options: base.WebApiOptions);

    constructor(baseUrlOrOptions: string|base.WebApiOptions|undefined,
                langOrconfigOrRM?: string|base.ResourceParsing|AxiosRequestConfig|any, 
                langOrResourceOrRM?:string|base.ResourceParsing|any, 
                cultureCode?: string, 
                ) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/MDO/";
        super(options);
    }



    private async _GetList(request: carriers.MDO_GetListRequest, options?:base.WebApiRequestOptions) : Promise< carriers.MDOListItem[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.MDOListItem[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetList", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.MDOListItem[] = converters.Create_MDOListItemArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Method to get a MDO list.
     * @param request - Name, ForceFlatList, AdditionalInfo, OnlyHistory
     * @returns Array of MDOListItem
     */
    public async GetList(request: carriers.MDO_GetListRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MDOListItem[] >;

    /**
     * Method to get a MDO list.
     * @param name - Conceptual name of the MDO list-
     * @param forceFlatList - Force the list to be flat
     * @param additionalInfo - Additional info to the MDO provider
     * @param onlyHistory - If true, return only history items
     * @returns Array of MDOListItem
     */
    public async GetList(name: string, forceFlatList: boolean, additionalInfo: string, onlyHistory: boolean, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MDOListItem[] >;

    public async GetList(name:string|carriers.MDO_GetListRequest, forceFlatList?:boolean|base.WebApiRequestOptions, additionalInfo?:string, onlyHistory?:boolean, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MDOListItem[] > {
        let _request : carriers.MDO_GetListRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = name;
        if( typeof( first ) === "object" && first && ( typeof(first.Name)!='undefined' || typeof(first.ForceFlatList)!='undefined' || typeof(first.AdditionalInfo)!='undefined' || typeof(first.OnlyHistory)!='undefined' ) )
        {
            _request = name as carriers.MDO_GetListRequest;
            _options = forceFlatList as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       Name: name as string,
                       ForceFlatList: forceFlatList as boolean,
                       AdditionalInfo: additionalInfo as string,
                       OnlyHistory: onlyHistory as boolean,
                       };   
            _options = webapi_options;
        }
        return this._GetList( _request, _options );
    }


    private async _GetListWithHistory(request: carriers.MDO_GetListWithHistoryRequest, options?:base.WebApiRequestOptions) : Promise< carriers.MDOListItem[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.MDOListItem[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetListWithHistory", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.MDOListItem[] = converters.Create_MDOListItemArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Method to get a MDO list with own history list.
     * @param request - Name, ForceFlatList, AdditionalInfo, HistoryItems, OnlyHistory
     * @returns Array of MDOListItem
     */
    public async GetListWithHistory(request: carriers.MDO_GetListWithHistoryRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MDOListItem[] >;

    /**
     * Method to get a MDO list with own history list.
     * @param name - Conceptual name of the MDO list-
     * @param forceFlatList - Force the list to be flat
     * @param additionalInfo - Additional info to the MDO provider
     * @param historyItems - An array of ids, used to get the history list
     * @param onlyHistory - If true, return only history items
     * @returns Array of MDOListItem
     */
    public async GetListWithHistory(name: string, forceFlatList: boolean, additionalInfo: string, historyItems: number[], onlyHistory: boolean, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MDOListItem[] >;

    public async GetListWithHistory(name:string|carriers.MDO_GetListWithHistoryRequest, forceFlatList?:boolean|base.WebApiRequestOptions, additionalInfo?:string, historyItems?:number[], onlyHistory?:boolean, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MDOListItem[] > {
        let _request : carriers.MDO_GetListWithHistoryRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = name;
        if( typeof( first ) === "object" && first && ( typeof(first.Name)!='undefined' || typeof(first.ForceFlatList)!='undefined' || typeof(first.AdditionalInfo)!='undefined' || typeof(first.HistoryItems)!='undefined' || typeof(first.OnlyHistory)!='undefined' ) )
        {
            _request = name as carriers.MDO_GetListWithHistoryRequest;
            _options = forceFlatList as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       Name: name as string,
                       ForceFlatList: forceFlatList as boolean,
                       AdditionalInfo: additionalInfo as string,
                       HistoryItems: historyItems as number[],
                       OnlyHistory: onlyHistory as boolean,
                       };   
            _options = webapi_options;
        }
        return this._GetListWithHistory( _request, _options );
    }


    private async _GetListWithRestriction(request: carriers.MDO_GetListWithRestrictionRequest, options?:base.WebApiRequestOptions) : Promise< carriers.MDOListItem[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.MDOListItem[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetListWithRestriction", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.MDOListItem[] = converters.Create_MDOListItemArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Method to get a MDO list with restrictions.
     * @param request - Name, AdditionalInfo, SearchValue
     * @returns Array of MDOListItem
     */
    public async GetListWithRestriction(request: carriers.MDO_GetListWithRestrictionRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MDOListItem[] >;

    /**
     * Method to get a MDO list with restrictions.
     * @param name - Conceptual name of the MDO list-
     * @param additionalInfo - Additional info to the MDO provider
     * @param searchValue - the value used to restrict the list
     * @returns Array of MDOListItem
     */
    public async GetListWithRestriction(name: string, additionalInfo: string, searchValue: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MDOListItem[] >;

    public async GetListWithRestriction(name:string|carriers.MDO_GetListWithRestrictionRequest, additionalInfo?:string|base.WebApiRequestOptions, searchValue?:string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MDOListItem[] > {
        let _request : carriers.MDO_GetListWithRestrictionRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = name;
        if( typeof( first ) === "object" && first && ( typeof(first.Name)!='undefined' || typeof(first.AdditionalInfo)!='undefined' || typeof(first.SearchValue)!='undefined' ) )
        {
            _request = name as carriers.MDO_GetListWithRestrictionRequest;
            _options = additionalInfo as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       Name: name as string,
                       AdditionalInfo: additionalInfo as string,
                       SearchValue: searchValue as string,
                       };   
            _options = webapi_options;
        }
        return this._GetListWithRestriction( _request, _options );
    }


    private async _GetSimpleList(request: carriers.MDO_GetSimpleListRequest, options?:base.WebApiRequestOptions) : Promise< carriers.MDOListItem[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.MDOListItem[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetSimpleList", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.MDOListItem[] = converters.Create_MDOListItemArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Method returns a simple flat MDO List.
     * @param request - Name
     * @returns Array of MDOListItem
     */
    public async GetSimpleList(request: carriers.MDO_GetSimpleListRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MDOListItem[] >;

    /**
     * Method returns a simple flat MDO List.
     * @param name - Conceptual name of the MDO list-
     * @returns Array of MDOListItem
     */
    public async GetSimpleList(name: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MDOListItem[] >;

    public async GetSimpleList(name:string|carriers.MDO_GetSimpleListRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MDOListItem[] > {
        let _request : carriers.MDO_GetSimpleListRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = name;
        if( typeof( first ) === "object" && first && ( typeof(first.Name)!='undefined' ) )
        {
            _request = name as carriers.MDO_GetSimpleListRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       Name: name as string,
                       };   
            _options = webapi_options;
        }
        return this._GetSimpleList( _request, _options );
    }


    private async _GetListItem(request: carriers.MDO_GetListItemRequest, options?:base.WebApiRequestOptions) : Promise< carriers.MDOListItem > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.MDOListItem >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetListItem", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.MDOListItem = converters.Create_MDOListItem_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Returns a single list item
     * @param request - ListName, Id
     * @returns Single MDO list item
     */
    public async GetListItem(request: carriers.MDO_GetListItemRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MDOListItem >;

    /**
     * Returns a single list item
     * @param listName - Conceptual name of the MDO list
     * @param id - Id of list item
     * @returns Single MDO list item
     */
    public async GetListItem(listName: string, id: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MDOListItem >;

    public async GetListItem(listName:string|carriers.MDO_GetListItemRequest, id?:number|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.MDOListItem > {
        let _request : carriers.MDO_GetListItemRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = listName;
        if( typeof( first ) === "object" && first && ( typeof(first.ListName)!='undefined' || typeof(first.Id)!='undefined' ) )
        {
            _request = listName as carriers.MDO_GetListItemRequest;
            _options = id as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ListName: listName as string,
                       Id: id as number,
                       };   
            _options = webapi_options;
        }
        return this._GetListItem( _request, _options );
    }


    private async _GetListNames( options?:base.WebApiRequestOptions) : Promise< string[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< string[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetListNames", undefined , config);
                base.WebApiBase.SetCompleted(options);
                const res : string[] = response.data as string[];
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    /**
     * Returns a list of all MDO List names. These names can also be used with the Archive agent as ProviderNames.
     * @returns Array of list names.
     */
    public async GetListNames(webapi_options?:base.WebApiRequestOptions) : Promise< string[] >
    {
        return this._GetListNames(webapi_options);
    }


    private async _GetListIdByListName(request: carriers.MDO_GetListIdByListNameRequest, options?:base.WebApiRequestOptions) : Promise< number > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< number >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetListIdByListName", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : number = response.data as number;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Retrieve the UdListDefinition id of a list, by its name. Not all lists have such an ID, but those that are based on tables do (the list name is then the same as the table name)
     * @param request - Name
     * @returns List id in the UdListDefinition table
     */
    public async GetListIdByListName(request: carriers.MDO_GetListIdByListNameRequest, webapi_options?:base.WebApiRequestOptions) : Promise< number >;

    /**
     * Retrieve the UdListDefinition id of a list, by its name. Not all lists have such an ID, but those that are based on tables do (the list name is then the same as the table name)
     * @param name - The list name, same as the table name for lists that are backed by tables
     * @returns List id in the UdListDefinition table
     */
    public async GetListIdByListName(name: string, webapi_options?:base.WebApiRequestOptions) : Promise< number >;

    public async GetListIdByListName(name:string|carriers.MDO_GetListIdByListNameRequest, webapi_options?:base.WebApiRequestOptions) : Promise< number > {
        let _request : carriers.MDO_GetListIdByListNameRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = name;
        if( typeof( first ) === "object" && first && ( typeof(first.Name)!='undefined' ) )
        {
            _request = name as carriers.MDO_GetListIdByListNameRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       Name: name as string,
                       };   
            _options = webapi_options;
        }
        return this._GetListIdByListName( _request, _options );
    }


    private async _GetSelectableSimpleList(request: carriers.MDO_GetSelectableSimpleListRequest, options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.SelectableMDOListItem[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetSelectableSimpleList", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.SelectableMDOListItem[] = converters.Create_SelectableMDOListItemArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Method returns a flat Selectable MDO List.
     * @param request - Name
     * @returns Array of SelectableMDOListItem
     */
    public async GetSelectableSimpleList(request: carriers.MDO_GetSelectableSimpleListRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] >;

    /**
     * Method returns a flat Selectable MDO List.
     * @param name - Conceptual name of the MDO list
     * @returns Array of SelectableMDOListItem
     */
    public async GetSelectableSimpleList(name: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] >;

    public async GetSelectableSimpleList(name:string|carriers.MDO_GetSelectableSimpleListRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] > {
        let _request : carriers.MDO_GetSelectableSimpleListRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = name;
        if( typeof( first ) === "object" && first && ( typeof(first.Name)!='undefined' ) )
        {
            _request = name as carriers.MDO_GetSelectableSimpleListRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       Name: name as string,
                       };   
            _options = webapi_options;
        }
        return this._GetSelectableSimpleList( _request, _options );
    }


    private async _GetSelectableListWithRestriction(request: carriers.MDO_GetSelectableListWithRestrictionRequest, options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.SelectableMDOListItem[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetSelectableListWithRestriction", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.SelectableMDOListItem[] = converters.Create_SelectableMDOListItemArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Method to get a Selectable MDO list with restrictions.
     * @param request - Name, AdditionalInfo, SearchValue
     * @returns Array of SelectableMDOListItem
     */
    public async GetSelectableListWithRestriction(request: carriers.MDO_GetSelectableListWithRestrictionRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] >;

    /**
     * Method to get a Selectable MDO list with restrictions.
     * @param name - Conceptual name of the MDO list
     * @param additionalInfo - Additional info to the MDO provider
     * @param searchValue - the value used to restrict the list
     * @returns Array of SelectableMDOListItem
     */
    public async GetSelectableListWithRestriction(name: string, additionalInfo: string, searchValue: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] >;

    public async GetSelectableListWithRestriction(name:string|carriers.MDO_GetSelectableListWithRestrictionRequest, additionalInfo?:string|base.WebApiRequestOptions, searchValue?:string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] > {
        let _request : carriers.MDO_GetSelectableListWithRestrictionRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = name;
        if( typeof( first ) === "object" && first && ( typeof(first.Name)!='undefined' || typeof(first.AdditionalInfo)!='undefined' || typeof(first.SearchValue)!='undefined' ) )
        {
            _request = name as carriers.MDO_GetSelectableListWithRestrictionRequest;
            _options = additionalInfo as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       Name: name as string,
                       AdditionalInfo: additionalInfo as string,
                       SearchValue: searchValue as string,
                       };   
            _options = webapi_options;
        }
        return this._GetSelectableListWithRestriction( _request, _options );
    }


    private async _GetSelectableListWithHistory(request: carriers.MDO_GetSelectableListWithHistoryRequest, options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.SelectableMDOListItem[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetSelectableListWithHistory", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.SelectableMDOListItem[] = converters.Create_SelectableMDOListItemArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Method to get a Selectable MDO list with own history list.
     * @param request - Name, ForceFlatList, AdditionalInfo, HistoryItems, OnlyHistory
     * @returns Array of SelectableMDOListItem
     */
    public async GetSelectableListWithHistory(request: carriers.MDO_GetSelectableListWithHistoryRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] >;

    /**
     * Method to get a Selectable MDO list with own history list.
     * @param name - Conceptual name of the MDO list.
     * @param forceFlatList - Force the list to be flat
     * @param additionalInfo - Additional info to the MDO provider
     * @param historyItems - An array of ids, used to get the history list
     * @param onlyHistory - If true, return only history items
     * @returns Array of SelectableMDOListItem
     */
    public async GetSelectableListWithHistory(name: string, forceFlatList: boolean, additionalInfo: string, historyItems: number[], onlyHistory: boolean, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] >;

    public async GetSelectableListWithHistory(name:string|carriers.MDO_GetSelectableListWithHistoryRequest, forceFlatList?:boolean|base.WebApiRequestOptions, additionalInfo?:string, historyItems?:number[], onlyHistory?:boolean, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] > {
        let _request : carriers.MDO_GetSelectableListWithHistoryRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = name;
        if( typeof( first ) === "object" && first && ( typeof(first.Name)!='undefined' || typeof(first.ForceFlatList)!='undefined' || typeof(first.AdditionalInfo)!='undefined' || typeof(first.HistoryItems)!='undefined' || typeof(first.OnlyHistory)!='undefined' ) )
        {
            _request = name as carriers.MDO_GetSelectableListWithHistoryRequest;
            _options = forceFlatList as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       Name: name as string,
                       ForceFlatList: forceFlatList as boolean,
                       AdditionalInfo: additionalInfo as string,
                       HistoryItems: historyItems as number[],
                       OnlyHistory: onlyHistory as boolean,
                       };   
            _options = webapi_options;
        }
        return this._GetSelectableListWithHistory( _request, _options );
    }


    private async _GetSelectableList(request: carriers.MDO_GetSelectableListRequest, options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.SelectableMDOListItem[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetSelectableList", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.SelectableMDOListItem[] = converters.Create_SelectableMDOListItemArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Method to get a Selectable MDO list.
     * @param request - Name, ForceFlatList, AdditionalInfo, OnlyHistory
     * @returns Array of SelectableMDOListItem
     */
    public async GetSelectableList(request: carriers.MDO_GetSelectableListRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] >;

    /**
     * Method to get a Selectable MDO list.
     * @param name - Conceptual name of the MDO list.
     * @param forceFlatList - Force the list to be flat
     * @param additionalInfo - Additional info to the MDO provider
     * @param onlyHistory - If true, return only history items
     * @returns Array of SelectableMDOListItem
     */
    public async GetSelectableList(name: string, forceFlatList: boolean, additionalInfo: string, onlyHistory: boolean, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] >;

    public async GetSelectableList(name:string|carriers.MDO_GetSelectableListRequest, forceFlatList?:boolean|base.WebApiRequestOptions, additionalInfo?:string, onlyHistory?:boolean, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] > {
        let _request : carriers.MDO_GetSelectableListRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = name;
        if( typeof( first ) === "object" && first && ( typeof(first.Name)!='undefined' || typeof(first.ForceFlatList)!='undefined' || typeof(first.AdditionalInfo)!='undefined' || typeof(first.OnlyHistory)!='undefined' ) )
        {
            _request = name as carriers.MDO_GetSelectableListRequest;
            _options = forceFlatList as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       Name: name as string,
                       ForceFlatList: forceFlatList as boolean,
                       AdditionalInfo: additionalInfo as string,
                       OnlyHistory: onlyHistory as boolean,
                       };   
            _options = webapi_options;
        }
        return this._GetSelectableList( _request, _options );
    }


    private async _SetSelected(request: carriers.MDO_SetSelectedRequest, options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.SelectableMDOListItem[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetSelected", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.SelectableMDOListItem[] = converters.Create_SelectableMDOListItemArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Saves the selected values as selected by their given list representation.
     * @param request - Name, AdditionalInfo, SelectableMDOList
     * @returns Array of updated SelectableMDOListItems
     */
    public async SetSelected(request: carriers.MDO_SetSelectedRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] >;

    /**
     * Saves the selected values as selected by their given list representation.
     * @param name - Conceptual name of the MDO list
     * @param additionalInfo - Additional info to the MDO provider
     * @param selectableMDOList - Items to be updated
     * @returns Array of updated SelectableMDOListItems
     */
    public async SetSelected(name: string, additionalInfo: string, selectableMDOList: carriers.SelectableMDOListItem[], webapi_options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] >;

    public async SetSelected(name:string|carriers.MDO_SetSelectedRequest, additionalInfo?:string|base.WebApiRequestOptions, selectableMDOList?:carriers.SelectableMDOListItem[], webapi_options?:base.WebApiRequestOptions) : Promise< carriers.SelectableMDOListItem[] > {
        let _request : carriers.MDO_SetSelectedRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = name;
        if( typeof( first ) === "object" && first && ( typeof(first.Name)!='undefined' || typeof(first.AdditionalInfo)!='undefined' || typeof(first.SelectableMDOList)!='undefined' ) )
        {
            _request = name as carriers.MDO_SetSelectedRequest;
            _options = additionalInfo as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       Name: name as string,
                       AdditionalInfo: additionalInfo as string,
                       SelectableMDOList: selectableMDOList as carriers.SelectableMDOListItem[],
                       };   
            _options = webapi_options;
        }
        return this._SetSelected( _request, _options );
    }

    } // class v1MDOAgentController 


