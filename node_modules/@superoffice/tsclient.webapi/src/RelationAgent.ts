// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>


/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
//
// File:          WebApi/RelationAgent.ts
//
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------

import { AxiosRequestConfig } from 'axios';
import * as moment from 'moment';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
import * as converters from './Converters';
import { FromBase64ToString, ToBase64 } from './Base64';

/**
 * Contact/Person relations
 */
export interface IRelationAgent {
    CreateDefaultContactRelationEntity(): Promise< carriers.ContactRelationEntity >;
    GetContactRelationEntity(contactRelationEntityId: number) :  Promise< carriers.ContactRelationEntity >;
    SaveContactRelation(request: carriers.Relation_SaveContactRelationRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ContactRelationEntity >;
    SaveContactRelation(contactRelationEntity: carriers.ContactRelationEntity, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ContactRelationEntity >;
    DeleteContactRelation(request: carriers.Relation_DeleteContactRelationRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    DeleteContactRelation(contactRelationEntityId: number, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
} // interface IRelationAgent




/**
 * Contact/Person relations
 */
export class RelationAgent extends base.WebApiBase implements IRelationAgent {
    constructor(baseUrl?: string, languageCode?:string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config:AxiosRequestConfig, languageCode?:string, cultureCode?: string);
    constructor(options: base.WebApiOptions);

    constructor(baseUrlOrOptions: string|base.WebApiOptions|undefined,
                langOrconfigOrRM?: string|base.ResourceParsing|AxiosRequestConfig|any, 
                langOrResourceOrRM?:string|base.ResourceParsing|any, 
                cultureCode?: string, 
                ) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Relation/";
        super(options);
    }



    /**
     * Set default values into a new ContactRelationEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    public async CreateDefaultContactRelationEntity(options?:base.WebApiRequestOptions) : Promise< carriers.ContactRelationEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ContactRelationEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultContactRelationEntity", null, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ContactRelationEntity = converters.Create_ContactRelationEntity_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Gets a ContactRelationEntity object.
     * @param contactRelationEntityId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single ContactRelationEntity
     */
    public async GetContactRelationEntity(contactRelationEntityId: number, options?:base.WebApiRequestOptions) : Promise< carriers.ContactRelationEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ContactRelationEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetContactRelationEntity?contactRelationEntityId=" + contactRelationEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_ContactRelationEntity_From( response.data );               
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    private async _SaveContactRelation(request: carriers.Relation_SaveContactRelationRequest, options?:base.WebApiRequestOptions) : Promise< carriers.ContactRelationEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.ContactRelationEntity >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SaveContactRelation", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.ContactRelationEntity = converters.Create_ContactRelationEntity_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Creates a new or updates an existing contact relation.
     * @param request - ContactRelationEntity
     * @returns Saved relation
     */
    public async SaveContactRelation(request: carriers.Relation_SaveContactRelationRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ContactRelationEntity >;

    /**
     * Creates a new or updates an existing contact relation.
     * @param contactRelationEntity - Relation to save
     * @returns Saved relation
     */
    public async SaveContactRelation(contactRelationEntity: carriers.ContactRelationEntity, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ContactRelationEntity >;

    public async SaveContactRelation(contactRelationEntity:carriers.ContactRelationEntity|carriers.Relation_SaveContactRelationRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.ContactRelationEntity > {
        let _request : carriers.Relation_SaveContactRelationRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = contactRelationEntity;
        if( typeof( first ) === "object" && first && ( typeof(first.ContactRelationEntity)!='undefined' ) )
        {
            _request = contactRelationEntity as carriers.Relation_SaveContactRelationRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ContactRelationEntity: contactRelationEntity as carriers.ContactRelationEntity,
                       };   
            _options = webapi_options;
        }
        return this._SaveContactRelation( _request, _options );
    }


    private async _DeleteContactRelation(request: carriers.Relation_DeleteContactRelationRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("DeleteContactRelation", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Deletes the spesified contact relation.
     * @param request - ContactRelationEntityId
     * @returns 
     */
    public async DeleteContactRelation(request: carriers.Relation_DeleteContactRelationRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Deletes the spesified contact relation.
     * @param contactRelationEntityId - Relation to delete
     * @returns 
     */
    public async DeleteContactRelation(contactRelationEntityId: number, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async DeleteContactRelation(contactRelationEntityId:number|carriers.Relation_DeleteContactRelationRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.Relation_DeleteContactRelationRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = contactRelationEntityId;
        if( typeof( first ) === "object" && first && ( typeof(first.ContactRelationEntityId)!='undefined' ) )
        {
            _request = contactRelationEntityId as carriers.Relation_DeleteContactRelationRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ContactRelationEntityId: contactRelationEntityId as number,
                       };   
            _options = webapi_options;
        }
        return this._DeleteContactRelation( _request, _options );
    }

    } // class v1RelationAgentController 


