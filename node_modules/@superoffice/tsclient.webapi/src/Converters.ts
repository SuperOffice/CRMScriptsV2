// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsconverters.tt
// </auto-generated>


/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
// All Typescript Carriers - Converter functions
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------

import * as enums from "./Enums";
import * as moment from "moment";
import * as carriers from "./Carriers";


export function Create_Address_From(src:any) : carriers.Address {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Address = Create_Carrier_From(src) as carriers.Address;
        
        res.Wgs84Latitude= src.Wgs84Latitude as number;
        res.Wgs84Longitude= src.Wgs84Longitude as number;
        res.LocalizedAddress= Create_LocalizedFieldArrayArray_From(src.LocalizedAddress);
        res.Street= Create_StructuredAddress_From(src.Street);
        res.Postal= Create_StructuredAddress_From(src.Postal);
        res.Formatted= src.Formatted as string;
        return res as carriers.Address;
}

export function Create_AddressArray_From(src:any) : carriers.Address[] {
    let res : carriers.Address[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Address_From(src[i]);
        }
    }
    return res;
}

export function Create_AddressArrayArray_From(src:any) : carriers.Address[][] {
    let res : carriers.Address[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_AddressArray_From(src[i]);
        }
    }
    return res;
}




export function Create_Carrier_From(src:any) : carriers.Carrier {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.TableRight= Create_TableRight_From(src.TableRight);
        res.FieldProperties= Create_FieldPropertyDictionary_From(src.FieldProperties);
        return res as carriers.Carrier;
}

export function Create_CarrierArray_From(src:any) : carriers.Carrier[] {
    let res : carriers.Carrier[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Carrier_From(src[i]);
        }
    }
    return res;
}

export function Create_CarrierArrayArray_From(src:any) : carriers.Carrier[][] {
    let res : carriers.Carrier[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CarrierArray_From(src[i]);
        }
    }
    return res;
}




// dictionary
export function Create_ColumnDataDictionary_From(src:any) : carriers.ColumnDataDictionary {
        let res : carriers.ColumnDataDictionary = src as carriers.ColumnDataDictionary;
        if( res ) {
            for(let i in res ) {
                res[i] = Create_ArchiveColumnData_From(src[i]);
            }
        }
        return res;
}



export function Create_CommandResult_From(src:any) : carriers.CommandResult {
        if( src === null || src === undefined )
            return null;
        let res : carriers.CommandResult = Create_Carrier_From(src) as carriers.CommandResult;
        
        res.Success= src.Success as boolean;
        res.Message= src.Message as string;
        res.Result= enums.CommandActionResult[src.Result];
        return res as carriers.CommandResult;
}

export function Create_CommandResultArray_From(src:any) : carriers.CommandResult[] {
    let res : carriers.CommandResult[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CommandResult_From(src[i]);
        }
    }
    return res;
}

export function Create_CommandResultArrayArray_From(src:any) : carriers.CommandResult[][] {
    let res : carriers.CommandResult[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CommandResultArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ContactPersonId_From(src:any) : carriers.ContactPersonId {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ContactPersonId = Create_Carrier_From(src) as carriers.ContactPersonId;
        
        res.PersonId= src.PersonId as number;
        res.ContactId= src.ContactId as number;
        return res as carriers.ContactPersonId;
}

export function Create_ContactPersonIdArray_From(src:any) : carriers.ContactPersonId[] {
    let res : carriers.ContactPersonId[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ContactPersonId_From(src[i]);
        }
    }
    return res;
}

export function Create_ContactPersonIdArrayArray_From(src:any) : carriers.ContactPersonId[][] {
    let res : carriers.ContactPersonId[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ContactPersonIdArray_From(src[i]);
        }
    }
    return res;
}




export function Create_CustomCommand_From(src:any) : carriers.CustomCommand {
        if( src === null || src === undefined )
            return null;
        let res : carriers.CustomCommand = Create_Carrier_From(src) as carriers.CustomCommand;
        
        res.Name= src.Name as string;
        res.DisplayName= src.DisplayName as string;
        res.Description= src.Description as string;
        res.ToolTip= src.ToolTip as string;
        res.Actions= enums.CommandAction[src.Actions];
        res.ActionData= src.ActionData as string;
        return res as carriers.CustomCommand;
}

export function Create_CustomCommandArray_From(src:any) : carriers.CustomCommand[] {
    let res : carriers.CustomCommand[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CustomCommand_From(src[i]);
        }
    }
    return res;
}

export function Create_CustomCommandArrayArray_From(src:any) : carriers.CustomCommand[][] {
    let res : carriers.CustomCommand[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CustomCommandArray_From(src[i]);
        }
    }
    return res;
}




export function Create_DuplicateEntry_From(src:any) : carriers.DuplicateEntry {
        if( src === null || src === undefined )
            return null;
        let res : carriers.DuplicateEntry = Create_Carrier_From(src) as carriers.DuplicateEntry;
        
        res.RuleName= src.RuleName as string;
        res.SoPrimaryKey= src.SoPrimaryKey as number;
        res.EntryName= src.EntryName as string;
        res.EntryIdentifier= src.EntryIdentifier as string;
        res.RuleDisplayName= src.RuleDisplayName as string;
        return res as carriers.DuplicateEntry;
}

export function Create_DuplicateEntryArray_From(src:any) : carriers.DuplicateEntry[] {
    let res : carriers.DuplicateEntry[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DuplicateEntry_From(src[i]);
        }
    }
    return res;
}

export function Create_DuplicateEntryArrayArray_From(src:any) : carriers.DuplicateEntry[][] {
    let res : carriers.DuplicateEntry[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DuplicateEntryArray_From(src[i]);
        }
    }
    return res;
}




export function Create_DuplicateRule_From(src:any) : carriers.DuplicateRule {
        if( src === null || src === undefined )
            return null;
        let res : carriers.DuplicateRule = Create_Carrier_From(src) as carriers.DuplicateRule;
        
        res.Name= src.Name as string;
        res.DisplayName= src.DisplayName as string;
        res.DisplayTooltip= src.DisplayTooltip as string;
        res.IsActive= src.IsActive as boolean;
        return res as carriers.DuplicateRule;
}

export function Create_DuplicateRuleArray_From(src:any) : carriers.DuplicateRule[] {
    let res : carriers.DuplicateRule[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DuplicateRule_From(src[i]);
        }
    }
    return res;
}

export function Create_DuplicateRuleArrayArray_From(src:any) : carriers.DuplicateRule[][] {
    let res : carriers.DuplicateRule[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DuplicateRuleArray_From(src[i]);
        }
    }
    return res;
}




export function Create_EntityElement_From(src:any) : carriers.EntityElement {
        if( src === null || src === undefined )
            return null;
        let res : carriers.EntityElement = Create_Carrier_From(src) as carriers.EntityElement;
        
        res.Value= src.Value as string;
        res.StrippedValue= src.StrippedValue as string;
        res.Description= src.Description as string;
        return res as carriers.EntityElement;
}

export function Create_EntityElementArray_From(src:any) : carriers.EntityElement[] {
    let res : carriers.EntityElement[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EntityElement_From(src[i]);
        }
    }
    return res;
}

export function Create_EntityElementArrayArray_From(src:any) : carriers.EntityElement[][] {
    let res : carriers.EntityElement[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EntityElementArray_From(src[i]);
        }
    }
    return res;
}




export function Create_FieldProperty_From(src:any) : carriers.FieldProperty {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.FieldRight= Create_FieldRight_From(src.FieldRight);
        res.FieldType= src.FieldType as string;
        res.FieldLength= src.FieldLength as number;
        return res as carriers.FieldProperty;
}

export function Create_FieldPropertyArray_From(src:any) : carriers.FieldProperty[] {
    let res : carriers.FieldProperty[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldProperty_From(src[i]);
        }
    }
    return res;
}

export function Create_FieldPropertyArrayArray_From(src:any) : carriers.FieldProperty[][] {
    let res : carriers.FieldProperty[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldPropertyArray_From(src[i]);
        }
    }
    return res;
}




// dictionary
export function Create_FieldPropertyDictionary_From(src:any) : carriers.FieldPropertyDictionary {
        let res : carriers.FieldPropertyDictionary = src as carriers.FieldPropertyDictionary;
        if( res ) {
            for(let i in res ) {
                res[i] = Create_FieldProperty_From(src[i]);
            }
        }
        return res;
}



export function Create_FieldRight_From(src:any) : carriers.FieldRight {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.Mask= Create_EFieldRight_From(src.Mask) as enums.EFieldRight;
        res.Reason= src.Reason as string;
        return res as carriers.FieldRight;
}

export function Create_FieldRightArray_From(src:any) : carriers.FieldRight[] {
    let res : carriers.FieldRight[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldRight_From(src[i]);
        }
    }
    return res;
}

export function Create_FieldRightArrayArray_From(src:any) : carriers.FieldRight[][] {
    let res : carriers.FieldRight[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldRightArray_From(src[i]);
        }
    }
    return res;
}




export function Create_GrantedModuleLicense_From(src:any) : carriers.GrantedModuleLicense {
        if( src === null || src === undefined )
            return null;
        let res : carriers.GrantedModuleLicense = Create_Carrier_From(src) as carriers.GrantedModuleLicense;
        
        res.OwnerId= src.OwnerId as number;
        res.OwnerName= src.OwnerName as string;
        res.OwnerDescription= src.OwnerDescription as string;
        res.ModuleId= src.ModuleId as number;
        res.Name= src.Name as string;
        res.Description= src.Description as string;
        res.Version= src.Version as string;
        res.LicenseType= enums.LicenseType[src.LicenseType];
        res.ExtraFlags= src.ExtraFlags as number;
        res.SortOrder= src.SortOrder as number;
        res.LicenseNumber= src.LicenseNumber as number;
        res.IsHidden= src.IsHidden as boolean;
        res.IsUnrestricted= src.IsUnrestricted as boolean;
        res.ExpiryDate= Create_Date_From(src.ExpiryDate);
        return res as carriers.GrantedModuleLicense;
}

export function Create_GrantedModuleLicenseArray_From(src:any) : carriers.GrantedModuleLicense[] {
    let res : carriers.GrantedModuleLicense[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_GrantedModuleLicense_From(src[i]);
        }
    }
    return res;
}

export function Create_GrantedModuleLicenseArrayArray_From(src:any) : carriers.GrantedModuleLicense[][] {
    let res : carriers.GrantedModuleLicense[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_GrantedModuleLicenseArray_From(src[i]);
        }
    }
    return res;
}




// dictionary
export function Create_IntStringDictionary_From(src:any) : carriers.IntStringDictionary {
        let res : carriers.IntStringDictionary = src as carriers.IntStringDictionary;
        if( res ) {
            for(let i in res ) {
                res[i] = src[i] as string;
            }
        }
        return res;
}



export function Create_LocalizedField_From(src:any) : carriers.LocalizedField {
        if( src === null || src === undefined )
            return null;
        let res : carriers.LocalizedField = Create_Carrier_From(src) as carriers.LocalizedField;
        
        res.Name= src.Name as string;
        res.Value= src.Value as string;
        res.Tooltip= src.Tooltip as string;
        res.Label= src.Label as string;
        res.ValueLength= src.ValueLength as number;
        res.AddressType= src.AddressType as string;
        return res as carriers.LocalizedField;
}

export function Create_LocalizedFieldArray_From(src:any) : carriers.LocalizedField[] {
    let res : carriers.LocalizedField[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_LocalizedField_From(src[i]);
        }
    }
    return res;
}

export function Create_LocalizedFieldArrayArray_From(src:any) : carriers.LocalizedField[][] {
    let res : carriers.LocalizedField[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_LocalizedFieldArray_From(src[i]);
        }
    }
    return res;
}




export function Create_MetricPair_From(src:any) : carriers.MetricPair {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.Name= src.Name as string;
        res.Value= src.Value as number;
        return res as carriers.MetricPair;
}

export function Create_MetricPairArray_From(src:any) : carriers.MetricPair[] {
    let res : carriers.MetricPair[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_MetricPair_From(src[i]);
        }
    }
    return res;
}

export function Create_MetricPairArrayArray_From(src:any) : carriers.MetricPair[][] {
    let res : carriers.MetricPair[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_MetricPairArray_From(src[i]);
        }
    }
    return res;
}




export function Create_OperationResult_From(src:any) : carriers.OperationResult {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.Success= src.Success as boolean;
        res.Message= src.Message as string;
        return res as carriers.OperationResult;
}

export function Create_OperationResultArray_From(src:any) : carriers.OperationResult[] {
    let res : carriers.OperationResult[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_OperationResult_From(src[i]);
        }
    }
    return res;
}

export function Create_OperationResultArrayArray_From(src:any) : carriers.OperationResult[][] {
    let res : carriers.OperationResult[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_OperationResultArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ProjectTypeStatusLink_From(src:any) : carriers.ProjectTypeStatusLink {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ProjectTypeStatusLink = Create_Carrier_From(src) as carriers.ProjectTypeStatusLink;
        
        res.ProjectTypeStatusLinkId= src.ProjectTypeStatusLinkId as number;
        res.ProjTypeId= src.ProjTypeId as number;
        res.ProjTypeName= src.ProjTypeName as string;
        res.ProjTypeTooltip= src.ProjTypeTooltip as string;
        res.ProjStatusId= src.ProjStatusId as number;
        res.ProjStatusName= src.ProjStatusName as string;
        res.ProjStatusTooltip= src.ProjStatusTooltip as string;
        return res as carriers.ProjectTypeStatusLink;
}

export function Create_ProjectTypeStatusLinkArray_From(src:any) : carriers.ProjectTypeStatusLink[] {
    let res : carriers.ProjectTypeStatusLink[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ProjectTypeStatusLink_From(src[i]);
        }
    }
    return res;
}

export function Create_ProjectTypeStatusLinkArrayArray_From(src:any) : carriers.ProjectTypeStatusLink[][] {
    let res : carriers.ProjectTypeStatusLink[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ProjectTypeStatusLinkArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ProvidedCredential_From(src:any) : carriers.ProvidedCredential {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.Type= src.Type as string;
        res.SearchName= src.SearchName as string;
        res.DisplayName= src.DisplayName as string;
        res.CredentialId= src.CredentialId as number;
        return res as carriers.ProvidedCredential;
}

export function Create_ProvidedCredentialArray_From(src:any) : carriers.ProvidedCredential[] {
    let res : carriers.ProvidedCredential[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ProvidedCredential_From(src[i]);
        }
    }
    return res;
}

export function Create_ProvidedCredentialArrayArray_From(src:any) : carriers.ProvidedCredential[][] {
    let res : carriers.ProvidedCredential[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ProvidedCredentialArray_From(src[i]);
        }
    }
    return res;
}




export function Create_Recipient_From(src:any) : carriers.Recipient {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.Type= enums.RecipientType[src.Type];
        res.Value= src.Value as string;
        res.DisplayValue= src.DisplayValue as string;
        return res as carriers.Recipient;
}

export function Create_RecipientArray_From(src:any) : carriers.Recipient[] {
    let res : carriers.Recipient[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Recipient_From(src[i]);
        }
    }
    return res;
}

export function Create_RecipientArrayArray_From(src:any) : carriers.Recipient[][] {
    let res : carriers.Recipient[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RecipientArray_From(src[i]);
        }
    }
    return res;
}




export function Create_RecipientStatistics_From(src:any) : carriers.RecipientStatistics {
        if( src === null || src === undefined )
            return null;
        let res : carriers.RecipientStatistics = Create_Carrier_From(src) as carriers.RecipientStatistics;
        
        res.Total= src.Total as number;
        res.ValidPostalAddresses= src.ValidPostalAddresses as number;
        res.ValidEmailAddresses= src.ValidEmailAddresses as number;
        res.ValidFaxNumbers= src.ValidFaxNumbers as number;
        res.NoAddresses= src.NoAddresses as number;
        res.NoFaxOrEmails= src.NoFaxOrEmails as number;
        return res as carriers.RecipientStatistics;
}

export function Create_RecipientStatisticsArray_From(src:any) : carriers.RecipientStatistics[] {
    let res : carriers.RecipientStatistics[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RecipientStatistics_From(src[i]);
        }
    }
    return res;
}

export function Create_RecipientStatisticsArrayArray_From(src:any) : carriers.RecipientStatistics[][] {
    let res : carriers.RecipientStatistics[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RecipientStatisticsArray_From(src[i]);
        }
    }
    return res;
}




export function Create_RecurrenceDate_From(src:any) : carriers.RecurrenceDate {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.Date= Create_Date_From(src.Date);
        res.IsConflict= src.IsConflict as boolean;
        res.Description= src.Description as string;
        res.DescriptionStyleHint= src.DescriptionStyleHint as string;
        res.Tooltip= src.Tooltip as string;
        return res as carriers.RecurrenceDate;
}

export function Create_RecurrenceDateArray_From(src:any) : carriers.RecurrenceDate[] {
    let res : carriers.RecurrenceDate[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RecurrenceDate_From(src[i]);
        }
    }
    return res;
}

export function Create_RecurrenceDateArrayArray_From(src:any) : carriers.RecurrenceDate[][] {
    let res : carriers.RecurrenceDate[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RecurrenceDateArray_From(src[i]);
        }
    }
    return res;
}




export function Create_RecurrenceDayPattern_From(src:any) : carriers.RecurrenceDayPattern {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.Cycle= src.Cycle as number;
        res.Pattern= enums.RecurrenceDailyPattern[src.Pattern];
        return res as carriers.RecurrenceDayPattern;
}

export function Create_RecurrenceDayPatternArray_From(src:any) : carriers.RecurrenceDayPattern[] {
    let res : carriers.RecurrenceDayPattern[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RecurrenceDayPattern_From(src[i]);
        }
    }
    return res;
}

export function Create_RecurrenceDayPatternArrayArray_From(src:any) : carriers.RecurrenceDayPattern[][] {
    let res : carriers.RecurrenceDayPattern[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RecurrenceDayPatternArray_From(src[i]);
        }
    }
    return res;
}




export function Create_RecurrenceInfo_From(src:any) : carriers.RecurrenceInfo {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.RecurrenceId= src.RecurrenceId as number;
        res.StartDate= Create_Date_From(src.StartDate);
        res.EndDate= Create_Date_From(src.EndDate);
        res.RecurrenceEndType= enums.RecurrenceEndType[src.RecurrenceEndType];
        res.Pattern= enums.RecurrencePattern[src.Pattern];
        res.DayPattern= Create_RecurrenceDayPattern_From(src.DayPattern);
        res.WeekPattern= Create_RecurrenceWeekPattern_From(src.WeekPattern);
        res.MonthPattern= Create_RecurrenceMonthPattern_From(src.MonthPattern);
        res.YearPattern= Create_RecurrenceYearPattern_From(src.YearPattern);
        res.Dates= Create_RecurrenceDateArray_From(src.Dates);
        res.RecurrenceCounter= src.RecurrenceCounter as number;
        res.IsRecurrence= src.IsRecurrence as boolean;
        return res as carriers.RecurrenceInfo;
}

export function Create_RecurrenceInfoArray_From(src:any) : carriers.RecurrenceInfo[] {
    let res : carriers.RecurrenceInfo[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RecurrenceInfo_From(src[i]);
        }
    }
    return res;
}

export function Create_RecurrenceInfoArrayArray_From(src:any) : carriers.RecurrenceInfo[][] {
    let res : carriers.RecurrenceInfo[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RecurrenceInfoArray_From(src[i]);
        }
    }
    return res;
}




export function Create_RecurrenceMonthPattern_From(src:any) : carriers.RecurrenceMonthPattern {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.Cycle= src.Cycle as number;
        res.Day= src.Day as number;
        res.Weekday= Create_Weekday_From(src.Weekday) as enums.Weekday;
        res.WeekOfMonth= enums.WeekOfMonth[src.WeekOfMonth];
        res.Pattern= enums.RecurrenceMonthlyPattern[src.Pattern];
        return res as carriers.RecurrenceMonthPattern;
}

export function Create_RecurrenceMonthPatternArray_From(src:any) : carriers.RecurrenceMonthPattern[] {
    let res : carriers.RecurrenceMonthPattern[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RecurrenceMonthPattern_From(src[i]);
        }
    }
    return res;
}

export function Create_RecurrenceMonthPatternArrayArray_From(src:any) : carriers.RecurrenceMonthPattern[][] {
    let res : carriers.RecurrenceMonthPattern[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RecurrenceMonthPatternArray_From(src[i]);
        }
    }
    return res;
}




export function Create_RecurrenceWeekPattern_From(src:any) : carriers.RecurrenceWeekPattern {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.Cycle= src.Cycle as number;
        res.Weekdays= Create_Weekday_From(src.Weekdays) as enums.Weekday;
        return res as carriers.RecurrenceWeekPattern;
}

export function Create_RecurrenceWeekPatternArray_From(src:any) : carriers.RecurrenceWeekPattern[] {
    let res : carriers.RecurrenceWeekPattern[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RecurrenceWeekPattern_From(src[i]);
        }
    }
    return res;
}

export function Create_RecurrenceWeekPatternArrayArray_From(src:any) : carriers.RecurrenceWeekPattern[][] {
    let res : carriers.RecurrenceWeekPattern[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RecurrenceWeekPatternArray_From(src[i]);
        }
    }
    return res;
}




export function Create_RecurrenceYearPattern_From(src:any) : carriers.RecurrenceYearPattern {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.Cycle= src.Cycle as number;
        res.Day= src.Day as number;
        res.Weekday= Create_Weekday_From(src.Weekday) as enums.Weekday;
        res.WeekOfMonth= enums.WeekOfMonth[src.WeekOfMonth];
        res.Pattern= enums.RecurrenceYearlyPattern[src.Pattern];
        return res as carriers.RecurrenceYearPattern;
}

export function Create_RecurrenceYearPatternArray_From(src:any) : carriers.RecurrenceYearPattern[] {
    let res : carriers.RecurrenceYearPattern[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RecurrenceYearPattern_From(src[i]);
        }
    }
    return res;
}

export function Create_RecurrenceYearPatternArrayArray_From(src:any) : carriers.RecurrenceYearPattern[][] {
    let res : carriers.RecurrenceYearPattern[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RecurrenceYearPatternArray_From(src[i]);
        }
    }
    return res;
}




export function Create_SaleTypeStageLink_From(src:any) : carriers.SaleTypeStageLink {
        if( src === null || src === undefined )
            return null;
        let res : carriers.SaleTypeStageLink = Create_Carrier_From(src) as carriers.SaleTypeStageLink;
        
        res.SaleTypeStageLinkId= src.SaleTypeStageLinkId as number;
        res.SaleTypeId= src.SaleTypeId as number;
        res.SaleTypeName= src.SaleTypeName as string;
        res.SaleTypeTooltip= src.SaleTypeTooltip as string;
        res.ProbId= src.ProbId as number;
        res.ProbName= src.ProbName as string;
        res.ProbTooltip= src.ProbTooltip as string;
        res.Probability= src.Probability as number;
        return res as carriers.SaleTypeStageLink;
}

export function Create_SaleTypeStageLinkArray_From(src:any) : carriers.SaleTypeStageLink[] {
    let res : carriers.SaleTypeStageLink[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SaleTypeStageLink_From(src[i]);
        }
    }
    return res;
}

export function Create_SaleTypeStageLinkArrayArray_From(src:any) : carriers.SaleTypeStageLink[][] {
    let res : carriers.SaleTypeStageLink[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SaleTypeStageLinkArray_From(src[i]);
        }
    }
    return res;
}




export function Create_SelectionMemberEditValues_From(src:any) : carriers.SelectionMemberEditValues {
        if( src === null || src === undefined )
            return null;
        let res : carriers.SelectionMemberEditValues = Create_Carrier_From(src) as carriers.SelectionMemberEditValues;
        
        res.CompanyCategory= src.CompanyCategory as number;
        res.CompanyBusiness= src.CompanyBusiness as number;
        res.CompanyOurContact= src.CompanyOurContact as number;
        res.CompanyName= src.CompanyName as string;
        res.CompanyDepartment= src.CompanyDepartment as string;
        res.CompanyNumber= src.CompanyNumber as string;
        res.CompanyCode= src.CompanyCode as string;
        res.ContactPosition= src.ContactPosition as number;
        res.ChangeCompanyCategory= src.ChangeCompanyCategory as boolean;
        res.ChangeCompanyBusiness= src.ChangeCompanyBusiness as boolean;
        res.ChangeCompanyOurContact= src.ChangeCompanyOurContact as boolean;
        res.ChangeCompanyName= src.ChangeCompanyName as boolean;
        res.ChangeCompanyDepartment= src.ChangeCompanyDepartment as boolean;
        res.ChangeCompanyNumber= src.ChangeCompanyNumber as boolean;
        res.ChangeCompanyCode= src.ChangeCompanyCode as boolean;
        res.ChangeContactPosition= src.ChangeContactPosition as boolean;
        res.CompanyCountry= src.CompanyCountry as number;
        res.ChangeCompanyCountry= src.ChangeCompanyCountry as boolean;
        res.ContactJobTitle= src.ContactJobTitle as string;
        res.ChangeContactJobTitle= src.ChangeContactJobTitle as boolean;
        res.CompanyOrgNr= src.CompanyOrgNr as string;
        res.ChangeCompanyOrgNr= src.ChangeCompanyOrgNr as boolean;
        return res as carriers.SelectionMemberEditValues;
}

export function Create_SelectionMemberEditValuesArray_From(src:any) : carriers.SelectionMemberEditValues[] {
    let res : carriers.SelectionMemberEditValues[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SelectionMemberEditValues_From(src[i]);
        }
    }
    return res;
}

export function Create_SelectionMemberEditValuesArrayArray_From(src:any) : carriers.SelectionMemberEditValues[][] {
    let res : carriers.SelectionMemberEditValues[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SelectionMemberEditValuesArray_From(src[i]);
        }
    }
    return res;
}




export function Create_SoExceptionInfo_From(src:any) : carriers.SoExceptionInfo {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.Message= src.Message as string;
        res.StackTrace= src.StackTrace as string;
        res.FriendlyText= src.FriendlyText as string;
        res.ExceptionType= src.ExceptionType as string;
        res.Source= src.Source as string;
        res.InnerException= Create_SoExceptionInfo_From(src.InnerException);
        res.Parameters= Create_SoExceptionInfoParameters_From(src.Parameters);
        return res as carriers.SoExceptionInfo;
}

export function Create_SoExceptionInfoArray_From(src:any) : carriers.SoExceptionInfo[] {
    let res : carriers.SoExceptionInfo[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SoExceptionInfo_From(src[i]);
        }
    }
    return res;
}

export function Create_SoExceptionInfoArrayArray_From(src:any) : carriers.SoExceptionInfo[][] {
    let res : carriers.SoExceptionInfo[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SoExceptionInfoArray_From(src[i]);
        }
    }
    return res;
}




// dictionary
export function Create_SoExceptionInfoParameters_From(src:any) : carriers.SoExceptionInfoParameters {
        let res : carriers.SoExceptionInfoParameters = src as carriers.SoExceptionInfoParameters;
        if( res ) {
            for(let i in res ) {
                res[i] = src[i] as string;
            }
        }
        return res;
}



// dictionary
export function Create_SoExtraInfo_From(src:any) : carriers.SoExtraInfo {
        let res : carriers.SoExtraInfo = src as carriers.SoExtraInfo;
        if( res ) {
            for(let i in res ) {
                res[i] = src[i] as string;
            }
        }
        return res;
}



export function Create_SoPrincipalCarrier_From(src:any) : carriers.SoPrincipalCarrier {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.UserType= enums.UserType[src.UserType];
        res.Associate= src.Associate as string;
        res.AssociateId= src.AssociateId as number;
        res.IsPerson= src.IsPerson as boolean;
        res.PersonId= src.PersonId as number;
        res.CountryId= src.CountryId as number;
        res.HomeCountryId= src.HomeCountryId as number;
        res.ContactId= src.ContactId as number;
        res.GroupId= src.GroupId as number;
        res.BusinessId= src.BusinessId as number;
        res.CategoryId= src.CategoryId as number;
        res.ContactOwner= src.ContactOwner as number;
        res.RoleId= src.RoleId as number;
        res.RoleName= src.RoleName as string;
        res.RoleDescription= src.RoleDescription as string;
        res.RoleType= enums.RoleType[src.RoleType];
        res.Licenses= Create_GrantedModuleLicenseArray_From(src.Licenses);
        res.FullName= src.FullName as string;
        res.EMailAddress= src.EMailAddress as string;
        res.FunctionRights= src.FunctionRights as string[];
        res.EjUserId= src.EjUserId as number;
        res.EjAccessLevel= src.EjAccessLevel as number;
        res.EjUserStatus= enums.EjUserStatus[src.EjUserStatus];
        res.ProvidedCredentials= Create_ProvidedCredentialArray_From(src.ProvidedCredentials);
        res.SecondaryGroups= src.SecondaryGroups as number[];
        res.DatabaseContextIdentifier= src.DatabaseContextIdentifier as string;
        return res as carriers.SoPrincipalCarrier;
}

export function Create_SoPrincipalCarrierArray_From(src:any) : carriers.SoPrincipalCarrier[] {
    let res : carriers.SoPrincipalCarrier[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SoPrincipalCarrier_From(src[i]);
        }
    }
    return res;
}

export function Create_SoPrincipalCarrierArrayArray_From(src:any) : carriers.SoPrincipalCarrier[][] {
    let res : carriers.SoPrincipalCarrier[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SoPrincipalCarrierArray_From(src[i]);
        }
    }
    return res;
}




export function Create_SoSystemInfoCarrier_From(src:any) : carriers.SoSystemInfoCarrier {
        if( src === null || src === undefined )
            return null;
        let res : carriers.SoSystemInfoCarrier = Create_Carrier_From(src) as carriers.SoSystemInfoCarrier;
        
        res.License= Create_LicenseInfo_From(src.License);
        res.WarningEnglish= src.WarningEnglish as string;
        res.WarningResource= src.WarningResource as string;
        res.BranchName= src.BranchName as string;
        res.BuildLabel= src.BuildLabel as string;
        res.AssemblyVersion= src.AssemblyVersion as string;
        res.AccumulatedNextCheckDate= Create_Date_From(src.AccumulatedNextCheckDate);
        res.FileVersion= src.FileVersion as string;
        res.Description= src.Description as string;
        res.DaysUntilNetServerExpiry= src.DaysUntilNetServerExpiry as number;
        res.BuildType= enums.NetServerBuildType[src.BuildType];
        res.DatabaseVersion= src.DatabaseVersion as number;
        res.IsUnicode= src.IsUnicode as boolean;
        res.CompanyName= src.CompanyName as string;
        res.CompanyId= src.CompanyId as number;
        res.DatabaseType= src.DatabaseType as string;
        res.DatabaseMinor= src.DatabaseMinor as string;
        res.DatabaseName= src.DatabaseName as string;
        res.IsOnTravel= src.IsOnTravel as boolean;
        res.IsSatellite= src.IsSatellite as boolean;
        return res as carriers.SoSystemInfoCarrier;
}

export function Create_SoSystemInfoCarrierArray_From(src:any) : carriers.SoSystemInfoCarrier[] {
    let res : carriers.SoSystemInfoCarrier[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SoSystemInfoCarrier_From(src[i]);
        }
    }
    return res;
}

export function Create_SoSystemInfoCarrierArrayArray_From(src:any) : carriers.SoSystemInfoCarrier[][] {
    let res : carriers.SoSystemInfoCarrier[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SoSystemInfoCarrierArray_From(src[i]);
        }
    }
    return res;
}




// dictionary
export function Create_StringDictionary_From(src:any) : carriers.StringDictionary {
        let res : carriers.StringDictionary = src as carriers.StringDictionary;
        if( res ) {
            for(let i in res ) {
                res[i] = src[i] as string;
            }
        }
        return res;
}



// dictionary
export function Create_StringObjectDictionary_From(src:any) : carriers.StringObjectDictionary {
        let res : carriers.StringObjectDictionary = src as carriers.StringObjectDictionary;
        if( res ) {
            for(let i in res ) {
                res[i] = Create_Object_From(src[i]);
            }
        }
        return res;
}



export function Create_StructuredAddress_From(src:any) : carriers.StructuredAddress {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.AtypeIdx= enums.AddressType[src.AtypeIdx];
        res.Address1= src.Address1 as string;
        res.Address2= src.Address2 as string;
        res.Address3= src.Address3 as string;
        res.City= src.City as string;
        res.County= src.County as string;
        res.State= src.State as string;
        res.Zipcode= src.Zipcode as string;
        res.Formatted= src.Formatted as string;
        return res as carriers.StructuredAddress;
}

export function Create_StructuredAddressArray_From(src:any) : carriers.StructuredAddress[] {
    let res : carriers.StructuredAddress[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_StructuredAddress_From(src[i]);
        }
    }
    return res;
}

export function Create_StructuredAddressArrayArray_From(src:any) : carriers.StructuredAddress[][] {
    let res : carriers.StructuredAddress[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_StructuredAddressArray_From(src[i]);
        }
    }
    return res;
}




export function Create_TableRight_From(src:any) : carriers.TableRight {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.Mask= Create_ETableRight_From(src.Mask) as enums.ETableRight;
        res.Reason= src.Reason as string;
        return res as carriers.TableRight;
}

export function Create_TableRightArray_From(src:any) : carriers.TableRight[] {
    let res : carriers.TableRight[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TableRight_From(src[i]);
        }
    }
    return res;
}

export function Create_TableRightArrayArray_From(src:any) : carriers.TableRight[][] {
    let res : carriers.TableRight[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TableRightArray_From(src[i]);
        }
    }
    return res;
}




export function Create_TicketFormSubmission_From(src:any) : carriers.TicketFormSubmission {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.FormSubmissionId= src.FormSubmissionId as number;
        res.EmailAddress= src.EmailAddress as string;
        res.Status= enums.FormSubmissionStatus[src.Status];
        return res as carriers.TicketFormSubmission;
}

export function Create_TicketFormSubmissionArray_From(src:any) : carriers.TicketFormSubmission[] {
    let res : carriers.TicketFormSubmission[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TicketFormSubmission_From(src[i]);
        }
    }
    return res;
}

export function Create_TicketFormSubmissionArrayArray_From(src:any) : carriers.TicketFormSubmission[][] {
    let res : carriers.TicketFormSubmission[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TicketFormSubmissionArray_From(src[i]);
        }
    }
    return res;
}




export function Create_TicketMessageHeader_From(src:any) : carriers.TicketMessageHeader {
        if( src === null || src === undefined )
            return null;
        let res : carriers.TicketMessageHeader = Create_Carrier_From(src) as carriers.TicketMessageHeader;
        
        res.Id= src.Id as number;
        res.Name= src.Name as string;
        res.Value= src.Value as string;
        res.StdItem= enums.MessageHeaderStdItem[src.StdItem];
        res.StdItemCol= enums.MessageHeaderStdItemCol[src.StdItemCol];
        return res as carriers.TicketMessageHeader;
}

export function Create_TicketMessageHeaderArray_From(src:any) : carriers.TicketMessageHeader[] {
    let res : carriers.TicketMessageHeader[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TicketMessageHeader_From(src[i]);
        }
    }
    return res;
}

export function Create_TicketMessageHeaderArrayArray_From(src:any) : carriers.TicketMessageHeader[][] {
    let res : carriers.TicketMessageHeader[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TicketMessageHeaderArray_From(src[i]);
        }
    }
    return res;
}




export function Create_UserCandidate_From(src:any) : carriers.UserCandidate {
        if( src === null || src === undefined )
            return null;
        let res : carriers.UserCandidate = Create_Carrier_From(src) as carriers.UserCandidate;
        
        res.UserCandidateId= src.UserCandidateId as number;
        res.PersonId= src.PersonId as number;
        res.SecretKey= src.SecretKey as string;
        res.SecretValue= src.SecretValue as string;
        return res as carriers.UserCandidate;
}

export function Create_UserCandidateArray_From(src:any) : carriers.UserCandidate[] {
    let res : carriers.UserCandidate[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_UserCandidate_From(src[i]);
        }
    }
    return res;
}

export function Create_UserCandidateArrayArray_From(src:any) : carriers.UserCandidate[][] {
    let res : carriers.UserCandidate[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_UserCandidateArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ApproveRejectResponse_From(src:any) : carriers.ApproveRejectResponse {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ApproveRejectResponse = Create_Carrier_From(src) as carriers.ApproveRejectResponse;
        
        res.PluginResponse= Create_PluginResponse_From(src.PluginResponse);
        res.CreatedAppointmentId= src.CreatedAppointmentId as number;
        return res as carriers.ApproveRejectResponse;
}

export function Create_ApproveRejectResponseArray_From(src:any) : carriers.ApproveRejectResponse[] {
    let res : carriers.ApproveRejectResponse[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ApproveRejectResponse_From(src[i]);
        }
    }
    return res;
}

export function Create_ApproveRejectResponseArrayArray_From(src:any) : carriers.ApproveRejectResponse[][] {
    let res : carriers.ApproveRejectResponse[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ApproveRejectResponseArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ChangedData_From(src:any) : carriers.ChangedData {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ChangedData = Create_Carrier_From(src) as carriers.ChangedData;
        
        res.AddedRecords= Create_ChangedDataItemArray_From(src.AddedRecords);
        res.UpdatedRecords= Create_ChangedDataItemArray_From(src.UpdatedRecords);
        res.DeletedRecords= Create_ChangedDataItemArray_From(src.DeletedRecords);
        return res as carriers.ChangedData;
}

export function Create_ChangedDataArray_From(src:any) : carriers.ChangedData[] {
    let res : carriers.ChangedData[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ChangedData_From(src[i]);
        }
    }
    return res;
}

export function Create_ChangedDataArrayArray_From(src:any) : carriers.ChangedData[][] {
    let res : carriers.ChangedData[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ChangedDataArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ChangedDataItem_From(src:any) : carriers.ChangedDataItem {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ChangedDataItem = Create_Carrier_From(src) as carriers.ChangedDataItem;
        
        res.Tablename= src.Tablename as string;
        res.RecordId= src.RecordId as number;
        return res as carriers.ChangedDataItem;
}

export function Create_ChangedDataItemArray_From(src:any) : carriers.ChangedDataItem[] {
    let res : carriers.ChangedDataItem[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ChangedDataItem_From(src[i]);
        }
    }
    return res;
}

export function Create_ChangedDataItemArrayArray_From(src:any) : carriers.ChangedDataItem[][] {
    let res : carriers.ChangedDataItem[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ChangedDataItemArray_From(src[i]);
        }
    }
    return res;
}




export function Create_FieldMetadata_From(src:any) : carriers.FieldMetadata {
        if( src === null || src === undefined )
            return null;
        let res : carriers.FieldMetadata = Create_Carrier_From(src) as carriers.FieldMetadata;
        
        res.FieldKey= src.FieldKey as string;
        res.Rank= src.Rank as number;
        res.DisplayName= src.DisplayName as string;
        res.DisplayDescription= src.DisplayDescription as string;
        res.FieldType= enums.FieldMetadataType[src.FieldType];
        res.ListName= src.ListName as string;
        res.DefaultValue= src.DefaultValue as string;
        res.MaxLength= src.MaxLength as number;
        res.Access= enums.FieldAccess[src.Access];
        res.ShowInSearch= src.ShowInSearch as boolean;
        return res as carriers.FieldMetadata;
}

export function Create_FieldMetadataArray_From(src:any) : carriers.FieldMetadata[] {
    let res : carriers.FieldMetadata[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldMetadata_From(src[i]);
        }
    }
    return res;
}

export function Create_FieldMetadataArrayArray_From(src:any) : carriers.FieldMetadata[][] {
    let res : carriers.FieldMetadata[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldMetadataArray_From(src[i]);
        }
    }
    return res;
}




// dictionary
export function Create_FieldMetadataDictionary_From(src:any) : carriers.FieldMetadataDictionary {
        let res : carriers.FieldMetadataDictionary = src as carriers.FieldMetadataDictionary;
        if( res ) {
            for(let i in res ) {
                res[i] = Create_FieldMetadata_From(src[i]);
            }
        }
        return res;
}



export function Create_PluginResponse_From(src:any) : carriers.PluginResponse {
        if( src === null || src === undefined )
            return null;
        let res : carriers.PluginResponse = Create_Carrier_From(src) as carriers.PluginResponse;
        
        res.IsOk= src.IsOk as boolean;
        res.UserExplanation= src.UserExplanation as string;
        res.TechExplanation= src.TechExplanation as string;
        res.ErrorCode= src.ErrorCode as string;
        res.Changes= Create_ChangedData_From(src.Changes);
        res.Status= enums.QuoteStatus[src.Status];
        return res as carriers.PluginResponse;
}

export function Create_PluginResponseArray_From(src:any) : carriers.PluginResponse[] {
    let res : carriers.PluginResponse[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PluginResponse_From(src[i]);
        }
    }
    return res;
}

export function Create_PluginResponseArrayArray_From(src:any) : carriers.PluginResponse[][] {
    let res : carriers.PluginResponse[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PluginResponseArray_From(src[i]);
        }
    }
    return res;
}




export function Create_PluginUrlResponse_From(src:any) : carriers.PluginUrlResponse {
        if( src === null || src === undefined )
            return null;
        let res : carriers.PluginUrlResponse = Create_Carrier_From(src) as carriers.PluginUrlResponse;
        
        res.IsOk= src.IsOk as boolean;
        res.UserExplanation= src.UserExplanation as string;
        res.TechExplanation= src.TechExplanation as string;
        res.ErrorCode= src.ErrorCode as string;
        res.Changes= Create_ChangedData_From(src.Changes);
        res.Url= src.Url as string;
        res.Status= enums.QuoteStatus[src.Status];
        return res as carriers.PluginUrlResponse;
}

export function Create_PluginUrlResponseArray_From(src:any) : carriers.PluginUrlResponse[] {
    let res : carriers.PluginUrlResponse[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PluginUrlResponse_From(src[i]);
        }
    }
    return res;
}

export function Create_PluginUrlResponseArrayArray_From(src:any) : carriers.PluginUrlResponse[][] {
    let res : carriers.PluginUrlResponse[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PluginUrlResponseArray_From(src[i]);
        }
    }
    return res;
}




export function Create_PriceList_From(src:any) : carriers.PriceList {
        if( src === null || src === undefined )
            return null;
        let res : carriers.PriceList = Create_Carrier_From(src) as carriers.PriceList;
        
        res.PriceListId= src.PriceListId as number;
        res.ERPPriceListKey= src.ERPPriceListKey as string;
        res.QuoteConnectionId= src.QuoteConnectionId as number;
        res.Name= src.Name as string;
        res.Description= src.Description as string;
        res.Currency= src.Currency as string;
        res.CurrencyName= src.CurrencyName as string;
        res.ValidFrom= Create_Date_From(src.ValidFrom);
        res.ValidTo= Create_Date_From(src.ValidTo);
        res.IsActive= src.IsActive as boolean;
        return res as carriers.PriceList;
}

export function Create_PriceListArray_From(src:any) : carriers.PriceList[] {
    let res : carriers.PriceList[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PriceList_From(src[i]);
        }
    }
    return res;
}

export function Create_PriceListArrayArray_From(src:any) : carriers.PriceList[][] {
    let res : carriers.PriceList[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PriceListArray_From(src[i]);
        }
    }
    return res;
}




export function Create_Product_From(src:any) : carriers.Product {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Product = Create_Carrier_From(src) as carriers.Product;
        
        res.ProductId= src.ProductId as number;
        res.ERPProductKey= src.ERPProductKey as string;
        res.ERPPriceListKey= src.ERPPriceListKey as string;
        res.Name= src.Name as string;
        res.Description= src.Description as string;
        res.Code= src.Code as string;
        res.PriceUnit= src.PriceUnit as string;
        res.QuantityUnit= src.QuantityUnit as string;
        res.IsSubscription= src.IsSubscription as boolean;
        res.SubscriptionUnit= src.SubscriptionUnit as string;
        res.DefaultSubscriptionQuantity= src.DefaultSubscriptionQuantity as number;
        res.ItemNumber= src.ItemNumber as string;
        res.Url= src.Url as string;
        res.ProductCategoryKey= src.ProductCategoryKey as string;
        res.ProductFamilyKey= src.ProductFamilyKey as string;
        res.ProductTypeKey= src.ProductTypeKey as string;
        res.VAT= src.VAT as number;
        res.VATInfo= src.VATInfo as string;
        res.UnitCost= src.UnitCost as number;
        res.UnitMinimumPrice= src.UnitMinimumPrice as number;
        res.UnitListPrice= src.UnitListPrice as number;
        res.InAssortment= src.InAssortment as boolean;
        res.Supplier= src.Supplier as string;
        res.SupplierCode= src.SupplierCode as string;
        res.Rights= src.Rights as string;
        res.Rule= src.Rule as string;
        res.ExtraInfo= Create_ProductExtraDataFieldArray_From(src.ExtraInfo);
        res.RawExtraInfo= src.RawExtraInfo as string;
        res.ExtraField1= src.ExtraField1 as string;
        res.ExtraField2= src.ExtraField2 as string;
        res.ExtraField3= src.ExtraField3 as string;
        res.ExtraField4= src.ExtraField4 as string;
        res.ExtraField5= src.ExtraField5 as string;
        res.InStock= src.InStock as number;
        return res as carriers.Product;
}

export function Create_ProductArray_From(src:any) : carriers.Product[] {
    let res : carriers.Product[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Product_From(src[i]);
        }
    }
    return res;
}

export function Create_ProductArrayArray_From(src:any) : carriers.Product[][] {
    let res : carriers.Product[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ProductArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ProductExtraDataField_From(src:any) : carriers.ProductExtraDataField {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ProductExtraDataField = Create_Carrier_From(src) as carriers.ProductExtraDataField;
        
        res.Name= src.Name as string;
        res.Value= src.Value as string;
        res.Type= enums.ExtraDataFieldType[src.Type];
        return res as carriers.ProductExtraDataField;
}

export function Create_ProductExtraDataFieldArray_From(src:any) : carriers.ProductExtraDataField[] {
    let res : carriers.ProductExtraDataField[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ProductExtraDataField_From(src[i]);
        }
    }
    return res;
}

export function Create_ProductExtraDataFieldArrayArray_From(src:any) : carriers.ProductExtraDataField[][] {
    let res : carriers.ProductExtraDataField[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ProductExtraDataFieldArray_From(src[i]);
        }
    }
    return res;
}




export function Create_Quote_From(src:any) : carriers.Quote {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Quote = Create_Carrier_From(src) as carriers.Quote;
        
        res.QuoteId= src.QuoteId as number;
        res.SaleId= src.SaleId as number;
        res.QuoteConnectionId= src.QuoteConnectionId as number;
        res.ERPQuoteKey= src.ERPQuoteKey as string;
        res.ERPOrderKey= src.ERPOrderKey as string;
        res.ActiveQuoteVersionId= src.ActiveQuoteVersionId as number;
        res.AcceptedQuoteAlternativeId= src.AcceptedQuoteAlternativeId as number;
        res.UseValuesFromQuote= src.UseValuesFromQuote as number;
        res.DocumentId= src.DocumentId as number;
        res.PoNumber= src.PoNumber as string;
        res.OrderComment= src.OrderComment as string;
        res.PreferredEmailCulture= src.PreferredEmailCulture as string;
        res.ActiveQuoteVersion= Create_QuoteVersion_From(src.ActiveQuoteVersion);
        res.FavoriteQuoteAlternative= Create_QuoteAlternative_From(src.FavoriteQuoteAlternative);
        return res as carriers.Quote;
}

export function Create_QuoteArray_From(src:any) : carriers.Quote[] {
    let res : carriers.Quote[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Quote_From(src[i]);
        }
    }
    return res;
}

export function Create_QuoteArrayArray_From(src:any) : carriers.Quote[][] {
    let res : carriers.Quote[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteArray_From(src[i]);
        }
    }
    return res;
}




export function Create_QuoteAlternative_From(src:any) : carriers.QuoteAlternative {
        if( src === null || src === undefined )
            return null;
        let res : carriers.QuoteAlternative = Create_Carrier_From(src) as carriers.QuoteAlternative;
        
        res.QuoteAlternativeId= src.QuoteAlternativeId as number;
        res.ERPQuoteAlternativeKey= src.ERPQuoteAlternativeKey as string;
        res.QuoteVersionId= src.QuoteVersionId as number;
        res.Name= src.Name as string;
        res.Description= src.Description as string;
        res.Status= enums.QuoteStatus[src.Status];
        res.Reason= src.Reason as string;
        res.ERPDiscountPercent= src.ERPDiscountPercent as number;
        res.ERPDiscountAmount= src.ERPDiscountAmount as number;
        res.DiscountPercent= src.DiscountPercent as number;
        res.DiscountAmount= src.DiscountAmount as number;
        res.UserValueOverride= enums.ValueOverride[src.UserValueOverride];
        res.VATInfo= src.VATInfo as string;
        res.VAT= src.VAT as number;
        res.EarningPercent= src.EarningPercent as number;
        res.EarningAmount= src.EarningAmount as number;
        res.SubTotal= src.SubTotal as number;
        res.TotalPrice= src.TotalPrice as number;
        res.ExtraField1= src.ExtraField1 as string;
        res.ExtraField2= src.ExtraField2 as string;
        res.ExtraField3= src.ExtraField3 as string;
        res.ExtraField4= src.ExtraField4 as string;
        res.ExtraField5= src.ExtraField5 as string;
        return res as carriers.QuoteAlternative;
}

export function Create_QuoteAlternativeArray_From(src:any) : carriers.QuoteAlternative[] {
    let res : carriers.QuoteAlternative[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteAlternative_From(src[i]);
        }
    }
    return res;
}

export function Create_QuoteAlternativeArrayArray_From(src:any) : carriers.QuoteAlternative[][] {
    let res : carriers.QuoteAlternative[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteAlternativeArray_From(src[i]);
        }
    }
    return res;
}




export function Create_QuoteAlternativeRecalculated_From(src:any) : carriers.QuoteAlternativeRecalculated {
        if( src === null || src === undefined )
            return null;
        let res : carriers.QuoteAlternativeRecalculated = Create_Carrier_From(src) as carriers.QuoteAlternativeRecalculated;
        
        res.QuoteLinesHasChanged= src.QuoteLinesHasChanged as boolean;
        res.ChangedQuoteAlternative= Create_QuoteAlternative_From(src.ChangedQuoteAlternative);
        res.Changes= Create_ChangedData_From(src.Changes);
        return res as carriers.QuoteAlternativeRecalculated;
}

export function Create_QuoteAlternativeRecalculatedArray_From(src:any) : carriers.QuoteAlternativeRecalculated[] {
    let res : carriers.QuoteAlternativeRecalculated[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteAlternativeRecalculated_From(src[i]);
        }
    }
    return res;
}

export function Create_QuoteAlternativeRecalculatedArrayArray_From(src:any) : carriers.QuoteAlternativeRecalculated[][] {
    let res : carriers.QuoteAlternativeRecalculated[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteAlternativeRecalculatedArray_From(src[i]);
        }
    }
    return res;
}




export function Create_QuoteConnection_From(src:any) : carriers.QuoteConnection {
        if( src === null || src === undefined )
            return null;
        let res : carriers.QuoteConnection = Create_Carrier_From(src) as carriers.QuoteConnection;
        
        res.QuoteConnectionId= src.QuoteConnectionId as number;
        res.ERPName= src.ERPName as string;
        res.DisplayName= src.DisplayName as string;
        res.DisplayDescription= src.DisplayDescription as string;
        res.Rank= src.Rank as number;
        res.ConnectorName= src.ConnectorName as string;
        res.ErpConnectionId= src.ErpConnectionId as number;
        res.ExtraData= src.ExtraData as string;
        res.IsAvailable= src.IsAvailable as boolean;
        res.InitializeResponse= Create_PluginResponse_From(src.InitializeResponse);
        res.PriceLists= Create_PriceListArray_From(src.PriceLists);
        res.AllAccess= src.AllAccess as boolean;
        res.Deleted= src.Deleted as boolean;
        res.UserGroupAccessIds= src.UserGroupAccessIds as number[];
        res.AssociateAccessIds= src.AssociateAccessIds as number[];
        return res as carriers.QuoteConnection;
}

export function Create_QuoteConnectionArray_From(src:any) : carriers.QuoteConnection[] {
    let res : carriers.QuoteConnection[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteConnection_From(src[i]);
        }
    }
    return res;
}

export function Create_QuoteConnectionArrayArray_From(src:any) : carriers.QuoteConnection[][] {
    let res : carriers.QuoteConnection[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteConnectionArray_From(src[i]);
        }
    }
    return res;
}




export function Create_QuoteContext_From(src:any) : carriers.QuoteContext {
        if( src === null || src === undefined )
            return null;
        let res : carriers.QuoteContext = Create_Carrier_From(src) as carriers.QuoteContext;
        
        res.CRMAssociate= Create_Associate_From(src.CRMAssociate);
        res.CRMSale= Create_Sale_From(src.CRMSale);
        res.CRMQuoteVersion= Create_QuoteVersion_From(src.CRMQuoteVersion);
        res.CRMQuoteAlternative= Create_QuoteAlternative_From(src.CRMQuoteAlternative);
        res.CRMQuoteLine= Create_QuoteLine_From(src.CRMQuoteLine);
        res.UserLanguageCode= src.UserLanguageCode as string;
        return res as carriers.QuoteContext;
}

export function Create_QuoteContextArray_From(src:any) : carriers.QuoteContext[] {
    let res : carriers.QuoteContext[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteContext_From(src[i]);
        }
    }
    return res;
}

export function Create_QuoteContextArrayArray_From(src:any) : carriers.QuoteContext[][] {
    let res : carriers.QuoteContext[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteContextArray_From(src[i]);
        }
    }
    return res;
}




export function Create_QuoteEntity_From(src:any) : carriers.QuoteEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.QuoteEntity = Create_Carrier_From(src) as carriers.QuoteEntity;
        
        res.QuoteId= src.QuoteId as number;
        res.SaleId= src.SaleId as number;
        res.QuoteConnectionId= src.QuoteConnectionId as number;
        res.ERPQuoteKey= src.ERPQuoteKey as string;
        res.ERPOrderKey= src.ERPOrderKey as string;
        res.ActiveQuoteVersionId= src.ActiveQuoteVersionId as number;
        res.AcceptedQuoteAlternativeId= src.AcceptedQuoteAlternativeId as number;
        res.UseValuesFromQuote= src.UseValuesFromQuote as number;
        res.DocumentId= src.DocumentId as number;
        res.PoNumber= src.PoNumber as string;
        res.OrderComment= src.OrderComment as string;
        res.PreferredEmailCulture= src.PreferredEmailCulture as string;
        res.QuoteVersions= Create_QuoteVersionArray_From(src.QuoteVersions);
        return res as carriers.QuoteEntity;
}

export function Create_QuoteEntityArray_From(src:any) : carriers.QuoteEntity[] {
    let res : carriers.QuoteEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_QuoteEntityArrayArray_From(src:any) : carriers.QuoteEntity[][] {
    let res : carriers.QuoteEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_QuoteLine_From(src:any) : carriers.QuoteLine {
        if( src === null || src === undefined )
            return null;
        let res : carriers.QuoteLine = Create_Carrier_From(src) as carriers.QuoteLine;
        
        res.QuoteLineId= src.QuoteLineId as number;
        res.ERPQuoteLineKey= src.ERPQuoteLineKey as string;
        res.QuoteAlternativeId= src.QuoteAlternativeId as number;
        res.ERPProductKey= src.ERPProductKey as string;
        res.Status= enums.QuoteStatus[src.Status];
        res.Reason= src.Reason as string;
        res.Quantity= src.Quantity as number;
        res.DeliveredQuantity= src.DeliveredQuantity as number;
        res.Rank= src.Rank as number;
        res.Name= src.Name as string;
        res.Description= src.Description as string;
        res.Code= src.Code as string;
        res.QuantityUnit= src.QuantityUnit as string;
        res.PriceUnit= src.PriceUnit as string;
        res.ItemNumber= src.ItemNumber as string;
        res.Url= src.Url as string;
        res.ProductCategoryKey= src.ProductCategoryKey as string;
        res.ProductFamilyKey= src.ProductFamilyKey as string;
        res.ProductTypeKey= src.ProductTypeKey as string;
        res.Supplier= src.Supplier as string;
        res.SupplierCode= src.SupplierCode as string;
        res.Thumbnail= src.Thumbnail as string;
        res.VATInfo= src.VATInfo as string;
        res.VAT= src.VAT as number;
        res.UnitCost= src.UnitCost as number;
        res.UnitMinimumPrice= src.UnitMinimumPrice as number;
        res.UnitListPrice= src.UnitListPrice as number;
        res.ExtraInfo= Create_ProductExtraDataFieldArray_From(src.ExtraInfo);
        res.RawExtraInfo= src.RawExtraInfo as string;
        res.IsSubscription= src.IsSubscription as boolean;
        res.SubscriptionUnit= src.SubscriptionUnit as string;
        res.SubscriptionQuantity= src.SubscriptionQuantity as number;
        res.SubscriptionStart= Create_Date_From(src.SubscriptionStart);
        res.ERPDiscountPercent= src.ERPDiscountPercent as number;
        res.ERPDiscountAmount= src.ERPDiscountAmount as number;
        res.DiscountPercent= src.DiscountPercent as number;
        res.DiscountAmount= src.DiscountAmount as number;
        res.UserValueOverride= enums.ValueOverride[src.UserValueOverride];
        res.EarningPercent= src.EarningPercent as number;
        res.EarningAmount= src.EarningAmount as number;
        res.SubTotal= src.SubTotal as number;
        res.TotalPrice= src.TotalPrice as number;
        res.Rights= src.Rights as string;
        res.Rule= src.Rule as string;
        res.ExtraField1= src.ExtraField1 as string;
        res.ExtraField2= src.ExtraField2 as string;
        res.ExtraField3= src.ExtraField3 as string;
        res.ExtraField4= src.ExtraField4 as string;
        res.ExtraField5= src.ExtraField5 as string;
        return res as carriers.QuoteLine;
}

export function Create_QuoteLineArray_From(src:any) : carriers.QuoteLine[] {
    let res : carriers.QuoteLine[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteLine_From(src[i]);
        }
    }
    return res;
}

export function Create_QuoteLineArrayArray_From(src:any) : carriers.QuoteLine[][] {
    let res : carriers.QuoteLine[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteLineArray_From(src[i]);
        }
    }
    return res;
}




export function Create_QuoteLineConfiguration_From(src:any) : carriers.QuoteLineConfiguration {
        if( src === null || src === undefined )
            return null;
        let res : carriers.QuoteLineConfiguration = Create_Carrier_From(src) as carriers.QuoteLineConfiguration;
        
        res.QuoteLineConfigurationId= src.QuoteLineConfigurationId as number;
        res.FieldName= src.FieldName as string;
        res.Label= src.Label as string;
        res.Tooltip= src.Tooltip as string;
        res.Editable= src.Editable as boolean;
        res.InUse= src.InUse as boolean;
        res.Mandatory= src.Mandatory as boolean;
        res.Rank= src.Rank as number;
        res.RestrictEdit= src.RestrictEdit as boolean;
        return res as carriers.QuoteLineConfiguration;
}

export function Create_QuoteLineConfigurationArray_From(src:any) : carriers.QuoteLineConfiguration[] {
    let res : carriers.QuoteLineConfiguration[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteLineConfiguration_From(src[i]);
        }
    }
    return res;
}

export function Create_QuoteLineConfigurationArrayArray_From(src:any) : carriers.QuoteLineConfiguration[][] {
    let res : carriers.QuoteLineConfiguration[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteLineConfigurationArray_From(src[i]);
        }
    }
    return res;
}




export function Create_QuoteListItem_From(src:any) : carriers.QuoteListItem {
        if( src === null || src === undefined )
            return null;
        let res : carriers.QuoteListItem = Create_Carrier_From(src) as carriers.QuoteListItem;
        
        res.ERPQuoteListItemKey= src.ERPQuoteListItemKey as string;
        res.DisplayValue= src.DisplayValue as string;
        res.DisplayDescription= src.DisplayDescription as string;
        return res as carriers.QuoteListItem;
}

export function Create_QuoteListItemArray_From(src:any) : carriers.QuoteListItem[] {
    let res : carriers.QuoteListItem[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteListItem_From(src[i]);
        }
    }
    return res;
}

export function Create_QuoteListItemArrayArray_From(src:any) : carriers.QuoteListItem[][] {
    let res : carriers.QuoteListItem[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteListItemArray_From(src[i]);
        }
    }
    return res;
}




export function Create_QuotePublishDocuments_From(src:any) : carriers.QuotePublishDocuments {
        if( src === null || src === undefined )
            return null;
        let res : carriers.QuotePublishDocuments = Create_Carrier_From(src) as carriers.QuotePublishDocuments;
        
        res.QuoteDocumentId= src.QuoteDocumentId as number;
        res.QuotedProductsId= src.QuotedProductsId as number;
        res.QuoteAttachmentIds= src.QuoteAttachmentIds as number[];
        res.MailBody= src.MailBody as string;
        res.MailSubject= src.MailSubject as string;
        res.ToEmail= src.ToEmail as string;
        res.ToFullName= src.ToFullName as string;
        res.ErrorMessage= src.ErrorMessage as string;
        return res as carriers.QuotePublishDocuments;
}

export function Create_QuotePublishDocumentsArray_From(src:any) : carriers.QuotePublishDocuments[] {
    let res : carriers.QuotePublishDocuments[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuotePublishDocuments_From(src[i]);
        }
    }
    return res;
}

export function Create_QuotePublishDocumentsArrayArray_From(src:any) : carriers.QuotePublishDocuments[][] {
    let res : carriers.QuotePublishDocuments[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuotePublishDocumentsArray_From(src[i]);
        }
    }
    return res;
}




export function Create_QuoteVersion_From(src:any) : carriers.QuoteVersion {
        if( src === null || src === undefined )
            return null;
        let res : carriers.QuoteVersion = Create_Carrier_From(src) as carriers.QuoteVersion;
        
        res.QuoteVersionId= src.QuoteVersionId as number;
        res.ERPQuoteVersionKey= src.ERPQuoteVersionKey as string;
        res.QuoteId= src.QuoteId as number;
        res.Description= src.Description as string;
        res.Number= src.Number as string;
        res.State= enums.QuoteVersionState[src.State];
        res.ArchivedState= enums.QuoteVersionState[src.ArchivedState];
        res.Status= enums.QuoteStatus[src.Status];
        res.Reason= src.Reason as string;
        res.LikelyQuoteAlternativeId= src.LikelyQuoteAlternativeId as number;
        res.SentDate= Create_Date_From(src.SentDate);
        res.FollowupId= src.FollowupId as number;
        res.ExpirationDate= Create_Date_From(src.ExpirationDate);
        res.DeliveryCountryId= src.DeliveryCountryId as number;
        res.HasOwnDeliveryAddress= src.HasOwnDeliveryAddress as boolean;
        res.InvoiceCountryId= src.InvoiceCountryId as number;
        res.HasOwnInvoiceAddress= src.HasOwnInvoiceAddress as boolean;
        res.ERPPaymentTermsKey= src.ERPPaymentTermsKey as string;
        res.ERPPaymentTypeKey= src.ERPPaymentTypeKey as string;
        res.ERPDeliveryTermsKey= src.ERPDeliveryTermsKey as string;
        res.ERPDeliveryTypeKey= src.ERPDeliveryTypeKey as string;
        res.Rank= src.Rank as number;
        res.ApprovedBy= src.ApprovedBy as number;
        res.ApprovedText= src.ApprovedText as string;
        res.ApprovedRegisteredBy= src.ApprovedRegisteredBy as number;
        res.ApprovedRegisteredDate= Create_Date_From(src.ApprovedRegisteredDate);
        res.ExtraField1= src.ExtraField1 as string;
        res.ExtraField2= src.ExtraField2 as string;
        res.ExtraField3= src.ExtraField3 as string;
        res.ExtraField4= src.ExtraField4 as string;
        res.ExtraField5= src.ExtraField5 as string;
        res.LastRecalculated= Create_Date_From(src.LastRecalculated);
        res.Updated= Create_Date_From(src.Updated);
        res.UpdatedAssociateId= src.UpdatedAssociateId as number;
        res.Registered= Create_Date_From(src.Registered);
        res.RegisteredAssociateId= src.RegisteredAssociateId as number;
        res.RequestAssociateId= src.RequestAssociateId as number;
        res.RequestComment= src.RequestComment as string;
        res.QuoteAlternatives= Create_QuoteAlternativeArray_From(src.QuoteAlternatives);
        return res as carriers.QuoteVersion;
}

export function Create_QuoteVersionArray_From(src:any) : carriers.QuoteVersion[] {
    let res : carriers.QuoteVersion[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteVersion_From(src[i]);
        }
    }
    return res;
}

export function Create_QuoteVersionArrayArray_From(src:any) : carriers.QuoteVersion[][] {
    let res : carriers.QuoteVersion[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteVersionArray_From(src[i]);
        }
    }
    return res;
}




export function Create_QuoteVersionAttachment_From(src:any) : carriers.QuoteVersionAttachment {
        if( src === null || src === undefined )
            return null;
        let res : carriers.QuoteVersionAttachment = Create_Carrier_From(src) as carriers.QuoteVersionAttachment;
        
        res.DocumentId= src.DocumentId as number;
        res.Included= src.Included as boolean;
        return res as carriers.QuoteVersionAttachment;
}

export function Create_QuoteVersionAttachmentArray_From(src:any) : carriers.QuoteVersionAttachment[] {
    let res : carriers.QuoteVersionAttachment[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteVersionAttachment_From(src[i]);
        }
    }
    return res;
}

export function Create_QuoteVersionAttachmentArrayArray_From(src:any) : carriers.QuoteVersionAttachment[][] {
    let res : carriers.QuoteVersionAttachment[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteVersionAttachmentArray_From(src[i]);
        }
    }
    return res;
}




export function Create_QuoteVersionButtonState_From(src:any) : carriers.QuoteVersionButtonState {
        if( src === null || src === undefined )
            return null;
        let res : carriers.QuoteVersionButtonState = Create_Carrier_From(src) as carriers.QuoteVersionButtonState;
        
        res.Action= enums.QuoteVersionButtonAction[src.Action];
        res.ImageHint= src.ImageHint as string;
        res.DisplayText= src.DisplayText as string;
        res.TooltipText= src.TooltipText as string;
        res.Enabled= src.Enabled as boolean;
        return res as carriers.QuoteVersionButtonState;
}

export function Create_QuoteVersionButtonStateArray_From(src:any) : carriers.QuoteVersionButtonState[] {
    let res : carriers.QuoteVersionButtonState[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteVersionButtonState_From(src[i]);
        }
    }
    return res;
}

export function Create_QuoteVersionButtonStateArrayArray_From(src:any) : carriers.QuoteVersionButtonState[][] {
    let res : carriers.QuoteVersionButtonState[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteVersionButtonStateArray_From(src[i]);
        }
    }
    return res;
}




export function Create_QuoteVersionStatusInformation_From(src:any) : carriers.QuoteVersionStatusInformation {
        if( src === null || src === undefined )
            return null;
        let res : carriers.QuoteVersionStatusInformation = Create_Carrier_From(src) as carriers.QuoteVersionStatusInformation;
        
        res.Status= enums.QuoteStatus[src.Status];
        res.IconHint= src.IconHint as string;
        res.DisplayMessage= src.DisplayMessage as string;
        res.DisplayTooltip= src.DisplayTooltip as string;
        return res as carriers.QuoteVersionStatusInformation;
}

export function Create_QuoteVersionStatusInformationArray_From(src:any) : carriers.QuoteVersionStatusInformation[] {
    let res : carriers.QuoteVersionStatusInformation[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteVersionStatusInformation_From(src[i]);
        }
    }
    return res;
}

export function Create_QuoteVersionStatusInformationArrayArray_From(src:any) : carriers.QuoteVersionStatusInformation[][] {
    let res : carriers.QuoteVersionStatusInformation[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteVersionStatusInformationArray_From(src[i]);
        }
    }
    return res;
}




export function Create_QuoteVersionValidated_From(src:any) : carriers.QuoteVersionValidated {
        if( src === null || src === undefined )
            return null;
        let res : carriers.QuoteVersionValidated = Create_Carrier_From(src) as carriers.QuoteVersionValidated;
        
        res.IsOk= src.IsOk as boolean;
        res.UserExplanation= src.UserExplanation as string;
        res.TechExplanation= src.TechExplanation as string;
        res.ErrorCode= src.ErrorCode as string;
        res.ChangedSale= Create_Sale_From(src.ChangedSale);
        res.ChangedQuote= Create_Quote_From(src.ChangedQuote);
        res.ChangedQuoteVersion= Create_QuoteVersion_From(src.ChangedQuoteVersion);
        res.ChangedQuoteAlternatives= Create_QuoteAlternativeRecalculatedArray_From(src.ChangedQuoteAlternatives);
        res.Status= enums.QuoteStatus[src.Status];
        return res as carriers.QuoteVersionValidated;
}

export function Create_QuoteVersionValidatedArray_From(src:any) : carriers.QuoteVersionValidated[] {
    let res : carriers.QuoteVersionValidated[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteVersionValidated_From(src[i]);
        }
    }
    return res;
}

export function Create_QuoteVersionValidatedArrayArray_From(src:any) : carriers.QuoteVersionValidated[][] {
    let res : carriers.QuoteVersionValidated[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteVersionValidatedArray_From(src[i]);
        }
    }
    return res;
}




export function Create_QuoteVersionWorkflowState_From(src:any) : carriers.QuoteVersionWorkflowState {
        if( src === null || src === undefined )
            return null;
        let res : carriers.QuoteVersionWorkflowState = Create_Carrier_From(src) as carriers.QuoteVersionWorkflowState;
        
        res.ActionButtons= Create_QuoteVersionButtonStateArray_From(src.ActionButtons);
        res.StateImage= Create_QuoteVersionButtonState_From(src.StateImage);
        res.UpdatePricesButton= Create_QuoteVersionButtonState_From(src.UpdatePricesButton);
        res.Status= Create_QuoteVersionStatusInformation_From(src.Status);
        return res as carriers.QuoteVersionWorkflowState;
}

export function Create_QuoteVersionWorkflowStateArray_From(src:any) : carriers.QuoteVersionWorkflowState[] {
    let res : carriers.QuoteVersionWorkflowState[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteVersionWorkflowState_From(src[i]);
        }
    }
    return res;
}

export function Create_QuoteVersionWorkflowStateArrayArray_From(src:any) : carriers.QuoteVersionWorkflowState[][] {
    let res : carriers.QuoteVersionWorkflowState[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteVersionWorkflowStateArray_From(src[i]);
        }
    }
    return res;
}







































export function Create_ErpConnection_From(src:any) : carriers.ErpConnection {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ErpConnection = Create_Carrier_From(src) as carriers.ErpConnection;
        
        res.ErpConnectionId= src.ErpConnectionId as number;
        res.ErpConnectorId= src.ErpConnectorId as number;
        res.DisplayName= src.DisplayName as string;
        res.DisplayDescription= src.DisplayDescription as string;
        res.Active= src.Active as boolean;
        res.ConnectionId= src.ConnectionId as string;
        res.MostRecentTimestamp= src.MostRecentTimestamp as string;
        res.ConfigFields= Create_StringDictionary_From(src.ConfigFields);
        res.Deleted= src.Deleted as boolean;
        res.AllAccess= src.AllAccess as boolean;
        res.UserGroupAccessIds= src.UserGroupAccessIds as number[];
        res.AssociateAccessIds= src.AssociateAccessIds as number[];
        return res as carriers.ErpConnection;
}

export function Create_ErpConnectionArray_From(src:any) : carriers.ErpConnection[] {
    let res : carriers.ErpConnection[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ErpConnection_From(src[i]);
        }
    }
    return res;
}

export function Create_ErpConnectionArrayArray_From(src:any) : carriers.ErpConnection[][] {
    let res : carriers.ErpConnection[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ErpConnectionArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ErpConnectionData_From(src:any) : carriers.ErpConnectionData {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ErpConnectionData = Create_Carrier_From(src) as carriers.ErpConnectionData;
        
        res.ErpConnectionId= src.ErpConnectionId as number;
        res.ConnectionName= src.ConnectionName as string;
        res.Connected= src.Connected as boolean;
        res.ErpFields= Create_FieldMetadataArray_From(src.ErpFields);
        res.CrmActorType= enums.CrmActorType[src.CrmActorType];
        res.ErpActorType= enums.ErpActorType[src.ErpActorType];
        res.ErpActorTypes= Create_ErpActorType_From(src.ErpActorTypes) as enums.ErpActorType[];
        return res as carriers.ErpConnectionData;
}

export function Create_ErpConnectionDataArray_From(src:any) : carriers.ErpConnectionData[] {
    let res : carriers.ErpConnectionData[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ErpConnectionData_From(src[i]);
        }
    }
    return res;
}

export function Create_ErpConnectionDataArrayArray_From(src:any) : carriers.ErpConnectionData[][] {
    let res : carriers.ErpConnectionData[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ErpConnectionDataArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ErpConnectionListMapping_From(src:any) : carriers.ErpConnectionListMapping {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ErpConnectionListMapping = Create_Carrier_From(src) as carriers.ErpConnectionListMapping;
        
        res.CrmList= Create_MDOListItem_From(src.CrmList);
        res.ErpListName= src.ErpListName as string;
        res.ErpCrmListItemMappings= Create_ErpCrmListItemMappingArray_From(src.ErpCrmListItemMappings);
        res.ErpActorTypeName= src.ErpActorTypeName as string;
        res.ErpFieldId= src.ErpFieldId as number;
        return res as carriers.ErpConnectionListMapping;
}

export function Create_ErpConnectionListMappingArray_From(src:any) : carriers.ErpConnectionListMapping[] {
    let res : carriers.ErpConnectionListMapping[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ErpConnectionListMapping_From(src[i]);
        }
    }
    return res;
}

export function Create_ErpConnectionListMappingArrayArray_From(src:any) : carriers.ErpConnectionListMapping[][] {
    let res : carriers.ErpConnectionListMapping[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ErpConnectionListMappingArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ErpConnectionListMappingContainer_From(src:any) : carriers.ErpConnectionListMappingContainer {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ErpConnectionListMappingContainer = Create_Carrier_From(src) as carriers.ErpConnectionListMappingContainer;
        
        res.ErpListItemMappings= Create_ErpConnectionListMappingArray_From(src.ErpListItemMappings);
        res.ErpConnectionId= src.ErpConnectionId as number;
        res.ErpConnectionName= src.ErpConnectionName as string;
        return res as carriers.ErpConnectionListMappingContainer;
}

export function Create_ErpConnectionListMappingContainerArray_From(src:any) : carriers.ErpConnectionListMappingContainer[] {
    let res : carriers.ErpConnectionListMappingContainer[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ErpConnectionListMappingContainer_From(src[i]);
        }
    }
    return res;
}

export function Create_ErpConnectionListMappingContainerArrayArray_From(src:any) : carriers.ErpConnectionListMappingContainer[][] {
    let res : carriers.ErpConnectionListMappingContainer[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ErpConnectionListMappingContainerArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ErpCrmListItemMapping_From(src:any) : carriers.ErpCrmListItemMapping {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ErpCrmListItemMapping = Create_Carrier_From(src) as carriers.ErpCrmListItemMapping;
        
        res.ErpListItemId= src.ErpListItemId as string;
        res.ErpListItemName= src.ErpListItemName as string;
        res.CrmListItem= Create_MDOListItem_From(src.CrmListItem);
        return res as carriers.ErpCrmListItemMapping;
}

export function Create_ErpCrmListItemMappingArray_From(src:any) : carriers.ErpCrmListItemMapping[] {
    let res : carriers.ErpCrmListItemMapping[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ErpCrmListItemMapping_From(src[i]);
        }
    }
    return res;
}

export function Create_ErpCrmListItemMappingArrayArray_From(src:any) : carriers.ErpCrmListItemMapping[][] {
    let res : carriers.ErpCrmListItemMapping[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ErpCrmListItemMappingArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ErpSyncFieldValue_From(src:any) : carriers.ErpSyncFieldValue {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ErpSyncFieldValue = Create_Carrier_From(src) as carriers.ErpSyncFieldValue;
        
        res.DisplayName= src.DisplayName as string;
        res.CrmFieldKey= src.CrmFieldKey as string;
        res.Value= src.Value as string;
        res.DisplayValue= src.DisplayValue as string;
        res.SyncToCrm= src.SyncToCrm as boolean;
        res.SyncToErp= src.SyncToErp as boolean;
        return res as carriers.ErpSyncFieldValue;
}

export function Create_ErpSyncFieldValueArray_From(src:any) : carriers.ErpSyncFieldValue[] {
    let res : carriers.ErpSyncFieldValue[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ErpSyncFieldValue_From(src[i]);
        }
    }
    return res;
}

export function Create_ErpSyncFieldValueArrayArray_From(src:any) : carriers.ErpSyncFieldValue[][] {
    let res : carriers.ErpSyncFieldValue[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ErpSyncFieldValueArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ErpSyncActorTypeMapping_From(src:any) : carriers.ErpSyncActorTypeMapping {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ErpSyncActorTypeMapping = Create_Carrier_From(src) as carriers.ErpSyncActorTypeMapping;
        
        res.ErpConnectionId= src.ErpConnectionId as number;
        res.IsActive= src.IsActive as boolean;
        res.FieldMappings= Create_ErpSyncFieldMappingArray_From(src.FieldMappings);
        res.ActorTypeErp= enums.ErpActorType[src.ActorTypeErp];
        res.ActorTypeCrm= enums.CrmActorType[src.ActorTypeCrm];
        return res as carriers.ErpSyncActorTypeMapping;
}

export function Create_ErpSyncActorTypeMappingArray_From(src:any) : carriers.ErpSyncActorTypeMapping[] {
    let res : carriers.ErpSyncActorTypeMapping[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ErpSyncActorTypeMapping_From(src[i]);
        }
    }
    return res;
}

export function Create_ErpSyncActorTypeMappingArrayArray_From(src:any) : carriers.ErpSyncActorTypeMapping[][] {
    let res : carriers.ErpSyncActorTypeMapping[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ErpSyncActorTypeMappingArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ErpSyncConnectionSummary_From(src:any) : carriers.ErpSyncConnectionSummary {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ErpSyncConnectionSummary = Create_Carrier_From(src) as carriers.ErpSyncConnectionSummary;
        
        res.DisplayName= src.DisplayName as string;
        res.DisplayDescription= src.DisplayDescription as string;
        res.Active= src.Active as boolean;
        res.Deleted= src.Deleted as boolean;
        res.LastSync= Create_Date_From(src.LastSync);
        res.Actors= Create_ErpSyncActorSummaryArray_From(src.Actors);
        return res as carriers.ErpSyncConnectionSummary;
}

export function Create_ErpSyncConnectionSummaryArray_From(src:any) : carriers.ErpSyncConnectionSummary[] {
    let res : carriers.ErpSyncConnectionSummary[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ErpSyncConnectionSummary_From(src[i]);
        }
    }
    return res;
}

export function Create_ErpSyncConnectionSummaryArrayArray_From(src:any) : carriers.ErpSyncConnectionSummary[][] {
    let res : carriers.ErpSyncConnectionSummary[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ErpSyncConnectionSummaryArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ErpSyncConnectorEntity_From(src:any) : carriers.ErpSyncConnectorEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ErpSyncConnectorEntity = Create_Carrier_From(src) as carriers.ErpSyncConnectorEntity;
        
        res.ErpConnectorId= src.ErpConnectorId as number;
        res.DisplayName= src.DisplayName as string;
        res.URL= src.URL as string;
        res.Deleted= src.Deleted as boolean;
        return res as carriers.ErpSyncConnectorEntity;
}

export function Create_ErpSyncConnectorEntityArray_From(src:any) : carriers.ErpSyncConnectorEntity[] {
    let res : carriers.ErpSyncConnectorEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ErpSyncConnectorEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_ErpSyncConnectorEntityArrayArray_From(src:any) : carriers.ErpSyncConnectorEntity[][] {
    let res : carriers.ErpSyncConnectorEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ErpSyncConnectorEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ErpSyncDefaultValue_From(src:any) : carriers.ErpSyncDefaultValue {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ErpSyncDefaultValue = Create_Carrier_From(src) as carriers.ErpSyncDefaultValue;
        
        res.ErpFieldId= src.ErpFieldId as number;
        res.DefaultValue= src.DefaultValue as string;
        res.HasFirstSyncDefaultValue= src.HasFirstSyncDefaultValue as boolean;
        res.FirstSyncDefaultValue= src.FirstSyncDefaultValue as string;
        res.PromptUser= src.PromptUser as boolean;
        res.Mandatory= src.Mandatory as boolean;
        res.ErpFieldKey= src.ErpFieldKey as string;
        res.FieldType= enums.FieldMetadataType[src.FieldType];
        res.ListName= src.ListName as string;
        res.Access= enums.FieldAccess[src.Access];
        return res as carriers.ErpSyncDefaultValue;
}

export function Create_ErpSyncDefaultValueArray_From(src:any) : carriers.ErpSyncDefaultValue[] {
    let res : carriers.ErpSyncDefaultValue[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ErpSyncDefaultValue_From(src[i]);
        }
    }
    return res;
}

export function Create_ErpSyncDefaultValueArrayArray_From(src:any) : carriers.ErpSyncDefaultValue[][] {
    let res : carriers.ErpSyncDefaultValue[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ErpSyncDefaultValueArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ErpSyncEngine_From(src:any) : carriers.ErpSyncEngine {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ErpSyncEngine = Create_Carrier_From(src) as carriers.ErpSyncEngine;
        
        return res as carriers.ErpSyncEngine;
}

export function Create_ErpSyncEngineArray_From(src:any) : carriers.ErpSyncEngine[] {
    let res : carriers.ErpSyncEngine[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ErpSyncEngine_From(src[i]);
        }
    }
    return res;
}

export function Create_ErpSyncEngineArrayArray_From(src:any) : carriers.ErpSyncEngine[][] {
    let res : carriers.ErpSyncEngine[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ErpSyncEngineArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ErpSyncEngineStatus_From(src:any) : carriers.ErpSyncEngineStatus {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ErpSyncEngineStatus = Create_Carrier_From(src) as carriers.ErpSyncEngineStatus;
        
        res.IsRunning= src.IsRunning as boolean;
        res.StatusMessage= src.StatusMessage as string;
        res.Interval= Create_Duration_From(src.Interval);
        return res as carriers.ErpSyncEngineStatus;
}

export function Create_ErpSyncEngineStatusArray_From(src:any) : carriers.ErpSyncEngineStatus[] {
    let res : carriers.ErpSyncEngineStatus[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ErpSyncEngineStatus_From(src[i]);
        }
    }
    return res;
}

export function Create_ErpSyncEngineStatusArrayArray_From(src:any) : carriers.ErpSyncEngineStatus[][] {
    let res : carriers.ErpSyncEngineStatus[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ErpSyncEngineStatusArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ErpSyncFieldMapping_From(src:any) : carriers.ErpSyncFieldMapping {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ErpSyncFieldMapping = Create_Carrier_From(src) as carriers.ErpSyncFieldMapping;
        
        res.ErpFieldId= src.ErpFieldId as number;
        res.CrmFieldKey= src.CrmFieldKey as string;
        res.CrmDisplayName= src.CrmDisplayName as string;
        res.CrmDisplayTooltip= src.CrmDisplayTooltip as string;
        res.ErpFieldKey= src.ErpFieldKey as string;
        res.FieldType= enums.FieldMetadataType[src.FieldType];
        res.ErpDisplayName= src.ErpDisplayName as string;
        res.ErpDisplayTooltip= src.ErpDisplayTooltip as string;
        res.SyncToCrm= src.SyncToCrm as boolean;
        res.SyncToErp= src.SyncToErp as boolean;
        res.ShowInGui= src.ShowInGui as boolean;
        res.ShowInSearch= src.ShowInSearch as boolean;
        res.AlreadyMapped= src.AlreadyMapped as boolean;
        res.MissingInERP= src.MissingInERP as boolean;
        res.MissingInCRM= src.MissingInCRM as boolean;
        res.Access= enums.FieldAccess[src.Access];
        res.ListReference= src.ListReference as string;
        return res as carriers.ErpSyncFieldMapping;
}

export function Create_ErpSyncFieldMappingArray_From(src:any) : carriers.ErpSyncFieldMapping[] {
    let res : carriers.ErpSyncFieldMapping[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ErpSyncFieldMapping_From(src[i]);
        }
    }
    return res;
}

export function Create_ErpSyncFieldMappingArrayArray_From(src:any) : carriers.ErpSyncFieldMapping[][] {
    let res : carriers.ErpSyncFieldMapping[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ErpSyncFieldMappingArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ErpSyncActorSummary_From(src:any) : carriers.ErpSyncActorSummary {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ErpSyncActorSummary = Create_Carrier_From(src) as carriers.ErpSyncActorSummary;
        
        res.ActorType= enums.ErpActorType[src.ActorType];
        res.HasMappings= src.HasMappings as boolean;
        res.Defaults= src.Defaults as string;
        res.Mappings= src.Mappings as string;
        return res as carriers.ErpSyncActorSummary;
}

export function Create_ErpSyncActorSummaryArray_From(src:any) : carriers.ErpSyncActorSummary[] {
    let res : carriers.ErpSyncActorSummary[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ErpSyncActorSummary_From(src[i]);
        }
    }
    return res;
}

export function Create_ErpSyncActorSummaryArrayArray_From(src:any) : carriers.ErpSyncActorSummary[][] {
    let res : carriers.ErpSyncActorSummary[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ErpSyncActorSummaryArray_From(src[i]);
        }
    }
    return res;
}














export function Create_ResourceOverride_From(src:any) : carriers.ResourceOverride {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ResourceOverride = Create_Carrier_From(src) as carriers.ResourceOverride;
        
        res.ResourceName= src.ResourceName as string;
        res.ResourceValue= src.ResourceValue as string;
        res.Culture= src.Culture as string;
        res.IsActive= src.IsActive as boolean;
        return res as carriers.ResourceOverride;
}

export function Create_ResourceOverrideArray_From(src:any) : carriers.ResourceOverride[] {
    let res : carriers.ResourceOverride[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ResourceOverride_From(src[i]);
        }
    }
    return res;
}

export function Create_ResourceOverrideArrayArray_From(src:any) : carriers.ResourceOverride[][] {
    let res : carriers.ResourceOverride[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ResourceOverrideArray_From(src[i]);
        }
    }
    return res;
}






export function Create_Contact_From(src:any) : carriers.Contact {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Contact = Create_Carrier_From(src) as carriers.Contact;
        
        res.ContactId= src.ContactId as number;
        res.Name= src.Name as string;
        res.OrgNr= src.OrgNr as string;
        res.Department= src.Department as string;
        res.URL= src.URL as string;
        res.City= src.City as string;
        res.DirectPhone= src.DirectPhone as string;
        res.AssociateId= src.AssociateId as number;
        res.CountryId= src.CountryId as number;
        res.EmailAddress= src.EmailAddress as string;
        res.Kananame= src.Kananame as string;
        res.EmailAddressName= src.EmailAddressName as string;
        res.URLName= src.URLName as string;
        res.AssociateFullName= src.AssociateFullName as string;
        res.BusinessName= src.BusinessName as string;
        res.CategoryName= src.CategoryName as string;
        res.CountryName= src.CountryName as string;
        res.Address= Create_Address_From(src.Address);
        res.FormattedAddress= src.FormattedAddress as string;
        res.FullName= src.FullName as string;
        res.IsOwnerContact= src.IsOwnerContact as boolean;
        res.ActiveErpLinks= src.ActiveErpLinks as number;
        res.Number1= src.Number1 as string;
        res.Number2= src.Number2 as string;
        return res as carriers.Contact;
}

export function Create_ContactArray_From(src:any) : carriers.Contact[] {
    let res : carriers.Contact[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Contact_From(src[i]);
        }
    }
    return res;
}

export function Create_ContactArrayArray_From(src:any) : carriers.Contact[][] {
    let res : carriers.Contact[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ContactArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ContactActivity_From(src:any) : carriers.ContactActivity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ContactActivity = Create_Carrier_From(src) as carriers.ContactActivity;
        
        res.ContactId= src.ContactId as number;
        res.Department= src.Department as string;
        res.OrgNr= src.OrgNr as string;
        res.Name= src.Name as string;
        res.URL= src.URL as string;
        res.AssociateFullName= src.AssociateFullName as string;
        res.Action= Create_ContactAction_From(src.Action) as enums.ContactAction;
        res.ActionTime= Create_Date_From(src.ActionTime);
        res.Category= src.Category as string;
        res.ActivityPersonName= src.ActivityPersonName as string;
        res.ActionId= src.ActionId as number;
        res.PersonId= src.PersonId as number;
        res.ActivityPersonId= src.ActivityPersonId as number;
        res.AssociateId= src.AssociateId as number;
        return res as carriers.ContactActivity;
}

export function Create_ContactActivityArray_From(src:any) : carriers.ContactActivity[] {
    let res : carriers.ContactActivity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ContactActivity_From(src[i]);
        }
    }
    return res;
}

export function Create_ContactActivityArrayArray_From(src:any) : carriers.ContactActivity[][] {
    let res : carriers.ContactActivity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ContactActivityArray_From(src[i]);
        }
    }
    return res;
}





export function Create_ContactEntity_From(src:any) : carriers.ContactEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ContactEntity = Create_Carrier_From(src) as carriers.ContactEntity;
        
        res.ContactId= src.ContactId as number;
        res.Name= src.Name as string;
        res.Department= src.Department as string;
        res.OrgNr= src.OrgNr as string;
        res.Number1= src.Number1 as string;
        res.Number2= src.Number2 as string;
        res.UpdatedDate= Create_Date_From(src.UpdatedDate);
        res.CreatedDate= Create_Date_From(src.CreatedDate);
        res.Emails= Create_EntityElementArray_From(src.Emails);
        res.Interests= Create_SelectableMDOListItemArray_From(src.Interests);
        res.Urls= Create_EntityElementArray_From(src.Urls);
        res.Phones= Create_EntityElementArray_From(src.Phones);
        res.Faxes= Create_EntityElementArray_From(src.Faxes);
        res.Description= src.Description as string;
        res.UpdatedBy= Create_Associate_From(src.UpdatedBy);
        res.CreatedBy= Create_Associate_From(src.CreatedBy);
        res.Associate= Create_Associate_From(src.Associate);
        res.Business= Create_Business_From(src.Business);
        res.Category= Create_Category_From(src.Category);
        res.Country= Create_Country_From(src.Country);
        res.Persons= Create_PersonArray_From(src.Persons);
        res.NoMailing= src.NoMailing as boolean;
        res.Kananame= src.Kananame as string;
        res.Xstop= src.Xstop as boolean;
        res.ActiveInterests= src.ActiveInterests as number;
        res.GroupId= src.GroupId as number;
        res.ActiveStatusMonitorId= src.ActiveStatusMonitorId as number;
        res.SupportAssociate= Create_Associate_From(src.SupportAssociate);
        res.TicketPriority= Create_TicketPriority_From(src.TicketPriority);
        res.CustomerLanguage= Create_CustomerLanguage_From(src.CustomerLanguage);
        res.Deleted= src.Deleted as number;
        res.DbiAgentId= src.DbiAgentId as number;
        res.DbiLastSyncronized= Create_Date_From(src.DbiLastSyncronized);
        res.DbiKey= src.DbiKey as string;
        res.DbiLastModified= Create_Date_From(src.DbiLastModified);
        res.SupportPerson= Create_Person_From(src.SupportPerson);
        res.Address= Create_Address_From(src.Address);
        res.Source= src.Source as number;
        res.ActiveErpLinks= src.ActiveErpLinks as number;
        res.BounceEmails= src.BounceEmails as string[];
        res.Domains= src.Domains as string[];
        res.UserDefinedFields= src.UserDefinedFields as carriers.StringDictionary;
        res.ExtraFields= src.ExtraFields as carriers.StringDictionary;
        res.CustomFields= src.CustomFields as carriers.StringDictionary;
        return res as carriers.ContactEntity;
}

export function Create_ContactEntityArray_From(src:any) : carriers.ContactEntity[] {
    let res : carriers.ContactEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ContactEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_ContactEntityArrayArray_From(src:any) : carriers.ContactEntity[][] {
    let res : carriers.ContactEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ContactEntityArray_From(src[i]);
        }
    }
    return res;
}





export function Create_ContactSummary_From(src:any) : carriers.ContactSummary {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.Contact= Create_Contact_From(src.Contact);
        res.Tickets= Create_TicketSummaryItemArray_From(src.Tickets);
        res.Followups= Create_ActivitySummaryItemArray_From(src.Followups);
        res.Documents= Create_ActivitySummaryItemArray_From(src.Documents);
        res.Sales= Create_SaleSummaryItemArray_From(src.Sales);
        res.Chats= Create_ChatSummaryItemArray_From(src.Chats);
        return res as carriers.ContactSummary;
}

export function Create_ContactSummaryArray_From(src:any) : carriers.ContactSummary[] {
    let res : carriers.ContactSummary[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ContactSummary_From(src[i]);
        }
    }
    return res;
}

export function Create_ContactSummaryArrayArray_From(src:any) : carriers.ContactSummary[][] {
    let res : carriers.ContactSummary[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ContactSummaryArray_From(src[i]);
        }
    }
    return res;
}




export function Create_PreviewContact_From(src:any) : carriers.PreviewContact {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.ContactId= src.ContactId as number;
        res.Name= src.Name as string;
        res.Department= src.Department as string;
        res.CountryId= src.CountryId as number;
        res.Number2= src.Number2 as string;
        res.DirectPhone= src.DirectPhone as string;
        res.URL= src.URL as string;
        res.EmailAddress= src.EmailAddress as string;
        res.BusinessName= src.BusinessName as string;
        res.CategoryName= src.CategoryName as string;
        res.AssociateFullName= src.AssociateFullName as string;
        res.Address= Create_Address_From(src.Address);
        return res as carriers.PreviewContact;
}

export function Create_PreviewContactArray_From(src:any) : carriers.PreviewContact[] {
    let res : carriers.PreviewContact[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PreviewContact_From(src[i]);
        }
    }
    return res;
}

export function Create_PreviewContactArrayArray_From(src:any) : carriers.PreviewContact[][] {
    let res : carriers.PreviewContact[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PreviewContactArray_From(src[i]);
        }
    }
    return res;
}







export function Create_ConsentInfo_From(src:any) : carriers.ConsentInfo {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ConsentInfo = Create_Carrier_From(src) as carriers.ConsentInfo;
        
        res.ConsentPersonId= src.ConsentPersonId as number;
        res.Comment= src.Comment as string;
        res.Registered= Create_Date_From(src.Registered);
        res.RegisteredAssociateId= src.RegisteredAssociateId as number;
        res.Updated= Create_Date_From(src.Updated);
        res.UpdatedAssociateId= src.UpdatedAssociateId as number;
        res.LegalBaseId= src.LegalBaseId as number;
        res.LegalBaseKey= src.LegalBaseKey as string;
        res.LegalBaseName= src.LegalBaseName as string;
        res.ConsentPurposeId= src.ConsentPurposeId as number;
        res.ConsentPurposeKey= src.ConsentPurposeKey as string;
        res.ConsentPurposeName= src.ConsentPurposeName as string;
        res.ConsentSourceId= src.ConsentSourceId as number;
        res.ConsentSourceKey= src.ConsentSourceKey as string;
        res.ConsentSourceName= src.ConsentSourceName as string;
        return res as carriers.ConsentInfo;
}

export function Create_ConsentInfoArray_From(src:any) : carriers.ConsentInfo[] {
    let res : carriers.ConsentInfo[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ConsentInfo_From(src[i]);
        }
    }
    return res;
}

export function Create_ConsentInfoArrayArray_From(src:any) : carriers.ConsentInfo[][] {
    let res : carriers.ConsentInfo[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ConsentInfoArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ConsentPerson_From(src:any) : carriers.ConsentPerson {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ConsentPerson = Create_Carrier_From(src) as carriers.ConsentPerson;
        
        res.ConsentPersonId= src.ConsentPersonId as number;
        res.ConsentSource= Create_ConsentSource_From(src.ConsentSource);
        res.LegalBase= Create_LegalBase_From(src.LegalBase);
        res.PersonId= src.PersonId as number;
        res.ConsentPurpose= Create_ConsentPurpose_From(src.ConsentPurpose);
        res.Comment= src.Comment as string;
        return res as carriers.ConsentPerson;
}

export function Create_ConsentPersonArray_From(src:any) : carriers.ConsentPerson[] {
    let res : carriers.ConsentPerson[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ConsentPerson_From(src[i]);
        }
    }
    return res;
}

export function Create_ConsentPersonArrayArray_From(src:any) : carriers.ConsentPerson[][] {
    let res : carriers.ConsentPerson[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ConsentPersonArray_From(src[i]);
        }
    }
    return res;
}




export function Create_Person_From(src:any) : carriers.Person {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Person = Create_Carrier_From(src) as carriers.Person;
        
        res.Position= src.Position as string;
        res.PersonId= src.PersonId as number;
        res.Mrmrs= src.Mrmrs as string;
        res.Firstname= src.Firstname as string;
        res.Lastname= src.Lastname as string;
        res.MiddleName= src.MiddleName as string;
        res.Title= src.Title as string;
        res.Description= src.Description as string;
        res.Email= src.Email as string;
        res.FullName= src.FullName as string;
        res.DirectPhone= src.DirectPhone as string;
        res.FormalName= src.FormalName as string;
        res.CountryId= src.CountryId as number;
        res.ContactId= src.ContactId as number;
        res.ContactName= src.ContactName as string;
        res.Retired= src.Retired as number;
        res.Rank= src.Rank as number;
        res.ActiveInterests= src.ActiveInterests as number;
        res.ContactDepartment= src.ContactDepartment as string;
        res.ContactCountryId= src.ContactCountryId as number;
        res.ContactOrgNr= src.ContactOrgNr as string;
        res.FaxPhone= src.FaxPhone as string;
        res.MobilePhone= src.MobilePhone as string;
        res.ContactPhone= src.ContactPhone as string;
        res.AssociateName= src.AssociateName as string;
        res.AssociateId= src.AssociateId as number;
        res.UsePersonAddress= src.UsePersonAddress as boolean;
        res.ContactFax= src.ContactFax as string;
        res.Kanafname= src.Kanafname as string;
        res.Kanalname= src.Kanalname as string;
        res.Post1= src.Post1 as string;
        res.Post2= src.Post2 as string;
        res.Post3= src.Post3 as string;
        res.EmailName= src.EmailName as string;
        res.ContactFullName= src.ContactFullName as string;
        res.ActiveErpLinks= src.ActiveErpLinks as number;
        res.TicketPriorityId= src.TicketPriorityId as number;
        res.SupportLanguageId= src.SupportLanguageId as number;
        res.SupportAssociateId= src.SupportAssociateId as number;
        res.CategoryName= src.CategoryName as string;
        return res as carriers.Person;
}

export function Create_PersonArray_From(src:any) : carriers.Person[] {
    let res : carriers.Person[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Person_From(src[i]);
        }
    }
    return res;
}

export function Create_PersonArrayArray_From(src:any) : carriers.Person[][] {
    let res : carriers.Person[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PersonArray_From(src[i]);
        }
    }
    return res;
}




export function Create_PersonEntity_From(src:any) : carriers.PersonEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.PersonEntity = Create_Carrier_From(src) as carriers.PersonEntity;
        
        res.PersonId= src.PersonId as number;
        res.Firstname= src.Firstname as string;
        res.MiddleName= src.MiddleName as string;
        res.Lastname= src.Lastname as string;
        res.Mrmrs= src.Mrmrs as string;
        res.Title= src.Title as string;
        res.UpdatedDate= Create_Date_From(src.UpdatedDate);
        res.CreatedDate= Create_Date_From(src.CreatedDate);
        res.BirthDate= Create_BirthDate_From(src.BirthDate);
        res.CreatedBy= Create_Associate_From(src.CreatedBy);
        res.Emails= Create_EntityElementArray_From(src.Emails);
        res.Description= src.Description as string;
        res.IsAssociate= src.IsAssociate as boolean;
        res.PrivatePhones= Create_EntityElementArray_From(src.PrivatePhones);
        res.Faxes= Create_EntityElementArray_From(src.Faxes);
        res.MobilePhones= Create_EntityElementArray_From(src.MobilePhones);
        res.OfficePhones= Create_EntityElementArray_From(src.OfficePhones);
        res.OtherPhones= Create_EntityElementArray_From(src.OtherPhones);
        res.Position= Create_Position_From(src.Position);
        res.UpdatedBy= Create_Associate_From(src.UpdatedBy);
        res.Contact= Create_Contact_From(src.Contact);
        res.Country= Create_Country_From(src.Country);
        res.Interests= Create_SelectableMDOListItemArray_From(src.Interests);
        res.PersonNumber= src.PersonNumber as string;
        res.FullName= src.FullName as string;
        res.NoMailing= src.NoMailing as boolean;
        res.UsePersonAddress= src.UsePersonAddress as boolean;
        res.Retired= src.Retired as boolean;
        res.Urls= Create_EntityElementArray_From(src.Urls);
        res.FormalName= src.FormalName as string;
        res.Address= Create_Address_From(src.Address);
        res.Post3= src.Post3 as string;
        res.Post2= src.Post2 as string;
        res.Post1= src.Post1 as string;
        res.Kanalname= src.Kanalname as string;
        res.Kanafname= src.Kanafname as string;
        res.CorrespondingAssociate= Create_Associate_From(src.CorrespondingAssociate);
        res.Category= Create_Category_From(src.Category);
        res.Business= Create_Business_From(src.Business);
        res.Associate= Create_Associate_From(src.Associate);
        res.Salutation= src.Salutation as string;
        res.ActiveInterests= src.ActiveInterests as number;
        res.SupportAssociate= Create_Associate_From(src.SupportAssociate);
        res.TicketPriority= Create_TicketPriority_From(src.TicketPriority);
        res.CustomerLanguage= Create_CustomerLanguage_From(src.CustomerLanguage);
        res.DbiAgentId= src.DbiAgentId as number;
        res.DbiKey= src.DbiKey as string;
        res.DbiLastModified= Create_Date_From(src.DbiLastModified);
        res.DbiLastSyncronized= Create_Date_From(src.DbiLastSyncronized);
        res.SentInfo= src.SentInfo as number;
        res.ShowContactTickets= src.ShowContactTickets as number;
        res.UserInfo= Create_UserInfo_From(src.UserInfo);
        res.ChatEmails= Create_EntityElementArray_From(src.ChatEmails);
        res.InternetPhones= Create_EntityElementArray_From(src.InternetPhones);
        res.Source= src.Source as number;
        res.ActiveErpLinks= src.ActiveErpLinks as number;
        res.ShipmentTypes= Create_SelectableMDOListItemArray_From(src.ShipmentTypes);
        res.Consents= Create_ConsentInfoArray_From(src.Consents);
        res.BounceEmails= src.BounceEmails as string[];
        res.ActiveStatusMonitorId= src.ActiveStatusMonitorId as number;
        res.UserDefinedFields= src.UserDefinedFields as carriers.StringDictionary;
        res.ExtraFields= src.ExtraFields as carriers.StringDictionary;
        res.CustomFields= src.CustomFields as carriers.StringDictionary;
        return res as carriers.PersonEntity;
}

export function Create_PersonEntityArray_From(src:any) : carriers.PersonEntity[] {
    let res : carriers.PersonEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PersonEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_PersonEntityArrayArray_From(src:any) : carriers.PersonEntity[][] {
    let res : carriers.PersonEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PersonEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_PersonImage_From(src:any) : carriers.PersonImage {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.PersonId= src.PersonId as number;
        res.ImageData= Create_ArrayBuffer_From(src.ImageData);
        return res as carriers.PersonImage;
}

export function Create_PersonImageArray_From(src:any) : carriers.PersonImage[] {
    let res : carriers.PersonImage[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PersonImage_From(src[i]);
        }
    }
    return res;
}

export function Create_PersonImageArrayArray_From(src:any) : carriers.PersonImage[][] {
    let res : carriers.PersonImage[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PersonImageArray_From(src[i]);
        }
    }
    return res;
}





export function Create_PersonSummary_From(src:any) : carriers.PersonSummary {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.Person= Create_Person_From(src.Person);
        res.Tickets= Create_TicketSummaryItemArray_From(src.Tickets);
        res.Followups= Create_ActivitySummaryItemArray_From(src.Followups);
        res.Documents= Create_ActivitySummaryItemArray_From(src.Documents);
        res.Sales= Create_SaleSummaryItemArray_From(src.Sales);
        res.Chats= Create_ChatSummaryItemArray_From(src.Chats);
        return res as carriers.PersonSummary;
}

export function Create_PersonSummaryArray_From(src:any) : carriers.PersonSummary[] {
    let res : carriers.PersonSummary[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PersonSummary_From(src[i]);
        }
    }
    return res;
}

export function Create_PersonSummaryArrayArray_From(src:any) : carriers.PersonSummary[][] {
    let res : carriers.PersonSummary[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PersonSummaryArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ResolvedPerson_From(src:any) : carriers.ResolvedPerson {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ResolvedPerson = Create_Carrier_From(src) as carriers.ResolvedPerson;
        
        res.Person= Create_PersonEntity_From(src.Person);
        res.PersonCreated= src.PersonCreated as boolean;
        return res as carriers.ResolvedPerson;
}

export function Create_ResolvedPersonArray_From(src:any) : carriers.ResolvedPerson[] {
    let res : carriers.ResolvedPerson[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ResolvedPerson_From(src[i]);
        }
    }
    return res;
}

export function Create_ResolvedPersonArrayArray_From(src:any) : carriers.ResolvedPerson[][] {
    let res : carriers.ResolvedPerson[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ResolvedPersonArray_From(src[i]);
        }
    }
    return res;
}




export function Create_TemporaryKeyInfo_From(src:any) : carriers.TemporaryKeyInfo {
        if( src === null || src === undefined )
            return null;
        let res : carriers.TemporaryKeyInfo = Create_Carrier_From(src) as carriers.TemporaryKeyInfo;
        
        res.Domain= enums.TemporaryKeyDomain[src.Domain];
        res.TargetId= src.TargetId as number;
        res.PersonId= src.PersonId as number;
        res.IsExpired= src.IsExpired as boolean;
        return res as carriers.TemporaryKeyInfo;
}

export function Create_TemporaryKeyInfoArray_From(src:any) : carriers.TemporaryKeyInfo[] {
    let res : carriers.TemporaryKeyInfo[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TemporaryKeyInfo_From(src[i]);
        }
    }
    return res;
}

export function Create_TemporaryKeyInfoArrayArray_From(src:any) : carriers.TemporaryKeyInfo[][] {
    let res : carriers.TemporaryKeyInfo[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TemporaryKeyInfoArray_From(src[i]);
        }
    }
    return res;
}
















export function Create_Sale_From(src:any) : carriers.Sale {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Sale = Create_Carrier_From(src) as carriers.Sale;
        
        res.ContactName= src.ContactName as string;
        res.SaleDate= Create_Date_From(src.SaleDate);
        res.SaleId= src.SaleId as number;
        res.Probability= src.Probability as number;
        res.Title= src.Title as string;
        res.Amount= src.Amount as number;
        res.Currency= src.Currency as string;
        res.ProjectName= src.ProjectName as string;
        res.AssociateFullName= src.AssociateFullName as string;
        res.Description= src.Description as string;
        res.Status= enums.SaleStatus[src.Status];
        res.WeightedAmount= src.WeightedAmount as number;
        res.ProjectId= src.ProjectId as number;
        res.EarningPercent= src.EarningPercent as number;
        res.Earning= src.Earning as number;
        res.ContactId= src.ContactId as number;
        res.AssociateId= src.AssociateId as number;
        res.PersonId= src.PersonId as number;
        res.SaleTypeId= src.SaleTypeId as number;
        res.SaleTypeName= src.SaleTypeName as string;
        res.PersonFullName= src.PersonFullName as string;
        res.Completed= enums.ActivityStatus[src.Completed];
        res.ActiveErpLinks= src.ActiveErpLinks as number;
        res.NextDueDate= Create_Date_From(src.NextDueDate);
        res.Number= src.Number as string;
        return res as carriers.Sale;
}

export function Create_SaleArray_From(src:any) : carriers.Sale[] {
    let res : carriers.Sale[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Sale_From(src[i]);
        }
    }
    return res;
}

export function Create_SaleArrayArray_From(src:any) : carriers.Sale[][] {
    let res : carriers.Sale[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SaleArray_From(src[i]);
        }
    }
    return res;
}




export function Create_SaleEntity_From(src:any) : carriers.SaleEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.SaleEntity = Create_Carrier_From(src) as carriers.SaleEntity;
        
        res.Appointment= Create_Appointment_From(src.Appointment);
        res.Associate= Create_Associate_From(src.Associate);
        res.UpdatedBy= Create_Associate_From(src.UpdatedBy);
        res.CreatedBy= Create_Associate_From(src.CreatedBy);
        res.Contact= Create_Contact_From(src.Contact);
        res.Project= Create_Project_From(src.Project);
        res.SaleText= src.SaleText as string;
        res.Person= Create_Person_From(src.Person);
        res.Currency= Create_Currency_From(src.Currency);
        res.Competitor= Create_Competitor_From(src.Competitor);
        res.Credited= Create_Credited_From(src.Credited);
        res.Rating= Create_Rating_From(src.Rating);
        res.Reason= Create_Reason_From(src.Reason);
        res.Source= Create_Source_From(src.Source);
        res.Status= enums.SaleStatus[src.Status];
        res.Saledate= Create_Date_From(src.Saledate);
        res.Amount= src.Amount as number;
        res.SaleId= src.SaleId as number;
        res.Earning= src.Earning as number;
        res.EarningPercent= src.EarningPercent as number;
        res.Heading= src.Heading as string;
        res.Number= src.Number as string;
        res.Probability= src.Probability as number;
        res.CreatedDate= Create_Date_From(src.CreatedDate);
        res.UpdatedDate= Create_Date_From(src.UpdatedDate);
        res.Completed= enums.ActivityStatus[src.Completed];
        res.ActiveLinks= src.ActiveLinks as number;
        res.Links= Create_LinkArray_From(src.Links);
        res.NextDueDate= Create_Date_From(src.NextDueDate);
        res.Postit= src.Postit as string;
        res.SaleType= Create_SaleType_From(src.SaleType);
        res.ReasonSold= Create_ReasonSold_From(src.ReasonSold);
        res.ReasonStalled= Create_ReasonStalled_From(src.ReasonStalled);
        res.ReopenDate= Create_Date_From(src.ReopenDate);
        res.SaleStakeholders= Create_SaleStakeholderArray_From(src.SaleStakeholders);
        res.ActiveErpLinks= src.ActiveErpLinks as number;
        res.UserDefinedFields= src.UserDefinedFields as carriers.StringDictionary;
        res.ExtraFields= src.ExtraFields as carriers.StringDictionary;
        res.CustomFields= src.CustomFields as carriers.StringDictionary;
        res.PublishEventDate= Create_Date_From(src.PublishEventDate);
        res.PublishTo= Create_Date_From(src.PublishTo);
        res.PublishFrom= Create_Date_From(src.PublishFrom);
        res.IsPublished= src.IsPublished;
        res.VisibleFor= Create_VisibleForArray_From(src.VisibleFor);
        return res as carriers.SaleEntity;
}

export function Create_SaleEntityArray_From(src:any) : carriers.SaleEntity[] {
    let res : carriers.SaleEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SaleEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_SaleEntityArrayArray_From(src:any) : carriers.SaleEntity[][] {
    let res : carriers.SaleEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SaleEntityArray_From(src[i]);
        }
    }
    return res;
}





export function Create_SaleStakeholder_From(src:any) : carriers.SaleStakeholder {
        if( src === null || src === undefined )
            return null;
        let res : carriers.SaleStakeholder = Create_Carrier_From(src) as carriers.SaleStakeholder;
        
        res.StakeholderRoleName= src.StakeholderRoleName as string;
        res.Comment= src.Comment as string;
        res.StakeholderRoleId= src.StakeholderRoleId as number;
        res.CountryId= src.CountryId as number;
        res.PersonId= src.PersonId as number;
        res.EmailDescription= src.EmailDescription as string;
        res.EmailId= src.EmailId as number;
        res.EmailAddress= src.EmailAddress as string;
        res.PhoneId= src.PhoneId as number;
        res.ContactName= src.ContactName as string;
        res.ContactId= src.ContactId as number;
        res.SaleId= src.SaleId as number;
        res.Mrmrs= src.Mrmrs as string;
        res.Firstname= src.Firstname as string;
        res.MiddleName= src.MiddleName as string;
        res.Lastname= src.Lastname as string;
        res.SaleStakeholderId= src.SaleStakeholderId as number;
        res.Rank= src.Rank as number;
        res.Phone= src.Phone as string;
        return res as carriers.SaleStakeholder;
}

export function Create_SaleStakeholderArray_From(src:any) : carriers.SaleStakeholder[] {
    let res : carriers.SaleStakeholder[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SaleStakeholder_From(src[i]);
        }
    }
    return res;
}

export function Create_SaleStakeholderArrayArray_From(src:any) : carriers.SaleStakeholder[][] {
    let res : carriers.SaleStakeholder[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SaleStakeholderArray_From(src[i]);
        }
    }
    return res;
}





export function Create_SaleSummary_From(src:any) : carriers.SaleSummary {
        if( src === null || src === undefined )
            return null;
        let res : carriers.SaleSummary = Create_Carrier_From(src) as carriers.SaleSummary;
        
        res.BaseCurrency= src.BaseCurrency as string;
        res.OwnCurrency= src.OwnCurrency as string;
        res.SoldTotalBaseCurrency= src.SoldTotalBaseCurrency as number;
        res.Sold= src.Sold as number;
        res.SoldTotalOwnCurrency= src.SoldTotalOwnCurrency as number;
        res.Lost= src.Lost as number;
        res.LostTotalBaseCurrency= src.LostTotalBaseCurrency as number;
        res.LostTotalOwnCurrency= src.LostTotalOwnCurrency as number;
        res.Open= src.Open as number;
        res.OpenTotalBaseCurrency= src.OpenTotalBaseCurrency as number;
        res.OpenTotalOwnCurrency= src.OpenTotalOwnCurrency as number;
        res.OpenWeightedBaseCurrency= src.OpenWeightedBaseCurrency as number;
        res.OpenWeightedOwnCurrency= src.OpenWeightedOwnCurrency as number;
        res.PreviousOverdue= src.PreviousOverdue as number;
        res.PreviousOverdueTotalBaseCurrency= src.PreviousOverdueTotalBaseCurrency as number;
        res.PreviousOverdueTotalOwnCurrency= src.PreviousOverdueTotalOwnCurrency as number;
        res.PreviousOverdueWeightedBaseCurrency= src.PreviousOverdueWeightedBaseCurrency as number;
        res.PreviousOverdueWeightedOwnCurrency= src.PreviousOverdueWeightedOwnCurrency as number;
        res.CurrentOverdue= src.CurrentOverdue as number;
        res.CurrentOverdueTotalBaseCurrency= src.CurrentOverdueTotalBaseCurrency as number;
        res.CurrentOverdueTotalOwnCurrency= src.CurrentOverdueTotalOwnCurrency as number;
        res.CurrentOverdueWeightedBaseCurrency= src.CurrentOverdueWeightedBaseCurrency as number;
        res.CurrentOverdueWeightedOwnCurrency= src.CurrentOverdueWeightedOwnCurrency as number;
        res.FutureOpen= src.FutureOpen as number;
        res.FutureOpenTotalBaseCurrency= src.FutureOpenTotalBaseCurrency as number;
        res.FutureOpenTotalOwnCurrency= src.FutureOpenTotalOwnCurrency as number;
        res.FutureOpenWeightedBaseCurrency= src.FutureOpenWeightedBaseCurrency as number;
        res.FutureOpenWeightedOwnCurrency= src.FutureOpenWeightedOwnCurrency as number;
        return res as carriers.SaleSummary;
}

export function Create_SaleSummaryArray_From(src:any) : carriers.SaleSummary[] {
    let res : carriers.SaleSummary[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SaleSummary_From(src[i]);
        }
    }
    return res;
}

export function Create_SaleSummaryArrayArray_From(src:any) : carriers.SaleSummary[][] {
    let res : carriers.SaleSummary[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SaleSummaryArray_From(src[i]);
        }
    }
    return res;
}




export function Create_SaleSummaryItem_From(src:any) : carriers.SaleSummaryItem {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.SaleId= src.SaleId as number;
        res.SaleDate= Create_Date_From(src.SaleDate);
        res.Probability= src.Probability as number;
        res.Heading= src.Heading as string;
        res.Amount= src.Amount as number;
        res.Currency= src.Currency as string;
        res.AmountInBaseCurrency= src.AmountInBaseCurrency as number;
        res.Status= enums.SaleStatus[src.Status];
        res.Completed= enums.ActivityStatus[src.Completed];
        res.Registered= Create_Date_From(src.Registered);
        return res as carriers.SaleSummaryItem;
}

export function Create_SaleSummaryItemArray_From(src:any) : carriers.SaleSummaryItem[] {
    let res : carriers.SaleSummaryItem[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SaleSummaryItem_From(src[i]);
        }
    }
    return res;
}

export function Create_SaleSummaryItemArrayArray_From(src:any) : carriers.SaleSummaryItem[][] {
    let res : carriers.SaleSummaryItem[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SaleSummaryItemArray_From(src[i]);
        }
    }
    return res;
}



















export function Create_PhoneListItem_From(src:any) : carriers.PhoneListItem {
        if( src === null || src === undefined )
            return null;
        let res : carriers.PhoneListItem = Create_Carrier_From(src) as carriers.PhoneListItem;
        
        res.PersonDirectPhone= src.PersonDirectPhone as string;
        res.PersonCellPhone= src.PersonCellPhone as string;
        res.PersonPrivatePhone= src.PersonPrivatePhone as string;
        res.PersonFaxNumber= src.PersonFaxNumber as string;
        res.PersonPagerNumber= src.PersonPagerNumber as string;
        res.PersonEmail= src.PersonEmail as string;
        res.Id= src.Id as number;
        res.Name= src.Name as string;
        res.Tooltip= src.Tooltip as string;
        res.UniqueId= src.UniqueId as string;
        return res as carriers.PhoneListItem;
}

export function Create_PhoneListItemArray_From(src:any) : carriers.PhoneListItem[] {
    let res : carriers.PhoneListItem[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PhoneListItem_From(src[i]);
        }
    }
    return res;
}

export function Create_PhoneListItemArrayArray_From(src:any) : carriers.PhoneListItem[][] {
    let res : carriers.PhoneListItem[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PhoneListItemArray_From(src[i]);
        }
    }
    return res;
}




export function Create_PhoneListPreferences_From(src:any) : carriers.PhoneListPreferences {
        if( src === null || src === undefined )
            return null;
        let res : carriers.PhoneListPreferences = Create_Carrier_From(src) as carriers.PhoneListPreferences;
        
        res.SearchCompany= src.SearchCompany as boolean;
        res.SearchFirstname= src.SearchFirstname as boolean;
        res.SearchLastname= src.SearchLastname as boolean;
        res.SearchDepartment= src.SearchDepartment as boolean;
        res.SearchModeCompany= enums.StringSearchType[src.SearchModeCompany];
        res.SearchModeDepartment= enums.StringSearchType[src.SearchModeDepartment];
        res.SearchModeFirstname= enums.StringSearchType[src.SearchModeFirstname];
        res.SearchModeLastname= enums.StringSearchType[src.SearchModeLastname];
        return res as carriers.PhoneListPreferences;
}

export function Create_PhoneListPreferencesArray_From(src:any) : carriers.PhoneListPreferences[] {
    let res : carriers.PhoneListPreferences[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PhoneListPreferences_From(src[i]);
        }
    }
    return res;
}

export function Create_PhoneListPreferencesArrayArray_From(src:any) : carriers.PhoneListPreferences[][] {
    let res : carriers.PhoneListPreferences[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PhoneListPreferencesArray_From(src[i]);
        }
    }
    return res;
}









export function Create_Project_From(src:any) : carriers.Project {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Project = Create_Carrier_From(src) as carriers.Project;
        
        res.ProjectId= src.ProjectId as number;
        res.Name= src.Name as string;
        res.Description= src.Description as string;
        res.URL= src.URL as string;
        res.Type= src.Type as string;
        res.AssociateId= src.AssociateId as number;
        res.AssociateFullName= src.AssociateFullName as string;
        res.TypeId= src.TypeId as number;
        res.Updated= Create_Date_From(src.Updated);
        res.StatusId= src.StatusId as number;
        res.Status= src.Status as string;
        res.TextId= src.TextId as number;
        res.PublishTo= Create_Date_From(src.PublishTo);
        res.PublishFrom= Create_Date_From(src.PublishFrom);
        res.IsPublished= src.IsPublished as boolean;
        res.URLName= src.URLName as string;
        res.ProjectNumber= src.ProjectNumber as string;
        res.ActiveErpLinks= src.ActiveErpLinks as number;
        return res as carriers.Project;
}

export function Create_ProjectArray_From(src:any) : carriers.Project[] {
    let res : carriers.Project[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Project_From(src[i]);
        }
    }
    return res;
}

export function Create_ProjectArrayArray_From(src:any) : carriers.Project[][] {
    let res : carriers.Project[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ProjectArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ProjectEntity_From(src:any) : carriers.ProjectEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ProjectEntity = Create_Carrier_From(src) as carriers.ProjectEntity;
        
        res.ProjectId= src.ProjectId as number;
        res.Name= src.Name as string;
        res.ProjectNumber= src.ProjectNumber as string;
        res.ProjectMembers= Create_ProjectMemberArray_From(src.ProjectMembers);
        res.Urls= Create_EntityElementArray_From(src.Urls);
        res.CreatedDate= Create_Date_From(src.CreatedDate);
        res.UpdatedDate= Create_Date_From(src.UpdatedDate);
        res.Description= src.Description as string;
        res.Postit= src.Postit as string;
        res.CreatedBy= Create_Associate_From(src.CreatedBy);
        res.UpdatedBy= Create_Associate_From(src.UpdatedBy);
        res.Associate= Create_Associate_From(src.Associate);
        res.ProjectStatus= Create_ProjectStatus_From(src.ProjectStatus);
        res.ProjectType= Create_ProjectType_From(src.ProjectType);
        res.HasImage= src.HasImage as boolean;
        res.ImageDescription= src.ImageDescription as string;
        res.ActiveStatusMonitorId= src.ActiveStatusMonitorId as number;
        res.Links= Create_LinkArray_From(src.Links);
        res.ActiveLinks= src.ActiveLinks as number;
        res.Completed= src.Completed as boolean;
        res.NextMilestoneDate= Create_Date_From(src.NextMilestoneDate);
        res.NmdAppointmentId= src.NmdAppointmentId as number;
        res.EndDate= Create_Date_From(src.EndDate);
        res.ActiveErpLinks= src.ActiveErpLinks as number;
        res.UserDefinedFields= src.UserDefinedFields as carriers.StringDictionary;
        res.ExtraFields= src.ExtraFields as carriers.StringDictionary;
        res.CustomFields= src.CustomFields as carriers.StringDictionary;
        res.PublishEventDate= Create_Date_From(src.PublishEventDate);
        res.PublishTo= Create_Date_From(src.PublishTo);
        res.PublishFrom= Create_Date_From(src.PublishFrom);
        res.IsPublished= src.IsPublished;
        return res as carriers.ProjectEntity;
}

export function Create_ProjectEntityArray_From(src:any) : carriers.ProjectEntity[] {
    let res : carriers.ProjectEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ProjectEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_ProjectEntityArrayArray_From(src:any) : carriers.ProjectEntity[][] {
    let res : carriers.ProjectEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ProjectEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ProjectEvent_From(src:any) : carriers.ProjectEvent {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ProjectEvent = Create_Carrier_From(src) as carriers.ProjectEvent;
        
        res.AssociateFullName= src.AssociateFullName as string;
        res.Description= src.Description as string;
        res.ProjectId= src.ProjectId as number;
        res.EventName= src.EventName as string;
        res.AssociateId= src.AssociateId as number;
        res.IsSignedOn= src.IsSignedOn as boolean;
        res.SignOffConfirmationText= src.SignOffConfirmationText as string;
        res.SignOffText= src.SignOffText as string;
        res.SignOnConfirmationText= src.SignOnConfirmationText as string;
        res.SignOnText= src.SignOnText as string;
        res.EventDate= Create_Date_From(src.EventDate);
        res.Enabled= src.Enabled as boolean;
        res.SignOff= src.SignOff as boolean;
        res.SignOffTaskEnable= src.SignOffTaskEnable as boolean;
        res.SignOnTaskEnable= src.SignOnTaskEnable as boolean;
        res.SignOn= src.SignOn as boolean;
        res.SignOffTaskId= src.SignOffTaskId as number;
        res.SignOnTaskId= src.SignOnTaskId as number;
        res.SignOffTriggersAssign= src.SignOffTriggersAssign as boolean;
        res.SignOnTriggersAssign= src.SignOnTriggersAssign as boolean;
        res.SignOnPersonId= src.SignOnPersonId as number;
        res.SignOffPersonId= src.SignOffPersonId as number;
        return res as carriers.ProjectEvent;
}

export function Create_ProjectEventArray_From(src:any) : carriers.ProjectEvent[] {
    let res : carriers.ProjectEvent[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ProjectEvent_From(src[i]);
        }
    }
    return res;
}

export function Create_ProjectEventArrayArray_From(src:any) : carriers.ProjectEvent[][] {
    let res : carriers.ProjectEvent[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ProjectEventArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ProjectEventEntity_From(src:any) : carriers.ProjectEventEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ProjectEventEntity = Create_Carrier_From(src) as carriers.ProjectEventEntity;
        
        res.SignOffConfirmationText= src.SignOffConfirmationText as string;
        res.SignOffText= src.SignOffText as string;
        res.SignOnConfirmationText= src.SignOnConfirmationText as string;
        res.SignOnText= src.SignOnText as string;
        res.EventDate= Create_Date_From(src.EventDate);
        res.Enabled= src.Enabled as boolean;
        res.CreatedDate= Create_Date_From(src.CreatedDate);
        res.SignOff= src.SignOff as boolean;
        res.SignOffTaskEnable= src.SignOffTaskEnable as boolean;
        res.SignOffTaskId= src.SignOffTaskId as number;
        res.SignOffTriggersAssign= src.SignOffTriggersAssign as boolean;
        res.SignOn= src.SignOn as boolean;
        res.SignOnTaskEnable= src.SignOnTaskEnable as boolean;
        res.SignOnTaskId= src.SignOnTaskId as number;
        res.SignOnTriggersAssign= src.SignOnTriggersAssign as boolean;
        res.UpdatedDate= Create_Date_From(src.UpdatedDate);
        res.CreatedBy= Create_Associate_From(src.CreatedBy);
        res.UpdatedBy= Create_Associate_From(src.UpdatedBy);
        res.ProjectId= src.ProjectId as number;
        res.Id= src.Id as number;
        res.PublishFrom= Create_Date_From(src.PublishFrom);
        res.PublishType= enums.PublishType[src.PublishType];
        res.PublishTo= Create_Date_From(src.PublishTo);
        res.VisibleForCategories= Create_MDOListItemArray_From(src.VisibleForCategories);
        res.VisibleForPersonInterests= Create_MDOListItemArray_From(src.VisibleForPersonInterests);
        res.IsPublished= src.IsPublished as boolean;
        res.IsVisibleForMembers= src.IsVisibleForMembers as boolean;
        res.IsVisibleForCategories= src.IsVisibleForCategories as boolean;
        res.IsVisibleForPersonInterests= src.IsVisibleForPersonInterests as boolean;
        res.ProjectEventId= src.ProjectEventId as number;
        return res as carriers.ProjectEventEntity;
}

export function Create_ProjectEventEntityArray_From(src:any) : carriers.ProjectEventEntity[] {
    let res : carriers.ProjectEventEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ProjectEventEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_ProjectEventEntityArrayArray_From(src:any) : carriers.ProjectEventEntity[][] {
    let res : carriers.ProjectEventEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ProjectEventEntityArray_From(src[i]);
        }
    }
    return res;
}






export function Create_ProjectMember_From(src:any) : carriers.ProjectMember {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ProjectMember = Create_Carrier_From(src) as carriers.ProjectMember;
        
        res.ProjectmemberId= src.ProjectmemberId as number;
        res.ContactId= src.ContactId as number;
        res.ProjectId= src.ProjectId as number;
        res.ContactName= src.ContactName as string;
        res.ContactDepartment= src.ContactDepartment as string;
        res.ProjectName= src.ProjectName as string;
        res.EmailId= src.EmailId as number;
        res.EmailAddress= src.EmailAddress as string;
        res.CountryId= src.CountryId as number;
        res.Firstname= src.Firstname as string;
        res.MiddleName= src.MiddleName as string;
        res.Lastname= src.Lastname as string;
        res.PersonId= src.PersonId as number;
        res.Mrmrs= src.Mrmrs as string;
        res.ProjectMemberTypeName= src.ProjectMemberTypeName as string;
        res.Phone= src.Phone as string;
        res.PhoneId= src.PhoneId as number;
        res.ProjectMemberTypeId= src.ProjectMemberTypeId as number;
        res.EmailAddressName= src.EmailAddressName as string;
        res.Comment= src.Comment as string;
        res.FullName= src.FullName as string;
        return res as carriers.ProjectMember;
}

export function Create_ProjectMemberArray_From(src:any) : carriers.ProjectMember[] {
    let res : carriers.ProjectMember[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ProjectMember_From(src[i]);
        }
    }
    return res;
}

export function Create_ProjectMemberArrayArray_From(src:any) : carriers.ProjectMember[][] {
    let res : carriers.ProjectMember[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ProjectMemberArray_From(src[i]);
        }
    }
    return res;
}

















export function Create_ActivityInformationListItem_From(src:any) : carriers.ActivityInformationListItem {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ActivityInformationListItem = Create_Carrier_From(src) as carriers.ActivityInformationListItem;
        
        res.Date= Create_Date_From(src.Date);
        res.ActivityInformation= Create_ActivitySummary_From(src.ActivityInformation);
        return res as carriers.ActivityInformationListItem;
}

export function Create_ActivityInformationListItemArray_From(src:any) : carriers.ActivityInformationListItem[] {
    let res : carriers.ActivityInformationListItem[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ActivityInformationListItem_From(src[i]);
        }
    }
    return res;
}

export function Create_ActivityInformationListItemArrayArray_From(src:any) : carriers.ActivityInformationListItem[][] {
    let res : carriers.ActivityInformationListItem[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ActivityInformationListItemArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ActivitySummary_From(src:any) : carriers.ActivitySummary {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ActivitySummary = Create_Carrier_From(src) as carriers.ActivitySummary;
        
        res.NumBusyActivities= src.NumBusyActivities as number;
        res.NumFreeActivities= src.NumFreeActivities as number;
        res.PercentageBusy= src.PercentageBusy as number;
        return res as carriers.ActivitySummary;
}

export function Create_ActivitySummaryArray_From(src:any) : carriers.ActivitySummary[] {
    let res : carriers.ActivitySummary[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ActivitySummary_From(src[i]);
        }
    }
    return res;
}

export function Create_ActivitySummaryArrayArray_From(src:any) : carriers.ActivitySummary[][] {
    let res : carriers.ActivitySummary[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ActivitySummaryArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ActivitySummaryItem_From(src:any) : carriers.ActivitySummaryItem {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.AppointmentId= src.AppointmentId as number;
        res.DocumentId= src.DocumentId as number;
        res.Date= Create_Date_From(src.Date);
        res.Description= src.Description as string;
        res.Completed= enums.ActivityStatus[src.Completed];
        res.Registered= Create_Date_From(src.Registered);
        return res as carriers.ActivitySummaryItem;
}

export function Create_ActivitySummaryItemArray_From(src:any) : carriers.ActivitySummaryItem[] {
    let res : carriers.ActivitySummaryItem[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ActivitySummaryItem_From(src[i]);
        }
    }
    return res;
}

export function Create_ActivitySummaryItemArrayArray_From(src:any) : carriers.ActivitySummaryItem[][] {
    let res : carriers.ActivitySummaryItem[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ActivitySummaryItemArray_From(src[i]);
        }
    }
    return res;
}




export function Create_AddressSyncData_From(src:any) : carriers.AddressSyncData {
        if( src === null || src === undefined )
            return null;
        let res : carriers.AddressSyncData = Create_Carrier_From(src) as carriers.AddressSyncData;
        
        res.AddressId= src.AddressId as number;
        res.AddressType= enums.AddressType[src.AddressType];
        res.Address1= src.Address1 as string;
        res.Address2= src.Address2 as string;
        res.Address3= src.Address3 as string;
        res.City= src.City as string;
        res.County= src.County as string;
        res.ZipCode= src.ZipCode as string;
        res.State= src.State as string;
        res.Latitude= src.Latitude as number;
        res.Longitude= src.Longitude as number;
        res.FormattedAddress= src.FormattedAddress as string;
        return res as carriers.AddressSyncData;
}

export function Create_AddressSyncDataArray_From(src:any) : carriers.AddressSyncData[] {
    let res : carriers.AddressSyncData[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_AddressSyncData_From(src[i]);
        }
    }
    return res;
}

export function Create_AddressSyncDataArrayArray_From(src:any) : carriers.AddressSyncData[][] {
    let res : carriers.AddressSyncData[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_AddressSyncDataArray_From(src[i]);
        }
    }
    return res;
}




export function Create_AlarmData_From(src:any) : carriers.AlarmData {
        if( src === null || src === undefined )
            return null;
        let res : carriers.AlarmData = Create_Carrier_From(src) as carriers.AlarmData;
        
        res.AppointmentId= src.AppointmentId as number;
        res.StartTime= Create_Date_From(src.StartTime);
        res.EndDate= Create_Date_From(src.EndDate);
        res.AlarmTime= Create_Date_From(src.AlarmTime);
        res.PersonId= src.PersonId as number;
        res.PersonFullName= src.PersonFullName as string;
        res.ContactName= src.ContactName as string;
        res.ProjectId= src.ProjectId as number;
        res.ProjectName= src.ProjectName as string;
        res.AppointmentText= src.AppointmentText as string;
        res.SaleId= src.SaleId as number;
        res.SaleName= src.SaleName as string;
        res.Location= src.Location as string;
        res.AppointmentType= enums.AppointmentType[src.AppointmentType];
        res.ContactId= src.ContactId as number;
        res.AssignmentStatus= enums.AssignmentStatus[src.AssignmentStatus];
        res.InvitationStatus= enums.InvitationStatus[src.InvitationStatus];
        res.BookingType= enums.BookingType[src.BookingType];
        res.FormalName= src.FormalName as string;
        res.TaskName= src.TaskName as string;
        res.ContactDepartment= src.ContactDepartment as string;
        res.ContactFullName= src.ContactFullName as string;
        res.JoinVideomeetUrl= src.JoinVideomeetUrl as string;
        return res as carriers.AlarmData;
}

export function Create_AlarmDataArray_From(src:any) : carriers.AlarmData[] {
    let res : carriers.AlarmData[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_AlarmData_From(src[i]);
        }
    }
    return res;
}

export function Create_AlarmDataArrayArray_From(src:any) : carriers.AlarmData[][] {
    let res : carriers.AlarmData[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_AlarmDataArray_From(src[i]);
        }
    }
    return res;
}





export function Create_Appointment_From(src:any) : carriers.Appointment {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Appointment = Create_Carrier_From(src) as carriers.Appointment;
        
        res.AppointmentId= src.AppointmentId as number;
        res.StartDate= Create_Date_From(src.StartDate);
        res.EndDate= Create_Date_From(src.EndDate);
        res.Type= enums.AppointmentType[src.Type];
        res.Task= src.Task as string;
        res.AssociateFullName= src.AssociateFullName as string;
        res.ContactName= src.ContactName as string;
        res.Description= src.Description as string;
        res.PersonFullName= src.PersonFullName as string;
        res.PersonId= src.PersonId as number;
        res.ContactId= src.ContactId as number;
        res.ProjectId= src.ProjectId as number;
        res.ProjectName= src.ProjectName as string;
        res.IsPublished= src.IsPublished as boolean;
        res.AssociateId= src.AssociateId as number;
        res.ColorIndex= src.ColorIndex as number;
        res.IsFree= src.IsFree as boolean;
        res.HasAlarm= src.HasAlarm as boolean;
        res.IsAlldayEvent= src.IsAlldayEvent as boolean;
        res.Private= enums.AppointmentPrivate[src.Private];
        res.PriorityId= src.PriorityId as number;
        res.PriorityName= src.PriorityName as string;
        res.TaskType= enums.TaskType[src.TaskType];
        res.IsBookingMain= src.IsBookingMain as boolean;
        res.IsRecurrence= src.IsRecurrence as boolean;
        res.IsBooking= src.IsBooking as boolean;
        res.ActiveDate= Create_Date_From(src.ActiveDate);
        res.AssignmentStatus= enums.AssignmentStatus[src.AssignmentStatus];
        res.InvitationStatus= enums.InvitationStatus[src.InvitationStatus];
        res.BookingType= enums.BookingType[src.BookingType];
        res.Completed= enums.ActivityStatus[src.Completed];
        res.RecurringPattern= enums.RecurrencePattern[src.RecurringPattern];
        res.RecurringStartDate= Create_Date_From(src.RecurringStartDate);
        res.RecurringEndDate= Create_Date_From(src.RecurringEndDate);
        res.MotherId= src.MotherId as number;
        res.AssignedBy= src.AssignedBy as number;
        res.AssignedByFullName= src.AssignedByFullName as string;
        res.RejectReason= src.RejectReason as string;
        res.Location= src.Location as string;
        res.AlarmLeadTime= Create_Duration_From(src.AlarmLeadTime);
        res.SaleId= src.SaleId as number;
        res.SaleName= src.SaleName as string;
        res.AssociateName= src.AssociateName as string;
        res.CreatedDate= Create_Date_From(src.CreatedDate);
        res.CreatedBy= src.CreatedBy as string;
        res.CreatedByFullName= src.CreatedByFullName as string;
        res.CreatedByAssociateId= src.CreatedByAssociateId as number;
        res.CautionWarning= enums.AppointmentCautionWarning[src.CautionWarning];
        res.JoinVideomeetUrl= src.JoinVideomeetUrl as string;
        res.Title= src.Title as string;
        res.Agenda= src.Agenda as string;
        res.InternalNotes= src.InternalNotes as string;
        return res as carriers.Appointment;
}

export function Create_AppointmentArray_From(src:any) : carriers.Appointment[] {
    let res : carriers.Appointment[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Appointment_From(src[i]);
        }
    }
    return res;
}

export function Create_AppointmentArrayArray_From(src:any) : carriers.Appointment[][] {
    let res : carriers.Appointment[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_AppointmentArray_From(src[i]);
        }
    }
    return res;
}




export function Create_AppointmentEntity_From(src:any) : carriers.AppointmentEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.AppointmentEntity = Create_Carrier_From(src) as carriers.AppointmentEntity;
        
        res.Associate= Create_Associate_From(src.Associate);
        res.Contact= Create_Contact_From(src.Contact);
        res.CreatedBy= Create_Associate_From(src.CreatedBy);
        res.UpdatedBy= Create_Associate_From(src.UpdatedBy);
        res.CreatedDate= Create_Date_From(src.CreatedDate);
        res.AppointmentId= src.AppointmentId as number;
        res.Description= src.Description as string;
        res.StartDate= Create_Date_From(src.StartDate);
        res.EndDate= Create_Date_From(src.EndDate);
        res.InvitedPerson= Create_Person_From(src.InvitedPerson);
        res.Person= Create_Person_From(src.Person);
        res.MotherId= src.MotherId as number;
        res.Priority= Create_Priority_From(src.Priority);
        res.Private= enums.AppointmentPrivate[src.Private];
        res.Project= Create_Project_From(src.Project);
        res.Type= enums.AppointmentType[src.Type];
        res.UpdatedDate= Create_Date_From(src.UpdatedDate);
        res.Completed= enums.ActivityStatus[src.Completed];
        res.ActiveLinks= src.ActiveLinks as number;
        res.Links= Create_LinkArray_From(src.Links);
        res.AlarmLeadTime= Create_Duration_From(src.AlarmLeadTime);
        res.HasAlarm= src.HasAlarm as boolean;
        res.ColorIndex= src.ColorIndex as number;
        res.IsFree= src.IsFree as boolean;
        res.IsAlldayEvent= src.IsAlldayEvent as boolean;
        res.LagTime= Create_Duration_From(src.LagTime);
        res.LeadTime= Create_Duration_From(src.LeadTime);
        res.Location= src.Location as string;
        res.RejectCounter= src.RejectCounter as number;
        res.RejectReason= src.RejectReason as string;
        res.Recurrence= Create_RecurrenceInfo_From(src.Recurrence);
        res.Participants= Create_ParticipantInfoArray_From(src.Participants);
        res.AssignmentStatus= enums.AssignmentStatus[src.AssignmentStatus];
        res.InvitationStatus= enums.InvitationStatus[src.InvitationStatus];
        res.BookingType= enums.BookingType[src.BookingType];
        res.ActiveDate= Create_Date_From(src.ActiveDate);
        res.HasConflict= src.HasConflict as boolean;
        res.AssignedBy= Create_Associate_From(src.AssignedBy);
        res.MotherAssociate= Create_Associate_From(src.MotherAssociate);
        res.Task= Create_TaskListItem_From(src.Task);
        res.PreferredTZLocation= src.PreferredTZLocation as number;
        res.Sale= Create_Sale_From(src.Sale);
        res.SuggestedAppointmentId= src.SuggestedAppointmentId as number;
        res.IsMileStone= src.IsMileStone as boolean;
        res.CautionWarning= enums.AppointmentCautionWarning[src.CautionWarning];
        res.JoinVideomeetUrl= src.JoinVideomeetUrl as string;
        res.CentralserviceVideomeetId= src.CentralserviceVideomeetId as string;
        res.Title= src.Title as string;
        res.Agenda= src.Agenda as string;
        res.InternalNotes= src.InternalNotes as string;
        res.UserDefinedFields= src.UserDefinedFields as carriers.StringDictionary;
        res.ExtraFields= src.ExtraFields as carriers.StringDictionary;
        res.CustomFields= src.CustomFields as carriers.StringDictionary;
        res.PublishEventDate= Create_Date_From(src.PublishEventDate);
        res.PublishTo= Create_Date_From(src.PublishTo);
        res.PublishFrom= Create_Date_From(src.PublishFrom);
        res.IsPublished= src.IsPublished;
        res.VisibleFor= Create_VisibleForArray_From(src.VisibleFor);
        return res as carriers.AppointmentEntity;
}

export function Create_AppointmentEntityArray_From(src:any) : carriers.AppointmentEntity[] {
    let res : carriers.AppointmentEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_AppointmentEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_AppointmentEntityArrayArray_From(src:any) : carriers.AppointmentEntity[][] {
    let res : carriers.AppointmentEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_AppointmentEntityArray_From(src[i]);
        }
    }
    return res;
}





export function Create_AppointmentSyncData_From(src:any) : carriers.AppointmentSyncData {
        if( src === null || src === undefined )
            return null;
        let res : carriers.AppointmentSyncData = Create_Carrier_From(src) as carriers.AppointmentSyncData;
        
        res.AlarmTime= Create_Date_From(src.AlarmTime);
        res.AppointmentId= src.AppointmentId as number;
        res.AppointmentText= src.AppointmentText as string;
        res.ContactDepartment= src.ContactDepartment as string;
        res.ContactFullName= src.ContactFullName as string;
        res.ContactName= src.ContactName as string;
        res.ContactId= src.ContactId as number;
        res.EndDate= Create_Date_From(src.EndDate);
        res.HasAlarm= src.HasAlarm as boolean;
        res.IsAllDay= src.IsAllDay as boolean;
        res.IsAssignment= src.IsAssignment as boolean;
        res.IsBusy= src.IsBusy as boolean;
        res.IsCompleted= src.IsCompleted as boolean;
        res.IsInvitation= src.IsInvitation as boolean;
        res.IsTentative= src.IsTentative as boolean;
        res.Location= src.Location as string;
        res.Participants= Create_ParticipantSyncDataArray_From(src.Participants);
        res.PersonFormalName= src.PersonFormalName as string;
        res.PersonFullName= src.PersonFullName as string;
        res.PersonId= src.PersonId as number;
        res.ProjectId= src.ProjectId as number;
        res.ProjectName= src.ProjectName as string;
        res.SaleId= src.SaleId as number;
        res.SaleName= src.SaleName as string;
        res.StartDate= Create_Date_From(src.StartDate);
        res.TaskName= src.TaskName as string;
        return res as carriers.AppointmentSyncData;
}

export function Create_AppointmentSyncDataArray_From(src:any) : carriers.AppointmentSyncData[] {
    let res : carriers.AppointmentSyncData[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_AppointmentSyncData_From(src[i]);
        }
    }
    return res;
}

export function Create_AppointmentSyncDataArrayArray_From(src:any) : carriers.AppointmentSyncData[][] {
    let res : carriers.AppointmentSyncData[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_AppointmentSyncDataArray_From(src[i]);
        }
    }
    return res;
}





export function Create_DayInformationListItem_From(src:any) : carriers.DayInformationListItem {
        if( src === null || src === undefined )
            return null;
        let res : carriers.DayInformationListItem = Create_Carrier_From(src) as carriers.DayInformationListItem;
        
        res.ActivityInformation= Create_ActivitySummary_From(src.ActivityInformation);
        res.RedLetterInformation= Create_RedLetterSummary_From(src.RedLetterInformation);
        res.Date= Create_Date_From(src.Date);
        return res as carriers.DayInformationListItem;
}

export function Create_DayInformationListItemArray_From(src:any) : carriers.DayInformationListItem[] {
    let res : carriers.DayInformationListItem[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DayInformationListItem_From(src[i]);
        }
    }
    return res;
}

export function Create_DayInformationListItemArrayArray_From(src:any) : carriers.DayInformationListItem[][] {
    let res : carriers.DayInformationListItem[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DayInformationListItemArray_From(src[i]);
        }
    }
    return res;
}




export function Create_MultiAlarmData_From(src:any) : carriers.MultiAlarmData {
        if( src === null || src === undefined )
            return null;
        let res : carriers.MultiAlarmData = Create_Carrier_From(src) as carriers.MultiAlarmData;
        
        res.Alarms= Create_AlarmDataArray_From(src.Alarms);
        res.PollingInterval= src.PollingInterval as number;
        res.SilentAfter= src.SilentAfter as number;
        return res as carriers.MultiAlarmData;
}

export function Create_MultiAlarmDataArray_From(src:any) : carriers.MultiAlarmData[] {
    let res : carriers.MultiAlarmData[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_MultiAlarmData_From(src[i]);
        }
    }
    return res;
}

export function Create_MultiAlarmDataArrayArray_From(src:any) : carriers.MultiAlarmData[][] {
    let res : carriers.MultiAlarmData[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_MultiAlarmDataArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ParticipantInfo_From(src:any) : carriers.ParticipantInfo {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.AssociateId= src.AssociateId as number;
        res.PersonId= src.PersonId as number;
        res.ContactId= src.ContactId as number;
        res.EmailId= src.EmailId as number;
        res.SendEmail= src.SendEmail as boolean;
        res.InvitationStatus= enums.InvitationStatus[src.InvitationStatus];
        return res as carriers.ParticipantInfo;
}

export function Create_ParticipantInfoArray_From(src:any) : carriers.ParticipantInfo[] {
    let res : carriers.ParticipantInfo[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ParticipantInfo_From(src[i]);
        }
    }
    return res;
}

export function Create_ParticipantInfoArrayArray_From(src:any) : carriers.ParticipantInfo[][] {
    let res : carriers.ParticipantInfo[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ParticipantInfoArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ParticipantSyncData_From(src:any) : carriers.ParticipantSyncData {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ParticipantSyncData = Create_Carrier_From(src) as carriers.ParticipantSyncData;
        
        res.PersonId= src.PersonId as number;
        res.PersonFirstName= src.PersonFirstName as string;
        res.PersonMiddleName= src.PersonMiddleName as string;
        res.PersonLastname= src.PersonLastname as string;
        res.PersonMrmrs= src.PersonMrmrs as string;
        res.PersonTitle= src.PersonTitle as string;
        res.PersonPosition= src.PersonPosition as string;
        res.PersonAcademicTitle= src.PersonAcademicTitle as string;
        res.PersonFormalName= src.PersonFormalName as string;
        res.PersonFullName= src.PersonFullName as string;
        res.ContactId= src.ContactId as number;
        res.ContactName= src.ContactName as string;
        res.ContactDepartment= src.ContactDepartment as string;
        res.ContactBusiness= src.ContactBusiness as string;
        res.ContactCountry= src.ContactCountry as string;
        res.ContactCategory= src.ContactCategory as string;
        res.ContactFullName= src.ContactFullName as string;
        res.EMail= src.EMail as string[];
        res.PhonePrivate= src.PhonePrivate as string[];
        res.PhoneFax= src.PhoneFax as string[];
        res.PhoneMobile= src.PhoneMobile as string[];
        res.PhoneDirect= src.PhoneDirect as string[];
        res.PhoneContact= src.PhoneContact as string[];
        res.Messenger= src.Messenger as string[];
        res.Voip= src.Voip as string[];
        res.ContactUrl= src.ContactUrl as string[];
        res.Url= src.Url as string[];
        res.StreetAddress= Create_AddressSyncData_From(src.StreetAddress);
        res.PostalAddress= Create_AddressSyncData_From(src.PostalAddress);
        res.Country= src.Country as string;
        res.PersonAddress= Create_AddressSyncData_From(src.PersonAddress);
        res.PersonCountry= src.PersonCountry as string;
        res.ParticipantStatus= enums.AppointmentStatus[src.ParticipantStatus];
        return res as carriers.ParticipantSyncData;
}

export function Create_ParticipantSyncDataArray_From(src:any) : carriers.ParticipantSyncData[] {
    let res : carriers.ParticipantSyncData[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ParticipantSyncData_From(src[i]);
        }
    }
    return res;
}

export function Create_ParticipantSyncDataArrayArray_From(src:any) : carriers.ParticipantSyncData[][] {
    let res : carriers.ParticipantSyncData[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ParticipantSyncDataArray_From(src[i]);
        }
    }
    return res;
}




export function Create_RedLetterDetails_From(src:any) : carriers.RedLetterDetails {
        if( src === null || src === undefined )
            return null;
        let res : carriers.RedLetterDetails = Create_Carrier_From(src) as carriers.RedLetterDetails;
        
        res.OwnCountryDayTexts= src.OwnCountryDayTexts as string[];
        res.OtherCountryDayTexts= src.OtherCountryDayTexts as string[];
        return res as carriers.RedLetterDetails;
}

export function Create_RedLetterDetailsArray_From(src:any) : carriers.RedLetterDetails[] {
    let res : carriers.RedLetterDetails[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RedLetterDetails_From(src[i]);
        }
    }
    return res;
}

export function Create_RedLetterDetailsArrayArray_From(src:any) : carriers.RedLetterDetails[][] {
    let res : carriers.RedLetterDetails[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RedLetterDetailsArray_From(src[i]);
        }
    }
    return res;
}




export function Create_RedLetterInformationListItem_From(src:any) : carriers.RedLetterInformationListItem {
        if( src === null || src === undefined )
            return null;
        let res : carriers.RedLetterInformationListItem = Create_Carrier_From(src) as carriers.RedLetterInformationListItem;
        
        res.Date= Create_Date_From(src.Date);
        res.RedLetterInformation= Create_RedLetterSummary_From(src.RedLetterInformation);
        res.RedLetterDetails= Create_RedLetterDetails_From(src.RedLetterDetails);
        return res as carriers.RedLetterInformationListItem;
}

export function Create_RedLetterInformationListItemArray_From(src:any) : carriers.RedLetterInformationListItem[] {
    let res : carriers.RedLetterInformationListItem[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RedLetterInformationListItem_From(src[i]);
        }
    }
    return res;
}

export function Create_RedLetterInformationListItemArrayArray_From(src:any) : carriers.RedLetterInformationListItem[][] {
    let res : carriers.RedLetterInformationListItem[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RedLetterInformationListItemArray_From(src[i]);
        }
    }
    return res;
}




export function Create_RedLetterSummary_From(src:any) : carriers.RedLetterSummary {
        if( src === null || src === undefined )
            return null;
        let res : carriers.RedLetterSummary = Create_Carrier_From(src) as carriers.RedLetterSummary;
        
        res.IsOwnCountryHoliday= src.IsOwnCountryHoliday as boolean;
        res.IsOtherCountryHoliday= src.IsOtherCountryHoliday as boolean;
        return res as carriers.RedLetterSummary;
}

export function Create_RedLetterSummaryArray_From(src:any) : carriers.RedLetterSummary[] {
    let res : carriers.RedLetterSummary[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RedLetterSummary_From(src[i]);
        }
    }
    return res;
}

export function Create_RedLetterSummaryArrayArray_From(src:any) : carriers.RedLetterSummary[][] {
    let res : carriers.RedLetterSummary[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RedLetterSummaryArray_From(src[i]);
        }
    }
    return res;
}




export function Create_SalesActivity_From(src:any) : carriers.SalesActivity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.SalesActivity = Create_Carrier_From(src) as carriers.SalesActivity;
        
        res.RequestedContacts= Create_ContactArray_From(src.RequestedContacts);
        res.RequestedPerson= Create_Person_From(src.RequestedPerson);
        res.SalesRep= Create_Person_From(src.SalesRep);
        return res as carriers.SalesActivity;
}

export function Create_SalesActivityArray_From(src:any) : carriers.SalesActivity[] {
    let res : carriers.SalesActivity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SalesActivity_From(src[i]);
        }
    }
    return res;
}

export function Create_SalesActivityArrayArray_From(src:any) : carriers.SalesActivity[][] {
    let res : carriers.SalesActivity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SalesActivityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_SuggestedAppointment_From(src:any) : carriers.SuggestedAppointment {
        if( src === null || src === undefined )
            return null;
        let res : carriers.SuggestedAppointment = Create_Carrier_From(src) as carriers.SuggestedAppointment;
        
        res.AutoSuggest= src.AutoSuggest as number;
        res.Deleted= src.Deleted as number;
        res.DaysFuture= src.DaysFuture as number;
        res.Tooltip= src.Tooltip as string;
        res.Text= src.Text as string;
        res.TaskId= src.TaskId as number;
        res.SuggestedAppointmentId= src.SuggestedAppointmentId as number;
        res.SaleTypeStageLinkId= src.SaleTypeStageLinkId as number;
        res.RegisteredAssociateId= src.RegisteredAssociateId as number;
        res.Rank= src.Rank as number;
        res.ProjectTypeStatusLinkId= src.ProjectTypeStatusLinkId as number;
        res.Name= src.Name as string;
        res.Duration= src.Duration as number;
        res.Associate= Create_Associate_From(src.Associate);
        return res as carriers.SuggestedAppointment;
}

export function Create_SuggestedAppointmentArray_From(src:any) : carriers.SuggestedAppointment[] {
    let res : carriers.SuggestedAppointment[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SuggestedAppointment_From(src[i]);
        }
    }
    return res;
}

export function Create_SuggestedAppointmentArrayArray_From(src:any) : carriers.SuggestedAppointment[][] {
    let res : carriers.SuggestedAppointment[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SuggestedAppointmentArray_From(src[i]);
        }
    }
    return res;
}




export function Create_SuggestedAppointmentEntity_From(src:any) : carriers.SuggestedAppointmentEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.SuggestedAppointmentEntity = Create_Carrier_From(src) as carriers.SuggestedAppointmentEntity;
        
        res.SuggestedAppointmentId= src.SuggestedAppointmentId as number;
        res.Name= src.Name as string;
        res.Tooltip= src.Tooltip as string;
        res.Rank= src.Rank as number;
        res.Deleted= src.Deleted as boolean;
        res.DaysFuture= src.DaysFuture as number;
        res.Duration= Create_Duration_From(src.Duration);
        res.AutoSuggest= src.AutoSuggest as boolean;
        res.IsMilestone= src.IsMilestone as boolean;
        res.AssignToMember= src.AssignToMember as boolean;
        res.Text= src.Text as string;
        res.ProjectTypeStatusLink= Create_ProjectTypeStatusLink_From(src.ProjectTypeStatusLink);
        res.SaleTypeStageLink= Create_SaleTypeStageLink_From(src.SaleTypeStageLink);
        res.Type= Create_Task_From(src.Type);
        return res as carriers.SuggestedAppointmentEntity;
}

export function Create_SuggestedAppointmentEntityArray_From(src:any) : carriers.SuggestedAppointmentEntity[] {
    let res : carriers.SuggestedAppointmentEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SuggestedAppointmentEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_SuggestedAppointmentEntityArrayArray_From(src:any) : carriers.SuggestedAppointmentEntity[][] {
    let res : carriers.SuggestedAppointmentEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SuggestedAppointmentEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_TaskListItem_From(src:any) : carriers.TaskListItem {
        if( src === null || src === undefined )
            return null;
        let res : carriers.TaskListItem = Create_Carrier_From(src) as carriers.TaskListItem;
        
        res.TaskListItemId= src.TaskListItemId as number;
        res.Value= src.Value as string;
        res.Direction= enums.TaskDirection[src.Direction];
        res.Type= enums.TaskType[src.Type];
        res.Tooltip= src.Tooltip as string;
        res.Deleted= src.Deleted as boolean;
        res.IntentId= src.IntentId as number;
        res.Rank= src.Rank as number;
        res.IsDefaultAlldayEvent= src.IsDefaultAlldayEvent as boolean;
        res.IsDefaultFree= src.IsDefaultFree as boolean;
        res.IsDefaultPublished= src.IsDefaultPublished as boolean;
        res.ColorIndex= enums.ColorIndex[src.ColorIndex];
        res.DefaultVideomeetingStatus= enums.VideoMeetingStatus[src.DefaultVideomeetingStatus];
        return res as carriers.TaskListItem;
}

export function Create_TaskListItemArray_From(src:any) : carriers.TaskListItem[] {
    let res : carriers.TaskListItem[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TaskListItem_From(src[i]);
        }
    }
    return res;
}

export function Create_TaskListItemArrayArray_From(src:any) : carriers.TaskListItem[][] {
    let res : carriers.TaskListItem[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TaskListItemArray_From(src[i]);
        }
    }
    return res;
}

















































export function Create_ForeignAppEntity_From(src:any) : carriers.ForeignAppEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ForeignAppEntity = Create_Carrier_From(src) as carriers.ForeignAppEntity;
        
        res.ForeignAppId= src.ForeignAppId as number;
        res.Name= src.Name as string;
        res.CreatedDate= Create_Date_From(src.CreatedDate);
        res.UpdatedDate= Create_Date_From(src.UpdatedDate);
        res.CreatedBy= Create_Associate_From(src.CreatedBy);
        res.UpdatedBy= Create_Associate_From(src.UpdatedBy);
        res.Devices= Create_ForeignDeviceArray_From(src.Devices);
        return res as carriers.ForeignAppEntity;
}

export function Create_ForeignAppEntityArray_From(src:any) : carriers.ForeignAppEntity[] {
    let res : carriers.ForeignAppEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ForeignAppEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_ForeignAppEntityArrayArray_From(src:any) : carriers.ForeignAppEntity[][] {
    let res : carriers.ForeignAppEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ForeignAppEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ForeignDevice_From(src:any) : carriers.ForeignDevice {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ForeignDevice = Create_Carrier_From(src) as carriers.ForeignDevice;
        
        res.ForeignDeviceId= src.ForeignDeviceId as number;
        res.Name= src.Name as string;
        res.CreatedDate= Create_Date_From(src.CreatedDate);
        res.UpdatedDate= Create_Date_From(src.UpdatedDate);
        res.AssociateFullName= src.AssociateFullName as string;
        res.CreatedBy= src.CreatedBy as string;
        res.UpdatedBy= src.UpdatedBy as string;
        res.DeviceIdentifier= src.DeviceIdentifier as string;
        res.ForeignAppId= src.ForeignAppId as number;
        return res as carriers.ForeignDevice;
}

export function Create_ForeignDeviceArray_From(src:any) : carriers.ForeignDevice[] {
    let res : carriers.ForeignDevice[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ForeignDevice_From(src[i]);
        }
    }
    return res;
}

export function Create_ForeignDeviceArrayArray_From(src:any) : carriers.ForeignDevice[][] {
    let res : carriers.ForeignDevice[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ForeignDeviceArray_From(src[i]);
        }
    }
    return res;
}





export function Create_ForeignKey_From(src:any) : carriers.ForeignKey {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ForeignKey = Create_Carrier_From(src) as carriers.ForeignKey;
        
        res.Key= src.Key as string;
        res.Value= src.Value as string;
        res.RecordId= src.RecordId as number;
        res.CreatedDate= Create_Date_From(src.CreatedDate);
        res.UpdatedDate= Create_Date_From(src.UpdatedDate);
        res.UpdatedBy= src.UpdatedBy as string;
        res.CreatedBy= src.CreatedBy as string;
        res.TableName= src.TableName as string;
        return res as carriers.ForeignKey;
}

export function Create_ForeignKeyArray_From(src:any) : carriers.ForeignKey[] {
    let res : carriers.ForeignKey[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ForeignKey_From(src[i]);
        }
    }
    return res;
}

export function Create_ForeignKeyArrayArray_From(src:any) : carriers.ForeignKey[][] {
    let res : carriers.ForeignKey[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ForeignKeyArray_From(src[i]);
        }
    }
    return res;
}











export function Create_CheckoutInfo_From(src:any) : carriers.CheckoutInfo {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.State= enums.CheckoutState[src.State];
        res.AssociateId= src.AssociateId as number;
        res.Name= src.Name as string;
        return res as carriers.CheckoutInfo;
}

export function Create_CheckoutInfoArray_From(src:any) : carriers.CheckoutInfo[] {
    let res : carriers.CheckoutInfo[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CheckoutInfo_From(src[i]);
        }
    }
    return res;
}

export function Create_CheckoutInfoArrayArray_From(src:any) : carriers.CheckoutInfo[][] {
    let res : carriers.CheckoutInfo[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CheckoutInfoArray_From(src[i]);
        }
    }
    return res;
}




export function Create_CommandInfo_From(src:any) : carriers.CommandInfo {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.Name= src.Name as string;
        res.DisplayName= src.DisplayName as string;
        res.DisplayTooltip= src.DisplayTooltip as string;
        res.IconHint= src.IconHint as string;
        res.ReturnType= enums.ReturnType[src.ReturnType];
        return res as carriers.CommandInfo;
}

export function Create_CommandInfoArray_From(src:any) : carriers.CommandInfo[] {
    let res : carriers.CommandInfo[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CommandInfo_From(src[i]);
        }
    }
    return res;
}

export function Create_CommandInfoArrayArray_From(src:any) : carriers.CommandInfo[][] {
    let res : carriers.CommandInfo[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CommandInfoArray_From(src[i]);
        }
    }
    return res;
}




export function Create_Document_From(src:any) : carriers.Document {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Document = Create_Carrier_From(src) as carriers.Document;
        
        res.DocumentId= src.DocumentId as number;
        res.Attention= src.Attention as string;
        res.Header= src.Header as string;
        res.Name= src.Name as string;
        res.OurRef= src.OurRef as string;
        res.YourRef= src.YourRef as string;
        res.Description= src.Description as string;
        res.DocumentTemplate= src.DocumentTemplate as string;
        res.IsPublished= src.IsPublished as boolean;
        res.PersonId= src.PersonId as number;
        res.PersonFullName= src.PersonFullName as string;
        res.AssociateFullName= src.AssociateFullName as string;
        res.ContactId= src.ContactId as number;
        res.ContactName= src.ContactName as string;
        res.ProjectId= src.ProjectId as number;
        res.ProjectName= src.ProjectName as string;
        res.AssociateId= src.AssociateId as number;
        res.Snum= src.Snum as number;
        res.SaleId= src.SaleId as number;
        res.SaleName= src.SaleName as string;
        return res as carriers.Document;
}

export function Create_DocumentArray_From(src:any) : carriers.Document[] {
    let res : carriers.Document[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Document_From(src[i]);
        }
    }
    return res;
}

export function Create_DocumentArrayArray_From(src:any) : carriers.Document[][] {
    let res : carriers.Document[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DocumentArray_From(src[i]);
        }
    }
    return res;
}




export function Create_DocumentEntity_From(src:any) : carriers.DocumentEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.DocumentEntity = Create_Carrier_From(src) as carriers.DocumentEntity;
        
        res.DocumentId= src.DocumentId as number;
        res.UpdatedBy= Create_Associate_From(src.UpdatedBy);
        res.CreatedBy= Create_Associate_From(src.CreatedBy);
        res.Attention= src.Attention as string;
        res.Header= src.Header as string;
        res.Name= src.Name as string;
        res.OurRef= src.OurRef as string;
        res.YourRef= src.YourRef as string;
        res.CreatedDate= Create_Date_From(src.CreatedDate);
        res.UpdatedDate= Create_Date_From(src.UpdatedDate);
        res.Description= src.Description as string;
        res.DocumentTemplate= Create_DocumentTemplate_From(src.DocumentTemplate);
        res.Person= Create_Person_From(src.Person);
        res.Associate= Create_Associate_From(src.Associate);
        res.Contact= Create_Contact_From(src.Contact);
        res.Project= Create_Project_From(src.Project);
        res.Date= Create_Date_From(src.Date);
        res.ExternalRef= src.ExternalRef as string;
        res.Completed= enums.ActivityStatus[src.Completed];
        res.ActiveLinks= src.ActiveLinks as number;
        res.Type= enums.AppointmentType[src.Type];
        res.Links= Create_LinkArray_From(src.Links);
        res.LockSemantics= enums.DocumentLockSemantics[src.LockSemantics];
        res.Sale= Create_Sale_From(src.Sale);
        res.SuggestedDocumentId= src.SuggestedDocumentId as number;
        res.Snum= src.Snum as number;
        res.UserDefinedFields= src.UserDefinedFields as carriers.StringDictionary;
        res.ExtraFields= src.ExtraFields as carriers.StringDictionary;
        res.CustomFields= src.CustomFields as carriers.StringDictionary;
        res.PublishEventDate= Create_Date_From(src.PublishEventDate);
        res.PublishTo= Create_Date_From(src.PublishTo);
        res.PublishFrom= Create_Date_From(src.PublishFrom);
        res.IsPublished= src.IsPublished;
        res.VisibleFor= Create_VisibleForArray_From(src.VisibleFor);
        return res as carriers.DocumentEntity;
}

export function Create_DocumentEntityArray_From(src:any) : carriers.DocumentEntity[] {
    let res : carriers.DocumentEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DocumentEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_DocumentEntityArrayArray_From(src:any) : carriers.DocumentEntity[][] {
    let res : carriers.DocumentEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DocumentEntityArray_From(src[i]);
        }
    }
    return res;
}





export function Create_DocumentPreview_From(src:any) : carriers.DocumentPreview {
        if( src === null || src === undefined )
            return null;
        let res : carriers.DocumentPreview = Create_Carrier_From(src) as carriers.DocumentPreview;
        
        res.Name= src.Name as string;
        res.Type= src.Type as string;
        res.Size= src.Size as number;
        res.Stream= Create_ArrayBuffer_From(src.Stream);
        return res as carriers.DocumentPreview;
}

export function Create_DocumentPreviewArray_From(src:any) : carriers.DocumentPreview[] {
    let res : carriers.DocumentPreview[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DocumentPreview_From(src[i]);
        }
    }
    return res;
}

export function Create_DocumentPreviewArrayArray_From(src:any) : carriers.DocumentPreview[][] {
    let res : carriers.DocumentPreview[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DocumentPreviewArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ReturnInfo_From(src:any) : carriers.ReturnInfo {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.ExternalReference= src.ExternalReference as string;
        res.VersionId= src.VersionId as string;
        res.Success= src.Success as boolean;
        res.Type= enums.ReturnType[src.Type];
        res.Value= src.Value as string;
        res.AdditionalInfo= src.AdditionalInfo as string;
        return res as carriers.ReturnInfo;
}

export function Create_ReturnInfoArray_From(src:any) : carriers.ReturnInfo[] {
    let res : carriers.ReturnInfo[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ReturnInfo_From(src[i]);
        }
    }
    return res;
}

export function Create_ReturnInfoArrayArray_From(src:any) : carriers.ReturnInfo[][] {
    let res : carriers.ReturnInfo[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ReturnInfoArray_From(src[i]);
        }
    }
    return res;
}




export function Create_SuggestedDocumentEntity_From(src:any) : carriers.SuggestedDocumentEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.SuggestedDocumentEntity = Create_Carrier_From(src) as carriers.SuggestedDocumentEntity;
        
        res.SuggestedDocumentId= src.SuggestedDocumentId as number;
        res.Name= src.Name as string;
        res.Tooltip= src.Tooltip as string;
        res.Rank= src.Rank as number;
        res.DoctmplId= src.DoctmplId as number;
        res.Header= src.Header as string;
        res.OurRef= src.OurRef as string;
        res.Deleted= src.Deleted as boolean;
        res.DocTmpl= Create_DocumentTemplate_From(src.DocTmpl);
        res.ProjectTypeStatusLink= Create_ProjectTypeStatusLink_From(src.ProjectTypeStatusLink);
        res.SaleTypeStageLink= Create_SaleTypeStageLink_From(src.SaleTypeStageLink);
        return res as carriers.SuggestedDocumentEntity;
}

export function Create_SuggestedDocumentEntityArray_From(src:any) : carriers.SuggestedDocumentEntity[] {
    let res : carriers.SuggestedDocumentEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SuggestedDocumentEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_SuggestedDocumentEntityArrayArray_From(src:any) : carriers.SuggestedDocumentEntity[][] {
    let res : carriers.SuggestedDocumentEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SuggestedDocumentEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_TemplateInfo_From(src:any) : carriers.TemplateInfo {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.Name= src.Name as string;
        res.Description= src.Description as string;
        res.ExternalReference= src.ExternalReference as string;
        res.PluginId= src.PluginId as number;
        return res as carriers.TemplateInfo;
}

export function Create_TemplateInfoArray_From(src:any) : carriers.TemplateInfo[] {
    let res : carriers.TemplateInfo[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TemplateInfo_From(src[i]);
        }
    }
    return res;
}

export function Create_TemplateInfoArrayArray_From(src:any) : carriers.TemplateInfo[][] {
    let res : carriers.TemplateInfo[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TemplateInfoArray_From(src[i]);
        }
    }
    return res;
}




export function Create_TemplateVariablesParameters_From(src:any) : carriers.TemplateVariablesParameters {
        if( src === null || src === undefined )
            return null;
        let res : carriers.TemplateVariablesParameters = Create_Carrier_From(src) as carriers.TemplateVariablesParameters;
        
        res.SourceInput= src.SourceInput as string;
        res.Encoding= enums.GeneratorEncoding[src.Encoding];
        res.CultureName= src.CultureName as string;
        res.ContactId= src.ContactId as number;
        res.PersonId= src.PersonId as number;
        res.ProjectId= src.ProjectId as number;
        res.SelectionId= src.SelectionId as number;
        res.AppointmentId= src.AppointmentId as number;
        res.DocumentId= src.DocumentId as number;
        res.SaleId= src.SaleId as number;
        res.QuoteLineId= src.QuoteLineId as number;
        res.QuoteAlternativeId= src.QuoteAlternativeId as number;
        res.ProductKey= src.ProductKey as string;
        res.CustomTags= src.CustomTags as string[][];
        res.TicketId= src.TicketId as number;
        res.DocumentEntity= Create_DocumentEntity_From(src.DocumentEntity);
        return res as carriers.TemplateVariablesParameters;
}

export function Create_TemplateVariablesParametersArray_From(src:any) : carriers.TemplateVariablesParameters[] {
    let res : carriers.TemplateVariablesParameters[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TemplateVariablesParameters_From(src[i]);
        }
    }
    return res;
}

export function Create_TemplateVariablesParametersArrayArray_From(src:any) : carriers.TemplateVariablesParameters[][] {
    let res : carriers.TemplateVariablesParameters[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TemplateVariablesParametersArray_From(src[i]);
        }
    }
    return res;
}




export function Create_VersionInfo_From(src:any) : carriers.VersionInfo {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.ExternalReference= src.ExternalReference as string;
        res.DocumentId= src.DocumentId as number;
        res.VersionId= src.VersionId as string;
        res.CheckedInDate= Create_Date_From(src.CheckedInDate);
        res.CheckedInByName= src.CheckedInByName as string;
        res.CheckedInByAssociateId= src.CheckedInByAssociateId as number;
        res.Description= src.Description as string;
        res.DisplayText= src.DisplayText as string;
        res.ExtraFields= src.ExtraFields as string[];
        return res as carriers.VersionInfo;
}

export function Create_VersionInfoArray_From(src:any) : carriers.VersionInfo[] {
    let res : carriers.VersionInfo[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_VersionInfo_From(src[i]);
        }
    }
    return res;
}

export function Create_VersionInfoArrayArray_From(src:any) : carriers.VersionInfo[][] {
    let res : carriers.VersionInfo[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_VersionInfoArray_From(src[i]);
        }
    }
    return res;
}































export function Create_AmountClassEntity_From(src:any) : carriers.AmountClassEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.AmountClassEntity = Create_Carrier_From(src) as carriers.AmountClassEntity;
        
        res.AmountClassId= src.AmountClassId as number;
        res.Name= src.Name as string;
        res.Tooltip= src.Tooltip as string;
        res.Rank= src.Rank as number;
        res.AmountFrom= src.AmountFrom as number;
        res.AmountTo= src.AmountTo as number;
        res.Deleted= src.Deleted as boolean;
        res.CurrencyId= src.CurrencyId as number;
        return res as carriers.AmountClassEntity;
}

export function Create_AmountClassEntityArray_From(src:any) : carriers.AmountClassEntity[] {
    let res : carriers.AmountClassEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_AmountClassEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_AmountClassEntityArrayArray_From(src:any) : carriers.AmountClassEntity[][] {
    let res : carriers.AmountClassEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_AmountClassEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_Business_From(src:any) : carriers.Business {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Business = Create_Carrier_From(src) as carriers.Business;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.Business;
}

export function Create_BusinessArray_From(src:any) : carriers.Business[] {
    let res : carriers.Business[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Business_From(src[i]);
        }
    }
    return res;
}

export function Create_BusinessArrayArray_From(src:any) : carriers.Business[][] {
    let res : carriers.Business[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_BusinessArray_From(src[i]);
        }
    }
    return res;
}





export function Create_Category_From(src:any) : carriers.Category {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Category = Create_Carrier_From(src) as carriers.Category;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.Category;
}

export function Create_CategoryArray_From(src:any) : carriers.Category[] {
    let res : carriers.Category[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Category_From(src[i]);
        }
    }
    return res;
}

export function Create_CategoryArrayArray_From(src:any) : carriers.Category[][] {
    let res : carriers.Category[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CategoryArray_From(src[i]);
        }
    }
    return res;
}





export function Create_Competitor_From(src:any) : carriers.Competitor {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Competitor = Create_Carrier_From(src) as carriers.Competitor;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.Competitor;
}

export function Create_CompetitorArray_From(src:any) : carriers.Competitor[] {
    let res : carriers.Competitor[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Competitor_From(src[i]);
        }
    }
    return res;
}

export function Create_CompetitorArrayArray_From(src:any) : carriers.Competitor[][] {
    let res : carriers.Competitor[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CompetitorArray_From(src[i]);
        }
    }
    return res;
}





export function Create_TaskMenu_From(src:any) : carriers.TaskMenu {
        if( src === null || src === undefined )
            return null;
        let res : carriers.TaskMenu = Create_Carrier_From(src) as carriers.TaskMenu;
        
        res.TaskMenuId= src.TaskMenuId as number;
        res.Name= src.Name as string;
        res.Tooltip= src.Tooltip as string;
        res.TableName= src.TableName as string;
        res.Area= src.Area as string;
        res.UrlOrSoprotocol= src.UrlOrSoprotocol as string;
        res.TaskType= enums.TaskListItemType[src.TaskType];
        res.CrmScriptId= src.CrmScriptId as number;
        res.ShowInClient= Create_ShowTaskItemInClient_From(src.ShowInClient) as enums.ShowTaskItemInClient;
        res.ArchiveBehaviour= Create_ArchiveBehaviour_From(src.ArchiveBehaviour) as enums.ArchiveBehaviour;
        res.Rank= src.Rank as number;
        res.Encoding= enums.UrlEncoding[src.Encoding];
        res.ProgId= src.ProgId as string;
        res.Deleted= src.Deleted as boolean;
        return res as carriers.TaskMenu;
}

export function Create_TaskMenuArray_From(src:any) : carriers.TaskMenu[] {
    let res : carriers.TaskMenu[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TaskMenu_From(src[i]);
        }
    }
    return res;
}

export function Create_TaskMenuArrayArray_From(src:any) : carriers.TaskMenu[][] {
    let res : carriers.TaskMenu[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TaskMenuArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ConsentPurpose_From(src:any) : carriers.ConsentPurpose {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ConsentPurpose = Create_Carrier_From(src) as carriers.ConsentPurpose;
        
        res.ConsentPurposeId= src.ConsentPurposeId as number;
        res.Name= src.Name as string;
        res.ConsentText= src.ConsentText as string;
        res.FormText= src.FormText as string;
        res.Key= src.Key as string;
        res.Tooltip= src.Tooltip as string;
        res.Active= src.Active as number;
        res.UpdatedDate= Create_Date_From(src.UpdatedDate);
        res.UpdatedBy= Create_Associate_From(src.UpdatedBy);
        res.Deleted= src.Deleted as boolean;
        res.Rank= src.Rank as number;
        res.PrivacyStatementDesc= src.PrivacyStatementDesc as string;
        res.PrivacyStatementUrl= src.PrivacyStatementUrl as string;
        return res as carriers.ConsentPurpose;
}

export function Create_ConsentPurposeArray_From(src:any) : carriers.ConsentPurpose[] {
    let res : carriers.ConsentPurpose[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ConsentPurpose_From(src[i]);
        }
    }
    return res;
}

export function Create_ConsentPurposeArrayArray_From(src:any) : carriers.ConsentPurpose[][] {
    let res : carriers.ConsentPurpose[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ConsentPurposeArray_From(src[i]);
        }
    }
    return res;
}





export function Create_ConsentSource_From(src:any) : carriers.ConsentSource {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ConsentSource = Create_Carrier_From(src) as carriers.ConsentSource;
        
        res.ConsentSourceId= src.ConsentSourceId as number;
        res.Name= src.Name as string;
        res.Tooltip= src.Tooltip as string;
        res.Rank= src.Rank as number;
        res.Key= src.Key as string;
        res.MailTemplateId= src.MailTemplateId as number;
        res.Deleted= src.Deleted as boolean;
        return res as carriers.ConsentSource;
}

export function Create_ConsentSourceArray_From(src:any) : carriers.ConsentSource[] {
    let res : carriers.ConsentSource[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ConsentSource_From(src[i]);
        }
    }
    return res;
}

export function Create_ConsentSourceArrayArray_From(src:any) : carriers.ConsentSource[][] {
    let res : carriers.ConsentSource[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ConsentSourceArray_From(src[i]);
        }
    }
    return res;
}





export function Create_Country_From(src:any) : carriers.Country {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Country = Create_Carrier_From(src) as carriers.Country;
        
        res.CountryId= src.CountryId as number;
        res.Name= src.Name as string;
        res.CurrencyId= src.CurrencyId as number;
        res.EnglishName= src.EnglishName as string;
        res.TwoLetterISOCountry= src.TwoLetterISOCountry as string;
        res.ThreeLetterISOCountry= src.ThreeLetterISOCountry as string;
        res.ImageDescription= src.ImageDescription as string;
        res.OrgNrText= src.OrgNrText as string;
        res.InterAreaPrefix= src.InterAreaPrefix as string;
        res.DialInPrefix= src.DialInPrefix as string;
        res.ZipPrefix= src.ZipPrefix as string;
        res.DomainName= src.DomainName as string;
        res.AddressLayoutId= src.AddressLayoutId as number;
        res.DomesticAddressLayoutId= src.DomesticAddressLayoutId as number;
        res.ForeignAddressLayoutId= src.ForeignAddressLayoutId as number;
        res.Rank= src.Rank as number;
        res.Tooltip= src.Tooltip as string;
        res.Deleted= src.Deleted as boolean;
        return res as carriers.Country;
}

export function Create_CountryArray_From(src:any) : carriers.Country[] {
    let res : carriers.Country[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Country_From(src[i]);
        }
    }
    return res;
}

export function Create_CountryArrayArray_From(src:any) : carriers.Country[][] {
    let res : carriers.Country[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CountryArray_From(src[i]);
        }
    }
    return res;
}





export function Create_Credited_From(src:any) : carriers.Credited {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Credited = Create_Carrier_From(src) as carriers.Credited;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.Credited;
}

export function Create_CreditedArray_From(src:any) : carriers.Credited[] {
    let res : carriers.Credited[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Credited_From(src[i]);
        }
    }
    return res;
}

export function Create_CreditedArrayArray_From(src:any) : carriers.Credited[][] {
    let res : carriers.Credited[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CreditedArray_From(src[i]);
        }
    }
    return res;
}





export function Create_Currency_From(src:any) : carriers.Currency {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Currency = Create_Carrier_From(src) as carriers.Currency;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.Currency;
}

export function Create_CurrencyArray_From(src:any) : carriers.Currency[] {
    let res : carriers.Currency[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Currency_From(src[i]);
        }
    }
    return res;
}

export function Create_CurrencyArrayArray_From(src:any) : carriers.Currency[][] {
    let res : carriers.Currency[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CurrencyArray_From(src[i]);
        }
    }
    return res;
}




export function Create_CurrencyEntity_From(src:any) : carriers.CurrencyEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.CurrencyEntity = Create_Carrier_From(src) as carriers.CurrencyEntity;
        
        res.CurrencyId= src.CurrencyId as number;
        res.Name= src.Name as string;
        res.Tooltip= src.Tooltip as string;
        res.Rank= src.Rank as number;
        res.Rate= src.Rate as number;
        res.Units= src.Units as number;
        res.Deleted= src.Deleted as boolean;
        return res as carriers.CurrencyEntity;
}

export function Create_CurrencyEntityArray_From(src:any) : carriers.CurrencyEntity[] {
    let res : carriers.CurrencyEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CurrencyEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_CurrencyEntityArrayArray_From(src:any) : carriers.CurrencyEntity[][] {
    let res : carriers.CurrencyEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CurrencyEntityArray_From(src[i]);
        }
    }
    return res;
}





export function Create_CustomerLanguage_From(src:any) : carriers.CustomerLanguage {
        if( src === null || src === undefined )
            return null;
        let res : carriers.CustomerLanguage = Create_Carrier_From(src) as carriers.CustomerLanguage;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.CustomerLanguage;
}

export function Create_CustomerLanguageArray_From(src:any) : carriers.CustomerLanguage[] {
    let res : carriers.CustomerLanguage[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CustomerLanguage_From(src[i]);
        }
    }
    return res;
}

export function Create_CustomerLanguageArrayArray_From(src:any) : carriers.CustomerLanguage[][] {
    let res : carriers.CustomerLanguage[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CustomerLanguageArray_From(src[i]);
        }
    }
    return res;
}





export function Create_DeliveryTerm_From(src:any) : carriers.DeliveryTerm {
        if( src === null || src === undefined )
            return null;
        let res : carriers.DeliveryTerm = Create_Carrier_From(src) as carriers.DeliveryTerm;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.DeliveryTerm;
}

export function Create_DeliveryTermArray_From(src:any) : carriers.DeliveryTerm[] {
    let res : carriers.DeliveryTerm[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DeliveryTerm_From(src[i]);
        }
    }
    return res;
}

export function Create_DeliveryTermArrayArray_From(src:any) : carriers.DeliveryTerm[][] {
    let res : carriers.DeliveryTerm[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DeliveryTermArray_From(src[i]);
        }
    }
    return res;
}





export function Create_DeliveryType_From(src:any) : carriers.DeliveryType {
        if( src === null || src === undefined )
            return null;
        let res : carriers.DeliveryType = Create_Carrier_From(src) as carriers.DeliveryType;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.DeliveryType;
}

export function Create_DeliveryTypeArray_From(src:any) : carriers.DeliveryType[] {
    let res : carriers.DeliveryType[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DeliveryType_From(src[i]);
        }
    }
    return res;
}

export function Create_DeliveryTypeArrayArray_From(src:any) : carriers.DeliveryType[][] {
    let res : carriers.DeliveryType[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DeliveryTypeArray_From(src[i]);
        }
    }
    return res;
}





export function Create_Department_From(src:any) : carriers.Department {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Department = Create_Carrier_From(src) as carriers.Department;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.Department;
}

export function Create_DepartmentArray_From(src:any) : carriers.Department[] {
    let res : carriers.Department[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Department_From(src[i]);
        }
    }
    return res;
}

export function Create_DepartmentArrayArray_From(src:any) : carriers.Department[][] {
    let res : carriers.Department[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DepartmentArray_From(src[i]);
        }
    }
    return res;
}





export function Create_DocumentTemplate_From(src:any) : carriers.DocumentTemplate {
        if( src === null || src === undefined )
            return null;
        let res : carriers.DocumentTemplate = Create_Carrier_From(src) as carriers.DocumentTemplate;
        
        res.DocumentTemplateId= src.DocumentTemplateId as number;
        res.Name= src.Name as string;
        res.Tooltip= src.Tooltip as string;
        res.SaveInDb= src.SaveInDb as number;
        res.Filename= src.Filename as string;
        res.DefaultOref= src.DefaultOref as string;
        res.RecordType= enums.DocTmplType[src.RecordType];
        res.Deleted= src.Deleted as number;
        res.Direction= enums.DocTmplDirection[src.Direction];
        res.AutoeventId= src.AutoeventId as number;
        res.QuoteDocType= enums.DocTmplQuoteType[src.QuoteDocType];
        return res as carriers.DocumentTemplate;
}

export function Create_DocumentTemplateArray_From(src:any) : carriers.DocumentTemplate[] {
    let res : carriers.DocumentTemplate[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DocumentTemplate_From(src[i]);
        }
    }
    return res;
}

export function Create_DocumentTemplateArrayArray_From(src:any) : carriers.DocumentTemplate[][] {
    let res : carriers.DocumentTemplate[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DocumentTemplateArray_From(src[i]);
        }
    }
    return res;
}




export function Create_DocumentTemplateEntity_From(src:any) : carriers.DocumentTemplateEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.DocumentTemplateEntity = Create_Carrier_From(src) as carriers.DocumentTemplateEntity;
        
        res.DocumentTemplateId= src.DocumentTemplateId as number;
        res.Name= src.Name as string;
        res.Tooltip= src.Tooltip as string;
        res.SaveInDb= src.SaveInDb as number;
        res.Filename= src.Filename as string;
        res.DefaultOref= src.DefaultOref as string;
        res.RecordType= enums.DocTmplType[src.RecordType];
        res.Deleted= src.Deleted as boolean;
        res.Direction= enums.DocTmplDirection[src.Direction];
        res.AutoeventId= src.AutoeventId as number;
        res.IntentId= src.IntentId as number;
        res.IsDefaultPublished= src.IsDefaultPublished as boolean;
        res.Rank= src.Rank as number;
        res.LoadTemplateFromPlugin= src.LoadTemplateFromPlugin as number;
        res.MimeType= src.MimeType as string;
        res.IsInUseInGuides= src.IsInUseInGuides as boolean;
        res.DocumentTypeKey= src.DocumentTypeKey as number;
        res.QuoteDocType= enums.DocTmplQuoteType[src.QuoteDocType];
        res.PrivacyDocType= enums.DocTmplPrivacyType[src.PrivacyDocType];
        res.EmailSubject= src.EmailSubject as string;
        res.IncludeSignature= src.IncludeSignature as boolean;
        res.ShowCurrents= src.ShowCurrents as boolean;
        res.SenderEmailMode= enums.SenderMailMode[src.SenderEmailMode];
        res.SenderEmailAddress= src.SenderEmailAddress as string;
        res.InvitationDocType= enums.DocTmplInvitationType[src.InvitationDocType];
        return res as carriers.DocumentTemplateEntity;
}

export function Create_DocumentTemplateEntityArray_From(src:any) : carriers.DocumentTemplateEntity[] {
    let res : carriers.DocumentTemplateEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DocumentTemplateEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_DocumentTemplateEntityArrayArray_From(src:any) : carriers.DocumentTemplateEntity[][] {
    let res : carriers.DocumentTemplateEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DocumentTemplateEntityArray_From(src[i]);
        }
    }
    return res;
}





export function Create_ExtAppEntity_From(src:any) : carriers.ExtAppEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ExtAppEntity = Create_Carrier_From(src) as carriers.ExtAppEntity;
        
        res.ExtAppId= src.ExtAppId as number;
        res.Name= src.Name as string;
        res.Tooltip= src.Tooltip as string;
        res.Deleted= src.Deleted as boolean;
        res.Rank= src.Rank as number;
        res.Filename= src.Filename as string;
        res.Parameters= src.Parameters as string;
        res.Workdir= src.Workdir as string;
        res.ShowState= Create_ShowState_From(src.ShowState) as enums.ShowState;
        res.VisibleIn= enums.Navigation[src.VisibleIn];
        res.OnCentral= src.OnCentral as boolean;
        res.OnSatellite= src.OnSatellite as boolean;
        res.OnTravel= src.OnTravel as boolean;
        res.OnSalesMarketingPocket= src.OnSalesMarketingPocket as boolean;
        res.ShowInMenuBar= src.ShowInMenuBar as boolean;
        res.ShowInToolBar= src.ShowInToolBar as boolean;
        res.ShowInAddressBar= src.ShowInAddressBar as boolean;
        res.ShowInStatusBar= src.ShowInStatusBar as boolean;
        res.Icon= src.Icon as number;
        res.WaitToFinish= src.WaitToFinish as boolean;
        res.ExecuteOnEvent= enums.ExecuteOnEvent[src.ExecuteOnEvent];
        res.Path= src.Path as string;
        return res as carriers.ExtAppEntity;
}

export function Create_ExtAppEntityArray_From(src:any) : carriers.ExtAppEntity[] {
    let res : carriers.ExtAppEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ExtAppEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_ExtAppEntityArrayArray_From(src:any) : carriers.ExtAppEntity[][] {
    let res : carriers.ExtAppEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ExtAppEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_HeadingEntity_From(src:any) : carriers.HeadingEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.HeadingEntity = Create_Carrier_From(src) as carriers.HeadingEntity;
        
        res.HeadingId= src.HeadingId as number;
        res.Name= src.Name as string;
        res.Tooltip= src.Tooltip as string;
        res.Deleted= src.Deleted as boolean;
        res.Rank= src.Rank as number;
        res.UdListDefinitionId= src.UdListDefinitionId as number;
        return res as carriers.HeadingEntity;
}

export function Create_HeadingEntityArray_From(src:any) : carriers.HeadingEntity[] {
    let res : carriers.HeadingEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_HeadingEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_HeadingEntityArrayArray_From(src:any) : carriers.HeadingEntity[][] {
    let res : carriers.HeadingEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_HeadingEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_HierarchyEntity_From(src:any) : carriers.HierarchyEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.HierarchyEntity = Create_Carrier_From(src) as carriers.HierarchyEntity;
        
        res.HierarchyId= src.HierarchyId as number;
        res.Domain= enums.Domain[src.Domain];
        res.Name= src.Name as string;
        res.Fullname= src.Fullname as string;
        res.ParentId= src.ParentId as number;
        res.Children= Create_HierarchyEntityArray_From(src.Children);
        res.Registered= Create_Date_From(src.Registered);
        res.RegisteredAssociateId= src.RegisteredAssociateId as number;
        res.Updated= Create_Date_From(src.Updated);
        res.UpdatedAssociateId= src.UpdatedAssociateId as number;
        return res as carriers.HierarchyEntity;
}

export function Create_HierarchyEntityArray_From(src:any) : carriers.HierarchyEntity[] {
    let res : carriers.HierarchyEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_HierarchyEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_HierarchyEntityArrayArray_From(src:any) : carriers.HierarchyEntity[][] {
    let res : carriers.HierarchyEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_HierarchyEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_LanguageInfo_From(src:any) : carriers.LanguageInfo {
        if( src === null || src === undefined )
            return null;
        let res : carriers.LanguageInfo = Create_Carrier_From(src) as carriers.LanguageInfo;
        
        res.LanguageInfoId= src.LanguageInfoId as number;
        res.LCID= src.LCID as number;
        res.EnglishName= src.EnglishName as string;
        res.NativeName= src.NativeName as string;
        res.ThreeLetterISOLanguageName= src.ThreeLetterISOLanguageName as string;
        res.TwoLetterISOLanguageName= src.TwoLetterISOLanguageName as string;
        res.IsBuiltIn= src.IsBuiltIn as boolean;
        return res as carriers.LanguageInfo;
}

export function Create_LanguageInfoArray_From(src:any) : carriers.LanguageInfo[] {
    let res : carriers.LanguageInfo[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_LanguageInfo_From(src[i]);
        }
    }
    return res;
}

export function Create_LanguageInfoArrayArray_From(src:any) : carriers.LanguageInfo[][] {
    let res : carriers.LanguageInfo[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_LanguageInfoArray_From(src[i]);
        }
    }
    return res;
}





export function Create_LegalBase_From(src:any) : carriers.LegalBase {
        if( src === null || src === undefined )
            return null;
        let res : carriers.LegalBase = Create_Carrier_From(src) as carriers.LegalBase;
        
        res.LegalBaseId= src.LegalBaseId as number;
        res.Name= src.Name as string;
        res.Tooltip= src.Tooltip as string;
        res.Rank= src.Rank as number;
        res.Key= src.Key as string;
        res.Deleted= src.Deleted as boolean;
        return res as carriers.LegalBase;
}

export function Create_LegalBaseArray_From(src:any) : carriers.LegalBase[] {
    let res : carriers.LegalBase[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_LegalBase_From(src[i]);
        }
    }
    return res;
}

export function Create_LegalBaseArrayArray_From(src:any) : carriers.LegalBase[][] {
    let res : carriers.LegalBase[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_LegalBaseArray_From(src[i]);
        }
    }
    return res;
}





export function Create_Link_From(src:any) : carriers.Link {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Link = Create_Carrier_From(src) as carriers.Link;
        
        res.EntityName= src.EntityName as string;
        res.Id= src.Id as number;
        res.Description= src.Description as string;
        res.ExtraInfo= src.ExtraInfo as string;
        res.LinkId= src.LinkId as number;
        return res as carriers.Link;
}

export function Create_LinkArray_From(src:any) : carriers.Link[] {
    let res : carriers.Link[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Link_From(src[i]);
        }
    }
    return res;
}

export function Create_LinkArrayArray_From(src:any) : carriers.Link[][] {
    let res : carriers.Link[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_LinkArray_From(src[i]);
        }
    }
    return res;
}





export function Create_ListEntity_From(src:any) : carriers.ListEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ListEntity = Create_Carrier_From(src) as carriers.ListEntity;
        
        res.Id= src.Id as number;
        res.Name= src.Name as string;
        res.Tooltip= src.Tooltip as string;
        res.Deleted= src.Deleted as boolean;
        res.Rank= src.Rank as number;
        res.IsCustomList= src.IsCustomList as boolean;
        res.IsMDOList= src.IsMDOList as boolean;
        res.UseGroupsAndHeadings= src.UseGroupsAndHeadings as boolean;
        res.ListType= src.ListType as string;
        res.InUseByUserDefinedFields= src.InUseByUserDefinedFields as boolean;
        return res as carriers.ListEntity;
}

export function Create_ListEntityArray_From(src:any) : carriers.ListEntity[] {
    let res : carriers.ListEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ListEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_ListEntityArrayArray_From(src:any) : carriers.ListEntity[][] {
    let res : carriers.ListEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ListEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ListItem_From(src:any) : carriers.ListItem {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.Id= src.Id as number;
        res.Name= src.Name as string;
        res.ToolTip= src.ToolTip as string;
        return res as carriers.ListItem;
}

export function Create_ListItemArray_From(src:any) : carriers.ListItem[] {
    let res : carriers.ListItem[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ListItem_From(src[i]);
        }
    }
    return res;
}

export function Create_ListItemArrayArray_From(src:any) : carriers.ListItem[][] {
    let res : carriers.ListItem[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ListItemArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ListItemEntity_From(src:any) : carriers.ListItemEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ListItemEntity = Create_Carrier_From(src) as carriers.ListItemEntity;
        
        res.Id= src.Id as number;
        res.Name= src.Name as string;
        res.Tooltip= src.Tooltip as string;
        res.Deleted= src.Deleted as boolean;
        res.UdListDefinitionId= src.UdListDefinitionId as number;
        res.Rank= src.Rank as number;
        return res as carriers.ListItemEntity;
}

export function Create_ListItemEntityArray_From(src:any) : carriers.ListItemEntity[] {
    let res : carriers.ListItemEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ListItemEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_ListItemEntityArrayArray_From(src:any) : carriers.ListItemEntity[][] {
    let res : carriers.ListItemEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ListItemEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_LocalizedText_From(src:any) : carriers.LocalizedText {
        if( src === null || src === undefined )
            return null;
        let res : carriers.LocalizedText = Create_Carrier_From(src) as carriers.LocalizedText;
        
        res.LanguageId= src.LanguageId as number;
        res.ResourceId= src.ResourceId as number;
        res.Text= src.Text as string;
        res.Type= enums.LocalizedTextType[src.Type];
        res.LocalizedTextId= src.LocalizedTextId as number;
        res.IsBuiltIn= src.IsBuiltIn as boolean;
        return res as carriers.LocalizedText;
}

export function Create_LocalizedTextArray_From(src:any) : carriers.LocalizedText[] {
    let res : carriers.LocalizedText[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_LocalizedText_From(src[i]);
        }
    }
    return res;
}

export function Create_LocalizedTextArrayArray_From(src:any) : carriers.LocalizedText[][] {
    let res : carriers.LocalizedText[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_LocalizedTextArray_From(src[i]);
        }
    }
    return res;
}





export function Create_MrMrs_From(src:any) : carriers.MrMrs {
        if( src === null || src === undefined )
            return null;
        let res : carriers.MrMrs = Create_Carrier_From(src) as carriers.MrMrs;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.MrMrs;
}

export function Create_MrMrsArray_From(src:any) : carriers.MrMrs[] {
    let res : carriers.MrMrs[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_MrMrs_From(src[i]);
        }
    }
    return res;
}

export function Create_MrMrsArrayArray_From(src:any) : carriers.MrMrs[][] {
    let res : carriers.MrMrs[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_MrMrsArray_From(src[i]);
        }
    }
    return res;
}





export function Create_PaymentTerm_From(src:any) : carriers.PaymentTerm {
        if( src === null || src === undefined )
            return null;
        let res : carriers.PaymentTerm = Create_Carrier_From(src) as carriers.PaymentTerm;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.PaymentTerm;
}

export function Create_PaymentTermArray_From(src:any) : carriers.PaymentTerm[] {
    let res : carriers.PaymentTerm[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PaymentTerm_From(src[i]);
        }
    }
    return res;
}

export function Create_PaymentTermArrayArray_From(src:any) : carriers.PaymentTerm[][] {
    let res : carriers.PaymentTerm[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PaymentTermArray_From(src[i]);
        }
    }
    return res;
}





export function Create_PaymentType_From(src:any) : carriers.PaymentType {
        if( src === null || src === undefined )
            return null;
        let res : carriers.PaymentType = Create_Carrier_From(src) as carriers.PaymentType;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.PaymentType;
}

export function Create_PaymentTypeArray_From(src:any) : carriers.PaymentType[] {
    let res : carriers.PaymentType[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PaymentType_From(src[i]);
        }
    }
    return res;
}

export function Create_PaymentTypeArrayArray_From(src:any) : carriers.PaymentType[][] {
    let res : carriers.PaymentType[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PaymentTypeArray_From(src[i]);
        }
    }
    return res;
}





export function Create_Position_From(src:any) : carriers.Position {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Position = Create_Carrier_From(src) as carriers.Position;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.Position;
}

export function Create_PositionArray_From(src:any) : carriers.Position[] {
    let res : carriers.Position[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Position_From(src[i]);
        }
    }
    return res;
}

export function Create_PositionArrayArray_From(src:any) : carriers.Position[][] {
    let res : carriers.Position[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PositionArray_From(src[i]);
        }
    }
    return res;
}





export function Create_Priority_From(src:any) : carriers.Priority {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Priority = Create_Carrier_From(src) as carriers.Priority;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.Priority;
}

export function Create_PriorityArray_From(src:any) : carriers.Priority[] {
    let res : carriers.Priority[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Priority_From(src[i]);
        }
    }
    return res;
}

export function Create_PriorityArrayArray_From(src:any) : carriers.Priority[][] {
    let res : carriers.Priority[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PriorityArray_From(src[i]);
        }
    }
    return res;
}





export function Create_ProductCategory_From(src:any) : carriers.ProductCategory {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ProductCategory = Create_Carrier_From(src) as carriers.ProductCategory;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.ProductCategory;
}

export function Create_ProductCategoryArray_From(src:any) : carriers.ProductCategory[] {
    let res : carriers.ProductCategory[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ProductCategory_From(src[i]);
        }
    }
    return res;
}

export function Create_ProductCategoryArrayArray_From(src:any) : carriers.ProductCategory[][] {
    let res : carriers.ProductCategory[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ProductCategoryArray_From(src[i]);
        }
    }
    return res;
}





export function Create_ProductFamily_From(src:any) : carriers.ProductFamily {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ProductFamily = Create_Carrier_From(src) as carriers.ProductFamily;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.ProductFamily;
}

export function Create_ProductFamilyArray_From(src:any) : carriers.ProductFamily[] {
    let res : carriers.ProductFamily[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ProductFamily_From(src[i]);
        }
    }
    return res;
}

export function Create_ProductFamilyArrayArray_From(src:any) : carriers.ProductFamily[][] {
    let res : carriers.ProductFamily[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ProductFamilyArray_From(src[i]);
        }
    }
    return res;
}





export function Create_ProductType_From(src:any) : carriers.ProductType {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ProductType = Create_Carrier_From(src) as carriers.ProductType;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.ProductType;
}

export function Create_ProductTypeArray_From(src:any) : carriers.ProductType[] {
    let res : carriers.ProductType[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ProductType_From(src[i]);
        }
    }
    return res;
}

export function Create_ProductTypeArrayArray_From(src:any) : carriers.ProductType[][] {
    let res : carriers.ProductType[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ProductTypeArray_From(src[i]);
        }
    }
    return res;
}





export function Create_ProjectStatus_From(src:any) : carriers.ProjectStatus {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ProjectStatus = Create_Carrier_From(src) as carriers.ProjectStatus;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.ProjectStatus;
}

export function Create_ProjectStatusArray_From(src:any) : carriers.ProjectStatus[] {
    let res : carriers.ProjectStatus[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ProjectStatus_From(src[i]);
        }
    }
    return res;
}

export function Create_ProjectStatusArrayArray_From(src:any) : carriers.ProjectStatus[][] {
    let res : carriers.ProjectStatus[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ProjectStatusArray_From(src[i]);
        }
    }
    return res;
}





export function Create_ProjectType_From(src:any) : carriers.ProjectType {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ProjectType = Create_Carrier_From(src) as carriers.ProjectType;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.ProjectType;
}

export function Create_ProjectTypeArray_From(src:any) : carriers.ProjectType[] {
    let res : carriers.ProjectType[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ProjectType_From(src[i]);
        }
    }
    return res;
}

export function Create_ProjectTypeArrayArray_From(src:any) : carriers.ProjectType[][] {
    let res : carriers.ProjectType[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ProjectTypeArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ProjectTypeEntity_From(src:any) : carriers.ProjectTypeEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ProjectTypeEntity = Create_Carrier_From(src) as carriers.ProjectTypeEntity;
        
        res.ProjTypeId= src.ProjTypeId as number;
        res.Name= src.Name as string;
        res.Tooltip= src.Tooltip as string;
        res.Rank= src.Rank as number;
        res.DurationUnit= enums.DurationUnit[src.DurationUnit];
        res.ProjectDuration= src.ProjectDuration as number;
        res.Deleted= src.Deleted as boolean;
        res.HasGuide= src.HasGuide as boolean;
        res.IsAutoAdvance= src.IsAutoAdvance as boolean;
        res.Stages= Create_SelectableMDOListItemArray_From(src.Stages);
        return res as carriers.ProjectTypeEntity;
}

export function Create_ProjectTypeEntityArray_From(src:any) : carriers.ProjectTypeEntity[] {
    let res : carriers.ProjectTypeEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ProjectTypeEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_ProjectTypeEntityArrayArray_From(src:any) : carriers.ProjectTypeEntity[][] {
    let res : carriers.ProjectTypeEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ProjectTypeEntityArray_From(src[i]);
        }
    }
    return res;
}





export function Create_QuickReply_From(src:any) : carriers.QuickReply {
        if( src === null || src === undefined )
            return null;
        let res : carriers.QuickReply = Create_Carrier_From(src) as carriers.QuickReply;
        
        res.QuickReplyId= src.QuickReplyId as number;
        res.Name= src.Name as string;
        res.HtmlBody= src.HtmlBody as string;
        return res as carriers.QuickReply;
}

export function Create_QuickReplyArray_From(src:any) : carriers.QuickReply[] {
    let res : carriers.QuickReply[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuickReply_From(src[i]);
        }
    }
    return res;
}

export function Create_QuickReplyArrayArray_From(src:any) : carriers.QuickReply[][] {
    let res : carriers.QuickReply[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuickReplyArray_From(src[i]);
        }
    }
    return res;
}




export function Create_Rating_From(src:any) : carriers.Rating {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Rating = Create_Carrier_From(src) as carriers.Rating;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.Rating;
}

export function Create_RatingArray_From(src:any) : carriers.Rating[] {
    let res : carriers.Rating[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Rating_From(src[i]);
        }
    }
    return res;
}

export function Create_RatingArrayArray_From(src:any) : carriers.Rating[][] {
    let res : carriers.Rating[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RatingArray_From(src[i]);
        }
    }
    return res;
}





export function Create_Reason_From(src:any) : carriers.Reason {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Reason = Create_Carrier_From(src) as carriers.Reason;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.Reason;
}

export function Create_ReasonArray_From(src:any) : carriers.Reason[] {
    let res : carriers.Reason[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Reason_From(src[i]);
        }
    }
    return res;
}

export function Create_ReasonArrayArray_From(src:any) : carriers.Reason[][] {
    let res : carriers.Reason[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ReasonArray_From(src[i]);
        }
    }
    return res;
}





export function Create_QuoteApproveReason_From(src:any) : carriers.QuoteApproveReason {
        if( src === null || src === undefined )
            return null;
        let res : carriers.QuoteApproveReason = Create_Carrier_From(src) as carriers.QuoteApproveReason;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.QuoteApproveReason;
}

export function Create_QuoteApproveReasonArray_From(src:any) : carriers.QuoteApproveReason[] {
    let res : carriers.QuoteApproveReason[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteApproveReason_From(src[i]);
        }
    }
    return res;
}

export function Create_QuoteApproveReasonArrayArray_From(src:any) : carriers.QuoteApproveReason[][] {
    let res : carriers.QuoteApproveReason[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteApproveReasonArray_From(src[i]);
        }
    }
    return res;
}





export function Create_QuoteDenyReason_From(src:any) : carriers.QuoteDenyReason {
        if( src === null || src === undefined )
            return null;
        let res : carriers.QuoteDenyReason = Create_Carrier_From(src) as carriers.QuoteDenyReason;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.QuoteDenyReason;
}

export function Create_QuoteDenyReasonArray_From(src:any) : carriers.QuoteDenyReason[] {
    let res : carriers.QuoteDenyReason[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteDenyReason_From(src[i]);
        }
    }
    return res;
}

export function Create_QuoteDenyReasonArrayArray_From(src:any) : carriers.QuoteDenyReason[][] {
    let res : carriers.QuoteDenyReason[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_QuoteDenyReasonArray_From(src[i]);
        }
    }
    return res;
}





export function Create_ReasonSold_From(src:any) : carriers.ReasonSold {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ReasonSold = Create_Carrier_From(src) as carriers.ReasonSold;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.ReasonSold;
}

export function Create_ReasonSoldArray_From(src:any) : carriers.ReasonSold[] {
    let res : carriers.ReasonSold[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ReasonSold_From(src[i]);
        }
    }
    return res;
}

export function Create_ReasonSoldArrayArray_From(src:any) : carriers.ReasonSold[][] {
    let res : carriers.ReasonSold[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ReasonSoldArray_From(src[i]);
        }
    }
    return res;
}





export function Create_ReasonStalled_From(src:any) : carriers.ReasonStalled {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ReasonStalled = Create_Carrier_From(src) as carriers.ReasonStalled;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.ReasonStalled;
}

export function Create_ReasonStalledArray_From(src:any) : carriers.ReasonStalled[] {
    let res : carriers.ReasonStalled[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ReasonStalled_From(src[i]);
        }
    }
    return res;
}

export function Create_ReasonStalledArrayArray_From(src:any) : carriers.ReasonStalled[][] {
    let res : carriers.ReasonStalled[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ReasonStalledArray_From(src[i]);
        }
    }
    return res;
}





export function Create_RelationDefinitionEntity_From(src:any) : carriers.RelationDefinitionEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.RelationDefinitionEntity = Create_Carrier_From(src) as carriers.RelationDefinitionEntity;
        
        res.ReldefId= src.ReldefId as number;
        res.Name= src.Name as string;
        res.Tooltip= src.Tooltip as string;
        res.PassiveText= src.PassiveText as string;
        res.Deleted= src.Deleted as boolean;
        res.Rank= src.Rank as number;
        res.Source= enums.RelationTarget[src.Source];
        res.Destination= enums.RelationTarget[src.Destination];
        return res as carriers.RelationDefinitionEntity;
}

export function Create_RelationDefinitionEntityArray_From(src:any) : carriers.RelationDefinitionEntity[] {
    let res : carriers.RelationDefinitionEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RelationDefinitionEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_RelationDefinitionEntityArrayArray_From(src:any) : carriers.RelationDefinitionEntity[][] {
    let res : carriers.RelationDefinitionEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RelationDefinitionEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ResourceEntity_From(src:any) : carriers.ResourceEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ResourceEntity = Create_Carrier_From(src) as carriers.ResourceEntity;
        
        res.ResourceId= src.ResourceId as number;
        res.Name= src.Name as string;
        res.Rank= src.Rank as number;
        res.Tooltip= src.Tooltip as string;
        res.Deleted= src.Deleted as boolean;
        res.IsLocation= src.IsLocation as boolean;
        res.LocationAddress= src.LocationAddress as string;
        return res as carriers.ResourceEntity;
}

export function Create_ResourceEntityArray_From(src:any) : carriers.ResourceEntity[] {
    let res : carriers.ResourceEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ResourceEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_ResourceEntityArrayArray_From(src:any) : carriers.ResourceEntity[][] {
    let res : carriers.ResourceEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ResourceEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_SaleStageEntity_From(src:any) : carriers.SaleStageEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.SaleStageEntity = Create_Carrier_From(src) as carriers.SaleStageEntity;
        
        res.SaleStageId= src.SaleStageId as number;
        res.Value= src.Value as string;
        res.Tooltip= src.Tooltip as string;
        res.Probability= src.Probability as number;
        res.Deleted= src.Deleted as boolean;
        res.Rank= src.Rank as number;
        return res as carriers.SaleStageEntity;
}

export function Create_SaleStageEntityArray_From(src:any) : carriers.SaleStageEntity[] {
    let res : carriers.SaleStageEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SaleStageEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_SaleStageEntityArrayArray_From(src:any) : carriers.SaleStageEntity[][] {
    let res : carriers.SaleStageEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SaleStageEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_SaleType_From(src:any) : carriers.SaleType {
        if( src === null || src === undefined )
            return null;
        let res : carriers.SaleType = Create_Carrier_From(src) as carriers.SaleType;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.SaleType;
}

export function Create_SaleTypeArray_From(src:any) : carriers.SaleType[] {
    let res : carriers.SaleType[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SaleType_From(src[i]);
        }
    }
    return res;
}

export function Create_SaleTypeArrayArray_From(src:any) : carriers.SaleType[][] {
    let res : carriers.SaleType[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SaleTypeArray_From(src[i]);
        }
    }
    return res;
}




export function Create_SaleTypeEntity_From(src:any) : carriers.SaleTypeEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.SaleTypeEntity = Create_Carrier_From(src) as carriers.SaleTypeEntity;
        
        res.SaleTypeId= src.SaleTypeId as number;
        res.Name= src.Name as string;
        res.Tooltip= src.Tooltip as string;
        res.Rank= src.Rank as number;
        res.DurationUnit= enums.DurationUnit[src.DurationUnit];
        res.SaleDuration= src.SaleDuration as number;
        res.SaleTypeCatId= src.SaleTypeCatId as number;
        res.Deleted= src.Deleted as boolean;
        res.HasGuide= src.HasGuide as boolean;
        res.HasStakeholders= src.HasStakeholders as boolean;
        res.IsAutoAdvance= src.IsAutoAdvance as boolean;
        res.AllowQuoteAlternatives= src.AllowQuoteAlternatives as boolean;
        res.DefaultQuoteValidity= src.DefaultQuoteValidity as number;
        res.QuoteLinesTemplate= src.QuoteLinesTemplate as number;
        res.ConfirmationLinesTemplate= src.ConfirmationLinesTemplate as number;
        res.MaxDiscountPercentSet= src.MaxDiscountPercentSet as boolean;
        res.MinEarningPercentSet= src.MinEarningPercentSet as boolean;
        res.MaxDiscountPercent= src.MaxDiscountPercent as number;
        res.MinEarningPercent= src.MinEarningPercent as number;
        res.GroupQuoteLinesBy= src.GroupQuoteLinesBy as number;
        res.SortGroupLinesBy= src.SortGroupLinesBy as number;
        res.Stages= Create_SelectableMDOListItemArray_From(src.Stages);
        return res as carriers.SaleTypeEntity;
}

export function Create_SaleTypeEntityArray_From(src:any) : carriers.SaleTypeEntity[] {
    let res : carriers.SaleTypeEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SaleTypeEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_SaleTypeEntityArrayArray_From(src:any) : carriers.SaleTypeEntity[][] {
    let res : carriers.SaleTypeEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SaleTypeEntityArray_From(src[i]);
        }
    }
    return res;
}





export function Create_SelectionCategory_From(src:any) : carriers.SelectionCategory {
        if( src === null || src === undefined )
            return null;
        let res : carriers.SelectionCategory = Create_Carrier_From(src) as carriers.SelectionCategory;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.SelectionCategory;
}

export function Create_SelectionCategoryArray_From(src:any) : carriers.SelectionCategory[] {
    let res : carriers.SelectionCategory[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SelectionCategory_From(src[i]);
        }
    }
    return res;
}

export function Create_SelectionCategoryArrayArray_From(src:any) : carriers.SelectionCategory[][] {
    let res : carriers.SelectionCategory[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SelectionCategoryArray_From(src[i]);
        }
    }
    return res;
}





export function Create_Source_From(src:any) : carriers.Source {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Source = Create_Carrier_From(src) as carriers.Source;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.Source;
}

export function Create_SourceArray_From(src:any) : carriers.Source[] {
    let res : carriers.Source[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Source_From(src[i]);
        }
    }
    return res;
}

export function Create_SourceArrayArray_From(src:any) : carriers.Source[][] {
    let res : carriers.Source[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SourceArray_From(src[i]);
        }
    }
    return res;
}





export function Create_Tag_From(src:any) : carriers.Tag {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Tag = Create_Carrier_From(src) as carriers.Tag;
        
        res.Id= src.Id as number;
        res.Name= src.Name as string;
        res.ToolTip= src.ToolTip as string;
        return res as carriers.Tag;
}

export function Create_TagArray_From(src:any) : carriers.Tag[] {
    let res : carriers.Tag[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Tag_From(src[i]);
        }
    }
    return res;
}

export function Create_TagArrayArray_From(src:any) : carriers.Tag[][] {
    let res : carriers.Tag[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TagArray_From(src[i]);
        }
    }
    return res;
}




export function Create_Task_From(src:any) : carriers.Task {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Task = Create_Carrier_From(src) as carriers.Task;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.Task;
}

export function Create_TaskArray_From(src:any) : carriers.Task[] {
    let res : carriers.Task[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Task_From(src[i]);
        }
    }
    return res;
}

export function Create_TaskArrayArray_From(src:any) : carriers.Task[][] {
    let res : carriers.Task[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TaskArray_From(src[i]);
        }
    }
    return res;
}





export function Create_TicketCategory_From(src:any) : carriers.TicketCategory {
        if( src === null || src === undefined )
            return null;
        let res : carriers.TicketCategory = Create_Carrier_From(src) as carriers.TicketCategory;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.TicketCategory;
}

export function Create_TicketCategoryArray_From(src:any) : carriers.TicketCategory[] {
    let res : carriers.TicketCategory[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TicketCategory_From(src[i]);
        }
    }
    return res;
}

export function Create_TicketCategoryArrayArray_From(src:any) : carriers.TicketCategory[][] {
    let res : carriers.TicketCategory[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TicketCategoryArray_From(src[i]);
        }
    }
    return res;
}




export function Create_TicketCategoryEntity_From(src:any) : carriers.TicketCategoryEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.TicketCategoryEntity = Create_Carrier_From(src) as carriers.TicketCategoryEntity;
        
        res.TicketCategoryId= src.TicketCategoryId as number;
        res.ParentId= src.ParentId as number;
        res.Name= src.Name as string;
        res.Fullname= src.Fullname as string;
        res.CategoryMaster= src.CategoryMaster as number;
        res.Flags= Create_TicketCategoryFlags_From(src.Flags) as enums.TicketCategoryFlags;
        res.DelegateMethod= enums.TicketCategoryDelegateMethod[src.DelegateMethod];
        res.ExternalName= src.ExternalName as string;
        res.ClosingStatus= enums.TicketCategoryClosingStatus[src.ClosingStatus];
        res.MsgClosingStatus= enums.TicketCategoryClosingStatus[src.MsgClosingStatus];
        res.AssignmentLag= src.AssignmentLag as number;
        res.ReplyTemplate= src.ReplyTemplate as number;
        res.NotificationEmail= src.NotificationEmail as string;
        res.DefaultTicketStatus= Create_TicketStatusEntity_From(src.DefaultTicketStatus);
        res.DefaultMessageStatus= Create_TicketStatusEntity_From(src.DefaultMessageStatus);
        res.EffectiveReplyTemplateId= src.EffectiveReplyTemplateId as number;
        res.ExtraFields= src.ExtraFields as carriers.StringDictionary;
        res.CustomFields= src.CustomFields as carriers.StringDictionary;
        return res as carriers.TicketCategoryEntity;
}

export function Create_TicketCategoryEntityArray_From(src:any) : carriers.TicketCategoryEntity[] {
    let res : carriers.TicketCategoryEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TicketCategoryEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_TicketCategoryEntityArrayArray_From(src:any) : carriers.TicketCategoryEntity[][] {
    let res : carriers.TicketCategoryEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TicketCategoryEntityArray_From(src[i]);
        }
    }
    return res;
}





export function Create_TicketCategoryMembershipEntity_From(src:any) : carriers.TicketCategoryMembershipEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.TicketCategoryMembershipEntity = Create_Carrier_From(src) as carriers.TicketCategoryMembershipEntity;
        
        res.User= Create_Associate_From(src.User);
        res.Weight= src.Weight as number;
        return res as carriers.TicketCategoryMembershipEntity;
}

export function Create_TicketCategoryMembershipEntityArray_From(src:any) : carriers.TicketCategoryMembershipEntity[] {
    let res : carriers.TicketCategoryMembershipEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TicketCategoryMembershipEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_TicketCategoryMembershipEntityArrayArray_From(src:any) : carriers.TicketCategoryMembershipEntity[][] {
    let res : carriers.TicketCategoryMembershipEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TicketCategoryMembershipEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_TicketPriority_From(src:any) : carriers.TicketPriority {
        if( src === null || src === undefined )
            return null;
        let res : carriers.TicketPriority = Create_Carrier_From(src) as carriers.TicketPriority;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.TicketPriority;
}

export function Create_TicketPriorityArray_From(src:any) : carriers.TicketPriority[] {
    let res : carriers.TicketPriority[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TicketPriority_From(src[i]);
        }
    }
    return res;
}

export function Create_TicketPriorityArrayArray_From(src:any) : carriers.TicketPriority[][] {
    let res : carriers.TicketPriority[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TicketPriorityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_TicketPriorityEntity_From(src:any) : carriers.TicketPriorityEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.TicketPriorityEntity = Create_Carrier_From(src) as carriers.TicketPriorityEntity;
        
        res.TicketPriorityId= src.TicketPriorityId as number;
        res.Name= src.Name as string;
        res.Status= enums.TicketPriorityStatus[src.Status];
        res.Flags= Create_TicketPriorityFlags_From(src.Flags) as enums.TicketPriorityFlags;
        res.SortOrder= src.SortOrder as number;
        res.TicketRead= enums.TicketPriorityEscalateEvent[src.TicketRead];
        res.ChangedOwner= enums.TicketPriorityEscalateEvent[src.ChangedOwner];
        res.TicketNewinfo= enums.TicketPriorityEscalateEvent[src.TicketNewinfo];
        res.TicketClosed= enums.TicketPriorityEscalateEvent[src.TicketClosed];
        res.TicketChangedPriority= enums.TicketPriorityEscalateEvent[src.TicketChangedPriority];
        res.TicketNew= enums.TicketPriorityEscalateEvent[src.TicketNew];
        res.Deadline= src.Deadline as number;
        res.MonStart= Create_Date_From(src.MonStart);
        res.MonStop= Create_Date_From(src.MonStop);
        res.TueStart= Create_Date_From(src.TueStart);
        res.TueStop= Create_Date_From(src.TueStop);
        res.WedStart= Create_Date_From(src.WedStart);
        res.WedStop= Create_Date_From(src.WedStop);
        res.ThuStart= Create_Date_From(src.ThuStart);
        res.ThuStop= Create_Date_From(src.ThuStop);
        res.FriStart= Create_Date_From(src.FriStart);
        res.FriStop= Create_Date_From(src.FriStop);
        res.SatStart= Create_Date_From(src.SatStart);
        res.SatStop= Create_Date_From(src.SatStop);
        res.SunStart= Create_Date_From(src.SunStart);
        res.SunStop= Create_Date_From(src.SunStop);
        res.NonDates= Create_DateArray_From(src.NonDates);
        res.EscalationLevels= Create_TicketPriorityEscalationLevelEntityArray_From(src.EscalationLevels);
        return res as carriers.TicketPriorityEntity;
}

export function Create_TicketPriorityEntityArray_From(src:any) : carriers.TicketPriorityEntity[] {
    let res : carriers.TicketPriorityEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TicketPriorityEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_TicketPriorityEntityArrayArray_From(src:any) : carriers.TicketPriorityEntity[][] {
    let res : carriers.TicketPriorityEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TicketPriorityEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_TicketPriorityEscalationLevelEntity_From(src:any) : carriers.TicketPriorityEscalationLevelEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.TicketPriorityEscalationLevelEntity = Create_Carrier_From(src) as carriers.TicketPriorityEscalationLevelEntity;
        
        res.TicketAlertId= src.TicketAlertId as number;
        res.AlertLevel= src.AlertLevel as number;
        res.AlertTimeout= src.AlertTimeout as number;
        res.Action= src.Action as number;
        res.DelegateTo= src.DelegateTo as number;
        res.ScriptId= src.ScriptId as number;
        res.EmailTo= src.EmailTo as string;
        res.SmsTo= src.SmsTo as string;
        res.ReplyTemplateIdCustomer= src.ReplyTemplateIdCustomer as number;
        res.ReplyTemplateIdUser= src.ReplyTemplateIdUser as number;
        res.ReplyTemplateIdCatmast= src.ReplyTemplateIdCatmast as number;
        res.ReplyTemplateIdEmail= src.ReplyTemplateIdEmail as number;
        res.RtiCustomerSms= src.RtiCustomerSms as number;
        res.ReplyTemplateIdUserSms= src.ReplyTemplateIdUserSms as number;
        res.ReplyTemplateIdCatmastSms= src.ReplyTemplateIdCatmastSms as number;
        res.ReplyTemplateIdSms= src.ReplyTemplateIdSms as number;
        return res as carriers.TicketPriorityEscalationLevelEntity;
}

export function Create_TicketPriorityEscalationLevelEntityArray_From(src:any) : carriers.TicketPriorityEscalationLevelEntity[] {
    let res : carriers.TicketPriorityEscalationLevelEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TicketPriorityEscalationLevelEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_TicketPriorityEscalationLevelEntityArrayArray_From(src:any) : carriers.TicketPriorityEscalationLevelEntity[][] {
    let res : carriers.TicketPriorityEscalationLevelEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TicketPriorityEscalationLevelEntityArray_From(src[i]);
        }
    }
    return res;
}





export function Create_TicketStatusEntity_From(src:any) : carriers.TicketStatusEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.TicketStatusEntity = Create_Carrier_From(src) as carriers.TicketStatusEntity;
        
        res.TicketStatusId= src.TicketStatusId as number;
        res.Name= src.Name as string;
        res.Status= enums.TicketBaseStatus[src.Status];
        res.TimeCounter= enums.TicketStatusTimeCounter[src.TimeCounter];
        res.NoEmailReopen= src.NoEmailReopen as boolean;
        res.IsDefault= src.IsDefault as boolean;
        res.UsedInQueue= src.UsedInQueue as boolean;
        return res as carriers.TicketStatusEntity;
}

export function Create_TicketStatusEntityArray_From(src:any) : carriers.TicketStatusEntity[] {
    let res : carriers.TicketStatusEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TicketStatusEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_TicketStatusEntityArrayArray_From(src:any) : carriers.TicketStatusEntity[][] {
    let res : carriers.TicketStatusEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TicketStatusEntityArray_From(src[i]);
        }
    }
    return res;
}





export function Create_WebPanelEntity_From(src:any) : carriers.WebPanelEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.WebPanelEntity = Create_Carrier_From(src) as carriers.WebPanelEntity;
        
        res.WebPanelId= src.WebPanelId as number;
        res.Name= src.Name as string;
        res.Tooltip= src.Tooltip as string;
        res.Deleted= src.Deleted as boolean;
        res.Rank= src.Rank as number;
        res.UrlEncoding= enums.UrlEncoding[src.UrlEncoding];
        res.VisibleIn= enums.Navigation[src.VisibleIn];
        res.OnCentral= src.OnCentral as boolean;
        res.OnSatellite= src.OnSatellite as boolean;
        res.OnTravel= src.OnTravel as boolean;
        res.OnSalesMarketingWeb= src.OnSalesMarketingWeb as boolean;
        res.OnSalesMarketingPocket= src.OnSalesMarketingPocket as boolean;
        res.ShowInMenuBar= src.ShowInMenuBar as boolean;
        res.ShowInToolBar= src.ShowInToolBar as boolean;
        res.ShowInAddressBar= src.ShowInAddressBar as boolean;
        res.ShowInStatusBar= src.ShowInStatusBar as boolean;
        res.WindowName= src.WindowName as string;
        res.Url= src.Url as string;
        res.ProgId= src.ProgId as string;
        res.Icon= src.Icon as number;
        res.AlwaysReloadOnShow= src.AlwaysReloadOnShow as boolean;
        return res as carriers.WebPanelEntity;
}

export function Create_WebPanelEntityArray_From(src:any) : carriers.WebPanelEntity[] {
    let res : carriers.WebPanelEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WebPanelEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_WebPanelEntityArrayArray_From(src:any) : carriers.WebPanelEntity[][] {
    let res : carriers.WebPanelEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WebPanelEntityArray_From(src[i]);
        }
    }
    return res;
}













































































export function Create_BlobEntity_From(src:any) : carriers.BlobEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.BlobEntity = Create_Carrier_From(src) as carriers.BlobEntity;
        
        res.BlobId= src.BlobId as number;
        res.BlobSize= src.BlobSize as number;
        res.Description= src.Description as string;
        res.ExtraInfo= src.ExtraInfo as string;
        res.IsEncrypted= src.IsEncrypted as boolean;
        res.IsZipped= src.IsZipped as boolean;
        res.MimeType= src.MimeType as string;
        res.OriginalSize= src.OriginalSize as number;
        res.CreatedDate= Create_Date_From(src.CreatedDate);
        res.UpdatedDate= Create_Date_From(src.UpdatedDate);
        res.CreatedBy= Create_Associate_From(src.CreatedBy);
        res.UpdatedBy= Create_Associate_From(src.UpdatedBy);
        res.ConceptualType= src.ConceptualType as string;
        return res as carriers.BlobEntity;
}

export function Create_BlobEntityArray_From(src:any) : carriers.BlobEntity[] {
    let res : carriers.BlobEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_BlobEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_BlobEntityArrayArray_From(src:any) : carriers.BlobEntity[][] {
    let res : carriers.BlobEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_BlobEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_NavigatorCompany_From(src:any) : carriers.NavigatorCompany {
        if( src === null || src === undefined )
            return null;
        let res : carriers.NavigatorCompany = Create_Carrier_From(src) as carriers.NavigatorCompany;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.NavigatorCompany;
}

export function Create_NavigatorCompanyArray_From(src:any) : carriers.NavigatorCompany[] {
    let res : carriers.NavigatorCompany[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_NavigatorCompany_From(src[i]);
        }
    }
    return res;
}

export function Create_NavigatorCompanyArrayArray_From(src:any) : carriers.NavigatorCompany[][] {
    let res : carriers.NavigatorCompany[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_NavigatorCompanyArray_From(src[i]);
        }
    }
    return res;
}







export function Create_MDOListItem_From(src:any) : carriers.MDOListItem {
        if( src === null || src === undefined )
            return null;
        let res : carriers.MDOListItem = Create_Carrier_From(src) as carriers.MDOListItem;
        
        res.Id= src.Id as number;
        res.Name= src.Name as string;
        res.ToolTip= src.ToolTip as string;
        res.Deleted= src.Deleted as boolean;
        res.Rank= src.Rank as number;
        res.Type= src.Type as string;
        res.ChildItems= Create_MDOListItemArray_From(src.ChildItems);
        res.IconHint= src.IconHint as string;
        res.ColorBlock= src.ColorBlock as number;
        res.ExtraInfo= src.ExtraInfo as string;
        res.StyleHint= src.StyleHint as string;
        res.FullName= src.FullName as string;
        return res as carriers.MDOListItem;
}

export function Create_MDOListItemArray_From(src:any) : carriers.MDOListItem[] {
    let res : carriers.MDOListItem[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_MDOListItem_From(src[i]);
        }
    }
    return res;
}

export function Create_MDOListItemArrayArray_From(src:any) : carriers.MDOListItem[][] {
    let res : carriers.MDOListItem[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_MDOListItemArray_From(src[i]);
        }
    }
    return res;
}





export function Create_SelectableMDOListItem_From(src:any) : carriers.SelectableMDOListItem {
        if( src === null || src === undefined )
            return null;
        let res : carriers.SelectableMDOListItem = Create_Carrier_From(src) as carriers.SelectableMDOListItem;
        
        res.Id= src.Id as number;
        res.Name= src.Name as string;
        res.ToolTip= src.ToolTip as string;
        res.Deleted= src.Deleted as boolean;
        res.Rank= src.Rank as number;
        res.Type= src.Type as string;
        res.ColorBlock= src.ColorBlock as number;
        res.IconHint= src.IconHint as string;
        res.Selected= src.Selected as boolean;
        res.LastChanged= Create_Date_From(src.LastChanged);
        res.ChildItems= Create_SelectableMDOListItemArray_From(src.ChildItems);
        res.ExtraInfo= src.ExtraInfo as string;
        res.StyleHint= src.StyleHint as string;
        res.Hidden= src.Hidden as boolean;
        res.FullName= src.FullName as string;
        return res as carriers.SelectableMDOListItem;
}

export function Create_SelectableMDOListItemArray_From(src:any) : carriers.SelectableMDOListItem[] {
    let res : carriers.SelectableMDOListItem[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SelectableMDOListItem_From(src[i]);
        }
    }
    return res;
}

export function Create_SelectableMDOListItemArrayArray_From(src:any) : carriers.SelectableMDOListItem[][] {
    let res : carriers.SelectableMDOListItem[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SelectableMDOListItemArray_From(src[i]);
        }
    }
    return res;
}











































export function Create_ConfigurableScreenDelta_From(src:any) : carriers.ConfigurableScreenDelta {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ConfigurableScreenDelta = Create_Carrier_From(src) as carriers.ConfigurableScreenDelta;
        
        res.ConfigurableScreenDeltaId= src.ConfigurableScreenDeltaId as number;
        res.Name= src.Name as string;
        res.Description= src.Description as string;
        res.DeltaJson= src.DeltaJson as string;
        res.DeltaType= enums.DeltaType[src.DeltaType];
        res.DeltaState= enums.DeltaState[src.DeltaState];
        res.RecipeId= src.RecipeId as string;
        res.UpdatedDate= Create_Date_From(src.UpdatedDate);
        res.CreatedDate= Create_Date_From(src.CreatedDate);
        res.UpdatedBy= Create_Associate_From(src.UpdatedBy);
        res.CreatedBy= Create_Associate_From(src.CreatedBy);
        res.AppliesToIds= src.AppliesToIds as number[];
        res.AppliesToKey= src.AppliesToKey as string;
        return res as carriers.ConfigurableScreenDelta;
}

export function Create_ConfigurableScreenDeltaArray_From(src:any) : carriers.ConfigurableScreenDelta[] {
    let res : carriers.ConfigurableScreenDelta[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ConfigurableScreenDelta_From(src[i]);
        }
    }
    return res;
}

export function Create_ConfigurableScreenDeltaArrayArray_From(src:any) : carriers.ConfigurableScreenDelta[][] {
    let res : carriers.ConfigurableScreenDelta[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ConfigurableScreenDeltaArray_From(src[i]);
        }
    }
    return res;
}




export function Create_Configuration_From(src:any) : carriers.Configuration {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Configuration = Create_Carrier_From(src) as carriers.Configuration;
        
        return res as carriers.Configuration;
}

export function Create_ConfigurationArray_From(src:any) : carriers.Configuration[] {
    let res : carriers.Configuration[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Configuration_From(src[i]);
        }
    }
    return res;
}

export function Create_ConfigurationArrayArray_From(src:any) : carriers.Configuration[][] {
    let res : carriers.Configuration[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ConfigurationArray_From(src[i]);
        }
    }
    return res;
}




export function Create_DeltaQuery_From(src:any) : carriers.DeltaQuery {
        if( src === null || src === undefined )
            return null;
        let res : carriers.DeltaQuery = Create_Carrier_From(src) as carriers.DeltaQuery;
        
        res.RecipeId= src.RecipeId as string;
        res.DeltaStates= Create_DeltaState_From(src.DeltaStates) as enums.DeltaState[];
        res.DeltaTypes= Create_DeltaType_From(src.DeltaTypes) as enums.DeltaType[];
        res.AppliesToIds= src.AppliesToIds as number[];
        return res as carriers.DeltaQuery;
}

export function Create_DeltaQueryArray_From(src:any) : carriers.DeltaQuery[] {
    let res : carriers.DeltaQuery[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DeltaQuery_From(src[i]);
        }
    }
    return res;
}

export function Create_DeltaQueryArrayArray_From(src:any) : carriers.DeltaQuery[][] {
    let res : carriers.DeltaQuery[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DeltaQueryArray_From(src[i]);
        }
    }
    return res;
}




export function Create_DiaryViewEntity_From(src:any) : carriers.DiaryViewEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.DiaryViewEntity = Create_Carrier_From(src) as carriers.DiaryViewEntity;
        
        res.DiaryViewId= src.DiaryViewId as number;
        res.Name= src.Name as string;
        res.Tooltip= src.Tooltip as string;
        res.VisibleColumns= src.VisibleColumns as number;
        res.Rank= src.Rank as number;
        res.AssocId= src.AssocId as number;
        res.AssociateList= Create_SelectableMDOListItemArray_From(src.AssociateList);
        res.TzLocationId= src.TzLocationId as number;
        return res as carriers.DiaryViewEntity;
}

export function Create_DiaryViewEntityArray_From(src:any) : carriers.DiaryViewEntity[] {
    let res : carriers.DiaryViewEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DiaryViewEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_DiaryViewEntityArrayArray_From(src:any) : carriers.DiaryViewEntity[][] {
    let res : carriers.DiaryViewEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DiaryViewEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_SystemEventEntity_From(src:any) : carriers.SystemEventEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.SystemEventEntity = Create_Carrier_From(src) as carriers.SystemEventEntity;
        
        res.SystemEventId= src.SystemEventId as number;
        res.Scope= enums.SystemEventScope[src.Scope];
        res.Eta= Create_Date_From(src.Eta);
        res.Eventkey= src.Eventkey as string;
        res.Eventmess= src.Eventmess as string;
        res.ExtraInfo= src.ExtraInfo as number;
        res.Owner= src.Owner as number;
        res.UpdatedCount= src.UpdatedCount as number;
        res.Registered= Create_Date_From(src.Registered);
        res.ActivatedBy= Create_Associate_From(src.ActivatedBy);
        return res as carriers.SystemEventEntity;
}

export function Create_SystemEventEntityArray_From(src:any) : carriers.SystemEventEntity[] {
    let res : carriers.SystemEventEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SystemEventEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_SystemEventEntityArrayArray_From(src:any) : carriers.SystemEventEntity[][] {
    let res : carriers.SystemEventEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SystemEventEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_WindowPosSize_From(src:any) : carriers.WindowPosSize {
        if( src === null || src === undefined )
            return null;
        let res : carriers.WindowPosSize = Create_Carrier_From(src) as carriers.WindowPosSize;
        
        res.OwnerWindow= src.OwnerWindow as string;
        res.PersonId= src.PersonId as number;
        res.AssociateId= src.AssociateId as number;
        res.ExtraId= src.ExtraId as number;
        res.ExtraInfo= src.ExtraInfo as string;
        res.Height= src.Height as number;
        res.LeftX= src.LeftX as number;
        res.State= enums.ShowWindowState[src.State];
        res.UpperY= src.UpperY as number;
        res.Width= src.Width as number;
        res.WindowPosSizeId= src.WindowPosSizeId as number;
        return res as carriers.WindowPosSize;
}

export function Create_WindowPosSizeArray_From(src:any) : carriers.WindowPosSize[] {
    let res : carriers.WindowPosSize[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WindowPosSize_From(src[i]);
        }
    }
    return res;
}

export function Create_WindowPosSizeArrayArray_From(src:any) : carriers.WindowPosSize[][] {
    let res : carriers.WindowPosSize[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WindowPosSizeArray_From(src[i]);
        }
    }
    return res;
}












export function Create_LiveUiConfig_From(src:any) : carriers.LiveUiConfig {
        if( src === null || src === undefined )
            return null;
        let res : carriers.LiveUiConfig = Create_Carrier_From(src) as carriers.LiveUiConfig;
        
        res.IsEnabled= src.IsEnabled as boolean;
        res.PollingInterval= src.PollingInterval as number;
        return res as carriers.LiveUiConfig;
}

export function Create_LiveUiConfigArray_From(src:any) : carriers.LiveUiConfig[] {
    let res : carriers.LiveUiConfig[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_LiveUiConfig_From(src[i]);
        }
    }
    return res;
}

export function Create_LiveUiConfigArrayArray_From(src:any) : carriers.LiveUiConfig[][] {
    let res : carriers.LiveUiConfig[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_LiveUiConfigArray_From(src[i]);
        }
    }
    return res;
}




export function Create_History_From(src:any) : carriers.History {
        if( src === null || src === undefined )
            return null;
        let res : carriers.History = Create_Carrier_From(src) as carriers.History;
        
        res.Rank= src.Rank as number;
        res.Id= src.Id as number;
        res.HistoryName= src.HistoryName as string;
        res.HistoryId= src.HistoryId as number;
        res.AssociateId= src.AssociateId as number;
        res.Name= src.Name as string;
        res.ItemInfo= src.ItemInfo as string;
        return res as carriers.History;
}

export function Create_HistoryArray_From(src:any) : carriers.History[] {
    let res : carriers.History[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_History_From(src[i]);
        }
    }
    return res;
}

export function Create_HistoryArrayArray_From(src:any) : carriers.History[][] {
    let res : carriers.History[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_HistoryArray_From(src[i]);
        }
    }
    return res;
}





export function Create_HistoryRequest_From(src:any) : carriers.HistoryRequest {
        if( src === null || src === undefined )
            return null;
        let res : carriers.HistoryRequest = Create_Carrier_From(src) as carriers.HistoryRequest;
        
        res.EntityName= src.EntityName as string;
        res.EntityOrParentId= src.EntityOrParentId as number;
        res.RequestForNewRecord= src.RequestForNewRecord as boolean;
        return res as carriers.HistoryRequest;
}

export function Create_HistoryRequestArray_From(src:any) : carriers.HistoryRequest[] {
    let res : carriers.HistoryRequest[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_HistoryRequest_From(src[i]);
        }
    }
    return res;
}

export function Create_HistoryRequestArrayArray_From(src:any) : carriers.HistoryRequest[][] {
    let res : carriers.HistoryRequest[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_HistoryRequestArray_From(src[i]);
        }
    }
    return res;
}




export function Create_UiEvent_From(src:any) : carriers.UiEvent {
        if( src === null || src === undefined )
            return null;
        let res : carriers.UiEvent = Create_Carrier_From(src) as carriers.UiEvent;
        
        res.EventId= src.EventId as number;
        res.EventName= src.EventName as string;
        res.EntityType= src.EntityType as string;
        res.EntityKey= src.EntityKey as number;
        res.AssociateId= src.AssociateId as number;
        res.AssociateName= src.AssociateName as string;
        res.EventDateTime= Create_Date_From(src.EventDateTime);
        return res as carriers.UiEvent;
}

export function Create_UiEventArray_From(src:any) : carriers.UiEvent[] {
    let res : carriers.UiEvent[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_UiEvent_From(src[i]);
        }
    }
    return res;
}

export function Create_UiEventArrayArray_From(src:any) : carriers.UiEvent[][] {
    let res : carriers.UiEvent[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_UiEventArray_From(src[i]);
        }
    }
    return res;
}















export function Create_Associate_From(src:any) : carriers.Associate {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Associate = Create_Carrier_From(src) as carriers.Associate;
        
        res.AssociateId= src.AssociateId as number;
        res.Name= src.Name as string;
        res.PersonId= src.PersonId as number;
        res.Rank= src.Rank as number;
        res.Tooltip= src.Tooltip as string;
        res.Type= enums.UserType[src.Type];
        res.GroupIdx= src.GroupIdx as number;
        res.FullName= src.FullName as string;
        res.FormalName= src.FormalName as string;
        res.Deleted= src.Deleted as boolean;
        res.EjUserId= src.EjUserId as number;
        res.UserName= src.UserName as string;
        return res as carriers.Associate;
}

export function Create_AssociateArray_From(src:any) : carriers.Associate[] {
    let res : carriers.Associate[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Associate_From(src[i]);
        }
    }
    return res;
}

export function Create_AssociateArrayArray_From(src:any) : carriers.Associate[][] {
    let res : carriers.Associate[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_AssociateArray_From(src[i]);
        }
    }
    return res;
}






export function Create_Cache_From(src:any) : carriers.Cache {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Cache = Create_Carrier_From(src) as carriers.Cache;
        
        return res as carriers.Cache;
}

export function Create_CacheArray_From(src:any) : carriers.Cache[] {
    let res : carriers.Cache[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Cache_From(src[i]);
        }
    }
    return res;
}

export function Create_CacheArrayArray_From(src:any) : carriers.Cache[][] {
    let res : carriers.Cache[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CacheArray_From(src[i]);
        }
    }
    return res;
}




export function Create_EntityCounts_From(src:any) : carriers.EntityCounts {
        if( src === null || src === undefined )
            return null;
        let res : carriers.EntityCounts = Create_Carrier_From(src) as carriers.EntityCounts;
        
        res.EntityName= src.EntityName as string;
        res.Records= src.Records as number;
        return res as carriers.EntityCounts;
}

export function Create_EntityCountsArray_From(src:any) : carriers.EntityCounts[] {
    let res : carriers.EntityCounts[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EntityCounts_From(src[i]);
        }
    }
    return res;
}

export function Create_EntityCountsArrayArray_From(src:any) : carriers.EntityCounts[][] {
    let res : carriers.EntityCounts[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EntityCountsArray_From(src[i]);
        }
    }
    return res;
}




export function Create_Logging_From(src:any) : carriers.Logging {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Logging = Create_Carrier_From(src) as carriers.Logging;
        
        return res as carriers.Logging;
}

export function Create_LoggingArray_From(src:any) : carriers.Logging[] {
    let res : carriers.Logging[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Logging_From(src[i]);
        }
    }
    return res;
}

export function Create_LoggingArrayArray_From(src:any) : carriers.Logging[][] {
    let res : carriers.Logging[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_LoggingArray_From(src[i]);
        }
    }
    return res;
}




export function Create_UsageStats_From(src:any) : carriers.UsageStats {
        if( src === null || src === undefined )
            return null;
        let res : carriers.UsageStats = Create_Carrier_From(src) as carriers.UsageStats;
        
        return res as carriers.UsageStats;
}

export function Create_UsageStatsArray_From(src:any) : carriers.UsageStats[] {
    let res : carriers.UsageStats[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_UsageStats_From(src[i]);
        }
    }
    return res;
}

export function Create_UsageStatsArrayArray_From(src:any) : carriers.UsageStats[][] {
    let res : carriers.UsageStats[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_UsageStatsArray_From(src[i]);
        }
    }
    return res;
}




export function Create_Installation_From(src:any) : carriers.Installation {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Installation = Create_Carrier_From(src) as carriers.Installation;
        
        return res as carriers.Installation;
}

export function Create_InstallationArray_From(src:any) : carriers.Installation[] {
    let res : carriers.Installation[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Installation_From(src[i]);
        }
    }
    return res;
}

export function Create_InstallationArrayArray_From(src:any) : carriers.Installation[][] {
    let res : carriers.Installation[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_InstallationArray_From(src[i]);
        }
    }
    return res;
}




export function Create_WebAppUsage_From(src:any) : carriers.WebAppUsage {
        if( src === null || src === undefined )
            return null;
        let res : carriers.WebAppUsage = Create_Carrier_From(src) as carriers.WebAppUsage;
        
        res.WebAppUsageId= src.WebAppUsageId as number;
        res.AssocId= src.AssocId as number;
        res.Timestamp= Create_Date_From(src.Timestamp);
        res.ViewState= src.ViewState as string;
        res.AggregateCount= src.AggregateCount as number;
        res.AggregateBin= src.AggregateBin as number;
        res.Version= src.Version as number;
        return res as carriers.WebAppUsage;
}

export function Create_WebAppUsageArray_From(src:any) : carriers.WebAppUsage[] {
    let res : carriers.WebAppUsage[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WebAppUsage_From(src[i]);
        }
    }
    return res;
}

export function Create_WebAppUsageArrayArray_From(src:any) : carriers.WebAppUsage[][] {
    let res : carriers.WebAppUsage[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WebAppUsageArray_From(src[i]);
        }
    }
    return res;
}







export function Create_Tooltips_From(src:any) : carriers.Tooltips {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Tooltips = Create_Carrier_From(src) as carriers.Tooltips;
        
        return res as carriers.Tooltips;
}

export function Create_TooltipsArray_From(src:any) : carriers.Tooltips[] {
    let res : carriers.Tooltips[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Tooltips_From(src[i]);
        }
    }
    return res;
}

export function Create_TooltipsArrayArray_From(src:any) : carriers.Tooltips[][] {
    let res : carriers.Tooltips[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TooltipsArray_From(src[i]);
        }
    }
    return res;
}




export function Create_Previews_From(src:any) : carriers.Previews {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Previews = Create_Carrier_From(src) as carriers.Previews;
        
        return res as carriers.Previews;
}

export function Create_PreviewsArray_From(src:any) : carriers.Previews[] {
    let res : carriers.Previews[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Previews_From(src[i]);
        }
    }
    return res;
}

export function Create_PreviewsArrayArray_From(src:any) : carriers.Previews[][] {
    let res : carriers.Previews[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PreviewsArray_From(src[i]);
        }
    }
    return res;
}




export function Create_MailMergeSettings_From(src:any) : carriers.MailMergeSettings {
        if( src === null || src === undefined )
            return null;
        let res : carriers.MailMergeSettings = Create_Carrier_From(src) as carriers.MailMergeSettings;
        
        res.SelectionId= src.SelectionId as number;
        res.DocumentId= src.DocumentId as number;
        res.MailMergeDeliveryType= enums.EMailMergeTargetType[src.MailMergeDeliveryType];
        res.CustomAttention= src.CustomAttention as string;
        res.AlwaysUseCustomAttention= src.AlwaysUseCustomAttention as boolean;
        res.SaveDocument= src.SaveDocument as boolean;
        res.CustomMailBody= src.CustomMailBody as string;
        res.TaskEntity= Create_MailMergeTask_From(src.TaskEntity);
        res.AddCompanyInterest= src.AddCompanyInterest as number;
        res.AddPersonInterest= src.AddPersonInterest as number;
        res.RemoveCompanyInterest= src.RemoveCompanyInterest as number;
        res.RemovePersonInterest= src.RemovePersonInterest as number;
        res.IncludeNoMailingsRecipient= src.IncludeNoMailingsRecipient as boolean;
        res.TestOnly= src.TestOnly as boolean;
        res.ProjectId= src.ProjectId as number;
        res.IncludeRetiredRecipients= src.IncludeRetiredRecipients as boolean;
        res.IncludeStoppedRecipients= src.IncludeStoppedRecipients as boolean;
        res.CustomMailSubject= src.CustomMailSubject as string;
        res.ExtraInfo= src.ExtraInfo as string;
        res.Synchronous= src.Synchronous as boolean;
        res.IsTemporarySelection= src.IsTemporarySelection as boolean;
        return res as carriers.MailMergeSettings;
}

export function Create_MailMergeSettingsArray_From(src:any) : carriers.MailMergeSettings[] {
    let res : carriers.MailMergeSettings[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_MailMergeSettings_From(src[i]);
        }
    }
    return res;
}

export function Create_MailMergeSettingsArrayArray_From(src:any) : carriers.MailMergeSettings[][] {
    let res : carriers.MailMergeSettings[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_MailMergeSettingsArray_From(src[i]);
        }
    }
    return res;
}




export function Create_MailMergeTask_From(src:any) : carriers.MailMergeTask {
        if( src === null || src === undefined )
            return null;
        let res : carriers.MailMergeTask = Create_Carrier_From(src) as carriers.MailMergeTask;
        
        res.ProjectId= src.ProjectId as number;
        res.TypeId= src.TypeId as number;
        res.StartDate= Create_Date_From(src.StartDate);
        res.Duration= src.Duration as number;
        res.Description= src.Description as string;
        res.PriorityId= src.PriorityId as number;
        res.VisibleFor= Create_VisibleFor_From(src.VisibleFor);
        res.Completed= enums.ActivityStatus[src.Completed];
        res.OwnerAssociateId= src.OwnerAssociateId as number;
        res.SingleEntryOnEachCompany= src.SingleEntryOnEachCompany as boolean;
        res.SaleId= src.SaleId as number;
        return res as carriers.MailMergeTask;
}

export function Create_MailMergeTaskArray_From(src:any) : carriers.MailMergeTask[] {
    let res : carriers.MailMergeTask[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_MailMergeTask_From(src[i]);
        }
    }
    return res;
}

export function Create_MailMergeTaskArrayArray_From(src:any) : carriers.MailMergeTask[][] {
    let res : carriers.MailMergeTask[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_MailMergeTaskArray_From(src[i]);
        }
    }
    return res;
}




export function Create_SelectionEntity_From(src:any) : carriers.SelectionEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.SelectionEntity = Create_Carrier_From(src) as carriers.SelectionEntity;
        
        res.Description= src.Description as string;
        res.Postit= src.Postit as string;
        res.Associate= Create_Associate_From(src.Associate);
        res.CreatedBy= Create_Associate_From(src.CreatedBy);
        res.UpdatedBy= Create_Associate_From(src.UpdatedBy);
        res.SelectionCategory= Create_SelectionCategory_From(src.SelectionCategory);
        res.GroupIdx= src.GroupIdx as number;
        res.IncludePerson= src.IncludePerson as number;
        res.MemberCount= src.MemberCount as number;
        res.Name= src.Name as string;
        res.PostitTextId= src.PostitTextId as number;
        res.CreatedDate= Create_Date_From(src.CreatedDate);
        res.SelectionId= src.SelectionId as number;
        res.SoundEx= src.SoundEx as string;
        res.Source= src.Source as number;
        res.TextId= src.TextId as number;
        res.UpdatedDate= Create_Date_From(src.UpdatedDate);
        res.UpdatedCount= src.UpdatedCount as number;
        res.Visibility= src.Visibility as number;
        res.SelectionType= enums.SelectionType[src.SelectionType];
        res.CompanyUnique= src.CompanyUnique as boolean;
        res.TargetTableNumber= src.TargetTableNumber as number;
        res.TargetTableName= src.TargetTableName as string;
        res.Completed= src.Completed as boolean;
        res.LeftSelectionId= src.LeftSelectionId as number;
        res.RightSelectionId= src.RightSelectionId as number;
        res.SelectionUnionType= enums.SelectionUnionType[src.SelectionUnionType];
        res.MainProviderName= src.MainProviderName as string;
        res.ShadowProviderName= src.ShadowProviderName as string;
        res.ChartKey= src.ChartKey as string;
        res.LastLoaded= Create_Date_From(src.LastLoaded);
        res.LastLoadedBy= src.LastLoadedBy as number;
        res.LastLoadedByAssociate= Create_Associate_From(src.LastLoadedByAssociate);
        res.LastMembershipChange= Create_Date_From(src.LastMembershipChange);
        res.LastMembershipChangeBy= src.LastMembershipChangeBy as number;
        res.LastMembershipChangeByAssociate= Create_Associate_From(src.LastMembershipChangeByAssociate);
        res.MainHeading= src.MainHeading as string;
        res.MemberTabHeading= src.MemberTabHeading as string;
        res.MailingsProviderName= src.MailingsProviderName as string;
        res.DashboardTileDefinitionId= src.DashboardTileDefinitionId as number;
        res.VisibleFor= Create_VisibleForArray_From(src.VisibleFor);
        return res as carriers.SelectionEntity;
}

export function Create_SelectionEntityArray_From(src:any) : carriers.SelectionEntity[] {
    let res : carriers.SelectionEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SelectionEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_SelectionEntityArrayArray_From(src:any) : carriers.SelectionEntity[][] {
    let res : carriers.SelectionEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SelectionEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_SelectionForFind_From(src:any) : carriers.SelectionForFind {
        if( src === null || src === undefined )
            return null;
        let res : carriers.SelectionForFind = Create_Carrier_From(src) as carriers.SelectionForFind;
        
        res.ProviderName= src.ProviderName as string;
        res.SelectionId= src.SelectionId as number;
        res.CanSaveAsSelection= src.CanSaveAsSelection as boolean;
        res.MainHeading= src.MainHeading as string;
        res.FilterScreenHeading= src.FilterScreenHeading as string;
        res.SelectionEntityHeading= src.SelectionEntityHeading as string;
        return res as carriers.SelectionForFind;
}

export function Create_SelectionForFindArray_From(src:any) : carriers.SelectionForFind[] {
    let res : carriers.SelectionForFind[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SelectionForFind_From(src[i]);
        }
    }
    return res;
}

export function Create_SelectionForFindArrayArray_From(src:any) : carriers.SelectionForFind[][] {
    let res : carriers.SelectionForFind[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SelectionForFindArray_From(src[i]);
        }
    }
    return res;
}




export function Create_SelectionSummaryItem_From(src:any) : carriers.SelectionSummaryItem {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.SelectionId= src.SelectionId as number;
        res.Name= src.Name as string;
        res.TargetTable= src.TargetTable as string;
        res.Registered= Create_Date_From(src.Registered);
        res.ProviderName= src.ProviderName as string;
        return res as carriers.SelectionSummaryItem;
}

export function Create_SelectionSummaryItemArray_From(src:any) : carriers.SelectionSummaryItem[] {
    let res : carriers.SelectionSummaryItem[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SelectionSummaryItem_From(src[i]);
        }
    }
    return res;
}

export function Create_SelectionSummaryItemArrayArray_From(src:any) : carriers.SelectionSummaryItem[][] {
    let res : carriers.SelectionSummaryItem[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SelectionSummaryItemArray_From(src[i]);
        }
    }
    return res;
}




export function Create_TypicalSearch_From(src:any) : carriers.TypicalSearch {
        if( src === null || src === undefined )
            return null;
        let res : carriers.TypicalSearch = Create_Carrier_From(src) as carriers.TypicalSearch;
        
        res.TypicalSearchId= src.TypicalSearchId as number;
        res.Title= src.Title as string;
        res.Tooltip= src.Tooltip as string;
        res.EntityName= src.EntityName as string;
        res.IsEntityDefault= src.IsEntityDefault as number;
        res.IncludePerson= src.IncludePerson as number;
        res.Source= src.Source as string;
        res.VersionNumber= src.VersionNumber as number;
        res.RestrictionGroups= Create_ArchiveRestrictionGroupArray_From(src.RestrictionGroups);
        return res as carriers.TypicalSearch;
}

export function Create_TypicalSearchArray_From(src:any) : carriers.TypicalSearch[] {
    let res : carriers.TypicalSearch[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TypicalSearch_From(src[i]);
        }
    }
    return res;
}

export function Create_TypicalSearchArrayArray_From(src:any) : carriers.TypicalSearch[][] {
    let res : carriers.TypicalSearch[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TypicalSearchArray_From(src[i]);
        }
    }
    return res;
}




export function Create_TypicalSearches_From(src:any) : carriers.TypicalSearches {
        if( src === null || src === undefined )
            return null;
        let res : carriers.TypicalSearches = Create_Carrier_From(src) as carriers.TypicalSearches;
        
        res.Source= src.Source as string;
        res.MasterVersion= src.MasterVersion as number;
        res.DeleteLeftovers= src.DeleteLeftovers as boolean;
        res.Searches= Create_TypicalSearchArray_From(src.Searches);
        return res as carriers.TypicalSearches;
}

export function Create_TypicalSearchesArray_From(src:any) : carriers.TypicalSearches[] {
    let res : carriers.TypicalSearches[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TypicalSearches_From(src[i]);
        }
    }
    return res;
}

export function Create_TypicalSearchesArrayArray_From(src:any) : carriers.TypicalSearches[][] {
    let res : carriers.TypicalSearches[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TypicalSearchesArray_From(src[i]);
        }
    }
    return res;
}






export function Create_ContactOrPersonFromEmail_From(src:any) : carriers.ContactOrPersonFromEmail {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ContactOrPersonFromEmail = Create_Carrier_From(src) as carriers.ContactOrPersonFromEmail;
        
        res.PersonId= src.PersonId as number;
        res.FullName= src.FullName as string;
        res.EmailAddress= src.EmailAddress as string;
        res.ContactId= src.ContactId as number;
        res.ContactName= src.ContactName as string;
        res.ContactDepartment= src.ContactDepartment as string;
        res.ContactCategory= src.ContactCategory as string;
        res.SortName= src.SortName as string;
        return res as carriers.ContactOrPersonFromEmail;
}

export function Create_ContactOrPersonFromEmailArray_From(src:any) : carriers.ContactOrPersonFromEmail[] {
    let res : carriers.ContactOrPersonFromEmail[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ContactOrPersonFromEmail_From(src[i]);
        }
    }
    return res;
}

export function Create_ContactOrPersonFromEmailArrayArray_From(src:any) : carriers.ContactOrPersonFromEmail[][] {
    let res : carriers.ContactOrPersonFromEmail[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ContactOrPersonFromEmailArray_From(src[i]);
        }
    }
    return res;
}




export function Create_EMailAccount_From(src:any) : carriers.EMailAccount {
        if( src === null || src === undefined )
            return null;
        let res : carriers.EMailAccount = Create_Carrier_From(src) as carriers.EMailAccount;
        
        res.EMailAccountId= src.EMailAccountId as number;
        res.EMailAddress= src.EMailAddress as string;
        res.AssociateId= src.AssociateId as number;
        res.IncomingCredentials= Create_ServiceAuth_From(src.IncomingCredentials);
        res.OutgoingCredentials= Create_ServiceAuth_From(src.OutgoingCredentials);
        res.AccountStatus= src.AccountStatus as number;
        res.ErrorCount= src.ErrorCount as number;
        res.ErrorReason= src.ErrorReason as string;
        res.InboxFolder= src.InboxFolder as string;
        res.SentFolder= src.SentFolder as string;
        return res as carriers.EMailAccount;
}

export function Create_EMailAccountArray_From(src:any) : carriers.EMailAccount[] {
    let res : carriers.EMailAccount[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EMailAccount_From(src[i]);
        }
    }
    return res;
}

export function Create_EMailAccountArrayArray_From(src:any) : carriers.EMailAccount[][] {
    let res : carriers.EMailAccount[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EMailAccountArray_From(src[i]);
        }
    }
    return res;
}




export function Create_EMailAddress_From(src:any) : carriers.EMailAddress {
        if( src === null || src === undefined )
            return null;
        let res : carriers.EMailAddress = Create_Carrier_From(src) as carriers.EMailAddress;
        
        res.ContactId= src.ContactId as number;
        res.ContactName= src.ContactName as string;
        res.PersonId= src.PersonId as number;
        res.PersonName= src.PersonName as string;
        res.AssociateId= src.AssociateId as number;
        res.Address= src.Address as string;
        res.EmailId= src.EmailId as number;
        res.DuplicatePersonIds= src.DuplicatePersonIds as number[];
        res.Name= src.Name as string;
        return res as carriers.EMailAddress;
}

export function Create_EMailAddressArray_From(src:any) : carriers.EMailAddress[] {
    let res : carriers.EMailAddress[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EMailAddress_From(src[i]);
        }
    }
    return res;
}

export function Create_EMailAddressArrayArray_From(src:any) : carriers.EMailAddress[][] {
    let res : carriers.EMailAddress[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EMailAddressArray_From(src[i]);
        }
    }
    return res;
}




export function Create_EMailAppointment_From(src:any) : carriers.EMailAppointment {
        if( src === null || src === undefined )
            return null;
        let res : carriers.EMailAppointment = Create_Carrier_From(src) as carriers.EMailAppointment;
        
        res.Appointment= Create_Appointment_From(src.Appointment);
        res.CalMethod= enums.CalMethod[src.CalMethod];
        res.Participants= src.Participants as string[];
        res.Comment= src.Comment as string;
        res.Sequence= src.Sequence as number;
        res.DtStart= Create_Date_From(src.DtStart);
        res.DtEnd= Create_Date_From(src.DtEnd);
        res.Superseded= src.Superseded as boolean;
        return res as carriers.EMailAppointment;
}

export function Create_EMailAppointmentArray_From(src:any) : carriers.EMailAppointment[] {
    let res : carriers.EMailAppointment[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EMailAppointment_From(src[i]);
        }
    }
    return res;
}

export function Create_EMailAppointmentArrayArray_From(src:any) : carriers.EMailAppointment[][] {
    let res : carriers.EMailAppointment[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EMailAppointmentArray_From(src[i]);
        }
    }
    return res;
}




export function Create_EMailAttachment_From(src:any) : carriers.EMailAttachment {
        if( src === null || src === undefined )
            return null;
        let res : carriers.EMailAttachment = Create_Carrier_From(src) as carriers.EMailAttachment;
        
        res.Description= src.Description as string;
        res.Filename= src.Filename as string;
        res.Size= src.Size as number;
        res.Type= src.Type as string;
        res.Encoding= src.Encoding as string;
        res.Id= src.Id as string;
        res.Disposition= src.Disposition as string;
        res.Stream= Create_ArrayBuffer_From(src.Stream);
        return res as carriers.EMailAttachment;
}

export function Create_EMailAttachmentArray_From(src:any) : carriers.EMailAttachment[] {
    let res : carriers.EMailAttachment[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EMailAttachment_From(src[i]);
        }
    }
    return res;
}

export function Create_EMailAttachmentArrayArray_From(src:any) : carriers.EMailAttachment[][] {
    let res : carriers.EMailAttachment[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EMailAttachmentArray_From(src[i]);
        }
    }
    return res;
}




export function Create_EMailConnectionInfo_From(src:any) : carriers.EMailConnectionInfo {
        if( src === null || src === undefined )
            return null;
        let res : carriers.EMailConnectionInfo = Create_Carrier_From(src) as carriers.EMailConnectionInfo;
        
        res.ServerName= src.ServerName as string;
        res.UserName= src.UserName as string;
        res.Password= src.Password as string;
        res.Folder= src.Folder as string;
        res.UseSSL= src.UseSSL as boolean;
        return res as carriers.EMailConnectionInfo;
}

export function Create_EMailConnectionInfoArray_From(src:any) : carriers.EMailConnectionInfo[] {
    let res : carriers.EMailConnectionInfo[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EMailConnectionInfo_From(src[i]);
        }
    }
    return res;
}

export function Create_EMailConnectionInfoArrayArray_From(src:any) : carriers.EMailConnectionInfo[][] {
    let res : carriers.EMailConnectionInfo[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EMailConnectionInfoArray_From(src[i]);
        }
    }
    return res;
}




export function Create_EMailConnectionInfoExtended_From(src:any) : carriers.EMailConnectionInfoExtended {
        if( src === null || src === undefined )
            return null;
        let res : carriers.EMailConnectionInfoExtended = Create_Carrier_From(src) as carriers.EMailConnectionInfoExtended;
        
        res.Port= src.Port as number;
        res.ServerName= src.ServerName as string;
        res.Protocol= src.Protocol as string;
        res.UserName= src.UserName as string;
        res.Password= src.Password as string;
        res.UseSSL= src.UseSSL as boolean;
        res.Folder= src.Folder as string;
        return res as carriers.EMailConnectionInfoExtended;
}

export function Create_EMailConnectionInfoExtendedArray_From(src:any) : carriers.EMailConnectionInfoExtended[] {
    let res : carriers.EMailConnectionInfoExtended[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EMailConnectionInfoExtended_From(src[i]);
        }
    }
    return res;
}

export function Create_EMailConnectionInfoExtendedArrayArray_From(src:any) : carriers.EMailConnectionInfoExtended[][] {
    let res : carriers.EMailConnectionInfoExtended[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EMailConnectionInfoExtendedArray_From(src[i]);
        }
    }
    return res;
}




export function Create_EMailCustomHeader_From(src:any) : carriers.EMailCustomHeader {
        if( src === null || src === undefined )
            return null;
        let res : carriers.EMailCustomHeader = Create_Carrier_From(src) as carriers.EMailCustomHeader;
        
        res.Name= src.Name as string;
        res.Values= src.Values as string[];
        return res as carriers.EMailCustomHeader;
}

export function Create_EMailCustomHeaderArray_From(src:any) : carriers.EMailCustomHeader[] {
    let res : carriers.EMailCustomHeader[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EMailCustomHeader_From(src[i]);
        }
    }
    return res;
}

export function Create_EMailCustomHeaderArrayArray_From(src:any) : carriers.EMailCustomHeader[][] {
    let res : carriers.EMailCustomHeader[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EMailCustomHeaderArray_From(src[i]);
        }
    }
    return res;
}




export function Create_EMailEntity_From(src:any) : carriers.EMailEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.EMailEntity = Create_Carrier_From(src) as carriers.EMailEntity;
        
        res.To= Create_EMailAddressArray_From(src.To);
        res.Cc= Create_EMailAddressArray_From(src.Cc);
        res.Bcc= Create_EMailAddressArray_From(src.Bcc);
        res.Subject= src.Subject as string;
        res.HTMLBody= src.HTMLBody as string;
        res.From= Create_EMailAddress_From(src.From);
        res.Sent= Create_Date_From(src.Sent);
        res.Size= src.Size as number;
        res.Priority= enums.EMailPriority[src.Priority];
        res.Flags= Create_EMailFlags_From(src.Flags) as enums.EMailFlags;
        res.MessageID= src.MessageID as string;
        res.PlainBody= src.PlainBody as string;
        res.IsSent= src.IsSent as boolean;
        res.EMailSOInfo= Create_EMailSOInfo_From(src.EMailSOInfo);
        res.ServerId= src.ServerId as number;
        res.Attachments= Create_EMailAttachmentArray_From(src.Attachments);
        res.CustomHeaderList= Create_EMailCustomHeaderArray_From(src.CustomHeaderList);
        res.FolderName= src.FolderName as string;
        res.EmailItemId= src.EmailItemId as number;
        res.AccountId= src.AccountId as number;
        res.ReceivedAt= Create_Date_From(src.ReceivedAt);
        res.InReplyTo= Create_EMailEnvelope_From(src.InReplyTo);
        res.RepliedAt= Create_Date_From(src.RepliedAt);
        res.HasCalendarData= src.HasCalendarData as boolean;
        res.CalMethod= enums.CalMethod[src.CalMethod];
        res.CalReplyStatus= enums.CalReplyStatus[src.CalReplyStatus];
        return res as carriers.EMailEntity;
}

export function Create_EMailEntityArray_From(src:any) : carriers.EMailEntity[] {
    let res : carriers.EMailEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EMailEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_EMailEntityArrayArray_From(src:any) : carriers.EMailEntity[][] {
    let res : carriers.EMailEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EMailEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_EMailEnvelope_From(src:any) : carriers.EMailEnvelope {
        if( src === null || src === undefined )
            return null;
        let res : carriers.EMailEnvelope = Create_Carrier_From(src) as carriers.EMailEnvelope;
        
        res.ServerId= src.ServerId as number;
        res.MessageId= src.MessageId as string;
        res.Subject= src.Subject as string;
        res.From= Create_EMailAddress_From(src.From);
        res.To= Create_EMailAddressArray_From(src.To);
        res.Sent= Create_Date_From(src.Sent);
        res.Priority= enums.EMailPriority[src.Priority];
        res.Flags= Create_EMailFlags_From(src.Flags) as enums.EMailFlags;
        res.Size= src.Size as number;
        res.EMailSOInfo= Create_EMailSOInfo_From(src.EMailSOInfo);
        return res as carriers.EMailEnvelope;
}

export function Create_EMailEnvelopeArray_From(src:any) : carriers.EMailEnvelope[] {
    let res : carriers.EMailEnvelope[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EMailEnvelope_From(src[i]);
        }
    }
    return res;
}

export function Create_EMailEnvelopeArrayArray_From(src:any) : carriers.EMailEnvelope[][] {
    let res : carriers.EMailEnvelope[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EMailEnvelopeArray_From(src[i]);
        }
    }
    return res;
}




export function Create_EMailFolder_From(src:any) : carriers.EMailFolder {
        if( src === null || src === undefined )
            return null;
        let res : carriers.EMailFolder = Create_Carrier_From(src) as carriers.EMailFolder;
        
        res.Name= src.Name as string;
        res.Delimiter= src.Delimiter as string;
        res.Flags= src.Flags as string;
        res.TotalItems= src.TotalItems as number;
        res.UnreadItems= src.UnreadItems as number;
        res.Subscribed= src.Subscribed as boolean;
        res.EmailFolderId= src.EmailFolderId as number;
        return res as carriers.EMailFolder;
}

export function Create_EMailFolderArray_From(src:any) : carriers.EMailFolder[] {
    let res : carriers.EMailFolder[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EMailFolder_From(src[i]);
        }
    }
    return res;
}

export function Create_EMailFolderArrayArray_From(src:any) : carriers.EMailFolder[][] {
    let res : carriers.EMailFolder[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EMailFolderArray_From(src[i]);
        }
    }
    return res;
}




export function Create_EMailSOInfo_From(src:any) : carriers.EMailSOInfo {
        if( src === null || src === undefined )
            return null;
        let res : carriers.EMailSOInfo = Create_Carrier_From(src) as carriers.EMailSOInfo;
        
        res.DocumentId= src.DocumentId as number;
        res.AppointmentId= src.AppointmentId as number;
        res.ProjectId= src.ProjectId as number;
        res.SaleId= src.SaleId as number;
        res.Archived= src.Archived as boolean;
        res.ArchivedAt= Create_Date_From(src.ArchivedAt);
        res.ArchivedBy= src.ArchivedBy as number;
        res.ArchivedDisplayName= src.ArchivedDisplayName as string;
        return res as carriers.EMailSOInfo;
}

export function Create_EMailSOInfoArray_From(src:any) : carriers.EMailSOInfo[] {
    let res : carriers.EMailSOInfo[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EMailSOInfo_From(src[i]);
        }
    }
    return res;
}

export function Create_EMailSOInfoArrayArray_From(src:any) : carriers.EMailSOInfo[][] {
    let res : carriers.EMailSOInfo[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EMailSOInfoArray_From(src[i]);
        }
    }
    return res;
}




export function Create_SyncUserAccount_From(src:any) : carriers.SyncUserAccount {
        if( src === null || src === undefined )
            return null;
        let res : carriers.SyncUserAccount = Create_Carrier_From(src) as carriers.SyncUserAccount;
        
        res.AccountId= src.AccountId as number;
        res.AssociateName= src.AssociateName as string;
        res.AssociateId= src.AssociateId as number;
        return res as carriers.SyncUserAccount;
}

export function Create_SyncUserAccountArray_From(src:any) : carriers.SyncUserAccount[] {
    let res : carriers.SyncUserAccount[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SyncUserAccount_From(src[i]);
        }
    }
    return res;
}

export function Create_SyncUserAccountArrayArray_From(src:any) : carriers.SyncUserAccount[][] {
    let res : carriers.SyncUserAccount[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SyncUserAccountArray_From(src[i]);
        }
    }
    return res;
}


























export function Create_CriteriaInformation_From(src:any) : carriers.CriteriaInformation {
        if( src === null || src === undefined )
            return null;
        let res : carriers.CriteriaInformation = Create_Carrier_From(src) as carriers.CriteriaInformation;
        
        res.Restrictions= Create_ArchiveRestrictionInfoArray_From(src.Restrictions);
        res.CriteriaArchiveColumns= Create_ArchiveColumnInfoArray_From(src.CriteriaArchiveColumns);
        res.CriteriaArchiveRows= Create_ArchiveListItemArray_From(src.CriteriaArchiveRows);
        res.RestrictionGroups= Create_ArchiveRestrictionGroupArray_From(src.RestrictionGroups);
        return res as carriers.CriteriaInformation;
}

export function Create_CriteriaInformationArray_From(src:any) : carriers.CriteriaInformation[] {
    let res : carriers.CriteriaInformation[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CriteriaInformation_From(src[i]);
        }
    }
    return res;
}

export function Create_CriteriaInformationArrayArray_From(src:any) : carriers.CriteriaInformation[][] {
    let res : carriers.CriteriaInformation[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CriteriaInformationArray_From(src[i]);
        }
    }
    return res;
}





export function Create_FindResults_From(src:any) : carriers.FindResults {
        if( src === null || src === undefined )
            return null;
        let res : carriers.FindResults = Create_Carrier_From(src) as carriers.FindResults;
        
        res.ArchiveColumns= Create_ArchiveColumnInfoArray_From(src.ArchiveColumns);
        res.ArchiveRows= Create_ArchiveListItemArray_From(src.ArchiveRows);
        res.RowCount= src.RowCount as number;
        return res as carriers.FindResults;
}

export function Create_FindResultsArray_From(src:any) : carriers.FindResults[] {
    let res : carriers.FindResults[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FindResults_From(src[i]);
        }
    }
    return res;
}

export function Create_FindResultsArrayArray_From(src:any) : carriers.FindResults[][] {
    let res : carriers.FindResults[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FindResultsArray_From(src[i]);
        }
    }
    return res;
}




export function Create_Webhook_From(src:any) : carriers.Webhook {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.WebhookId= src.WebhookId as number;
        res.Name= src.Name as string;
        res.Events= src.Events as string[];
        res.TargetUrl= src.TargetUrl as string;
        res.Secret= src.Secret as string;
        res.State= enums.WebhookState[src.State];
        res.Type= src.Type as string;
        res.Headers= Create_StringDictionary_From(src.Headers);
        res.Properties= Create_StringObjectDictionary_From(src.Properties);
        res.Registered= Create_Date_From(src.Registered);
        res.RegisteredAssociate= Create_Associate_From(src.RegisteredAssociate);
        res.Updated= Create_Date_From(src.Updated);
        res.UpdatedAssociate= Create_Associate_From(src.UpdatedAssociate);
        return res as carriers.Webhook;
}

export function Create_WebhookArray_From(src:any) : carriers.Webhook[] {
    let res : carriers.Webhook[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Webhook_From(src[i]);
        }
    }
    return res;
}

export function Create_WebhookArrayArray_From(src:any) : carriers.Webhook[][] {
    let res : carriers.Webhook[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WebhookArray_From(src[i]);
        }
    }
    return res;
}




export function Create_WebhookResult_From(src:any) : carriers.WebhookResult {
        if( src === null || src === undefined )
            return null;
        let res : carriers.WebhookResult = Create_Carrier_From(src) as carriers.WebhookResult;
        
        res.Success= src.Success as boolean;
        res.Message= src.Message as string;
        return res as carriers.WebhookResult;
}

export function Create_WebhookResultArray_From(src:any) : carriers.WebhookResult[] {
    let res : carriers.WebhookResult[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WebhookResult_From(src[i]);
        }
    }
    return res;
}

export function Create_WebhookResultArrayArray_From(src:any) : carriers.WebhookResult[][] {
    let res : carriers.WebhookResult[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WebhookResultArray_From(src[i]);
        }
    }
    return res;
}





export function Create_Sentry_From(src:any) : carriers.Sentry {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Sentry = Create_Carrier_From(src) as carriers.Sentry;
        
        return res as carriers.Sentry;
}

export function Create_SentryArray_From(src:any) : carriers.Sentry[] {
    let res : carriers.Sentry[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Sentry_From(src[i]);
        }
    }
    return res;
}

export function Create_SentryArrayArray_From(src:any) : carriers.Sentry[][] {
    let res : carriers.Sentry[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SentryArray_From(src[i]);
        }
    }
    return res;
}




export function Create_VisibleFor_From(src:any) : carriers.VisibleFor {
        if( src === null || src === undefined )
            return null;
        let res : carriers.VisibleFor = Create_Carrier_From(src) as carriers.VisibleFor;
        
        res.VisibleId= src.VisibleId as number;
        res.Visibility= enums.Visibility[src.Visibility];
        res.DisplayValue= src.DisplayValue as string;
        return res as carriers.VisibleFor;
}

export function Create_VisibleForArray_From(src:any) : carriers.VisibleFor[] {
    let res : carriers.VisibleFor[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_VisibleFor_From(src[i]);
        }
    }
    return res;
}

export function Create_VisibleForArrayArray_From(src:any) : carriers.VisibleFor[][] {
    let res : carriers.VisibleFor[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_VisibleForArray_From(src[i]);
        }
    }
    return res;
}





export function Create_FieldInfoBase_From(src:any) : carriers.FieldInfoBase {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        if( src.FieldType == "Attachment" )
            res = Create_FieldInfoAttachment_From(src);

        if( src.FieldType == "Blob" )
            res = Create_FieldInfoBlob_From(src);

        if( src.FieldType == "Checkbox" )
            res = Create_FieldInfoBool_From(src);

        if( src.FieldType == "Date" )
            res = Create_FieldInfoDate_From(src);

        if( src.FieldType == "DateTime" )
            res = Create_FieldInfoDateTime_From(src);

        if( src.FieldType == "Decimal" )
            res = Create_FieldInfoDecimal_From(src);

        if( src.FieldType == "DynamicLink" )
            res = Create_FieldInfoDynamicLink_From(src);

        if( src.FieldType == "Integer" )
            res = Create_FieldInfoInt_From(src);

        if( src.FieldType == "MdoList" )
            res = Create_FieldInfoMdoList_From(src);

        if( src.FieldType == "ListText" )
            res = Create_FieldInfoListText_From(src);

        if( src.FieldType == "LongText" )
            res = Create_FieldInfoLongText_From(src);

        if( src.FieldType == "RelationTo" )
            res = Create_FieldInfoRelation_From(src);

        if( src.FieldType == "ShortText" )
            res = Create_FieldInfoShortText_From(src);

        if( src.FieldType == "Time" )
            res = Create_FieldInfoTime_From(src);

        if( src.FieldType == "TimeSpan" )
            res = Create_FieldInfoTimeSpan_From(src);

        res.FieldType= enums.CustomFieldType[src.FieldType];
        res.FieldName= src.FieldName as string;
        res.DisplayName= src.DisplayName as string;
        res.Description= src.Description as string;
        res.ShortLabel= src.ShortLabel as string;
        res.HideLabel= src.HideLabel as boolean;
        res.HideField= src.HideField as boolean;
        res.IsIndexed= src.IsIndexed as boolean;
        res.IsMandatory= src.IsMandatory as boolean;
        res.IsReadOnly= src.IsReadOnly as boolean;
        res.IsExternal= src.IsExternal as boolean;
        res.Rank= src.Rank as number;
        res.TemplateVariableName= src.TemplateVariableName as string;
        return res as carriers.FieldInfoBase;
}

export function Create_FieldInfoBaseArray_From(src:any) : carriers.FieldInfoBase[] {
    let res : carriers.FieldInfoBase[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoBase_From(src[i]);
        }
    }
    return res;
}

export function Create_FieldInfoBaseArrayArray_From(src:any) : carriers.FieldInfoBase[][] {
    let res : carriers.FieldInfoBase[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoBaseArray_From(src[i]);
        }
    }
    return res;
}




export function Create_FieldInfoAttachment_From(src:any) : carriers.FieldInfoAttachment {
        if( src === null || src === undefined )
            return null;
        let res : carriers.FieldInfoAttachment = src as carriers.FieldInfoAttachment;
        
        res.DefaultValue= src.DefaultValue as number;
        return res as carriers.FieldInfoAttachment;
}

export function Create_FieldInfoAttachmentArray_From(src:any) : carriers.FieldInfoAttachment[] {
    let res : carriers.FieldInfoAttachment[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoAttachment_From(src[i]);
        }
    }
    return res;
}

export function Create_FieldInfoAttachmentArrayArray_From(src:any) : carriers.FieldInfoAttachment[][] {
    let res : carriers.FieldInfoAttachment[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoAttachmentArray_From(src[i]);
        }
    }
    return res;
}




export function Create_FieldInfoBlob_From(src:any) : carriers.FieldInfoBlob {
        if( src === null || src === undefined )
            return null;
        let res : carriers.FieldInfoBlob = src as carriers.FieldInfoBlob;
        
        return res as carriers.FieldInfoBlob;
}

export function Create_FieldInfoBlobArray_From(src:any) : carriers.FieldInfoBlob[] {
    let res : carriers.FieldInfoBlob[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoBlob_From(src[i]);
        }
    }
    return res;
}

export function Create_FieldInfoBlobArrayArray_From(src:any) : carriers.FieldInfoBlob[][] {
    let res : carriers.FieldInfoBlob[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoBlobArray_From(src[i]);
        }
    }
    return res;
}




export function Create_FieldInfoBool_From(src:any) : carriers.FieldInfoBool {
        if( src === null || src === undefined )
            return null;
        let res : carriers.FieldInfoBool = src as carriers.FieldInfoBool;
        
        res.DefaultValue= src.DefaultValue as boolean;
        return res as carriers.FieldInfoBool;
}

export function Create_FieldInfoBoolArray_From(src:any) : carriers.FieldInfoBool[] {
    let res : carriers.FieldInfoBool[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoBool_From(src[i]);
        }
    }
    return res;
}

export function Create_FieldInfoBoolArrayArray_From(src:any) : carriers.FieldInfoBool[][] {
    let res : carriers.FieldInfoBool[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoBoolArray_From(src[i]);
        }
    }
    return res;
}




export function Create_FieldInfoDate_From(src:any) : carriers.FieldInfoDate {
        if( src === null || src === undefined )
            return null;
        let res : carriers.FieldInfoDate = src as carriers.FieldInfoDate;
        
        res.DefaultValue= Create_Date_From(src.DefaultValue);
        res.IsDefaultNow= src.IsDefaultNow as boolean;
        return res as carriers.FieldInfoDate;
}

export function Create_FieldInfoDateArray_From(src:any) : carriers.FieldInfoDate[] {
    let res : carriers.FieldInfoDate[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoDate_From(src[i]);
        }
    }
    return res;
}

export function Create_FieldInfoDateArrayArray_From(src:any) : carriers.FieldInfoDate[][] {
    let res : carriers.FieldInfoDate[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoDateArray_From(src[i]);
        }
    }
    return res;
}




export function Create_FieldInfoDateTime_From(src:any) : carriers.FieldInfoDateTime {
        if( src === null || src === undefined )
            return null;
        let res : carriers.FieldInfoDateTime = src as carriers.FieldInfoDateTime;
        
        res.DefaultValue= Create_Date_From(src.DefaultValue);
        res.IsDefaultNow= src.IsDefaultNow as boolean;
        return res as carriers.FieldInfoDateTime;
}

export function Create_FieldInfoDateTimeArray_From(src:any) : carriers.FieldInfoDateTime[] {
    let res : carriers.FieldInfoDateTime[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoDateTime_From(src[i]);
        }
    }
    return res;
}

export function Create_FieldInfoDateTimeArrayArray_From(src:any) : carriers.FieldInfoDateTime[][] {
    let res : carriers.FieldInfoDateTime[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoDateTimeArray_From(src[i]);
        }
    }
    return res;
}




export function Create_FieldInfoDecimal_From(src:any) : carriers.FieldInfoDecimal {
        if( src === null || src === undefined )
            return null;
        let res : carriers.FieldInfoDecimal = src as carriers.FieldInfoDecimal;
        
        res.DefaultValue= src.DefaultValue as number;
        res.Precision= src.Precision as number;
        return res as carriers.FieldInfoDecimal;
}

export function Create_FieldInfoDecimalArray_From(src:any) : carriers.FieldInfoDecimal[] {
    let res : carriers.FieldInfoDecimal[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoDecimal_From(src[i]);
        }
    }
    return res;
}

export function Create_FieldInfoDecimalArrayArray_From(src:any) : carriers.FieldInfoDecimal[][] {
    let res : carriers.FieldInfoDecimal[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoDecimalArray_From(src[i]);
        }
    }
    return res;
}




export function Create_FieldInfoDynamicLink_From(src:any) : carriers.FieldInfoDynamicLink {
        if( src === null || src === undefined )
            return null;
        let res : carriers.FieldInfoDynamicLink = src as carriers.FieldInfoDynamicLink;
        
        res.LinkName= src.LinkName as string;
        res.LinkValue= src.LinkValue as string;
        return res as carriers.FieldInfoDynamicLink;
}

export function Create_FieldInfoDynamicLinkArray_From(src:any) : carriers.FieldInfoDynamicLink[] {
    let res : carriers.FieldInfoDynamicLink[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoDynamicLink_From(src[i]);
        }
    }
    return res;
}

export function Create_FieldInfoDynamicLinkArrayArray_From(src:any) : carriers.FieldInfoDynamicLink[][] {
    let res : carriers.FieldInfoDynamicLink[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoDynamicLinkArray_From(src[i]);
        }
    }
    return res;
}




export function Create_FieldInfoInt_From(src:any) : carriers.FieldInfoInt {
        if( src === null || src === undefined )
            return null;
        let res : carriers.FieldInfoInt = src as carriers.FieldInfoInt;
        
        res.DefaultValue= src.DefaultValue as number;
        return res as carriers.FieldInfoInt;
}

export function Create_FieldInfoIntArray_From(src:any) : carriers.FieldInfoInt[] {
    let res : carriers.FieldInfoInt[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoInt_From(src[i]);
        }
    }
    return res;
}

export function Create_FieldInfoIntArrayArray_From(src:any) : carriers.FieldInfoInt[][] {
    let res : carriers.FieldInfoInt[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoIntArray_From(src[i]);
        }
    }
    return res;
}




export function Create_FieldInfoMdoList_From(src:any) : carriers.FieldInfoMdoList {
        if( src === null || src === undefined )
            return null;
        let res : carriers.FieldInfoMdoList = src as carriers.FieldInfoMdoList;
        
        res.DefaultValue= src.DefaultValue as number;
        res.MdoListName= src.MdoListName as string;
        return res as carriers.FieldInfoMdoList;
}

export function Create_FieldInfoMdoListArray_From(src:any) : carriers.FieldInfoMdoList[] {
    let res : carriers.FieldInfoMdoList[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoMdoList_From(src[i]);
        }
    }
    return res;
}

export function Create_FieldInfoMdoListArrayArray_From(src:any) : carriers.FieldInfoMdoList[][] {
    let res : carriers.FieldInfoMdoList[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoMdoListArray_From(src[i]);
        }
    }
    return res;
}




export function Create_FieldInfoListText_From(src:any) : carriers.FieldInfoListText {
        if( src === null || src === undefined )
            return null;
        let res : carriers.FieldInfoListText = src as carriers.FieldInfoListText;
        
        res.DefaultValue= src.DefaultValue as string;
        res.TextLength= src.TextLength as number;
        res.Choices= src.Choices as string[];
        return res as carriers.FieldInfoListText;
}

export function Create_FieldInfoListTextArray_From(src:any) : carriers.FieldInfoListText[] {
    let res : carriers.FieldInfoListText[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoListText_From(src[i]);
        }
    }
    return res;
}

export function Create_FieldInfoListTextArrayArray_From(src:any) : carriers.FieldInfoListText[][] {
    let res : carriers.FieldInfoListText[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoListTextArray_From(src[i]);
        }
    }
    return res;
}




export function Create_FieldInfoLongText_From(src:any) : carriers.FieldInfoLongText {
        if( src === null || src === undefined )
            return null;
        let res : carriers.FieldInfoLongText = src as carriers.FieldInfoLongText;
        
        res.DefaultValue= src.DefaultValue as string;
        res.IsHtml= src.IsHtml as boolean;
        res.UseTextArea= src.UseTextArea as boolean;
        res.NumRows= src.NumRows as number;
        return res as carriers.FieldInfoLongText;
}

export function Create_FieldInfoLongTextArray_From(src:any) : carriers.FieldInfoLongText[] {
    let res : carriers.FieldInfoLongText[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoLongText_From(src[i]);
        }
    }
    return res;
}

export function Create_FieldInfoLongTextArrayArray_From(src:any) : carriers.FieldInfoLongText[][] {
    let res : carriers.FieldInfoLongText[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoLongTextArray_From(src[i]);
        }
    }
    return res;
}




export function Create_FieldInfoRelation_From(src:any) : carriers.FieldInfoRelation {
        if( src === null || src === undefined )
            return null;
        let res : carriers.FieldInfoRelation = src as carriers.FieldInfoRelation;
        
        res.DefaultValue= src.DefaultValue as number;
        res.TargetTable= src.TargetTable as string;
        res.TargetLabel= src.TargetLabel as string;
        res.UseDropDown= src.UseDropDown as boolean;
        res.MdoListName= src.MdoListName as string;
        return res as carriers.FieldInfoRelation;
}

export function Create_FieldInfoRelationArray_From(src:any) : carriers.FieldInfoRelation[] {
    let res : carriers.FieldInfoRelation[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoRelation_From(src[i]);
        }
    }
    return res;
}

export function Create_FieldInfoRelationArrayArray_From(src:any) : carriers.FieldInfoRelation[][] {
    let res : carriers.FieldInfoRelation[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoRelationArray_From(src[i]);
        }
    }
    return res;
}




export function Create_FieldInfoShortText_From(src:any) : carriers.FieldInfoShortText {
        if( src === null || src === undefined )
            return null;
        let res : carriers.FieldInfoShortText = src as carriers.FieldInfoShortText;
        
        res.DefaultValue= src.DefaultValue as string;
        res.TextLength= src.TextLength as number;
        res.FormatMask= src.FormatMask as string;
        res.IsHtml= src.IsHtml as boolean;
        return res as carriers.FieldInfoShortText;
}

export function Create_FieldInfoShortTextArray_From(src:any) : carriers.FieldInfoShortText[] {
    let res : carriers.FieldInfoShortText[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoShortText_From(src[i]);
        }
    }
    return res;
}

export function Create_FieldInfoShortTextArrayArray_From(src:any) : carriers.FieldInfoShortText[][] {
    let res : carriers.FieldInfoShortText[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoShortTextArray_From(src[i]);
        }
    }
    return res;
}




export function Create_FieldInfoTime_From(src:any) : carriers.FieldInfoTime {
        if( src === null || src === undefined )
            return null;
        let res : carriers.FieldInfoTime = src as carriers.FieldInfoTime;
        
        res.DefaultValue= Create_Date_From(src.DefaultValue);
        res.IsDefaultNow= src.IsDefaultNow as boolean;
        return res as carriers.FieldInfoTime;
}

export function Create_FieldInfoTimeArray_From(src:any) : carriers.FieldInfoTime[] {
    let res : carriers.FieldInfoTime[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoTime_From(src[i]);
        }
    }
    return res;
}

export function Create_FieldInfoTimeArrayArray_From(src:any) : carriers.FieldInfoTime[][] {
    let res : carriers.FieldInfoTime[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoTimeArray_From(src[i]);
        }
    }
    return res;
}




export function Create_FieldInfoTimeSpan_From(src:any) : carriers.FieldInfoTimeSpan {
        if( src === null || src === undefined )
            return null;
        let res : carriers.FieldInfoTimeSpan = src as carriers.FieldInfoTimeSpan;
        
        res.DefaultValue= src.DefaultValue as number;
        res.UseDays= src.UseDays as boolean;
        res.UseHours= src.UseHours as boolean;
        res.UseMinutes= src.UseMinutes as boolean;
        res.MaxNum= src.MaxNum as number;
        return res as carriers.FieldInfoTimeSpan;
}

export function Create_FieldInfoTimeSpanArray_From(src:any) : carriers.FieldInfoTimeSpan[] {
    let res : carriers.FieldInfoTimeSpan[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoTimeSpan_From(src[i]);
        }
    }
    return res;
}

export function Create_FieldInfoTimeSpanArrayArray_From(src:any) : carriers.FieldInfoTimeSpan[][] {
    let res : carriers.FieldInfoTimeSpan[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldInfoTimeSpanArray_From(src[i]);
        }
    }
    return res;
}




export function Create_UserDefinedFieldInfo_From(src:any) : carriers.UserDefinedFieldInfo {
        if( src === null || src === undefined )
            return null;
        let res : carriers.UserDefinedFieldInfo = Create_Carrier_From(src) as carriers.UserDefinedFieldInfo;
        
        res.UDefFieldId= src.UDefFieldId as number;
        res.ColumnId= src.ColumnId as number;
        res.FieldDefault= src.FieldDefault as string;
        res.FieldHeight= src.FieldHeight as number;
        res.FieldLabel= src.FieldLabel as string;
        res.FieldLeft= src.FieldLeft as number;
        res.FieldTop= src.FieldTop as number;
        res.FieldType= enums.UDefFieldType[src.FieldType];
        res.FieldWidth= src.FieldWidth as number;
        res.FormatMask= src.FormatMask as string;
        res.HideLabel= src.HideLabel as boolean;
        res.IsIndexed= src.IsIndexed as boolean;
        res.LabelHeight= src.LabelHeight as number;
        res.LabelLeft= src.LabelLeft as number;
        res.LabelTop= src.LabelTop as number;
        res.LabelWidth= src.LabelWidth as number;
        res.LastVersionId= src.LastVersionId as number;
        res.ListTableId= src.ListTableId as number;
        res.IsMandatory= src.IsMandatory as boolean;
        res.Type= enums.UDefType[src.Type];
        res.Page1LineNo= src.Page1LineNo as number;
        res.ProgId= src.ProgId as string;
        res.IsReadOnly= src.IsReadOnly as boolean;
        res.ShortLabel= src.ShortLabel as string;
        res.TabOrder= src.TabOrder as number;
        res.TextLength= src.TextLength as number;
        res.Tooltip= src.Tooltip as string;
        res.UdefIdentity= src.UdefIdentity as number;
        res.UDListDefinitionId= src.UDListDefinitionId as number;
        res.Justification= enums.UdefJustification[src.Justification];
        res.Version= src.Version as number;
        res.TemplateVariableName= src.TemplateVariableName as string;
        res.HasBeenPublished= src.HasBeenPublished as boolean;
        res.MdoListName= src.MdoListName as string;
        return res as carriers.UserDefinedFieldInfo;
}

export function Create_UserDefinedFieldInfoArray_From(src:any) : carriers.UserDefinedFieldInfo[] {
    let res : carriers.UserDefinedFieldInfo[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_UserDefinedFieldInfo_From(src[i]);
        }
    }
    return res;
}

export function Create_UserDefinedFieldInfoArrayArray_From(src:any) : carriers.UserDefinedFieldInfo[][] {
    let res : carriers.UserDefinedFieldInfo[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_UserDefinedFieldInfoArray_From(src[i]);
        }
    }
    return res;
}












export function Create_ReportEntity_From(src:any) : carriers.ReportEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ReportEntity = Create_Carrier_From(src) as carriers.ReportEntity;
        
        res.ReportId= src.ReportId as number;
        res.ReportCategory= enums.ReportCategory[src.ReportCategory];
        res.Description= src.Description as string;
        res.ReportLayout= enums.ReportLayout[src.ReportLayout];
        res.Name= src.Name as string;
        res.AssociateId= src.AssociateId as number;
        res.TemplateId= src.TemplateId as number;
        res.Published= src.Published as boolean;
        return res as carriers.ReportEntity;
}

export function Create_ReportEntityArray_From(src:any) : carriers.ReportEntity[] {
    let res : carriers.ReportEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ReportEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_ReportEntityArrayArray_From(src:any) : carriers.ReportEntity[][] {
    let res : carriers.ReportEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ReportEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ReportLabelLayoutEntity_From(src:any) : carriers.ReportLabelLayoutEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ReportLabelLayoutEntity = Create_Carrier_From(src) as carriers.ReportLabelLayoutEntity;
        
        res.ReportLabelLayoutId= src.ReportLabelLayoutId as number;
        res.Name= src.Name as string;
        res.Description= src.Description as string;
        res.Orientation= enums.ReportPaperOrientation[src.Orientation];
        res.PaperWidth= src.PaperWidth as number;
        res.PaperHeight= src.PaperHeight as number;
        res.LeftMargin= src.LeftMargin as number;
        res.RightMargin= src.RightMargin as number;
        res.TopMargin= src.TopMargin as number;
        res.BottomMargin= src.BottomMargin as number;
        res.CountColumns= src.CountColumns as number;
        res.CountRows= src.CountRows as number;
        return res as carriers.ReportLabelLayoutEntity;
}

export function Create_ReportLabelLayoutEntityArray_From(src:any) : carriers.ReportLabelLayoutEntity[] {
    let res : carriers.ReportLabelLayoutEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ReportLabelLayoutEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_ReportLabelLayoutEntityArrayArray_From(src:any) : carriers.ReportLabelLayoutEntity[][] {
    let res : carriers.ReportLabelLayoutEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ReportLabelLayoutEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_SaintConfiguration_From(src:any) : carriers.SaintConfiguration {
        if( src === null || src === undefined )
            return null;
        let res : carriers.SaintConfiguration = Create_Carrier_From(src) as carriers.SaintConfiguration;
        
        res.OwnerTable= src.OwnerTable as number;
        res.Enabled= src.Enabled as boolean;
        res.Period1= src.Period1 as number;
        res.Period2= src.Period2 as number;
        res.Period3= src.Period3 as number;
        res.GenerationStart= Create_Date_From(src.GenerationStart);
        res.GenerationEnd= Create_Date_From(src.GenerationEnd);
        res.RowsGenerated= src.RowsGenerated as number;
        return res as carriers.SaintConfiguration;
}

export function Create_SaintConfigurationArray_From(src:any) : carriers.SaintConfiguration[] {
    let res : carriers.SaintConfiguration[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SaintConfiguration_From(src[i]);
        }
    }
    return res;
}

export function Create_SaintConfigurationArrayArray_From(src:any) : carriers.SaintConfiguration[][] {
    let res : carriers.SaintConfiguration[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SaintConfigurationArray_From(src[i]);
        }
    }
    return res;
}




export function Create_StatusMonitor_From(src:any) : carriers.StatusMonitor {
        if( src === null || src === undefined )
            return null;
        let res : carriers.StatusMonitor = Create_Carrier_From(src) as carriers.StatusMonitor;
        
        res.OwnerTable= src.OwnerTable as number;
        res.Rank= src.Rank as number;
        res.DefaultTask= src.DefaultTask as number;
        res.DefaultTaskText= src.DefaultTaskText as string;
        res.IsVisual= src.IsVisual as boolean;
        res.LastGenerated= Create_Date_From(src.LastGenerated);
        res.Description= src.Description as string;
        res.Name= src.Name as string;
        res.StatusMonitorId= src.StatusMonitorId as number;
        res.PictureId= src.PictureId as number;
        res.NeedsUpdate= src.NeedsUpdate as boolean;
        res.Deleted= src.Deleted as boolean;
        res.NumMatches= src.NumMatches as number;
        res.NumNeedUpdate= src.NumNeedUpdate as number;
        res.GenerationStart= Create_Date_From(src.GenerationStart);
        return res as carriers.StatusMonitor;
}

export function Create_StatusMonitorArray_From(src:any) : carriers.StatusMonitor[] {
    let res : carriers.StatusMonitor[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_StatusMonitor_From(src[i]);
        }
    }
    return res;
}

export function Create_StatusMonitorArrayArray_From(src:any) : carriers.StatusMonitor[][] {
    let res : carriers.StatusMonitor[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_StatusMonitorArray_From(src[i]);
        }
    }
    return res;
}




export function Create_StatusMonitorPeriods_From(src:any) : carriers.StatusMonitorPeriods {
        if( src === null || src === undefined )
            return null;
        let res : carriers.StatusMonitorPeriods = Create_Carrier_From(src) as carriers.StatusMonitorPeriods;
        
        res.Period1= src.Period1 as number;
        res.Period2= src.Period2 as number;
        res.Period3= src.Period3 as number;
        return res as carriers.StatusMonitorPeriods;
}

export function Create_StatusMonitorPeriodsArray_From(src:any) : carriers.StatusMonitorPeriods[] {
    let res : carriers.StatusMonitorPeriods[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_StatusMonitorPeriods_From(src[i]);
        }
    }
    return res;
}

export function Create_StatusMonitorPeriodsArrayArray_From(src:any) : carriers.StatusMonitorPeriods[][] {
    let res : carriers.StatusMonitorPeriods[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_StatusMonitorPeriodsArray_From(src[i]);
        }
    }
    return res;
}






export function Create_Batch_From(src:any) : carriers.Batch {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Batch = Create_Carrier_From(src) as carriers.Batch;
        
        return res as carriers.Batch;
}

export function Create_BatchArray_From(src:any) : carriers.Batch[] {
    let res : carriers.Batch[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Batch_From(src[i]);
        }
    }
    return res;
}

export function Create_BatchArrayArray_From(src:any) : carriers.Batch[][] {
    let res : carriers.Batch[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_BatchArray_From(src[i]);
        }
    }
    return res;
}




export function Create_BatchTaskInfo_From(src:any) : carriers.BatchTaskInfo {
        if( src === null || src === undefined )
            return null;
        let res : carriers.BatchTaskInfo = Create_Carrier_From(src) as carriers.BatchTaskInfo;
        
        res.Id= src.Id as number;
        res.Name= src.Name as string;
        res.AssociateId= src.AssociateId as number;
        res.DetailsTable= src.DetailsTable as number;
        res.DetailsRecord= src.DetailsRecord as number;
        res.IsSystemTask= src.IsSystemTask as boolean;
        res.IsInternalTask= src.IsInternalTask as boolean;
        res.ParameterObject= Create_StringDictionary_From(src.ParameterObject);
        res.LastStarted= Create_Date_From(src.LastStarted);
        res.Created= Create_Date_From(src.Created);
        res.StartCount= src.StartCount as number;
        res.DatabaseSerialNumber= src.DatabaseSerialNumber as string;
        res.Context= src.Context as string;
        res.Result= src.Result as string;
        res.State= enums.BatchTaskState[src.State];
        res.Description= src.Description as string;
        res.Response= src.Response as string;
        res.Request= src.Request as string;
        res.ProgressDescription= src.ProgressDescription as string;
        res.ProgressPercent= src.ProgressPercent as number;
        res.FileName= src.FileName as string;
        res.CancellationBehaviour= enums.BatchTaskCancellationBehaviour[src.CancellationBehaviour];
        return res as carriers.BatchTaskInfo;
}

export function Create_BatchTaskInfoArray_From(src:any) : carriers.BatchTaskInfo[] {
    let res : carriers.BatchTaskInfo[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_BatchTaskInfo_From(src[i]);
        }
    }
    return res;
}

export function Create_BatchTaskInfoArrayArray_From(src:any) : carriers.BatchTaskInfo[][] {
    let res : carriers.BatchTaskInfo[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_BatchTaskInfoArray_From(src[i]);
        }
    }
    return res;
}













export function Create_ContactRelationEntity_From(src:any) : carriers.ContactRelationEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ContactRelationEntity = Create_Carrier_From(src) as carriers.ContactRelationEntity;
        
        res.SourceContactId= src.SourceContactId as number;
        res.SourcePersonId= src.SourcePersonId as number;
        res.DestinationContactId= src.DestinationContactId as number;
        res.DestinationPersonId= src.DestinationPersonId as number;
        res.RelationId= src.RelationId as number;
        res.Comment= src.Comment as string;
        res.RelationDefinitionId= src.RelationDefinitionId as number;
        res.Reversed= src.Reversed as number;
        res.UpdatedDate= Create_Date_From(src.UpdatedDate);
        res.CreatedDate= Create_Date_From(src.CreatedDate);
        res.CreatedBy= Create_Associate_From(src.CreatedBy);
        res.UpdatedBy= Create_Associate_From(src.UpdatedBy);
        res.SourceContactName= src.SourceContactName as string;
        res.SourcePersonName= src.SourcePersonName as string;
        res.DestinationContactName= src.DestinationContactName as string;
        res.DestinationPersonName= src.DestinationPersonName as string;
        res.ActiveText= src.ActiveText as string;
        res.PassiveText= src.PassiveText as string;
        return res as carriers.ContactRelationEntity;
}

export function Create_ContactRelationEntityArray_From(src:any) : carriers.ContactRelationEntity[] {
    let res : carriers.ContactRelationEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ContactRelationEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_ContactRelationEntityArrayArray_From(src:any) : carriers.ContactRelationEntity[][] {
    let res : carriers.ContactRelationEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ContactRelationEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ActivityFilter_From(src:any) : carriers.ActivityFilter {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ActivityFilter = Create_Carrier_From(src) as carriers.ActivityFilter;
        
        res.FromDate= Create_Date_From(src.FromDate);
        res.ToDate= Create_Date_From(src.ToDate);
        res.AssociateList= Create_SelectableMDOListItemArray_From(src.AssociateList);
        res.GroupList= Create_SelectableMDOListItemArray_From(src.GroupList);
        res.FutureDateList= Create_MDOListItemArray_From(src.FutureDateList);
        return res as carriers.ActivityFilter;
}

export function Create_ActivityFilterArray_From(src:any) : carriers.ActivityFilter[] {
    let res : carriers.ActivityFilter[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ActivityFilter_From(src[i]);
        }
    }
    return res;
}

export function Create_ActivityFilterArrayArray_From(src:any) : carriers.ActivityFilter[][] {
    let res : carriers.ActivityFilter[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ActivityFilterArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ArchiveColumnData_From(src:any) : carriers.ArchiveColumnData {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.DisplayValue= src.DisplayValue as string;
        res.TooltipHint= src.TooltipHint as string;
        res.LinkHint= src.LinkHint as string;
        return res as carriers.ArchiveColumnData;
}

export function Create_ArchiveColumnDataArray_From(src:any) : carriers.ArchiveColumnData[] {
    let res : carriers.ArchiveColumnData[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ArchiveColumnData_From(src[i]);
        }
    }
    return res;
}

export function Create_ArchiveColumnDataArrayArray_From(src:any) : carriers.ArchiveColumnData[][] {
    let res : carriers.ArchiveColumnData[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ArchiveColumnDataArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ArchiveColumnInfo_From(src:any) : carriers.ArchiveColumnInfo {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.DisplayName= src.DisplayName as string;
        res.DisplayTooltip= src.DisplayTooltip as string;
        res.DisplayType= src.DisplayType as string;
        res.CanOrderBy= src.CanOrderBy as boolean;
        res.Name= src.Name as string;
        res.CanRestrictBy= src.CanRestrictBy as boolean;
        res.RestrictionType= src.RestrictionType as string;
        res.RestrictionListName= src.RestrictionListName as string;
        res.IsVisible= src.IsVisible as boolean;
        res.Width= src.Width as string;
        res.IconHint= src.IconHint as string;
        res.HeadingIconHint= src.HeadingIconHint as string;
        res.ExtraInfo= src.ExtraInfo as string;
        return res as carriers.ArchiveColumnInfo;
}

export function Create_ArchiveColumnInfoArray_From(src:any) : carriers.ArchiveColumnInfo[] {
    let res : carriers.ArchiveColumnInfo[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ArchiveColumnInfo_From(src[i]);
        }
    }
    return res;
}

export function Create_ArchiveColumnInfoArrayArray_From(src:any) : carriers.ArchiveColumnInfo[][] {
    let res : carriers.ArchiveColumnInfo[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ArchiveColumnInfoArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ArchiveConfiguration_From(src:any) : carriers.ArchiveConfiguration {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ArchiveConfiguration = Create_Carrier_From(src) as carriers.ArchiveConfiguration;
        
        res.ArchiveColumnInfo= Create_ArchiveColumnInfoArray_From(src.ArchiveColumnInfo);
        res.ArchiveEntityInfo= Create_SelectableMDOListItemArray_From(src.ArchiveEntityInfo);
        res.ArchiveOrderByInfo= Create_ArchiveOrderByInfoArray_From(src.ArchiveOrderByInfo);
        res.OwnerKeys= src.OwnerKeys as string;
        return res as carriers.ArchiveConfiguration;
}

export function Create_ArchiveConfigurationArray_From(src:any) : carriers.ArchiveConfiguration[] {
    let res : carriers.ArchiveConfiguration[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ArchiveConfiguration_From(src[i]);
        }
    }
    return res;
}

export function Create_ArchiveConfigurationArrayArray_From(src:any) : carriers.ArchiveConfiguration[][] {
    let res : carriers.ArchiveConfiguration[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ArchiveConfigurationArray_From(src[i]);
        }
    }
    return res;
}





export function Create_ArchiveListItem_From(src:any) : carriers.ArchiveListItem {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ArchiveListItem = Create_Carrier_From(src) as carriers.ArchiveListItem;
        
        res.EntityName= src.EntityName as string;
        res.PrimaryKey= src.PrimaryKey as number;
        res.ColumnData= Create_ColumnDataDictionary_From(src.ColumnData);
        res.LinkHint= src.LinkHint as string;
        res.StyleHint= src.StyleHint as string;
        return res as carriers.ArchiveListItem;
}

export function Create_ArchiveListItemArray_From(src:any) : carriers.ArchiveListItem[] {
    let res : carriers.ArchiveListItem[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ArchiveListItem_From(src[i]);
        }
    }
    return res;
}

export function Create_ArchiveListItemArrayArray_From(src:any) : carriers.ArchiveListItem[][] {
    let res : carriers.ArchiveListItem[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ArchiveListItemArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ArchiveListResult_From(src:any) : carriers.ArchiveListResult {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ArchiveListResult = Create_Carrier_From(src) as carriers.ArchiveListResult;
        
        res.RowCount= src.RowCount as number;
        res.Rows= Create_ArchiveListItemArray_From(src.Rows);
        return res as carriers.ArchiveListResult;
}

export function Create_ArchiveListResultArray_From(src:any) : carriers.ArchiveListResult[] {
    let res : carriers.ArchiveListResult[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ArchiveListResult_From(src[i]);
        }
    }
    return res;
}

export function Create_ArchiveListResultArrayArray_From(src:any) : carriers.ArchiveListResult[][] {
    let res : carriers.ArchiveListResult[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ArchiveListResultArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ArchiveOrderByInfo_From(src:any) : carriers.ArchiveOrderByInfo {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.Name= src.Name as string;
        res.Direction= enums.OrderBySortType[src.Direction];
        return res as carriers.ArchiveOrderByInfo;
}

export function Create_ArchiveOrderByInfoArray_From(src:any) : carriers.ArchiveOrderByInfo[] {
    let res : carriers.ArchiveOrderByInfo[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ArchiveOrderByInfo_From(src[i]);
        }
    }
    return res;
}

export function Create_ArchiveOrderByInfoArrayArray_From(src:any) : carriers.ArchiveOrderByInfo[][] {
    let res : carriers.ArchiveOrderByInfo[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ArchiveOrderByInfoArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ArchiveRestrictionGroup_From(src:any) : carriers.ArchiveRestrictionGroup {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.Name= src.Name as string;
        res.Description= src.Description as string;
        res.Rank= src.Rank as number;
        res.Restrictions= Create_ArchiveRestrictionInfoArray_From(src.Restrictions);
        return res as carriers.ArchiveRestrictionGroup;
}

export function Create_ArchiveRestrictionGroupArray_From(src:any) : carriers.ArchiveRestrictionGroup[] {
    let res : carriers.ArchiveRestrictionGroup[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ArchiveRestrictionGroup_From(src[i]);
        }
    }
    return res;
}

export function Create_ArchiveRestrictionGroupArrayArray_From(src:any) : carriers.ArchiveRestrictionGroup[][] {
    let res : carriers.ArchiveRestrictionGroup[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ArchiveRestrictionGroupArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ArchiveRestrictionInfo_From(src:any) : carriers.ArchiveRestrictionInfo {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.Name= src.Name as string;
        res.Operator= src.Operator as string;
        res.Values= src.Values as string[];
        res.DisplayValues= src.DisplayValues as string[];
        res.ColumnInfo= Create_ArchiveColumnInfo_From(src.ColumnInfo);
        res.IsActive= src.IsActive as boolean;
        res.SubRestrictions= Create_ArchiveRestrictionInfoArray_From(src.SubRestrictions);
        res.InterParenthesis= src.InterParenthesis as number;
        res.InterOperator= enums.InterRestrictionOperator[src.InterOperator];
        res.UniqueHash= src.UniqueHash as number;
        return res as carriers.ArchiveRestrictionInfo;
}

export function Create_ArchiveRestrictionInfoArray_From(src:any) : carriers.ArchiveRestrictionInfo[] {
    let res : carriers.ArchiveRestrictionInfo[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ArchiveRestrictionInfo_From(src[i]);
        }
    }
    return res;
}

export function Create_ArchiveRestrictionInfoArrayArray_From(src:any) : carriers.ArchiveRestrictionInfo[][] {
    let res : carriers.ArchiveRestrictionInfo[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ArchiveRestrictionInfoArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ExportArchiveResult_From(src:any) : carriers.ExportArchiveResult {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ExportArchiveResult = Create_Carrier_From(src) as carriers.ExportArchiveResult;
        
        res.BatchTaskId= src.BatchTaskId as number;
        res.FileName= src.FileName as string;
        res.Message= src.Message as string;
        return res as carriers.ExportArchiveResult;
}

export function Create_ExportArchiveResultArray_From(src:any) : carriers.ExportArchiveResult[] {
    let res : carriers.ExportArchiveResult[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ExportArchiveResult_From(src[i]);
        }
    }
    return res;
}

export function Create_ExportArchiveResultArrayArray_From(src:any) : carriers.ExportArchiveResult[][] {
    let res : carriers.ExportArchiveResult[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ExportArchiveResultArray_From(src[i]);
        }
    }
    return res;
}




export function Create_RelatedData_From(src:any) : carriers.RelatedData {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.Field= src.Field as string;
        res.FieldValue= Create_ArchiveColumnData_From(src.FieldValue);
        return res as carriers.RelatedData;
}

export function Create_RelatedDataArray_From(src:any) : carriers.RelatedData[] {
    let res : carriers.RelatedData[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RelatedData_From(src[i]);
        }
    }
    return res;
}

export function Create_RelatedDataArrayArray_From(src:any) : carriers.RelatedData[][] {
    let res : carriers.RelatedData[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RelatedDataArray_From(src[i]);
        }
    }
    return res;
}




















































































export function Create_AudienceConfigParameter_From(src:any) : carriers.AudienceConfigParameter {
        if( src === null || src === undefined )
            return null;
        let res : carriers.AudienceConfigParameter = Create_Carrier_From(src) as carriers.AudienceConfigParameter;
        
        res.AudienceLayoutId= src.AudienceLayoutId as number;
        res.Name= src.Name as string;
        res.Value= src.Value as string;
        res.CreatedDate= Create_Date_From(src.CreatedDate);
        res.UpdatedDate= Create_Date_From(src.UpdatedDate);
        res.CreatedBy= src.CreatedBy as string;
        res.UpdatedBy= src.UpdatedBy as string;
        return res as carriers.AudienceConfigParameter;
}

export function Create_AudienceConfigParameterArray_From(src:any) : carriers.AudienceConfigParameter[] {
    let res : carriers.AudienceConfigParameter[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_AudienceConfigParameter_From(src[i]);
        }
    }
    return res;
}

export function Create_AudienceConfigParameterArrayArray_From(src:any) : carriers.AudienceConfigParameter[][] {
    let res : carriers.AudienceConfigParameter[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_AudienceConfigParameterArray_From(src[i]);
        }
    }
    return res;
}





export function Create_AudienceLayoutEntity_From(src:any) : carriers.AudienceLayoutEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.AudienceLayoutEntity = Create_Carrier_From(src) as carriers.AudienceLayoutEntity;
        
        res.AudienceLayoutId= src.AudienceLayoutId as number;
        res.InstanceLayout= src.InstanceLayout as string;
        res.InstanceName= src.InstanceName as string;
        res.CreatedDate= Create_Date_From(src.CreatedDate);
        res.UpdatedDate= Create_Date_From(src.UpdatedDate);
        res.CreatedBy= Create_Associate_From(src.CreatedBy);
        res.UpdatedBy= Create_Associate_From(src.UpdatedBy);
        return res as carriers.AudienceLayoutEntity;
}

export function Create_AudienceLayoutEntityArray_From(src:any) : carriers.AudienceLayoutEntity[] {
    let res : carriers.AudienceLayoutEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_AudienceLayoutEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_AudienceLayoutEntityArrayArray_From(src:any) : carriers.AudienceLayoutEntity[][] {
    let res : carriers.AudienceLayoutEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_AudienceLayoutEntityArray_From(src[i]);
        }
    }
    return res;
}







export function Create_Preference_From(src:any) : carriers.Preference {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Preference = Create_Carrier_From(src) as carriers.Preference;
        
        res.Level= enums.PreferenceLevel[src.Level];
        res.RawValue= src.RawValue as string;
        res.Specification= Create_PreferenceSpec_From(src.Specification);
        res.DisplayValue= src.DisplayValue as string;
        res.DisplayTooltip= src.DisplayTooltip as string;
        res.DisplayType= enums.PrefDescValueType[src.DisplayType];
        res.TabOrder= Create_TabOrder_From(src.TabOrder);
        res.TargetId= src.TargetId as number;
        res.PrefDescId= src.PrefDescId as number;
        res.TableName= src.TableName as string;
        res.UserPreferenceId= src.UserPreferenceId as number;
        return res as carriers.Preference;
}

export function Create_PreferenceArray_From(src:any) : carriers.Preference[] {
    let res : carriers.Preference[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Preference_From(src[i]);
        }
    }
    return res;
}

export function Create_PreferenceArrayArray_From(src:any) : carriers.Preference[][] {
    let res : carriers.Preference[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PreferenceArray_From(src[i]);
        }
    }
    return res;
}




export function Create_PreferenceDescription_From(src:any) : carriers.PreferenceDescription {
        if( src === null || src === undefined )
            return null;
        let res : carriers.PreferenceDescription = Create_Carrier_From(src) as carriers.PreferenceDescription;
        
        res.PrefDescId= src.PrefDescId as number;
        res.Section= src.Section as string;
        res.Key= src.Key as string;
        res.Name= src.Name as string;
        res.ValueType= enums.PrefDescValueType[src.ValueType];
        res.MaxLevel= enums.PreferenceLevel[src.MaxLevel];
        res.SysMaxLevel= enums.PreferenceLevel[src.SysMaxLevel];
        res.AccessFlags= Create_PrefDescAccessFlags_From(src.AccessFlags) as enums.PrefDescAccessFlags;
        res.Description= src.Description as string;
        res.IsBuiltin= src.IsBuiltin as boolean;
        res.TableName= src.TableName as string;
        res.UserDefinedListId= src.UserDefinedListId as number;
        res.Rank= src.Rank as number;
        res.SubGroup= src.SubGroup as string;
        res.MinLevel= src.MinLevel as number;
        res.MaxValue= src.MaxValue as number;
        res.MinValue= src.MinValue as number;
        res.RequiredLicense= src.RequiredLicense as string;
        return res as carriers.PreferenceDescription;
}

export function Create_PreferenceDescriptionArray_From(src:any) : carriers.PreferenceDescription[] {
    let res : carriers.PreferenceDescription[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PreferenceDescription_From(src[i]);
        }
    }
    return res;
}

export function Create_PreferenceDescriptionArrayArray_From(src:any) : carriers.PreferenceDescription[][] {
    let res : carriers.PreferenceDescription[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PreferenceDescriptionArray_From(src[i]);
        }
    }
    return res;
}




export function Create_PreferenceDescriptionLine_From(src:any) : carriers.PreferenceDescriptionLine {
        if( src === null || src === undefined )
            return null;
        let res : carriers.PreferenceDescriptionLine = Create_Carrier_From(src) as carriers.PreferenceDescriptionLine;
        
        res.PrefDescLineId= src.PrefDescLineId as number;
        res.PrefDescId= src.PrefDescId as number;
        res.PrefValue= src.PrefValue as string;
        res.PrefShowValue= src.PrefShowValue as string;
        res.Description= src.Description as string;
        res.IsBuiltin= src.IsBuiltin as boolean;
        return res as carriers.PreferenceDescriptionLine;
}

export function Create_PreferenceDescriptionLineArray_From(src:any) : carriers.PreferenceDescriptionLine[] {
    let res : carriers.PreferenceDescriptionLine[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PreferenceDescriptionLine_From(src[i]);
        }
    }
    return res;
}

export function Create_PreferenceDescriptionLineArrayArray_From(src:any) : carriers.PreferenceDescriptionLine[][] {
    let res : carriers.PreferenceDescriptionLine[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PreferenceDescriptionLineArray_From(src[i]);
        }
    }
    return res;
}





export function Create_PreferenceSpec_From(src:any) : carriers.PreferenceSpec {
        if( src === null || src === undefined )
            return null;
        let res : carriers.PreferenceSpec = Create_Carrier_From(src) as carriers.PreferenceSpec;
        
        res.Section= src.Section as string;
        res.Key= src.Key as string;
        return res as carriers.PreferenceSpec;
}

export function Create_PreferenceSpecArray_From(src:any) : carriers.PreferenceSpec[] {
    let res : carriers.PreferenceSpec[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PreferenceSpec_From(src[i]);
        }
    }
    return res;
}

export function Create_PreferenceSpecArrayArray_From(src:any) : carriers.PreferenceSpec[][] {
    let res : carriers.PreferenceSpec[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PreferenceSpecArray_From(src[i]);
        }
    }
    return res;
}




export function Create_TabOrder_From(src:any) : carriers.TabOrder {
        if( src === null || src === undefined )
            return null;
        let res : carriers.TabOrder = Create_Carrier_From(src) as carriers.TabOrder;
        
        res.TabOrderId= src.TabOrderId as number;
        res.TabName= src.TabName as string;
        res.Order= src.Order as string;
        res.AssociateId= src.AssociateId as number;
        return res as carriers.TabOrder;
}

export function Create_TabOrderArray_From(src:any) : carriers.TabOrder[] {
    let res : carriers.TabOrder[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TabOrder_From(src[i]);
        }
    }
    return res;
}

export function Create_TabOrderArrayArray_From(src:any) : carriers.TabOrder[][] {
    let res : carriers.TabOrder[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TabOrderArray_From(src[i]);
        }
    }
    return res;
}


















export function Create_CheckLicenseStatusResult_From(src:any) : carriers.CheckLicenseStatusResult {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.LicenseStatus= enums.LicenseStatus[src.LicenseStatus];
        res.Message= src.Message as string;
        res.Url= src.Url as string;
        return res as carriers.CheckLicenseStatusResult;
}

export function Create_CheckLicenseStatusResultArray_From(src:any) : carriers.CheckLicenseStatusResult[] {
    let res : carriers.CheckLicenseStatusResult[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CheckLicenseStatusResult_From(src[i]);
        }
    }
    return res;
}

export function Create_CheckLicenseStatusResultArrayArray_From(src:any) : carriers.CheckLicenseStatusResult[][] {
    let res : carriers.CheckLicenseStatusResult[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CheckLicenseStatusResultArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ExtendedLicenseInfo_From(src:any) : carriers.ExtendedLicenseInfo {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.Reason= src.Reason as string;
        res.CanBeActivated= src.CanBeActivated as boolean;
        res.New= Create_LicenseInfo_From(src.New);
        res.Current= Create_LicenseInfo_From(src.Current);
        res.ExtendedModuleLicenses= Create_ExtendedModuleLicenseArray_From(src.ExtendedModuleLicenses);
        res.AccumulatedNextCheckDate= Create_Date_From(src.AccumulatedNextCheckDate);
        return res as carriers.ExtendedLicenseInfo;
}

export function Create_ExtendedLicenseInfoArray_From(src:any) : carriers.ExtendedLicenseInfo[] {
    let res : carriers.ExtendedLicenseInfo[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ExtendedLicenseInfo_From(src[i]);
        }
    }
    return res;
}

export function Create_ExtendedLicenseInfoArrayArray_From(src:any) : carriers.ExtendedLicenseInfo[][] {
    let res : carriers.ExtendedLicenseInfo[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ExtendedLicenseInfoArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ExtendedModuleLicense_From(src:any) : carriers.ExtendedModuleLicense {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.New= Create_ModuleLicense_From(src.New);
        res.Current= Create_ModuleLicense_From(src.Current);
        res.NumberOfLicensesInUse= src.NumberOfLicensesInUse as number;
        res.NumberOfLicensesFree= src.NumberOfLicensesFree as number;
        res.NumberOfLicensesAdded= src.NumberOfLicensesAdded as number;
        res.NumberOfLicensesNewTotal= src.NumberOfLicensesNewTotal as number;
        res.NumberOfLicensesNewFree= src.NumberOfLicensesNewFree as number;
        res.NumberOfLicensesTotal= src.NumberOfLicensesTotal as number;
        return res as carriers.ExtendedModuleLicense;
}

export function Create_ExtendedModuleLicenseArray_From(src:any) : carriers.ExtendedModuleLicense[] {
    let res : carriers.ExtendedModuleLicense[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ExtendedModuleLicense_From(src[i]);
        }
    }
    return res;
}

export function Create_ExtendedModuleLicenseArrayArray_From(src:any) : carriers.ExtendedModuleLicense[][] {
    let res : carriers.ExtendedModuleLicense[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ExtendedModuleLicenseArray_From(src[i]);
        }
    }
    return res;
}




export function Create_License_From(src:any) : carriers.License {
        if( src === null || src === undefined )
            return null;
        let res : carriers.License = Create_Carrier_From(src) as carriers.License;
        
        return res as carriers.License;
}

export function Create_LicenseArray_From(src:any) : carriers.License[] {
    let res : carriers.License[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_License_From(src[i]);
        }
    }
    return res;
}

export function Create_LicenseArrayArray_From(src:any) : carriers.License[][] {
    let res : carriers.License[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_LicenseArray_From(src[i]);
        }
    }
    return res;
}




export function Create_LicenseInfo_From(src:any) : carriers.LicenseInfo {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.CompanyName= src.CompanyName as string;
        res.SerialNr= src.SerialNr as string;
        res.OwnerName= src.OwnerName as string;
        res.OwnerDescription= src.OwnerDescription as string;
        res.NextCheckDate= Create_Date_From(src.NextCheckDate);
        res.MaintenanceDate= Create_Date_From(src.MaintenanceDate);
        res.AdminWarningDate= Create_Date_From(src.AdminWarningDate);
        res.ExpiryDate= Create_Date_From(src.ExpiryDate);
        res.GraceDate= Create_Date_From(src.GraceDate);
        res.ExtraFlags= src.ExtraFlags as number;
        res.LicenseUrl= src.LicenseUrl as string;
        res.LicenseVersion= src.LicenseVersion as string;
        res.DeploymentType= src.DeploymentType as number;
        res.ProductType= src.ProductType as string;
        res.ProductDescription= src.ProductDescription as string;
        res.ModuleLicenses= Create_ModuleLicenseArray_From(src.ModuleLicenses);
        res.PublicKey= Create_SignedPublicKey_From(src.PublicKey);
        res.Signature= src.Signature as string;
        return res as carriers.LicenseInfo;
}

export function Create_LicenseInfoArray_From(src:any) : carriers.LicenseInfo[] {
    let res : carriers.LicenseInfo[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_LicenseInfo_From(src[i]);
        }
    }
    return res;
}

export function Create_LicenseInfoArrayArray_From(src:any) : carriers.LicenseInfo[][] {
    let res : carriers.LicenseInfo[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_LicenseInfoArray_From(src[i]);
        }
    }
    return res;
}




export function Create_LicenseOwner_From(src:any) : carriers.LicenseOwner {
        if( src === null || src === undefined )
            return null;
        let res : carriers.LicenseOwner = Create_Carrier_From(src) as carriers.LicenseOwner;
        
        res.Name= src.Name as string;
        res.Description= src.Description as string;
        res.RestrictedModuleLicenses= Create_ModuleLicenseLinkArray_From(src.RestrictedModuleLicenses);
        res.UnrestrictedModuleLicenses= Create_ModuleLicenseLinkArray_From(src.UnrestrictedModuleLicenses);
        return res as carriers.LicenseOwner;
}

export function Create_LicenseOwnerArray_From(src:any) : carriers.LicenseOwner[] {
    let res : carriers.LicenseOwner[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_LicenseOwner_From(src[i]);
        }
    }
    return res;
}

export function Create_LicenseOwnerArrayArray_From(src:any) : carriers.LicenseOwner[][] {
    let res : carriers.LicenseOwner[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_LicenseOwnerArray_From(src[i]);
        }
    }
    return res;
}





export function Create_LicenseResult_From(src:any) : carriers.LicenseResult {
        if( src === null || src === undefined )
            return null;
        let res : carriers.LicenseResult = Create_Carrier_From(src) as carriers.LicenseResult;
        
        res.Succeeded= src.Succeeded as boolean;
        res.Reason= src.Reason as string;
        return res as carriers.LicenseResult;
}

export function Create_LicenseResultArray_From(src:any) : carriers.LicenseResult[] {
    let res : carriers.LicenseResult[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_LicenseResult_From(src[i]);
        }
    }
    return res;
}

export function Create_LicenseResultArrayArray_From(src:any) : carriers.LicenseResult[][] {
    let res : carriers.LicenseResult[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_LicenseResultArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ModuleLicense_From(src:any) : carriers.ModuleLicense {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.OwnerName= src.OwnerName as string;
        res.ModuleName= src.ModuleName as string;
        res.ModuleDescription= src.ModuleDescription as string;
        res.ModuleTooltip= src.ModuleTooltip as string;
        res.ModuleVersion= src.ModuleVersion as string;
        res.LicenseType= enums.LicenseType[src.LicenseType];
        res.Unrestricted= src.Unrestricted as boolean;
        res.AllowedUserType= enums.UserType[src.AllowedUserType];
        res.NumberOfLicenses= src.NumberOfLicenses as number;
        res.ExtraFlags= src.ExtraFlags as number;
        res.ExtraInfo= src.ExtraInfo as string;
        res.SortOrder= src.SortOrder as number;
        res.IsHidden= src.IsHidden as boolean;
        res.PrerequisiteModuleName= src.PrerequisiteModuleName as string;
        res.Signature= src.Signature as string;
        return res as carriers.ModuleLicense;
}

export function Create_ModuleLicenseArray_From(src:any) : carriers.ModuleLicense[] {
    let res : carriers.ModuleLicense[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ModuleLicense_From(src[i]);
        }
    }
    return res;
}

export function Create_ModuleLicenseArrayArray_From(src:any) : carriers.ModuleLicense[][] {
    let res : carriers.ModuleLicense[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ModuleLicenseArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ModuleLicenseLink_From(src:any) : carriers.ModuleLicenseLink {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ModuleLicenseLink = Create_Carrier_From(src) as carriers.ModuleLicenseLink;
        
        res.Unrestricted= src.Unrestricted as boolean;
        res.Total= src.Total as number;
        res.Tooltip= src.Tooltip as string;
        res.CanAssign= src.CanAssign as boolean;
        res.Free= src.Free as number;
        res.InUse= src.InUse as number;
        res.IsHidden= src.IsHidden as boolean;
        res.Assigned= src.Assigned as boolean;
        res.ModuleLicenseId= src.ModuleLicenseId as number;
        res.Name= src.Name as string;
        res.Description= src.Description as string;
        res.PrerequisiteModuleName= src.PrerequisiteModuleName as string;
        res.SortOrder= src.SortOrder as number;
        res.ExtraFlags= src.ExtraFlags as number;
        return res as carriers.ModuleLicenseLink;
}

export function Create_ModuleLicenseLinkArray_From(src:any) : carriers.ModuleLicenseLink[] {
    let res : carriers.ModuleLicenseLink[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ModuleLicenseLink_From(src[i]);
        }
    }
    return res;
}

export function Create_ModuleLicenseLinkArrayArray_From(src:any) : carriers.ModuleLicenseLink[][] {
    let res : carriers.ModuleLicenseLink[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ModuleLicenseLinkArray_From(src[i]);
        }
    }
    return res;
}





export function Create_SignedPublicKey_From(src:any) : carriers.SignedPublicKey {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.OwnerName= src.OwnerName as string;
        res.SignDate= Create_Date_From(src.SignDate);
        res.ExpiryDate= Create_Date_From(src.ExpiryDate);
        res.Key= Create_DSAParameters_From(src.Key);
        res.Signature= src.Signature as string;
        return res as carriers.SignedPublicKey;
}

export function Create_SignedPublicKeyArray_From(src:any) : carriers.SignedPublicKey[] {
    let res : carriers.SignedPublicKey[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SignedPublicKey_From(src[i]);
        }
    }
    return res;
}

export function Create_SignedPublicKeyArrayArray_From(src:any) : carriers.SignedPublicKey[][] {
    let res : carriers.SignedPublicKey[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SignedPublicKeyArray_From(src[i]);
        }
    }
    return res;
}















export function Create_AccessGatewayInfo_From(src:any) : carriers.AccessGatewayInfo {
        if( src === null || src === undefined )
            return null;
        let res : carriers.AccessGatewayInfo = Create_Carrier_From(src) as carriers.AccessGatewayInfo;
        
        res.ClientId= src.ClientId as string;
        res.RedirectUri= src.RedirectUri as string;
        return res as carriers.AccessGatewayInfo;
}

export function Create_AccessGatewayInfoArray_From(src:any) : carriers.AccessGatewayInfo[] {
    let res : carriers.AccessGatewayInfo[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_AccessGatewayInfo_From(src[i]);
        }
    }
    return res;
}

export function Create_AccessGatewayInfoArrayArray_From(src:any) : carriers.AccessGatewayInfo[][] {
    let res : carriers.AccessGatewayInfo[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_AccessGatewayInfoArray_From(src[i]);
        }
    }
    return res;
}




export function Create_Credential_From(src:any) : carriers.Credential {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Credential = Create_Carrier_From(src) as carriers.Credential;
        
        res.Type= Create_CredentialType_From(src.Type);
        res.Value= src.Value as string;
        res.DisplayValue= src.DisplayValue as string;
        return res as carriers.Credential;
}

export function Create_CredentialArray_From(src:any) : carriers.Credential[] {
    let res : carriers.Credential[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Credential_From(src[i]);
        }
    }
    return res;
}

export function Create_CredentialArrayArray_From(src:any) : carriers.Credential[][] {
    let res : carriers.Credential[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CredentialArray_From(src[i]);
        }
    }
    return res;
}





export function Create_CredentialsGroup_From(src:any) : carriers.CredentialsGroup {
        if( src === null || src === undefined )
            return null;
        let res : carriers.CredentialsGroup = Create_Carrier_From(src) as carriers.CredentialsGroup;
        
        res.Name= src.Name as string;
        res.DisplayName= src.DisplayName as string;
        return res as carriers.CredentialsGroup;
}

export function Create_CredentialsGroupArray_From(src:any) : carriers.CredentialsGroup[] {
    let res : carriers.CredentialsGroup[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CredentialsGroup_From(src[i]);
        }
    }
    return res;
}

export function Create_CredentialsGroupArrayArray_From(src:any) : carriers.CredentialsGroup[][] {
    let res : carriers.CredentialsGroup[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CredentialsGroupArray_From(src[i]);
        }
    }
    return res;
}




export function Create_CredentialsGroupUsers_From(src:any) : carriers.CredentialsGroupUsers {
        if( src === null || src === undefined )
            return null;
        let res : carriers.CredentialsGroupUsers = Create_Carrier_From(src) as carriers.CredentialsGroupUsers;
        
        res.Headings= src.Headings as string[];
        res.Users= Create_CredentialUserArray_From(src.Users);
        return res as carriers.CredentialsGroupUsers;
}

export function Create_CredentialsGroupUsersArray_From(src:any) : carriers.CredentialsGroupUsers[] {
    let res : carriers.CredentialsGroupUsers[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CredentialsGroupUsers_From(src[i]);
        }
    }
    return res;
}

export function Create_CredentialsGroupUsersArrayArray_From(src:any) : carriers.CredentialsGroupUsers[][] {
    let res : carriers.CredentialsGroupUsers[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CredentialsGroupUsersArray_From(src[i]);
        }
    }
    return res;
}




export function Create_CredentialType_From(src:any) : carriers.CredentialType {
        if( src === null || src === undefined )
            return null;
        let res : carriers.CredentialType = Create_Carrier_From(src) as carriers.CredentialType;
        
        res.DisplayType= src.DisplayType as string;
        res.Type= src.Type as string;
        res.Description= src.Description as string;
        res.ValueControl= enums.CredentialControlType[src.ValueControl];
        res.CanCreatePerson= src.CanCreatePerson as boolean;
        res.IsUserNameSupported= src.IsUserNameSupported as boolean;
        return res as carriers.CredentialType;
}

export function Create_CredentialTypeArray_From(src:any) : carriers.CredentialType[] {
    let res : carriers.CredentialType[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CredentialType_From(src[i]);
        }
    }
    return res;
}

export function Create_CredentialTypeArrayArray_From(src:any) : carriers.CredentialType[][] {
    let res : carriers.CredentialType[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CredentialTypeArray_From(src[i]);
        }
    }
    return res;
}




export function Create_CredentialUser_From(src:any) : carriers.CredentialUser {
        if( src === null || src === undefined )
            return null;
        let res : carriers.CredentialUser = Create_Carrier_From(src) as carriers.CredentialUser;
        
        res.Value= src.Value as string;
        res.DisplayValue= src.DisplayValue as string;
        res.Columns= src.Columns as string[];
        res.CanCreatePerson= src.CanCreatePerson as boolean;
        return res as carriers.CredentialUser;
}

export function Create_CredentialUserArray_From(src:any) : carriers.CredentialUser[] {
    let res : carriers.CredentialUser[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CredentialUser_From(src[i]);
        }
    }
    return res;
}

export function Create_CredentialUserArrayArray_From(src:any) : carriers.CredentialUser[][] {
    let res : carriers.CredentialUser[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CredentialUserArray_From(src[i]);
        }
    }
    return res;
}





export function Create_DataRight_From(src:any) : carriers.DataRight {
        if( src === null || src === undefined )
            return null;
        let res : carriers.DataRight = Create_Carrier_From(src) as carriers.DataRight;
        
        res.Value= src.Value as string;
        res.Description= src.Description as string;
        return res as carriers.DataRight;
}

export function Create_DataRightArray_From(src:any) : carriers.DataRight[] {
    let res : carriers.DataRight[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DataRight_From(src[i]);
        }
    }
    return res;
}

export function Create_DataRightArrayArray_From(src:any) : carriers.DataRight[][] {
    let res : carriers.DataRight[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DataRightArray_From(src[i]);
        }
    }
    return res;
}




export function Create_DataRights_From(src:any) : carriers.DataRights {
        if( src === null || src === undefined )
            return null;
        let res : carriers.DataRights = Create_Carrier_From(src) as carriers.DataRights;
        
        res.ColumnsInfo= Create_RelationToOwnerArray_From(src.ColumnsInfo);
        res.RowsInfo= Create_EntityNameArray_From(src.RowsInfo);
        res.Rights= Create_DataRightArrayArray_From(src.Rights);
        return res as carriers.DataRights;
}

export function Create_DataRightsArray_From(src:any) : carriers.DataRights[] {
    let res : carriers.DataRights[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DataRights_From(src[i]);
        }
    }
    return res;
}

export function Create_DataRightsArrayArray_From(src:any) : carriers.DataRights[][] {
    let res : carriers.DataRights[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DataRightsArray_From(src[i]);
        }
    }
    return res;
}






export function Create_EntityName_From(src:any) : carriers.EntityName {
        if( src === null || src === undefined )
            return null;
        let res : carriers.EntityName = Create_Carrier_From(src) as carriers.EntityName;
        
        res.TableName= src.TableName as string;
        res.TableDescription= src.TableDescription as string;
        return res as carriers.EntityName;
}

export function Create_EntityNameArray_From(src:any) : carriers.EntityName[] {
    let res : carriers.EntityName[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EntityName_From(src[i]);
        }
    }
    return res;
}

export function Create_EntityNameArrayArray_From(src:any) : carriers.EntityName[][] {
    let res : carriers.EntityName[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EntityNameArray_From(src[i]);
        }
    }
    return res;
}





export function Create_RelationToOwner_From(src:any) : carriers.RelationToOwner {
        if( src === null || src === undefined )
            return null;
        let res : carriers.RelationToOwner = Create_Carrier_From(src) as carriers.RelationToOwner;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.RelationToOwner;
}

export function Create_RelationToOwnerArray_From(src:any) : carriers.RelationToOwner[] {
    let res : carriers.RelationToOwner[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RelationToOwner_From(src[i]);
        }
    }
    return res;
}

export function Create_RelationToOwnerArrayArray_From(src:any) : carriers.RelationToOwner[][] {
    let res : carriers.RelationToOwner[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RelationToOwnerArray_From(src[i]);
        }
    }
    return res;
}





export function Create_ResolvedUser_From(src:any) : carriers.ResolvedUser {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ResolvedUser = Create_Carrier_From(src) as carriers.ResolvedUser;
        
        res.User= Create_User_From(src.User);
        res.PersonCreated= src.PersonCreated as boolean;
        return res as carriers.ResolvedUser;
}

export function Create_ResolvedUserArray_From(src:any) : carriers.ResolvedUser[] {
    let res : carriers.ResolvedUser[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ResolvedUser_From(src[i]);
        }
    }
    return res;
}

export function Create_ResolvedUserArrayArray_From(src:any) : carriers.ResolvedUser[][] {
    let res : carriers.ResolvedUser[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ResolvedUserArray_From(src[i]);
        }
    }
    return res;
}




export function Create_Role_From(src:any) : carriers.Role {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Role = Create_Carrier_From(src) as carriers.Role;
        
        res.Id= src.Id;
        res.Value= src.Value;
        res.Tooltip= src.Tooltip;
        return res as carriers.Role;
}

export function Create_RoleArray_From(src:any) : carriers.Role[] {
    let res : carriers.Role[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Role_From(src[i]);
        }
    }
    return res;
}

export function Create_RoleArrayArray_From(src:any) : carriers.Role[][] {
    let res : carriers.Role[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RoleArray_From(src[i]);
        }
    }
    return res;
}




export function Create_RoleEntity_From(src:any) : carriers.RoleEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.RoleEntity = Create_Carrier_From(src) as carriers.RoleEntity;
        
        res.RoleId= src.RoleId as number;
        res.Name= src.Name as string;
        res.Tooltip= src.Tooltip as string;
        res.RoleType= enums.RoleType[src.RoleType];
        res.Deleted= src.Deleted as number;
        res.Rank= src.Rank as number;
        res.Created= Create_Date_From(src.Created);
        res.UseCategories= src.UseCategories as number;
        res.CreatedBy= Create_Associate_From(src.CreatedBy);
        res.Updated= Create_Date_From(src.Updated);
        res.UpdatedBy= Create_Associate_From(src.UpdatedBy);
        res.DataRights= Create_DataRights_From(src.DataRights);
        return res as carriers.RoleEntity;
}

export function Create_RoleEntityArray_From(src:any) : carriers.RoleEntity[] {
    let res : carriers.RoleEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RoleEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_RoleEntityArrayArray_From(src:any) : carriers.RoleEntity[][] {
    let res : carriers.RoleEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RoleEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ServiceAuth_From(src:any) : carriers.ServiceAuth {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ServiceAuth = Create_Carrier_From(src) as carriers.ServiceAuth;
        
        res.ServiceAuthId= src.ServiceAuthId as number;
        res.Server= src.Server as string;
        res.Port= src.Port as number;
        res.AuthType= src.AuthType as string;
        res.Username= src.Username as string;
        res.Password= src.Password as string;
        return res as carriers.ServiceAuth;
}

export function Create_ServiceAuthArray_From(src:any) : carriers.ServiceAuth[] {
    let res : carriers.ServiceAuth[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ServiceAuth_From(src[i]);
        }
    }
    return res;
}

export function Create_ServiceAuthArrayArray_From(src:any) : carriers.ServiceAuth[][] {
    let res : carriers.ServiceAuth[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ServiceAuthArray_From(src[i]);
        }
    }
    return res;
}




export function Create_TokenManagementInfo_From(src:any) : carriers.TokenManagementInfo {
        if( src === null || src === undefined )
            return null;
        let res : carriers.TokenManagementInfo = Create_Carrier_From(src) as carriers.TokenManagementInfo;
        
        res.Provider= src.Provider as string;
        res.AccessToken= src.AccessToken as string;
        res.RefreshToken= src.RefreshToken as string;
        return res as carriers.TokenManagementInfo;
}

export function Create_TokenManagementInfoArray_From(src:any) : carriers.TokenManagementInfo[] {
    let res : carriers.TokenManagementInfo[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TokenManagementInfo_From(src[i]);
        }
    }
    return res;
}

export function Create_TokenManagementInfoArrayArray_From(src:any) : carriers.TokenManagementInfo[][] {
    let res : carriers.TokenManagementInfo[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TokenManagementInfoArray_From(src[i]);
        }
    }
    return res;
}




export function Create_UntrustedCredentials_From(src:any) : carriers.UntrustedCredentials {
        if( src === null || src === undefined )
            return null;
        let res : carriers.UntrustedCredentials = Create_Carrier_From(src) as carriers.UntrustedCredentials;
        
        res.ValidFrom= Create_Date_From(src.ValidFrom);
        res.ValidTo= Create_Date_From(src.ValidTo);
        res.Comment= src.Comment as string;
        res.SecretValue= src.SecretValue as string;
        res.PublicValue= src.PublicValue as string;
        res.IsActive= src.IsActive as boolean;
        return res as carriers.UntrustedCredentials;
}

export function Create_UntrustedCredentialsArray_From(src:any) : carriers.UntrustedCredentials[] {
    let res : carriers.UntrustedCredentials[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_UntrustedCredentials_From(src[i]);
        }
    }
    return res;
}

export function Create_UntrustedCredentialsArrayArray_From(src:any) : carriers.UntrustedCredentials[][] {
    let res : carriers.UntrustedCredentials[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_UntrustedCredentialsArray_From(src[i]);
        }
    }
    return res;
}




export function Create_User_From(src:any) : carriers.User {
        if( src === null || src === undefined )
            return null;
        let res : carriers.User = Create_Carrier_From(src) as carriers.User;
        
        res.AssociateId= src.AssociateId as number;
        res.Name= src.Name as string;
        res.Rank= src.Rank as number;
        res.Tooltip= src.Tooltip as string;
        res.LicenseOwners= Create_LicenseOwnerArray_From(src.LicenseOwners);
        res.Role= Create_Role_From(src.Role);
        res.UserGroup= Create_UserGroup_From(src.UserGroup);
        res.OtherGroups= Create_UserGroupArray_From(src.OtherGroups);
        res.Person= Create_Person_From(src.Person);
        res.Deleted= src.Deleted as boolean;
        res.Lastlogin= Create_Date_From(src.Lastlogin);
        res.Lastlogout= Create_Date_From(src.Lastlogout);
        res.EjUserId= src.EjUserId as number;
        res.RequestSignature= src.RequestSignature as string;
        res.Type= enums.UserType[src.Type];
        res.IsPersonRetired= src.IsPersonRetired as boolean;
        res.IsOnTravel= src.IsOnTravel as boolean;
        res.Credentials= Create_CredentialArray_From(src.Credentials);
        res.UserName= src.UserName as string;
        res.TicketCategories= Create_MDOListItemArray_From(src.TicketCategories);
        res.NickName= src.NickName as string;
        res.WaitingForApproval= src.WaitingForApproval as boolean;
        res.ExtraFields= src.ExtraFields as carriers.StringDictionary;
        res.CustomFields= src.CustomFields as carriers.StringDictionary;
        res.PostSaveCommands= Create_CustomCommandArray_From(src.PostSaveCommands);
        return res as carriers.User;
}

export function Create_UserArray_From(src:any) : carriers.User[] {
    let res : carriers.User[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_User_From(src[i]);
        }
    }
    return res;
}

export function Create_UserArrayArray_From(src:any) : carriers.User[][] {
    let res : carriers.User[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_UserArray_From(src[i]);
        }
    }
    return res;
}




export function Create_UserGroup_From(src:any) : carriers.UserGroup {
        if( src === null || src === undefined )
            return null;
        let res : carriers.UserGroup = Create_Carrier_From(src) as carriers.UserGroup;
        
        res.Value= src.Value as string;
        res.Tooltip= src.Tooltip as string;
        res.Id= src.Id as number;
        res.Rank= src.Rank as number;
        res.Deleted= src.Deleted as boolean;
        return res as carriers.UserGroup;
}

export function Create_UserGroupArray_From(src:any) : carriers.UserGroup[] {
    let res : carriers.UserGroup[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_UserGroup_From(src[i]);
        }
    }
    return res;
}

export function Create_UserGroupArrayArray_From(src:any) : carriers.UserGroup[][] {
    let res : carriers.UserGroup[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_UserGroupArray_From(src[i]);
        }
    }
    return res;
}





export function Create_UserInfo_From(src:any) : carriers.UserInfo {
        if( src === null || src === undefined )
            return null;
        let res : carriers.UserInfo = Create_Carrier_From(src) as carriers.UserInfo;
        
        res.Deleted= src.Deleted as boolean;
        res.UserInfoId= src.UserInfoId as number;
        res.UserName= src.UserName as string;
        res.PersonId= src.PersonId as number;
        res.Rank= src.Rank as number;
        res.Tooltip= src.Tooltip as string;
        res.UserGroupId= src.UserGroupId as number;
        res.EjUserId= src.EjUserId as number;
        res.UserType= enums.UserType[src.UserType];
        res.GrantedLicenses= src.GrantedLicenses as string[];
        res.CanLogon= src.CanLogon as boolean;
        res.RoleName= src.RoleName as string;
        res.RoleTooltip= src.RoleTooltip as string;
        res.UserGroupName= src.UserGroupName as string;
        res.UserGroupTooltip= src.UserGroupTooltip as string;
        return res as carriers.UserInfo;
}

export function Create_UserInfoArray_From(src:any) : carriers.UserInfo[] {
    let res : carriers.UserInfo[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_UserInfo_From(src[i]);
        }
    }
    return res;
}

export function Create_UserInfoArrayArray_From(src:any) : carriers.UserInfo[][] {
    let res : carriers.UserInfo[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_UserInfoArray_From(src[i]);
        }
    }
    return res;
}





export function Create_UserPresenceStatus_From(src:any) : carriers.UserPresenceStatus {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.Status= enums.EjUserStatus[src.Status];
        res.Message= src.Message as string;
        return res as carriers.UserPresenceStatus;
}

export function Create_UserPresenceStatusArray_From(src:any) : carriers.UserPresenceStatus[] {
    let res : carriers.UserPresenceStatus[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_UserPresenceStatus_From(src[i]);
        }
    }
    return res;
}

export function Create_UserPresenceStatusArrayArray_From(src:any) : carriers.UserPresenceStatus[][] {
    let res : carriers.UserPresenceStatus[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_UserPresenceStatusArray_From(src[i]);
        }
    }
    return res;
}




export function Create_UserValidationResult_From(src:any) : carriers.UserValidationResult {
        if( src === null || src === undefined )
            return null;
        let res : carriers.UserValidationResult = Create_Carrier_From(src) as carriers.UserValidationResult;
        
        res.Reason= src.Reason as string;
        res.Result= src.Result as boolean;
        return res as carriers.UserValidationResult;
}

export function Create_UserValidationResultArray_From(src:any) : carriers.UserValidationResult[] {
    let res : carriers.UserValidationResult[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_UserValidationResult_From(src[i]);
        }
    }
    return res;
}

export function Create_UserValidationResultArrayArray_From(src:any) : carriers.UserValidationResult[][] {
    let res : carriers.UserValidationResult[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_UserValidationResultArray_From(src[i]);
        }
    }
    return res;
}












export function Create_Area_From(src:any) : carriers.Area {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Area = Create_Carrier_From(src) as carriers.Area;
        
        res.AreaId= src.AreaId as number;
        res.Name= src.Name as string;
        res.MaxDataAge= src.MaxDataAge as number;
        res.NumberOfUsers= src.NumberOfUsers as number;
        res.NumberOfLogins= src.NumberOfLogins as number;
        res.FreetextEnabeled= src.FreetextEnabeled as boolean;
        return res as carriers.Area;
}

export function Create_AreaArray_From(src:any) : carriers.Area[] {
    let res : carriers.Area[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Area_From(src[i]);
        }
    }
    return res;
}

export function Create_AreaArrayArray_From(src:any) : carriers.Area[][] {
    let res : carriers.Area[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_AreaArray_From(src[i]);
        }
    }
    return res;
}





export function Create_Satellite_From(src:any) : carriers.Satellite {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Satellite = Create_Carrier_From(src) as carriers.Satellite;
        
        res.SatelliteId= src.SatelliteId as number;
        res.Created= Create_Date_From(src.Created);
        res.CreatedBy= Create_Associate_From(src.CreatedBy);
        res.Updated= Create_Date_From(src.Updated);
        res.UpdatedBy= Create_Associate_From(src.UpdatedBy);
        res.Contact= Create_Contact_From(src.Contact);
        res.Area= Create_Area_From(src.Area);
        res.LicenseOwners= Create_LicenseOwnerArray_From(src.LicenseOwners);
        return res as carriers.Satellite;
}

export function Create_SatelliteArray_From(src:any) : carriers.Satellite[] {
    let res : carriers.Satellite[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Satellite_From(src[i]);
        }
    }
    return res;
}

export function Create_SatelliteArrayArray_From(src:any) : carriers.Satellite[][] {
    let res : carriers.Satellite[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SatelliteArray_From(src[i]);
        }
    }
    return res;
}




export function Create_PreferredTimeZone_From(src:any) : carriers.PreferredTimeZone {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.PreferenceId= src.PreferenceId as number;
        res.TZLocationId= src.TZLocationId as number;
        res.LocationCode= src.LocationCode as string;
        res.Description= src.Description as string;
        res.Country= src.Country as string;
        res.Bias= src.Bias as number;
        return res as carriers.PreferredTimeZone;
}

export function Create_PreferredTimeZoneArray_From(src:any) : carriers.PreferredTimeZone[] {
    let res : carriers.PreferredTimeZone[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PreferredTimeZone_From(src[i]);
        }
    }
    return res;
}

export function Create_PreferredTimeZoneArrayArray_From(src:any) : carriers.PreferredTimeZone[][] {
    let res : carriers.PreferredTimeZone[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PreferredTimeZoneArray_From(src[i]);
        }
    }
    return res;
}




export function Create_RemoteTimeZoneMethods_From(src:any) : carriers.RemoteTimeZoneMethods {
        if( src === null || src === undefined )
            return null;
        let res : carriers.RemoteTimeZoneMethods = Create_Carrier_From(src) as carriers.RemoteTimeZoneMethods;
        
        return res as carriers.RemoteTimeZoneMethods;
}

export function Create_RemoteTimeZoneMethodsArray_From(src:any) : carriers.RemoteTimeZoneMethods[] {
    let res : carriers.RemoteTimeZoneMethods[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RemoteTimeZoneMethods_From(src[i]);
        }
    }
    return res;
}

export function Create_RemoteTimeZoneMethodsArrayArray_From(src:any) : carriers.RemoteTimeZoneMethods[][] {
    let res : carriers.RemoteTimeZoneMethods[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RemoteTimeZoneMethodsArray_From(src[i]);
        }
    }
    return res;
}




export function Create_TimeZoneData_From(src:any) : carriers.TimeZoneData {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.TZLocationID= src.TZLocationID as number;
        res.Name= src.Name as string;
        res.TZLocationCode= src.TZLocationCode as string;
        res.TZLocationCities= src.TZLocationCities as string;
        res.IsoNumber= src.IsoNumber as number;
        res.TimeZoneSTDRules= Create_TimeZoneRuleDictionary_From(src.TimeZoneSTDRules);
        res.TimeZoneDSTRules= Create_TimeZoneRuleDictionary_From(src.TimeZoneDSTRules);
        return res as carriers.TimeZoneData;
}

export function Create_TimeZoneDataArray_From(src:any) : carriers.TimeZoneData[] {
    let res : carriers.TimeZoneData[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TimeZoneData_From(src[i]);
        }
    }
    return res;
}

export function Create_TimeZoneDataArrayArray_From(src:any) : carriers.TimeZoneData[][] {
    let res : carriers.TimeZoneData[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TimeZoneDataArray_From(src[i]);
        }
    }
    return res;
}




export function Create_TimeZoneRule_From(src:any) : carriers.TimeZoneRule {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.TZOffset= src.TZOffset as number;
        res.StartRulePattern= src.StartRulePattern as string;
        res.EndRulePattern= src.EndRulePattern as string;
        res.StartDay= src.StartDay as number;
        res.StartMonth= src.StartMonth as number;
        res.EndDay= src.EndDay as number;
        res.EndMonth= src.EndMonth as number;
        return res as carriers.TimeZoneRule;
}

export function Create_TimeZoneRuleArray_From(src:any) : carriers.TimeZoneRule[] {
    let res : carriers.TimeZoneRule[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TimeZoneRule_From(src[i]);
        }
    }
    return res;
}

export function Create_TimeZoneRuleArrayArray_From(src:any) : carriers.TimeZoneRule[][] {
    let res : carriers.TimeZoneRule[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TimeZoneRuleArray_From(src[i]);
        }
    }
    return res;
}




// dictionary
export function Create_TimeZoneRuleDictionary_From(src:any) : carriers.TimeZoneRuleDictionary {
        let res : carriers.TimeZoneRuleDictionary = src as carriers.TimeZoneRuleDictionary;
        if( res ) {
            for(let i in res ) {
                res[i] = Create_TimeZoneRule_From(src[i]);
            }
        }
        return res;
}




export function Create_IncomingMessage_From(src:any) : carriers.IncomingMessage {
        if( src === null || src === undefined )
            return null;
        let res : carriers.IncomingMessage = Create_Carrier_From(src) as carriers.IncomingMessage;
        
        res.To= src.To as string;
        res.From= src.From as string;
        res.Content= src.Content as string;
        res.Format= src.Format as string;
        res.SessionKey= src.SessionKey as string;
        res.Plugin= src.Plugin as string;
        return res as carriers.IncomingMessage;
}

export function Create_IncomingMessageArray_From(src:any) : carriers.IncomingMessage[] {
    let res : carriers.IncomingMessage[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_IncomingMessage_From(src[i]);
        }
    }
    return res;
}

export function Create_IncomingMessageArrayArray_From(src:any) : carriers.IncomingMessage[][] {
    let res : carriers.IncomingMessage[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_IncomingMessageArray_From(src[i]);
        }
    }
    return res;
}




export function Create_MessageDeliveryStatus_From(src:any) : carriers.MessageDeliveryStatus {
        if( src === null || src === undefined )
            return null;
        let res : carriers.MessageDeliveryStatus = Create_Carrier_From(src) as carriers.MessageDeliveryStatus;
        
        res.Status= src.Status as number;
        res.StatusDescription= src.StatusDescription as string;
        res.MessagingId= src.MessagingId as number;
        return res as carriers.MessageDeliveryStatus;
}

export function Create_MessageDeliveryStatusArray_From(src:any) : carriers.MessageDeliveryStatus[] {
    let res : carriers.MessageDeliveryStatus[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_MessageDeliveryStatus_From(src[i]);
        }
    }
    return res;
}

export function Create_MessageDeliveryStatusArrayArray_From(src:any) : carriers.MessageDeliveryStatus[][] {
    let res : carriers.MessageDeliveryStatus[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_MessageDeliveryStatusArray_From(src[i]);
        }
    }
    return res;
}




export function Create_OutgoingMessage_From(src:any) : carriers.OutgoingMessage {
        if( src === null || src === undefined )
            return null;
        let res : carriers.OutgoingMessage = Create_Carrier_From(src) as carriers.OutgoingMessage;
        
        res.From= src.From as string;
        res.To= src.To as string;
        res.Content= src.Content as string;
        res.Format= src.Format as string;
        res.ParentMessagingId= src.ParentMessagingId as number;
        res.SuggestedSessionKey= src.SuggestedSessionKey as string;
        return res as carriers.OutgoingMessage;
}

export function Create_OutgoingMessageArray_From(src:any) : carriers.OutgoingMessage[] {
    let res : carriers.OutgoingMessage[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_OutgoingMessage_From(src[i]);
        }
    }
    return res;
}

export function Create_OutgoingMessageArrayArray_From(src:any) : carriers.OutgoingMessage[][] {
    let res : carriers.OutgoingMessage[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_OutgoingMessageArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ProviderInfo_From(src:any) : carriers.ProviderInfo {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ProviderInfo = Create_Carrier_From(src) as carriers.ProviderInfo;
        
        res.Name= src.Name as string;
        res.SupportedMessagingFormats= src.SupportedMessagingFormats as string[];
        res.SupportsConfig= src.SupportsConfig as boolean;
        return res as carriers.ProviderInfo;
}

export function Create_ProviderInfoArray_From(src:any) : carriers.ProviderInfo[] {
    let res : carriers.ProviderInfo[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ProviderInfo_From(src[i]);
        }
    }
    return res;
}

export function Create_ProviderInfoArrayArray_From(src:any) : carriers.ProviderInfo[][] {
    let res : carriers.ProviderInfo[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ProviderInfoArray_From(src[i]);
        }
    }
    return res;
}










export function Create_ImportLine_From(src:any) : carriers.ImportLine {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ImportLine = Create_Carrier_From(src) as carriers.ImportLine;
        
        res.Values= src.Values as string[];
        res.Selected= src.Selected as boolean;
        res.Operation= Create_ImportAction_From(src.Operation) as enums.ImportAction;
        res.Type= Create_ImportEntityType_From(src.Type) as enums.ImportEntityType;
        res.ExternalKey= src.ExternalKey as string;
        return res as carriers.ImportLine;
}

export function Create_ImportLineArray_From(src:any) : carriers.ImportLine[] {
    let res : carriers.ImportLine[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ImportLine_From(src[i]);
        }
    }
    return res;
}

export function Create_ImportLineArrayArray_From(src:any) : carriers.ImportLine[][] {
    let res : carriers.ImportLine[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ImportLineArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ImportColumnInfo_From(src:any) : carriers.ImportColumnInfo {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ImportColumnInfo = Create_Carrier_From(src) as carriers.ImportColumnInfo;
        
        res.Name= src.Name as string;
        res.DisplayName= src.DisplayName as string;
        res.Locked= src.Locked as boolean;
        return res as carriers.ImportColumnInfo;
}

export function Create_ImportColumnInfoArray_From(src:any) : carriers.ImportColumnInfo[] {
    let res : carriers.ImportColumnInfo[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ImportColumnInfo_From(src[i]);
        }
    }
    return res;
}

export function Create_ImportColumnInfoArrayArray_From(src:any) : carriers.ImportColumnInfo[][] {
    let res : carriers.ImportColumnInfo[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ImportColumnInfoArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ImportErpData_From(src:any) : carriers.ImportErpData {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ImportErpData = Create_Carrier_From(src) as carriers.ImportErpData;
        
        res.ImportLines= Create_ImportLineArray_From(src.ImportLines);
        res.ColumnInfos= Create_ImportColumnInfoArray_From(src.ColumnInfos);
        return res as carriers.ImportErpData;
}

export function Create_ImportErpDataArray_From(src:any) : carriers.ImportErpData[] {
    let res : carriers.ImportErpData[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ImportErpData_From(src[i]);
        }
    }
    return res;
}

export function Create_ImportErpDataArrayArray_From(src:any) : carriers.ImportErpData[][] {
    let res : carriers.ImportErpData[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ImportErpDataArray_From(src[i]);
        }
    }
    return res;
}









export function Create_FreeText_From(src:any) : carriers.FreeText {
        if( src === null || src === undefined )
            return null;
        let res : carriers.FreeText = Create_Carrier_From(src) as carriers.FreeText;
        
        res.FreeTextEnabled= src.FreeTextEnabled as boolean;
        res.SingleWordOperator= enums.FreeTextOperator[src.SingleWordOperator];
        res.MultiWordOperator= enums.FreeTextOperator[src.MultiWordOperator];
        res.CountWords= src.CountWords as number;
        res.Occurrences= src.Occurrences as number;
        res.LastGenerated= Create_Date_From(src.LastGenerated);
        res.AutoEnableTravelAreas= src.AutoEnableTravelAreas as boolean;
        return res as carriers.FreeText;
}

export function Create_FreeTextArray_From(src:any) : carriers.FreeText[] {
    let res : carriers.FreeText[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FreeText_From(src[i]);
        }
    }
    return res;
}

export function Create_FreeTextArrayArray_From(src:any) : carriers.FreeText[][] {
    let res : carriers.FreeText[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FreeTextArray_From(src[i]);
        }
    }
    return res;
}




export function Create_RefCountEntity_From(src:any) : carriers.RefCountEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.RefCountEntity = Create_Carrier_From(src) as carriers.RefCountEntity;
        
        res.RefCountsId= src.RefCountsId as number;
        res.Field= src.Field as string;
        res.RecordId= src.RecordId as number;
        res.SuggestedRecords= Create_MDOListItemArray_From(src.SuggestedRecords);
        res.CurrentValue= src.CurrentValue as number;
        res.TravelPrefix= src.TravelPrefix as number;
        res.SatPrefix= src.SatPrefix as number;
        res.Allocate= src.Allocate as boolean;
        res.Unique= src.Unique as boolean;
        res.ReadOnly= src.ReadOnly as boolean;
        res.AllowBlank= src.AllowBlank as boolean;
        return res as carriers.RefCountEntity;
}

export function Create_RefCountEntityArray_From(src:any) : carriers.RefCountEntity[] {
    let res : carriers.RefCountEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RefCountEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_RefCountEntityArrayArray_From(src:any) : carriers.RefCountEntity[][] {
    let res : carriers.RefCountEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_RefCountEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ChatSession_From(src:any) : carriers.ChatSession {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ChatSession = Create_Carrier_From(src) as carriers.ChatSession;
        
        res.ChatSessionId= src.ChatSessionId as number;
        return res as carriers.ChatSession;
}

export function Create_ChatSessionArray_From(src:any) : carriers.ChatSession[] {
    let res : carriers.ChatSession[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ChatSession_From(src[i]);
        }
    }
    return res;
}

export function Create_ChatSessionArrayArray_From(src:any) : carriers.ChatSession[][] {
    let res : carriers.ChatSession[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ChatSessionArray_From(src[i]);
        }
    }
    return res;
}




export function Create_CsFeatureToggle_From(src:any) : carriers.CsFeatureToggle {
        if( src === null || src === undefined )
            return null;
        let res : carriers.CsFeatureToggle = Create_Carrier_From(src) as carriers.CsFeatureToggle;
        
        res.Name= src.Name as string;
        res.State= src.State as boolean;
        return res as carriers.CsFeatureToggle;
}

export function Create_CsFeatureToggleArray_From(src:any) : carriers.CsFeatureToggle[] {
    let res : carriers.CsFeatureToggle[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CsFeatureToggle_From(src[i]);
        }
    }
    return res;
}

export function Create_CsFeatureToggleArrayArray_From(src:any) : carriers.CsFeatureToggle[][] {
    let res : carriers.CsFeatureToggle[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CsFeatureToggleArray_From(src[i]);
        }
    }
    return res;
}




export function Create_CsSessionKey_From(src:any) : carriers.CsSessionKey {
        if( src === null || src === undefined )
            return null;
        let res : carriers.CsSessionKey = Create_Carrier_From(src) as carriers.CsSessionKey;
        
        res.Key= src.Key as string;
        res.LoginId= src.LoginId as number;
        res.UserId= src.UserId as number;
        return res as carriers.CsSessionKey;
}

export function Create_CsSessionKeyArray_From(src:any) : carriers.CsSessionKey[] {
    let res : carriers.CsSessionKey[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CsSessionKey_From(src[i]);
        }
    }
    return res;
}

export function Create_CsSessionKeyArrayArray_From(src:any) : carriers.CsSessionKey[][] {
    let res : carriers.CsSessionKey[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CsSessionKeyArray_From(src[i]);
        }
    }
    return res;
}




export function Create_CustomerCenterConfig_From(src:any) : carriers.CustomerCenterConfig {
        if( src === null || src === undefined )
            return null;
        let res : carriers.CustomerCenterConfig = Create_Carrier_From(src) as carriers.CustomerCenterConfig;
        
        res.CustConfigId= src.CustConfigId as number;
        res.Type= enums.ConfigType[src.Type];
        res.Config= src.Config as string;
        res.CustLangId= src.CustLangId as number;
        res.Registered= Create_Date_From(src.Registered);
        res.RegisteredAssociateId= src.RegisteredAssociateId as number;
        res.Updated= Create_Date_From(src.Updated);
        res.UpdatedAssociateId= src.UpdatedAssociateId as number;
        return res as carriers.CustomerCenterConfig;
}

export function Create_CustomerCenterConfigArray_From(src:any) : carriers.CustomerCenterConfig[] {
    let res : carriers.CustomerCenterConfig[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CustomerCenterConfig_From(src[i]);
        }
    }
    return res;
}

export function Create_CustomerCenterConfigArrayArray_From(src:any) : carriers.CustomerCenterConfig[][] {
    let res : carriers.CustomerCenterConfig[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CustomerCenterConfigArray_From(src[i]);
        }
    }
    return res;
}




export function Create_CustomerServiceConfig_From(src:any) : carriers.CustomerServiceConfig {
        if( src === null || src === undefined )
            return null;
        let res : carriers.CustomerServiceConfig = Create_Carrier_From(src) as carriers.CustomerServiceConfig;
        
        return res as carriers.CustomerServiceConfig;
}

export function Create_CustomerServiceConfigArray_From(src:any) : carriers.CustomerServiceConfig[] {
    let res : carriers.CustomerServiceConfig[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CustomerServiceConfig_From(src[i]);
        }
    }
    return res;
}

export function Create_CustomerServiceConfigArrayArray_From(src:any) : carriers.CustomerServiceConfig[][] {
    let res : carriers.CustomerServiceConfig[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CustomerServiceConfigArray_From(src[i]);
        }
    }
    return res;
}




export function Create_CustomerServiceStartup_From(src:any) : carriers.CustomerServiceStartup {
        if( src === null || src === undefined )
            return null;
        let res : carriers.CustomerServiceStartup = Create_Carrier_From(src) as carriers.CustomerServiceStartup;
        
        res.TimezoneEnabled= src.TimezoneEnabled as boolean;
        res.TZOffset= src.TZOffset as number;
        res.RecaptchaSiteKey= src.RecaptchaSiteKey as string;
        return res as carriers.CustomerServiceStartup;
}

export function Create_CustomerServiceStartupArray_From(src:any) : carriers.CustomerServiceStartup[] {
    let res : carriers.CustomerServiceStartup[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CustomerServiceStartup_From(src[i]);
        }
    }
    return res;
}

export function Create_CustomerServiceStartupArrayArray_From(src:any) : carriers.CustomerServiceStartup[][] {
    let res : carriers.CustomerServiceStartup[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CustomerServiceStartupArray_From(src[i]);
        }
    }
    return res;
}




export function Create_EventData_From(src:any) : carriers.EventData {
        if( src === null || src === undefined )
            return null;
        let res : carriers.EventData = Create_Carrier_From(src) as carriers.EventData;
        
        res.Type= enums.EventHandlerType[src.Type];
        res.InputValues= Create_StringDictionary_From(src.InputValues);
        res.BlockExecution= src.BlockExecution as boolean;
        res.NavigateTo= src.NavigateTo as string;
        res.Message= src.Message as string;
        res.ShowDialog= src.ShowDialog as string;
        res.OutputValues= Create_StringDictionary_From(src.OutputValues);
        res.StateValues= Create_StringDictionary_From(src.StateValues);
        res.Exception= src.Exception as string;
        return res as carriers.EventData;
}

export function Create_EventDataArray_From(src:any) : carriers.EventData[] {
    let res : carriers.EventData[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EventData_From(src[i]);
        }
    }
    return res;
}

export function Create_EventDataArrayArray_From(src:any) : carriers.EventData[][] {
    let res : carriers.EventData[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EventDataArray_From(src[i]);
        }
    }
    return res;
}




export function Create_KbCategory_From(src:any) : carriers.KbCategory {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.KbCategoryId= src.KbCategoryId as number;
        res.Name= src.Name as string;
        res.Description= src.Description as string;
        res.Fullname= src.Fullname as string;
        res.ParentId= src.ParentId as number;
        res.SortOrder= src.SortOrder as number;
        return res as carriers.KbCategory;
}

export function Create_KbCategoryArray_From(src:any) : carriers.KbCategory[] {
    let res : carriers.KbCategory[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_KbCategory_From(src[i]);
        }
    }
    return res;
}

export function Create_KbCategoryArrayArray_From(src:any) : carriers.KbCategory[][] {
    let res : carriers.KbCategory[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_KbCategoryArray_From(src[i]);
        }
    }
    return res;
}




export function Create_Mailbox_From(src:any) : carriers.Mailbox {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Mailbox = Create_Carrier_From(src) as carriers.Mailbox;
        
        res.MailInFilterId= src.MailInFilterId as number;
        res.Address= src.Address as string;
        res.CategoryName= src.CategoryName as string;
        res.PriorityName= src.PriorityName as string;
        return res as carriers.Mailbox;
}

export function Create_MailboxArray_From(src:any) : carriers.Mailbox[] {
    let res : carriers.Mailbox[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Mailbox_From(src[i]);
        }
    }
    return res;
}

export function Create_MailboxArrayArray_From(src:any) : carriers.Mailbox[][] {
    let res : carriers.Mailbox[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_MailboxArray_From(src[i]);
        }
    }
    return res;
}




export function Create_MailboxEntity_From(src:any) : carriers.MailboxEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.MailboxEntity = Create_Carrier_From(src) as carriers.MailboxEntity;
        
        res.MailInFilterId= src.MailInFilterId as number;
        res.ServerType= enums.MailboxType[src.ServerType];
        res.Address= src.Address as string;
        res.Username= src.Username as string;
        res.Password= src.Password as string;
        res.Server= src.Server as string;
        res.Port= src.Port as number;
        return res as carriers.MailboxEntity;
}

export function Create_MailboxEntityArray_From(src:any) : carriers.MailboxEntity[] {
    let res : carriers.MailboxEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_MailboxEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_MailboxEntityArrayArray_From(src:any) : carriers.MailboxEntity[][] {
    let res : carriers.MailboxEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_MailboxEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_PreviewFaqEntry_From(src:any) : carriers.PreviewFaqEntry {
        if( src === null || src === undefined )
            return null;
        let res : carriers.PreviewFaqEntry = Create_Carrier_From(src) as carriers.PreviewFaqEntry;
        
        res.Title= src.Title as string;
        res.RegisteredByFullName= src.RegisteredByFullName as string;
        res.Updated= Create_Date_From(src.Updated);
        res.Question= src.Question as string;
        res.Answer= src.Answer as string;
        return res as carriers.PreviewFaqEntry;
}

export function Create_PreviewFaqEntryArray_From(src:any) : carriers.PreviewFaqEntry[] {
    let res : carriers.PreviewFaqEntry[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PreviewFaqEntry_From(src[i]);
        }
    }
    return res;
}

export function Create_PreviewFaqEntryArrayArray_From(src:any) : carriers.PreviewFaqEntry[][] {
    let res : carriers.PreviewFaqEntry[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PreviewFaqEntryArray_From(src[i]);
        }
    }
    return res;
}




export function Create_PreviewQuickReply_From(src:any) : carriers.PreviewQuickReply {
        if( src === null || src === undefined )
            return null;
        let res : carriers.PreviewQuickReply = Create_Carrier_From(src) as carriers.PreviewQuickReply;
        
        res.Name= src.Name as string;
        res.UpdatedByFullName= src.UpdatedByFullName as string;
        res.Updated= Create_Date_From(src.Updated);
        res.HtmlBody= src.HtmlBody as string;
        return res as carriers.PreviewQuickReply;
}

export function Create_PreviewQuickReplyArray_From(src:any) : carriers.PreviewQuickReply[] {
    let res : carriers.PreviewQuickReply[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PreviewQuickReply_From(src[i]);
        }
    }
    return res;
}

export function Create_PreviewQuickReplyArrayArray_From(src:any) : carriers.PreviewQuickReply[][] {
    let res : carriers.PreviewQuickReply[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PreviewQuickReplyArray_From(src[i]);
        }
    }
    return res;
}




export function Create_PreviewReplyTemplate_From(src:any) : carriers.PreviewReplyTemplate {
        if( src === null || src === undefined )
            return null;
        let res : carriers.PreviewReplyTemplate = Create_Carrier_From(src) as carriers.PreviewReplyTemplate;
        
        res.Name= src.Name as string;
        res.Description= src.Description as string;
        res.OwnedByFullName= src.OwnedByFullName as string;
        res.Updated= Create_Date_From(src.Updated);
        res.Body= src.Body as string;
        res.IsHtml= src.IsHtml as boolean;
        return res as carriers.PreviewReplyTemplate;
}

export function Create_PreviewReplyTemplateArray_From(src:any) : carriers.PreviewReplyTemplate[] {
    let res : carriers.PreviewReplyTemplate[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PreviewReplyTemplate_From(src[i]);
        }
    }
    return res;
}

export function Create_PreviewReplyTemplateArrayArray_From(src:any) : carriers.PreviewReplyTemplate[][] {
    let res : carriers.PreviewReplyTemplate[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PreviewReplyTemplateArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ReplyTemplate_From(src:any) : carriers.ReplyTemplate {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.ReplyTemplateId= src.ReplyTemplateId as number;
        res.Name= src.Name as string;
        res.Description= src.Description as string;
        res.FolderId= src.FolderId as number;
        return res as carriers.ReplyTemplate;
}

export function Create_ReplyTemplateArray_From(src:any) : carriers.ReplyTemplate[] {
    let res : carriers.ReplyTemplate[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ReplyTemplate_From(src[i]);
        }
    }
    return res;
}

export function Create_ReplyTemplateArrayArray_From(src:any) : carriers.ReplyTemplate[][] {
    let res : carriers.ReplyTemplate[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ReplyTemplateArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ReplyTemplateParsed_From(src:any) : carriers.ReplyTemplateParsed {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ReplyTemplateParsed = Create_Carrier_From(src) as carriers.ReplyTemplateParsed;
        
        res.ReplyTemplateId= src.ReplyTemplateId as number;
        res.PlainParsed= src.PlainParsed as string;
        res.HtmlParsed= src.HtmlParsed as string;
        res.Attachments= Create_AttachmentEntityArray_From(src.Attachments);
        res.Subject= src.Subject as string;
        return res as carriers.ReplyTemplateParsed;
}

export function Create_ReplyTemplateParsedArray_From(src:any) : carriers.ReplyTemplateParsed[] {
    let res : carriers.ReplyTemplateParsed[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ReplyTemplateParsed_From(src[i]);
        }
    }
    return res;
}

export function Create_ReplyTemplateParsedArrayArray_From(src:any) : carriers.ReplyTemplateParsed[][] {
    let res : carriers.ReplyTemplateParsed[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ReplyTemplateParsedArray_From(src[i]);
        }
    }
    return res;
}




export function Create_SmsConfig_From(src:any) : carriers.SmsConfig {
        if( src === null || src === undefined )
            return null;
        let res : carriers.SmsConfig = Create_Carrier_From(src) as carriers.SmsConfig;
        
        res.DefaultSmsCountry= src.DefaultSmsCountry as string;
        res.NetServerSmsProvider= src.NetServerSmsProvider as string;
        res.NsPluginSender= src.NsPluginSender as string;
        res.NsPluginConfig= Create_StringDictionary_From(src.NsPluginConfig);
        return res as carriers.SmsConfig;
}

export function Create_SmsConfigArray_From(src:any) : carriers.SmsConfig[] {
    let res : carriers.SmsConfig[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SmsConfig_From(src[i]);
        }
    }
    return res;
}

export function Create_SmsConfigArrayArray_From(src:any) : carriers.SmsConfig[][] {
    let res : carriers.SmsConfig[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SmsConfigArray_From(src[i]);
        }
    }
    return res;
}




export function Create_SmtpTestResult_From(src:any) : carriers.SmtpTestResult {
        if( src === null || src === undefined )
            return null;
        let res : carriers.SmtpTestResult = Create_Carrier_From(src) as carriers.SmtpTestResult;
        
        res.Success= src.Success as boolean;
        res.ErrorMessage= src.ErrorMessage as string;
        return res as carriers.SmtpTestResult;
}

export function Create_SmtpTestResultArray_From(src:any) : carriers.SmtpTestResult[] {
    let res : carriers.SmtpTestResult[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SmtpTestResult_From(src[i]);
        }
    }
    return res;
}

export function Create_SmtpTestResultArrayArray_From(src:any) : carriers.SmtpTestResult[][] {
    let res : carriers.SmtpTestResult[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SmtpTestResultArray_From(src[i]);
        }
    }
    return res;
}




export function Create_StatisticsDataSet_From(src:any) : carriers.StatisticsDataSet {
        if( src === null || src === undefined )
            return null;
        let res : carriers.StatisticsDataSet = Create_Carrier_From(src) as carriers.StatisticsDataSet;
        
        res.Label= src.Label as string;
        res.Values= Create_StatisticsDataValueArray_From(src.Values);
        res.Description= src.Description as string;
        return res as carriers.StatisticsDataSet;
}

export function Create_StatisticsDataSetArray_From(src:any) : carriers.StatisticsDataSet[] {
    let res : carriers.StatisticsDataSet[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_StatisticsDataSet_From(src[i]);
        }
    }
    return res;
}

export function Create_StatisticsDataSetArrayArray_From(src:any) : carriers.StatisticsDataSet[][] {
    let res : carriers.StatisticsDataSet[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_StatisticsDataSetArray_From(src[i]);
        }
    }
    return res;
}




export function Create_StatisticsDataValue_From(src:any) : carriers.StatisticsDataValue {
        if( src === null || src === undefined )
            return null;
        let res : carriers.StatisticsDataValue = Create_Carrier_From(src) as carriers.StatisticsDataValue;
        
        res.Label= src.Label as string;
        res.Value= src.Value as number;
        res.Description= src.Description as string;
        return res as carriers.StatisticsDataValue;
}

export function Create_StatisticsDataValueArray_From(src:any) : carriers.StatisticsDataValue[] {
    let res : carriers.StatisticsDataValue[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_StatisticsDataValue_From(src[i]);
        }
    }
    return res;
}

export function Create_StatisticsDataValueArrayArray_From(src:any) : carriers.StatisticsDataValue[][] {
    let res : carriers.StatisticsDataValue[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_StatisticsDataValueArray_From(src[i]);
        }
    }
    return res;
}




export function Create_SystemTemplateSettings_From(src:any) : carriers.SystemTemplateSettings {
        if( src === null || src === undefined )
            return null;
        let res : carriers.SystemTemplateSettings = Create_Carrier_From(src) as carriers.SystemTemplateSettings;
        
        res.CustomerNewCustomerTemplateId= src.CustomerNewCustomerTemplateId as number;
        res.CustomerCustomerReplyTemplateId= src.CustomerCustomerReplyTemplateId as number;
        res.CustomerPasswordTemplateId= src.CustomerPasswordTemplateId as number;
        res.CustomerConfirmEmailTemplateId= src.CustomerConfirmEmailTemplateId as number;
        res.CustomerChatLogTemplateId= src.CustomerChatLogTemplateId as number;
        res.NewLinkTemplateId= src.NewLinkTemplateId as number;
        res.HotlistNewMessageTemplateId= src.HotlistNewMessageTemplateId as number;
        res.HotlistTicketActivatedTemplateId= src.HotlistTicketActivatedTemplateId as number;
        res.UserTicketAlarmTemplateId= src.UserTicketAlarmTemplateId as number;
        res.HotlistTicketTakenOverTemplateId= src.HotlistTicketTakenOverTemplateId as number;
        res.UserActiveTicketsTemplateId= src.UserActiveTicketsTemplateId as number;
        res.UserNewMessageTemplateId= src.UserNewMessageTemplateId as number;
        res.UserTicketActivatedTemplateId= src.UserTicketActivatedTemplateId as number;
        res.UserNewTicketTemplateId= src.UserNewTicketTemplateId as number;
        res.PublishKbQuestionTemplateId= src.PublishKbQuestionTemplateId as number;
        res.PublishKbAnswerTemplateId= src.PublishKbAnswerTemplateId as number;
        res.UserTicketTakenOverTemplateId= src.UserTicketTakenOverTemplateId as number;
        res.PrintTicketTemplateId= src.PrintTicketTemplateId as number;
        res.WeekStatTemplateId= src.WeekStatTemplateId as number;
        res.TicketAlarmHotlistTemplateId= src.TicketAlarmHotlistTemplateId as number;
        res.EmailAddresses= src.EmailAddresses as string;
        return res as carriers.SystemTemplateSettings;
}

export function Create_SystemTemplateSettingsArray_From(src:any) : carriers.SystemTemplateSettings[] {
    let res : carriers.SystemTemplateSettings[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SystemTemplateSettings_From(src[i]);
        }
    }
    return res;
}

export function Create_SystemTemplateSettingsArrayArray_From(src:any) : carriers.SystemTemplateSettings[][] {
    let res : carriers.SystemTemplateSettings[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SystemTemplateSettingsArray_From(src[i]);
        }
    }
    return res;
}




export function Create_TicketInfo_From(src:any) : carriers.TicketInfo {
        if( src === null || src === undefined )
            return null;
        let res : carriers.TicketInfo = Create_Carrier_From(src) as carriers.TicketInfo;
        
        res.TicketId= src.TicketId as number;
        res.Title= src.Title as string;
        res.OwnerName= src.OwnerName as string;
        res.CategoryName= src.CategoryName as string;
        res.PriorityName= src.PriorityName as string;
        res.TicketUrl= src.TicketUrl as string;
        res.PersonName= src.PersonName as string;
        res.ContactName= src.ContactName as string;
        return res as carriers.TicketInfo;
}

export function Create_TicketInfoArray_From(src:any) : carriers.TicketInfo[] {
    let res : carriers.TicketInfo[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TicketInfo_From(src[i]);
        }
    }
    return res;
}

export function Create_TicketInfoArrayArray_From(src:any) : carriers.TicketInfo[][] {
    let res : carriers.TicketInfo[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TicketInfoArray_From(src[i]);
        }
    }
    return res;
}












export function Create_CallerID_From(src:any) : carriers.CallerID {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.PhoneNumber= src.PhoneNumber as number;
        res.DialInPrefix= src.DialInPrefix as number;
        res.PersonId= src.PersonId as number;
        res.PersonName= src.PersonName as string;
        res.Mrmrs= src.Mrmrs as string;
        res.ContactId= src.ContactId as number;
        res.ContactName= src.ContactName as string;
        return res as carriers.CallerID;
}

export function Create_CallerIDArray_From(src:any) : carriers.CallerID[] {
    let res : carriers.CallerID[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CallerID_From(src[i]);
        }
    }
    return res;
}

export function Create_CallerIDArrayArray_From(src:any) : carriers.CallerID[][] {
    let res : carriers.CallerID[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CallerIDArray_From(src[i]);
        }
    }
    return res;
}




export function Create_CallerIDCollection_From(src:any) : carriers.CallerIDCollection {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.CallerIDHash= src.CallerIDHash as string;
        res.CallerIDs= Create_CallerIDArray_From(src.CallerIDs);
        return res as carriers.CallerIDCollection;
}

export function Create_CallerIDCollectionArray_From(src:any) : carriers.CallerIDCollection[] {
    let res : carriers.CallerIDCollection[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CallerIDCollection_From(src[i]);
        }
    }
    return res;
}

export function Create_CallerIDCollectionArrayArray_From(src:any) : carriers.CallerIDCollection[][] {
    let res : carriers.CallerIDCollection[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CallerIDCollectionArray_From(src[i]);
        }
    }
    return res;
}




export function Create_NotificationEvent_From(src:any) : carriers.NotificationEvent {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.Type= enums.NotificationEventType[src.Type];
        res.Id= src.Id as number;
        return res as carriers.NotificationEvent;
}

export function Create_NotificationEventArray_From(src:any) : carriers.NotificationEvent[] {
    let res : carriers.NotificationEvent[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_NotificationEvent_From(src[i]);
        }
    }
    return res;
}

export function Create_NotificationEventArrayArray_From(src:any) : carriers.NotificationEvent[][] {
    let res : carriers.NotificationEvent[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_NotificationEventArray_From(src[i]);
        }
    }
    return res;
}




export function Create_PocketNotificationMessage_From(src:any) : carriers.PocketNotificationMessage {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.Title= src.Title as string;
        res.Message= src.Message as string;
        res.Url= src.Url as string;
        res.Silent= src.Silent as boolean;
        res.Type= enums.NotificationMessageType[src.Type];
        res.TimeToLive= src.TimeToLive as number;
        res.RecordId= src.RecordId as number;
        res.Date= Create_Date_From(src.Date);
        res.Duration= Create_Duration_From(src.Duration);
        res.ExtraValues= Create_StringDictionary_From(src.ExtraValues);
        return res as carriers.PocketNotificationMessage;
}

export function Create_PocketNotificationMessageArray_From(src:any) : carriers.PocketNotificationMessage[] {
    let res : carriers.PocketNotificationMessage[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PocketNotificationMessage_From(src[i]);
        }
    }
    return res;
}

export function Create_PocketNotificationMessageArrayArray_From(src:any) : carriers.PocketNotificationMessage[][] {
    let res : carriers.PocketNotificationMessage[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PocketNotificationMessageArray_From(src[i]);
        }
    }
    return res;
}




export function Create_PocketDeviceInfo_From(src:any) : carriers.PocketDeviceInfo {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.DeviceName= src.DeviceName as string;
        res.DeviceIdentifier= src.DeviceIdentifier as string;
        res.PocketVersion= src.PocketVersion as string;
        res.Language= src.Language as string;
        res.PNSHandle= src.PNSHandle as string;
        res.Platform= enums.NotificationPlatform[src.Platform];
        res.OSVersion= src.OSVersion as string;
        res.TimeZoneId= src.TimeZoneId as number;
        return res as carriers.PocketDeviceInfo;
}

export function Create_PocketDeviceInfoArray_From(src:any) : carriers.PocketDeviceInfo[] {
    let res : carriers.PocketDeviceInfo[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PocketDeviceInfo_From(src[i]);
        }
    }
    return res;
}

export function Create_PocketDeviceInfoArrayArray_From(src:any) : carriers.PocketDeviceInfo[][] {
    let res : carriers.PocketDeviceInfo[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PocketDeviceInfoArray_From(src[i]);
        }
    }
    return res;
}




export function Create_PocketStartupData_From(src:any) : carriers.PocketStartupData {
        if( src === null || src === undefined )
            return null;
        let res : carriers.PocketStartupData = Create_Carrier_From(src) as carriers.PocketStartupData;
        
        res.TableRights= Create_ETableRight_From(src.TableRights) as enums.ETableRight[];
        res.PhoneLocaleTimeZoneData= Create_TimeZoneData_From(src.PhoneLocaleTimeZoneData);
        res.BaseLocaleTimeZoneData= Create_TimeZoneData_From(src.BaseLocaleTimeZoneData);
        res.OverdueSalesCount= src.OverdueSalesCount as number;
        res.NotificationsCount= src.NotificationsCount as number;
        res.SystemWebPanels= Create_WebPanelEntityArray_From(src.SystemWebPanels);
        res.PocketPreferences= Create_PreferenceArray_From(src.PocketPreferences);
        res.IsPushNotificationEnabled= src.IsPushNotificationEnabled as boolean;
        res.CustomData= src.CustomData as string;
        return res as carriers.PocketStartupData;
}

export function Create_PocketStartupDataArray_From(src:any) : carriers.PocketStartupData[] {
    let res : carriers.PocketStartupData[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PocketStartupData_From(src[i]);
        }
    }
    return res;
}

export function Create_PocketStartupDataArrayArray_From(src:any) : carriers.PocketStartupData[][] {
    let res : carriers.PocketStartupData[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PocketStartupDataArray_From(src[i]);
        }
    }
    return res;
}







export function Create_Dashboard_From(src:any) : carriers.Dashboard {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Dashboard = Create_Carrier_From(src) as carriers.Dashboard;
        
        res.DashboardId= src.DashboardId as number;
        res.AssociateId= src.AssociateId as number;
        res.Caption= src.Caption as string;
        res.Layout= enums.DashboardLayout[src.Layout];
        res.Tiles= Create_DashboardTileArray_From(src.Tiles);
        return res as carriers.Dashboard;
}

export function Create_DashboardArray_From(src:any) : carriers.Dashboard[] {
    let res : carriers.Dashboard[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Dashboard_From(src[i]);
        }
    }
    return res;
}

export function Create_DashboardArrayArray_From(src:any) : carriers.Dashboard[][] {
    let res : carriers.Dashboard[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DashboardArray_From(src[i]);
        }
    }
    return res;
}




export function Create_DashboardTile_From(src:any) : carriers.DashboardTile {
        if( src === null || src === undefined )
            return null;
        let res : carriers.DashboardTile = Create_Carrier_From(src) as carriers.DashboardTile;
        
        res.DashboardTileId= src.DashboardTileId as number;
        res.Caption= src.Caption as string;
        res.Description= src.Description as string;
        res.ChartName= src.ChartName as string;
        res.ChartId= src.ChartId as string;
        res.IsDefault= src.IsDefault as boolean;
        res.AssociateId= src.AssociateId as number;
        res.GroupId= src.GroupId as number;
        res.SelectionId= src.SelectionId as number;
        res.Config= src.Config as string;
        res.Type= enums.DashboardTileType[src.Type];
        res.EntityType= enums.DashboardTileEntityType[src.EntityType];
        res.Options= Create_DashboardTileOptionArray_From(src.Options);
        res.VisibleFor= Create_VisibleForArray_From(src.VisibleFor);
        return res as carriers.DashboardTile;
}

export function Create_DashboardTileArray_From(src:any) : carriers.DashboardTile[] {
    let res : carriers.DashboardTile[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DashboardTile_From(src[i]);
        }
    }
    return res;
}

export function Create_DashboardTileArrayArray_From(src:any) : carriers.DashboardTile[][] {
    let res : carriers.DashboardTile[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DashboardTileArray_From(src[i]);
        }
    }
    return res;
}




export function Create_DashboardTileOption_From(src:any) : carriers.DashboardTileOption {
        if( src === null || src === undefined )
            return null;
        let res : carriers.DashboardTileOption = Create_Carrier_From(src) as carriers.DashboardTileOption;
        
        res.Name= src.Name as string;
        res.Description= src.Description as string;
        res.Type= enums.DashboardTileOptionType[src.Type];
        res.ListName= src.ListName as string;
        res.ListItems= Create_MDOListItemArray_From(src.ListItems);
        res.Value= src.Value as string;
        res.DefaultDataOption= src.DefaultDataOption as boolean;
        return res as carriers.DashboardTileOption;
}

export function Create_DashboardTileOptionArray_From(src:any) : carriers.DashboardTileOption[] {
    let res : carriers.DashboardTileOption[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DashboardTileOption_From(src[i]);
        }
    }
    return res;
}

export function Create_DashboardTileOptionArrayArray_From(src:any) : carriers.DashboardTileOption[][] {
    let res : carriers.DashboardTileOption[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DashboardTileOptionArray_From(src[i]);
        }
    }
    return res;
}




export function Create_TileData_From(src:any) : carriers.TileData {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.Columns= Create_ArchiveColumnInfoArray_From(src.Columns);
        res.Result= Create_ArchiveListResult_From(src.Result);
        return res as carriers.TileData;
}

export function Create_TileDataArray_From(src:any) : carriers.TileData[] {
    let res : carriers.TileData[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TileData_From(src[i]);
        }
    }
    return res;
}

export function Create_TileDataArrayArray_From(src:any) : carriers.TileData[][] {
    let res : carriers.TileData[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TileDataArray_From(src[i]);
        }
    }
    return res;
}










export function Create_Dash_From(src:any) : carriers.Dash {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Dash = Create_Carrier_From(src) as carriers.Dash;
        
        res.DashboardId= src.DashboardId as number;
        res.UniqueId= src.UniqueId as string;
        res.Name= src.Name as string;
        res.Description= src.Description as string;
        res.AssociateId= src.AssociateId as number;
        res.Columns= src.Columns as number;
        res.Theme= Create_DashTheme_From(src.Theme);
        res.VisibleForAll= src.VisibleForAll as number;
        res.VisibleForAssociates= src.VisibleForAssociates as number[];
        res.VisibleForGroups= src.VisibleForGroups as number[];
        res.PinForAll= src.PinForAll as number;
        res.PinForAssociates= src.PinForAssociates as number[];
        res.PinForGroups= src.PinForGroups as number[];
        return res as carriers.Dash;
}

export function Create_DashArray_From(src:any) : carriers.Dash[] {
    let res : carriers.Dash[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Dash_From(src[i]);
        }
    }
    return res;
}

export function Create_DashArrayArray_From(src:any) : carriers.Dash[][] {
    let res : carriers.Dash[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DashArray_From(src[i]);
        }
    }
    return res;
}




export function Create_DashCollection_From(src:any) : carriers.DashCollection {
        if( src === null || src === undefined )
            return null;
        let res : carriers.DashCollection = Create_Carrier_From(src) as carriers.DashCollection;
        
        res.Pinned= Create_DashArray_From(src.Pinned);
        res.Favourites= Create_DashArray_From(src.Favourites);
        res.Other= Create_DashArray_From(src.Other);
        return res as carriers.DashCollection;
}

export function Create_DashCollectionArray_From(src:any) : carriers.DashCollection[] {
    let res : carriers.DashCollection[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DashCollection_From(src[i]);
        }
    }
    return res;
}

export function Create_DashCollectionArrayArray_From(src:any) : carriers.DashCollection[][] {
    let res : carriers.DashCollection[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DashCollectionArray_From(src[i]);
        }
    }
    return res;
}




export function Create_DashTheme_From(src:any) : carriers.DashTheme {
        if( src === null || src === undefined )
            return null;
        let res : carriers.DashTheme = Create_Carrier_From(src) as carriers.DashTheme;
        
        res.DashboardThemeId= src.DashboardThemeId as number;
        res.Name= src.Name as string;
        res.Config= src.Config as string;
        res.Rank= src.Rank as number;
        res.Client= src.Client as string;
        res.Style= src.Style as string;
        return res as carriers.DashTheme;
}

export function Create_DashThemeArray_From(src:any) : carriers.DashTheme[] {
    let res : carriers.DashTheme[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DashTheme_From(src[i]);
        }
    }
    return res;
}

export function Create_DashThemeArrayArray_From(src:any) : carriers.DashTheme[][] {
    let res : carriers.DashTheme[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DashThemeArray_From(src[i]);
        }
    }
    return res;
}




export function Create_DashTile_From(src:any) : carriers.DashTile {
        if( src === null || src === undefined )
            return null;
        let res : carriers.DashTile = Create_Carrier_From(src) as carriers.DashTile;
        
        res.DashboardTileId= src.DashboardTileId as number;
        res.DashboardId= src.DashboardId as number;
        res.Height= src.Height as number;
        res.Width= src.Width as number;
        res.Rank= src.Rank as number;
        res.DashTileDefinition= Create_DashTileDefinition_From(src.DashTileDefinition);
        return res as carriers.DashTile;
}

export function Create_DashTileArray_From(src:any) : carriers.DashTile[] {
    let res : carriers.DashTile[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DashTile_From(src[i]);
        }
    }
    return res;
}

export function Create_DashTileArrayArray_From(src:any) : carriers.DashTile[][] {
    let res : carriers.DashTile[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DashTileArray_From(src[i]);
        }
    }
    return res;
}




export function Create_DashTileDefinition_From(src:any) : carriers.DashTileDefinition {
        if( src === null || src === undefined )
            return null;
        let res : carriers.DashTileDefinition = Create_Carrier_From(src) as carriers.DashTileDefinition;
        
        res.DashboardTileDefinitionId= src.DashboardTileDefinitionId as number;
        res.Name= src.Name as string;
        res.Description= src.Description as string;
        res.DefaultHeight= src.DefaultHeight as number;
        res.DefaultWidth= src.DefaultWidth as number;
        res.TileType= enums.DashTileType[src.TileType];
        res.EntityType= enums.DashTileEntityType[src.EntityType];
        res.EntityName= src.EntityName as string;
        res.SelectionId= src.SelectionId as number;
        res.CurrencyMode= enums.DashTileCurrencyMode[src.CurrencyMode];
        res.CurrencyCode= src.CurrencyCode as string;
        res.Measure= enums.DashTileMeasure[src.Measure];
        res.MeasureField= src.MeasureField as string;
        res.SortBy= src.SortBy as string;
        res.LayoutConfig= src.LayoutConfig as string;
        res.SecondarySelectionId= src.SecondarySelectionId as number;
        res.MeasureByField= src.MeasureByField as string;
        res.Usage= Create_DashTileUsage_From(src.Usage) as enums.DashTileUsage;
        res.ProviderName= src.ProviderName as string;
        return res as carriers.DashTileDefinition;
}

export function Create_DashTileDefinitionArray_From(src:any) : carriers.DashTileDefinition[] {
    let res : carriers.DashTileDefinition[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DashTileDefinition_From(src[i]);
        }
    }
    return res;
}

export function Create_DashTileDefinitionArrayArray_From(src:any) : carriers.DashTileDefinition[][] {
    let res : carriers.DashTileDefinition[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DashTileDefinitionArray_From(src[i]);
        }
    }
    return res;
}




export function Create_DashTileHtml_From(src:any) : carriers.DashTileHtml {
        if( src === null || src === undefined )
            return null;
        let res : carriers.DashTileHtml = Create_Carrier_From(src) as carriers.DashTileHtml;
        
        res.LanguageCode= src.LanguageCode as string;
        res.Html= src.Html as string;
        return res as carriers.DashTileHtml;
}

export function Create_DashTileHtmlArray_From(src:any) : carriers.DashTileHtml[] {
    let res : carriers.DashTileHtml[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DashTileHtml_From(src[i]);
        }
    }
    return res;
}

export function Create_DashTileHtmlArrayArray_From(src:any) : carriers.DashTileHtml[][] {
    let res : carriers.DashTileHtml[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DashTileHtmlArray_From(src[i]);
        }
    }
    return res;
}




export function Create_PreviewDash_From(src:any) : carriers.PreviewDash {
        if( src === null || src === undefined )
            return null;
        let res : carriers.PreviewDash = Create_Carrier_From(src) as carriers.PreviewDash;
        
        res.Name= src.Name as string;
        res.Description= src.Description as string;
        res.OwnedByFullName= src.OwnedByFullName as string;
        res.Registered= Create_Date_From(src.Registered);
        res.Tiles= Create_PreviewDashTileArray_From(src.Tiles);
        return res as carriers.PreviewDash;
}

export function Create_PreviewDashArray_From(src:any) : carriers.PreviewDash[] {
    let res : carriers.PreviewDash[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PreviewDash_From(src[i]);
        }
    }
    return res;
}

export function Create_PreviewDashArrayArray_From(src:any) : carriers.PreviewDash[][] {
    let res : carriers.PreviewDash[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PreviewDashArray_From(src[i]);
        }
    }
    return res;
}




export function Create_PreviewDashTile_From(src:any) : carriers.PreviewDashTile {
        if( src === null || src === undefined )
            return null;
        let res : carriers.PreviewDashTile = Create_Carrier_From(src) as carriers.PreviewDashTile;
        
        res.Name= src.Name as string;
        res.TileType= enums.DashTileType[src.TileType];
        return res as carriers.PreviewDashTile;
}

export function Create_PreviewDashTileArray_From(src:any) : carriers.PreviewDashTile[] {
    let res : carriers.PreviewDashTile[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PreviewDashTile_From(src[i]);
        }
    }
    return res;
}

export function Create_PreviewDashTileArrayArray_From(src:any) : carriers.PreviewDashTile[][] {
    let res : carriers.PreviewDashTile[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PreviewDashTileArray_From(src[i]);
        }
    }
    return res;
}














export function Create_TargetAssignment_From(src:any) : carriers.TargetAssignment {
        if( src === null || src === undefined )
            return null;
        let res : carriers.TargetAssignment = Create_Carrier_From(src) as carriers.TargetAssignment;
        
        res.TargetAssignmentInfoId= src.TargetAssignmentInfoId as number;
        res.Values= src.Values as number[];
        res.Locked= src.Locked as boolean;
        res.TargetAssociate= Create_Associate_From(src.TargetAssociate);
        res.TargetContact= Create_Contact_From(src.TargetContact);
        res.TargetUserGroup= Create_UserGroup_From(src.TargetUserGroup);
        res.Currency= Create_Currency_From(src.Currency);
        res.DimensionListItem= src.DimensionListItem as number;
        res.DimensionListItemDisplayName= src.DimensionListItemDisplayName as string;
        return res as carriers.TargetAssignment;
}

export function Create_TargetAssignmentArray_From(src:any) : carriers.TargetAssignment[] {
    let res : carriers.TargetAssignment[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TargetAssignment_From(src[i]);
        }
    }
    return res;
}

export function Create_TargetAssignmentArrayArray_From(src:any) : carriers.TargetAssignment[][] {
    let res : carriers.TargetAssignment[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TargetAssignmentArray_From(src[i]);
        }
    }
    return res;
}




export function Create_TargetChange_From(src:any) : carriers.TargetChange {
        if( src === null || src === undefined )
            return null;
        let res : carriers.TargetChange = Create_Carrier_From(src) as carriers.TargetChange;
        
        res.FieldIdentifier= src.FieldIdentifier as string;
        res.ValueChangeFrom= src.ValueChangeFrom as number;
        res.ValueChangeTo= src.ValueChangeTo as number;
        return res as carriers.TargetChange;
}

export function Create_TargetChangeArray_From(src:any) : carriers.TargetChange[] {
    let res : carriers.TargetChange[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TargetChange_From(src[i]);
        }
    }
    return res;
}

export function Create_TargetChangeArrayArray_From(src:any) : carriers.TargetChange[][] {
    let res : carriers.TargetChange[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TargetChangeArray_From(src[i]);
        }
    }
    return res;
}




export function Create_TargetDimension_From(src:any) : carriers.TargetDimension {
        if( src === null || src === undefined )
            return null;
        let res : carriers.TargetDimension = Create_Carrier_From(src) as carriers.TargetDimension;
        
        res.TargetDimensionId= src.TargetDimensionId as number;
        res.AssignmentLevel= Create_TargetAssignementLevel_From(src.AssignmentLevel) as enums.TargetAssignementLevel;
        res.EntityType= enums.TargetEntityType[src.EntityType];
        res.MeasurementUnit= enums.TargetMeasurementUnit[src.MeasurementUnit];
        res.DimensionListField= src.DimensionListField as string;
        res.DimensionListName= src.DimensionListName as string;
        res.DimensionListId= src.DimensionListId as number;
        res.DimensionListLabel= src.DimensionListLabel as string;
        res.SelectedDimensions= src.SelectedDimensions as number[];
        return res as carriers.TargetDimension;
}

export function Create_TargetDimensionArray_From(src:any) : carriers.TargetDimension[] {
    let res : carriers.TargetDimension[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TargetDimension_From(src[i]);
        }
    }
    return res;
}

export function Create_TargetDimensionArrayArray_From(src:any) : carriers.TargetDimension[][] {
    let res : carriers.TargetDimension[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TargetDimensionArray_From(src[i]);
        }
    }
    return res;
}




export function Create_TargetGroup_From(src:any) : carriers.TargetGroup {
        if( src === null || src === undefined )
            return null;
        let res : carriers.TargetGroup = Create_Carrier_From(src) as carriers.TargetGroup;
        
        res.TargetGroupId= src.TargetGroupId as number;
        res.Year= src.Year as number;
        res.EntityType= enums.TargetEntityType[src.EntityType];
        res.PeriodType= enums.TargetPeriodType[src.PeriodType];
        res.TargetAssignments= Create_TargetAssignmentArray_From(src.TargetAssignments);
        res.TargetDimension= Create_TargetDimension_From(src.TargetDimension);
        return res as carriers.TargetGroup;
}

export function Create_TargetGroupArray_From(src:any) : carriers.TargetGroup[] {
    let res : carriers.TargetGroup[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TargetGroup_From(src[i]);
        }
    }
    return res;
}

export function Create_TargetGroupArrayArray_From(src:any) : carriers.TargetGroup[][] {
    let res : carriers.TargetGroup[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TargetGroupArray_From(src[i]);
        }
    }
    return res;
}




export function Create_TargetRevision_From(src:any) : carriers.TargetRevision {
        if( src === null || src === undefined )
            return null;
        let res : carriers.TargetRevision = Create_Carrier_From(src) as carriers.TargetRevision;
        
        res.LogEvent= enums.LogEvent[src.LogEvent];
        res.Who= Create_Associate_From(src.Who);
        res.When= Create_Date_From(src.When);
        res.Changes= Create_TargetChangeArray_From(src.Changes);
        return res as carriers.TargetRevision;
}

export function Create_TargetRevisionArray_From(src:any) : carriers.TargetRevision[] {
    let res : carriers.TargetRevision[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TargetRevision_From(src[i]);
        }
    }
    return res;
}

export function Create_TargetRevisionArrayArray_From(src:any) : carriers.TargetRevision[][] {
    let res : carriers.TargetRevision[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TargetRevisionArray_From(src[i]);
        }
    }
    return res;
}




export function Create_TargetRevisionHistory_From(src:any) : carriers.TargetRevisionHistory {
        if( src === null || src === undefined )
            return null;
        let res : carriers.TargetRevisionHistory = Create_Carrier_From(src) as carriers.TargetRevisionHistory;
        
        res.TargetGroupId= src.TargetGroupId as number;
        res.Year= src.Year as number;
        res.Revisions= Create_TargetRevisionArray_From(src.Revisions);
        return res as carriers.TargetRevisionHistory;
}

export function Create_TargetRevisionHistoryArray_From(src:any) : carriers.TargetRevisionHistory[] {
    let res : carriers.TargetRevisionHistory[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TargetRevisionHistory_From(src[i]);
        }
    }
    return res;
}

export function Create_TargetRevisionHistoryArrayArray_From(src:any) : carriers.TargetRevisionHistory[][] {
    let res : carriers.TargetRevisionHistory[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TargetRevisionHistoryArray_From(src[i]);
        }
    }
    return res;
}













export function Create_Favourite_From(src:any) : carriers.Favourite {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Favourite = Create_Carrier_From(src) as carriers.Favourite;
        
        res.TableName= src.TableName as string;
        res.RecordId= src.RecordId as number;
        res.AssociateId= src.AssociateId as number;
        res.ExtraInfo= src.ExtraInfo as string;
        res.Rank= src.Rank as number;
        return res as carriers.Favourite;
}

export function Create_FavouriteArray_From(src:any) : carriers.Favourite[] {
    let res : carriers.Favourite[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Favourite_From(src[i]);
        }
    }
    return res;
}

export function Create_FavouriteArrayArray_From(src:any) : carriers.Favourite[][] {
    let res : carriers.Favourite[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FavouriteArray_From(src[i]);
        }
    }
    return res;
}





export function Create_DictionaryStepInformation_From(src:any) : carriers.DictionaryStepInformation {
        if( src === null || src === undefined )
            return null;
        let res : carriers.DictionaryStepInformation = Create_Carrier_From(src) as carriers.DictionaryStepInformation;
        
        res.Name= src.Name as string;
        res.StepNumber= src.StepNumber as number;
        return res as carriers.DictionaryStepInformation;
}

export function Create_DictionaryStepInformationArray_From(src:any) : carriers.DictionaryStepInformation[] {
    let res : carriers.DictionaryStepInformation[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DictionaryStepInformation_From(src[i]);
        }
    }
    return res;
}

export function Create_DictionaryStepInformationArrayArray_From(src:any) : carriers.DictionaryStepInformation[][] {
    let res : carriers.DictionaryStepInformation[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DictionaryStepInformationArray_From(src[i]);
        }
    }
    return res;
}






export function Create_ControlInfo_From(src:any) : carriers.ControlInfo {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ControlInfo = Create_Carrier_From(src) as carriers.ControlInfo;
        
        res.Type= src.Type as string;
        res.Label= src.Label as string;
        res.Dimension= src.Dimension as number;
        res.ListProviderName= src.ListProviderName as string;
        res.ListProviderExtraInfo= src.ListProviderExtraInfo as string;
        res.ListProviderPrimaryKeyName= src.ListProviderPrimaryKeyName as string;
        res.ListLeadText= src.ListLeadText as string;
        return res as carriers.ControlInfo;
}

export function Create_ControlInfoArray_From(src:any) : carriers.ControlInfo[] {
    let res : carriers.ControlInfo[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ControlInfo_From(src[i]);
        }
    }
    return res;
}

export function Create_ControlInfoArrayArray_From(src:any) : carriers.ControlInfo[][] {
    let res : carriers.ControlInfo[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ControlInfoArray_From(src[i]);
        }
    }
    return res;
}




export function Create_FieldValueInfo_From(src:any) : carriers.FieldValueInfo {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.CanSupportMultiUse= src.CanSupportMultiUse as boolean;
        res.DefaultShowInGui= src.DefaultShowInGui as boolean;
        res.DefaultShowInSelector= src.DefaultShowInSelector as boolean;
        res.IsActive= src.IsActive as boolean;
        res.Key= src.Key as string;
        res.ValueType= src.ValueType as string;
        res.Mandatory= src.Mandatory as boolean;
        res.EncodedDisplayName= src.EncodedDisplayName as string;
        res.EncodedDisplayDescription= src.EncodedDisplayDescription as string;
        res.IconHint= src.IconHint as string;
        res.ControlInfos= Create_ControlInfoArray_From(src.ControlInfos);
        res.EncodedDataCaption= src.EncodedDataCaption as string;
        res.EncodedDataCaptionDescription= src.EncodedDataCaptionDescription as string;
        res.CurrentOperationType= src.CurrentOperationType as string;
        res.Values= src.Values as string[];
        res.DisplayValues= src.DisplayValues as string[];
        res.OperationInfos= Create_OperationInfoArray_From(src.OperationInfos);
        return res as carriers.FieldValueInfo;
}

export function Create_FieldValueInfoArray_From(src:any) : carriers.FieldValueInfo[] {
    let res : carriers.FieldValueInfo[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldValueInfo_From(src[i]);
        }
    }
    return res;
}

export function Create_FieldValueInfoArrayArray_From(src:any) : carriers.FieldValueInfo[][] {
    let res : carriers.FieldValueInfo[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FieldValueInfoArray_From(src[i]);
        }
    }
    return res;
}




export function Create_OperationInfo_From(src:any) : carriers.OperationInfo {
        if( src === null || src === undefined )
            return null;
        let res : carriers.OperationInfo = Create_Carrier_From(src) as carriers.OperationInfo;
        
        res.Key= src.Key as string;
        res.EncodedDisplayName= src.EncodedDisplayName as string;
        res.EncodedLeadTexts= src.EncodedLeadTexts as string[];
        return res as carriers.OperationInfo;
}

export function Create_OperationInfoArray_From(src:any) : carriers.OperationInfo[] {
    let res : carriers.OperationInfo[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_OperationInfo_From(src[i]);
        }
    }
    return res;
}

export function Create_OperationInfoArrayArray_From(src:any) : carriers.OperationInfo[][] {
    let res : carriers.OperationInfo[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_OperationInfoArray_From(src[i]);
        }
    }
    return res;
}











export function Create_FormEntity_From(src:any) : carriers.FormEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.FormEntity = Create_Carrier_From(src) as carriers.FormEntity;
        
        res.FormId= src.FormId as number;
        res.FormKey= src.FormKey as string;
        res.Name= src.Name as string;
        res.Description= src.Description as string;
        res.Config= src.Config as string;
        res.FolderId= src.FolderId as number;
        res.ScriptId= src.ScriptId as number;
        res.ResponseShipmentId= src.ResponseShipmentId as number;
        res.Active= src.Active as boolean;
        res.Expires= Create_Date_From(src.Expires);
        res.MaxSubmits= src.MaxSubmits as number;
        res.Type= enums.FormType[src.Type];
        res.Recipe= src.Recipe as string;
        res.GroupId= src.GroupId as number;
        res.NewTicket= src.NewTicket as boolean;
        res.RecaptchaMode= enums.FormsRecaptchaMode[src.RecaptchaMode];
        res.Registered= Create_Date_From(src.Registered);
        res.RegisteredAssociateId= src.RegisteredAssociateId as number;
        res.Updated= Create_Date_From(src.Updated);
        res.UpdatedAssociateId= src.UpdatedAssociateId as number;
        res.UpdatedCount= src.UpdatedCount as number;
        res.FolderName= src.FolderName as string;
        return res as carriers.FormEntity;
}

export function Create_FormEntityArray_From(src:any) : carriers.FormEntity[] {
    let res : carriers.FormEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FormEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_FormEntityArrayArray_From(src:any) : carriers.FormEntity[][] {
    let res : carriers.FormEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FormEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_FormSubmissionEntity_From(src:any) : carriers.FormSubmissionEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.FormSubmissionEntity = Create_Carrier_From(src) as carriers.FormSubmissionEntity;
        
        res.FormSubmissionId= src.FormSubmissionId as number;
        res.FormId= src.FormId as number;
        res.WhenSubmitted= Create_Date_From(src.WhenSubmitted);
        res.ContactId= src.ContactId as number;
        res.PersonId= src.PersonId as number;
        res.EmailAddress= src.EmailAddress as string;
        res.ResponseShipmentAddrId= src.ResponseShipmentAddrId as number;
        res.Response= src.Response as string;
        res.Status= enums.FormSubmissionStatus[src.Status];
        res.ProcessingLog= src.ProcessingLog as string;
        return res as carriers.FormSubmissionEntity;
}

export function Create_FormSubmissionEntityArray_From(src:any) : carriers.FormSubmissionEntity[] {
    let res : carriers.FormSubmissionEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FormSubmissionEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_FormSubmissionEntityArrayArray_From(src:any) : carriers.FormSubmissionEntity[][] {
    let res : carriers.FormSubmissionEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_FormSubmissionEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_MailingStatistics_From(src:any) : carriers.MailingStatistics {
        if( src === null || src === undefined )
            return null;
        let res : carriers.MailingStatistics = Create_Carrier_From(src) as carriers.MailingStatistics;
        
        return res as carriers.MailingStatistics;
}

export function Create_MailingStatisticsArray_From(src:any) : carriers.MailingStatistics[] {
    let res : carriers.MailingStatistics[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_MailingStatistics_From(src[i]);
        }
    }
    return res;
}

export function Create_MailingStatisticsArrayArray_From(src:any) : carriers.MailingStatistics[][] {
    let res : carriers.MailingStatistics[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_MailingStatisticsArray_From(src[i]);
        }
    }
    return res;
}




export function Create_PreviewMailing_From(src:any) : carriers.PreviewMailing {
        if( src === null || src === undefined )
            return null;
        let res : carriers.PreviewMailing = Create_Carrier_From(src) as carriers.PreviewMailing;
        
        res.SendingTime= Create_Date_From(src.SendingTime);
        res.Status= enums.ShipmentAddrStatus[src.Status];
        res.ShipmentId= src.ShipmentId as number;
        res.ShipmentDescription= src.ShipmentDescription as string;
        res.FromAddress= src.FromAddress as string;
        res.ContactId= src.ContactId as number;
        res.ContactName= src.ContactName as string;
        res.PersonId= src.PersonId as number;
        res.PersonFullName= src.PersonFullName as string;
        res.ShipmentType= src.ShipmentType as string;
        res.MessageId= src.MessageId as number;
        res.MessageSubject= src.MessageSubject as string;
        res.DocumentMessageId= src.DocumentMessageId as number;
        res.Opened= Create_Date_From(src.Opened);
        res.LinkClicks= src.LinkClicks as number;
        return res as carriers.PreviewMailing;
}

export function Create_PreviewMailingArray_From(src:any) : carriers.PreviewMailing[] {
    let res : carriers.PreviewMailing[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PreviewMailing_From(src[i]);
        }
    }
    return res;
}

export function Create_PreviewMailingArrayArray_From(src:any) : carriers.PreviewMailing[][] {
    let res : carriers.PreviewMailing[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PreviewMailingArray_From(src[i]);
        }
    }
    return res;
}




export function Create_PreviewMailingHeader_From(src:any) : carriers.PreviewMailingHeader {
        if( src === null || src === undefined )
            return null;
        let res : carriers.PreviewMailingHeader = Create_Carrier_From(src) as carriers.PreviewMailingHeader;
        
        res.StartDate= Create_Date_From(src.StartDate);
        res.Status= enums.ShipmentStatus[src.Status];
        res.ShipmentId= src.ShipmentId as number;
        res.ShipmentDescription= src.ShipmentDescription as string;
        res.FromAddress= src.FromAddress as string;
        res.PersonId= src.PersonId as number;
        res.PersonFullName= src.PersonFullName as string;
        res.ShipmentType= src.ShipmentType as string;
        res.MessageId= src.MessageId as number;
        res.MessageSubject= src.MessageSubject as string;
        res.DocumentMessageId= src.DocumentMessageId as number;
        res.NumSent= src.NumSent as number;
        res.NumOpened= src.NumOpened as number;
        res.NumBounced= src.NumBounced as number;
        res.NumClicks= src.NumClicks as number;
        return res as carriers.PreviewMailingHeader;
}

export function Create_PreviewMailingHeaderArray_From(src:any) : carriers.PreviewMailingHeader[] {
    let res : carriers.PreviewMailingHeader[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PreviewMailingHeader_From(src[i]);
        }
    }
    return res;
}

export function Create_PreviewMailingHeaderArrayArray_From(src:any) : carriers.PreviewMailingHeader[][] {
    let res : carriers.PreviewMailingHeader[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_PreviewMailingHeaderArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ShipmentMessageBlockEntity_From(src:any) : carriers.ShipmentMessageBlockEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ShipmentMessageBlockEntity = Create_Carrier_From(src) as carriers.ShipmentMessageBlockEntity;
        
        res.ShipmentMessageBlockId= src.ShipmentMessageBlockId as number;
        res.AssociateId= src.AssociateId as number;
        res.Block= src.Block as string;
        res.Registered= Create_Date_From(src.Registered);
        res.RegisteredAssociateId= src.RegisteredAssociateId as number;
        res.Updated= Create_Date_From(src.Updated);
        res.UpdatedAssociateId= src.UpdatedAssociateId as number;
        res.UpdatedCount= src.UpdatedCount as number;
        return res as carriers.ShipmentMessageBlockEntity;
}

export function Create_ShipmentMessageBlockEntityArray_From(src:any) : carriers.ShipmentMessageBlockEntity[] {
    let res : carriers.ShipmentMessageBlockEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ShipmentMessageBlockEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_ShipmentMessageBlockEntityArrayArray_From(src:any) : carriers.ShipmentMessageBlockEntity[][] {
    let res : carriers.ShipmentMessageBlockEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ShipmentMessageBlockEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ShipmentMessageEntity_From(src:any) : carriers.ShipmentMessageEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ShipmentMessageEntity = Create_Carrier_From(src) as carriers.ShipmentMessageEntity;
        
        res.ShipmentMessageId= src.ShipmentMessageId as number;
        res.PlainMessage= src.PlainMessage as string;
        res.HtmlMessage= src.HtmlMessage as string;
        res.SmsMessage= src.SmsMessage as string;
        res.Description= src.Description as string;
        res.Subject= src.Subject as string;
        res.FolderId= src.FolderId as number;
        res.HeaderField= src.HeaderField as string;
        res.Design= src.Design as string;
        res.Designtype= enums.DesignType[src.Designtype];
        res.Flags= Create_ShipmentMessageType_From(src.Flags) as enums.ShipmentMessageType;
        res.RegisterViews= src.RegisterViews as boolean;
        res.InlineImages= src.InlineImages as boolean;
        res.LongDescription= src.LongDescription as string;
        res.AccessKey= src.AccessKey as string;
        res.DocumentMessage= src.DocumentMessage as number;
        res.Registered= Create_Date_From(src.Registered);
        res.RegisteredAssociateId= src.RegisteredAssociateId as number;
        res.Updated= Create_Date_From(src.Updated);
        res.UpdatedAssociateId= src.UpdatedAssociateId as number;
        res.UpdatedCount= src.UpdatedCount as number;
        return res as carriers.ShipmentMessageEntity;
}

export function Create_ShipmentMessageEntityArray_From(src:any) : carriers.ShipmentMessageEntity[] {
    let res : carriers.ShipmentMessageEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ShipmentMessageEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_ShipmentMessageEntityArrayArray_From(src:any) : carriers.ShipmentMessageEntity[][] {
    let res : carriers.ShipmentMessageEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ShipmentMessageEntityArray_From(src[i]);
        }
    }
    return res;
}





export function Create_Script_From(src:any) : carriers.Script {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Script = Create_Carrier_From(src) as carriers.Script;
        
        res.UniqueIdentifier= src.UniqueIdentifier as string;
        res.Name= src.Name as string;
        res.Description= src.Description as string;
        res.IncludeId= src.IncludeId as string;
        res.Source= src.Source as string;
        res.Registered= Create_Date_From(src.Registered);
        res.RegisteredBy= src.RegisteredBy as string;
        res.Updated= Create_Date_From(src.Updated);
        res.UpdatedBy= src.UpdatedBy as string;
        res.Path= src.Path as string;
        return res as carriers.Script;
}

export function Create_ScriptArray_From(src:any) : carriers.Script[] {
    let res : carriers.Script[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Script_From(src[i]);
        }
    }
    return res;
}

export function Create_ScriptArrayArray_From(src:any) : carriers.Script[][] {
    let res : carriers.Script[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ScriptArray_From(src[i]);
        }
    }
    return res;
}




export function Create_CRMScriptEntity_From(src:any) : carriers.CRMScriptEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.CRMScriptEntity = Create_Carrier_From(src) as carriers.CRMScriptEntity;
        
        res.EjscriptId= src.EjscriptId as number;
        res.UniqueIdentifier= src.UniqueIdentifier as string;
        res.Name= src.Name as string;
        res.Description= src.Description as string;
        res.IncludeId= src.IncludeId as string;
        res.HierarchyId= src.HierarchyId as number;
        res.Source= src.Source as string;
        res.Registered= Create_Date_From(src.Registered);
        res.RegisteredAssociateId= src.RegisteredAssociateId as number;
        res.Updated= Create_Date_From(src.Updated);
        res.UpdatedAssociateId= src.UpdatedAssociateId as number;
        return res as carriers.CRMScriptEntity;
}

export function Create_CRMScriptEntityArray_From(src:any) : carriers.CRMScriptEntity[] {
    let res : carriers.CRMScriptEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CRMScriptEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_CRMScriptEntityArrayArray_From(src:any) : carriers.CRMScriptEntity[][] {
    let res : carriers.CRMScriptEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CRMScriptEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_CRMScriptResult_From(src:any) : carriers.CRMScriptResult {
        if( src === null || src === undefined )
            return null;
        let res : carriers.CRMScriptResult = Create_Carrier_From(src) as carriers.CRMScriptResult;
        
        res.Valid= src.Valid as boolean;
        res.ErrorMessage= src.ErrorMessage as string;
        return res as carriers.CRMScriptResult;
}

export function Create_CRMScriptResultArray_From(src:any) : carriers.CRMScriptResult[] {
    let res : carriers.CRMScriptResult[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CRMScriptResult_From(src[i]);
        }
    }
    return res;
}

export function Create_CRMScriptResultArrayArray_From(src:any) : carriers.CRMScriptResult[][] {
    let res : carriers.CRMScriptResult[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CRMScriptResultArray_From(src[i]);
        }
    }
    return res;
}




export function Create_TriggerScriptEntity_From(src:any) : carriers.TriggerScriptEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.TriggerScriptEntity = Create_Carrier_From(src) as carriers.TriggerScriptEntity;
        
        res.ScreenChooserId= src.ScreenChooserId as number;
        res.Name= src.Name as string;
        res.ScreenType= enums.EventHandlerType[src.ScreenType];
        res.Enabled= src.Enabled as boolean;
        res.UniqueIdentifier= src.UniqueIdentifier as string;
        res.Source= src.Source as string;
        res.Registered= Create_Date_From(src.Registered);
        res.RegisteredAssociateId= src.RegisteredAssociateId as number;
        res.Updated= Create_Date_From(src.Updated);
        res.UpdatedAssociateId= src.UpdatedAssociateId as number;
        return res as carriers.TriggerScriptEntity;
}

export function Create_TriggerScriptEntityArray_From(src:any) : carriers.TriggerScriptEntity[] {
    let res : carriers.TriggerScriptEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TriggerScriptEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_TriggerScriptEntityArrayArray_From(src:any) : carriers.TriggerScriptEntity[][] {
    let res : carriers.TriggerScriptEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TriggerScriptEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_AttachmentEntity_From(src:any) : carriers.AttachmentEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.AttachmentEntity = Create_Carrier_From(src) as carriers.AttachmentEntity;
        
        res.AttachmentId= src.AttachmentId as number;
        res.Name= src.Name as string;
        res.ContentType= src.ContentType as string;
        res.AttSize= src.AttSize as number;
        res.InlineImage= src.InlineImage as boolean;
        res.ContentId= src.ContentId as string;
        res.AuthKey= src.AuthKey as string;
        return res as carriers.AttachmentEntity;
}

export function Create_AttachmentEntityArray_From(src:any) : carriers.AttachmentEntity[] {
    let res : carriers.AttachmentEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_AttachmentEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_AttachmentEntityArrayArray_From(src:any) : carriers.AttachmentEntity[][] {
    let res : carriers.AttachmentEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_AttachmentEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_AttachmentValidationResult_From(src:any) : carriers.AttachmentValidationResult {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.AttachmentId= src.AttachmentId as number;
        res.IsValid= src.IsValid as boolean;
        res.ErrorMessage= src.ErrorMessage as string;
        return res as carriers.AttachmentValidationResult;
}

export function Create_AttachmentValidationResultArray_From(src:any) : carriers.AttachmentValidationResult[] {
    let res : carriers.AttachmentValidationResult[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_AttachmentValidationResult_From(src[i]);
        }
    }
    return res;
}

export function Create_AttachmentValidationResultArrayArray_From(src:any) : carriers.AttachmentValidationResult[][] {
    let res : carriers.AttachmentValidationResult[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_AttachmentValidationResultArray_From(src[i]);
        }
    }
    return res;
}




export function Create_Ticket_From(src:any) : carriers.Ticket {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Ticket = Create_Carrier_From(src) as carriers.Ticket;
        
        res.TicketId= src.TicketId as number;
        res.Title= src.Title as string;
        res.CreatedAt= Create_Date_From(src.CreatedAt);
        res.LastChanged= Create_Date_From(src.LastChanged);
        res.ReadByOwner= Create_Date_From(src.ReadByOwner);
        res.ReadByCustomer= Create_Date_From(src.ReadByCustomer);
        res.FirstReadByUser= Create_Date_From(src.FirstReadByUser);
        res.Activate= Create_Date_From(src.Activate);
        res.ClosedAt= Create_Date_From(src.ClosedAt);
        res.RepliedAt= Create_Date_From(src.RepliedAt);
        res.AlertTimeout= Create_Date_From(src.AlertTimeout);
        res.Deadline= Create_Date_From(src.Deadline);
        res.CreatedBy= src.CreatedBy as number;
        res.CreatedByName= src.CreatedByName as string;
        res.Author= src.Author as string;
        res.OwnedBy= src.OwnedBy as number;
        res.OwnedByName= src.OwnedByName as string;
        res.Category= src.Category as number;
        res.CategoryName= src.CategoryName as string;
        res.CategoryFullname= src.CategoryFullname as string;
        res.Slevel= enums.TicketSecurityLevel[src.Slevel];
        res.Priority= src.Priority as number;
        res.PriorityName= src.PriorityName as string;
        res.BaseStatus= enums.TicketBaseStatus[src.BaseStatus];
        res.TicketStatus= src.TicketStatus as number;
        res.TicketStatusDisplayValue= src.TicketStatusDisplayValue as string;
        res.Origin= enums.TicketOrigin[src.Origin];
        res.CustId= src.CustId as number;
        res.PersonFirstname= src.PersonFirstname as string;
        res.PersonMiddleName= src.PersonMiddleName as string;
        res.PersonLastname= src.PersonLastname as string;
        res.PersonFullname= src.PersonFullname as string;
        res.AlertLevel= src.AlertLevel as number;
        res.ConnectId= src.ConnectId as number;
        res.ReadStatus= enums.TicketReadStatus[src.ReadStatus];
        res.TimeToReply= src.TimeToReply as number;
        res.RealTimeToReply= src.RealTimeToReply as number;
        res.TimeToClose= src.TimeToClose as number;
        res.RealTimeToClose= src.RealTimeToClose as number;
        res.TimeSpentInternally= src.TimeSpentInternally as number;
        res.TimeSpentExternally= src.TimeSpentExternally as number;
        res.TimeSpentQueue= src.TimeSpentQueue as number;
        res.RealTimeSpentInternally= src.RealTimeSpentInternally as number;
        res.RealTimeSpentExternally= src.RealTimeSpentExternally as number;
        res.RealTimeSpentQueue= src.RealTimeSpentQueue as number;
        res.HasAttachment= src.HasAttachment as boolean;
        res.NumReplies= src.NumReplies as number;
        res.NumMessages= src.NumMessages as number;
        res.FromAddress= src.FromAddress as string;
        res.ContactId= src.ContactId as number;
        res.ContactName= src.ContactName as string;
        res.OwnedByAssociateId= src.OwnedByAssociateId as number;
        res.Language= src.Language as string;
        res.Sentiment= src.Sentiment as number;
        res.SentimentConfidence= src.SentimentConfidence as number;
        res.SaleId= src.SaleId as number;
        res.ProjectId= src.ProjectId as number;
        res.SaleHeading= src.SaleHeading as string;
        res.ProjectName= src.ProjectName as string;
        res.FormSubmissionId= src.FormSubmissionId as number;
        return res as carriers.Ticket;
}

export function Create_TicketArray_From(src:any) : carriers.Ticket[] {
    let res : carriers.Ticket[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Ticket_From(src[i]);
        }
    }
    return res;
}

export function Create_TicketArrayArray_From(src:any) : carriers.Ticket[][] {
    let res : carriers.Ticket[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TicketArray_From(src[i]);
        }
    }
    return res;
}




export function Create_TicketBatchReplyData_From(src:any) : carriers.TicketBatchReplyData {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.TicketIds= src.TicketIds as number[];
        res.CloseTickets= src.CloseTickets as boolean;
        res.AttachmentIds= src.AttachmentIds as number[];
        res.HtmlBody= src.HtmlBody as string;
        res.Slevel= enums.TicketSecurityLevel[src.Slevel];
        res.TimeSpent= src.TimeSpent as number;
        res.SendCopyToCustomer= src.SendCopyToCustomer as boolean;
        return res as carriers.TicketBatchReplyData;
}

export function Create_TicketBatchReplyDataArray_From(src:any) : carriers.TicketBatchReplyData[] {
    let res : carriers.TicketBatchReplyData[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TicketBatchReplyData_From(src[i]);
        }
    }
    return res;
}

export function Create_TicketBatchReplyDataArrayArray_From(src:any) : carriers.TicketBatchReplyData[][] {
    let res : carriers.TicketBatchReplyData[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TicketBatchReplyDataArray_From(src[i]);
        }
    }
    return res;
}




export function Create_TicketEntity_From(src:any) : carriers.TicketEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.TicketEntity = Create_Carrier_From(src) as carriers.TicketEntity;
        
        res.TicketId= src.TicketId as number;
        res.Title= src.Title as string;
        res.CreatedAt= Create_Date_From(src.CreatedAt);
        res.LastChanged= Create_Date_From(src.LastChanged);
        res.ReadByOwner= Create_Date_From(src.ReadByOwner);
        res.ReadByCustomer= Create_Date_From(src.ReadByCustomer);
        res.FirstReadByOwner= Create_Date_From(src.FirstReadByOwner);
        res.FirstReadByUser= Create_Date_From(src.FirstReadByUser);
        res.Activate= Create_Date_From(src.Activate);
        res.ClosedAt= Create_Date_From(src.ClosedAt);
        res.RepliedAt= Create_Date_From(src.RepliedAt);
        res.AlertTimeout= Create_Date_From(src.AlertTimeout);
        res.Deadline= Create_Date_From(src.Deadline);
        res.CreatedBy= Create_Associate_From(src.CreatedBy);
        res.Author= src.Author as string;
        res.OwnedBy= Create_Associate_From(src.OwnedBy);
        res.Category= Create_TicketCategoryEntity_From(src.Category);
        res.Slevel= enums.TicketSecurityLevel[src.Slevel];
        res.Priority= Create_TicketPriorityEntity_From(src.Priority);
        res.BaseStatus= enums.TicketBaseStatus[src.BaseStatus];
        res.Status= Create_TicketStatusEntity_From(src.Status);
        res.Origin= enums.TicketOrigin[src.Origin];
        res.Person= Create_Person_From(src.Person);
        res.SecondaryPersons= Create_PersonArray_From(src.SecondaryPersons);
        res.AlertLevel= src.AlertLevel as number;
        res.ConnectId= src.ConnectId as number;
        res.ReadStatus= enums.TicketReadStatus[src.ReadStatus];
        res.TimeToReply= src.TimeToReply as number;
        res.RealTimeToReply= src.RealTimeToReply as number;
        res.TimeToClose= src.TimeToClose as number;
        res.RealTimeToClose= src.RealTimeToClose as number;
        res.TimeSpentInternally= src.TimeSpentInternally as number;
        res.TimeSpentExternally= src.TimeSpentExternally as number;
        res.TimeSpentQueue= src.TimeSpentQueue as number;
        res.RealTimeSpentInternally= src.RealTimeSpentInternally as number;
        res.RealTimeSpentExternally= src.RealTimeSpentExternally as number;
        res.RealTimeSpentQueue= src.RealTimeSpentQueue as number;
        res.HasAttachment= src.HasAttachment as boolean;
        res.NumReplies= src.NumReplies as number;
        res.NumMessages= src.NumMessages as number;
        res.FromAddress= src.FromAddress as string;
        res.Messages= Create_TicketMessageArray_From(src.Messages);
        res.Tags= Create_TagArray_From(src.Tags);
        res.Language= src.Language as string;
        res.Sentiment= src.Sentiment as number;
        res.SentimentConfidence= src.SentimentConfidence as number;
        res.SuggestedCategoryId= src.SuggestedCategoryId as number;
        res.SuggestedCategoryName= src.SuggestedCategoryName as string;
        res.OrigHumanCategoryId= src.OrigHumanCategoryId as number;
        res.IconHint= src.IconHint as string;
        res.Sale= Create_Sale_From(src.Sale);
        res.Project= Create_Project_From(src.Project);
        res.FormSubmission= Create_TicketFormSubmission_From(src.FormSubmission);
        res.ExtraFields= src.ExtraFields as carriers.StringDictionary;
        res.CustomFields= src.CustomFields as carriers.StringDictionary;
        return res as carriers.TicketEntity;
}

export function Create_TicketEntityArray_From(src:any) : carriers.TicketEntity[] {
    let res : carriers.TicketEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TicketEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_TicketEntityArrayArray_From(src:any) : carriers.TicketEntity[][] {
    let res : carriers.TicketEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TicketEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_TicketMessage_From(src:any) : carriers.TicketMessage {
        if( src === null || src === undefined )
            return null;
        let res : carriers.TicketMessage = Create_Carrier_From(src) as carriers.TicketMessage;
        
        res.TicketMessageId= src.TicketMessageId as number;
        res.CreatedAt= Create_Date_From(src.CreatedAt);
        res.Slevel= enums.TicketSecurityLevel[src.Slevel];
        res.Important= src.Important as boolean;
        res.Author= src.Author as string;
        res.PersonId= src.PersonId as number;
        res.PersonFullName= src.PersonFullName as string;
        res.ContactId= src.ContactId as number;
        res.ContactName= src.ContactName as string;
        res.ContactDepartment= src.ContactDepartment as string;
        res.NumAttachments= src.NumAttachments as number;
        res.EmailHeader= src.EmailHeader as string;
        res.MessageHeaders= Create_TicketMessageHeaderArray_From(src.MessageHeaders);
        res.Language= src.Language as string;
        res.Sentiment= src.Sentiment as number;
        res.SentimentConfidence= src.SentimentConfidence as number;
        res.CreatedBy= src.CreatedBy as number;
        res.ChangedAt= Create_Date_From(src.ChangedAt);
        res.Badge= enums.BadgeType[src.Badge];
        return res as carriers.TicketMessage;
}

export function Create_TicketMessageArray_From(src:any) : carriers.TicketMessage[] {
    let res : carriers.TicketMessage[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TicketMessage_From(src[i]);
        }
    }
    return res;
}

export function Create_TicketMessageArrayArray_From(src:any) : carriers.TicketMessage[][] {
    let res : carriers.TicketMessage[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TicketMessageArray_From(src[i]);
        }
    }
    return res;
}




export function Create_TicketMessageEntity_From(src:any) : carriers.TicketMessageEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.TicketMessageEntity = Create_Carrier_From(src) as carriers.TicketMessageEntity;
        
        res.EjMessageId= src.EjMessageId as number;
        res.Ticket= Create_Ticket_From(src.Ticket);
        res.CreatedAt= Create_Date_From(src.CreatedAt);
        res.CreatedBy= Create_Associate_From(src.CreatedBy);
        res.Author= src.Author as string;
        res.Slevel= enums.TicketSecurityLevel[src.Slevel];
        res.Type= enums.TicketMessageType[src.Type];
        res.MessageId= src.MessageId as string;
        res.TimeSpent= src.TimeSpent as number;
        res.Body= src.Body as string;
        res.HtmlBody= src.HtmlBody as string;
        res.EmailHeader= src.EmailHeader as string;
        res.DebugInfo= src.DebugInfo as string;
        res.MailSorter= src.MailSorter as string;
        res.MessageCategory= enums.TicketMessageCategory[src.MessageCategory];
        res.Person= Create_Person_From(src.Person);
        res.SearchTitle= src.SearchTitle as string;
        res.MessageHeaders= Create_TicketMessageHeaderArray_From(src.MessageHeaders);
        res.Important= src.Important as boolean;
        res.Language= src.Language as string;
        res.Sentiment= src.Sentiment as number;
        res.SentimentConfidence= src.SentimentConfidence as number;
        res.Badge= enums.BadgeType[src.Badge];
        res.AttachmentsInfo= Create_AttachmentEntityArray_From(src.AttachmentsInfo);
        res.ExtraFields= src.ExtraFields as carriers.StringDictionary;
        res.CustomFields= src.CustomFields as carriers.StringDictionary;
        return res as carriers.TicketMessageEntity;
}

export function Create_TicketMessageEntityArray_From(src:any) : carriers.TicketMessageEntity[] {
    let res : carriers.TicketMessageEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TicketMessageEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_TicketMessageEntityArrayArray_From(src:any) : carriers.TicketMessageEntity[][] {
    let res : carriers.TicketMessageEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TicketMessageEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_TicketSummaryItem_From(src:any) : carriers.TicketSummaryItem {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.TicketId= src.TicketId as number;
        res.TicketStatus= src.TicketStatus as number;
        res.Title= src.Title as string;
        res.Registered= Create_Date_From(src.Registered);
        res.IconHint= src.IconHint as string;
        return res as carriers.TicketSummaryItem;
}

export function Create_TicketSummaryItemArray_From(src:any) : carriers.TicketSummaryItem[] {
    let res : carriers.TicketSummaryItem[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TicketSummaryItem_From(src[i]);
        }
    }
    return res;
}

export function Create_TicketSummaryItemArrayArray_From(src:any) : carriers.TicketSummaryItem[][] {
    let res : carriers.TicketSummaryItem[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TicketSummaryItemArray_From(src[i]);
        }
    }
    return res;
}















export function Create_TableRecord_From(src:any) : carriers.TableRecord {
        if( src === null || src === undefined )
            return null;
        let res : carriers.TableRecord = Create_Carrier_From(src) as carriers.TableRecord;
        
        res.Values= Create_StringDictionary_From(src.Values);
        return res as carriers.TableRecord;
}

export function Create_TableRecordArray_From(src:any) : carriers.TableRecord[] {
    let res : carriers.TableRecord[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TableRecord_From(src[i]);
        }
    }
    return res;
}

export function Create_TableRecordArrayArray_From(src:any) : carriers.TableRecord[][] {
    let res : carriers.TableRecord[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_TableRecordArray_From(src[i]);
        }
    }
    return res;
}




export function Create_UpsertRowStatus_From(src:any) : carriers.UpsertRowStatus {
        if( src === null || src === undefined )
            return null;
        let res : carriers.UpsertRowStatus = Create_Carrier_From(src) as carriers.UpsertRowStatus;
        
        res.PrimaryKey= src.PrimaryKey as number;
        res.Action= enums.UpsertRowActionStatus[src.Action];
        res.RowKeys= src.RowKeys as string[];
        return res as carriers.UpsertRowStatus;
}

export function Create_UpsertRowStatusArray_From(src:any) : carriers.UpsertRowStatus[] {
    let res : carriers.UpsertRowStatus[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_UpsertRowStatus_From(src[i]);
        }
    }
    return res;
}

export function Create_UpsertRowStatusArrayArray_From(src:any) : carriers.UpsertRowStatus[][] {
    let res : carriers.UpsertRowStatus[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_UpsertRowStatusArray_From(src[i]);
        }
    }
    return res;
}




export function Create_MassOperationResult_From(src:any) : carriers.MassOperationResult {
        if( src === null || src === undefined )
            return null;
        let res : carriers.MassOperationResult = Create_Carrier_From(src) as carriers.MassOperationResult;
        
        res.Success= src.Success as boolean;
        res.Message= src.Message as string;
        res.Inserts= src.Inserts as number;
        res.Updates= src.Updates as number;
        res.Deletes= src.Deletes as number;
        res.RowStatus= Create_UpsertRowStatusArray_From(src.RowStatus);
        return res as carriers.MassOperationResult;
}

export function Create_MassOperationResultArray_From(src:any) : carriers.MassOperationResult[] {
    let res : carriers.MassOperationResult[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_MassOperationResult_From(src[i]);
        }
    }
    return res;
}

export function Create_MassOperationResultArrayArray_From(src:any) : carriers.MassOperationResult[][] {
    let res : carriers.MassOperationResult[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_MassOperationResultArray_From(src[i]);
        }
    }
    return res;
}





export function Create_ChatBotSettings_From(src:any) : carriers.ChatBotSettings {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.BotName= src.BotName as string;
        res.BotRegisterScriptId= src.BotRegisterScriptId as number;
        res.BotSessionCreatedScriptId= src.BotSessionCreatedScriptId as number;
        res.BotSessionChangedScriptId= src.BotSessionChangedScriptId as number;
        res.BotMessageReceivedScriptId= src.BotMessageReceivedScriptId as number;
        return res as carriers.ChatBotSettings;
}

export function Create_ChatBotSettingsArray_From(src:any) : carriers.ChatBotSettings[] {
    let res : carriers.ChatBotSettings[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ChatBotSettings_From(src[i]);
        }
    }
    return res;
}

export function Create_ChatBotSettingsArrayArray_From(src:any) : carriers.ChatBotSettings[][] {
    let res : carriers.ChatBotSettings[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ChatBotSettingsArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ChatMessage_From(src:any) : carriers.ChatMessage {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.ChatMessageId= src.ChatMessageId as number;
        res.ChatSessionId= src.ChatSessionId as number;
        res.Type= enums.ChatMessageType[src.Type];
        res.Message= src.Message as string;
        res.Author= src.Author as string;
        res.ReadByCustomer= src.ReadByCustomer as number;
        res.SpecialType= enums.ChatMessageSpecialType[src.SpecialType];
        res.SpecialParam= src.SpecialParam as string;
        res.WhenPosted= Create_Date_From(src.WhenPosted);
        return res as carriers.ChatMessage;
}

export function Create_ChatMessageArray_From(src:any) : carriers.ChatMessage[] {
    let res : carriers.ChatMessage[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ChatMessage_From(src[i]);
        }
    }
    return res;
}

export function Create_ChatMessageArrayArray_From(src:any) : carriers.ChatMessage[][] {
    let res : carriers.ChatMessage[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ChatMessageArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ChatOpeningHours_From(src:any) : carriers.ChatOpeningHours {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.TzLocation= Create_TimeZoneData_From(src.TzLocation);
        res.MonEnabled= src.MonEnabled as boolean;
        res.MonStart= Create_Duration_From(src.MonStart);
        res.MonStop= Create_Duration_From(src.MonStop);
        res.TueEnabled= src.TueEnabled as boolean;
        res.TueStart= Create_Duration_From(src.TueStart);
        res.TueStop= Create_Duration_From(src.TueStop);
        res.WedEnabled= src.WedEnabled as boolean;
        res.WedStart= Create_Duration_From(src.WedStart);
        res.WedStop= Create_Duration_From(src.WedStop);
        res.ThuEnabled= src.ThuEnabled as boolean;
        res.ThuStart= Create_Duration_From(src.ThuStart);
        res.ThuStop= Create_Duration_From(src.ThuStop);
        res.FriEnabled= src.FriEnabled as boolean;
        res.FriStart= Create_Duration_From(src.FriStart);
        res.FriStop= Create_Duration_From(src.FriStop);
        res.SatEnabled= src.SatEnabled as boolean;
        res.SatStart= Create_Duration_From(src.SatStart);
        res.SatStop= Create_Duration_From(src.SatStop);
        res.SunEnabled= src.SunEnabled as boolean;
        res.SunStart= Create_Duration_From(src.SunStart);
        res.SunStop= Create_Duration_From(src.SunStop);
        res.UseLunchHours= src.UseLunchHours as boolean;
        res.LunchStart= Create_Duration_From(src.LunchStart);
        res.LunchStop= Create_Duration_From(src.LunchStop);
        return res as carriers.ChatOpeningHours;
}

export function Create_ChatOpeningHoursArray_From(src:any) : carriers.ChatOpeningHours[] {
    let res : carriers.ChatOpeningHours[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ChatOpeningHours_From(src[i]);
        }
    }
    return res;
}

export function Create_ChatOpeningHoursArrayArray_From(src:any) : carriers.ChatOpeningHours[][] {
    let res : carriers.ChatOpeningHours[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ChatOpeningHoursArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ChatPresence_From(src:any) : carriers.ChatPresence {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ChatPresence = Create_Carrier_From(src) as carriers.ChatPresence;
        
        res.UserId= src.UserId as number;
        res.DisplayName= src.DisplayName as string;
        res.OngoingChats= src.OngoingChats as number;
        res.Present= src.Present as boolean;
        res.ChatTopics= src.ChatTopics as number[];
        return res as carriers.ChatPresence;
}

export function Create_ChatPresenceArray_From(src:any) : carriers.ChatPresence[] {
    let res : carriers.ChatPresence[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ChatPresence_From(src[i]);
        }
    }
    return res;
}

export function Create_ChatPresenceArrayArray_From(src:any) : carriers.ChatPresence[][] {
    let res : carriers.ChatPresence[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ChatPresenceArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ChatSessionEntity_From(src:any) : carriers.ChatSessionEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ChatSessionEntity = Create_Carrier_From(src) as carriers.ChatSessionEntity;
        
        res.ChatSessionId= src.ChatSessionId as number;
        res.TopicId= src.TopicId as number;
        res.User= Create_Associate_From(src.User);
        res.Person= Create_Person_From(src.Person);
        res.CustomerAlias= src.CustomerAlias as string;
        res.CustomerHost= src.CustomerHost as string;
        res.CustomerName= src.CustomerName as string;
        res.CustomerEmail= src.CustomerEmail as string;
        res.CustomerPhone= src.CustomerPhone as string;
        res.CustomerConsented= src.CustomerConsented as boolean;
        res.CustomerCompanyName= src.CustomerCompanyName as string;
        res.Status= enums.ChatSessionStatus[src.Status];
        res.FirstMessage= src.FirstMessage as string;
        res.LastMessage= src.LastMessage as string;
        res.WhenRequested= Create_Date_From(src.WhenRequested);
        res.WhenStarted= Create_Date_From(src.WhenStarted);
        res.WhenEnded= Create_Date_From(src.WhenEnded);
        res.WhenIdle= Create_Date_From(src.WhenIdle);
        res.WhenFetched= Create_Date_From(src.WhenFetched);
        res.SessionKey= src.SessionKey as string;
        res.InitialQueuePos= src.InitialQueuePos as number;
        res.AlertLevel= src.AlertLevel as number;
        res.Rank= src.Rank as number;
        res.Flags= Create_ChatSessionFlags_From(src.Flags) as enums.ChatSessionFlags;
        res.Contact= Create_Contact_From(src.Contact);
        res.Project= Create_Project_From(src.Project);
        res.Sale= Create_Sale_From(src.Sale);
        res.Ticket= Create_Ticket_From(src.Ticket);
        res.TransferTo= Create_Associate_From(src.TransferTo);
        res.ChatbotIsActive= src.ChatbotIsActive as boolean;
        res.Rating= src.Rating as number;
        return res as carriers.ChatSessionEntity;
}

export function Create_ChatSessionEntityArray_From(src:any) : carriers.ChatSessionEntity[] {
    let res : carriers.ChatSessionEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ChatSessionEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_ChatSessionEntityArrayArray_From(src:any) : carriers.ChatSessionEntity[][] {
    let res : carriers.ChatSessionEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ChatSessionEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ChatSummaryItem_From(src:any) : carriers.ChatSummaryItem {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.ChatSessionId= src.ChatSessionId as number;
        res.Name= src.Name as string;
        res.CompanyName= src.CompanyName as string;
        res.FirstMessage= src.FirstMessage as string;
        res.LastMessage= src.LastMessage as string;
        res.WhenRequested= Create_Date_From(src.WhenRequested);
        res.WhenEnded= Create_Date_From(src.WhenEnded);
        return res as carriers.ChatSummaryItem;
}

export function Create_ChatSummaryItemArray_From(src:any) : carriers.ChatSummaryItem[] {
    let res : carriers.ChatSummaryItem[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ChatSummaryItem_From(src[i]);
        }
    }
    return res;
}

export function Create_ChatSummaryItemArrayArray_From(src:any) : carriers.ChatSummaryItem[][] {
    let res : carriers.ChatSummaryItem[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ChatSummaryItemArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ChatTopicAgent_From(src:any) : carriers.ChatTopicAgent {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.TopicId= src.TopicId as number;
        res.User= Create_Associate_From(src.User);
        res.CanListen= src.CanListen as boolean;
        res.CanRespond= src.CanRespond as boolean;
        res.CanManage= src.CanManage as boolean;
        res.CanNotify= src.CanNotify as boolean;
        return res as carriers.ChatTopicAgent;
}

export function Create_ChatTopicAgentArray_From(src:any) : carriers.ChatTopicAgent[] {
    let res : carriers.ChatTopicAgent[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ChatTopicAgent_From(src[i]);
        }
    }
    return res;
}

export function Create_ChatTopicAgentArrayArray_From(src:any) : carriers.ChatTopicAgent[][] {
    let res : carriers.ChatTopicAgent[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ChatTopicAgentArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ChatTopicEntity_From(src:any) : carriers.ChatTopicEntity {
        if( src === null || src === undefined )
            return null;
        let res : carriers.ChatTopicEntity = Create_Carrier_From(src) as carriers.ChatTopicEntity;
        
        res.ChatTopicId= src.ChatTopicId as number;
        res.Name= src.Name as string;
        res.Description= src.Description as string;
        res.WelcomeMessage= src.WelcomeMessage as string;
        res.Language= Create_CustomerLanguage_From(src.Language);
        res.LastAccept= Create_Date_From(src.LastAccept);
        res.SecondsPrAccept= src.SecondsPrAccept as number;
        res.AlertRecipient= src.AlertRecipient as string;
        res.AlertTemplate= Create_ReplyTemplate_From(src.AlertTemplate);
        res.CollectConsent= src.CollectConsent as boolean;
        res.BadgeHeader= src.BadgeHeader as string;
        res.CustomQueueTextEnabled= src.CustomQueueTextEnabled as boolean;
        res.CustomQueueText= src.CustomQueueText as string;
        res.WarnNewChatMinutes= src.WarnNewChatMinutes as number;
        res.WarnManagerNewChatMinutes= src.WarnManagerNewChatMinutes as number;
        res.TicketEnabled= src.TicketEnabled as boolean;
        res.TicketCategory= Create_TicketCategory_From(src.TicketCategory);
        res.TicketPriority= Create_TicketPriority_From(src.TicketPriority);
        res.OpeningHoursEnabled= src.OpeningHoursEnabled as boolean;
        res.OpeningHours= Create_ChatOpeningHours_From(src.OpeningHours);
        res.Widget= Create_ChatWidgetSettings_From(src.Widget);
        res.BotEnabled= src.BotEnabled as boolean;
        res.BotSettings= Create_ChatBotSettings_From(src.BotSettings);
        res.OfflineCollectConsent= src.OfflineCollectConsent as boolean;
        res.WarnChatMessageMinutes= src.WarnChatMessageMinutes as number;
        res.WarnManagerChatMessageMinutes= src.WarnManagerChatMessageMinutes as number;
        res.UseQueueOfflineForm= src.UseQueueOfflineForm as boolean;
        res.OfflineFormTimeLimit= src.OfflineFormTimeLimit as number;
        res.OfflineFormQueueLength= src.OfflineFormQueueLength as number;
        res.WidgetEnableRating= src.WidgetEnableRating as boolean;
        res.WidgetRatingText= src.WidgetRatingText as string;
        return res as carriers.ChatTopicEntity;
}

export function Create_ChatTopicEntityArray_From(src:any) : carriers.ChatTopicEntity[] {
    let res : carriers.ChatTopicEntity[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ChatTopicEntity_From(src[i]);
        }
    }
    return res;
}

export function Create_ChatTopicEntityArrayArray_From(src:any) : carriers.ChatTopicEntity[][] {
    let res : carriers.ChatTopicEntity[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ChatTopicEntityArray_From(src[i]);
        }
    }
    return res;
}




export function Create_ChatWidgetSettings_From(src:any) : carriers.ChatWidgetSettings {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.AutoFaqEnabled= src.AutoFaqEnabled as boolean;
        res.AutoFaqCategory= Create_KbCategory_From(src.AutoFaqCategory);
        res.PreFormEnabled= src.PreFormEnabled as boolean;
        res.PreFormMessage= src.PreFormMessage as string;
        res.RequiredFields= Create_WidgetRequiredFields_From(src.RequiredFields) as enums.WidgetRequiredFields;
        res.PostFormEnabled= src.PostFormEnabled as boolean;
        res.PostFormHeader= src.PostFormHeader as string;
        res.PostFormMessage= src.PostFormMessage as string;
        res.PostTranscriptEnabled= src.PostTranscriptEnabled as boolean;
        res.LanguageIsoCode= src.LanguageIsoCode as string;
        res.Size= enums.ChatWidgetSize[src.Size];
        res.Theme= enums.WidgetTheme[src.Theme];
        res.Color= src.Color as string;
        res.BadgeColor= src.BadgeColor as string;
        res.BadgeTextColor= src.BadgeTextColor as string;
        res.CustMsgColor= src.CustMsgColor as string;
        res.CustMsgTextColor= src.CustMsgTextColor as string;
        res.AgentMsgColor= src.AgentMsgColor as string;
        res.AgentMsgTextColor= src.AgentMsgTextColor as string;
        res.ButtonColor= src.ButtonColor as string;
        res.ButtonTextColor= src.ButtonTextColor as string;
        res.Font= src.Font as string;
        res.FontSize= src.FontSize as string;
        res.LogoEnabled= src.LogoEnabled as boolean;
        res.LogoBlobId= src.LogoBlobId as number;
        res.LogoName= src.LogoName as string;
        res.ShowAgentPhoto= src.ShowAgentPhoto as boolean;
        res.WelcomeTitle= src.WelcomeTitle as string;
        res.WelcomeMessage= src.WelcomeMessage as string;
        res.OfflineHeader= src.OfflineHeader as string;
        res.OfflineMessage= src.OfflineMessage as string;
        res.OfflineFields= Create_WidgetRequiredFields_From(src.OfflineFields) as enums.WidgetRequiredFields;
        res.UseAgentFirstname= src.UseAgentFirstname as boolean;
        return res as carriers.ChatWidgetSettings;
}

export function Create_ChatWidgetSettingsArray_From(src:any) : carriers.ChatWidgetSettings[] {
    let res : carriers.ChatWidgetSettings[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ChatWidgetSettings_From(src[i]);
        }
    }
    return res;
}

export function Create_ChatWidgetSettingsArrayArray_From(src:any) : carriers.ChatWidgetSettings[][] {
    let res : carriers.ChatWidgetSettings[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_ChatWidgetSettingsArray_From(src[i]);
        }
    }
    return res;
}














export function Create_CategorizationModelDetails_From(src:any) : carriers.CategorizationModelDetails {
        if( src === null || src === undefined )
            return null;
        let res : carriers.CategorizationModelDetails = Create_Carrier_From(src) as carriers.CategorizationModelDetails;
        
        res.ModelBuiltDateTime= Create_Date_From(src.ModelBuiltDateTime);
        res.Accuracy= src.Accuracy as number;
        res.TicketCountForTraining= src.TicketCountForTraining as number;
        return res as carriers.CategorizationModelDetails;
}

export function Create_CategorizationModelDetailsArray_From(src:any) : carriers.CategorizationModelDetails[] {
    let res : carriers.CategorizationModelDetails[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CategorizationModelDetails_From(src[i]);
        }
    }
    return res;
}

export function Create_CategorizationModelDetailsArrayArray_From(src:any) : carriers.CategorizationModelDetails[][] {
    let res : carriers.CategorizationModelDetails[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CategorizationModelDetailsArray_From(src[i]);
        }
    }
    return res;
}




export function Create_CategorizationStatusResponse_From(src:any) : carriers.CategorizationStatusResponse {
        if( src === null || src === undefined )
            return null;
        let res : carriers.CategorizationStatusResponse = Create_Carrier_From(src) as carriers.CategorizationStatusResponse;
        
        res.ContextIdentifier= src.ContextIdentifier as string;
        res.Status= src.Status as string;
        res.CurrentModel= Create_CategorizationModelDetails_From(src.CurrentModel);
        res.PreviousModel= Create_CategorizationModelDetails_From(src.PreviousModel);
        return res as carriers.CategorizationStatusResponse;
}

export function Create_CategorizationStatusResponseArray_From(src:any) : carriers.CategorizationStatusResponse[] {
    let res : carriers.CategorizationStatusResponse[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CategorizationStatusResponse_From(src[i]);
        }
    }
    return res;
}

export function Create_CategorizationStatusResponseArrayArray_From(src:any) : carriers.CategorizationStatusResponse[][] {
    let res : carriers.CategorizationStatusResponse[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CategorizationStatusResponseArray_From(src[i]);
        }
    }
    return res;
}




export function Create_CategoryGuess_From(src:any) : carriers.CategoryGuess {
        if( src === null || src === undefined )
            return null;
        let res : carriers.CategoryGuess = Create_Carrier_From(src) as carriers.CategoryGuess;
        
        res.Dummy= src.Dummy as string;
        return res as carriers.CategoryGuess;
}

export function Create_CategoryGuessArray_From(src:any) : carriers.CategoryGuess[] {
    let res : carriers.CategoryGuess[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CategoryGuess_From(src[i]);
        }
    }
    return res;
}

export function Create_CategoryGuessArrayArray_From(src:any) : carriers.CategoryGuess[][] {
    let res : carriers.CategoryGuess[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_CategoryGuessArray_From(src[i]);
        }
    }
    return res;
}




export function Create_Sentiment_From(src:any) : carriers.Sentiment {
        if( src === null || src === undefined )
            return null;
        let res : carriers.Sentiment = Create_Carrier_From(src) as carriers.Sentiment;
        
        res.Score= src.Score as number;
        res.Confidence= src.Confidence as number;
        return res as carriers.Sentiment;
}

export function Create_SentimentArray_From(src:any) : carriers.Sentiment[] {
    let res : carriers.Sentiment[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Sentiment_From(src[i]);
        }
    }
    return res;
}

export function Create_SentimentArrayArray_From(src:any) : carriers.Sentiment[][] {
    let res : carriers.Sentiment[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_SentimentArray_From(src[i]);
        }
    }
    return res;
}




export function Create_DocumentMigrationAssociate_From(src:any) : carriers.DocumentMigrationAssociate {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.AssociateId= src.AssociateId as number;
        res.EmailAddress= src.EmailAddress as string;
        return res as carriers.DocumentMigrationAssociate;
}

export function Create_DocumentMigrationAssociateArray_From(src:any) : carriers.DocumentMigrationAssociate[] {
    let res : carriers.DocumentMigrationAssociate[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DocumentMigrationAssociate_From(src[i]);
        }
    }
    return res;
}

export function Create_DocumentMigrationAssociateArrayArray_From(src:any) : carriers.DocumentMigrationAssociate[][] {
    let res : carriers.DocumentMigrationAssociate[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DocumentMigrationAssociateArray_From(src[i]);
        }
    }
    return res;
}




export function Create_DocumentMigrationItem_From(src:any) : carriers.DocumentMigrationItem {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.DocumentId= src.DocumentId as number;
        res.ContactId= src.ContactId as number;
        res.PersonId= src.PersonId as number;
        res.SaleId= src.SaleId as number;
        res.ProjectId= src.ProjectId as number;
        res.DocTmplId= src.DocTmplId as number;
        res.AssociateId= src.AssociateId as number;
        res.UserGroupId= src.UserGroupId as number;
        res.VisibleForId= src.VisibleForId as number;
        return res as carriers.DocumentMigrationItem;
}

export function Create_DocumentMigrationItemArray_From(src:any) : carriers.DocumentMigrationItem[] {
    let res : carriers.DocumentMigrationItem[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DocumentMigrationItem_From(src[i]);
        }
    }
    return res;
}

export function Create_DocumentMigrationItemArrayArray_From(src:any) : carriers.DocumentMigrationItem[][] {
    let res : carriers.DocumentMigrationItem[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DocumentMigrationItemArray_From(src[i]);
        }
    }
    return res;
}




export function Create_DocumentMigrationItemList_From(src:any) : carriers.DocumentMigrationItemList {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.NumDocumentsOmitted= src.NumDocumentsOmitted as number;
        res.NumDocumentsAlreadyMigrated= src.NumDocumentsAlreadyMigrated as number;
        res.Documents= Create_DocumentMigrationItemArray_From(src.Documents);
        res.Associates= Create_DocumentMigrationAssociateArray_From(src.Associates);
        return res as carriers.DocumentMigrationItemList;
}

export function Create_DocumentMigrationItemListArray_From(src:any) : carriers.DocumentMigrationItemList[] {
    let res : carriers.DocumentMigrationItemList[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DocumentMigrationItemList_From(src[i]);
        }
    }
    return res;
}

export function Create_DocumentMigrationItemListArrayArray_From(src:any) : carriers.DocumentMigrationItemList[][] {
    let res : carriers.DocumentMigrationItemList[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DocumentMigrationItemListArray_From(src[i]);
        }
    }
    return res;
}




export function Create_DocumentTemplateMigrationList_From(src:any) : carriers.DocumentTemplateMigrationList {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        res.NumTemplatesOmitted= src.NumTemplatesOmitted as number;
        res.NumTemplatesAlreadyMigrated= src.NumTemplatesAlreadyMigrated as number;
        res.TemplateIds= src.TemplateIds as number[];
        return res as carriers.DocumentTemplateMigrationList;
}

export function Create_DocumentTemplateMigrationListArray_From(src:any) : carriers.DocumentTemplateMigrationList[] {
    let res : carriers.DocumentTemplateMigrationList[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DocumentTemplateMigrationList_From(src[i]);
        }
    }
    return res;
}

export function Create_DocumentTemplateMigrationListArrayArray_From(src:any) : carriers.DocumentTemplateMigrationList[][] {
    let res : carriers.DocumentTemplateMigrationList[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_DocumentTemplateMigrationListArray_From(src[i]);
        }
    }
    return res;
}






export function Create_EmailFlow_From(src:any) : carriers.EmailFlow {
        if( src === null || src === undefined )
            return null;
        let res : carriers.EmailFlow = Create_Carrier_From(src) as carriers.EmailFlow;
        
        res.EmailFlowId= src.EmailFlowId as number;
        res.Name= src.Name as string;
        res.Description= src.Description as string;
        res.Status= enums.WorkflowDefinitionStatus[src.Status];
        res.JumpToFinish= src.JumpToFinish as boolean;
        res.StartOnlyOnce= src.StartOnlyOnce as boolean;
        res.OverrideConsentSubscription= src.OverrideConsentSubscription as boolean;
        res.FromType= enums.EmailFromType[src.FromType];
        res.FromName= src.FromName as string;
        res.FromAddr= src.FromAddr as string;
        res.ReplyToType= enums.EmailReplyToType[src.ReplyToType];
        res.ReplyToAddr= src.ReplyToAddr as string;
        res.ReplyToName= src.ReplyToName as string;
        res.SmsSender= src.SmsSender as string;
        res.UseGoogleAnalytics= src.UseGoogleAnalytics as boolean;
        res.GaSource= src.GaSource as string;
        res.GaCampaign= src.GaCampaign as string;
        res.UseTimeframe= src.UseTimeframe as boolean;
        res.SelectedDays= Create_Weekday_From(src.SelectedDays) as enums.Weekday;
        res.TimeframeStart= Create_Date_From(src.TimeframeStart);
        res.TimeframeEnd= Create_Date_From(src.TimeframeEnd);
        res.UseWorkflowStart= src.UseWorkflowStart as boolean;
        res.WorkflowStart= Create_Date_From(src.WorkflowStart);
        res.UseEnrollmentEnd= src.UseEnrollmentEnd as boolean;
        res.EnrollmentEnd= Create_Date_From(src.EnrollmentEnd);
        res.RemoveFromFlows= src.RemoveFromFlows as number[];
        res.TzLocation= Create_TimeZoneData_From(src.TzLocation);
        res.Folder= Create_HierarchyEntity_From(src.Folder);
        res.Associate= Create_Associate_From(src.Associate);
        res.ShipmentType= Create_MDOListItem_From(src.ShipmentType);
        res.Steps= Create_WorkflowStepBaseArray_From(src.Steps);
        res.Triggers= Create_WorkflowTriggerArray_From(src.Triggers);
        res.Goals= Create_WorkflowGoalArray_From(src.Goals);
        res.Filter= Create_WorkflowFilter_From(src.Filter);
        res.BlockLists= src.BlockLists as number[];
        res.VisibleFor= Create_VisibleForArray_From(src.VisibleFor);
        return res as carriers.EmailFlow;
}

export function Create_EmailFlowArray_From(src:any) : carriers.EmailFlow[] {
    let res : carriers.EmailFlow[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EmailFlow_From(src[i]);
        }
    }
    return res;
}

export function Create_EmailFlowArrayArray_From(src:any) : carriers.EmailFlow[][] {
    let res : carriers.EmailFlow[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_EmailFlowArray_From(src[i]);
        }
    }
    return res;
}




export function Create_WorkflowFilter_From(src:any) : carriers.WorkflowFilter {
        if( src === null || src === undefined )
            return null;
        let res : carriers.WorkflowFilter = Create_Carrier_From(src) as carriers.WorkflowFilter;
        
        res.RestrictionGroups= Create_ArchiveRestrictionGroupArray_From(src.RestrictionGroups);
        return res as carriers.WorkflowFilter;
}

export function Create_WorkflowFilterArray_From(src:any) : carriers.WorkflowFilter[] {
    let res : carriers.WorkflowFilter[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowFilter_From(src[i]);
        }
    }
    return res;
}

export function Create_WorkflowFilterArrayArray_From(src:any) : carriers.WorkflowFilter[][] {
    let res : carriers.WorkflowFilter[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowFilterArray_From(src[i]);
        }
    }
    return res;
}




export function Create_WorkflowGoal_From(src:any) : carriers.WorkflowGoal {
        if( src === null || src === undefined )
            return null;
        let res : carriers.WorkflowGoal = Create_Carrier_From(src) as carriers.WorkflowGoal;
        
        res.WorkflowGoalId= src.WorkflowGoalId as number;
        res.WorkflowId= src.WorkflowId as number;
        res.GoalType= enums.WorkflowGoalType[src.GoalType];
        res.RestrictionGroups= Create_ArchiveRestrictionGroupArray_From(src.RestrictionGroups);
        return res as carriers.WorkflowGoal;
}

export function Create_WorkflowGoalArray_From(src:any) : carriers.WorkflowGoal[] {
    let res : carriers.WorkflowGoal[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowGoal_From(src[i]);
        }
    }
    return res;
}

export function Create_WorkflowGoalArrayArray_From(src:any) : carriers.WorkflowGoal[][] {
    let res : carriers.WorkflowGoal[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowGoalArray_From(src[i]);
        }
    }
    return res;
}




export function Create_WorkflowStepBase_From(src:any) : carriers.WorkflowStepBase {
        if( src === null || src === undefined )
            return null;
        let res : any = { };
        
        if( src.StepType == "AddToList" )
            res = Create_WorkflowStepAddToList_From(src);

        if( src.StepType == "CreateFollowUp" )
            res = Create_WorkflowStepCreateFollowUp_From(src);

        if( src.StepType == "CreateRequest" )
            res = Create_WorkflowStepCreateRequest_From(src);

        if( src.StepType == "CreateSale" )
            res = Create_WorkflowStepCreateSale_From(src);

        if( src.StepType == "NotifyByEmail" )
            res = Create_WorkflowStepNotifyByEmail_From(src);

        if( src.StepType == "NotifyBySMS" )
            res = Create_WorkflowStepNotifyBySMS_From(src);

        if( src.StepType == "RemoveFromList" )
            res = Create_WorkflowStepRemoveFromList_From(src);

        if( src.StepType == "RunScript" )
            res = Create_WorkflowStepRunScript_From(src);

        if( src.StepType == "SendEmail" )
            res = Create_WorkflowStepSendEmail_From(src);

        if( src.StepType == "SendSMS" )
            res = Create_WorkflowStepSendSMS_From(src);

        if( src.StepType == "Split" )
            res = Create_WorkflowStepSplit_From(src);

        if( src.StepType == "UpdateContact" )
            res = Create_WorkflowStepUpdateContact_From(src);

        if( src.StepType == "WaitForAction" )
            res = Create_WorkflowStepWaitForAction_From(src);

        if( src.StepType == "WaitForTime" )
            res = Create_WorkflowStepWaitForTime_From(src);

        res.WorkflowStepId= src.WorkflowStepId as number;
        res.WorkflowId= src.WorkflowId as number;
        res.StepType= enums.WorkflowStepType[src.StepType];
        res.Rank= src.Rank as number;
        return res as carriers.WorkflowStepBase;
}

export function Create_WorkflowStepBaseArray_From(src:any) : carriers.WorkflowStepBase[] {
    let res : carriers.WorkflowStepBase[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepBase_From(src[i]);
        }
    }
    return res;
}

export function Create_WorkflowStepBaseArrayArray_From(src:any) : carriers.WorkflowStepBase[][] {
    let res : carriers.WorkflowStepBase[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepBaseArray_From(src[i]);
        }
    }
    return res;
}




export function Create_WorkflowStepAddToList_From(src:any) : carriers.WorkflowStepAddToList {
        if( src === null || src === undefined )
            return null;
        let res : carriers.WorkflowStepAddToList = src as carriers.WorkflowStepAddToList;
        
        return res as carriers.WorkflowStepAddToList;
}

export function Create_WorkflowStepAddToListArray_From(src:any) : carriers.WorkflowStepAddToList[] {
    let res : carriers.WorkflowStepAddToList[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepAddToList_From(src[i]);
        }
    }
    return res;
}

export function Create_WorkflowStepAddToListArrayArray_From(src:any) : carriers.WorkflowStepAddToList[][] {
    let res : carriers.WorkflowStepAddToList[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepAddToListArray_From(src[i]);
        }
    }
    return res;
}




export function Create_WorkflowStepCreateFollowUp_From(src:any) : carriers.WorkflowStepCreateFollowUp {
        if( src === null || src === undefined )
            return null;
        let res : carriers.WorkflowStepCreateFollowUp = src as carriers.WorkflowStepCreateFollowUp;
        
        return res as carriers.WorkflowStepCreateFollowUp;
}

export function Create_WorkflowStepCreateFollowUpArray_From(src:any) : carriers.WorkflowStepCreateFollowUp[] {
    let res : carriers.WorkflowStepCreateFollowUp[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepCreateFollowUp_From(src[i]);
        }
    }
    return res;
}

export function Create_WorkflowStepCreateFollowUpArrayArray_From(src:any) : carriers.WorkflowStepCreateFollowUp[][] {
    let res : carriers.WorkflowStepCreateFollowUp[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepCreateFollowUpArray_From(src[i]);
        }
    }
    return res;
}




export function Create_WorkflowStepCreateRequest_From(src:any) : carriers.WorkflowStepCreateRequest {
        if( src === null || src === undefined )
            return null;
        let res : carriers.WorkflowStepCreateRequest = src as carriers.WorkflowStepCreateRequest;
        
        return res as carriers.WorkflowStepCreateRequest;
}

export function Create_WorkflowStepCreateRequestArray_From(src:any) : carriers.WorkflowStepCreateRequest[] {
    let res : carriers.WorkflowStepCreateRequest[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepCreateRequest_From(src[i]);
        }
    }
    return res;
}

export function Create_WorkflowStepCreateRequestArrayArray_From(src:any) : carriers.WorkflowStepCreateRequest[][] {
    let res : carriers.WorkflowStepCreateRequest[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepCreateRequestArray_From(src[i]);
        }
    }
    return res;
}




export function Create_WorkflowStepCreateSale_From(src:any) : carriers.WorkflowStepCreateSale {
        if( src === null || src === undefined )
            return null;
        let res : carriers.WorkflowStepCreateSale = src as carriers.WorkflowStepCreateSale;
        
        return res as carriers.WorkflowStepCreateSale;
}

export function Create_WorkflowStepCreateSaleArray_From(src:any) : carriers.WorkflowStepCreateSale[] {
    let res : carriers.WorkflowStepCreateSale[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepCreateSale_From(src[i]);
        }
    }
    return res;
}

export function Create_WorkflowStepCreateSaleArrayArray_From(src:any) : carriers.WorkflowStepCreateSale[][] {
    let res : carriers.WorkflowStepCreateSale[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepCreateSaleArray_From(src[i]);
        }
    }
    return res;
}




export function Create_WorkflowStepNotifyByEmail_From(src:any) : carriers.WorkflowStepNotifyByEmail {
        if( src === null || src === undefined )
            return null;
        let res : carriers.WorkflowStepNotifyByEmail = src as carriers.WorkflowStepNotifyByEmail;
        
        return res as carriers.WorkflowStepNotifyByEmail;
}

export function Create_WorkflowStepNotifyByEmailArray_From(src:any) : carriers.WorkflowStepNotifyByEmail[] {
    let res : carriers.WorkflowStepNotifyByEmail[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepNotifyByEmail_From(src[i]);
        }
    }
    return res;
}

export function Create_WorkflowStepNotifyByEmailArrayArray_From(src:any) : carriers.WorkflowStepNotifyByEmail[][] {
    let res : carriers.WorkflowStepNotifyByEmail[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepNotifyByEmailArray_From(src[i]);
        }
    }
    return res;
}




export function Create_WorkflowStepNotifyBySMS_From(src:any) : carriers.WorkflowStepNotifyBySMS {
        if( src === null || src === undefined )
            return null;
        let res : carriers.WorkflowStepNotifyBySMS = src as carriers.WorkflowStepNotifyBySMS;
        
        return res as carriers.WorkflowStepNotifyBySMS;
}

export function Create_WorkflowStepNotifyBySMSArray_From(src:any) : carriers.WorkflowStepNotifyBySMS[] {
    let res : carriers.WorkflowStepNotifyBySMS[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepNotifyBySMS_From(src[i]);
        }
    }
    return res;
}

export function Create_WorkflowStepNotifyBySMSArrayArray_From(src:any) : carriers.WorkflowStepNotifyBySMS[][] {
    let res : carriers.WorkflowStepNotifyBySMS[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepNotifyBySMSArray_From(src[i]);
        }
    }
    return res;
}




export function Create_WorkflowStepOption_From(src:any) : carriers.WorkflowStepOption {
        if( src === null || src === undefined )
            return null;
        let res : carriers.WorkflowStepOption = Create_Carrier_From(src) as carriers.WorkflowStepOption;
        
        res.WorkflowStepOptionId= src.WorkflowStepOptionId as number;
        res.WorkflowStepId= src.WorkflowStepId as number;
        res.WorkflowId= src.WorkflowId as number;
        res.Key= src.Key as string;
        res.Name= src.Name as string;
        res.Rank= src.Rank as number;
        res.Steps= Create_WorkflowStepBaseArray_From(src.Steps);
        return res as carriers.WorkflowStepOption;
}

export function Create_WorkflowStepOptionArray_From(src:any) : carriers.WorkflowStepOption[] {
    let res : carriers.WorkflowStepOption[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepOption_From(src[i]);
        }
    }
    return res;
}

export function Create_WorkflowStepOptionArrayArray_From(src:any) : carriers.WorkflowStepOption[][] {
    let res : carriers.WorkflowStepOption[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepOptionArray_From(src[i]);
        }
    }
    return res;
}




export function Create_WorkflowStepRemoveFromList_From(src:any) : carriers.WorkflowStepRemoveFromList {
        if( src === null || src === undefined )
            return null;
        let res : carriers.WorkflowStepRemoveFromList = src as carriers.WorkflowStepRemoveFromList;
        
        return res as carriers.WorkflowStepRemoveFromList;
}

export function Create_WorkflowStepRemoveFromListArray_From(src:any) : carriers.WorkflowStepRemoveFromList[] {
    let res : carriers.WorkflowStepRemoveFromList[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepRemoveFromList_From(src[i]);
        }
    }
    return res;
}

export function Create_WorkflowStepRemoveFromListArrayArray_From(src:any) : carriers.WorkflowStepRemoveFromList[][] {
    let res : carriers.WorkflowStepRemoveFromList[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepRemoveFromListArray_From(src[i]);
        }
    }
    return res;
}




export function Create_WorkflowStepRunScript_From(src:any) : carriers.WorkflowStepRunScript {
        if( src === null || src === undefined )
            return null;
        let res : carriers.WorkflowStepRunScript = src as carriers.WorkflowStepRunScript;
        
        return res as carriers.WorkflowStepRunScript;
}

export function Create_WorkflowStepRunScriptArray_From(src:any) : carriers.WorkflowStepRunScript[] {
    let res : carriers.WorkflowStepRunScript[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepRunScript_From(src[i]);
        }
    }
    return res;
}

export function Create_WorkflowStepRunScriptArrayArray_From(src:any) : carriers.WorkflowStepRunScript[][] {
    let res : carriers.WorkflowStepRunScript[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepRunScriptArray_From(src[i]);
        }
    }
    return res;
}




export function Create_WorkflowStepSendEmail_From(src:any) : carriers.WorkflowStepSendEmail {
        if( src === null || src === undefined )
            return null;
        let res : carriers.WorkflowStepSendEmail = src as carriers.WorkflowStepSendEmail;
        
        res.Subject= src.Subject as string;
        res.Attachments= src.Attachments as number[];
        res.EmailMessageId= src.EmailMessageId as number;
        res.ShipmentId= src.ShipmentId as number;
        return res as carriers.WorkflowStepSendEmail;
}

export function Create_WorkflowStepSendEmailArray_From(src:any) : carriers.WorkflowStepSendEmail[] {
    let res : carriers.WorkflowStepSendEmail[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepSendEmail_From(src[i]);
        }
    }
    return res;
}

export function Create_WorkflowStepSendEmailArrayArray_From(src:any) : carriers.WorkflowStepSendEmail[][] {
    let res : carriers.WorkflowStepSendEmail[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepSendEmailArray_From(src[i]);
        }
    }
    return res;
}




export function Create_WorkflowStepSendSMS_From(src:any) : carriers.WorkflowStepSendSMS {
        if( src === null || src === undefined )
            return null;
        let res : carriers.WorkflowStepSendSMS = src as carriers.WorkflowStepSendSMS;
        
        return res as carriers.WorkflowStepSendSMS;
}

export function Create_WorkflowStepSendSMSArray_From(src:any) : carriers.WorkflowStepSendSMS[] {
    let res : carriers.WorkflowStepSendSMS[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepSendSMS_From(src[i]);
        }
    }
    return res;
}

export function Create_WorkflowStepSendSMSArrayArray_From(src:any) : carriers.WorkflowStepSendSMS[][] {
    let res : carriers.WorkflowStepSendSMS[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepSendSMSArray_From(src[i]);
        }
    }
    return res;
}




export function Create_WorkflowStepSplit_From(src:any) : carriers.WorkflowStepSplit {
        if( src === null || src === undefined )
            return null;
        let res : carriers.WorkflowStepSplit = src as carriers.WorkflowStepSplit;
        
        res.Options= Create_WorkflowStepOptionArray_From(src.Options);
        return res as carriers.WorkflowStepSplit;
}

export function Create_WorkflowStepSplitArray_From(src:any) : carriers.WorkflowStepSplit[] {
    let res : carriers.WorkflowStepSplit[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepSplit_From(src[i]);
        }
    }
    return res;
}

export function Create_WorkflowStepSplitArrayArray_From(src:any) : carriers.WorkflowStepSplit[][] {
    let res : carriers.WorkflowStepSplit[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepSplitArray_From(src[i]);
        }
    }
    return res;
}




export function Create_WorkflowStepUpdateContact_From(src:any) : carriers.WorkflowStepUpdateContact {
        if( src === null || src === undefined )
            return null;
        let res : carriers.WorkflowStepUpdateContact = src as carriers.WorkflowStepUpdateContact;
        
        return res as carriers.WorkflowStepUpdateContact;
}

export function Create_WorkflowStepUpdateContactArray_From(src:any) : carriers.WorkflowStepUpdateContact[] {
    let res : carriers.WorkflowStepUpdateContact[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepUpdateContact_From(src[i]);
        }
    }
    return res;
}

export function Create_WorkflowStepUpdateContactArrayArray_From(src:any) : carriers.WorkflowStepUpdateContact[][] {
    let res : carriers.WorkflowStepUpdateContact[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepUpdateContactArray_From(src[i]);
        }
    }
    return res;
}




export function Create_WorkflowStepWaitForAction_From(src:any) : carriers.WorkflowStepWaitForAction {
        if( src === null || src === undefined )
            return null;
        let res : carriers.WorkflowStepWaitForAction = src as carriers.WorkflowStepWaitForAction;
        
        return res as carriers.WorkflowStepWaitForAction;
}

export function Create_WorkflowStepWaitForActionArray_From(src:any) : carriers.WorkflowStepWaitForAction[] {
    let res : carriers.WorkflowStepWaitForAction[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepWaitForAction_From(src[i]);
        }
    }
    return res;
}

export function Create_WorkflowStepWaitForActionArrayArray_From(src:any) : carriers.WorkflowStepWaitForAction[][] {
    let res : carriers.WorkflowStepWaitForAction[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepWaitForActionArray_From(src[i]);
        }
    }
    return res;
}




export function Create_WorkflowStepWaitForTime_From(src:any) : carriers.WorkflowStepWaitForTime {
        if( src === null || src === undefined )
            return null;
        let res : carriers.WorkflowStepWaitForTime = src as carriers.WorkflowStepWaitForTime;
        
        res.TimeWaitAlgorithm= enums.WorkflowTimeWaitAlgorithm[src.TimeWaitAlgorithm];
        res.NumIntervals= src.NumIntervals as number;
        res.IntervalType= enums.WorkflowTimeWaitIntervalType[src.IntervalType];
        res.Until= Create_Date_From(src.Until);
        return res as carriers.WorkflowStepWaitForTime;
}

export function Create_WorkflowStepWaitForTimeArray_From(src:any) : carriers.WorkflowStepWaitForTime[] {
    let res : carriers.WorkflowStepWaitForTime[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepWaitForTime_From(src[i]);
        }
    }
    return res;
}

export function Create_WorkflowStepWaitForTimeArrayArray_From(src:any) : carriers.WorkflowStepWaitForTime[][] {
    let res : carriers.WorkflowStepWaitForTime[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowStepWaitForTimeArray_From(src[i]);
        }
    }
    return res;
}




export function Create_WorkflowTrigger_From(src:any) : carriers.WorkflowTrigger {
        if( src === null || src === undefined )
            return null;
        let res : carriers.WorkflowTrigger = Create_Carrier_From(src) as carriers.WorkflowTrigger;
        
        res.WorkflowTriggerId= src.WorkflowTriggerId as number;
        res.WorkflowId= src.WorkflowId as number;
        res.TriggerType= enums.WorkflowTriggerType[src.TriggerType];
        res.RestrictionGroups= Create_ArchiveRestrictionGroupArray_From(src.RestrictionGroups);
        return res as carriers.WorkflowTrigger;
}

export function Create_WorkflowTriggerArray_From(src:any) : carriers.WorkflowTrigger[] {
    let res : carriers.WorkflowTrigger[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowTrigger_From(src[i]);
        }
    }
    return res;
}

export function Create_WorkflowTriggerArrayArray_From(src:any) : carriers.WorkflowTrigger[][] {
    let res : carriers.WorkflowTrigger[][] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_WorkflowTriggerArray_From(src[i]);
        }
    }
    return res;
}









// Misc 

function Create_DSAParameters_From(src:any) : carriers.DSAParameters {
    return src as carriers.DSAParameters;
}

function Create_ArrayBuffer_From(src:any) : ArrayBuffer {
    return src as ArrayBuffer;
}


function Create_BirthDate_From(src:any) : Date {
    if(src && src.indexOf && src.indexOf('-') > 1 && src.indexOf('T') > 1)
    {
        src = src.substr(0,src.indexOf('T'));
        return new Date(src);
    }
    return src;
}

function Create_Date_From(src:any) : Date {
    if(src && src.indexOf && src.indexOf('-') > 1)
        return new Date(src);
    return null;
}

function Create_DateArray_From(src:any) : Date[] {
    let res : Date[] = [];
    if( Array.isArray(src) ) {
        for(let i in src) {
            res[i] = Create_Date_From(src[i]);
        }
    }
    return res;
}

function Create_Duration_From(src:any) : moment.Duration {
    if(src)
        return moment.duration(src);
    return null;
}

function Create_Object_From(src:any) : Object {
    return src as Object;
}



function Create_AddressType_From(src:any): enums.AddressType | enums.AddressType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.AddressType[] = Array<enums.AddressType>();
        for (const i in (src as enums.AddressType[])) {
            let r = enums.AddressType[src[i]] as enums.AddressType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.AddressType[src] as enums.AddressType;
        return r;
    }
}


function Create_AppointmentPrivate_From(src:any): enums.AppointmentPrivate | enums.AppointmentPrivate[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.AppointmentPrivate[] = Array<enums.AppointmentPrivate>();
        for (const i in (src as enums.AppointmentPrivate[])) {
            let r = enums.AppointmentPrivate[src[i]] as enums.AppointmentPrivate;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.AppointmentPrivate[src] as enums.AppointmentPrivate;
        return r;
    }
}


function Create_AppointmentStatus_From(src:any): enums.AppointmentStatus | enums.AppointmentStatus[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.AppointmentStatus[] = Array<enums.AppointmentStatus>();
        for (const i in (src as enums.AppointmentStatus[])) {
            let r = enums.AppointmentStatus[src[i]] as enums.AppointmentStatus;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.AppointmentStatus[src] as enums.AppointmentStatus;
        return r;
    }
}


function Create_AppointmentType_From(src:any): enums.AppointmentType | enums.AppointmentType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.AppointmentType[] = Array<enums.AppointmentType>();
        for (const i in (src as enums.AppointmentType[])) {
            let r = enums.AppointmentType[src[i]] as enums.AppointmentType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.AppointmentType[src] as enums.AppointmentType;
        return r;
    }
}


function Create_FieldAccess_From(src:any): enums.FieldAccess | enums.FieldAccess[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.FieldAccess[] = Array<enums.FieldAccess>();
        for (const i in (src as enums.FieldAccess[])) {
            let r = enums.FieldAccess[src[i]] as enums.FieldAccess;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.FieldAccess[src] as enums.FieldAccess;
        return r;
    }
}


function Create_FieldMetadataType_From(src:any): enums.FieldMetadataType | enums.FieldMetadataType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.FieldMetadataType[] = Array<enums.FieldMetadataType>();
        for (const i in (src as enums.FieldMetadataType[])) {
            let r = enums.FieldMetadataType[src[i]] as enums.FieldMetadataType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.FieldMetadataType[src] as enums.FieldMetadataType;
        return r;
    }
}


function Create_DocTmplDirection_From(src:any): enums.DocTmplDirection | enums.DocTmplDirection[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.DocTmplDirection[] = Array<enums.DocTmplDirection>();
        for (const i in (src as enums.DocTmplDirection[])) {
            let r = enums.DocTmplDirection[src[i]] as enums.DocTmplDirection;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.DocTmplDirection[src] as enums.DocTmplDirection;
        return r;
    }
}


function Create_DocTmplQuoteType_From(src:any): enums.DocTmplQuoteType | enums.DocTmplQuoteType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.DocTmplQuoteType[] = Array<enums.DocTmplQuoteType>();
        for (const i in (src as enums.DocTmplQuoteType[])) {
            let r = enums.DocTmplQuoteType[src[i]] as enums.DocTmplQuoteType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.DocTmplQuoteType[src] as enums.DocTmplQuoteType;
        return r;
    }
}


function Create_DocTmplType_From(src:any): enums.DocTmplType | enums.DocTmplType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.DocTmplType[] = Array<enums.DocTmplType>();
        for (const i in (src as enums.DocTmplType[])) {
            let r = enums.DocTmplType[src[i]] as enums.DocTmplType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.DocTmplType[src] as enums.DocTmplType;
        return r;
    }
}


function Create_ExecuteOnEvent_From(src:any): enums.ExecuteOnEvent | enums.ExecuteOnEvent[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ExecuteOnEvent[] = Array<enums.ExecuteOnEvent>();
        for (const i in (src as enums.ExecuteOnEvent[])) {
            let r = enums.ExecuteOnEvent[src[i]] as enums.ExecuteOnEvent;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.ExecuteOnEvent[src] as enums.ExecuteOnEvent;
        return r;
    }
}


function Create_ExtraDataFieldType_From(src:any): enums.ExtraDataFieldType | enums.ExtraDataFieldType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ExtraDataFieldType[] = Array<enums.ExtraDataFieldType>();
        for (const i in (src as enums.ExtraDataFieldType[])) {
            let r = enums.ExtraDataFieldType[src[i]] as enums.ExtraDataFieldType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.ExtraDataFieldType[src] as enums.ExtraDataFieldType;
        return r;
    }
}


function Create_Navigation_From(src:any): enums.Navigation | enums.Navigation[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.Navigation[] = Array<enums.Navigation>();
        for (const i in (src as enums.Navigation[])) {
            let r = enums.Navigation[src[i]] as enums.Navigation;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.Navigation[src] as enums.Navigation;
        return r;
    }
}


function Create_PrefDescAccessFlags_From(src:any): enums.PrefDescAccessFlags | enums.PrefDescAccessFlags[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.PrefDescAccessFlags[] = Array<enums.PrefDescAccessFlags>();
        for (const i in (src as enums.PrefDescAccessFlags[])) {
            let r: enums.PrefDescAccessFlags;
            for (const s of (src[i] as string).split(/,\s*/)) {
                r |= enums.PrefDescAccessFlags[s] as enums.PrefDescAccessFlags;
            }
            result.push(r);
        }
        return result;
    } else {
        let r: enums.PrefDescAccessFlags;
        for (const s of (src as string).split(/,\s*/)) {
            r |= enums.PrefDescAccessFlags[s] as enums.PrefDescAccessFlags;
        }
        return r;
    }
}


function Create_PrefDescValueType_From(src:any): enums.PrefDescValueType | enums.PrefDescValueType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.PrefDescValueType[] = Array<enums.PrefDescValueType>();
        for (const i in (src as enums.PrefDescValueType[])) {
            let r = enums.PrefDescValueType[src[i]] as enums.PrefDescValueType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.PrefDescValueType[src] as enums.PrefDescValueType;
        return r;
    }
}


function Create_SaleStatus_From(src:any): enums.SaleStatus | enums.SaleStatus[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.SaleStatus[] = Array<enums.SaleStatus>();
        for (const i in (src as enums.SaleStatus[])) {
            let r = enums.SaleStatus[src[i]] as enums.SaleStatus;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.SaleStatus[src] as enums.SaleStatus;
        return r;
    }
}


function Create_ShowState_From(src:any): enums.ShowState | enums.ShowState[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ShowState[] = Array<enums.ShowState>();
        for (const i in (src as enums.ShowState[])) {
            let r: enums.ShowState;
            for (const s of (src[i] as string).split(/,\s*/)) {
                r |= enums.ShowState[s] as enums.ShowState;
            }
            result.push(r);
        }
        return result;
    } else {
        let r: enums.ShowState;
        for (const s of (src as string).split(/,\s*/)) {
            r |= enums.ShowState[s] as enums.ShowState;
        }
        return r;
    }
}


function Create_TaskDirection_From(src:any): enums.TaskDirection | enums.TaskDirection[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.TaskDirection[] = Array<enums.TaskDirection>();
        for (const i in (src as enums.TaskDirection[])) {
            let r = enums.TaskDirection[src[i]] as enums.TaskDirection;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.TaskDirection[src] as enums.TaskDirection;
        return r;
    }
}


function Create_TaskType_From(src:any): enums.TaskType | enums.TaskType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.TaskType[] = Array<enums.TaskType>();
        for (const i in (src as enums.TaskType[])) {
            let r = enums.TaskType[src[i]] as enums.TaskType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.TaskType[src] as enums.TaskType;
        return r;
    }
}


function Create_PreferenceLevel_From(src:any): enums.PreferenceLevel | enums.PreferenceLevel[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.PreferenceLevel[] = Array<enums.PreferenceLevel>();
        for (const i in (src as enums.PreferenceLevel[])) {
            let r = enums.PreferenceLevel[src[i]] as enums.PreferenceLevel;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.PreferenceLevel[src] as enums.PreferenceLevel;
        return r;
    }
}


function Create_DurationUnit_From(src:any): enums.DurationUnit | enums.DurationUnit[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.DurationUnit[] = Array<enums.DurationUnit>();
        for (const i in (src as enums.DurationUnit[])) {
            let r = enums.DurationUnit[src[i]] as enums.DurationUnit;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.DurationUnit[src] as enums.DurationUnit;
        return r;
    }
}


function Create_SelectionUnionType_From(src:any): enums.SelectionUnionType | enums.SelectionUnionType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.SelectionUnionType[] = Array<enums.SelectionUnionType>();
        for (const i in (src as enums.SelectionUnionType[])) {
            let r = enums.SelectionUnionType[src[i]] as enums.SelectionUnionType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.SelectionUnionType[src] as enums.SelectionUnionType;
        return r;
    }
}


function Create_ShipmentStatus_From(src:any): enums.ShipmentStatus | enums.ShipmentStatus[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ShipmentStatus[] = Array<enums.ShipmentStatus>();
        for (const i in (src as enums.ShipmentStatus[])) {
            let r = enums.ShipmentStatus[src[i]] as enums.ShipmentStatus;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.ShipmentStatus[src] as enums.ShipmentStatus;
        return r;
    }
}


function Create_ShipmentAddrStatus_From(src:any): enums.ShipmentAddrStatus | enums.ShipmentAddrStatus[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ShipmentAddrStatus[] = Array<enums.ShipmentAddrStatus>();
        for (const i in (src as enums.ShipmentAddrStatus[])) {
            let r = enums.ShipmentAddrStatus[src[i]] as enums.ShipmentAddrStatus;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.ShipmentAddrStatus[src] as enums.ShipmentAddrStatus;
        return r;
    }
}


function Create_TicketOrigin_From(src:any): enums.TicketOrigin | enums.TicketOrigin[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.TicketOrigin[] = Array<enums.TicketOrigin>();
        for (const i in (src as enums.TicketOrigin[])) {
            let r = enums.TicketOrigin[src[i]] as enums.TicketOrigin;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.TicketOrigin[src] as enums.TicketOrigin;
        return r;
    }
}


function Create_TicketStatusTimeCounter_From(src:any): enums.TicketStatusTimeCounter | enums.TicketStatusTimeCounter[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.TicketStatusTimeCounter[] = Array<enums.TicketStatusTimeCounter>();
        for (const i in (src as enums.TicketStatusTimeCounter[])) {
            let r = enums.TicketStatusTimeCounter[src[i]] as enums.TicketStatusTimeCounter;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.TicketStatusTimeCounter[src] as enums.TicketStatusTimeCounter;
        return r;
    }
}


function Create_QuoteVersionState_From(src:any): enums.QuoteVersionState | enums.QuoteVersionState[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.QuoteVersionState[] = Array<enums.QuoteVersionState>();
        for (const i in (src as enums.QuoteVersionState[])) {
            let r = enums.QuoteVersionState[src[i]] as enums.QuoteVersionState;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.QuoteVersionState[src] as enums.QuoteVersionState;
        return r;
    }
}


function Create_BlobLinkType_From(src:any): enums.BlobLinkType | enums.BlobLinkType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.BlobLinkType[] = Array<enums.BlobLinkType>();
        for (const i in (src as enums.BlobLinkType[])) {
            let r = enums.BlobLinkType[src[i]] as enums.BlobLinkType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.BlobLinkType[src] as enums.BlobLinkType;
        return r;
    }
}


function Create_QuoteStatus_From(src:any): enums.QuoteStatus | enums.QuoteStatus[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.QuoteStatus[] = Array<enums.QuoteStatus>();
        for (const i in (src as enums.QuoteStatus[])) {
            let r = enums.QuoteStatus[src[i]] as enums.QuoteStatus;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.QuoteStatus[src] as enums.QuoteStatus;
        return r;
    }
}


function Create_ValueOverride_From(src:any): enums.ValueOverride | enums.ValueOverride[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ValueOverride[] = Array<enums.ValueOverride>();
        for (const i in (src as enums.ValueOverride[])) {
            let r = enums.ValueOverride[src[i]] as enums.ValueOverride;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.ValueOverride[src] as enums.ValueOverride;
        return r;
    }
}


function Create_ErpActorType_From(src:any): enums.ErpActorType | enums.ErpActorType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ErpActorType[] = Array<enums.ErpActorType>();
        for (const i in (src as enums.ErpActorType[])) {
            let r = enums.ErpActorType[src[i]] as enums.ErpActorType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.ErpActorType[src] as enums.ErpActorType;
        return r;
    }
}


function Create_CrmActorType_From(src:any): enums.CrmActorType | enums.CrmActorType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.CrmActorType[] = Array<enums.CrmActorType>();
        for (const i in (src as enums.CrmActorType[])) {
            let r = enums.CrmActorType[src[i]] as enums.CrmActorType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.CrmActorType[src] as enums.CrmActorType;
        return r;
    }
}


function Create_PublishType_From(src:any): enums.PublishType | enums.PublishType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.PublishType[] = Array<enums.PublishType>();
        for (const i in (src as enums.PublishType[])) {
            let r = enums.PublishType[src[i]] as enums.PublishType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.PublishType[src] as enums.PublishType;
        return r;
    }
}


function Create_UdefJustification_From(src:any): enums.UdefJustification | enums.UdefJustification[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.UdefJustification[] = Array<enums.UdefJustification>();
        for (const i in (src as enums.UdefJustification[])) {
            let r = enums.UdefJustification[src[i]] as enums.UdefJustification;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.UdefJustification[src] as enums.UdefJustification;
        return r;
    }
}


function Create_RoleType_From(src:any): enums.RoleType | enums.RoleType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.RoleType[] = Array<enums.RoleType>();
        for (const i in (src as enums.RoleType[])) {
            let r = enums.RoleType[src[i]] as enums.RoleType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.RoleType[src] as enums.RoleType;
        return r;
    }
}


function Create_RecurrencePattern_From(src:any): enums.RecurrencePattern | enums.RecurrencePattern[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.RecurrencePattern[] = Array<enums.RecurrencePattern>();
        for (const i in (src as enums.RecurrencePattern[])) {
            let r = enums.RecurrencePattern[src[i]] as enums.RecurrencePattern;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.RecurrencePattern[src] as enums.RecurrencePattern;
        return r;
    }
}


function Create_ShowWindowState_From(src:any): enums.ShowWindowState | enums.ShowWindowState[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ShowWindowState[] = Array<enums.ShowWindowState>();
        for (const i in (src as enums.ShowWindowState[])) {
            let r = enums.ShowWindowState[src[i]] as enums.ShowWindowState;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.ShowWindowState[src] as enums.ShowWindowState;
        return r;
    }
}


function Create_LicenseType_From(src:any): enums.LicenseType | enums.LicenseType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.LicenseType[] = Array<enums.LicenseType>();
        for (const i in (src as enums.LicenseType[])) {
            let r = enums.LicenseType[src[i]] as enums.LicenseType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.LicenseType[src] as enums.LicenseType;
        return r;
    }
}


function Create_EMailMergeTargetType_From(src:any): enums.EMailMergeTargetType | enums.EMailMergeTargetType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.EMailMergeTargetType[] = Array<enums.EMailMergeTargetType>();
        for (const i in (src as enums.EMailMergeTargetType[])) {
            let r = enums.EMailMergeTargetType[src[i]] as enums.EMailMergeTargetType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.EMailMergeTargetType[src] as enums.EMailMergeTargetType;
        return r;
    }
}


function Create_AssignmentStatus_From(src:any): enums.AssignmentStatus | enums.AssignmentStatus[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.AssignmentStatus[] = Array<enums.AssignmentStatus>();
        for (const i in (src as enums.AssignmentStatus[])) {
            let r = enums.AssignmentStatus[src[i]] as enums.AssignmentStatus;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.AssignmentStatus[src] as enums.AssignmentStatus;
        return r;
    }
}


function Create_ColorIndex_From(src:any): enums.ColorIndex | enums.ColorIndex[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ColorIndex[] = Array<enums.ColorIndex>();
        for (const i in (src as enums.ColorIndex[])) {
            let r = enums.ColorIndex[src[i]] as enums.ColorIndex;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.ColorIndex[src] as enums.ColorIndex;
        return r;
    }
}


function Create_UrlEncoding_From(src:any): enums.UrlEncoding | enums.UrlEncoding[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.UrlEncoding[] = Array<enums.UrlEncoding>();
        for (const i in (src as enums.UrlEncoding[])) {
            let r = enums.UrlEncoding[src[i]] as enums.UrlEncoding;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.UrlEncoding[src] as enums.UrlEncoding;
        return r;
    }
}


function Create_RelationTarget_From(src:any): enums.RelationTarget | enums.RelationTarget[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.RelationTarget[] = Array<enums.RelationTarget>();
        for (const i in (src as enums.RelationTarget[])) {
            let r = enums.RelationTarget[src[i]] as enums.RelationTarget;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.RelationTarget[src] as enums.RelationTarget;
        return r;
    }
}


function Create_UDefType_From(src:any): enums.UDefType | enums.UDefType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.UDefType[] = Array<enums.UDefType>();
        for (const i in (src as enums.UDefType[])) {
            let r = enums.UDefType[src[i]] as enums.UDefType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.UDefType[src] as enums.UDefType;
        return r;
    }
}


function Create_UDefFieldType_From(src:any): enums.UDefFieldType | enums.UDefFieldType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.UDefFieldType[] = Array<enums.UDefFieldType>();
        for (const i in (src as enums.UDefFieldType[])) {
            let r = enums.UDefFieldType[src[i]] as enums.UDefFieldType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.UDefFieldType[src] as enums.UDefFieldType;
        return r;
    }
}


function Create_CustomFieldType_From(src:any): enums.CustomFieldType | enums.CustomFieldType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.CustomFieldType[] = Array<enums.CustomFieldType>();
        for (const i in (src as enums.CustomFieldType[])) {
            let r = enums.CustomFieldType[src[i]] as enums.CustomFieldType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.CustomFieldType[src] as enums.CustomFieldType;
        return r;
    }
}


function Create_SystemEventScope_From(src:any): enums.SystemEventScope | enums.SystemEventScope[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.SystemEventScope[] = Array<enums.SystemEventScope>();
        for (const i in (src as enums.SystemEventScope[])) {
            let r = enums.SystemEventScope[src[i]] as enums.SystemEventScope;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.SystemEventScope[src] as enums.SystemEventScope;
        return r;
    }
}


function Create_ImportEntityType_From(src:any): enums.ImportEntityType | enums.ImportEntityType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ImportEntityType[] = Array<enums.ImportEntityType>();
        for (const i in (src as enums.ImportEntityType[])) {
            let r: enums.ImportEntityType;
            for (const s of (src[i] as string).split(/,\s*/)) {
                r |= enums.ImportEntityType[s] as enums.ImportEntityType;
            }
            result.push(r);
        }
        return result;
    } else {
        let r: enums.ImportEntityType;
        for (const s of (src as string).split(/,\s*/)) {
            r |= enums.ImportEntityType[s] as enums.ImportEntityType;
        }
        return r;
    }
}


function Create_ImportAction_From(src:any): enums.ImportAction | enums.ImportAction[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ImportAction[] = Array<enums.ImportAction>();
        for (const i in (src as enums.ImportAction[])) {
            let r: enums.ImportAction;
            for (const s of (src[i] as string).split(/,\s*/)) {
                r |= enums.ImportAction[s] as enums.ImportAction;
            }
            result.push(r);
        }
        return result;
    } else {
        let r: enums.ImportAction;
        for (const s of (src as string).split(/,\s*/)) {
            r |= enums.ImportAction[s] as enums.ImportAction;
        }
        return r;
    }
}


function Create_FreeTextOperator_From(src:any): enums.FreeTextOperator | enums.FreeTextOperator[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.FreeTextOperator[] = Array<enums.FreeTextOperator>();
        for (const i in (src as enums.FreeTextOperator[])) {
            let r = enums.FreeTextOperator[src[i]] as enums.FreeTextOperator;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.FreeTextOperator[src] as enums.FreeTextOperator;
        return r;
    }
}


function Create_ErpSyncResponseCode_From(src:any): enums.ErpSyncResponseCode | enums.ErpSyncResponseCode[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ErpSyncResponseCode[] = Array<enums.ErpSyncResponseCode>();
        for (const i in (src as enums.ErpSyncResponseCode[])) {
            let r = enums.ErpSyncResponseCode[src[i]] as enums.ErpSyncResponseCode;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.ErpSyncResponseCode[src] as enums.ErpSyncResponseCode;
        return r;
    }
}


function Create_TicketBaseStatus_From(src:any): enums.TicketBaseStatus | enums.TicketBaseStatus[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.TicketBaseStatus[] = Array<enums.TicketBaseStatus>();
        for (const i in (src as enums.TicketBaseStatus[])) {
            let r = enums.TicketBaseStatus[src[i]] as enums.TicketBaseStatus;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.TicketBaseStatus[src] as enums.TicketBaseStatus;
        return r;
    }
}


function Create_ReportCategory_From(src:any): enums.ReportCategory | enums.ReportCategory[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ReportCategory[] = Array<enums.ReportCategory>();
        for (const i in (src as enums.ReportCategory[])) {
            let r = enums.ReportCategory[src[i]] as enums.ReportCategory;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.ReportCategory[src] as enums.ReportCategory;
        return r;
    }
}


function Create_EMailPriority_From(src:any): enums.EMailPriority | enums.EMailPriority[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.EMailPriority[] = Array<enums.EMailPriority>();
        for (const i in (src as enums.EMailPriority[])) {
            let r = enums.EMailPriority[src[i]] as enums.EMailPriority;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.EMailPriority[src] as enums.EMailPriority;
        return r;
    }
}


function Create_EMailFlags_From(src:any): enums.EMailFlags | enums.EMailFlags[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.EMailFlags[] = Array<enums.EMailFlags>();
        for (const i in (src as enums.EMailFlags[])) {
            let r: enums.EMailFlags;
            for (const s of (src[i] as string).split(/,\s*/)) {
                r |= enums.EMailFlags[s] as enums.EMailFlags;
            }
            result.push(r);
        }
        return result;
    } else {
        let r: enums.EMailFlags;
        for (const s of (src as string).split(/,\s*/)) {
            r |= enums.EMailFlags[s] as enums.EMailFlags;
        }
        return r;
    }
}


function Create_BatchTaskState_From(src:any): enums.BatchTaskState | enums.BatchTaskState[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.BatchTaskState[] = Array<enums.BatchTaskState>();
        for (const i in (src as enums.BatchTaskState[])) {
            let r = enums.BatchTaskState[src[i]] as enums.BatchTaskState;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.BatchTaskState[src] as enums.BatchTaskState;
        return r;
    }
}


function Create_BatchTaskCancellationBehaviour_From(src:any): enums.BatchTaskCancellationBehaviour | enums.BatchTaskCancellationBehaviour[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.BatchTaskCancellationBehaviour[] = Array<enums.BatchTaskCancellationBehaviour>();
        for (const i in (src as enums.BatchTaskCancellationBehaviour[])) {
            let r = enums.BatchTaskCancellationBehaviour[src[i]] as enums.BatchTaskCancellationBehaviour;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.BatchTaskCancellationBehaviour[src] as enums.BatchTaskCancellationBehaviour;
        return r;
    }
}


function Create_SelectionType_From(src:any): enums.SelectionType | enums.SelectionType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.SelectionType[] = Array<enums.SelectionType>();
        for (const i in (src as enums.SelectionType[])) {
            let r = enums.SelectionType[src[i]] as enums.SelectionType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.SelectionType[src] as enums.SelectionType;
        return r;
    }
}


function Create_ReportLayout_From(src:any): enums.ReportLayout | enums.ReportLayout[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ReportLayout[] = Array<enums.ReportLayout>();
        for (const i in (src as enums.ReportLayout[])) {
            let r = enums.ReportLayout[src[i]] as enums.ReportLayout;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.ReportLayout[src] as enums.ReportLayout;
        return r;
    }
}


function Create_ReportPaperOrientation_From(src:any): enums.ReportPaperOrientation | enums.ReportPaperOrientation[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ReportPaperOrientation[] = Array<enums.ReportPaperOrientation>();
        for (const i in (src as enums.ReportPaperOrientation[])) {
            let r = enums.ReportPaperOrientation[src[i]] as enums.ReportPaperOrientation;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.ReportPaperOrientation[src] as enums.ReportPaperOrientation;
        return r;
    }
}


function Create_DocumentLockSemantics_From(src:any): enums.DocumentLockSemantics | enums.DocumentLockSemantics[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.DocumentLockSemantics[] = Array<enums.DocumentLockSemantics>();
        for (const i in (src as enums.DocumentLockSemantics[])) {
            let r = enums.DocumentLockSemantics[src[i]] as enums.DocumentLockSemantics;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.DocumentLockSemantics[src] as enums.DocumentLockSemantics;
        return r;
    }
}


function Create_GeneratorEncoding_From(src:any): enums.GeneratorEncoding | enums.GeneratorEncoding[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.GeneratorEncoding[] = Array<enums.GeneratorEncoding>();
        for (const i in (src as enums.GeneratorEncoding[])) {
            let r = enums.GeneratorEncoding[src[i]] as enums.GeneratorEncoding;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.GeneratorEncoding[src] as enums.GeneratorEncoding;
        return r;
    }
}


function Create_DashboardLayout_From(src:any): enums.DashboardLayout | enums.DashboardLayout[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.DashboardLayout[] = Array<enums.DashboardLayout>();
        for (const i in (src as enums.DashboardLayout[])) {
            let r = enums.DashboardLayout[src[i]] as enums.DashboardLayout;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.DashboardLayout[src] as enums.DashboardLayout;
        return r;
    }
}


function Create_DashboardTileType_From(src:any): enums.DashboardTileType | enums.DashboardTileType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.DashboardTileType[] = Array<enums.DashboardTileType>();
        for (const i in (src as enums.DashboardTileType[])) {
            let r = enums.DashboardTileType[src[i]] as enums.DashboardTileType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.DashboardTileType[src] as enums.DashboardTileType;
        return r;
    }
}


function Create_DashboardTileEntityType_From(src:any): enums.DashboardTileEntityType | enums.DashboardTileEntityType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.DashboardTileEntityType[] = Array<enums.DashboardTileEntityType>();
        for (const i in (src as enums.DashboardTileEntityType[])) {
            let r = enums.DashboardTileEntityType[src[i]] as enums.DashboardTileEntityType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.DashboardTileEntityType[src] as enums.DashboardTileEntityType;
        return r;
    }
}


function Create_DashboardTileOptionType_From(src:any): enums.DashboardTileOptionType | enums.DashboardTileOptionType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.DashboardTileOptionType[] = Array<enums.DashboardTileOptionType>();
        for (const i in (src as enums.DashboardTileOptionType[])) {
            let r = enums.DashboardTileOptionType[src[i]] as enums.DashboardTileOptionType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.DashboardTileOptionType[src] as enums.DashboardTileOptionType;
        return r;
    }
}


function Create_DashTileType_From(src:any): enums.DashTileType | enums.DashTileType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.DashTileType[] = Array<enums.DashTileType>();
        for (const i in (src as enums.DashTileType[])) {
            let r = enums.DashTileType[src[i]] as enums.DashTileType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.DashTileType[src] as enums.DashTileType;
        return r;
    }
}


function Create_DashTileCurrencyMode_From(src:any): enums.DashTileCurrencyMode | enums.DashTileCurrencyMode[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.DashTileCurrencyMode[] = Array<enums.DashTileCurrencyMode>();
        for (const i in (src as enums.DashTileCurrencyMode[])) {
            let r = enums.DashTileCurrencyMode[src[i]] as enums.DashTileCurrencyMode;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.DashTileCurrencyMode[src] as enums.DashTileCurrencyMode;
        return r;
    }
}


function Create_DashTileMeasure_From(src:any): enums.DashTileMeasure | enums.DashTileMeasure[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.DashTileMeasure[] = Array<enums.DashTileMeasure>();
        for (const i in (src as enums.DashTileMeasure[])) {
            let r = enums.DashTileMeasure[src[i]] as enums.DashTileMeasure;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.DashTileMeasure[src] as enums.DashTileMeasure;
        return r;
    }
}


function Create_DashTileEntityType_From(src:any): enums.DashTileEntityType | enums.DashTileEntityType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.DashTileEntityType[] = Array<enums.DashTileEntityType>();
        for (const i in (src as enums.DashTileEntityType[])) {
            let r = enums.DashTileEntityType[src[i]] as enums.DashTileEntityType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.DashTileEntityType[src] as enums.DashTileEntityType;
        return r;
    }
}


function Create_DashTileUsage_From(src:any): enums.DashTileUsage | enums.DashTileUsage[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.DashTileUsage[] = Array<enums.DashTileUsage>();
        for (const i in (src as enums.DashTileUsage[])) {
            let r: enums.DashTileUsage;
            for (const s of (src[i] as string).split(/,\s*/)) {
                r |= enums.DashTileUsage[s] as enums.DashTileUsage;
            }
            result.push(r);
        }
        return result;
    } else {
        let r: enums.DashTileUsage;
        for (const s of (src as string).split(/,\s*/)) {
            r |= enums.DashTileUsage[s] as enums.DashTileUsage;
        }
        return r;
    }
}


function Create_TargetAssignementLevel_From(src:any): enums.TargetAssignementLevel | enums.TargetAssignementLevel[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.TargetAssignementLevel[] = Array<enums.TargetAssignementLevel>();
        for (const i in (src as enums.TargetAssignementLevel[])) {
            let r: enums.TargetAssignementLevel;
            for (const s of (src[i] as string).split(/,\s*/)) {
                r |= enums.TargetAssignementLevel[s] as enums.TargetAssignementLevel;
            }
            result.push(r);
        }
        return result;
    } else {
        let r: enums.TargetAssignementLevel;
        for (const s of (src as string).split(/,\s*/)) {
            r |= enums.TargetAssignementLevel[s] as enums.TargetAssignementLevel;
        }
        return r;
    }
}


function Create_TargetEntityType_From(src:any): enums.TargetEntityType | enums.TargetEntityType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.TargetEntityType[] = Array<enums.TargetEntityType>();
        for (const i in (src as enums.TargetEntityType[])) {
            let r = enums.TargetEntityType[src[i]] as enums.TargetEntityType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.TargetEntityType[src] as enums.TargetEntityType;
        return r;
    }
}


function Create_TargetMeasurementUnit_From(src:any): enums.TargetMeasurementUnit | enums.TargetMeasurementUnit[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.TargetMeasurementUnit[] = Array<enums.TargetMeasurementUnit>();
        for (const i in (src as enums.TargetMeasurementUnit[])) {
            let r = enums.TargetMeasurementUnit[src[i]] as enums.TargetMeasurementUnit;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.TargetMeasurementUnit[src] as enums.TargetMeasurementUnit;
        return r;
    }
}


function Create_TargetPeriodType_From(src:any): enums.TargetPeriodType | enums.TargetPeriodType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.TargetPeriodType[] = Array<enums.TargetPeriodType>();
        for (const i in (src as enums.TargetPeriodType[])) {
            let r = enums.TargetPeriodType[src[i]] as enums.TargetPeriodType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.TargetPeriodType[src] as enums.TargetPeriodType;
        return r;
    }
}


function Create_TargetLevel_From(src:any): enums.TargetLevel | enums.TargetLevel[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.TargetLevel[] = Array<enums.TargetLevel>();
        for (const i in (src as enums.TargetLevel[])) {
            let r = enums.TargetLevel[src[i]] as enums.TargetLevel;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.TargetLevel[src] as enums.TargetLevel;
        return r;
    }
}


function Create_LogEvent_From(src:any): enums.LogEvent | enums.LogEvent[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.LogEvent[] = Array<enums.LogEvent>();
        for (const i in (src as enums.LogEvent[])) {
            let r = enums.LogEvent[src[i]] as enums.LogEvent;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.LogEvent[src] as enums.LogEvent;
        return r;
    }
}


function Create_WorkflowDefinitionStatus_From(src:any): enums.WorkflowDefinitionStatus | enums.WorkflowDefinitionStatus[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.WorkflowDefinitionStatus[] = Array<enums.WorkflowDefinitionStatus>();
        for (const i in (src as enums.WorkflowDefinitionStatus[])) {
            let r = enums.WorkflowDefinitionStatus[src[i]] as enums.WorkflowDefinitionStatus;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.WorkflowDefinitionStatus[src] as enums.WorkflowDefinitionStatus;
        return r;
    }
}


function Create_EmailFromType_From(src:any): enums.EmailFromType | enums.EmailFromType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.EmailFromType[] = Array<enums.EmailFromType>();
        for (const i in (src as enums.EmailFromType[])) {
            let r = enums.EmailFromType[src[i]] as enums.EmailFromType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.EmailFromType[src] as enums.EmailFromType;
        return r;
    }
}


function Create_EmailReplyToType_From(src:any): enums.EmailReplyToType | enums.EmailReplyToType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.EmailReplyToType[] = Array<enums.EmailReplyToType>();
        for (const i in (src as enums.EmailReplyToType[])) {
            let r = enums.EmailReplyToType[src[i]] as enums.EmailReplyToType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.EmailReplyToType[src] as enums.EmailReplyToType;
        return r;
    }
}


function Create_WorkflowTimeWaitAlgorithm_From(src:any): enums.WorkflowTimeWaitAlgorithm | enums.WorkflowTimeWaitAlgorithm[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.WorkflowTimeWaitAlgorithm[] = Array<enums.WorkflowTimeWaitAlgorithm>();
        for (const i in (src as enums.WorkflowTimeWaitAlgorithm[])) {
            let r = enums.WorkflowTimeWaitAlgorithm[src[i]] as enums.WorkflowTimeWaitAlgorithm;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.WorkflowTimeWaitAlgorithm[src] as enums.WorkflowTimeWaitAlgorithm;
        return r;
    }
}


function Create_WorkflowTimeWaitIntervalType_From(src:any): enums.WorkflowTimeWaitIntervalType | enums.WorkflowTimeWaitIntervalType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.WorkflowTimeWaitIntervalType[] = Array<enums.WorkflowTimeWaitIntervalType>();
        for (const i in (src as enums.WorkflowTimeWaitIntervalType[])) {
            let r = enums.WorkflowTimeWaitIntervalType[src[i]] as enums.WorkflowTimeWaitIntervalType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.WorkflowTimeWaitIntervalType[src] as enums.WorkflowTimeWaitIntervalType;
        return r;
    }
}


function Create_WorkflowGoalType_From(src:any): enums.WorkflowGoalType | enums.WorkflowGoalType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.WorkflowGoalType[] = Array<enums.WorkflowGoalType>();
        for (const i in (src as enums.WorkflowGoalType[])) {
            let r = enums.WorkflowGoalType[src[i]] as enums.WorkflowGoalType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.WorkflowGoalType[src] as enums.WorkflowGoalType;
        return r;
    }
}


function Create_WorkflowStepType_From(src:any): enums.WorkflowStepType | enums.WorkflowStepType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.WorkflowStepType[] = Array<enums.WorkflowStepType>();
        for (const i in (src as enums.WorkflowStepType[])) {
            let r = enums.WorkflowStepType[src[i]] as enums.WorkflowStepType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.WorkflowStepType[src] as enums.WorkflowStepType;
        return r;
    }
}


function Create_WorkflowTriggerType_From(src:any): enums.WorkflowTriggerType | enums.WorkflowTriggerType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.WorkflowTriggerType[] = Array<enums.WorkflowTriggerType>();
        for (const i in (src as enums.WorkflowTriggerType[])) {
            let r = enums.WorkflowTriggerType[src[i]] as enums.WorkflowTriggerType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.WorkflowTriggerType[src] as enums.WorkflowTriggerType;
        return r;
    }
}


function Create_ActivityStatus_From(src:any): enums.ActivityStatus | enums.ActivityStatus[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ActivityStatus[] = Array<enums.ActivityStatus>();
        for (const i in (src as enums.ActivityStatus[])) {
            let r = enums.ActivityStatus[src[i]] as enums.ActivityStatus;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.ActivityStatus[src] as enums.ActivityStatus;
        return r;
    }
}


function Create_InvitationStatus_From(src:any): enums.InvitationStatus | enums.InvitationStatus[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.InvitationStatus[] = Array<enums.InvitationStatus>();
        for (const i in (src as enums.InvitationStatus[])) {
            let r = enums.InvitationStatus[src[i]] as enums.InvitationStatus;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.InvitationStatus[src] as enums.InvitationStatus;
        return r;
    }
}


function Create_BookingType_From(src:any): enums.BookingType | enums.BookingType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.BookingType[] = Array<enums.BookingType>();
        for (const i in (src as enums.BookingType[])) {
            let r = enums.BookingType[src[i]] as enums.BookingType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.BookingType[src] as enums.BookingType;
        return r;
    }
}


function Create_LocalizedTextType_From(src:any): enums.LocalizedTextType | enums.LocalizedTextType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.LocalizedTextType[] = Array<enums.LocalizedTextType>();
        for (const i in (src as enums.LocalizedTextType[])) {
            let r = enums.LocalizedTextType[src[i]] as enums.LocalizedTextType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.LocalizedTextType[src] as enums.LocalizedTextType;
        return r;
    }
}


function Create_ContactAction_From(src:any): enums.ContactAction | enums.ContactAction[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ContactAction[] = Array<enums.ContactAction>();
        for (const i in (src as enums.ContactAction[])) {
            let r: enums.ContactAction;
            for (const s of (src[i] as string).split(/,\s*/)) {
                r |= enums.ContactAction[s] as enums.ContactAction;
            }
            result.push(r);
        }
        return result;
    } else {
        let r: enums.ContactAction;
        for (const s of (src as string).split(/,\s*/)) {
            r |= enums.ContactAction[s] as enums.ContactAction;
        }
        return r;
    }
}


function Create_CheckoutState_From(src:any): enums.CheckoutState | enums.CheckoutState[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.CheckoutState[] = Array<enums.CheckoutState>();
        for (const i in (src as enums.CheckoutState[])) {
            let r = enums.CheckoutState[src[i]] as enums.CheckoutState;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.CheckoutState[src] as enums.CheckoutState;
        return r;
    }
}


function Create_StringSearchType_From(src:any): enums.StringSearchType | enums.StringSearchType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.StringSearchType[] = Array<enums.StringSearchType>();
        for (const i in (src as enums.StringSearchType[])) {
            let r = enums.StringSearchType[src[i]] as enums.StringSearchType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.StringSearchType[src] as enums.StringSearchType;
        return r;
    }
}


function Create_ReturnType_From(src:any): enums.ReturnType | enums.ReturnType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ReturnType[] = Array<enums.ReturnType>();
        for (const i in (src as enums.ReturnType[])) {
            let r = enums.ReturnType[src[i]] as enums.ReturnType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.ReturnType[src] as enums.ReturnType;
        return r;
    }
}


function Create_ETableRight_From(src:any): enums.ETableRight | enums.ETableRight[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ETableRight[] = Array<enums.ETableRight>();
        for (const i in (src as enums.ETableRight[])) {
            let r: enums.ETableRight;
            for (const s of (src[i] as string).split(/,\s*/)) {
                r |= enums.ETableRight[s] as enums.ETableRight;
            }
            result.push(r);
        }
        return result;
    } else {
        let r: enums.ETableRight;
        for (const s of (src as string).split(/,\s*/)) {
            r |= enums.ETableRight[s] as enums.ETableRight;
        }
        return r;
    }
}


function Create_LicenseStatus_From(src:any): enums.LicenseStatus | enums.LicenseStatus[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.LicenseStatus[] = Array<enums.LicenseStatus>();
        for (const i in (src as enums.LicenseStatus[])) {
            let r = enums.LicenseStatus[src[i]] as enums.LicenseStatus;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.LicenseStatus[src] as enums.LicenseStatus;
        return r;
    }
}


function Create_RecurrenceUpdateMode_From(src:any): enums.RecurrenceUpdateMode | enums.RecurrenceUpdateMode[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.RecurrenceUpdateMode[] = Array<enums.RecurrenceUpdateMode>();
        for (const i in (src as enums.RecurrenceUpdateMode[])) {
            let r = enums.RecurrenceUpdateMode[src[i]] as enums.RecurrenceUpdateMode;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.RecurrenceUpdateMode[src] as enums.RecurrenceUpdateMode;
        return r;
    }
}


function Create_UserType_From(src:any): enums.UserType | enums.UserType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.UserType[] = Array<enums.UserType>();
        for (const i in (src as enums.UserType[])) {
            let r = enums.UserType[src[i]] as enums.UserType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.UserType[src] as enums.UserType;
        return r;
    }
}


function Create_ContactSourceType_From(src:any): enums.ContactSourceType | enums.ContactSourceType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ContactSourceType[] = Array<enums.ContactSourceType>();
        for (const i in (src as enums.ContactSourceType[])) {
            let r: enums.ContactSourceType;
            for (const s of (src[i] as string).split(/,\s*/)) {
                r |= enums.ContactSourceType[s] as enums.ContactSourceType;
            }
            result.push(r);
        }
        return result;
    } else {
        let r: enums.ContactSourceType;
        for (const s of (src as string).split(/,\s*/)) {
            r |= enums.ContactSourceType[s] as enums.ContactSourceType;
        }
        return r;
    }
}


function Create_Visibility_From(src:any): enums.Visibility | enums.Visibility[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.Visibility[] = Array<enums.Visibility>();
        for (const i in (src as enums.Visibility[])) {
            let r = enums.Visibility[src[i]] as enums.Visibility;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.Visibility[src] as enums.Visibility;
        return r;
    }
}


function Create_CredentialControlType_From(src:any): enums.CredentialControlType | enums.CredentialControlType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.CredentialControlType[] = Array<enums.CredentialControlType>();
        for (const i in (src as enums.CredentialControlType[])) {
            let r = enums.CredentialControlType[src[i]] as enums.CredentialControlType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.CredentialControlType[src] as enums.CredentialControlType;
        return r;
    }
}


function Create_RecurrenceEndType_From(src:any): enums.RecurrenceEndType | enums.RecurrenceEndType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.RecurrenceEndType[] = Array<enums.RecurrenceEndType>();
        for (const i in (src as enums.RecurrenceEndType[])) {
            let r = enums.RecurrenceEndType[src[i]] as enums.RecurrenceEndType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.RecurrenceEndType[src] as enums.RecurrenceEndType;
        return r;
    }
}


function Create_AssociateSourceType_From(src:any): enums.AssociateSourceType | enums.AssociateSourceType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.AssociateSourceType[] = Array<enums.AssociateSourceType>();
        for (const i in (src as enums.AssociateSourceType[])) {
            let r: enums.AssociateSourceType;
            for (const s of (src[i] as string).split(/,\s*/)) {
                r |= enums.AssociateSourceType[s] as enums.AssociateSourceType;
            }
            result.push(r);
        }
        return result;
    } else {
        let r: enums.AssociateSourceType;
        for (const s of (src as string).split(/,\s*/)) {
            r |= enums.AssociateSourceType[s] as enums.AssociateSourceType;
        }
        return r;
    }
}


function Create_RoleRelationToOwner_From(src:any): enums.RoleRelationToOwner | enums.RoleRelationToOwner[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.RoleRelationToOwner[] = Array<enums.RoleRelationToOwner>();
        for (const i in (src as enums.RoleRelationToOwner[])) {
            let r = enums.RoleRelationToOwner[src[i]] as enums.RoleRelationToOwner;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.RoleRelationToOwner[src] as enums.RoleRelationToOwner;
        return r;
    }
}


function Create_ExternalUserInfoModification_From(src:any): enums.ExternalUserInfoModification | enums.ExternalUserInfoModification[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ExternalUserInfoModification[] = Array<enums.ExternalUserInfoModification>();
        for (const i in (src as enums.ExternalUserInfoModification[])) {
            let r: enums.ExternalUserInfoModification;
            for (const s of (src[i] as string).split(/,\s*/)) {
                r |= enums.ExternalUserInfoModification[s] as enums.ExternalUserInfoModification;
            }
            result.push(r);
        }
        return result;
    } else {
        let r: enums.ExternalUserInfoModification;
        for (const s of (src as string).split(/,\s*/)) {
            r |= enums.ExternalUserInfoModification[s] as enums.ExternalUserInfoModification;
        }
        return r;
    }
}


function Create_EFieldRight_From(src:any): enums.EFieldRight | enums.EFieldRight[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.EFieldRight[] = Array<enums.EFieldRight>();
        for (const i in (src as enums.EFieldRight[])) {
            let r: enums.EFieldRight;
            for (const s of (src[i] as string).split(/,\s*/)) {
                r |= enums.EFieldRight[s] as enums.EFieldRight;
            }
            result.push(r);
        }
        return result;
    } else {
        let r: enums.EFieldRight;
        for (const s of (src as string).split(/,\s*/)) {
            r |= enums.EFieldRight[s] as enums.EFieldRight;
        }
        return r;
    }
}


function Create_InterRestrictionOperator_From(src:any): enums.InterRestrictionOperator | enums.InterRestrictionOperator[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.InterRestrictionOperator[] = Array<enums.InterRestrictionOperator>();
        for (const i in (src as enums.InterRestrictionOperator[])) {
            let r = enums.InterRestrictionOperator[src[i]] as enums.InterRestrictionOperator;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.InterRestrictionOperator[src] as enums.InterRestrictionOperator;
        return r;
    }
}


function Create_Weekday_From(src:any): enums.Weekday | enums.Weekday[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.Weekday[] = Array<enums.Weekday>();
        for (const i in (src as enums.Weekday[])) {
            let r: enums.Weekday;
            for (const s of (src[i] as string).split(/,\s*/)) {
                r |= enums.Weekday[s] as enums.Weekday;
            }
            result.push(r);
        }
        return result;
    } else {
        let r: enums.Weekday;
        for (const s of (src as string).split(/,\s*/)) {
            r |= enums.Weekday[s] as enums.Weekday;
        }
        return r;
    }
}


function Create_RecurrenceYearlyPattern_From(src:any): enums.RecurrenceYearlyPattern | enums.RecurrenceYearlyPattern[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.RecurrenceYearlyPattern[] = Array<enums.RecurrenceYearlyPattern>();
        for (const i in (src as enums.RecurrenceYearlyPattern[])) {
            let r = enums.RecurrenceYearlyPattern[src[i]] as enums.RecurrenceYearlyPattern;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.RecurrenceYearlyPattern[src] as enums.RecurrenceYearlyPattern;
        return r;
    }
}


function Create_RecurrenceMonthlyPattern_From(src:any): enums.RecurrenceMonthlyPattern | enums.RecurrenceMonthlyPattern[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.RecurrenceMonthlyPattern[] = Array<enums.RecurrenceMonthlyPattern>();
        for (const i in (src as enums.RecurrenceMonthlyPattern[])) {
            let r = enums.RecurrenceMonthlyPattern[src[i]] as enums.RecurrenceMonthlyPattern;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.RecurrenceMonthlyPattern[src] as enums.RecurrenceMonthlyPattern;
        return r;
    }
}


function Create_RecurrenceDailyPattern_From(src:any): enums.RecurrenceDailyPattern | enums.RecurrenceDailyPattern[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.RecurrenceDailyPattern[] = Array<enums.RecurrenceDailyPattern>();
        for (const i in (src as enums.RecurrenceDailyPattern[])) {
            let r = enums.RecurrenceDailyPattern[src[i]] as enums.RecurrenceDailyPattern;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.RecurrenceDailyPattern[src] as enums.RecurrenceDailyPattern;
        return r;
    }
}


function Create_WeekOfMonth_From(src:any): enums.WeekOfMonth | enums.WeekOfMonth[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.WeekOfMonth[] = Array<enums.WeekOfMonth>();
        for (const i in (src as enums.WeekOfMonth[])) {
            let r = enums.WeekOfMonth[src[i]] as enums.WeekOfMonth;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.WeekOfMonth[src] as enums.WeekOfMonth;
        return r;
    }
}


function Create_OrderBySortType_From(src:any): enums.OrderBySortType | enums.OrderBySortType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.OrderBySortType[] = Array<enums.OrderBySortType>();
        for (const i in (src as enums.OrderBySortType[])) {
            let r = enums.OrderBySortType[src[i]] as enums.OrderBySortType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.OrderBySortType[src] as enums.OrderBySortType;
        return r;
    }
}


function Create_EjUserStatus_From(src:any): enums.EjUserStatus | enums.EjUserStatus[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.EjUserStatus[] = Array<enums.EjUserStatus>();
        for (const i in (src as enums.EjUserStatus[])) {
            let r = enums.EjUserStatus[src[i]] as enums.EjUserStatus;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.EjUserStatus[src] as enums.EjUserStatus;
        return r;
    }
}


function Create_StatusScreenPanelType_From(src:any): enums.StatusScreenPanelType | enums.StatusScreenPanelType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.StatusScreenPanelType[] = Array<enums.StatusScreenPanelType>();
        for (const i in (src as enums.StatusScreenPanelType[])) {
            let r = enums.StatusScreenPanelType[src[i]] as enums.StatusScreenPanelType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.StatusScreenPanelType[src] as enums.StatusScreenPanelType;
        return r;
    }
}


function Create_NetServerBuildType_From(src:any): enums.NetServerBuildType | enums.NetServerBuildType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.NetServerBuildType[] = Array<enums.NetServerBuildType>();
        for (const i in (src as enums.NetServerBuildType[])) {
            let r = enums.NetServerBuildType[src[i]] as enums.NetServerBuildType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.NetServerBuildType[src] as enums.NetServerBuildType;
        return r;
    }
}


function Create_QuoteVersionButtonAction_From(src:any): enums.QuoteVersionButtonAction | enums.QuoteVersionButtonAction[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.QuoteVersionButtonAction[] = Array<enums.QuoteVersionButtonAction>();
        for (const i in (src as enums.QuoteVersionButtonAction[])) {
            let r = enums.QuoteVersionButtonAction[src[i]] as enums.QuoteVersionButtonAction;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.QuoteVersionButtonAction[src] as enums.QuoteVersionButtonAction;
        return r;
    }
}


function Create_TemporaryKeyDomain_From(src:any): enums.TemporaryKeyDomain | enums.TemporaryKeyDomain[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.TemporaryKeyDomain[] = Array<enums.TemporaryKeyDomain>();
        for (const i in (src as enums.TemporaryKeyDomain[])) {
            let r = enums.TemporaryKeyDomain[src[i]] as enums.TemporaryKeyDomain;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.TemporaryKeyDomain[src] as enums.TemporaryKeyDomain;
        return r;
    }
}


function Create_DocTmplPrivacyType_From(src:any): enums.DocTmplPrivacyType | enums.DocTmplPrivacyType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.DocTmplPrivacyType[] = Array<enums.DocTmplPrivacyType>();
        for (const i in (src as enums.DocTmplPrivacyType[])) {
            let r = enums.DocTmplPrivacyType[src[i]] as enums.DocTmplPrivacyType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.DocTmplPrivacyType[src] as enums.DocTmplPrivacyType;
        return r;
    }
}


function Create_WebhookState_From(src:any): enums.WebhookState | enums.WebhookState[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.WebhookState[] = Array<enums.WebhookState>();
        for (const i in (src as enums.WebhookState[])) {
            let r = enums.WebhookState[src[i]] as enums.WebhookState;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.WebhookState[src] as enums.WebhookState;
        return r;
    }
}


function Create_CommandAction_From(src:any): enums.CommandAction | enums.CommandAction[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.CommandAction[] = Array<enums.CommandAction>();
        for (const i in (src as enums.CommandAction[])) {
            let r = enums.CommandAction[src[i]] as enums.CommandAction;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.CommandAction[src] as enums.CommandAction;
        return r;
    }
}


function Create_CommandActionResult_From(src:any): enums.CommandActionResult | enums.CommandActionResult[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.CommandActionResult[] = Array<enums.CommandActionResult>();
        for (const i in (src as enums.CommandActionResult[])) {
            let r = enums.CommandActionResult[src[i]] as enums.CommandActionResult;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.CommandActionResult[src] as enums.CommandActionResult;
        return r;
    }
}


function Create_NotificationPlatform_From(src:any): enums.NotificationPlatform | enums.NotificationPlatform[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.NotificationPlatform[] = Array<enums.NotificationPlatform>();
        for (const i in (src as enums.NotificationPlatform[])) {
            let r = enums.NotificationPlatform[src[i]] as enums.NotificationPlatform;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.NotificationPlatform[src] as enums.NotificationPlatform;
        return r;
    }
}


function Create_NotificationMessageType_From(src:any): enums.NotificationMessageType | enums.NotificationMessageType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.NotificationMessageType[] = Array<enums.NotificationMessageType>();
        for (const i in (src as enums.NotificationMessageType[])) {
            let r = enums.NotificationMessageType[src[i]] as enums.NotificationMessageType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.NotificationMessageType[src] as enums.NotificationMessageType;
        return r;
    }
}


function Create_CalMethod_From(src:any): enums.CalMethod | enums.CalMethod[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.CalMethod[] = Array<enums.CalMethod>();
        for (const i in (src as enums.CalMethod[])) {
            let r = enums.CalMethod[src[i]] as enums.CalMethod;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.CalMethod[src] as enums.CalMethod;
        return r;
    }
}


function Create_CalReplyStatus_From(src:any): enums.CalReplyStatus | enums.CalReplyStatus[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.CalReplyStatus[] = Array<enums.CalReplyStatus>();
        for (const i in (src as enums.CalReplyStatus[])) {
            let r = enums.CalReplyStatus[src[i]] as enums.CalReplyStatus;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.CalReplyStatus[src] as enums.CalReplyStatus;
        return r;
    }
}


function Create_SenderMailMode_From(src:any): enums.SenderMailMode | enums.SenderMailMode[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.SenderMailMode[] = Array<enums.SenderMailMode>();
        for (const i in (src as enums.SenderMailMode[])) {
            let r = enums.SenderMailMode[src[i]] as enums.SenderMailMode;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.SenderMailMode[src] as enums.SenderMailMode;
        return r;
    }
}


function Create_FormsRecaptchaMode_From(src:any): enums.FormsRecaptchaMode | enums.FormsRecaptchaMode[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.FormsRecaptchaMode[] = Array<enums.FormsRecaptchaMode>();
        for (const i in (src as enums.FormsRecaptchaMode[])) {
            let r = enums.FormsRecaptchaMode[src[i]] as enums.FormsRecaptchaMode;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.FormsRecaptchaMode[src] as enums.FormsRecaptchaMode;
        return r;
    }
}


function Create_AppointmentCautionWarning_From(src:any): enums.AppointmentCautionWarning | enums.AppointmentCautionWarning[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.AppointmentCautionWarning[] = Array<enums.AppointmentCautionWarning>();
        for (const i in (src as enums.AppointmentCautionWarning[])) {
            let r = enums.AppointmentCautionWarning[src[i]] as enums.AppointmentCautionWarning;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.AppointmentCautionWarning[src] as enums.AppointmentCautionWarning;
        return r;
    }
}


function Create_DocTmplInvitationType_From(src:any): enums.DocTmplInvitationType | enums.DocTmplInvitationType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.DocTmplInvitationType[] = Array<enums.DocTmplInvitationType>();
        for (const i in (src as enums.DocTmplInvitationType[])) {
            let r = enums.DocTmplInvitationType[src[i]] as enums.DocTmplInvitationType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.DocTmplInvitationType[src] as enums.DocTmplInvitationType;
        return r;
    }
}


function Create_VideoMeetingStatus_From(src:any): enums.VideoMeetingStatus | enums.VideoMeetingStatus[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.VideoMeetingStatus[] = Array<enums.VideoMeetingStatus>();
        for (const i in (src as enums.VideoMeetingStatus[])) {
            let r = enums.VideoMeetingStatus[src[i]] as enums.VideoMeetingStatus;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.VideoMeetingStatus[src] as enums.VideoMeetingStatus;
        return r;
    }
}


function Create_UpsertNomatchAction_From(src:any): enums.UpsertNomatchAction | enums.UpsertNomatchAction[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.UpsertNomatchAction[] = Array<enums.UpsertNomatchAction>();
        for (const i in (src as enums.UpsertNomatchAction[])) {
            let r = enums.UpsertNomatchAction[src[i]] as enums.UpsertNomatchAction;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.UpsertNomatchAction[src] as enums.UpsertNomatchAction;
        return r;
    }
}


function Create_UpsertRowActionStatus_From(src:any): enums.UpsertRowActionStatus | enums.UpsertRowActionStatus[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.UpsertRowActionStatus[] = Array<enums.UpsertRowActionStatus>();
        for (const i in (src as enums.UpsertRowActionStatus[])) {
            let r = enums.UpsertRowActionStatus[src[i]] as enums.UpsertRowActionStatus;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.UpsertRowActionStatus[src] as enums.UpsertRowActionStatus;
        return r;
    }
}


function Create_MailboxType_From(src:any): enums.MailboxType | enums.MailboxType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.MailboxType[] = Array<enums.MailboxType>();
        for (const i in (src as enums.MailboxType[])) {
            let r = enums.MailboxType[src[i]] as enums.MailboxType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.MailboxType[src] as enums.MailboxType;
        return r;
    }
}


function Create_DeltaType_From(src:any): enums.DeltaType | enums.DeltaType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.DeltaType[] = Array<enums.DeltaType>();
        for (const i in (src as enums.DeltaType[])) {
            let r = enums.DeltaType[src[i]] as enums.DeltaType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.DeltaType[src] as enums.DeltaType;
        return r;
    }
}


function Create_DeltaState_From(src:any): enums.DeltaState | enums.DeltaState[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.DeltaState[] = Array<enums.DeltaState>();
        for (const i in (src as enums.DeltaState[])) {
            let r = enums.DeltaState[src[i]] as enums.DeltaState;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.DeltaState[src] as enums.DeltaState;
        return r;
    }
}


function Create_NotificationEventType_From(src:any): enums.NotificationEventType | enums.NotificationEventType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.NotificationEventType[] = Array<enums.NotificationEventType>();
        for (const i in (src as enums.NotificationEventType[])) {
            let r = enums.NotificationEventType[src[i]] as enums.NotificationEventType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.NotificationEventType[src] as enums.NotificationEventType;
        return r;
    }
}


function Create_ChangePasswordType_From(src:any): enums.ChangePasswordType | enums.ChangePasswordType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ChangePasswordType[] = Array<enums.ChangePasswordType>();
        for (const i in (src as enums.ChangePasswordType[])) {
            let r = enums.ChangePasswordType[src[i]] as enums.ChangePasswordType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.ChangePasswordType[src] as enums.ChangePasswordType;
        return r;
    }
}


function Create_MessageHeaderStdItem_From(src:any): enums.MessageHeaderStdItem | enums.MessageHeaderStdItem[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.MessageHeaderStdItem[] = Array<enums.MessageHeaderStdItem>();
        for (const i in (src as enums.MessageHeaderStdItem[])) {
            let r = enums.MessageHeaderStdItem[src[i]] as enums.MessageHeaderStdItem;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.MessageHeaderStdItem[src] as enums.MessageHeaderStdItem;
        return r;
    }
}


function Create_MessageHeaderStdItemCol_From(src:any): enums.MessageHeaderStdItemCol | enums.MessageHeaderStdItemCol[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.MessageHeaderStdItemCol[] = Array<enums.MessageHeaderStdItemCol>();
        for (const i in (src as enums.MessageHeaderStdItemCol[])) {
            let r = enums.MessageHeaderStdItemCol[src[i]] as enums.MessageHeaderStdItemCol;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.MessageHeaderStdItemCol[src] as enums.MessageHeaderStdItemCol;
        return r;
    }
}


function Create_MessageActionType_From(src:any): enums.MessageActionType | enums.MessageActionType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.MessageActionType[] = Array<enums.MessageActionType>();
        for (const i in (src as enums.MessageActionType[])) {
            let r = enums.MessageActionType[src[i]] as enums.MessageActionType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.MessageActionType[src] as enums.MessageActionType;
        return r;
    }
}


function Create_RecipientType_From(src:any): enums.RecipientType | enums.RecipientType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.RecipientType[] = Array<enums.RecipientType>();
        for (const i in (src as enums.RecipientType[])) {
            let r = enums.RecipientType[src[i]] as enums.RecipientType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.RecipientType[src] as enums.RecipientType;
        return r;
    }
}


function Create_ImageEmbedType_From(src:any): enums.ImageEmbedType | enums.ImageEmbedType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ImageEmbedType[] = Array<enums.ImageEmbedType>();
        for (const i in (src as enums.ImageEmbedType[])) {
            let r = enums.ImageEmbedType[src[i]] as enums.ImageEmbedType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.ImageEmbedType[src] as enums.ImageEmbedType;
        return r;
    }
}


function Create_TaskListItemType_From(src:any): enums.TaskListItemType | enums.TaskListItemType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.TaskListItemType[] = Array<enums.TaskListItemType>();
        for (const i in (src as enums.TaskListItemType[])) {
            let r = enums.TaskListItemType[src[i]] as enums.TaskListItemType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.TaskListItemType[src] as enums.TaskListItemType;
        return r;
    }
}


function Create_ShowTaskItemInClient_From(src:any): enums.ShowTaskItemInClient | enums.ShowTaskItemInClient[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ShowTaskItemInClient[] = Array<enums.ShowTaskItemInClient>();
        for (const i in (src as enums.ShowTaskItemInClient[])) {
            let r: enums.ShowTaskItemInClient;
            for (const s of (src[i] as string).split(/,\s*/)) {
                r |= enums.ShowTaskItemInClient[s] as enums.ShowTaskItemInClient;
            }
            result.push(r);
        }
        return result;
    } else {
        let r: enums.ShowTaskItemInClient;
        for (const s of (src as string).split(/,\s*/)) {
            r |= enums.ShowTaskItemInClient[s] as enums.ShowTaskItemInClient;
        }
        return r;
    }
}


function Create_ArchiveBehaviour_From(src:any): enums.ArchiveBehaviour | enums.ArchiveBehaviour[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ArchiveBehaviour[] = Array<enums.ArchiveBehaviour>();
        for (const i in (src as enums.ArchiveBehaviour[])) {
            let r: enums.ArchiveBehaviour;
            for (const s of (src[i] as string).split(/,\s*/)) {
                r |= enums.ArchiveBehaviour[s] as enums.ArchiveBehaviour;
            }
            result.push(r);
        }
        return result;
    } else {
        let r: enums.ArchiveBehaviour;
        for (const s of (src as string).split(/,\s*/)) {
            r |= enums.ArchiveBehaviour[s] as enums.ArchiveBehaviour;
        }
        return r;
    }
}


function Create_EventHandlerType_From(src:any): enums.EventHandlerType | enums.EventHandlerType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.EventHandlerType[] = Array<enums.EventHandlerType>();
        for (const i in (src as enums.EventHandlerType[])) {
            let r = enums.EventHandlerType[src[i]] as enums.EventHandlerType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.EventHandlerType[src] as enums.EventHandlerType;
        return r;
    }
}


function Create_Domain_From(src:any): enums.Domain | enums.Domain[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.Domain[] = Array<enums.Domain>();
        for (const i in (src as enums.Domain[])) {
            let r = enums.Domain[src[i]] as enums.Domain;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.Domain[src] as enums.Domain;
        return r;
    }
}


function Create_FormSubmissionStatus_From(src:any): enums.FormSubmissionStatus | enums.FormSubmissionStatus[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.FormSubmissionStatus[] = Array<enums.FormSubmissionStatus>();
        for (const i in (src as enums.FormSubmissionStatus[])) {
            let r = enums.FormSubmissionStatus[src[i]] as enums.FormSubmissionStatus;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.FormSubmissionStatus[src] as enums.FormSubmissionStatus;
        return r;
    }
}


function Create_TicketPriorityStatus_From(src:any): enums.TicketPriorityStatus | enums.TicketPriorityStatus[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.TicketPriorityStatus[] = Array<enums.TicketPriorityStatus>();
        for (const i in (src as enums.TicketPriorityStatus[])) {
            let r = enums.TicketPriorityStatus[src[i]] as enums.TicketPriorityStatus;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.TicketPriorityStatus[src] as enums.TicketPriorityStatus;
        return r;
    }
}


function Create_TicketCategoryDelegateMethod_From(src:any): enums.TicketCategoryDelegateMethod | enums.TicketCategoryDelegateMethod[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.TicketCategoryDelegateMethod[] = Array<enums.TicketCategoryDelegateMethod>();
        for (const i in (src as enums.TicketCategoryDelegateMethod[])) {
            let r = enums.TicketCategoryDelegateMethod[src[i]] as enums.TicketCategoryDelegateMethod;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.TicketCategoryDelegateMethod[src] as enums.TicketCategoryDelegateMethod;
        return r;
    }
}


function Create_TicketCategoryClosingStatus_From(src:any): enums.TicketCategoryClosingStatus | enums.TicketCategoryClosingStatus[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.TicketCategoryClosingStatus[] = Array<enums.TicketCategoryClosingStatus>();
        for (const i in (src as enums.TicketCategoryClosingStatus[])) {
            let r = enums.TicketCategoryClosingStatus[src[i]] as enums.TicketCategoryClosingStatus;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.TicketCategoryClosingStatus[src] as enums.TicketCategoryClosingStatus;
        return r;
    }
}


function Create_TicketCategoryFlags_From(src:any): enums.TicketCategoryFlags | enums.TicketCategoryFlags[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.TicketCategoryFlags[] = Array<enums.TicketCategoryFlags>();
        for (const i in (src as enums.TicketCategoryFlags[])) {
            let r: enums.TicketCategoryFlags;
            for (const s of (src[i] as string).split(/,\s*/)) {
                r |= enums.TicketCategoryFlags[s] as enums.TicketCategoryFlags;
            }
            result.push(r);
        }
        return result;
    } else {
        let r: enums.TicketCategoryFlags;
        for (const s of (src as string).split(/,\s*/)) {
            r |= enums.TicketCategoryFlags[s] as enums.TicketCategoryFlags;
        }
        return r;
    }
}


function Create_TicketPriorityFlags_From(src:any): enums.TicketPriorityFlags | enums.TicketPriorityFlags[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.TicketPriorityFlags[] = Array<enums.TicketPriorityFlags>();
        for (const i in (src as enums.TicketPriorityFlags[])) {
            let r: enums.TicketPriorityFlags;
            for (const s of (src[i] as string).split(/,\s*/)) {
                r |= enums.TicketPriorityFlags[s] as enums.TicketPriorityFlags;
            }
            result.push(r);
        }
        return result;
    } else {
        let r: enums.TicketPriorityFlags;
        for (const s of (src as string).split(/,\s*/)) {
            r |= enums.TicketPriorityFlags[s] as enums.TicketPriorityFlags;
        }
        return r;
    }
}


function Create_TicketPriorityEscalateEvent_From(src:any): enums.TicketPriorityEscalateEvent | enums.TicketPriorityEscalateEvent[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.TicketPriorityEscalateEvent[] = Array<enums.TicketPriorityEscalateEvent>();
        for (const i in (src as enums.TicketPriorityEscalateEvent[])) {
            let r = enums.TicketPriorityEscalateEvent[src[i]] as enums.TicketPriorityEscalateEvent;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.TicketPriorityEscalateEvent[src] as enums.TicketPriorityEscalateEvent;
        return r;
    }
}


function Create_TicketSecurityLevel_From(src:any): enums.TicketSecurityLevel | enums.TicketSecurityLevel[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.TicketSecurityLevel[] = Array<enums.TicketSecurityLevel>();
        for (const i in (src as enums.TicketSecurityLevel[])) {
            let r = enums.TicketSecurityLevel[src[i]] as enums.TicketSecurityLevel;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.TicketSecurityLevel[src] as enums.TicketSecurityLevel;
        return r;
    }
}


function Create_TicketReadStatus_From(src:any): enums.TicketReadStatus | enums.TicketReadStatus[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.TicketReadStatus[] = Array<enums.TicketReadStatus>();
        for (const i in (src as enums.TicketReadStatus[])) {
            let r = enums.TicketReadStatus[src[i]] as enums.TicketReadStatus;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.TicketReadStatus[src] as enums.TicketReadStatus;
        return r;
    }
}


function Create_TicketMessageType_From(src:any): enums.TicketMessageType | enums.TicketMessageType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.TicketMessageType[] = Array<enums.TicketMessageType>();
        for (const i in (src as enums.TicketMessageType[])) {
            let r = enums.TicketMessageType[src[i]] as enums.TicketMessageType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.TicketMessageType[src] as enums.TicketMessageType;
        return r;
    }
}


function Create_TicketMessageCategory_From(src:any): enums.TicketMessageCategory | enums.TicketMessageCategory[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.TicketMessageCategory[] = Array<enums.TicketMessageCategory>();
        for (const i in (src as enums.TicketMessageCategory[])) {
            let r = enums.TicketMessageCategory[src[i]] as enums.TicketMessageCategory;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.TicketMessageCategory[src] as enums.TicketMessageCategory;
        return r;
    }
}


function Create_DesignType_From(src:any): enums.DesignType | enums.DesignType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.DesignType[] = Array<enums.DesignType>();
        for (const i in (src as enums.DesignType[])) {
            let r = enums.DesignType[src[i]] as enums.DesignType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.DesignType[src] as enums.DesignType;
        return r;
    }
}


function Create_ShipmentMessageType_From(src:any): enums.ShipmentMessageType | enums.ShipmentMessageType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ShipmentMessageType[] = Array<enums.ShipmentMessageType>();
        for (const i in (src as enums.ShipmentMessageType[])) {
            let r: enums.ShipmentMessageType;
            for (const s of (src[i] as string).split(/,\s*/)) {
                r |= enums.ShipmentMessageType[s] as enums.ShipmentMessageType;
            }
            result.push(r);
        }
        return result;
    } else {
        let r: enums.ShipmentMessageType;
        for (const s of (src as string).split(/,\s*/)) {
            r |= enums.ShipmentMessageType[s] as enums.ShipmentMessageType;
        }
        return r;
    }
}


function Create_TicketAlertAction_From(src:any): enums.TicketAlertAction | enums.TicketAlertAction[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.TicketAlertAction[] = Array<enums.TicketAlertAction>();
        for (const i in (src as enums.TicketAlertAction[])) {
            let r: enums.TicketAlertAction;
            for (const s of (src[i] as string).split(/,\s*/)) {
                r |= enums.TicketAlertAction[s] as enums.TicketAlertAction;
            }
            result.push(r);
        }
        return result;
    } else {
        let r: enums.TicketAlertAction;
        for (const s of (src as string).split(/,\s*/)) {
            r |= enums.TicketAlertAction[s] as enums.TicketAlertAction;
        }
        return r;
    }
}


function Create_BadgeType_From(src:any): enums.BadgeType | enums.BadgeType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.BadgeType[] = Array<enums.BadgeType>();
        for (const i in (src as enums.BadgeType[])) {
            let r = enums.BadgeType[src[i]] as enums.BadgeType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.BadgeType[src] as enums.BadgeType;
        return r;
    }
}


function Create_WidgetTheme_From(src:any): enums.WidgetTheme | enums.WidgetTheme[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.WidgetTheme[] = Array<enums.WidgetTheme>();
        for (const i in (src as enums.WidgetTheme[])) {
            let r = enums.WidgetTheme[src[i]] as enums.WidgetTheme;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.WidgetTheme[src] as enums.WidgetTheme;
        return r;
    }
}


function Create_WidgetRequiredFields_From(src:any): enums.WidgetRequiredFields | enums.WidgetRequiredFields[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.WidgetRequiredFields[] = Array<enums.WidgetRequiredFields>();
        for (const i in (src as enums.WidgetRequiredFields[])) {
            let r: enums.WidgetRequiredFields;
            for (const s of (src[i] as string).split(/,\s*/)) {
                r |= enums.WidgetRequiredFields[s] as enums.WidgetRequiredFields;
            }
            result.push(r);
        }
        return result;
    } else {
        let r: enums.WidgetRequiredFields;
        for (const s of (src as string).split(/,\s*/)) {
            r |= enums.WidgetRequiredFields[s] as enums.WidgetRequiredFields;
        }
        return r;
    }
}


function Create_ChatSessionFlags_From(src:any): enums.ChatSessionFlags | enums.ChatSessionFlags[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ChatSessionFlags[] = Array<enums.ChatSessionFlags>();
        for (const i in (src as enums.ChatSessionFlags[])) {
            let r: enums.ChatSessionFlags;
            for (const s of (src[i] as string).split(/,\s*/)) {
                r |= enums.ChatSessionFlags[s] as enums.ChatSessionFlags;
            }
            result.push(r);
        }
        return result;
    } else {
        let r: enums.ChatSessionFlags;
        for (const s of (src as string).split(/,\s*/)) {
            r |= enums.ChatSessionFlags[s] as enums.ChatSessionFlags;
        }
        return r;
    }
}


function Create_ConfigType_From(src:any): enums.ConfigType | enums.ConfigType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ConfigType[] = Array<enums.ConfigType>();
        for (const i in (src as enums.ConfigType[])) {
            let r = enums.ConfigType[src[i]] as enums.ConfigType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.ConfigType[src] as enums.ConfigType;
        return r;
    }
}


function Create_FormType_From(src:any): enums.FormType | enums.FormType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.FormType[] = Array<enums.FormType>();
        for (const i in (src as enums.FormType[])) {
            let r = enums.FormType[src[i]] as enums.FormType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.FormType[src] as enums.FormType;
        return r;
    }
}


function Create_ChatSessionStatus_From(src:any): enums.ChatSessionStatus | enums.ChatSessionStatus[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ChatSessionStatus[] = Array<enums.ChatSessionStatus>();
        for (const i in (src as enums.ChatSessionStatus[])) {
            let r = enums.ChatSessionStatus[src[i]] as enums.ChatSessionStatus;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.ChatSessionStatus[src] as enums.ChatSessionStatus;
        return r;
    }
}


function Create_ChatMessageType_From(src:any): enums.ChatMessageType | enums.ChatMessageType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ChatMessageType[] = Array<enums.ChatMessageType>();
        for (const i in (src as enums.ChatMessageType[])) {
            let r = enums.ChatMessageType[src[i]] as enums.ChatMessageType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.ChatMessageType[src] as enums.ChatMessageType;
        return r;
    }
}


function Create_ChatMessageSpecialType_From(src:any): enums.ChatMessageSpecialType | enums.ChatMessageSpecialType[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ChatMessageSpecialType[] = Array<enums.ChatMessageSpecialType>();
        for (const i in (src as enums.ChatMessageSpecialType[])) {
            let r = enums.ChatMessageSpecialType[src[i]] as enums.ChatMessageSpecialType;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.ChatMessageSpecialType[src] as enums.ChatMessageSpecialType;
        return r;
    }
}


function Create_ChatWidgetSize_From(src:any): enums.ChatWidgetSize | enums.ChatWidgetSize[] {
    if (!src) return null;

    if (Array.isArray(src)) {
        let result: enums.ChatWidgetSize[] = Array<enums.ChatWidgetSize>();
        for (const i in (src as enums.ChatWidgetSize[])) {
            let r = enums.ChatWidgetSize[src[i]] as enums.ChatWidgetSize;
            result.push(r);
        }
        return result;
    } else {
        let r = enums.ChatWidgetSize[src] as enums.ChatWidgetSize;
        return r;
    }
}


