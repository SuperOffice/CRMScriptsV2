
/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
//
// File:          UserRestApi.ts
//
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------

import { AxiosRequestConfig, AxiosError } from 'axios';
import * as moment from 'moment';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
import * as converters from './Converters';
import { FromBase64ToString, ToBase64 } from './Base64';

/**
 * SuperOffice User, with login credentials and an associated person.
 * User administration
 *
 * `api/v1/User`
 * 
 * **Online Restricted:** This agent is not available in Online by default. User management is not allowed for partner apps.
 */
export interface IUserRestApi {

    GetDefault(options?:base.WebApiGetRequestOptions): Promise< carriers.User >;
    Post(entity: carriers.User, options?:base.WebApiPutRequestOptions) : Promise< carriers.User >;
    PutById(id:number, entity: carriers.User, options?:base.WebApiPutRequestOptions) : Promise< carriers.User >;
    PatchById(id:number, entity: base.WebApiPatchOperation[] | carriers.User, options?:base.WebApiPutRequestOptions) : Promise< carriers.User >;
    DeleteById(UserId: number, options?:base.WebApiPutRequestOptions) : Promise<void>;
    GetById(UserId: number, options?:base.WebApiGetRequestOptions) :  Promise< carriers.User >;
} // interface IUserRestApi




/**
 * SuperOffice User, with login credentials and an associated person.
 * User administration
 *
 * `api/v1/User`
 */
export class UserRestApi extends base.WebApiBase implements IUserRestApi {
    constructor(baseUrl?: string, languageCode?:string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config:AxiosRequestConfig, languageCode?:string, cultureCode?: string);
    constructor(options: base.WebApiOptions);

    constructor(baseUrlOrOptions: string|base.WebApiOptions|undefined,
                langOrconfigOrRM?: string|base.ResourceParsing|AxiosRequestConfig|any, 
                langOrResourceOrRM?:string|base.ResourceParsing|any, 
                cultureCode?: string, 
                ) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/User/";
        super(options);
    }


    /**
     * `GET /api/v1/User/default`
     * Set default values into a new User.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    public async GetDefault(options?:base.WebApiGetRequestOptions): Promise< carriers.User > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.User >(async (resolve, reject) => {
            try {
                const response = await this._axios.get("default", config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.User = converters.Create_User_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    /*
     * `POST /api/v1/User/`
     * Creates a new User 
     * @param newUser - The User to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New User
     */
    public async Post(newUser: carriers.User, options?:base.WebApiPutRequestOptions) : Promise< carriers.User > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.User >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("", newUser, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.User = converters.Create_User_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    /*
     * `PUT /api/v1/User/123`
     * Updates the existing User
     * @param user - The User to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns The updated User
     */
    public async PutById(id:number, user: carriers.User, options?:base.WebApiPutRequestOptions) : Promise< carriers.User > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.User >(async (resolve, reject) => {
            try {
                const response = await this._axios.put(id.toString(), user, config);
                base.WebApiBase.SetCompleted(options);
                let res : carriers.User = null;
                if( response.status != 304 )
                    res = converters.Create_User_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /*
     * `PATCH /api/v1/User/123`
     * Updates an existing User
     * @param user - The partial User containing updated values, or an array of RFC6902 PATCH operations.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns The updated User
     */
    public async PatchById(id:number, user: base.WebApiPatchOperation[] | carriers.User, options?:base.WebApiPutRequestOptions) : Promise< carriers.User > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.User >(async (resolve, reject) => {
            try {
                const response = await this._axios.patch(id.toString(), user, config);
                base.WebApiBase.SetCompleted(options);
                let res : carriers.User = null;
                if( response.status != 304 )
                    res = converters.Create_User_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * `DELETE /api/v1/User/123`
     * Deletes the User
     * @param userId - The id of the User to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    public async DeleteById(userId: number, options?:base.WebApiPutRequestOptions) : Promise<void> {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                const response = await this._axios.delete( userId.toString(), config );
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * `GET /api/v1/User/123`
     * Get an existing User
     * @param userId - The User to be get.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns The User
     */
    public async GetById( userId: number, options?:base.WebApiGetRequestOptions) :  Promise< carriers.User > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.User >(async (resolve, reject) => {
            try {
                const response = await this._axios.get( userId.toString(), config);
                base.WebApiBase.SetCompleted(options);
                let res : carriers.User = null;
                if( response.status != 304 )
                    res = converters.Create_User_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


} // class UserRestApi 

