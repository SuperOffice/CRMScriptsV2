// <auto-generated>
//      SuperOffice Code Generator
//      modelling\templates\servicesnew\tsagents.tt
// </auto-generated>


/* tslint:disable */
//----------------------------------------------------------------------------
// G E N E R A T E D   F I L E !                       D O   N O T   E D I T !
//----------------------------------------------------------------------------
//
// File:          WebApi/AudienceAgent.ts
//
//----------------------------------------------------------------------------
//                                                Copyright (C) SuperOffice AS
//----------------------------------------------------------------------------

import { AxiosRequestConfig } from 'axios';
import * as moment from 'moment';
import * as enums from './Enums';
import * as base from './WebApiBase';
import * as carriers from './Carriers';
import * as converters from './Converters';
import { FromBase64ToString, ToBase64 } from './Base64';

/**
 * Services specific to the Audience client
 */
export interface IAudienceAgent {
    CreateDefaultAudienceLayoutEntity(): Promise< carriers.AudienceLayoutEntity >;
    SaveAudienceLayoutEntity(entity: carriers.AudienceLayoutEntity) : Promise< carriers.AudienceLayoutEntity >;
    DeleteAudienceLayoutEntity(AudienceLayoutEntityId: number) : Promise<void>;
    SaveConfigParameter(request: carriers.Audience_SaveConfigParameterRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter >;
    SaveConfigParameter(layoutName: string, configParameter: carriers.AudienceConfigParameter, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter >;
    GetConfigParameterValue(request: carriers.Audience_GetConfigParameterValueRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string >;
    GetConfigParameterValue(layoutName: string, parameterName: string, webapi_options?:base.WebApiRequestOptions) : Promise< string >;
    GetConfigParameter(request: carriers.Audience_GetConfigParameterRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter >;
    GetConfigParameter(layoutName: string, parameterName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter >;
    DeleteConfigParameter(request: carriers.Audience_DeleteConfigParameterRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    DeleteConfigParameter(layoutName: string, parameterName: string, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    GetMyConfigParameter(request: carriers.Audience_GetMyConfigParameterRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter >;
    GetMyConfigParameter(parameterName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter >;
    GetMyConfigParameterValue(request: carriers.Audience_GetMyConfigParameterValueRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string >;
    GetMyConfigParameterValue(parameterName: string, webapi_options?:base.WebApiRequestOptions) : Promise< string >;
    GetConfigParameterValueOnPerson(request: carriers.Audience_GetConfigParameterValueOnPersonRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string >;
    GetConfigParameterValueOnPerson(parameterName: string, personId: number, webapi_options?:base.WebApiRequestOptions) : Promise< string >;
    GetConfigParameterOnPerson(request: carriers.Audience_GetConfigParameterOnPersonRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter >;
    GetConfigParameterOnPerson(parameterName: string, personId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter >;
    GetConfigParametersByLayoutName(request: carriers.Audience_GetConfigParametersByLayoutNameRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter[] >;
    GetConfigParametersByLayoutName(layoutName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter[] >;
    GetMyConfigParameters(webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter[] >;
    GetConfigParametersOnPerson(request: carriers.Audience_GetConfigParametersOnPersonRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter[] >;
    GetConfigParametersOnPerson(personId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter[] >;
    GetAudienceLayoutEntity(audienceLayoutEntityId: number) :  Promise< carriers.AudienceLayoutEntity >;
    GetAudienceLayoutByName(request: carriers.Audience_GetAudienceLayoutByNameRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceLayoutEntity >;
    GetAudienceLayoutByName(layoutName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceLayoutEntity >;
    GetMyAudienceLayout(webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceLayoutEntity >;
    GetAudienceLayoutOnPerson(request: carriers.Audience_GetAudienceLayoutOnPersonRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceLayoutEntity >;
    GetAudienceLayoutOnPerson(personId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceLayoutEntity >;
    GetDefaultProjectImage(request: carriers.Audience_GetDefaultProjectImageRequest, webapi_options?:base.WebApiRequestOptions) : Promise< ArrayBuffer|string >;
    GetDefaultProjectImage(layoutName: string, webapi_options?:base.WebApiRequestOptions) : Promise< ArrayBuffer|string >;
    SetDefaultProjectImage(request: carriers.Audience_SetDefaultProjectImageRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    SetDefaultProjectImage(layoutName: string, image: ArrayBuffer|string, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    SetDefaultPersonImage(request: carriers.Audience_SetDefaultPersonImageRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    SetDefaultPersonImage(layoutName: string, image: ArrayBuffer|string, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    GetDefaultPersonImage(request: carriers.Audience_GetDefaultPersonImageRequest, webapi_options?:base.WebApiRequestOptions) : Promise< ArrayBuffer|string >;
    GetDefaultPersonImage(layoutName: string, webapi_options?:base.WebApiRequestOptions) : Promise< ArrayBuffer|string >;
    SetDefaultCountryFlag(request: carriers.Audience_SetDefaultCountryFlagRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    SetDefaultCountryFlag(layoutName: string, image: ArrayBuffer|string, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    GetDefaultCountryFlag(request: carriers.Audience_GetDefaultCountryFlagRequest, webapi_options?:base.WebApiRequestOptions) : Promise< ArrayBuffer|string >;
    GetDefaultCountryFlag(layoutName: string, webapi_options?:base.WebApiRequestOptions) : Promise< ArrayBuffer|string >;
    GetLogoImage(request: carriers.Audience_GetLogoImageRequest, webapi_options?:base.WebApiRequestOptions) : Promise< ArrayBuffer|string >;
    GetLogoImage(layoutName: string, webapi_options?:base.WebApiRequestOptions) : Promise< ArrayBuffer|string >;
    SetLogoImage(request: carriers.Audience_SetLogoImageRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
    SetLogoImage(layoutName: string, image: ArrayBuffer|string, webapi_options?:base.WebApiRequestOptions) : Promise< void >;
} // interface IAudienceAgent




/**
 * Services specific to the Audience client
 */
export class AudienceAgent extends base.WebApiBase implements IAudienceAgent {
    constructor(baseUrl?: string, languageCode?:string, cultureCode?: string);
    constructor(baseUrl?: string, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceManager:any);
    constructor(baseUrl: string, config:AxiosRequestConfig, resourceParsing?: base.ResourceParsing);
    constructor(baseUrl: string, config:AxiosRequestConfig, languageCode?:string, cultureCode?: string);
    constructor(options: base.WebApiOptions);

    constructor(baseUrlOrOptions: string|base.WebApiOptions|undefined,
                langOrconfigOrRM?: string|base.ResourceParsing|AxiosRequestConfig|any, 
                langOrResourceOrRM?:string|base.ResourceParsing|any, 
                cultureCode?: string, 
                ) {
        const options = base.WebApiBase.FigureOutOptions(baseUrlOrOptions, langOrconfigOrRM, langOrResourceOrRM, cultureCode);
        options.basePath = "v1/Agents/Audience/";
        super(options);
    }



    /**
     * Set default values into a new AudienceLayoutEntity.
     * NetServer calculates default values on the entity, which is required when creating/storing a new instance
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A blank entity.
     */
    public async CreateDefaultAudienceLayoutEntity(options?:base.WebApiRequestOptions) : Promise< carriers.AudienceLayoutEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.AudienceLayoutEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("CreateDefaultAudienceLayoutEntity", null, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.AudienceLayoutEntity = converters.Create_AudienceLayoutEntity_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }
    /*
     * Updates the existing AudienceLayoutEntity or creates a new AudienceLayoutEntity if the id parameter is empty
     * @param entity - The AudienceLayoutEntity to be saved.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns New or updated AudienceLayoutEntity
     */
    public async SaveAudienceLayoutEntity(entity: carriers.AudienceLayoutEntity, options?:base.WebApiRequestOptions) : Promise< carriers.AudienceLayoutEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.AudienceLayoutEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("SaveAudienceLayoutEntity", entity, config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.AudienceLayoutEntity = converters.Create_AudienceLayoutEntity_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    /*
     * Deletes the AudienceLayoutEntity
     * @param AudienceLayoutEntityId - The id of the AudienceLayoutEntity to be deleted.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     */
    public async DeleteAudienceLayoutEntity(AudienceLayoutEntityId: number, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("DeleteAudienceLayoutEntity?AudienceLayoutEntityId=" + AudienceLayoutEntityId, null, config );
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }

    private async _SaveConfigParameter(request: carriers.Audience_SaveConfigParameterRequest, options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.AudienceConfigParameter >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SaveConfigParameter", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.AudienceConfigParameter = converters.Create_AudienceConfigParameter_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Saves an Audience configuration parameter belonging to a Audience layout
     * @param request - LayoutName, ConfigParameter
     * @returns The new or updated configuration parameter
     */
    public async SaveConfigParameter(request: carriers.Audience_SaveConfigParameterRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter >;

    /**
     * Saves an Audience configuration parameter belonging to a Audience layout
     * @param layoutName - Name of the Audience layout instance
     * @param configParameter - The Audience configuration parameter to save.
     * @returns The new or updated configuration parameter
     */
    public async SaveConfigParameter(layoutName: string, configParameter: carriers.AudienceConfigParameter, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter >;

    public async SaveConfigParameter(layoutName:string|carriers.Audience_SaveConfigParameterRequest, configParameter?:carriers.AudienceConfigParameter|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter > {
        let _request : carriers.Audience_SaveConfigParameterRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = layoutName;
        if( typeof( first ) === "object" && first && ( typeof(first.LayoutName)!='undefined' || typeof(first.ConfigParameter)!='undefined' ) )
        {
            _request = layoutName as carriers.Audience_SaveConfigParameterRequest;
            _options = configParameter as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       LayoutName: layoutName as string,
                       ConfigParameter: configParameter as carriers.AudienceConfigParameter,
                       };   
            _options = webapi_options;
        }
        return this._SaveConfigParameter( _request, _options );
    }


    private async _GetConfigParameterValue(request: carriers.Audience_GetConfigParameterValueRequest, options?:base.WebApiRequestOptions) : Promise< string > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< string >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetConfigParameterValue", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : string = response.data as string;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Gets the string value of an Audience configuration parameter belonging to a given Audience layout with the specified configuration parameter name
     * @param request - LayoutName, ParameterName
     * @returns The string value of the Audience configuration parameter.
     */
    public async GetConfigParameterValue(request: carriers.Audience_GetConfigParameterValueRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string >;

    /**
     * Gets the string value of an Audience configuration parameter belonging to a given Audience layout with the specified configuration parameter name
     * @param layoutName - Name of the Audience layout instance
     * @param parameterName - The name of the Audience configuration parameter
     * @returns The string value of the Audience configuration parameter.
     */
    public async GetConfigParameterValue(layoutName: string, parameterName: string, webapi_options?:base.WebApiRequestOptions) : Promise< string >;

    public async GetConfigParameterValue(layoutName:string|carriers.Audience_GetConfigParameterValueRequest, parameterName?:string|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< string > {
        let _request : carriers.Audience_GetConfigParameterValueRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = layoutName;
        if( typeof( first ) === "object" && first && ( typeof(first.LayoutName)!='undefined' || typeof(first.ParameterName)!='undefined' ) )
        {
            _request = layoutName as carriers.Audience_GetConfigParameterValueRequest;
            _options = parameterName as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       LayoutName: layoutName as string,
                       ParameterName: parameterName as string,
                       };   
            _options = webapi_options;
        }
        return this._GetConfigParameterValue( _request, _options );
    }


    private async _GetConfigParameter(request: carriers.Audience_GetConfigParameterRequest, options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.AudienceConfigParameter >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetConfigParameter", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.AudienceConfigParameter = converters.Create_AudienceConfigParameter_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Gets an Audience configuration parameter belonging to a given Audience layout with the specified configuration parameter name
     * @param request - LayoutName, ParameterName
     * @returns The Audience configuration parameter.
     */
    public async GetConfigParameter(request: carriers.Audience_GetConfigParameterRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter >;

    /**
     * Gets an Audience configuration parameter belonging to a given Audience layout with the specified configuration parameter name
     * @param layoutName - Name of the Audience layout instance
     * @param parameterName - The name of the Audience configuration parameter
     * @returns The Audience configuration parameter.
     */
    public async GetConfigParameter(layoutName: string, parameterName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter >;

    public async GetConfigParameter(layoutName:string|carriers.Audience_GetConfigParameterRequest, parameterName?:string|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter > {
        let _request : carriers.Audience_GetConfigParameterRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = layoutName;
        if( typeof( first ) === "object" && first && ( typeof(first.LayoutName)!='undefined' || typeof(first.ParameterName)!='undefined' ) )
        {
            _request = layoutName as carriers.Audience_GetConfigParameterRequest;
            _options = parameterName as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       LayoutName: layoutName as string,
                       ParameterName: parameterName as string,
                       };   
            _options = webapi_options;
        }
        return this._GetConfigParameter( _request, _options );
    }


    private async _DeleteConfigParameter(request: carriers.Audience_DeleteConfigParameterRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("DeleteConfigParameter", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Deletes an Audience configuration parameter belonging to a Audience layout
     * @param request - LayoutName, ParameterName
     * @returns 
     */
    public async DeleteConfigParameter(request: carriers.Audience_DeleteConfigParameterRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Deletes an Audience configuration parameter belonging to a Audience layout
     * @param layoutName - Name of the Audience layout instance
     * @param parameterName - The name of the Audience configuration parameter
     * @returns 
     */
    public async DeleteConfigParameter(layoutName: string, parameterName: string, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async DeleteConfigParameter(layoutName:string|carriers.Audience_DeleteConfigParameterRequest, parameterName?:string|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.Audience_DeleteConfigParameterRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = layoutName;
        if( typeof( first ) === "object" && first && ( typeof(first.LayoutName)!='undefined' || typeof(first.ParameterName)!='undefined' ) )
        {
            _request = layoutName as carriers.Audience_DeleteConfigParameterRequest;
            _options = parameterName as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       LayoutName: layoutName as string,
                       ParameterName: parameterName as string,
                       };   
            _options = webapi_options;
        }
        return this._DeleteConfigParameter( _request, _options );
    }


    private async _GetMyConfigParameter(request: carriers.Audience_GetMyConfigParameterRequest, options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.AudienceConfigParameter >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetMyConfigParameter", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.AudienceConfigParameter = converters.Create_AudienceConfigParameter_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Gets an Audience configuration parameter belonging to the currently logged on user with the specified configuration parameter name.
     * @param request - ParameterName
     * @returns The Audience configuration parameter.
     */
    public async GetMyConfigParameter(request: carriers.Audience_GetMyConfigParameterRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter >;

    /**
     * Gets an Audience configuration parameter belonging to the currently logged on user with the specified configuration parameter name.
     * @param parameterName - The name of the Audience configuration parameter
     * @returns The Audience configuration parameter.
     */
    public async GetMyConfigParameter(parameterName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter >;

    public async GetMyConfigParameter(parameterName:string|carriers.Audience_GetMyConfigParameterRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter > {
        let _request : carriers.Audience_GetMyConfigParameterRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = parameterName;
        if( typeof( first ) === "object" && first && ( typeof(first.ParameterName)!='undefined' ) )
        {
            _request = parameterName as carriers.Audience_GetMyConfigParameterRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ParameterName: parameterName as string,
                       };   
            _options = webapi_options;
        }
        return this._GetMyConfigParameter( _request, _options );
    }


    private async _GetMyConfigParameterValue(request: carriers.Audience_GetMyConfigParameterValueRequest, options?:base.WebApiRequestOptions) : Promise< string > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< string >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetMyConfigParameterValue", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : string = response.data as string;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Gets the string value of an Audience configuration parameter belonging to the currently logged on user with the specified configuration parameter name.
     * @param request - ParameterName
     * @returns The string value of the Audience configuration parameter.
     */
    public async GetMyConfigParameterValue(request: carriers.Audience_GetMyConfigParameterValueRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string >;

    /**
     * Gets the string value of an Audience configuration parameter belonging to the currently logged on user with the specified configuration parameter name.
     * @param parameterName - The name of the Audience configuration parameter
     * @returns The string value of the Audience configuration parameter.
     */
    public async GetMyConfigParameterValue(parameterName: string, webapi_options?:base.WebApiRequestOptions) : Promise< string >;

    public async GetMyConfigParameterValue(parameterName:string|carriers.Audience_GetMyConfigParameterValueRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string > {
        let _request : carriers.Audience_GetMyConfigParameterValueRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = parameterName;
        if( typeof( first ) === "object" && first && ( typeof(first.ParameterName)!='undefined' ) )
        {
            _request = parameterName as carriers.Audience_GetMyConfigParameterValueRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ParameterName: parameterName as string,
                       };   
            _options = webapi_options;
        }
        return this._GetMyConfigParameterValue( _request, _options );
    }


    private async _GetConfigParameterValueOnPerson(request: carriers.Audience_GetConfigParameterValueOnPersonRequest, options?:base.WebApiRequestOptions) : Promise< string > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< string >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetConfigParameterValueOnPerson", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : string = response.data as string;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Gets the string value of an Audience configuration parameter with the specified configuration parameter name on the person specified
     * @param request - ParameterName, PersonId
     * @returns The string value of the Audience configuration parameter.
     */
    public async GetConfigParameterValueOnPerson(request: carriers.Audience_GetConfigParameterValueOnPersonRequest, webapi_options?:base.WebApiRequestOptions) : Promise< string >;

    /**
     * Gets the string value of an Audience configuration parameter with the specified configuration parameter name on the person specified
     * @param parameterName - The name of the Audience configuration parameter
     * @param personId - Id of the person the parameter belongs to
     * @returns The string value of the Audience configuration parameter.
     */
    public async GetConfigParameterValueOnPerson(parameterName: string, personId: number, webapi_options?:base.WebApiRequestOptions) : Promise< string >;

    public async GetConfigParameterValueOnPerson(parameterName:string|carriers.Audience_GetConfigParameterValueOnPersonRequest, personId?:number|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< string > {
        let _request : carriers.Audience_GetConfigParameterValueOnPersonRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = parameterName;
        if( typeof( first ) === "object" && first && ( typeof(first.ParameterName)!='undefined' || typeof(first.PersonId)!='undefined' ) )
        {
            _request = parameterName as carriers.Audience_GetConfigParameterValueOnPersonRequest;
            _options = personId as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ParameterName: parameterName as string,
                       PersonId: personId as number,
                       };   
            _options = webapi_options;
        }
        return this._GetConfigParameterValueOnPerson( _request, _options );
    }


    private async _GetConfigParameterOnPerson(request: carriers.Audience_GetConfigParameterOnPersonRequest, options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.AudienceConfigParameter >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetConfigParameterOnPerson", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.AudienceConfigParameter = converters.Create_AudienceConfigParameter_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Gets an Audience configuration parameter with the specified configuration parameter name on the person specified
     * @param request - ParameterName, PersonId
     * @returns The Audience configuration parameter.
     */
    public async GetConfigParameterOnPerson(request: carriers.Audience_GetConfigParameterOnPersonRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter >;

    /**
     * Gets an Audience configuration parameter with the specified configuration parameter name on the person specified
     * @param parameterName - The name of the Audience configuration parameter
     * @param personId - Id of the person the parameter belongs to
     * @returns The Audience configuration parameter.
     */
    public async GetConfigParameterOnPerson(parameterName: string, personId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter >;

    public async GetConfigParameterOnPerson(parameterName:string|carriers.Audience_GetConfigParameterOnPersonRequest, personId?:number|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter > {
        let _request : carriers.Audience_GetConfigParameterOnPersonRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = parameterName;
        if( typeof( first ) === "object" && first && ( typeof(first.ParameterName)!='undefined' || typeof(first.PersonId)!='undefined' ) )
        {
            _request = parameterName as carriers.Audience_GetConfigParameterOnPersonRequest;
            _options = personId as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       ParameterName: parameterName as string,
                       PersonId: personId as number,
                       };   
            _options = webapi_options;
        }
        return this._GetConfigParameterOnPerson( _request, _options );
    }


    private async _GetConfigParametersByLayoutName(request: carriers.Audience_GetConfigParametersByLayoutNameRequest, options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.AudienceConfigParameter[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetConfigParametersByLayoutName", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.AudienceConfigParameter[] = converters.Create_AudienceConfigParameterArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Gets the Audience configuration parameters belonging to a given Audience layout.
     * @param request - LayoutName
     * @returns Array of Audience configuration parameters.
     */
    public async GetConfigParametersByLayoutName(request: carriers.Audience_GetConfigParametersByLayoutNameRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter[] >;

    /**
     * Gets the Audience configuration parameters belonging to a given Audience layout.
     * @param layoutName - Name of the Audience layout instance
     * @returns Array of Audience configuration parameters.
     */
    public async GetConfigParametersByLayoutName(layoutName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter[] >;

    public async GetConfigParametersByLayoutName(layoutName:string|carriers.Audience_GetConfigParametersByLayoutNameRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter[] > {
        let _request : carriers.Audience_GetConfigParametersByLayoutNameRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = layoutName;
        if( typeof( first ) === "object" && first && ( typeof(first.LayoutName)!='undefined' ) )
        {
            _request = layoutName as carriers.Audience_GetConfigParametersByLayoutNameRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       LayoutName: layoutName as string,
                       };   
            _options = webapi_options;
        }
        return this._GetConfigParametersByLayoutName( _request, _options );
    }


    private async _GetMyConfigParameters( options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.AudienceConfigParameter[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetMyConfigParameters", undefined , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.AudienceConfigParameter[] = converters.Create_AudienceConfigParameterArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    /**
     * Gets the Audience configuration parameters belonging to the currently logged on user.
     * @returns Array of Audience configuration parameters.
     */
    public async GetMyConfigParameters(webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter[] >
    {
        return this._GetMyConfigParameters(webapi_options);
    }


    private async _GetConfigParametersOnPerson(request: carriers.Audience_GetConfigParametersOnPersonRequest, options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter[] > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.AudienceConfigParameter[] >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetConfigParametersOnPerson", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.AudienceConfigParameter[] = converters.Create_AudienceConfigParameterArray_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Gets the Audience configuration parameters belonging to the person specified
     * @param request - PersonId
     * @returns Array of Audience configuration parameters.
     */
    public async GetConfigParametersOnPerson(request: carriers.Audience_GetConfigParametersOnPersonRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter[] >;

    /**
     * Gets the Audience configuration parameters belonging to the person specified
     * @param personId - Id of the person the parameter belongs to
     * @returns Array of Audience configuration parameters.
     */
    public async GetConfigParametersOnPerson(personId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter[] >;

    public async GetConfigParametersOnPerson(personId:number|carriers.Audience_GetConfigParametersOnPersonRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceConfigParameter[] > {
        let _request : carriers.Audience_GetConfigParametersOnPersonRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = personId;
        if( typeof( first ) === "object" && first && ( typeof(first.PersonId)!='undefined' ) )
        {
            _request = personId as carriers.Audience_GetConfigParametersOnPersonRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       PersonId: personId as number,
                       };   
            _options = webapi_options;
        }
        return this._GetConfigParametersOnPerson( _request, _options );
    }

    /*
     * Gets a AudienceLayoutEntity object.
     * @param audienceLayoutEntityId - The primary key.
     * @param options - Override language/culture codes on this request. Provide cancellation and request status values.
     * @returns A single AudienceLayoutEntity
     */
    public async GetAudienceLayoutEntity(audienceLayoutEntityId: number, options?:base.WebApiRequestOptions) : Promise< carriers.AudienceLayoutEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.AudienceLayoutEntity >(async (resolve, reject) => {
            try {
                const response = await this._axios.post("GetAudienceLayoutEntity?audienceLayoutEntityId=" + audienceLayoutEntityId, null, config);
                base.WebApiBase.SetCompleted(options);
                const res = converters.Create_AudienceLayoutEntity_From( response.data );               
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    private async _GetAudienceLayoutByName(request: carriers.Audience_GetAudienceLayoutByNameRequest, options?:base.WebApiRequestOptions) : Promise< carriers.AudienceLayoutEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.AudienceLayoutEntity >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetAudienceLayoutByName", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.AudienceLayoutEntity = converters.Create_AudienceLayoutEntity_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Gets an Audience layout by it&apos;s instance name
     * @param request - LayoutName
     * @returns Audience layout entity
     */
    public async GetAudienceLayoutByName(request: carriers.Audience_GetAudienceLayoutByNameRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceLayoutEntity >;

    /**
     * Gets an Audience layout by it&apos;s instance name
     * @param layoutName - Name of the Audience layout instance
     * @returns Audience layout entity
     */
    public async GetAudienceLayoutByName(layoutName: string, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceLayoutEntity >;

    public async GetAudienceLayoutByName(layoutName:string|carriers.Audience_GetAudienceLayoutByNameRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceLayoutEntity > {
        let _request : carriers.Audience_GetAudienceLayoutByNameRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = layoutName;
        if( typeof( first ) === "object" && first && ( typeof(first.LayoutName)!='undefined' ) )
        {
            _request = layoutName as carriers.Audience_GetAudienceLayoutByNameRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       LayoutName: layoutName as string,
                       };   
            _options = webapi_options;
        }
        return this._GetAudienceLayoutByName( _request, _options );
    }


    private async _GetMyAudienceLayout( options?:base.WebApiRequestOptions) : Promise< carriers.AudienceLayoutEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.AudienceLayoutEntity >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetMyAudienceLayout", undefined , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.AudienceLayoutEntity = converters.Create_AudienceLayoutEntity_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }


    /**
     * Gets the Audience layout belonging to the currently logged on user.
     * @returns Audience layout entity
     */
    public async GetMyAudienceLayout(webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceLayoutEntity >
    {
        return this._GetMyAudienceLayout(webapi_options);
    }


    private async _GetAudienceLayoutOnPerson(request: carriers.Audience_GetAudienceLayoutOnPersonRequest, options?:base.WebApiRequestOptions) : Promise< carriers.AudienceLayoutEntity > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< carriers.AudienceLayoutEntity >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetAudienceLayoutOnPerson", request , config);
                base.WebApiBase.SetCompleted(options);
                const res : carriers.AudienceLayoutEntity = converters.Create_AudienceLayoutEntity_From( response.data );
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Gets the Audience layout belonging to the person specified.
     * @param request - PersonId
     * @returns Audience layout entity
     */
    public async GetAudienceLayoutOnPerson(request: carriers.Audience_GetAudienceLayoutOnPersonRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceLayoutEntity >;

    /**
     * Gets the Audience layout belonging to the person specified.
     * @param personId - The person id
     * @returns Audience layout entity
     */
    public async GetAudienceLayoutOnPerson(personId: number, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceLayoutEntity >;

    public async GetAudienceLayoutOnPerson(personId:number|carriers.Audience_GetAudienceLayoutOnPersonRequest, webapi_options?:base.WebApiRequestOptions) : Promise< carriers.AudienceLayoutEntity > {
        let _request : carriers.Audience_GetAudienceLayoutOnPersonRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = personId;
        if( typeof( first ) === "object" && first && ( typeof(first.PersonId)!='undefined' ) )
        {
            _request = personId as carriers.Audience_GetAudienceLayoutOnPersonRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       PersonId: personId as number,
                       };   
            _options = webapi_options;
        }
        return this._GetAudienceLayoutOnPerson( _request, _options );
    }


    private async _GetDefaultProjectImage(request: carriers.Audience_GetDefaultProjectImageRequest, options?:base.WebApiRequestOptions) : Promise< ArrayBuffer|string > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options) || {};
        base.WebApiBase.SetPending(options);
        return new Promise< ArrayBuffer|string >(async (resolve, reject) => {
            try {
                if( ! options || options.returnBlobAs == base.ReturnBlobType.AsArrayBuffer ) {
                    config.responseType = "arraybuffer";
                    config.headers = config.headers || {};
                    config.headers["Accept"] = "application/octet-stream";
                }
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetDefaultProjectImage", request , config);
                base.WebApiBase.SetCompleted(options);
                let res : ArrayBuffer | string = null;
                if( options && options.returnBlobAs != base.ReturnBlobType.AsArrayBuffer )
                {
                    res = response.data as string;
                    if( options.returnBlobAs == base.ReturnBlobType.AsString )
                    {
                        res = FromBase64ToString(res);
                    }
                } 
                else 
                {
                    res = response.data as ArrayBuffer;
                }

                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Returns the default project or event image that is displayed in Audience when no project/event image is found. The image belongs to a specific Audience layout instance.
     * @param request - LayoutName
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)
     */
    public async GetDefaultProjectImage(request: carriers.Audience_GetDefaultProjectImageRequest, webapi_options?:base.WebApiRequestOptions) : Promise< ArrayBuffer|string >;

    /**
     * Returns the default project or event image that is displayed in Audience when no project/event image is found. The image belongs to a specific Audience layout instance.
     * @param layoutName - Name of the Audience layout instance
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)
     */
    public async GetDefaultProjectImage(layoutName: string, webapi_options?:base.WebApiRequestOptions) : Promise< ArrayBuffer|string >;

    public async GetDefaultProjectImage(layoutName:string|carriers.Audience_GetDefaultProjectImageRequest, webapi_options?:base.WebApiRequestOptions) : Promise< ArrayBuffer|string > {
        let _request : carriers.Audience_GetDefaultProjectImageRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = layoutName;
        if( typeof( first ) === "object" && first && ( typeof(first.LayoutName)!='undefined' ) )
        {
            _request = layoutName as carriers.Audience_GetDefaultProjectImageRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       LayoutName: layoutName as string,
                       };   
            _options = webapi_options;
        }
        return this._GetDefaultProjectImage( _request, _options );
    }


    private async _SetDefaultProjectImage(request: carriers.Audience_SetDefaultProjectImageRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetDefaultProjectImage", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Stores the default project or event image that is displayed in Audience when no project/event image is found. The image is set on a specific Audience layout instance.
     * @param request - LayoutName, Image
     * @returns 
     */
    public async SetDefaultProjectImage(request: carriers.Audience_SetDefaultProjectImageRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Stores the default project or event image that is displayed in Audience when no project/event image is found. The image is set on a specific Audience layout instance.
     * @param layoutName - Name of the Audience layout instance
     * @param image - The default project/event image to be stored for this Audience layout instance (System.Drawing.Image)
     * @returns 
     */
    public async SetDefaultProjectImage(layoutName: string, image: ArrayBuffer|string, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async SetDefaultProjectImage(layoutName:string|carriers.Audience_SetDefaultProjectImageRequest, image?:ArrayBuffer|string|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.Audience_SetDefaultProjectImageRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = layoutName;
        if( typeof( first ) === "object" && first && ( typeof(first.LayoutName)!='undefined' || typeof(first.Image)!='undefined' ) )
        {
            _request = layoutName as carriers.Audience_SetDefaultProjectImageRequest;
            _options = image as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       LayoutName: layoutName as string,
                       Image: image as ArrayBuffer|string,
                       };   
            _options = webapi_options;
        }
         _request.Image = ToBase64(_request.Image);
        return this._SetDefaultProjectImage( _request, _options );
    }


    private async _SetDefaultPersonImage(request: carriers.Audience_SetDefaultPersonImageRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetDefaultPersonImage", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Stores the default person (sales rep) image that is displayed in Audience when no person image is found. The image is set on a specific Audience layout instance.
     * @param request - LayoutName, Image
     * @returns 
     */
    public async SetDefaultPersonImage(request: carriers.Audience_SetDefaultPersonImageRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Stores the default person (sales rep) image that is displayed in Audience when no person image is found. The image is set on a specific Audience layout instance.
     * @param layoutName - Name of the Audience layout instance
     * @param image - The default project/event image to be stored for this Audience layout instance (System.Drawing.Image)
     * @returns 
     */
    public async SetDefaultPersonImage(layoutName: string, image: ArrayBuffer|string, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async SetDefaultPersonImage(layoutName:string|carriers.Audience_SetDefaultPersonImageRequest, image?:ArrayBuffer|string|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.Audience_SetDefaultPersonImageRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = layoutName;
        if( typeof( first ) === "object" && first && ( typeof(first.LayoutName)!='undefined' || typeof(first.Image)!='undefined' ) )
        {
            _request = layoutName as carriers.Audience_SetDefaultPersonImageRequest;
            _options = image as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       LayoutName: layoutName as string,
                       Image: image as ArrayBuffer|string,
                       };   
            _options = webapi_options;
        }
         _request.Image = ToBase64(_request.Image);
        return this._SetDefaultPersonImage( _request, _options );
    }


    private async _GetDefaultPersonImage(request: carriers.Audience_GetDefaultPersonImageRequest, options?:base.WebApiRequestOptions) : Promise< ArrayBuffer|string > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options) || {};
        base.WebApiBase.SetPending(options);
        return new Promise< ArrayBuffer|string >(async (resolve, reject) => {
            try {
                if( ! options || options.returnBlobAs == base.ReturnBlobType.AsArrayBuffer ) {
                    config.responseType = "arraybuffer";
                    config.headers = config.headers || {};
                    config.headers["Accept"] = "application/octet-stream";
                }
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetDefaultPersonImage", request , config);
                base.WebApiBase.SetCompleted(options);
                let res : ArrayBuffer | string = null;
                if( options && options.returnBlobAs != base.ReturnBlobType.AsArrayBuffer )
                {
                    res = response.data as string;
                    if( options.returnBlobAs == base.ReturnBlobType.AsString )
                    {
                        res = FromBase64ToString(res);
                    }
                } 
                else 
                {
                    res = response.data as ArrayBuffer;
                }

                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Returns the default person (sales rep) image that is displayed in Audience when no person image is found. The image belongs to a specific Audience layout instance.
     * @param request - LayoutName
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)
     */
    public async GetDefaultPersonImage(request: carriers.Audience_GetDefaultPersonImageRequest, webapi_options?:base.WebApiRequestOptions) : Promise< ArrayBuffer|string >;

    /**
     * Returns the default person (sales rep) image that is displayed in Audience when no person image is found. The image belongs to a specific Audience layout instance.
     * @param layoutName - Name of the Audience layout instance
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)
     */
    public async GetDefaultPersonImage(layoutName: string, webapi_options?:base.WebApiRequestOptions) : Promise< ArrayBuffer|string >;

    public async GetDefaultPersonImage(layoutName:string|carriers.Audience_GetDefaultPersonImageRequest, webapi_options?:base.WebApiRequestOptions) : Promise< ArrayBuffer|string > {
        let _request : carriers.Audience_GetDefaultPersonImageRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = layoutName;
        if( typeof( first ) === "object" && first && ( typeof(first.LayoutName)!='undefined' ) )
        {
            _request = layoutName as carriers.Audience_GetDefaultPersonImageRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       LayoutName: layoutName as string,
                       };   
            _options = webapi_options;
        }
        return this._GetDefaultPersonImage( _request, _options );
    }


    private async _SetDefaultCountryFlag(request: carriers.Audience_SetDefaultCountryFlagRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetDefaultCountryFlag", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Stores the default country flag image that is displayed in Audience when no person image is found. The image is set on a specific Audience layout instance.
     * @param request - LayoutName, Image
     * @returns 
     */
    public async SetDefaultCountryFlag(request: carriers.Audience_SetDefaultCountryFlagRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * Stores the default country flag image that is displayed in Audience when no person image is found. The image is set on a specific Audience layout instance.
     * @param layoutName - Name of the Audience layout instance
     * @param image - The default country image to be stored for this Audience layout instance (System.Drawing.Image)
     * @returns 
     */
    public async SetDefaultCountryFlag(layoutName: string, image: ArrayBuffer|string, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async SetDefaultCountryFlag(layoutName:string|carriers.Audience_SetDefaultCountryFlagRequest, image?:ArrayBuffer|string|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.Audience_SetDefaultCountryFlagRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = layoutName;
        if( typeof( first ) === "object" && first && ( typeof(first.LayoutName)!='undefined' || typeof(first.Image)!='undefined' ) )
        {
            _request = layoutName as carriers.Audience_SetDefaultCountryFlagRequest;
            _options = image as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       LayoutName: layoutName as string,
                       Image: image as ArrayBuffer|string,
                       };   
            _options = webapi_options;
        }
         _request.Image = ToBase64(_request.Image);
        return this._SetDefaultCountryFlag( _request, _options );
    }


    private async _GetDefaultCountryFlag(request: carriers.Audience_GetDefaultCountryFlagRequest, options?:base.WebApiRequestOptions) : Promise< ArrayBuffer|string > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options) || {};
        base.WebApiBase.SetPending(options);
        return new Promise< ArrayBuffer|string >(async (resolve, reject) => {
            try {
                if( ! options || options.returnBlobAs == base.ReturnBlobType.AsArrayBuffer ) {
                    config.responseType = "arraybuffer";
                    config.headers = config.headers || {};
                    config.headers["Accept"] = "application/octet-stream";
                }
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetDefaultCountryFlag", request , config);
                base.WebApiBase.SetCompleted(options);
                let res : ArrayBuffer | string = null;
                if( options && options.returnBlobAs != base.ReturnBlobType.AsArrayBuffer )
                {
                    res = response.data as string;
                    if( options.returnBlobAs == base.ReturnBlobType.AsString )
                    {
                        res = FromBase64ToString(res);
                    }
                } 
                else 
                {
                    res = response.data as ArrayBuffer;
                }

                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * Returns the default country flag image that is displayed in Audience when no person image is found. The image belongs to a specific Audience layout instance.
     * @param request - LayoutName
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)
     */
    public async GetDefaultCountryFlag(request: carriers.Audience_GetDefaultCountryFlagRequest, webapi_options?:base.WebApiRequestOptions) : Promise< ArrayBuffer|string >;

    /**
     * Returns the default country flag image that is displayed in Audience when no person image is found. The image belongs to a specific Audience layout instance.
     * @param layoutName - Name of the Audience layout instance
     * @returns The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)
     */
    public async GetDefaultCountryFlag(layoutName: string, webapi_options?:base.WebApiRequestOptions) : Promise< ArrayBuffer|string >;

    public async GetDefaultCountryFlag(layoutName:string|carriers.Audience_GetDefaultCountryFlagRequest, webapi_options?:base.WebApiRequestOptions) : Promise< ArrayBuffer|string > {
        let _request : carriers.Audience_GetDefaultCountryFlagRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = layoutName;
        if( typeof( first ) === "object" && first && ( typeof(first.LayoutName)!='undefined' ) )
        {
            _request = layoutName as carriers.Audience_GetDefaultCountryFlagRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       LayoutName: layoutName as string,
                       };   
            _options = webapi_options;
        }
        return this._GetDefaultCountryFlag( _request, _options );
    }


    private async _GetLogoImage(request: carriers.Audience_GetLogoImageRequest, options?:base.WebApiRequestOptions) : Promise< ArrayBuffer|string > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options) || {};
        base.WebApiBase.SetPending(options);
        return new Promise< ArrayBuffer|string >(async (resolve, reject) => {
            try {
                if( ! options || options.returnBlobAs == base.ReturnBlobType.AsArrayBuffer ) {
                    config.responseType = "arraybuffer";
                    config.headers = config.headers || {};
                    config.headers["Accept"] = "application/octet-stream";
                }
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("GetLogoImage", request , config);
                base.WebApiBase.SetCompleted(options);
                let res : ArrayBuffer | string = null;
                if( options && options.returnBlobAs != base.ReturnBlobType.AsArrayBuffer )
                {
                    res = response.data as string;
                    if( options.returnBlobAs == base.ReturnBlobType.AsString )
                    {
                        res = FromBase64ToString(res);
                    }
                } 
                else 
                {
                    res = response.data as ArrayBuffer;
                }

                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * 
     * @param request - LayoutName
     * @returns 
     */
    public async GetLogoImage(request: carriers.Audience_GetLogoImageRequest, webapi_options?:base.WebApiRequestOptions) : Promise< ArrayBuffer|string >;

    /**
     * 
     * @param layoutName - 
     * @returns 
     */
    public async GetLogoImage(layoutName: string, webapi_options?:base.WebApiRequestOptions) : Promise< ArrayBuffer|string >;

    public async GetLogoImage(layoutName:string|carriers.Audience_GetLogoImageRequest, webapi_options?:base.WebApiRequestOptions) : Promise< ArrayBuffer|string > {
        let _request : carriers.Audience_GetLogoImageRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = layoutName;
        if( typeof( first ) === "object" && first && ( typeof(first.LayoutName)!='undefined' ) )
        {
            _request = layoutName as carriers.Audience_GetLogoImageRequest;
            _options = webapi_options as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       LayoutName: layoutName as string,
                       };   
            _options = webapi_options;
        }
        return this._GetLogoImage( _request, _options );
    }


    private async _SetLogoImage(request: carriers.Audience_SetLogoImageRequest, options?:base.WebApiRequestOptions) : Promise< void > {
        const config : AxiosRequestConfig = base.WebApiBase.GetAxiosRequestConfig(options, this._options);
        base.WebApiBase.SetPending(options);
        return new Promise< void >(async (resolve, reject) => {
            try {
                config.baseURL = this._options.baseUrl;
                const response = await this._axios.post("SetLogoImage", request , config);
                base.WebApiBase.SetCompleted(options);
                const res = response.data;
                resolve(res);
            }
            catch( err ) {
                base.WebApiBase.HandleError(options, config, err);
                reject(err);
            }
        });
    }



    /**
     * 
     * @param request - LayoutName, Image
     * @returns 
     */
    public async SetLogoImage(request: carriers.Audience_SetLogoImageRequest, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    /**
     * 
     * @param layoutName - 
     * @param image - 
     * @returns 
     */
    public async SetLogoImage(layoutName: string, image: ArrayBuffer|string, webapi_options?:base.WebApiRequestOptions) : Promise< void >;

    public async SetLogoImage(layoutName:string|carriers.Audience_SetLogoImageRequest, image?:ArrayBuffer|string|base.WebApiRequestOptions, webapi_options?:base.WebApiRequestOptions) : Promise< void > {
        let _request : carriers.Audience_SetLogoImageRequest = null;
        let _options : base.WebApiRequestOptions = null;
        const first : any = layoutName;
        if( typeof( first ) === "object" && first && ( typeof(first.LayoutName)!='undefined' || typeof(first.Image)!='undefined' ) )
        {
            _request = layoutName as carriers.Audience_SetLogoImageRequest;
            _options = image as base.WebApiRequestOptions;
        }
        else
        {
            _request = { 
                       LayoutName: layoutName as string,
                       Image: image as ArrayBuffer|string,
                       };   
            _options = webapi_options;
        }
         _request.Image = ToBase64(_request.Image);
        return this._SetLogoImage( _request, _options );
    }

    } // class v1AudienceAgentController 


