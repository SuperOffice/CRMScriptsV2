import * as assert from "assert";
import axios from "axios";
import nock = require("nock");
import { ReturnBlobType } from "../src/WebApiBase";
import { DocumentAgent } from "../src/DocumentAgent";
import { Document_GetTemplateStreamRequest } from "../src/Carriers";

const host: string = "http://localhost/";

axios.defaults.baseURL = host;

const responseJson = require("./DocumentGetTemplateStream.json");
const responseBinary = require("./DocumentGetTemplateStreamBinary.json");

describe("WebAPI Document tests", () => {
	it("Can get a personal template using params", done => {
		let scope = nock(host)
			.post("/api/v1/Agents/Document/GetTemplateStream")
			.reply(200, responseBinary);

		let agent = new DocumentAgent(host);
		agent.GetTemplateStream("agent1.txt", true, "en").then(response => {
			let res = response as ArrayBuffer;
			assert.equal(res.byteLength, 33);
			assert.equal(res[0], 65);
			assert.equal(res[1], 103);
			assert.equal(res[2], 101);

			done();
		});
	});

	it("Can get a personal template using request", done => {
		let scope = nock(host)
			.post("/api/v1/Agents/Document/GetTemplateStream")
			.reply(200, responseBinary);

		let agent = new DocumentAgent(host);
		let req: Document_GetTemplateStreamRequest = {
			TemplateName: "agent1.txt",
			AllowPersonal: true,
			UiCulture: "en"
		};
		agent.GetTemplateStream(req).then(response => {
			response = response as ArrayBuffer;
			assert.equal(response.byteLength, 33);
			assert.equal(response[0], 65);
			assert.equal(response[1], 103);
			assert.equal(response[2], 101);
			done();
		});
	});

	it("Can get a personal template as base64", done => {
		let scope = nock(host)
			.post("/api/v1/Agents/Document/GetTemplateStream")
			.reply(200, responseJson);

		let agent = new DocumentAgent(host);
		agent
			.GetTemplateStream("agent1.txt", true, "en", { returnBlobAs: ReturnBlobType.AsBase64 })
			.then(response => {
				let res = response as string;
				assert.equal(res, responseJson);
				done();
			});
	});

	it("Can get a personal template as string", done => {
		let scope = nock(host)
			.post("/api/v1/Agents/Document/GetTemplateStream")
			.reply(200, responseJson);

		let agent = new DocumentAgent(host);
		agent
			.GetTemplateStream("agent1.txt", true, "en", { returnBlobAs: ReturnBlobType.AsString })
			.then(response => {
				let res = response as string;
				assert.equal(res, responseBinary);
				done();
			});
	});

	it("Can get a personal template as array buffer", done => {
		let scope = nock(host)
			.post("/api/v1/Agents/Document/GetTemplateStream")
			.reply(200, responseBinary);

		let agent = new DocumentAgent(host);
		agent
			.GetTemplateStream("agent1.txt", true, "en", { returnBlobAs: ReturnBlobType.AsArrayBuffer })
			.then(response => {
				response = response as ArrayBuffer;
				assert.equal(response.byteLength, 33);
				assert.equal(response[0], 65);
				assert.equal(response[1], 103);
				assert.equal(response[2], 101);
				done();
			});
	});
});
