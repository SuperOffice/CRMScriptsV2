import * as assert from "assert";
import axios, { AxiosRequestConfig } from "axios";
import nock = require("nock");
import { WebhookAgent } from "../src/WebhookAgent";
import { WebApiOptions, ResourceParsing } from "../src/WebApiBase";
import { WebhookState } from "../src/Enums";
import { AgentsApi } from "../src/WebApi";
import { Webhook } from "../src/Carriers";
import {
	HEADER_NAME_ACCEPT_LANGUAGE,
	HEADER_NAME_LANGUAGE
} from "@superoffice/tsclient.webapi/dist/SoApiConstants";

const host: string = "http://localhost/";
const defaultHook = {
	WebhookId: 0,
	Name: null,
	Events: ["contact.created", "contact.deleted"],
	TargetUrl: null,
	Secret: null,
	State: "Active",
	Type: "webhook",
	Headers: null,
	Properties: null,
	Registered: "0001-01-01T00:00:00",
	RegisteredAssociate: null,
	Updated: "0001-01-01T00:00:00",
	UpdatedAssociate: null
};
const aHook = require("./Webhook.json");

axios.defaults.baseURL = host;

describe("WebAPI Webhook tests", () => {
	it("Can create a default hook", done => {
		let scope = nock(host)
			.post("/api/v1/Agents/Webhook/CreateDefaultWebhook")
			.reply(200, defaultHook);

		let agent = new WebhookAgent(host);
		agent.CreateDefaultWebhook().then(response => {
			assert.equal(response.WebhookId, 0);
			assert.equal(response.Name, null);
			assert.equal(response.State, WebhookState.Active);
			assert.equal(response.Type, "webhook");
			done();
		});
	});

	it("Can create a default hook using global defaults", done => {
		let scope = nock(host)
			.post("/api/v1/Agents/Webhook/CreateDefaultWebhook")
			.reply(200, defaultHook);

		let agent1 = new WebhookAgent(host);
		let agent2 = new WebhookAgent();
		agent2.CreateDefaultWebhook().then(response => {
			assert.equal(response.WebhookId, 0);
			assert.equal(response.Name, null);
			assert.equal(response.State, WebhookState.Active);
			assert.equal(response.Type, "webhook");
			done();
		});
	});

	it("Cannot create a default hook with no global defaults", done => {
		AgentsApi.configure(""); // Reset global config
		assert.throws(() => {
			let agent2 = new WebhookAgent();
		});
		done();
	});

	it("Can create a default hook using an options object", done => {
		let scope = nock(host)
			.post("/api/v1/Agents/Webhook/CreateDefaultWebhook")
			.reply(200, defaultHook);

		let opts: WebApiOptions = { baseUrl: host };
		let agent = new WebhookAgent(opts);
		agent.CreateDefaultWebhook().then(response => {
			assert.equal(response.WebhookId, 0);
			assert.equal(response.Name, null);
			assert.equal(response.State, WebhookState.Active);
			assert.equal(response.Type, "webhook");

			done();
		});
	});

	it("Can create a default hook using an axios config object", done => {
		let scope = nock(host, { badheaders: [HEADER_NAME_LANGUAGE] })
			.matchHeader("authorization", "Basic QURNMDo=")
			.post("/api/v1/Agents/Webhook/CreateDefaultWebhook")
			.reply(200, defaultHook);

		let config: AxiosRequestConfig = { auth: { username: "ADM0", password: "" } };
		let agent = new WebhookAgent(host, config);
		agent.CreateDefaultWebhook().then(response => {
			assert.equal(response.WebhookId, 0);
			assert.equal(response.Name, null);
			assert.equal(response.State, WebhookState.Active);
			assert.equal(response.Type, "webhook");
			done();
		});
	});

	it("can create a default hook without parsing languages", done => {
		let scope = nock(host)
			.matchHeader(HEADER_NAME_ACCEPT_LANGUAGE, "")
			.matchHeader(HEADER_NAME_LANGUAGE, "")
			.post("/api/v1/Agents/Webhook/CreateDefaultWebhook")
			.reply(200, defaultHook);

		let config: AxiosRequestConfig = { auth: { username: "ADM0", password: "" } };
		let agent = new WebhookAgent(host, ResourceParsing.DoNotParse);
		agent.CreateDefaultWebhook().then(response => {
			assert.equal(response.WebhookId, 0);
			assert.equal(response.Name, null);
			assert.equal(response.State, WebhookState.Active);
			assert.equal(response.Type, "webhook");
			done();
		});
	});

	it("can create a default hook without parsing languages and a password", done => {
		let scope = nock(host)
			.matchHeader(HEADER_NAME_ACCEPT_LANGUAGE, "")
			.matchHeader(HEADER_NAME_LANGUAGE, "")
			.matchHeader("authorization", "Basic QURNMDo=")
			.post("/api/v1/Agents/Webhook/CreateDefaultWebhook")
			.reply(200, defaultHook);

		let config: AxiosRequestConfig = { auth: { username: "ADM0", password: "" } };
		let agent = new WebhookAgent(host, config, ResourceParsing.DoNotParse);
		agent.CreateDefaultWebhook().then(response => {
			assert.equal(response.WebhookId, 0);
			assert.equal(response.Name, null);
			assert.equal(response.State, WebhookState.Active);
			assert.equal(response.Type, "webhook");
			done();
		});
	});

	it("create a new webhook will reject a non-https target URL", done => {
		let webhook: Webhook = {
			Name: "My hook",
			Events: ["contact.created"],
			Type: "webhook",
			TargetUrl: "https://www.example.com"
		};

		let scope = nock(host)
			.matchHeader("authorization", "Basic QURNMDo=")
			.post("/api/v1/Agents/Webhook/SaveWebhook")
			.reply(400, {
				Error: true,
				ErrorType: "ArgumentException",
				Message: "Webhook TargetUrl must be secure: 'HTTPS:' not found in http://www.example.com",
				ErrorSource: "SuperOffice.Services.Implementation"
			});

		let config: AxiosRequestConfig = { auth: { username: "ADM0", password: "" } };
		let agent = new WebhookAgent(host, config);
		agent.SaveWebhook(webhook).catch(error => {
			assert.equal(error.response.status, 400);
			assert.equal(error.response.data.ErrorType, "ArgumentException");
			done();
		});
	});

	it("create a new webhook will accept a https target URL", done => {
		let webhook: Webhook = {
			Name: "My hook",
			Events: ["contact.created"],
			Type: "webhook",
			TargetUrl: "https://www.example.com"
		};

		let scope = nock(host)
			.matchHeader("authorization", "Basic QURNMDo=")
			.post("/api/v1/Agents/Webhook/SaveWebhook")
			.reply(200, aHook);

		let config: AxiosRequestConfig = { auth: { username: "ADM0", password: "" } };
		let agent = new WebhookAgent(host, config);
		agent.SaveWebhook(webhook).then(hook => {
			assert.equal(hook.TargetUrl, "https://www.example.com");
			assert.equal(hook.Type, "webhook");
			assert.equal(hook.State, WebhookState.Active);
			assert.notEqual(hook.WebhookId, 0);
			done();
		});
	});

	it("create a new webhook will accept a https target URL", done => {
		let scope = nock(host)
			.matchHeader("authorization", "Basic QURNMDo=")
			.post("/api/v1/Agents/Webhook/GetWebhook?webhookId=1")
			.reply(200, aHook);

		let config: AxiosRequestConfig = { auth: { username: "ADM0", password: "" } };
		let agent = new WebhookAgent(host, config);
		agent.GetWebhook(1).then(hook => {
			assert.equal(hook.TargetUrl, "https://www.example.com");
			assert.equal(hook.Type, "webhook");
			assert.equal(hook.State, WebhookState.Active);
			assert.notEqual(hook.WebhookId, 0);
			done();
		});
	});
});
