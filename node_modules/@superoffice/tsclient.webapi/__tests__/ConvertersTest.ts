import { Create_RecurrenceWeekPattern_From, Create_RecurrenceMonthPattern_From, Create_AppointmentArray_From, Create_ContactEntity_From } from "../src/Converters";
import { RecurrenceInfo, Appointment, ContactEntity } from "../src/Carriers";
import { Weekday, ETableRight, EFieldRight } from "../src/Enums";
import * as assert from "assert";

describe("Converter tests", () => {

  it("Test RecurrenceWeekPattern with [Flags] support", (done) => {
    const data: RecurrenceInfo = require("./RecurrenceInfo.json");

    const result = Create_RecurrenceWeekPattern_From(
      data.WeekPattern
    );

    // Server response contains "Monday, Wednesday, Friday"
    assert.ok((result.Weekdays & Weekday.Monday) === Weekday.Monday);
    assert.ok((result.Weekdays & Weekday.Wednesday)  === Weekday.Wednesday);
    assert.ok((result.Weekdays & Weekday.Friday) === Weekday.Friday);

    // Remaining should not be in the result
    assert.ok((result.Weekdays & Weekday.Tuesday) !== Weekday.Tuesday);
    assert.ok((result.Weekdays & Weekday.Thursday) !== Weekday.Thursday);
    assert.ok((result.Weekdays & Weekday.Saturday) !== Weekday.Saturday);
    assert.ok((result.Weekdays & Weekday.Sunday) !== Weekday.Sunday);

    done();
  });

  it("Test RecurrenceMonthPattern with [Flags] support", (done) => {
    const serverResponse: RecurrenceInfo = require("./RecurrenceInfo.json");

    const result = Create_RecurrenceMonthPattern_From(
      serverResponse.MonthPattern
    );

    // Server response contains "Monday, Friday"
    assert.ok((result.Weekday & Weekday.Monday) === Weekday.Monday);
    assert.ok((result.Weekday & Weekday.Friday) === Weekday.Friday);

    // Remaining should not be in the result
    assert.ok((result.Weekday & Weekday.Tuesday) !== Weekday.Tuesday);
    assert.ok((result.Weekday & Weekday.Wednesday) !== Weekday.Wednesday);
    assert.ok((result.Weekday & Weekday.Thursday) !== Weekday.Thursday);
    assert.ok((result.Weekday & Weekday.Saturday) !== Weekday.Saturday);
    assert.ok((result.Weekday & Weekday.Sunday) !== Weekday.Sunday);

    done();
  });

  it("Test Appointment with TableRights with [Flags] support", (done) => {
    const data: Appointment[] = require("./TableRights.json");

    const result = Create_AppointmentArray_From(data);

    // First appointment in response has select and update
    assert.ok((result[0].TableRight.Mask & ETableRight.Select) === ETableRight.Select);
    assert.ok((result[0].TableRight.Mask & ETableRight.Update) === ETableRight.Update);
    // Not insert
    assert.ok(((result[0].TableRight.Mask & ETableRight.Insert) !== ETableRight.Insert));

    // Second appointment in response has FULL
    assert.ok((result[1].TableRight.Mask & ETableRight.Select) === ETableRight.Select);
    assert.ok((result[1].TableRight.Mask & ETableRight.Update) === ETableRight.Update);
    assert.ok((result[1].TableRight.Mask & ETableRight.Insert) === ETableRight.Insert);
    assert.ok((result[1].TableRight.Mask & ETableRight.Delete) === ETableRight.Delete);
    assert.ok((result[1].TableRight.Mask & ETableRight.FULL) === ETableRight.FULL);

    done();
  });

  it("Test Contact with FieldRights with [Flags] support", (done) => {
    const data: any = require("./ContactEntity.json");

    const result = Create_ContactEntity_From(data);

    // First appointment in response has select and update
    assert.ok((result.TableRight.Mask & ETableRight.Select) === ETableRight.Select);
    assert.ok((result.TableRight.Mask & ETableRight.Insert) === ETableRight.Insert);
    assert.ok((result.TableRight.Mask & ETableRight.RI) === ETableRight.RI);
    assert.ok((result.TableRight.Mask & ETableRight.RestrictedUpdate) === ETableRight.RestrictedUpdate);
    // Not delete
    assert.ok(((result.TableRight.Mask & ETableRight.Delete) !== ETableRight.Delete));

    // Check field rights
    assert.ok((result.FieldProperties["ContactId"].FieldRight.Mask & EFieldRight.Read) === EFieldRight.Read);
    assert.ok((result.FieldProperties["ContactId"].FieldRight.Mask & EFieldRight.Write) === EFieldRight.Write);
    assert.ok((result.FieldProperties["ContactId"].FieldRight.Mask & EFieldRight.UIHintMandatory) !== EFieldRight.UIHintMandatory);
    assert.ok((result.FieldProperties["ContactId"].FieldRight.Mask & EFieldRight.UIHintReadOnly) !== EFieldRight.UIHintReadOnly);
    assert.ok((result.FieldProperties["Name"].FieldRight.Mask & EFieldRight.Read) === EFieldRight.Read);
    assert.ok((result.FieldProperties["Name"].FieldRight.Mask & EFieldRight.Update) === EFieldRight.Update);
    assert.ok((result.FieldProperties["Name"].FieldRight.Mask & EFieldRight.UIHintMandatory) === EFieldRight.UIHintMandatory);
    assert.ok((result.FieldProperties["Name"].FieldRight.Mask & EFieldRight.UIHintReadOnly) !== EFieldRight.UIHintReadOnly);
    assert.ok((result.FieldProperties["Name"].FieldRight.Reason === "[SR_MANDATORY_FIELD_1281]"));

    done();
  });
});
