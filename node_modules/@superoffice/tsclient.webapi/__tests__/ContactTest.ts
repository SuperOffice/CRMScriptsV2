import * as assert from "assert";
import axios, { AxiosRequestConfig } from "axios";
import nock = require("nock");
import { WebApiStatus } from "../src/WebApiBase";
import { ContactEntity } from "../src/Carriers";
import { ContactAgent } from "../src/ContactAgent";
import { WebApiRequestOptions } from "@superoffice/tsclient.clientapi";
import { HEADER_NAME_TIMEZONE } from "@superoffice/tsclient.webapi/dist/SoApiConstants";

const host: string = "http://localhost/";
const defaultContact = require("./ContactDefault.json");
const aContact = require("./ContactEntity.json");

axios.defaults.baseURL = host;

describe("WebAPI Contact tests", () => {
	it("Can create a default contact", done => {
		let scope = nock(host)
			.post("/api/v1/Agents/Contact/CreateDefaultContactEntity")
			.reply(200, defaultContact);

		let agent = new ContactAgent(host);
		agent.CreateDefaultContactEntity().then(response => {
			assert.equal(response.ContactId, 0);
			assert.equal(response.Name, "");
			assert.equal(response.Deleted, 0);
			assert.equal(response.Business.Id, 7);
			done();
		});
	});

	it("create a new contact when we save", done => {
		let contact: ContactEntity = { Name: "Bjørge AS", Department: "" };

		let scope = nock(host)
			.matchHeader("authorization", "Basic QURNMDo=")
			.post("/api/v1/Agents/Contact/SaveContactEntity")
			.reply(200, aContact);

		let config: AxiosRequestConfig = { auth: { username: "ADM0", password: "" } };
		let agent = new ContactAgent(host, config);
		agent.SaveContactEntity(contact).then(res => {
			assert.equal(res.Name, "Bjørge AS");
			done();
		});
	});

	it("Get a list of contacts", done => {
		let scope = nock(host)
			.matchHeader("authorization", "Basic QURNMDo=")
			.post("/api/v1/Agents/Contact/GetContactList", [1])
			.reply(200, [aContact]);

		let config: AxiosRequestConfig = { auth: { username: "ADM0", password: "" } };
		let agent = new ContactAgent(host, config);
		agent.GetContactList([1]).then(contact => {
			assert.equal(contact[0].Name, "Bjørge AS");
			assert.notEqual(contact[0].ContactId, 0);
			done();
		});
	});

	it("Get a single contacts", done => {
		let scope = nock(host)
			.matchHeader("authorization", "Basic QURNMDo=")
			.post("/api/v1/Agents/Contact/GetContact?contactId=1")
			.reply(200, aContact);

		let config: AxiosRequestConfig = { auth: { username: "ADM0", password: "" } };
		let agent = new ContactAgent(host, config);
		agent.GetContact(1).then(contact => {
			assert.equal(contact.Name, "Bjørge AS");
			assert.notEqual(contact.ContactId, 0);
			done();
		});
	});

	it("Get a single contacts with tz included", done => {
		let scope = nock(host)
			.matchHeader("authorization", "Basic QURNMDo=")
			.matchHeader(HEADER_NAME_TIMEZONE, "includeTZOffset")
			.post("/api/v1/Agents/Contact/GetContact?contactId=1")
			.reply(200, aContact);

		let config: AxiosRequestConfig = { auth: { username: "ADM0", password: "" } };
		let options: WebApiRequestOptions = { timezoneInclude: true };
		let agent = new ContactAgent(host, config);
		agent.GetContact(1, options).then(contact => {
			assert.equal(contact.Name, "Bjørge AS");
			assert.notEqual(contact.ContactId, 0);
			done();
		});
	});

	it("Get a single contacts with UTC timezone", done => {
		let scope = nock(host)
			.matchHeader("authorization", "Basic QURNMDo=")
			.matchHeader(HEADER_NAME_TIMEZONE, "UTC")
			.post("/api/v1/Agents/Contact/GetContact?contactId=1")
			.reply(200, aContact);

		let config: AxiosRequestConfig = { auth: { username: "ADM0", password: "" } };
		let options: WebApiRequestOptions = { timezone: "UTC" };
		let agent = new ContactAgent(host, config);
		agent.GetContact(1, options).then(contact => {
			assert.equal(contact.Name, "Bjørge AS");
			assert.notEqual(contact.ContactId, 0);
			done();
		});
	});

	it("Get a single contacts with UTC timezone", done => {
		let scope = nock(host)
			.matchHeader("authorization", "Basic QURNMDo=")
			.matchHeader(HEADER_NAME_TIMEZONE, "UTC,includeTZOffset")
			.post("/api/v1/Agents/Contact/GetContact?contactId=1")
			.reply(200, aContact);

		let config: AxiosRequestConfig = { auth: { username: "ADM0", password: "" } };
		let options: WebApiRequestOptions = { timezone: "UTC", timezoneInclude: true };
		let agent = new ContactAgent(host, config);
		agent.GetContact(1, options).then(contact => {
			assert.equal(contact.Name, "Bjørge AS");
			assert.notEqual(contact.ContactId, 0);
			done();
		});
	});
	it("Can setup a cancelable a request", done => {
		let scope = nock(host)
			.matchHeader("authorization", "Basic QURNMDo=")
			.post("/api/v1/Agents/Contact/GetContact?contactId=1")
			.reply(200, aContact);

		let config: AxiosRequestConfig = { auth: { username: "ADM0", password: "" } };
		let agent = new ContactAgent(host, config);
		let options = agent.MakeOptions();
		agent.GetContact(1, options).then(contact => {
			assert.equal(contact.Name, "Bjørge AS");
			assert.notEqual(contact.ContactId, 0);
			assert.equal(options.requestStatus, WebApiStatus.Completed);
			done();
		});
	});

	it("Can cancel a request before calling", done => {
		let scope = nock(host)
			.matchHeader("authorization", "Basic QURNMDo=")
			.post("/api/v1/Agents/Contact/GetContact?contactId=1")
			.reply(200, aContact);

		let config: AxiosRequestConfig = { auth: { username: "ADM0", password: "" } };
		let agent = new ContactAgent(host, config);
		let options = agent.MakeOptions();
		options.cancelToken.cancel("dead on arrival");
		agent
			.GetContact(1, options)
			.then(contact => {
				assert.fail("should not get here");
				done();
			})
			.catch(err => {
				assert.equal(options.requestStatus, WebApiStatus.Cancelled);
				assert.equal(err.message, "dead on arrival");
				done();
			});
	});

	it("Can cancel a request in flight", done => {
		let config: AxiosRequestConfig = { auth: { username: "ADM0", password: "" } };
		let agent = new ContactAgent(host, config);
		let options = agent.MakeOptions();

		console.log("Preflight");
		let scope = nock(host)
			.matchHeader("authorization", "Basic QURNMDo=")
			.post("/api/v1/Agents/Contact/GetContact?contactId=1")
			.delayBody(500) // half second wait
			.reply(function (uri, requestBody, cb) {
				setTimeout(function () {
					console.log("Returning mock");
					cb(null, [200, aContact]);
				}, 1000);
			});

		// Cancel request before half second
		setTimeout(function () {
			console.log("Cancelling request");
			options.cancelToken.cancel("dead on arrival");
		}, 1);

		console.log("Take flight");
		agent
			.GetContact(1, options)
			.then(contact => {
				console.log("Landed");
				assert.fail("should not get here");
				done();
			})
			.catch(err => {
				assert.equal(err.message, "dead on arrival");
				assert.equal(options.requestStatus, WebApiStatus.Cancelled);
				done();
			});
	});

	it("Can cancel a request before calling with AbortController", done => {
		let scope = nock(host)
			.matchHeader("authorization", "Basic QURNMDo=")
			.post("/api/v1/Agents/Contact/GetContact?contactId=1")
			.reply(200, aContact);

		let config: AxiosRequestConfig = { auth: { username: "ADM0", password: "" } };
		let agent = new ContactAgent(host, config);
		let options = agent.MakeAbortableOptions();
		options.abortController.abort();
		agent
			.GetContact(1, options)
			.then(contact => {
				assert.fail("should not get here");
				done();
			})
			.catch(err => {
				assert.equal(options.requestStatus, WebApiStatus.Cancelled);
				done();
			});
	});

	it("Can cancel a request in flight with AbortController", done => {
		let config: AxiosRequestConfig = { auth: { username: "ADM0", password: "" } };
		let agent = new ContactAgent(host, config);
		let options = agent.MakeAbortableOptions();

		console.log("Preflight");
		let scope = nock(host)
			.matchHeader("authorization", "Basic QURNMDo=")
			.post("/api/v1/Agents/Contact/GetContact?contactId=1")
			.delayBody(500) // half second wait
			.reply(function (uri, requestBody, cb) {
				setTimeout(function () {
					console.log("Returning mock");
					cb(null, [200, aContact]);
				}, 1000);
			});

		// Cancel request before half second
		setTimeout(function () {
			console.log("Cancelling request");
			options.abortController.abort();
		}, 1);

		console.log("Take flight");
		agent
			.GetContact(1, options)
			.then(contact => {
				console.log("Landed");
				assert.fail("should not get here");
				done();
			})
			.catch(err => {
				assert.equal(options.requestStatus, WebApiStatus.Cancelled);
				done();
			});
	});

	it("Check if number is valid using params", done => {
		let scope = nock(host)
			.matchHeader("authorization", "Basic QURNMDo=")
			.post("/api/v1/Agents/Contact/IsNumberValid", { ContactId: 123, Number: "foo456" })
			.reply(200, "true");

		let config: AxiosRequestConfig = { auth: { username: "ADM0", password: "" } };
		let agent = new ContactAgent(host, config);
		agent.IsNumberValid(123, "foo456").then(res => {
			assert.equal(res, true);
			done();
		});
	});

	it("Check if number is valid using object", done => {
		let scope = nock(host)
			.matchHeader("authorization", "Basic QURNMDo=")
			.post("/api/v1/Agents/Contact/IsNumberValid", { ContactId: 123, Number: "foo567" })
			.reply(200, "true");

		let config: AxiosRequestConfig = { auth: { username: "ADM0", password: "" } };
		let agent = new ContactAgent(host, config);
		agent.IsNumberValid({ ContactId: 123, Number: "foo567" }).then(res => {
			assert.equal(res, true);
			done();
		});
	});

	it("Check if number is valid using blank params", done => {
		let scope = nock(host)
			.matchHeader("authorization", "Basic QURNMDo=")
			.post("/api/v1/Agents/Contact/IsNumberValid", { ContactId: 123, Number: "" })
			.reply(200, "true");

		let config: AxiosRequestConfig = { auth: { username: "ADM0", password: "" } };
		let agent = new ContactAgent(host, config);
		agent.IsNumberValid(123, "").then(res => {
			assert.equal(res, true);
			done();
		});
	});

	it("Check if number is valid using blank object", done => {
		let scope = nock(host)
			.matchHeader("authorization", "Basic QURNMDo=")
			.post("/api/v1/Agents/Contact/IsNumberValid", { ContactId: 123, Number: "" })
			.reply(200, "true");

		let config: AxiosRequestConfig = { auth: { username: "ADM0", password: "" } };
		let agent = new ContactAgent(host, config);
		agent.IsNumberValid({ ContactId: 123, Number: "" }).then(res => {
			assert.equal(res, true);
			done();
		});
	});

	it("Check if number is valid using null params", done => {
		let scope = nock(host)
			.matchHeader("authorization", "Basic QURNMDo=")
			.post("/api/v1/Agents/Contact/IsNumberValid", { ContactId: 0, Number: null })
			.reply(200, "true");

		let config: AxiosRequestConfig = { auth: { username: "ADM0", password: "" } };
		let agent = new ContactAgent(host, config);
		agent.IsNumberValid(0, null).then(res => {
			assert.equal(res, true);
			done();
		});
	});

	it("Check if number is valid using object", done => {
		let scope = nock(host)
			.matchHeader("authorization", "Basic QURNMDo=")
			.post("/api/v1/Agents/Contact/IsNumberValid", { ContactId: 0, Number: null })
			.reply(200, "true");

		let config: AxiosRequestConfig = { auth: { username: "ADM0", password: "" } };
		let agent = new ContactAgent(host, config);
		agent.IsNumberValid({ ContactId: 0, Number: null }).then(res => {
			assert.equal(res, true);
			done();
		});
	});

	it("Check Threshold callback", done => {
		let scope = nock(host)
			.matchHeader("authorization", "Basic QURNMDo=")
			.post("/api/v1/Agents/Contact/IsNumberValid", { ContactId: 0, Number: null })
			.delay(2000)
			.reply(200, "true");

		let config: AxiosRequestConfig = { auth: { username: "ADM0", password: "" } };
		let agent = new ContactAgent(host, config);
		agent
			.IsNumberValid(
				{ ContactId: 0, Number: null },
				{
					threshold: {
						timeout: 1000,
						callback: () => {
							done();
						}
					}
				}
			)
			.then(res => {});
	});
	it("Check Threshold successCallback", done => {
		let scope = nock(host)
			.matchHeader("authorization", "Basic QURNMDo=")
			.post("/api/v1/Agents/Contact/IsNumberValid", { ContactId: 0, Number: null })
			.delay(500)
			.reply(200, "true");

		let config: AxiosRequestConfig = { auth: { username: "ADM0", password: "" } };
		let agent = new ContactAgent(host, config);
		agent
			.IsNumberValid(
				{ ContactId: 0, Number: null },
				{
					threshold: {
						timeout: 1000,
						successCallback: () => {
							done();
						}
					}
				}
			)
			.then(res => {});
	});
});
